11:09:15: Sata Disconnector Board found in COM1.
11:10:53: ***************************************************** 

11:10:53: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

11:10:53: *                                                   * 

11:10:53: *  Compatibility with this version is not verified! * 

11:10:53: ***************************************************** 

11:10:55: [ DeviceSetupCompletion() , Command count = 7 ] 
11:10:55: Testname Mapping: ScriptName=[RTHHCCallAll02_CallAllReset_1_UHS_I] -> TestId=[RTHHCCallAll02]
11:10:55: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
11:10:55: [ GetPhysicalChipsInfo() , Command count = 9 ] 
11:10:55: [ GetFileSize(0xEA) , Command count = 10 ] 
11:10:55: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
11:10:55: [ GetFileSize(0x16) , Command count = 12 ] 
11:10:55: [ GetCardStatus() , Command count = 13 ] 
11:10:55: [ GetFileSize(0x18) , Command count = 14 ] 
11:10:56: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
11:10:56: [ GetFileSize(0x15) , Command count = 16 ] 
11:10:56: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
11:10:58: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
11:10:58: [ GetFileSize(0xE) , Command count = 18 ] 
11:10:58: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
11:10:58: [ GetFileSize(0x1E) , Command count = 20 ] 
11:10:58: [ GetCardStatus() , Command count = 21 ] 
11:10:58: [ GetFileSize(0x21) , Command count = 22 ] 
11:10:58: [ GetCardStatus() , Command count = 23 ] 
11:10:58: [ GetFileSize(0x33) , Command count = 24 ] 
11:10:58: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
11:10:58: [ GetFileSize(0x1F) , Command count = 26 ] 
11:10:58: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
11:10:58: [ GetFileSize(0x2A) , Command count = 28 ] 
11:10:58: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
11:10:58: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
11:10:58: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
11:10:58: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
11:10:58: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
11:10:58: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
11:10:58: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
11:10:59: [ GetFileSize(0x33) , Command count = 36 ] 
11:10:59: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
11:10:59: [ GetFileSize(0x33) , Command count = 38 ] 
11:10:59: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
11:10:59: [ GetIpVersionInfo() , Command count = 40 ] 
11:10:59: [ GetPhysicalChipsInfo() , Command count = 41 ] 
11:10:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0632E330>, <0x200/0x200, Arb>) , Command count = 42 ] 
11:10:59: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=RTHHCCallAll02 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\RTHHCCallAll02_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-29 11:10:59
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : RTHHCCallAll02
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 42103511110
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\RTHHCCallAll02_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: RTHHCCallAll02_CallAllReset_1_UHS_I >>>>>>>>>>>>>>>



11:10:59: MaxLba of the card: 0x3B72400 
11:11:01: [RTHHCCallAll02_CallAllReset_1_UHS_I.py]###### Test to run callAllReset_2
11:11:01: [RTHHCCallAll02_CallAllReset_1_UHS_I]### TEST SCRIPT IS STARTED.
11:11:01: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py] ##########
11:11:01: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI007_1_1_1_1 ##########
11:11:08: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
11:11:08: [GO7_globalPreTestingSettings]### Default Initialization Start
11:11:08: [DVTCommonLib]###  SwitchHostVoltageRegion called
11:11:08: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
11:11:08: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

11:11:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
11:11:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
11:11:10: [ CardInit() , Command count = 47 ] 
11:11:10: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

11:11:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:10: ####CSD Registe 2.0 Values####
11:11:10: CSD_STRUCTURE                                 :0x1
11:11:10: Reserv1                                       :0x0
11:11:10: Time Access 1 TAAC                            :0xe
11:11:10: Time Access 2 NSAC*100                        :0x0
11:11:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:10: Card Command Classess CCC                     :0x5b5
11:11:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:10: DSR(driver stage register)  DSR_IMP           :0x0
11:11:10: Reserv2                                       :0x0
11:11:10: Device Size C_SIZE                            :0xedc8
11:11:10: Reserv3                                       :0x0
11:11:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:10: Reserv4                                       :0x0
11:11:10: Write Speed Factor R2W_FACTOR                 :0x2
11:11:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:10: FILE_FORMAT_GRP                               :0x0
11:11:10: COPY flag                                     :0x1
11:11:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:10: File_Format                                   :0x0
11:11:10: CRC                                           :0x0
11:11:10: ####CSD Registe Values####  

11:11:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:10: ProductSerialNumber = 0x23482900
11:11:10: CardMaximumLBA      = 0x3b72400
11:11:10: CardCapacity        = 32G
11:11:10: Is card secure      = 0
11:11:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:10: [GO7_globalPreTestingSettings]### Default Initialization Completed 


11:11:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:11:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:13: Host Frequency set to 25000 KHz
11:11:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06488CF0>, 0x0, True) , Command count = 49 ] 
11:11:13: [GO18_globalSetVolt]### Host voltage value is set.
11:11:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x064889C0>, 0x0, False) , Command count = 50 ] 
11:11:13: [GO18_globalSetVolt]### Host voltage value is set.
11:11:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
11:11:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
11:11:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
11:11:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C90>, <py_sfcl.CommandDataDefinition object at 0x06488330>) , Command count = 54 ] 
11:11:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D20>, <py_sfcl.CommandDataDefinition object at 0x06488210>) , Command count = 55 ] 
11:11:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:13: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
11:11:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:13: Host Frequency set to 25000 KHz
11:11:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:13: ####CSD Registe 2.0 Values####
11:11:13: CSD_STRUCTURE                                 :0x1
11:11:13: Reserv1                                       :0x0
11:11:13: Time Access 1 TAAC                            :0xe
11:11:13: Time Access 2 NSAC*100                        :0x0
11:11:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:13: Card Command Classess CCC                     :0x5b5
11:11:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:13: DSR(driver stage register)  DSR_IMP           :0x0
11:11:13: Reserv2                                       :0x0
11:11:13: Device Size C_SIZE                            :0xedc8
11:11:13: Reserv3                                       :0x0
11:11:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:13: Reserv4                                       :0x0
11:11:13: Write Speed Factor R2W_FACTOR                 :0x2
11:11:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:13: FILE_FORMAT_GRP                               :0x0
11:11:13: COPY flag                                     :0x1
11:11:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:13: File_Format                                   :0x0
11:11:13: CRC                                           :0x0
11:11:13: ####CSD Registe Values####  

11:11:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:11:13: [GetSCRRegisterEntry] Passed
11:11:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:11:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:11:13: Data_Status_After Erases          : 0
11:11:13: CPRM Security Support             : No Security
11:11:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:11:13: Spec. Version                     : Version 3.0X
11:11:13: Extended Security Support         : Extended_Security_Not_Supported
11:11:13: Command Support                   : COMMAND_SUPPORT
11:11:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488390>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 57 ] 
11:11:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F30>, <py_sfcl.CommandDataDefinition object at 0x06488DB0>) , Command count = 58 ] 
11:11:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:11:13: [ SetBusWidth(0x4) , Command count = 59 ] 
11:11:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:11:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064883F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
11:11:13: Protected Area Size 0x28000
11:11:13: Bus Width           2
11:11:13: Secure Mode         0
11:11:13: Speed  Class        4
11:11:13: Perf Move           0
11:11:13: Au Size             9
11:11:13: Erase Size          15
11:11:13: Erase Timeout       1
11:11:13: Erase offset        1
11:11:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:11:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:11:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
11:11:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:13: Host Frequency set to 100000 KHz
11:11:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:13: ####CSD Registe 2.0 Values####
11:11:13: CSD_STRUCTURE                                 :0x1
11:11:13: Reserv1                                       :0x0
11:11:13: Time Access 1 TAAC                            :0xe
11:11:13: Time Access 2 NSAC*100                        :0x0
11:11:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:13: Card Command Classess CCC                     :0x5b5
11:11:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:13: DSR(driver stage register)  DSR_IMP           :0x0
11:11:13: Reserv2                                       :0x0
11:11:13: Device Size C_SIZE                            :0xedc8
11:11:13: Reserv3                                       :0x0
11:11:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:13: Reserv4                                       :0x0
11:11:13: Write Speed Factor R2W_FACTOR                 :0x2
11:11:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:13: FILE_FORMAT_GRP                               :0x0
11:11:13: COPY flag                                     :0x1
11:11:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:13: File_Format                                   :0x0
11:11:13: CRC                                           :0x0
11:11:13: ####CSD Registe Values####  

11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DE0>, <py_sfcl.CommandDataDefinition object at 0x06488A50>) , Command count = 62 ] 
11:11:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064880F0>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 63 ] 
11:11:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:11:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064889F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
11:11:13: Protected Area Size 0x28000
11:11:13: Bus Width           2
11:11:13: Secure Mode         0
11:11:13: Speed  Class        4
11:11:13: Perf Move           0
11:11:13: Au Size             9
11:11:13: Erase Size          15
11:11:13: Erase Timeout       1
11:11:13: Erase offset        1
11:11:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:11:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:11:13: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
11:11:15: [RT2HCSDUHSI007_1_1_1_1.py]RESET card
11:11:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 65 ] 
11:11:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:11:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:15: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 66 ] 
11:11:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:15: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
11:11:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488720>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 67 ] 
11:11:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488750>, <py_sfcl.CommandDataDefinition object at 0x06488E70>) , Command count = 68 ] 
11:11:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:15: [ SetCardRCA(0x1, 0xD555) , Command count = 69 ] 
11:11:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:15: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
11:11:15: [ SetBusWidth(0x4) , Command count = 70 ] 
11:11:15: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetTO
11:11:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 71 ] 
11:11:15: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetVolt
11:11:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06488300>, 0x0, True) , Command count = 72 ] 
11:11:15: [GO18_globalSetVolt]### Host voltage value is set.
11:11:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x064AB060>, 0x0, False) , Command count = 73 ] 
11:11:16: [GO18_globalSetVolt]### Host voltage value is set.
11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetLSHostFreq
11:11:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:16: Host Frequency set to 25000 KHz
11:11:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]*********Soft Reset*********
11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]RESET card
11:11:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 74 ] 
11:11:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
11:11:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:11:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
11:11:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB0C0>, <py_sfcl.CommandDataDefinition object at 0x064AB0F0>) , Command count = 75 ] 
11:11:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB150>, <py_sfcl.CommandDataDefinition object at 0x064AB180>) , Command count = 76 ] 
11:11:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:11:16: [ SetCardRCA(0x1, 0xD555) , Command count = 77 ] 
11:11:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
11:11:16: [ SetBusWidth(0x4) , Command count = 78 ] 
11:11:16: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
11:11:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:16: ####CSD Registe 2.0 Values####
11:11:16: CSD_STRUCTURE                                 :0x1
11:11:16: Reserv1                                       :0x0
11:11:16: Time Access 1 TAAC                            :0xe
11:11:16: Time Access 2 NSAC*100                        :0x0
11:11:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:16: Card Command Classess CCC                     :0x5b5
11:11:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:16: DSR(driver stage register)  DSR_IMP           :0x0
11:11:16: Reserv2                                       :0x0
11:11:16: Device Size C_SIZE                            :0xedc8
11:11:16: Reserv3                                       :0x0
11:11:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:16: Reserv4                                       :0x0
11:11:16: Write Speed Factor R2W_FACTOR                 :0x2
11:11:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:16: FILE_FORMAT_GRP                               :0x0
11:11:16: COPY flag                                     :0x1
11:11:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:16: File_Format                                   :0x0
11:11:16: CRC                                           :0x0
11:11:16: ####CSD Registe Values####  

11:11:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:16: ProductSerialNumber = 0x23482900
11:11:16: CardMaximumLBA      = 0x3b72400
11:11:16: CardCapacity        = 32G
11:11:16: Is card secure      = 0
11:11:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:16: [DVTCommonLib]###  LogicalWrite called
11:11:18: [ WriteLba(0x1A00017, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 79 ] 
11:11:18: [DVTCommonLib]###  LogicalWrite Completed 

11:11:18: [DVTCommonLib]###  LogicalRead called
11:11:19: [ ReadLba(0x1A00017, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 80 ] 
11:11:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:19: [RT2HCSDUHSI007_1_1_1_1.py]*********Power Cycle Reset*********
11:11:19: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
11:11:21: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetResetFreq
11:11:21: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:11:21: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:11:21: [RT2HCSDUHSI007_1_1_1_1.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9570>, <py_sfcl.CommandDataDefinition object at 0x064B95A0>) , Command count = 81 ] 
11:11:21: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9660>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 82 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B96F0>, <py_sfcl.CommandDataDefinition object at 0x064B9720>) , Command count = 83 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9780>, <py_sfcl.CommandDataDefinition object at 0x064B97B0>) , Command count = 84 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9810>, <py_sfcl.CommandDataDefinition object at 0x064B9840>) , Command count = 85 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B98A0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 86 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9930>, <py_sfcl.CommandDataDefinition object at 0x064B9960>) , Command count = 87 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B99C0>, <py_sfcl.CommandDataDefinition object at 0x064B99F0>) , Command count = 88 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A50>, <py_sfcl.CommandDataDefinition object at 0x064B9A80>) , Command count = 89 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9AE0>, <py_sfcl.CommandDataDefinition object at 0x064B9B10>) , Command count = 90 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9B70>, <py_sfcl.CommandDataDefinition object at 0x064B9BA0>) , Command count = 91 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C00>, <py_sfcl.CommandDataDefinition object at 0x064B9C30>) , Command count = 92 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C90>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 93 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9D20>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 94 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9DB0>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 95 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9E70>) , Command count = 96 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9ED0>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 97 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9F60>, <py_sfcl.CommandDataDefinition object at 0x064B9F90>) , Command count = 98 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD030>, <py_sfcl.CommandDataDefinition object at 0x064CD060>) , Command count = 99 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD0C0>, <py_sfcl.CommandDataDefinition object at 0x064CD0F0>) , Command count = 100 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD150>, <py_sfcl.CommandDataDefinition object at 0x064CD180>) , Command count = 101 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD1E0>, <py_sfcl.CommandDataDefinition object at 0x064CD210>) , Command count = 102 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD270>, <py_sfcl.CommandDataDefinition object at 0x064CD2A0>) , Command count = 103 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD300>, <py_sfcl.CommandDataDefinition object at 0x064CD330>) , Command count = 104 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD390>, <py_sfcl.CommandDataDefinition object at 0x064CD3C0>) , Command count = 105 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD300>, <py_sfcl.CommandDataDefinition object at 0x064CD330>) , Command count = 106 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD420>, <py_sfcl.CommandDataDefinition object at 0x064CD450>) , Command count = 107 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD4B0>, <py_sfcl.CommandDataDefinition object at 0x064CD4E0>) , Command count = 108 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD540>, <py_sfcl.CommandDataDefinition object at 0x064CD570>) , Command count = 109 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 1, 255, 128, 0, 255]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD5D0>, <py_sfcl.CommandDataDefinition object at 0x064CD600>) , Command count = 110 ] 
11:11:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD660>, <py_sfcl.CommandDataDefinition object at 0x064CD690>) , Command count = 111 ] 
11:11:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:11:21: [ SetCardCap(True) , Command count = 112 ] 
11:11:21: [ SetSdMmcCardMode(0x2, True) , Command count = 113 ] 
11:11:21: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 114 ] 
11:11:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:21: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
11:11:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD8D0>, <py_sfcl.CommandDataDefinition object at 0x064CD900>) , Command count = 115 ] 
11:11:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD960>, <py_sfcl.CommandDataDefinition object at 0x064CD990>) , Command count = 116 ] 
11:11:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:21: [ SetCardRCA(0x1, 0xD555) , Command count = 117 ] 
11:11:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:21: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
11:11:21: [ SetBusWidth(0x4) , Command count = 118 ] 
11:11:21: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetLSHostFreq
11:11:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:22: Host Frequency set to 25000 KHz
11:11:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:22: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
11:11:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:22: ####CSD Registe 2.0 Values####
11:11:22: CSD_STRUCTURE                                 :0x1
11:11:22: Reserv1                                       :0x0
11:11:22: Time Access 1 TAAC                            :0xe
11:11:22: Time Access 2 NSAC*100                        :0x0
11:11:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:22: Card Command Classess CCC                     :0x5b5
11:11:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:22: DSR(driver stage register)  DSR_IMP           :0x0
11:11:22: Reserv2                                       :0x0
11:11:22: Device Size C_SIZE                            :0xedc8
11:11:22: Reserv3                                       :0x0
11:11:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:22: Reserv4                                       :0x0
11:11:22: Write Speed Factor R2W_FACTOR                 :0x2
11:11:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:22: FILE_FORMAT_GRP                               :0x0
11:11:22: COPY flag                                     :0x1
11:11:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:22: File_Format                                   :0x0
11:11:22: CRC                                           :0x0
11:11:22: ####CSD Registe Values####  

11:11:22: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:22: ProductSerialNumber = 0x23482900
11:11:22: CardMaximumLBA      = 0x3b72400
11:11:22: CardCapacity        = 32G
11:11:22: Is card secure      = 0
11:11:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:22: [DVTCommonLib]###  LogicalWrite called
11:11:23: [ WriteLba(0x2FA43C3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 119 ] 
11:11:23: [DVTCommonLib]###  LogicalWrite Completed 

11:11:23: [DVTCommonLib]###  LogicalRead called
11:11:25: [ ReadLba(0x2FA43C3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 120 ] 
11:11:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:25: [RT2HCSDUHSI007_1_1_1_1.py]*********Power Cycle & CMD 0 Reset*********
11:11:25: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
11:11:27: [RT2HCSDUHSI007_1_1_1_1.py]RESET card and IDENTIFICATION of the card
11:11:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 121 ] 
11:11:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:11:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:27: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
11:11:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDA80>, <py_sfcl.CommandDataDefinition object at 0x064CDAB0>) , Command count = 122 ] 
11:11:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDB40>, <py_sfcl.CommandDataDefinition object at 0x064CDB70>) , Command count = 123 ] 
11:11:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:11:27: [ SetCardRCA(0x1, 0xD555) , Command count = 124 ] 
11:11:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:27: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
11:11:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:27: ####CSD Registe 2.0 Values####
11:11:27: CSD_STRUCTURE                                 :0x1
11:11:27: Reserv1                                       :0x0
11:11:27: Time Access 1 TAAC                            :0xe
11:11:27: Time Access 2 NSAC*100                        :0x0
11:11:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:27: Card Command Classess CCC                     :0x5b5
11:11:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:27: DSR(driver stage register)  DSR_IMP           :0x0
11:11:27: Reserv2                                       :0x0
11:11:27: Device Size C_SIZE                            :0xedc8
11:11:27: Reserv3                                       :0x0
11:11:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:27: Reserv4                                       :0x0
11:11:27: Write Speed Factor R2W_FACTOR                 :0x2
11:11:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:27: FILE_FORMAT_GRP                               :0x0
11:11:27: COPY flag                                     :0x1
11:11:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:27: File_Format                                   :0x0
11:11:27: CRC                                           :0x0
11:11:27: ####CSD Registe Values####  

11:11:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:27: ProductSerialNumber = 0x23482900
11:11:27: CardMaximumLBA      = 0x3b72400
11:11:27: CardCapacity        = 32G
11:11:27: Is card secure      = 0
11:11:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:27: [DVTCommonLib]###  LogicalWrite called
11:11:29: [ WriteLba(0x1888344, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 125 ] 
11:11:29: [DVTCommonLib]###  LogicalWrite Completed 

11:11:29: [DVTCommonLib]###  LogicalRead called
11:11:30: [ ReadLba(0x1888344, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 126 ] 
11:11:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:30: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI022_1_1_1_2  ##########
11:11:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:11:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:32: Host Frequency set to 25000 KHz
11:11:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064CDE70>, 0x0, True) , Command count = 127 ] 
11:11:33: [GO18_globalSetVolt]### Host voltage value is set.
11:11:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064CDC90>, 0x0, False) , Command count = 128 ] 
11:11:33: [GO18_globalSetVolt]### Host voltage value is set.
11:11:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 129 ] 
11:11:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 130 ] 
11:11:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 131 ] 
11:11:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDE10>, <py_sfcl.CommandDataDefinition object at 0x064CDDB0>) , Command count = 132 ] 
11:11:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDE40>, <py_sfcl.CommandDataDefinition object at 0x064CDEA0>) , Command count = 133 ] 
11:11:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:33: [ SetCardRCA(0x1, 0xD555) , Command count = 134 ] 
11:11:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:33: Host Frequency set to 25000 KHz
11:11:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:33: ####CSD Registe 2.0 Values####
11:11:33: CSD_STRUCTURE                                 :0x1
11:11:33: Reserv1                                       :0x0
11:11:33: Time Access 1 TAAC                            :0xe
11:11:33: Time Access 2 NSAC*100                        :0x0
11:11:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:33: Card Command Classess CCC                     :0x5b5
11:11:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:33: DSR(driver stage register)  DSR_IMP           :0x0
11:11:33: Reserv2                                       :0x0
11:11:33: Device Size C_SIZE                            :0xedc8
11:11:33: Reserv3                                       :0x0
11:11:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:33: Reserv4                                       :0x0
11:11:33: Write Speed Factor R2W_FACTOR                 :0x2
11:11:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:33: FILE_FORMAT_GRP                               :0x0
11:11:33: COPY flag                                     :0x1
11:11:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:33: File_Format                                   :0x0
11:11:33: CRC                                           :0x0
11:11:33: ####CSD Registe Values####  

11:11:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:11:33: [GetSCRRegisterEntry] Passed
11:11:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:11:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:11:33: Data_Status_After Erases          : 0
11:11:33: CPRM Security Support             : No Security
11:11:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:11:33: Spec. Version                     : Version 3.0X
11:11:33: Extended Security Support         : Extended_Security_Not_Supported
11:11:33: Command Support                   : COMMAND_SUPPORT
11:11:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDF30>, <py_sfcl.CommandDataDefinition object at 0x064CDF60>) , Command count = 135 ] 
11:11:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDFC0>, <py_sfcl.CommandDataDefinition object at 0x064D7150>) , Command count = 136 ] 
11:11:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:11:33: [ SetBusWidth(0x4) , Command count = 137 ] 
11:11:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:11:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064D70C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 138 ] 
11:11:33: Protected Area Size 0x28000
11:11:33: Bus Width           2
11:11:33: Secure Mode         0
11:11:33: Speed  Class        4
11:11:33: Perf Move           0
11:11:33: Au Size             9
11:11:33: Erase Size          15
11:11:33: Erase Timeout       1
11:11:33: Erase offset        1
11:11:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:11:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:11:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 139 ] 
11:11:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:33: Host Frequency set to 100000 KHz
11:11:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:33: ####CSD Registe 2.0 Values####
11:11:33: CSD_STRUCTURE                                 :0x1
11:11:33: Reserv1                                       :0x0
11:11:33: Time Access 1 TAAC                            :0xe
11:11:33: Time Access 2 NSAC*100                        :0x0
11:11:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:33: Card Command Classess CCC                     :0x5b5
11:11:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:33: DSR(driver stage register)  DSR_IMP           :0x0
11:11:33: Reserv2                                       :0x0
11:11:33: Device Size C_SIZE                            :0xedc8
11:11:33: Reserv3                                       :0x0
11:11:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:33: Reserv4                                       :0x0
11:11:33: Write Speed Factor R2W_FACTOR                 :0x2
11:11:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:33: FILE_FORMAT_GRP                               :0x0
11:11:33: COPY flag                                     :0x1
11:11:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:33: File_Format                                   :0x0
11:11:33: CRC                                           :0x0
11:11:33: ####CSD Registe Values####  

11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7390>, <py_sfcl.CommandDataDefinition object at 0x064D71B0>) , Command count = 140 ] 
11:11:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7210>, <py_sfcl.CommandDataDefinition object at 0x064D7240>) , Command count = 141 ] 
11:11:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetTO
11:11:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 142 ] 
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetTO CALL got Completed 

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetVolt
11:11:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064D7300>, 0x0, True) , Command count = 143 ] 
11:11:33: [GO18_globalSetVolt]### Host voltage value is set.
11:11:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064D7330>, 0x0, False) , Command count = 144 ] 
11:11:33: [GO18_globalSetVolt]### Host voltage value is set.
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py] globalSetVolt CALL got Completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
11:11:33: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:11:33: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetResetFreq CALL got Completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]***Test CMD 8' s out of sequence during Soft Reset***
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]SET RCA
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]setting of RCA value completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Run cmd0, cmd8, cmd55, acmd41
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
11:11:33: [ HostReset(False) , Command count = 145 ] 
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]: Run Cmd0()
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7450>, <py_sfcl.CommandDataDefinition object at 0x064D7480>) , Command count = 146 ] 
11:11:33: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]: Cmd0() Execution successfull

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D74E0>, <py_sfcl.CommandDataDefinition object at 0x064D7510>) , Command count = 147 ] 
11:11:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9630>, <py_sfcl.CommandDataDefinition object at 0x064D75A0>) , Command count = 148 ] 
11:11:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7570>, <py_sfcl.CommandDataDefinition object at 0x064D7630>) , Command count = 149 ] 
11:11:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7600>, <py_sfcl.CommandDataDefinition object at 0x064D76C0>) , Command count = 150 ] 
11:11:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7690>, <py_sfcl.CommandDataDefinition object at 0x064D7750>) , Command count = 151 ] 
11:11:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D77B0>, <py_sfcl.CommandDataDefinition object at 0x064D77E0>) , Command count = 152 ] 
11:11:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7840>, <py_sfcl.CommandDataDefinition object at 0x064D7870>) , Command count = 153 ] 
11:11:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D78D0>, <py_sfcl.CommandDataDefinition object at 0x064D7900>) , Command count = 154 ] 
11:11:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7960>, <py_sfcl.CommandDataDefinition object at 0x064D7990>) , Command count = 155 ] 
11:11:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D79F0>, <py_sfcl.CommandDataDefinition object at 0x064D7A20>) , Command count = 156 ] 
11:11:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
11:11:33: [ SetCardCap(True) , Command count = 157 ] 
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Setting Capacity of the card Completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
11:11:33: [ SetSdMmcCardMode(0x2, True) , Command count = 158 ] 
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Card mode got Changed to SD

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test begins
11:11:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7AE0>, <py_sfcl.CommandDataDefinition object at 0x064D7B10>) , Command count = 159 ] 
11:11:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7B70>, <py_sfcl.CommandDataDefinition object at 0x064D7BA0>) , Command count = 160 ] 
11:11:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:11:33: [ SetCardRCA(0x1, 0xD555) , Command count = 161 ] 
11:11:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test Completed

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
11:11:33: [ SetBusWidth(0x4) , Command count = 162 ] 
11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]Card bus width got set to 4 

11:11:33: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
11:11:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:34: Host Frequency set to 25000 KHz
11:11:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:34: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetResetFreq CALL got Completed

11:11:34: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode
11:11:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 163 ] 
11:11:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:34: Host Frequency set to 100000 KHz
11:11:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:34: ####CSD Registe 2.0 Values####
11:11:34: CSD_STRUCTURE                                 :0x1
11:11:34: Reserv1                                       :0x0
11:11:34: Time Access 1 TAAC                            :0xe
11:11:34: Time Access 2 NSAC*100                        :0x0
11:11:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:34: Card Command Classess CCC                     :0x5b5
11:11:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:34: DSR(driver stage register)  DSR_IMP           :0x0
11:11:34: Reserv2                                       :0x0
11:11:34: Device Size C_SIZE                            :0xedc8
11:11:34: Reserv3                                       :0x0
11:11:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:34: Reserv4                                       :0x0
11:11:34: Write Speed Factor R2W_FACTOR                 :0x2
11:11:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:34: FILE_FORMAT_GRP                               :0x0
11:11:34: COPY flag                                     :0x1
11:11:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:34: File_Format                                   :0x0
11:11:34: CRC                                           :0x0
11:11:34: ####CSD Registe Values####  

11:11:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7ED0>, <py_sfcl.CommandDataDefinition object at 0x064D7CC0>) , Command count = 164 ] 
11:11:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7D20>, <py_sfcl.CommandDataDefinition object at 0x064D7D50>) , Command count = 165 ] 
11:11:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:34: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode CALL Completed

11:11:34: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
11:11:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:34: ####CSD Registe 2.0 Values####
11:11:34: CSD_STRUCTURE                                 :0x1
11:11:34: Reserv1                                       :0x0
11:11:34: Time Access 1 TAAC                            :0xe
11:11:34: Time Access 2 NSAC*100                        :0x0
11:11:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:34: Card Command Classess CCC                     :0x5b5
11:11:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:34: DSR(driver stage register)  DSR_IMP           :0x0
11:11:34: Reserv2                                       :0x0
11:11:34: Device Size C_SIZE                            :0xedc8
11:11:34: Reserv3                                       :0x0
11:11:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:34: Reserv4                                       :0x0
11:11:34: Write Speed Factor R2W_FACTOR                 :0x2
11:11:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:34: FILE_FORMAT_GRP                               :0x0
11:11:34: COPY flag                                     :0x1
11:11:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:34: File_Format                                   :0x0
11:11:34: CRC                                           :0x0
11:11:34: ####CSD Registe Values####  

11:11:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:34: ProductSerialNumber = 0x23482900
11:11:34: CardMaximumLBA      = 0x3b72400
11:11:34: CardCapacity        = 32G
11:11:34: Is card secure      = 0
11:11:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:34: [DVTCommonLib]###  LogicalWrite called
11:11:35: [ WriteLba(0x12A8C1C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 166 ] 
11:11:35: [DVTCommonLib]###  LogicalWrite Completed 

11:11:35: [DVTCommonLib]###  LogicalRead called
11:11:37: [ ReadLba(0x12A8C1C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 167 ] 
11:11:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:37: [RT2HCSDUHSI022_1_1_1_2.py]: AddressForWriteRead CALL Completed

11:11:37: [RT2HCSDUHSI022_1_1_1_2.py]***Test CMD 8' s out of sequence during  Power Cycle Reset***
11:11:37: [RT2HCSDUHSI022_1_1_1_2.py]POWER : OFF and ON
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
11:11:39: [ HostReset(False) , Command count = 168 ] 
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
11:11:39: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:11:39: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq Completed 

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]: Set RCA value
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]: RCA value got set

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7E10>, <py_sfcl.CommandDataDefinition object at 0x064D7E70>) , Command count = 169 ] 
11:11:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7720>, <py_sfcl.CommandDataDefinition object at 0x064D7F60>) , Command count = 170 ] 
11:11:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7F30>, <py_sfcl.CommandDataDefinition object at 0x064DF030>) , Command count = 171 ] 
11:11:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7FC0>, <py_sfcl.CommandDataDefinition object at 0x064DF0C0>) , Command count = 172 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF120>, <py_sfcl.CommandDataDefinition object at 0x064DF150>) , Command count = 173 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF1B0>, <py_sfcl.CommandDataDefinition object at 0x064DF1E0>) , Command count = 174 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF240>, <py_sfcl.CommandDataDefinition object at 0x064DF270>) , Command count = 175 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF2D0>, <py_sfcl.CommandDataDefinition object at 0x064DF300>) , Command count = 176 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 177 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF3F0>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 178 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF480>, <py_sfcl.CommandDataDefinition object at 0x064DF4B0>) , Command count = 179 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF510>, <py_sfcl.CommandDataDefinition object at 0x064DF540>) , Command count = 180 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF5A0>, <py_sfcl.CommandDataDefinition object at 0x064DF5D0>) , Command count = 181 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF630>, <py_sfcl.CommandDataDefinition object at 0x064DF660>) , Command count = 182 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF6C0>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 183 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 184 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF7E0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 185 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF870>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 186 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF900>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 187 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF990>, <py_sfcl.CommandDataDefinition object at 0x064DF9C0>) , Command count = 188 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFA20>, <py_sfcl.CommandDataDefinition object at 0x064DFA50>) , Command count = 189 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFAB0>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 190 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 191 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFBD0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 192 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFC60>, <py_sfcl.CommandDataDefinition object at 0x064DFC90>) , Command count = 193 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFCF0>, <py_sfcl.CommandDataDefinition object at 0x064DFD20>) , Command count = 194 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFD80>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 195 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFE10>, <py_sfcl.CommandDataDefinition object at 0x064DFE40>) , Command count = 196 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFEA0>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 197 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFF30>, <py_sfcl.CommandDataDefinition object at 0x064DFF60>) , Command count = 198 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFFC0>, <py_sfcl.CommandDataDefinition object at 0x06506030>) , Command count = 199 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506090>, <py_sfcl.CommandDataDefinition object at 0x065060C0>) , Command count = 200 ] 
11:11:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506120>, <py_sfcl.CommandDataDefinition object at 0x06506150>) , Command count = 201 ] 
11:11:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
11:11:39: [ SetCardCap(True) , Command count = 202 ] 
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Setting up of Card Capacity Completed

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
11:11:39: [ SetSdMmcCardMode(0x2, True) , Command count = 203 ] 
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Card mode got Changed to SD

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 204 ] 
11:11:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Identification of the card Begins
11:11:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 205 ] 
11:11:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065062D0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 206 ] 
11:11:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:39: [ SetCardRCA(0x1, 0xD555) , Command count = 207 ] 
11:11:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]:Identification Test got Completed

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
11:11:39: [ SetBusWidth(0x4) , Command count = 208 ] 
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py] Bus width as got changed to 4

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetHostFreq
11:11:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:39: Host Frequency set to 25000 KHz
11:11:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalsetHostFreq Completed

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode
11:11:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 209 ] 
11:11:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:39: Host Frequency set to 100000 KHz
11:11:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:39: ####CSD Registe 2.0 Values####
11:11:39: CSD_STRUCTURE                                 :0x1
11:11:39: Reserv1                                       :0x0
11:11:39: Time Access 1 TAAC                            :0xe
11:11:39: Time Access 2 NSAC*100                        :0x0
11:11:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:39: Card Command Classess CCC                     :0x5b5
11:11:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:39: DSR(driver stage register)  DSR_IMP           :0x0
11:11:39: Reserv2                                       :0x0
11:11:39: Device Size C_SIZE                            :0xedc8
11:11:39: Reserv3                                       :0x0
11:11:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:39: Reserv4                                       :0x0
11:11:39: Write Speed Factor R2W_FACTOR                 :0x2
11:11:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:39: FILE_FORMAT_GRP                               :0x0
11:11:39: COPY flag                                     :0x1
11:11:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:39: File_Format                                   :0x0
11:11:39: CRC                                           :0x0
11:11:39: ####CSD Registe Values####  

11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506600>, <py_sfcl.CommandDataDefinition object at 0x065063F0>) , Command count = 210 ] 
11:11:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506450>, <py_sfcl.CommandDataDefinition object at 0x06506480>) , Command count = 211 ] 
11:11:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetSpeedMode CALL Completed

11:11:39: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
11:11:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:39: ####CSD Registe 2.0 Values####
11:11:40: CSD_STRUCTURE                                 :0x1
11:11:40: Reserv1                                       :0x0
11:11:40: Time Access 1 TAAC                            :0xe
11:11:40: Time Access 2 NSAC*100                        :0x0
11:11:40: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:40: Card Command Classess CCC                     :0x5b5
11:11:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:40: DSR(driver stage register)  DSR_IMP           :0x0
11:11:40: Reserv2                                       :0x0
11:11:40: Device Size C_SIZE                            :0xedc8
11:11:40: Reserv3                                       :0x0
11:11:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:40: Reserv4                                       :0x0
11:11:40: Write Speed Factor R2W_FACTOR                 :0x2
11:11:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:40: FILE_FORMAT_GRP                               :0x0
11:11:40: COPY flag                                     :0x1
11:11:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:40: File_Format                                   :0x0
11:11:40: CRC                                           :0x0
11:11:40: ####CSD Registe Values####  

11:11:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:40: ProductSerialNumber = 0x23482900
11:11:40: CardMaximumLBA      = 0x3b72400
11:11:40: CardCapacity        = 32G
11:11:40: Is card secure      = 0
11:11:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:40: [DVTCommonLib]###  LogicalWrite called
11:11:41: [ WriteLba(0x390D53C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 212 ] 
11:11:41: [DVTCommonLib]###  LogicalWrite Completed 

11:11:41: [DVTCommonLib]###  LogicalRead called
11:11:43: [ ReadLba(0x390D53C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 213 ] 
11:11:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:43: [RT2HCSDUHSI022_1_1_1_2.py]: AddressForWriteRead CALL Completed

11:11:43: [RT2HCSDUHSI022_1_1_1_2.py]***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
11:11:43: [RT2HCSDUHSI022_1_1_1_2.py]POWER : OFF and ON
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
11:11:45: [ HostReset(False) , Command count = 214 ] 
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
11:11:45: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:11:45: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalsetHostFreq Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]: Set RCA value
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]: RCA value got set

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]: Run Cmd0()
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506540>, <py_sfcl.CommandDataDefinition object at 0x06506570>) , Command count = 215 ] 
11:11:45: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]: Cmd0() Execution successfull

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506660>, <py_sfcl.CommandDataDefinition object at 0x06506690>) , Command count = 216 ] 
11:11:45: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF090>, <py_sfcl.CommandDataDefinition object at 0x06506720>) , Command count = 217 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506780>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 218 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 219 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065068A0>, <py_sfcl.CommandDataDefinition object at 0x065068D0>) , Command count = 220 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506930>, <py_sfcl.CommandDataDefinition object at 0x06506960>) , Command count = 221 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065069C0>, <py_sfcl.CommandDataDefinition object at 0x065069F0>) , Command count = 222 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506A50>, <py_sfcl.CommandDataDefinition object at 0x06506A80>) , Command count = 223 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506AE0>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 224 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506B70>, <py_sfcl.CommandDataDefinition object at 0x06506BA0>) , Command count = 225 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 226 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x06506CC0>) , Command count = 227 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506D20>, <py_sfcl.CommandDataDefinition object at 0x06506D50>) , Command count = 228 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506DB0>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 229 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506E40>, <py_sfcl.CommandDataDefinition object at 0x06506E70>) , Command count = 230 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506ED0>, <py_sfcl.CommandDataDefinition object at 0x06506F00>) , Command count = 231 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506F60>, <py_sfcl.CommandDataDefinition object at 0x06506F90>) , Command count = 232 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 233 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065080C0>, <py_sfcl.CommandDataDefinition object at 0x065080F0>) , Command count = 234 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508150>, <py_sfcl.CommandDataDefinition object at 0x06508180>) , Command count = 235 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065081E0>, <py_sfcl.CommandDataDefinition object at 0x06508210>) , Command count = 236 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508270>, <py_sfcl.CommandDataDefinition object at 0x065082A0>) , Command count = 237 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508300>, <py_sfcl.CommandDataDefinition object at 0x06508330>) , Command count = 238 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508390>, <py_sfcl.CommandDataDefinition object at 0x065083C0>) , Command count = 239 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508420>, <py_sfcl.CommandDataDefinition object at 0x06508450>) , Command count = 240 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065084B0>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 241 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508540>, <py_sfcl.CommandDataDefinition object at 0x06508570>) , Command count = 242 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065085D0>, <py_sfcl.CommandDataDefinition object at 0x06508600>) , Command count = 243 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508660>, <py_sfcl.CommandDataDefinition object at 0x06508690>) , Command count = 244 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065086F0>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 245 ] 
11:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508780>, <py_sfcl.CommandDataDefinition object at 0x065087B0>) , Command count = 246 ] 
11:11:45: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
11:11:45: [ SetCardCap(True) , Command count = 247 ] 
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Setting Card Capacity was successful 

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
11:11:45: [ SetSdMmcCardMode(0x2, True) , Command count = 248 ] 
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]card mode got set to SD successfully

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py] SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 249 ] 
11:11:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Identification of the card begins
11:11:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065088A0>, <py_sfcl.CommandDataDefinition object at 0x065088D0>) , Command count = 250 ] 
11:11:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 251 ] 
11:11:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:45: [ SetCardRCA(0x1, 0xD555) , Command count = 252 ] 
11:11:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
11:11:45: [ SetBusWidth(0x4) , Command count = 253 ] 
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]Setting card bus width to 4 Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetLSHostFreq
11:11:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:45: Host Frequency set to 25000 KHz
11:11:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetLSHostFreq CALL Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL: globalSetSpeedMode
11:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 254 ] 
11:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:45: Host Frequency set to 100000 KHz
11:11:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:45: ####CSD Registe 2.0 Values####
11:11:45: CSD_STRUCTURE                                 :0x1
11:11:45: Reserv1                                       :0x0
11:11:45: Time Access 1 TAAC                            :0xe
11:11:45: Time Access 2 NSAC*100                        :0x0
11:11:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:45: Card Command Classess CCC                     :0x5b5
11:11:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:45: DSR(driver stage register)  DSR_IMP           :0x0
11:11:45: Reserv2                                       :0x0
11:11:45: Device Size C_SIZE                            :0xedc8
11:11:45: Reserv3                                       :0x0
11:11:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:45: Reserv4                                       :0x0
11:11:45: Write Speed Factor R2W_FACTOR                 :0x2
11:11:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:45: FILE_FORMAT_GRP                               :0x0
11:11:45: COPY flag                                     :0x1
11:11:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:45: File_Format                                   :0x0
11:11:45: CRC                                           :0x0
11:11:45: ####CSD Registe Values####  

11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DC8CC0>, <py_sfcl.CommandDataDefinition object at 0x05DC8D20>) , Command count = 255 ] 
11:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDE0C0>, <py_sfcl.CommandDataDefinition object at 0x065089F0>) , Command count = 256 ] 
11:11:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetSpeedMode CALL Completed

11:11:45: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
11:11:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:45: ####CSD Registe 2.0 Values####
11:11:45: CSD_STRUCTURE                                 :0x1
11:11:45: Reserv1                                       :0x0
11:11:45: Time Access 1 TAAC                            :0xe
11:11:45: Time Access 2 NSAC*100                        :0x0
11:11:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:45: Card Command Classess CCC                     :0x5b5
11:11:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:45: DSR(driver stage register)  DSR_IMP           :0x0
11:11:45: Reserv2                                       :0x0
11:11:45: Device Size C_SIZE                            :0xedc8
11:11:45: Reserv3                                       :0x0
11:11:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:45: Reserv4                                       :0x0
11:11:45: Write Speed Factor R2W_FACTOR                 :0x2
11:11:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:45: FILE_FORMAT_GRP                               :0x0
11:11:45: COPY flag                                     :0x1
11:11:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:45: File_Format                                   :0x0
11:11:45: CRC                                           :0x0
11:11:45: ####CSD Registe Values####  

11:11:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:45: ProductSerialNumber = 0x23482900
11:11:45: CardMaximumLBA      = 0x3b72400
11:11:45: CardCapacity        = 32G
11:11:45: Is card secure      = 0
11:11:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:45: [DVTCommonLib]###  LogicalWrite called
11:11:47: [ WriteLba(0x17E672A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 257 ] 
11:11:47: [DVTCommonLib]###  LogicalWrite Completed 

11:11:47: [DVTCommonLib]###  LogicalRead called
11:11:49: [ ReadLba(0x17E672A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 258 ] 
11:11:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:49: [RT2HCSDUHSI022_1_1_1_2.py] AddressForWriteRead CALL Completed
11:11:49: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI032_1_1_1_2a ##########
11:11:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:11:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:51: Host Frequency set to 25000 KHz
11:11:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE6120>, 0x0, True) , Command count = 259 ] 
11:11:51: [GO18_globalSetVolt]### Host voltage value is set.
11:11:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE61B0>, 0x0, False) , Command count = 260 ] 
11:11:51: [GO18_globalSetVolt]### Host voltage value is set.
11:11:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 261 ] 
11:11:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 262 ] 
11:11:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 263 ] 
11:11:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6C00>, <py_sfcl.CommandDataDefinition object at 0x06508A50>) , Command count = 264 ] 
11:11:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6270>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 265 ] 
11:11:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:51: [ SetCardRCA(0x1, 0xD555) , Command count = 266 ] 
11:11:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:51: Host Frequency set to 25000 KHz
11:11:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:51: ####CSD Registe 2.0 Values####
11:11:51: CSD_STRUCTURE                                 :0x1
11:11:51: Reserv1                                       :0x0
11:11:51: Time Access 1 TAAC                            :0xe
11:11:51: Time Access 2 NSAC*100                        :0x0
11:11:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:51: Card Command Classess CCC                     :0x5b5
11:11:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:51: DSR(driver stage register)  DSR_IMP           :0x0
11:11:51: Reserv2                                       :0x0
11:11:51: Device Size C_SIZE                            :0xedc8
11:11:51: Reserv3                                       :0x0
11:11:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:51: Reserv4                                       :0x0
11:11:51: Write Speed Factor R2W_FACTOR                 :0x2
11:11:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:51: FILE_FORMAT_GRP                               :0x0
11:11:51: COPY flag                                     :0x1
11:11:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:51: File_Format                                   :0x0
11:11:51: CRC                                           :0x0
11:11:51: ####CSD Registe Values####  

11:11:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:11:51: [GetSCRRegisterEntry] Passed
11:11:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:11:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:11:51: Data_Status_After Erases          : 0
11:11:51: CPRM Security Support             : No Security
11:11:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:11:51: Spec. Version                     : Version 3.0X
11:11:51: Extended Security Support         : Extended_Security_Not_Supported
11:11:51: Command Support                   : COMMAND_SUPPORT
11:11:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6C30>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 267 ] 
11:11:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6C60>, <py_sfcl.CommandDataDefinition object at 0x06508BD0>) , Command count = 268 ] 
11:11:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:11:51: [ SetBusWidth(0x4) , Command count = 269 ] 
11:11:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:11:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06508C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 270 ] 
11:11:51: Protected Area Size 0x28000
11:11:51: Bus Width           2
11:11:51: Secure Mode         0
11:11:51: Speed  Class        4
11:11:51: Perf Move           0
11:11:51: Au Size             9
11:11:51: Erase Size          15
11:11:51: Erase Timeout       1
11:11:51: Erase offset        1
11:11:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:11:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:11:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:11:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 271 ] 
11:11:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:11:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:11:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:11:51: Host Frequency set to 100000 KHz
11:11:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:11:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:51: ####CSD Registe 2.0 Values####
11:11:51: CSD_STRUCTURE                                 :0x1
11:11:51: Reserv1                                       :0x0
11:11:51: Time Access 1 TAAC                            :0xe
11:11:51: Time Access 2 NSAC*100                        :0x0
11:11:51: Data Transfer Rate TRAN_SPEED                 :0xb
11:11:51: Card Command Classess CCC                     :0x5b5
11:11:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:51: DSR(driver stage register)  DSR_IMP           :0x0
11:11:51: Reserv2                                       :0x0
11:11:51: Device Size C_SIZE                            :0xedc8
11:11:51: Reserv3                                       :0x0
11:11:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:51: Reserv4                                       :0x0
11:11:51: Write Speed Factor R2W_FACTOR                 :0x2
11:11:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:51: FILE_FORMAT_GRP                               :0x0
11:11:51: COPY flag                                     :0x1
11:11:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:51: File_Format                                   :0x0
11:11:51: CRC                                           :0x0
11:11:51: ####CSD Registe Values####  

11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7B10>, <py_sfcl.CommandDataDefinition object at 0x06508EA0>) , Command count = 272 ] 
11:11:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x06508CF0>) , Command count = 273 ] 
11:11:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:11:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:11:51: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
11:11:53: [RT2HCSDUHSI032_1_1_1_2a.py]RESET card with CMD 8 and IDENTIFICATION of the card
11:11:53: [RT2HCSDUHSI032_1_1_1_2a.py]RESET card
11:11:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:11:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 274 ] 
11:11:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:11:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:11:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:11:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:11:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 275 ] 
11:11:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card
11:11:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD79F0>, <py_sfcl.CommandDataDefinition object at 0x06508D50>) , Command count = 276 ] 
11:11:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x06508DE0>) , Command count = 277 ] 
11:11:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:11:54: [ SetCardRCA(0x1, 0xD555) , Command count = 278 ] 
11:11:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
11:11:54: [ SetBusWidth(0x4) , Command count = 279 ] 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py] Bus width as got changed to 4

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetTO
11:11:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 280 ] 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetTO CALL got Completed 

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetVolt
11:11:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:11:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:11:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFAA80>, 0x0, True) , Command count = 281 ] 
11:11:54: [GO18_globalSetVolt]### Host voltage value is set.
11:11:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:11:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFAB10>, 0x0, False) , Command count = 282 ] 
11:11:54: [GO18_globalSetVolt]### Host voltage value is set.
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py] globalSetVolt CALL got Completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
11:11:54: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:11:54: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetResetFreq CALL got Completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]***Test CMD 8' s out of sequence during Soft Reset***
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]SET RCA
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]setting of RCA value completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: Run Cmd0()
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABA0>, <py_sfcl.CommandDataDefinition object at 0x06508ED0>) , Command count = 283 ] 
11:11:54: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: Cmd0() Execution successfull

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat1_CMD8_SD_HIGH for 0 times 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508F30>) , Command count = 284 ] 
11:11:54: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xC0']
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat1_CMD8_SD_HIGH for 1 times 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065066F0>, <py_sfcl.CommandDataDefinition object at 0x06508FC0>) , Command count = 285 ] 
11:11:54: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x6B', 'CRC 7']
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC00>, <py_sfcl.CommandDataDefinition object at 0x0650C030>) , Command count = 286 ] 
11:11:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDE030>, <py_sfcl.CommandDataDefinition object at 0x0650C090>) , Command count = 287 ] 
11:11:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFACC0>, <py_sfcl.CommandDataDefinition object at 0x0650C0F0>) , Command count = 288 ] 
11:11:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC60>, <py_sfcl.CommandDataDefinition object at 0x0650C150>) , Command count = 289 ] 
11:11:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC90>, <py_sfcl.CommandDataDefinition object at 0x0650C1B0>) , Command count = 290 ] 
11:11:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAF30>, <py_sfcl.CommandDataDefinition object at 0x0650C210>) , Command count = 291 ] 
11:11:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
11:11:54: [ SetCardCap(True) , Command count = 292 ] 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Setting Capacity of the card Completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
11:11:54: [ SetSdMmcCardMode(0x2, True) , Command count = 293 ] 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Card mode got Changed to SD

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test begins
11:11:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E5D0>, <py_sfcl.CommandDataDefinition object at 0x0632E450>) , Command count = 294 ] 
11:11:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:11:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488690>, <py_sfcl.CommandDataDefinition object at 0x0650C2A0>) , Command count = 295 ] 
11:11:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:11:54: [ SetCardRCA(0x1, 0xD555) , Command count = 296 ] 
11:11:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test Completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
11:11:54: [ SetBusWidth(0x4) , Command count = 297 ] 
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]Card bus width got set to 4 

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
11:11:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:11:54: Host Frequency set to 25000 KHz
11:11:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetResetFreq CALL got Completed

11:11:54: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
11:11:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:11:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:11:54: ####CSD Registe 2.0 Values####
11:11:54: CSD_STRUCTURE                                 :0x1
11:11:54: Reserv1                                       :0x0
11:11:54: Time Access 1 TAAC                            :0xe
11:11:54: Time Access 2 NSAC*100                        :0x0
11:11:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:11:54: Card Command Classess CCC                     :0x5b5
11:11:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:11:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:11:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:11:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:11:54: DSR(driver stage register)  DSR_IMP           :0x0
11:11:54: Reserv2                                       :0x0
11:11:54: Device Size C_SIZE                            :0xedc8
11:11:54: Reserv3                                       :0x0
11:11:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:11:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:11:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:11:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:11:54: Reserv4                                       :0x0
11:11:54: Write Speed Factor R2W_FACTOR                 :0x2
11:11:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:11:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:11:54: FILE_FORMAT_GRP                               :0x0
11:11:54: COPY flag                                     :0x1
11:11:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:11:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:11:54: File_Format                                   :0x0
11:11:54: CRC                                           :0x0
11:11:54: ####CSD Registe Values####  

11:11:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:11:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:11:54: ProductSerialNumber = 0x23482900
11:11:54: CardMaximumLBA      = 0x3b72400
11:11:54: CardCapacity        = 32G
11:11:54: Is card secure      = 0
11:11:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:11:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:11:54: [DVTCommonLib]###  LogicalWrite called
11:11:56: [ WriteLba(0x1DF8440, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 298 ] 
11:11:56: [DVTCommonLib]###  LogicalWrite Completed 

11:11:56: [DVTCommonLib]###  LogicalRead called
11:11:57: [ ReadLba(0x1DF8440, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 299 ] 
11:11:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:11:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:11:57: [RT2HCSDUHSI032_1_1_1_2a.py]: AddressForWriteRead CALL Completed

11:11:57: [RT2HCSDUHSI032_1_1_1_2a.py]***Test CMD 8' s out of sequence during  Power Cycle Reset***
11:11:57: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]: Set RCA value
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]: RCA value got set

11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat2_CMD8_SD_HIGH for 0 times 
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C60>, <py_sfcl.CommandDataDefinition object at 0x06488120>) , Command count = 300 ] 
11:11:59: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x43', 'CRC 7']
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat2_CMD8_SD_HIGH for 1 times 
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC30>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 301 ] 
11:11:59: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xB6', 'CRC 7']
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat2_CMD8_SD_HIGH for 2 times 
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488CF0>, <py_sfcl.CommandDataDefinition object at 0x0650C330>) , Command count = 302 ] 
11:11:59: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x86', 'CRC 7']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x0650C3F0>) , Command count = 303 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D50>, <py_sfcl.CommandDataDefinition object at 0x0650C450>) , Command count = 304 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F00>, <py_sfcl.CommandDataDefinition object at 0x06488150>) , Command count = 305 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C90>, <py_sfcl.CommandDataDefinition object at 0x06488330>) , Command count = 306 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488420>, <py_sfcl.CommandDataDefinition object at 0x0650C4B0>) , Command count = 307 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D20>, <py_sfcl.CommandDataDefinition object at 0x06488210>) , Command count = 308 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488390>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 309 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488990>, <py_sfcl.CommandDataDefinition object at 0x0650C540>) , Command count = 310 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E330>, <py_sfcl.CommandDataDefinition object at 0x0632E300>) , Command count = 311 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488ED0>, <py_sfcl.CommandDataDefinition object at 0x0650C5D0>) , Command count = 312 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F30>, <py_sfcl.CommandDataDefinition object at 0x06488DB0>) , Command count = 313 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DE0>, <py_sfcl.CommandDataDefinition object at 0x06488A50>) , Command count = 314 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488E40>, <py_sfcl.CommandDataDefinition object at 0x06488270>) , Command count = 315 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650C660>, <py_sfcl.CommandDataDefinition object at 0x0650C690>) , Command count = 316 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x0650C6F0>) , Command count = 317 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064880F0>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 318 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488720>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 319 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488E10>, <py_sfcl.CommandDataDefinition object at 0x0650C750>) , Command count = 320 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488FC0>, <py_sfcl.CommandDataDefinition object at 0x0650C7B0>) , Command count = 321 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064881B0>, <py_sfcl.CommandDataDefinition object at 0x0650C810>) , Command count = 322 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889C0>, <py_sfcl.CommandDataDefinition object at 0x064AB030>) , Command count = 323 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488300>, <py_sfcl.CommandDataDefinition object at 0x064AB090>) , Command count = 324 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06493D50>, <py_sfcl.CommandDataDefinition object at 0x0650C8D0>) , Command count = 325 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488750>, <py_sfcl.CommandDataDefinition object at 0x06488E70>) , Command count = 326 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB0C0>, <py_sfcl.CommandDataDefinition object at 0x064AB0F0>) , Command count = 327 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1E0>, <py_sfcl.CommandDataDefinition object at 0x0650C930>) , Command count = 328 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB210>, <py_sfcl.CommandDataDefinition object at 0x0650C990>) , Command count = 329 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650C9F0>, <py_sfcl.CommandDataDefinition object at 0x0650CA20>) , Command count = 330 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650CA80>, <py_sfcl.CommandDataDefinition object at 0x0650CAB0>) , Command count = 331 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x064B95D0>) , Command count = 332 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9570>, <py_sfcl.CommandDataDefinition object at 0x064B95A0>) , Command count = 333 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9660>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 334 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 1, 255, 128, 0, 255]
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B96F0>, <py_sfcl.CommandDataDefinition object at 0x064B9720>) , Command count = 335 ] 
11:11:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9780>, <py_sfcl.CommandDataDefinition object at 0x064B97B0>) , Command count = 336 ] 
11:11:59: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
11:11:59: [ SetCardCap(True) , Command count = 337 ] 
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]Setting up of Card Capacity Completed

11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
11:11:59: [ SetSdMmcCardMode(0x2, True) , Command count = 338 ] 
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]Card mode got Changed to SD

11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:11:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:11:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 339 ] 
11:11:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:11:59: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card Begins
11:11:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:11:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B99C0>, <py_sfcl.CommandDataDefinition object at 0x064B99F0>) , Command count = 340 ] 
11:11:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A50>, <py_sfcl.CommandDataDefinition object at 0x064B9A80>) , Command count = 341 ] 
11:12:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:00: [ SetCardRCA(0x1, 0xD555) , Command count = 342 ] 
11:12:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py]:Identification Test got Completed

11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
11:12:00: [ SetBusWidth(0x4) , Command count = 343 ] 
11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py] Bus width as got changed to 4

11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetHostFreq
11:12:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:00: Host Frequency set to 25000 KHz
11:12:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalsetHostFreq Completed

11:12:00: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
11:12:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:00: ####CSD Registe 2.0 Values####
11:12:00: CSD_STRUCTURE                                 :0x1
11:12:00: Reserv1                                       :0x0
11:12:00: Time Access 1 TAAC                            :0xe
11:12:00: Time Access 2 NSAC*100                        :0x0
11:12:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:00: Card Command Classess CCC                     :0x5b5
11:12:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:00: DSR(driver stage register)  DSR_IMP           :0x0
11:12:00: Reserv2                                       :0x0
11:12:00: Device Size C_SIZE                            :0xedc8
11:12:00: Reserv3                                       :0x0
11:12:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:00: Reserv4                                       :0x0
11:12:00: Write Speed Factor R2W_FACTOR                 :0x2
11:12:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:00: FILE_FORMAT_GRP                               :0x0
11:12:00: COPY flag                                     :0x1
11:12:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:00: File_Format                                   :0x0
11:12:00: CRC                                           :0x0
11:12:00: ####CSD Registe Values####  

11:12:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:00: ProductSerialNumber = 0x23482900
11:12:00: CardMaximumLBA      = 0x3b72400
11:12:00: CardCapacity        = 32G
11:12:00: Is card secure      = 0
11:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:00: [DVTCommonLib]###  LogicalWrite called
11:12:01: [ WriteLba(0x32E72B9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 344 ] 
11:12:01: [DVTCommonLib]###  LogicalWrite Completed 

11:12:01: [DVTCommonLib]###  LogicalRead called
11:12:03: [ ReadLba(0x32E72B9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 345 ] 
11:12:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:03: [RT2HCSDUHSI032_1_1_1_2a.py]: AddressForWriteRead CALL Completed

11:12:03: [RT2HCSDUHSI032_1_1_1_2a.py]***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
11:12:03: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
11:12:05: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:12:05: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalsetHostFreq Completed

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Set RCA value
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: RCA value got set

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Run Cmd0()
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9D20>) , Command count = 346 ] 
11:12:05: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Cmd0() Execution successfull

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat3_CMD8_SD_HIGH for 0 times 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9DB0>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 347 ] 
11:12:05: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x74', 'CRC 7']
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat3_CMD8_SD_HIGH for 1 times 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E70>, <py_sfcl.CommandDataDefinition object at 0x064B9F30>) , Command count = 348 ] 
11:12:05: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x45', 'CRC 7']
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat3_CMD8_SD_HIGH for 2 times 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 349 ] 
11:12:05: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xCD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9ED0>, <py_sfcl.CommandDataDefinition object at 0x064B9F90>) , Command count = 350 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD030>, <py_sfcl.CommandDataDefinition object at 0x064CD060>) , Command count = 351 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD0C0>, <py_sfcl.CommandDataDefinition object at 0x064CD0F0>) , Command count = 352 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD150>, <py_sfcl.CommandDataDefinition object at 0x064CD180>) , Command count = 353 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD1E0>, <py_sfcl.CommandDataDefinition object at 0x064CD210>) , Command count = 354 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD270>, <py_sfcl.CommandDataDefinition object at 0x064CD2A0>) , Command count = 355 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB480>, <py_sfcl.CommandDataDefinition object at 0x064AB4E0>) , Command count = 356 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD390>, <py_sfcl.CommandDataDefinition object at 0x064CD3C0>) , Command count = 357 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD300>, <py_sfcl.CommandDataDefinition object at 0x064CD330>) , Command count = 358 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD420>, <py_sfcl.CommandDataDefinition object at 0x064CD450>) , Command count = 359 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD4B0>, <py_sfcl.CommandDataDefinition object at 0x064CD4E0>) , Command count = 360 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD540>, <py_sfcl.CommandDataDefinition object at 0x064CD570>) , Command count = 361 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD5D0>, <py_sfcl.CommandDataDefinition object at 0x064CD600>) , Command count = 362 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD750>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 363 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD840>, <py_sfcl.CommandDataDefinition object at 0x064B9990>) , Command count = 364 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD8A0>, <py_sfcl.CommandDataDefinition object at 0x064B9C30>) , Command count = 365 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD660>, <py_sfcl.CommandDataDefinition object at 0x064CD690>) , Command count = 366 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD8D0>, <py_sfcl.CommandDataDefinition object at 0x064CD900>) , Command count = 367 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD9F0>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 368 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDA20>, <py_sfcl.CommandDataDefinition object at 0x064B9BD0>) , Command count = 369 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A20>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 370 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9900>, <py_sfcl.CommandDataDefinition object at 0x0650C3C0>) , Command count = 371 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650CB40>, <py_sfcl.CommandDataDefinition object at 0x0650CB70>) , Command count = 372 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CD960>, <py_sfcl.CommandDataDefinition object at 0x064CD990>) , Command count = 373 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDA80>, <py_sfcl.CommandDataDefinition object at 0x064CDAB0>) , Command count = 374 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDBD0>, <py_sfcl.CommandDataDefinition object at 0x0650CBD0>) , Command count = 375 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650CC30>, <py_sfcl.CommandDataDefinition object at 0x0650CC60>) , Command count = 376 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0650CCC0>, <py_sfcl.CommandDataDefinition object at 0x0650CCF0>) , Command count = 377 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB060>, <py_sfcl.CommandDataDefinition object at 0x064CDC60>) , Command count = 378 ] 
11:12:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDE70>, <py_sfcl.CommandDataDefinition object at 0x064CDCC0>) , Command count = 379 ] 
11:12:05: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
11:12:05: [ SetCardCap(True) , Command count = 380 ] 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Setting Card Capacity was successful 

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
11:12:05: [ SetSdMmcCardMode(0x2, True) , Command count = 381 ] 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]card mode got set to SD successfully

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py] SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:12:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:12:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 382 ] 
11:12:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card begins
11:12:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDB40>, <py_sfcl.CommandDataDefinition object at 0x064CDB70>) , Command count = 383 ] 
11:12:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064CDE10>, <py_sfcl.CommandDataDefinition object at 0x064CDDB0>) , Command count = 384 ] 
11:12:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:05: [ SetCardRCA(0x1, 0xD555) , Command count = 385 ] 
11:12:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test Completed

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
11:12:05: [ SetBusWidth(0x4) , Command count = 386 ] 
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]Setting card bus width to 4 Completed

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetLSHostFreq
11:12:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:05: Host Frequency set to 25000 KHz
11:12:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetLSHostFreq CALL Completed

11:12:05: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
11:12:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:05: ####CSD Registe 2.0 Values####
11:12:05: CSD_STRUCTURE                                 :0x1
11:12:05: Reserv1                                       :0x0
11:12:05: Time Access 1 TAAC                            :0xe
11:12:05: Time Access 2 NSAC*100                        :0x0
11:12:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:05: Card Command Classess CCC                     :0x5b5
11:12:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:05: DSR(driver stage register)  DSR_IMP           :0x0
11:12:05: Reserv2                                       :0x0
11:12:05: Device Size C_SIZE                            :0xedc8
11:12:05: Reserv3                                       :0x0
11:12:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:05: Reserv4                                       :0x0
11:12:05: Write Speed Factor R2W_FACTOR                 :0x2
11:12:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:05: FILE_FORMAT_GRP                               :0x0
11:12:05: COPY flag                                     :0x1
11:12:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:05: File_Format                                   :0x0
11:12:05: CRC                                           :0x0
11:12:05: ####CSD Registe Values####  

11:12:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:05: ProductSerialNumber = 0x23482900
11:12:05: CardMaximumLBA      = 0x3b72400
11:12:05: CardCapacity        = 32G
11:12:05: Is card secure      = 0
11:12:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:05: [DVTCommonLib]###  LogicalWrite called
11:12:07: [ WriteLba(0x11414F8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 387 ] 
11:12:07: [DVTCommonLib]###  LogicalWrite Completed 

11:12:07: [DVTCommonLib]###  LogicalRead called
11:12:09: [ ReadLba(0x11414F8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 388 ] 
11:12:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:09: [RT2HCSDUHSI032_1_1_1_2a.py] AddressForWriteRead CALL Completed
11:12:09: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI033_1_1_1_3 ##########
11:12:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:12:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:11: Host Frequency set to 25000 KHz
11:12:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:12:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:12:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x064AB2A0>, 0x0, True) , Command count = 389 ] 
11:12:11: [GO18_globalSetVolt]### Host voltage value is set.
11:12:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:12:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x064D7180>, 0x0, False) , Command count = 390 ] 
11:12:11: [GO18_globalSetVolt]### Host voltage value is set.
11:12:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 391 ] 
11:12:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 392 ] 
11:12:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:12:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:12:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:12:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:12:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:12:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 393 ] 
11:12:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:12:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D72A0>, <py_sfcl.CommandDataDefinition object at 0x064D7270>) , Command count = 394 ] 
11:12:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7300>, <py_sfcl.CommandDataDefinition object at 0x064D7360>) , Command count = 395 ] 
11:12:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:11: [ SetCardRCA(0x1, 0xD555) , Command count = 396 ] 
11:12:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:11: Host Frequency set to 25000 KHz
11:12:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:11: ####CSD Registe 2.0 Values####
11:12:11: CSD_STRUCTURE                                 :0x1
11:12:11: Reserv1                                       :0x0
11:12:11: Time Access 1 TAAC                            :0xe
11:12:11: Time Access 2 NSAC*100                        :0x0
11:12:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:11: Card Command Classess CCC                     :0x5b5
11:12:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:11: DSR(driver stage register)  DSR_IMP           :0x0
11:12:11: Reserv2                                       :0x0
11:12:11: Device Size C_SIZE                            :0xedc8
11:12:11: Reserv3                                       :0x0
11:12:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:11: Reserv4                                       :0x0
11:12:11: Write Speed Factor R2W_FACTOR                 :0x2
11:12:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:11: FILE_FORMAT_GRP                               :0x0
11:12:11: COPY flag                                     :0x1
11:12:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:11: File_Format                                   :0x0
11:12:11: CRC                                           :0x0
11:12:11: ####CSD Registe Values####  

11:12:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:12:11: [GetSCRRegisterEntry] Passed
11:12:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:12:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:12:11: Data_Status_After Erases          : 0
11:12:11: CPRM Security Support             : No Security
11:12:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:12:11: Spec. Version                     : Version 3.0X
11:12:11: Extended Security Support         : Extended_Security_Not_Supported
11:12:11: Command Support                   : COMMAND_SUPPORT
11:12:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7210>, <py_sfcl.CommandDataDefinition object at 0x064D7240>) , Command count = 397 ] 
11:12:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7450>, <py_sfcl.CommandDataDefinition object at 0x064D7480>) , Command count = 398 ] 
11:12:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:12:11: [ SetBusWidth(0x4) , Command count = 399 ] 
11:12:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:12:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064D75A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 400 ] 
11:12:11: Protected Area Size 0x28000
11:12:11: Bus Width           2
11:12:11: Secure Mode         0
11:12:11: Speed  Class        4
11:12:11: Perf Move           0
11:12:11: Au Size             9
11:12:11: Erase Size          15
11:12:11: Erase Timeout       1
11:12:11: Erase offset        1
11:12:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:12:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:12:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:12:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 401 ] 
11:12:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:12:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:12:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:12:11: Host Frequency set to 100000 KHz
11:12:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:12:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:11: ####CSD Registe 2.0 Values####
11:12:11: CSD_STRUCTURE                                 :0x1
11:12:11: Reserv1                                       :0x0
11:12:11: Time Access 1 TAAC                            :0xe
11:12:11: Time Access 2 NSAC*100                        :0x0
11:12:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:12:11: Card Command Classess CCC                     :0x5b5
11:12:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:11: DSR(driver stage register)  DSR_IMP           :0x0
11:12:11: Reserv2                                       :0x0
11:12:11: Device Size C_SIZE                            :0xedc8
11:12:11: Reserv3                                       :0x0
11:12:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:11: Reserv4                                       :0x0
11:12:11: Write Speed Factor R2W_FACTOR                 :0x2
11:12:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:11: FILE_FORMAT_GRP                               :0x0
11:12:11: COPY flag                                     :0x1
11:12:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:11: File_Format                                   :0x0
11:12:11: CRC                                           :0x0
11:12:11: ####CSD Registe Values####  

11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7600>, <py_sfcl.CommandDataDefinition object at 0x064D76C0>) , Command count = 402 ] 
11:12:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7690>, <py_sfcl.CommandDataDefinition object at 0x064D7750>) , Command count = 403 ] 
11:12:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:12:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:12:11: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
11:12:13: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetTO
11:12:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 404 ] 
11:12:13: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetVolt
11:12:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:12:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:12:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x064D7840>, 0x0, True) , Command count = 405 ] 
11:12:13: [GO18_globalSetVolt]### Host voltage value is set.
11:12:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:12:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x064D78D0>, 0x0, False) , Command count = 406 ] 
11:12:13: [GO18_globalSetVolt]### Host voltage value is set.
11:12:13: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
11:12:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:13: Host Frequency set to 25000 KHz
11:12:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:13: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
11:12:13: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RESET card
11:12:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 407 ] 
11:12:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:12:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:12:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:12:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:12:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:12:14: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:12:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:12:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 408 ] 
11:12:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:12:14: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
11:12:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7AB0>, <py_sfcl.CommandDataDefinition object at 0x064D7A80>) , Command count = 409 ] 
11:12:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D79F0>, <py_sfcl.CommandDataDefinition object at 0x064D7A20>) , Command count = 410 ] 
11:12:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:14: [ SetCardRCA(0x1, 0xD555) , Command count = 411 ] 
11:12:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:14: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
11:12:14: [ SetBusWidth(0x4) , Command count = 412 ] 
11:12:14: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
11:12:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:14: ####CSD Registe 2.0 Values####
11:12:14: CSD_STRUCTURE                                 :0x1
11:12:14: Reserv1                                       :0x0
11:12:14: Time Access 1 TAAC                            :0xe
11:12:14: Time Access 2 NSAC*100                        :0x0
11:12:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:14: Card Command Classess CCC                     :0x5b5
11:12:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:14: DSR(driver stage register)  DSR_IMP           :0x0
11:12:14: Reserv2                                       :0x0
11:12:14: Device Size C_SIZE                            :0xedc8
11:12:14: Reserv3                                       :0x0
11:12:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:14: Reserv4                                       :0x0
11:12:14: Write Speed Factor R2W_FACTOR                 :0x2
11:12:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:14: FILE_FORMAT_GRP                               :0x0
11:12:14: COPY flag                                     :0x1
11:12:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:14: File_Format                                   :0x0
11:12:14: CRC                                           :0x0
11:12:14: ####CSD Registe Values####  

11:12:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:14: ProductSerialNumber = 0x23482900
11:12:14: CardMaximumLBA      = 0x3b72400
11:12:14: CardCapacity        = 32G
11:12:14: Is card secure      = 0
11:12:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:14: [DVTCommonLib]###  LogicalWrite called
11:12:16: [ WriteLba(0x2EA80AB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 413 ] 
11:12:16: [DVTCommonLib]###  LogicalWrite Completed 

11:12:16: [DVTCommonLib]###  LogicalRead called
11:12:17: [ ReadLba(0x2EA80AB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 414 ] 
11:12:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:17: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
11:12:17: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
11:12:19: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
11:12:19: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
11:12:19: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
11:12:19: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7B70>, <py_sfcl.CommandDataDefinition object at 0x064D7BA0>) , Command count = 415 ] 
11:12:19: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7CC0>, <py_sfcl.CommandDataDefinition object at 0x064D7D80>) , Command count = 416 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7B10>, <py_sfcl.CommandDataDefinition object at 0x064D7BD0>) , Command count = 417 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D79C0>, <py_sfcl.CommandDataDefinition object at 0x064D7930>) , Command count = 418 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7DE0>, <py_sfcl.CommandDataDefinition object at 0x064D77B0>) , Command count = 419 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7D20>, <py_sfcl.CommandDataDefinition object at 0x064D7D50>) , Command count = 420 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7E10>, <py_sfcl.CommandDataDefinition object at 0x064D7E70>) , Command count = 421 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064D7720>) , Command count = 422 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF030>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 423 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF0C0>, <py_sfcl.CommandDataDefinition object at 0x064DF180>) , Command count = 424 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF120>, <py_sfcl.CommandDataDefinition object at 0x064DF150>) , Command count = 425 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF1B0>, <py_sfcl.CommandDataDefinition object at 0x064DF1E0>) , Command count = 426 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF240>, <py_sfcl.CommandDataDefinition object at 0x064DF270>) , Command count = 427 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF2D0>, <py_sfcl.CommandDataDefinition object at 0x064DF300>) , Command count = 428 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 429 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF3F0>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 430 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF480>, <py_sfcl.CommandDataDefinition object at 0x064DF4B0>) , Command count = 431 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF510>, <py_sfcl.CommandDataDefinition object at 0x064DF540>) , Command count = 432 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF5A0>, <py_sfcl.CommandDataDefinition object at 0x064DF5D0>) , Command count = 433 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF630>, <py_sfcl.CommandDataDefinition object at 0x064DF660>) , Command count = 434 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF6C0>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 435 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 436 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF7E0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 437 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF870>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 438 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF900>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 439 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF990>, <py_sfcl.CommandDataDefinition object at 0x064DF9C0>) , Command count = 440 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFA20>, <py_sfcl.CommandDataDefinition object at 0x064DFA50>) , Command count = 441 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFAB0>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 442 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 443 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFBD0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 444 ] 
11:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFC60>, <py_sfcl.CommandDataDefinition object at 0x064DFC90>) , Command count = 445 ] 
11:12:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
11:12:19: [ SetCardCap(True) , Command count = 446 ] 
11:12:19: [ SetSdMmcCardMode(0x2, True) , Command count = 447 ] 
11:12:19: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:12:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:12:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 448 ] 
11:12:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:12:19: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
11:12:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFEA0>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 449 ] 
11:12:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506060>, <py_sfcl.CommandDataDefinition object at 0x064DFF30>) , Command count = 450 ] 
11:12:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:19: [ SetCardRCA(0x1, 0xD555) , Command count = 451 ] 
11:12:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:19: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
11:12:19: [ SetBusWidth(0x4) , Command count = 452 ] 
11:12:19: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
11:12:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:20: Host Frequency set to 25000 KHz
11:12:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:20: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
11:12:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:20: ####CSD Registe 2.0 Values####
11:12:20: CSD_STRUCTURE                                 :0x1
11:12:20: Reserv1                                       :0x0
11:12:20: Time Access 1 TAAC                            :0xe
11:12:20: Time Access 2 NSAC*100                        :0x0
11:12:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:20: Card Command Classess CCC                     :0x5b5
11:12:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:20: DSR(driver stage register)  DSR_IMP           :0x0
11:12:20: Reserv2                                       :0x0
11:12:20: Device Size C_SIZE                            :0xedc8
11:12:20: Reserv3                                       :0x0
11:12:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:20: Reserv4                                       :0x0
11:12:20: Write Speed Factor R2W_FACTOR                 :0x2
11:12:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:20: FILE_FORMAT_GRP                               :0x0
11:12:20: COPY flag                                     :0x1
11:12:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:20: File_Format                                   :0x0
11:12:20: CRC                                           :0x0
11:12:20: ####CSD Registe Values####  

11:12:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:20: ProductSerialNumber = 0x23482900
11:12:20: CardMaximumLBA      = 0x3b72400
11:12:20: CardCapacity        = 32G
11:12:20: Is card secure      = 0
11:12:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:20: [DVTCommonLib]###  LogicalWrite called
11:12:21: [ WriteLba(0x2AC8CE4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 453 ] 
11:12:21: [DVTCommonLib]###  LogicalWrite Completed 

11:12:21: [DVTCommonLib]###  LogicalRead called
11:12:23: [ ReadLba(0x2AC8CE4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 454 ] 
11:12:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:23: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle & CMD 0 Reset*********
11:12:23: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
11:12:25: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RESET card and IDENTIFICATION of the card
11:12:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 455 ] 
11:12:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:12:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
11:12:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:12:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:12:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:12:25: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
11:12:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:12:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 456 ] 
11:12:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:12:25: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
11:12:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 457 ] 
11:12:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506360>, <py_sfcl.CommandDataDefinition object at 0x065062A0>) , Command count = 458 ] 
11:12:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:12:25: [ SetCardRCA(0x1, 0xD555) , Command count = 459 ] 
11:12:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:25: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
11:12:25: [ SetBusWidth(0x4) , Command count = 460 ] 
11:12:25: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
11:12:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:25: ####CSD Registe 2.0 Values####
11:12:25: CSD_STRUCTURE                                 :0x1
11:12:25: Reserv1                                       :0x0
11:12:25: Time Access 1 TAAC                            :0xe
11:12:25: Time Access 2 NSAC*100                        :0x0
11:12:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:25: Card Command Classess CCC                     :0x5b5
11:12:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:25: DSR(driver stage register)  DSR_IMP           :0x0
11:12:25: Reserv2                                       :0x0
11:12:25: Device Size C_SIZE                            :0xedc8
11:12:25: Reserv3                                       :0x0
11:12:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:25: Reserv4                                       :0x0
11:12:25: Write Speed Factor R2W_FACTOR                 :0x2
11:12:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:25: FILE_FORMAT_GRP                               :0x0
11:12:25: COPY flag                                     :0x1
11:12:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:25: File_Format                                   :0x0
11:12:25: CRC                                           :0x0
11:12:25: ####CSD Registe Values####  

11:12:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:25: ProductSerialNumber = 0x23482900
11:12:25: CardMaximumLBA      = 0x3b72400
11:12:25: CardCapacity        = 32G
11:12:25: Is card secure      = 0
11:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:25: [DVTCommonLib]###  LogicalWrite called
11:12:27: [ WriteLba(0xAFC3A9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 461 ] 
11:12:27: [DVTCommonLib]###  LogicalWrite Completed 

11:12:27: [DVTCommonLib]###  LogicalRead called
11:12:28: [ ReadLba(0xAFC3A9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 462 ] 
11:12:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:28: [RT2HCSDUHSI033_1_1_1_3.py]***Test Pattern Field in Soft Reset***
11:12:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : globalSetLSHostFreq
11:12:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:12:28: Host Frequency set to 25000 KHz
11:12:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:12:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 0 times 
11:12:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x0, 0x0) , Command count = 463 ] 
11:12:29: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:29: [DVTCommonLib]### Card response as High Capacity from card
11:12:29: [DVTCommonLib]### VOLA from card : 0x1
11:12:29: [DVTCommonLib]### CMD Pattern from card : 0x0
11:12:29: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 464 ] 
11:12:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506510>, <py_sfcl.CommandDataDefinition object at 0x064DFD20>) , Command count = 465 ] 
11:12:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:29: [ SetCardRCA(0x1, 0xD555) , Command count = 466 ] 
11:12:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:29: [ SetBusWidth(0x4) , Command count = 467 ] 
11:12:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:29: ####CSD Registe 2.0 Values####
11:12:29: CSD_STRUCTURE                                 :0x1
11:12:29: Reserv1                                       :0x0
11:12:29: Time Access 1 TAAC                            :0xe
11:12:29: Time Access 2 NSAC*100                        :0x0
11:12:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:29: Card Command Classess CCC                     :0x5b5
11:12:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:29: DSR(driver stage register)  DSR_IMP           :0x0
11:12:29: Reserv2                                       :0x0
11:12:29: Device Size C_SIZE                            :0xedc8
11:12:29: Reserv3                                       :0x0
11:12:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:29: Reserv4                                       :0x0
11:12:29: Write Speed Factor R2W_FACTOR                 :0x2
11:12:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:29: FILE_FORMAT_GRP                               :0x0
11:12:29: COPY flag                                     :0x1
11:12:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:29: File_Format                                   :0x0
11:12:29: CRC                                           :0x0
11:12:29: ####CSD Registe Values####  

11:12:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:29: ProductSerialNumber = 0x23482900
11:12:29: CardMaximumLBA      = 0x3b72400
11:12:29: CardCapacity        = 32G
11:12:29: Is card secure      = 0
11:12:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:29: [DVTCommonLib]###  LogicalWrite called
11:12:30: [ WriteLba(0xF80BD9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 468 ] 
11:12:30: [DVTCommonLib]###  LogicalWrite Completed 

11:12:30: [DVTCommonLib]###  LogicalRead called
11:12:32: [ ReadLba(0xF80BD9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 469 ] 
11:12:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:32: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 1 times 
11:12:32: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1, 0x0) , Command count = 470 ] 
11:12:32: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:32: [DVTCommonLib]### Card response as High Capacity from card
11:12:32: [DVTCommonLib]### VOLA from card : 0x1
11:12:32: [DVTCommonLib]### CMD Pattern from card : 0x1
11:12:32: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 471 ] 
11:12:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065068A0>, <py_sfcl.CommandDataDefinition object at 0x065068D0>) , Command count = 472 ] 
11:12:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:32: [ SetCardRCA(0x1, 0xD555) , Command count = 473 ] 
11:12:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:32: [ SetBusWidth(0x4) , Command count = 474 ] 
11:12:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:32: ####CSD Registe 2.0 Values####
11:12:32: CSD_STRUCTURE                                 :0x1
11:12:32: Reserv1                                       :0x0
11:12:32: Time Access 1 TAAC                            :0xe
11:12:32: Time Access 2 NSAC*100                        :0x0
11:12:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:32: Card Command Classess CCC                     :0x5b5
11:12:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:32: DSR(driver stage register)  DSR_IMP           :0x0
11:12:32: Reserv2                                       :0x0
11:12:32: Device Size C_SIZE                            :0xedc8
11:12:32: Reserv3                                       :0x0
11:12:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:32: Reserv4                                       :0x0
11:12:32: Write Speed Factor R2W_FACTOR                 :0x2
11:12:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:32: FILE_FORMAT_GRP                               :0x0
11:12:32: COPY flag                                     :0x1
11:12:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:32: File_Format                                   :0x0
11:12:32: CRC                                           :0x0
11:12:32: ####CSD Registe Values####  

11:12:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:32: ProductSerialNumber = 0x23482900
11:12:32: CardMaximumLBA      = 0x3b72400
11:12:32: CardCapacity        = 32G
11:12:32: Is card secure      = 0
11:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:32: [DVTCommonLib]###  LogicalWrite called
11:12:34: [ WriteLba(0x1ED6445, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 475 ] 
11:12:34: [DVTCommonLib]###  LogicalWrite Completed 

11:12:34: [DVTCommonLib]###  LogicalRead called
11:12:36: [ ReadLba(0x1ED6445, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 476 ] 
11:12:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:36: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 2 times 
11:12:36: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2, 0x0) , Command count = 477 ] 
11:12:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:36: [DVTCommonLib]### Card response as High Capacity from card
11:12:36: [DVTCommonLib]### VOLA from card : 0x1
11:12:36: [DVTCommonLib]### CMD Pattern from card : 0x2
11:12:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 478 ] 
11:12:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x06506CC0>) , Command count = 479 ] 
11:12:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:36: [ SetCardRCA(0x1, 0xD555) , Command count = 480 ] 
11:12:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:36: [ SetBusWidth(0x4) , Command count = 481 ] 
11:12:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:36: ####CSD Registe 2.0 Values####
11:12:36: CSD_STRUCTURE                                 :0x1
11:12:36: Reserv1                                       :0x0
11:12:36: Time Access 1 TAAC                            :0xe
11:12:36: Time Access 2 NSAC*100                        :0x0
11:12:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:36: Card Command Classess CCC                     :0x5b5
11:12:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:36: DSR(driver stage register)  DSR_IMP           :0x0
11:12:36: Reserv2                                       :0x0
11:12:36: Device Size C_SIZE                            :0xedc8
11:12:36: Reserv3                                       :0x0
11:12:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:36: Reserv4                                       :0x0
11:12:36: Write Speed Factor R2W_FACTOR                 :0x2
11:12:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:36: FILE_FORMAT_GRP                               :0x0
11:12:36: COPY flag                                     :0x1
11:12:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:36: File_Format                                   :0x0
11:12:36: CRC                                           :0x0
11:12:36: ####CSD Registe Values####  

11:12:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:36: ProductSerialNumber = 0x23482900
11:12:36: CardMaximumLBA      = 0x3b72400
11:12:36: CardCapacity        = 32G
11:12:36: Is card secure      = 0
11:12:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:36: [DVTCommonLib]###  LogicalWrite called
11:12:38: [ WriteLba(0x153C27A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 482 ] 
11:12:38: [DVTCommonLib]###  LogicalWrite Completed 

11:12:38: [DVTCommonLib]###  LogicalRead called
11:12:39: [ ReadLba(0x153C27A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 483 ] 
11:12:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:39: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 3 times 
11:12:39: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3, 0x0) , Command count = 484 ] 
11:12:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:39: [DVTCommonLib]### Card response as High Capacity from card
11:12:39: [DVTCommonLib]### VOLA from card : 0x1
11:12:39: [DVTCommonLib]### CMD Pattern from card : 0x3
11:12:39: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 485 ] 
11:12:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065080C0>, <py_sfcl.CommandDataDefinition object at 0x065080F0>) , Command count = 486 ] 
11:12:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:39: [ SetCardRCA(0x1, 0xD555) , Command count = 487 ] 
11:12:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:39: [ SetBusWidth(0x4) , Command count = 488 ] 
11:12:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:39: ####CSD Registe 2.0 Values####
11:12:39: CSD_STRUCTURE                                 :0x1
11:12:39: Reserv1                                       :0x0
11:12:39: Time Access 1 TAAC                            :0xe
11:12:39: Time Access 2 NSAC*100                        :0x0
11:12:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:39: Card Command Classess CCC                     :0x5b5
11:12:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:39: DSR(driver stage register)  DSR_IMP           :0x0
11:12:39: Reserv2                                       :0x0
11:12:39: Device Size C_SIZE                            :0xedc8
11:12:39: Reserv3                                       :0x0
11:12:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:39: Reserv4                                       :0x0
11:12:39: Write Speed Factor R2W_FACTOR                 :0x2
11:12:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:39: FILE_FORMAT_GRP                               :0x0
11:12:39: COPY flag                                     :0x1
11:12:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:39: File_Format                                   :0x0
11:12:39: CRC                                           :0x0
11:12:39: ####CSD Registe Values####  

11:12:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:39: ProductSerialNumber = 0x23482900
11:12:39: CardMaximumLBA      = 0x3b72400
11:12:39: CardCapacity        = 32G
11:12:39: Is card secure      = 0
11:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:39: [DVTCommonLib]###  LogicalWrite called
11:12:41: [ WriteLba(0x28A2C73, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 489 ] 
11:12:41: [DVTCommonLib]###  LogicalWrite Completed 

11:12:41: [DVTCommonLib]###  LogicalRead called
11:12:43: [ ReadLba(0x28A2C73, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 490 ] 
11:12:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:43: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 4 times 
11:12:43: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4, 0x0) , Command count = 491 ] 
11:12:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:43: [DVTCommonLib]### Card response as High Capacity from card
11:12:43: [DVTCommonLib]### VOLA from card : 0x1
11:12:43: [DVTCommonLib]### CMD Pattern from card : 0x4
11:12:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508420>, <py_sfcl.CommandDataDefinition object at 0x06508450>) , Command count = 492 ] 
11:12:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065084B0>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 493 ] 
11:12:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:43: [ SetCardRCA(0x1, 0xD555) , Command count = 494 ] 
11:12:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:43: [ SetBusWidth(0x4) , Command count = 495 ] 
11:12:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:43: ####CSD Registe 2.0 Values####
11:12:43: CSD_STRUCTURE                                 :0x1
11:12:43: Reserv1                                       :0x0
11:12:43: Time Access 1 TAAC                            :0xe
11:12:43: Time Access 2 NSAC*100                        :0x0
11:12:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:43: Card Command Classess CCC                     :0x5b5
11:12:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:43: DSR(driver stage register)  DSR_IMP           :0x0
11:12:43: Reserv2                                       :0x0
11:12:43: Device Size C_SIZE                            :0xedc8
11:12:43: Reserv3                                       :0x0
11:12:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:43: Reserv4                                       :0x0
11:12:43: Write Speed Factor R2W_FACTOR                 :0x2
11:12:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:43: FILE_FORMAT_GRP                               :0x0
11:12:43: COPY flag                                     :0x1
11:12:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:43: File_Format                                   :0x0
11:12:43: CRC                                           :0x0
11:12:43: ####CSD Registe Values####  

11:12:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:43: ProductSerialNumber = 0x23482900
11:12:43: CardMaximumLBA      = 0x3b72400
11:12:43: CardCapacity        = 32G
11:12:43: Is card secure      = 0
11:12:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:43: [DVTCommonLib]###  LogicalWrite called
11:12:45: [ WriteLba(0x2C6EEA0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 496 ] 
11:12:45: [DVTCommonLib]###  LogicalWrite Completed 

11:12:45: [DVTCommonLib]###  LogicalRead called
11:12:46: [ ReadLba(0x2C6EEA0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 497 ] 
11:12:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:46: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 5 times 
11:12:46: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5, 0x0) , Command count = 498 ] 
11:12:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:46: [DVTCommonLib]### Card response as High Capacity from card
11:12:46: [DVTCommonLib]### VOLA from card : 0x1
11:12:46: [DVTCommonLib]### CMD Pattern from card : 0x5
11:12:46: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 499 ] 
11:12:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508870>, <py_sfcl.CommandDataDefinition object at 0x06508660>) , Command count = 500 ] 
11:12:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:46: [ SetCardRCA(0x1, 0xD555) , Command count = 501 ] 
11:12:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:47: [ SetBusWidth(0x4) , Command count = 502 ] 
11:12:47: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:47: ####CSD Registe 2.0 Values####
11:12:47: CSD_STRUCTURE                                 :0x1
11:12:47: Reserv1                                       :0x0
11:12:47: Time Access 1 TAAC                            :0xe
11:12:47: Time Access 2 NSAC*100                        :0x0
11:12:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:47: Card Command Classess CCC                     :0x5b5
11:12:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:47: DSR(driver stage register)  DSR_IMP           :0x0
11:12:47: Reserv2                                       :0x0
11:12:47: Device Size C_SIZE                            :0xedc8
11:12:47: Reserv3                                       :0x0
11:12:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:47: Reserv4                                       :0x0
11:12:47: Write Speed Factor R2W_FACTOR                 :0x2
11:12:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:47: FILE_FORMAT_GRP                               :0x0
11:12:47: COPY flag                                     :0x1
11:12:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:47: File_Format                                   :0x0
11:12:47: CRC                                           :0x0
11:12:47: ####CSD Registe Values####  

11:12:47: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:47: ProductSerialNumber = 0x23482900
11:12:47: CardMaximumLBA      = 0x3b72400
11:12:47: CardCapacity        = 32G
11:12:47: Is card secure      = 0
11:12:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:47: [DVTCommonLib]###  LogicalWrite called
11:12:48: [ WriteLba(0x2A63BD2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 503 ] 
11:12:48: [DVTCommonLib]###  LogicalWrite Completed 

11:12:48: [DVTCommonLib]###  LogicalRead called
11:12:50: [ ReadLba(0x2A63BD2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 504 ] 
11:12:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 6 times 
11:12:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6, 0x0) , Command count = 505 ] 
11:12:50: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:50: [DVTCommonLib]### Card response as High Capacity from card
11:12:50: [DVTCommonLib]### VOLA from card : 0x1
11:12:50: [DVTCommonLib]### CMD Pattern from card : 0x6
11:12:50: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 506 ] 
11:12:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DC8CC0>, <py_sfcl.CommandDataDefinition object at 0x05DC8D20>) , Command count = 507 ] 
11:12:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:50: [ SetCardRCA(0x1, 0xD555) , Command count = 508 ] 
11:12:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:50: [ SetBusWidth(0x4) , Command count = 509 ] 
11:12:50: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:50: ####CSD Registe 2.0 Values####
11:12:50: CSD_STRUCTURE                                 :0x1
11:12:50: Reserv1                                       :0x0
11:12:50: Time Access 1 TAAC                            :0xe
11:12:50: Time Access 2 NSAC*100                        :0x0
11:12:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:50: Card Command Classess CCC                     :0x5b5
11:12:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:50: DSR(driver stage register)  DSR_IMP           :0x0
11:12:50: Reserv2                                       :0x0
11:12:50: Device Size C_SIZE                            :0xedc8
11:12:50: Reserv3                                       :0x0
11:12:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:50: Reserv4                                       :0x0
11:12:50: Write Speed Factor R2W_FACTOR                 :0x2
11:12:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:50: FILE_FORMAT_GRP                               :0x0
11:12:50: COPY flag                                     :0x1
11:12:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:50: File_Format                                   :0x0
11:12:50: CRC                                           :0x0
11:12:50: ####CSD Registe Values####  

11:12:50: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:50: ProductSerialNumber = 0x23482900
11:12:50: CardMaximumLBA      = 0x3b72400
11:12:50: CardCapacity        = 32G
11:12:50: Is card secure      = 0
11:12:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:50: [DVTCommonLib]###  LogicalWrite called
11:12:52: [ WriteLba(0x1A4735, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 510 ] 
11:12:52: [DVTCommonLib]###  LogicalWrite Completed 

11:12:52: [DVTCommonLib]###  LogicalRead called
11:12:53: [ ReadLba(0x1A4735, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 511 ] 
11:12:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 7 times 
11:12:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7, 0x0) , Command count = 512 ] 
11:12:54: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:54: [DVTCommonLib]### Card response as High Capacity from card
11:12:54: [DVTCommonLib]### VOLA from card : 0x1
11:12:54: [DVTCommonLib]### CMD Pattern from card : 0x7
11:12:54: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 513 ] 
11:12:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C7BCF0>, <py_sfcl.CommandDataDefinition object at 0x06508990>) , Command count = 514 ] 
11:12:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:54: [ SetCardRCA(0x1, 0xD555) , Command count = 515 ] 
11:12:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:54: [ SetBusWidth(0x4) , Command count = 516 ] 
11:12:54: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:54: ####CSD Registe 2.0 Values####
11:12:54: CSD_STRUCTURE                                 :0x1
11:12:54: Reserv1                                       :0x0
11:12:54: Time Access 1 TAAC                            :0xe
11:12:54: Time Access 2 NSAC*100                        :0x0
11:12:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:54: Card Command Classess CCC                     :0x5b5
11:12:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:54: DSR(driver stage register)  DSR_IMP           :0x0
11:12:54: Reserv2                                       :0x0
11:12:54: Device Size C_SIZE                            :0xedc8
11:12:54: Reserv3                                       :0x0
11:12:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:54: Reserv4                                       :0x0
11:12:54: Write Speed Factor R2W_FACTOR                 :0x2
11:12:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:54: FILE_FORMAT_GRP                               :0x0
11:12:54: COPY flag                                     :0x1
11:12:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:54: File_Format                                   :0x0
11:12:54: CRC                                           :0x0
11:12:54: ####CSD Registe Values####  

11:12:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:54: ProductSerialNumber = 0x23482900
11:12:54: CardMaximumLBA      = 0x3b72400
11:12:54: CardCapacity        = 32G
11:12:54: Is card secure      = 0
11:12:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:54: [DVTCommonLib]###  LogicalWrite called
11:12:55: [ WriteLba(0x3236B7F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 517 ] 
11:12:55: [DVTCommonLib]###  LogicalWrite Completed 

11:12:55: [DVTCommonLib]###  LogicalRead called
11:12:57: [ ReadLba(0x3236B7F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 518 ] 
11:12:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:12:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:12:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 8 times 
11:12:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:12:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:12:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8, 0x0) , Command count = 519 ] 
11:12:57: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:12:57: [DVTCommonLib]### Card response as High Capacity from card
11:12:57: [DVTCommonLib]### VOLA from card : 0x1
11:12:57: [DVTCommonLib]### CMD Pattern from card : 0x8
11:12:57: [DVTCommonLib]### Reserved bits from card : 0x0
11:12:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:12:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 520 ] 
11:12:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:12:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508C90>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 521 ] 
11:12:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:12:57: [ SetCardRCA(0x1, 0xD555) , Command count = 522 ] 
11:12:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:12:57: [ SetBusWidth(0x4) , Command count = 523 ] 
11:12:57: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:12:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:12:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:12:57: ####CSD Registe 2.0 Values####
11:12:57: CSD_STRUCTURE                                 :0x1
11:12:57: Reserv1                                       :0x0
11:12:57: Time Access 1 TAAC                            :0xe
11:12:57: Time Access 2 NSAC*100                        :0x0
11:12:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:12:57: Card Command Classess CCC                     :0x5b5
11:12:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:12:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:12:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:12:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:12:57: DSR(driver stage register)  DSR_IMP           :0x0
11:12:57: Reserv2                                       :0x0
11:12:57: Device Size C_SIZE                            :0xedc8
11:12:57: Reserv3                                       :0x0
11:12:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:12:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:12:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:12:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:12:57: Reserv4                                       :0x0
11:12:57: Write Speed Factor R2W_FACTOR                 :0x2
11:12:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:12:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:12:57: FILE_FORMAT_GRP                               :0x0
11:12:57: COPY flag                                     :0x1
11:12:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:12:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:12:57: File_Format                                   :0x0
11:12:57: CRC                                           :0x0
11:12:57: ####CSD Registe Values####  

11:12:57: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:12:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:12:57: ProductSerialNumber = 0x23482900
11:12:57: CardMaximumLBA      = 0x3b72400
11:12:57: CardCapacity        = 32G
11:12:57: Is card secure      = 0
11:12:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:12:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:12:57: [DVTCommonLib]###  LogicalWrite called
11:12:59: [ WriteLba(0x32F0B1C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 524 ] 
11:12:59: [DVTCommonLib]###  LogicalWrite Completed 

11:12:59: [DVTCommonLib]###  LogicalRead called
11:13:00: [ ReadLba(0x32F0B1C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 525 ] 
11:13:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 9 times 
11:13:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9, 0x0) , Command count = 526 ] 
11:13:01: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:01: [DVTCommonLib]### Card response as High Capacity from card
11:13:01: [DVTCommonLib]### VOLA from card : 0x1
11:13:01: [DVTCommonLib]### CMD Pattern from card : 0x9
11:13:01: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 527 ] 
11:13:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD79F0>, <py_sfcl.CommandDataDefinition object at 0x06508D50>) , Command count = 528 ] 
11:13:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:01: [ SetCardRCA(0x1, 0xD555) , Command count = 529 ] 
11:13:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:01: [ SetBusWidth(0x4) , Command count = 530 ] 
11:13:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:01: ####CSD Registe 2.0 Values####
11:13:01: CSD_STRUCTURE                                 :0x1
11:13:01: Reserv1                                       :0x0
11:13:01: Time Access 1 TAAC                            :0xe
11:13:01: Time Access 2 NSAC*100                        :0x0
11:13:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:01: Card Command Classess CCC                     :0x5b5
11:13:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:01: DSR(driver stage register)  DSR_IMP           :0x0
11:13:01: Reserv2                                       :0x0
11:13:01: Device Size C_SIZE                            :0xedc8
11:13:01: Reserv3                                       :0x0
11:13:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:01: Reserv4                                       :0x0
11:13:01: Write Speed Factor R2W_FACTOR                 :0x2
11:13:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:01: FILE_FORMAT_GRP                               :0x0
11:13:01: COPY flag                                     :0x1
11:13:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:01: File_Format                                   :0x0
11:13:01: CRC                                           :0x0
11:13:01: ####CSD Registe Values####  

11:13:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:01: ProductSerialNumber = 0x23482900
11:13:01: CardMaximumLBA      = 0x3b72400
11:13:01: CardCapacity        = 32G
11:13:01: Is card secure      = 0
11:13:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:01: [DVTCommonLib]###  LogicalWrite called
11:13:02: [ WriteLba(0x13BF52, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 531 ] 
11:13:02: [DVTCommonLib]###  LogicalWrite Completed 

11:13:02: [DVTCommonLib]###  LogicalRead called
11:13:04: [ ReadLba(0x13BF52, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 532 ] 
11:13:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:04: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 10 times 
11:13:04: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA, 0x0) , Command count = 533 ] 
11:13:04: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:04: [DVTCommonLib]### Card response as High Capacity from card
11:13:04: [DVTCommonLib]### VOLA from card : 0x1
11:13:04: [DVTCommonLib]### CMD Pattern from card : 0xA
11:13:04: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x06508DE0>) , Command count = 534 ] 
11:13:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABA0>, <py_sfcl.CommandDataDefinition object at 0x06508ED0>) , Command count = 535 ] 
11:13:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:04: [ SetCardRCA(0x1, 0xD555) , Command count = 536 ] 
11:13:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:04: [ SetBusWidth(0x4) , Command count = 537 ] 
11:13:04: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:04: ####CSD Registe 2.0 Values####
11:13:04: CSD_STRUCTURE                                 :0x1
11:13:04: Reserv1                                       :0x0
11:13:04: Time Access 1 TAAC                            :0xe
11:13:04: Time Access 2 NSAC*100                        :0x0
11:13:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:04: Card Command Classess CCC                     :0x5b5
11:13:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:04: DSR(driver stage register)  DSR_IMP           :0x0
11:13:04: Reserv2                                       :0x0
11:13:04: Device Size C_SIZE                            :0xedc8
11:13:04: Reserv3                                       :0x0
11:13:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:04: Reserv4                                       :0x0
11:13:04: Write Speed Factor R2W_FACTOR                 :0x2
11:13:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:04: FILE_FORMAT_GRP                               :0x0
11:13:04: COPY flag                                     :0x1
11:13:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:04: File_Format                                   :0x0
11:13:04: CRC                                           :0x0
11:13:04: ####CSD Registe Values####  

11:13:04: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:04: ProductSerialNumber = 0x23482900
11:13:04: CardMaximumLBA      = 0x3b72400
11:13:04: CardCapacity        = 32G
11:13:04: Is card secure      = 0
11:13:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:04: [DVTCommonLib]###  LogicalWrite called
11:13:06: [ WriteLba(0x1521A9C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 538 ] 
11:13:06: [DVTCommonLib]###  LogicalWrite Completed 

11:13:06: [DVTCommonLib]###  LogicalRead called
11:13:08: [ ReadLba(0x1521A9C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 539 ] 
11:13:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 11 times 
11:13:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB, 0x0) , Command count = 540 ] 
11:13:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:08: [DVTCommonLib]### Card response as High Capacity from card
11:13:08: [DVTCommonLib]### VOLA from card : 0x1
11:13:08: [DVTCommonLib]### CMD Pattern from card : 0xB
11:13:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC60>, <py_sfcl.CommandDataDefinition object at 0x06508E70>) , Command count = 541 ] 
11:13:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC90>, <py_sfcl.CommandDataDefinition object at 0x06508F90>) , Command count = 542 ] 
11:13:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:08: [ SetCardRCA(0x1, 0xD555) , Command count = 543 ] 
11:13:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:08: [ SetBusWidth(0x4) , Command count = 544 ] 
11:13:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:08: ####CSD Registe 2.0 Values####
11:13:08: CSD_STRUCTURE                                 :0x1
11:13:08: Reserv1                                       :0x0
11:13:08: Time Access 1 TAAC                            :0xe
11:13:08: Time Access 2 NSAC*100                        :0x0
11:13:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:08: Card Command Classess CCC                     :0x5b5
11:13:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:08: DSR(driver stage register)  DSR_IMP           :0x0
11:13:08: Reserv2                                       :0x0
11:13:08: Device Size C_SIZE                            :0xedc8
11:13:08: Reserv3                                       :0x0
11:13:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:08: Reserv4                                       :0x0
11:13:08: Write Speed Factor R2W_FACTOR                 :0x2
11:13:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:08: FILE_FORMAT_GRP                               :0x0
11:13:08: COPY flag                                     :0x1
11:13:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:08: File_Format                                   :0x0
11:13:08: CRC                                           :0x0
11:13:08: ####CSD Registe Values####  

11:13:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:08: ProductSerialNumber = 0x23482900
11:13:08: CardMaximumLBA      = 0x3b72400
11:13:08: CardCapacity        = 32G
11:13:08: Is card secure      = 0
11:13:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:08: [DVTCommonLib]###  LogicalWrite called
11:13:10: [ WriteLba(0x7AAAA8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 545 ] 
11:13:10: [DVTCommonLib]###  LogicalWrite Completed 

11:13:10: [DVTCommonLib]###  LogicalRead called
11:13:11: [ ReadLba(0x7AAAA8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 546 ] 
11:13:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:11: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 12 times 
11:13:11: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC, 0x0) , Command count = 547 ] 
11:13:11: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:11: [DVTCommonLib]### Card response as High Capacity from card
11:13:11: [DVTCommonLib]### VOLA from card : 0x1
11:13:11: [DVTCommonLib]### CMD Pattern from card : 0xC
11:13:11: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x06508EA0>) , Command count = 548 ] 
11:13:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508DB0>, <py_sfcl.CommandDataDefinition object at 0x06508CC0>) , Command count = 549 ] 
11:13:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:11: [ SetCardRCA(0x1, 0xD555) , Command count = 550 ] 
11:13:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:11: [ SetBusWidth(0x4) , Command count = 551 ] 
11:13:11: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:11: ####CSD Registe 2.0 Values####
11:13:11: CSD_STRUCTURE                                 :0x1
11:13:11: Reserv1                                       :0x0
11:13:11: Time Access 1 TAAC                            :0xe
11:13:11: Time Access 2 NSAC*100                        :0x0
11:13:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:11: Card Command Classess CCC                     :0x5b5
11:13:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:11: DSR(driver stage register)  DSR_IMP           :0x0
11:13:11: Reserv2                                       :0x0
11:13:11: Device Size C_SIZE                            :0xedc8
11:13:11: Reserv3                                       :0x0
11:13:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:11: Reserv4                                       :0x0
11:13:11: Write Speed Factor R2W_FACTOR                 :0x2
11:13:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:11: FILE_FORMAT_GRP                               :0x0
11:13:11: COPY flag                                     :0x1
11:13:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:11: File_Format                                   :0x0
11:13:11: CRC                                           :0x0
11:13:11: ####CSD Registe Values####  

11:13:11: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:11: ProductSerialNumber = 0x23482900
11:13:11: CardMaximumLBA      = 0x3b72400
11:13:11: CardCapacity        = 32G
11:13:11: Is card secure      = 0
11:13:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:11: [DVTCommonLib]###  LogicalWrite called
11:13:13: [ WriteLba(0x14782BB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 552 ] 
11:13:13: [DVTCommonLib]###  LogicalWrite Completed 

11:13:13: [DVTCommonLib]###  LogicalRead called
11:13:15: [ ReadLba(0x14782BB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 553 ] 
11:13:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 13 times 
11:13:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD, 0x0) , Command count = 554 ] 
11:13:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:15: [DVTCommonLib]### Card response as High Capacity from card
11:13:15: [DVTCommonLib]### VOLA from card : 0x1
11:13:15: [DVTCommonLib]### CMD Pattern from card : 0xD
11:13:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 555 ] 
11:13:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D50>, <py_sfcl.CommandDataDefinition object at 0x06488B70>) , Command count = 556 ] 
11:13:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:15: [ SetCardRCA(0x1, 0xD555) , Command count = 557 ] 
11:13:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:15: [ SetBusWidth(0x4) , Command count = 558 ] 
11:13:15: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:15: ####CSD Registe 2.0 Values####
11:13:15: CSD_STRUCTURE                                 :0x1
11:13:15: Reserv1                                       :0x0
11:13:15: Time Access 1 TAAC                            :0xe
11:13:15: Time Access 2 NSAC*100                        :0x0
11:13:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:15: Card Command Classess CCC                     :0x5b5
11:13:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:15: DSR(driver stage register)  DSR_IMP           :0x0
11:13:15: Reserv2                                       :0x0
11:13:15: Device Size C_SIZE                            :0xedc8
11:13:15: Reserv3                                       :0x0
11:13:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:15: Reserv4                                       :0x0
11:13:15: Write Speed Factor R2W_FACTOR                 :0x2
11:13:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:15: FILE_FORMAT_GRP                               :0x0
11:13:15: COPY flag                                     :0x1
11:13:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:15: File_Format                                   :0x0
11:13:15: CRC                                           :0x0
11:13:15: ####CSD Registe Values####  

11:13:15: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:15: ProductSerialNumber = 0x23482900
11:13:15: CardMaximumLBA      = 0x3b72400
11:13:15: CardCapacity        = 32G
11:13:15: Is card secure      = 0
11:13:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:15: [DVTCommonLib]###  LogicalWrite called
11:13:17: [ WriteLba(0x1349F2D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 559 ] 
11:13:17: [DVTCommonLib]###  LogicalWrite Completed 

11:13:17: [DVTCommonLib]###  LogicalRead called
11:13:18: [ ReadLba(0x1349F2D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 560 ] 
11:13:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:18: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 14 times 
11:13:18: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE, 0x0) , Command count = 561 ] 
11:13:18: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:18: [DVTCommonLib]### Card response as High Capacity from card
11:13:18: [DVTCommonLib]### VOLA from card : 0x1
11:13:18: [DVTCommonLib]### CMD Pattern from card : 0xE
11:13:18: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488990>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 562 ] 
11:13:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E330>, <py_sfcl.CommandDataDefinition object at 0x0632E300>) , Command count = 563 ] 
11:13:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:18: [ SetCardRCA(0x1, 0xD555) , Command count = 564 ] 
11:13:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:19: [ SetBusWidth(0x4) , Command count = 565 ] 
11:13:19: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:19: ####CSD Registe 2.0 Values####
11:13:19: CSD_STRUCTURE                                 :0x1
11:13:19: Reserv1                                       :0x0
11:13:19: Time Access 1 TAAC                            :0xe
11:13:19: Time Access 2 NSAC*100                        :0x0
11:13:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:19: Card Command Classess CCC                     :0x5b5
11:13:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:19: DSR(driver stage register)  DSR_IMP           :0x0
11:13:19: Reserv2                                       :0x0
11:13:19: Device Size C_SIZE                            :0xedc8
11:13:19: Reserv3                                       :0x0
11:13:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:19: Reserv4                                       :0x0
11:13:19: Write Speed Factor R2W_FACTOR                 :0x2
11:13:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:19: FILE_FORMAT_GRP                               :0x0
11:13:19: COPY flag                                     :0x1
11:13:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:19: File_Format                                   :0x0
11:13:19: CRC                                           :0x0
11:13:19: ####CSD Registe Values####  

11:13:19: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:19: ProductSerialNumber = 0x23482900
11:13:19: CardMaximumLBA      = 0x3b72400
11:13:19: CardCapacity        = 32G
11:13:19: Is card secure      = 0
11:13:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:19: [DVTCommonLib]###  LogicalWrite called
11:13:20: [ WriteLba(0x38B3600, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 566 ] 
11:13:20: [DVTCommonLib]###  LogicalWrite Completed 

11:13:20: [DVTCommonLib]###  LogicalRead called
11:13:22: [ ReadLba(0x38B3600, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 567 ] 
11:13:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:22: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 15 times 
11:13:22: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF, 0x0) , Command count = 568 ] 
11:13:22: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:22: [DVTCommonLib]### Card response as High Capacity from card
11:13:22: [DVTCommonLib]### VOLA from card : 0x1
11:13:22: [DVTCommonLib]### CMD Pattern from card : 0xF
11:13:22: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 569 ] 
11:13:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064880F0>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 570 ] 
11:13:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:22: [ SetCardRCA(0x1, 0xD555) , Command count = 571 ] 
11:13:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:22: [ SetBusWidth(0x4) , Command count = 572 ] 
11:13:22: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:22: ####CSD Registe 2.0 Values####
11:13:22: CSD_STRUCTURE                                 :0x1
11:13:22: Reserv1                                       :0x0
11:13:22: Time Access 1 TAAC                            :0xe
11:13:22: Time Access 2 NSAC*100                        :0x0
11:13:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:22: Card Command Classess CCC                     :0x5b5
11:13:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:22: DSR(driver stage register)  DSR_IMP           :0x0
11:13:22: Reserv2                                       :0x0
11:13:22: Device Size C_SIZE                            :0xedc8
11:13:22: Reserv3                                       :0x0
11:13:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:22: Reserv4                                       :0x0
11:13:22: Write Speed Factor R2W_FACTOR                 :0x2
11:13:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:22: FILE_FORMAT_GRP                               :0x0
11:13:22: COPY flag                                     :0x1
11:13:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:22: File_Format                                   :0x0
11:13:22: CRC                                           :0x0
11:13:22: ####CSD Registe Values####  

11:13:22: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:22: ProductSerialNumber = 0x23482900
11:13:22: CardMaximumLBA      = 0x3b72400
11:13:22: CardCapacity        = 32G
11:13:22: Is card secure      = 0
11:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:22: [DVTCommonLib]###  LogicalWrite called
11:13:24: [ WriteLba(0x10F057E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 573 ] 
11:13:24: [DVTCommonLib]###  LogicalWrite Completed 

11:13:24: [DVTCommonLib]###  LogicalRead called
11:13:25: [ ReadLba(0x10F057E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 574 ] 
11:13:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:25: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 16 times 
11:13:25: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x10, 0x0) , Command count = 575 ] 
11:13:26: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:26: [DVTCommonLib]### Card response as High Capacity from card
11:13:26: [DVTCommonLib]### VOLA from card : 0x1
11:13:26: [DVTCommonLib]### CMD Pattern from card : 0x10
11:13:26: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 576 ] 
11:13:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06493D50>, <py_sfcl.CommandDataDefinition object at 0x064AB120>) , Command count = 577 ] 
11:13:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:26: [ SetCardRCA(0x1, 0xD555) , Command count = 578 ] 
11:13:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:26: [ SetBusWidth(0x4) , Command count = 579 ] 
11:13:26: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:26: ####CSD Registe 2.0 Values####
11:13:26: CSD_STRUCTURE                                 :0x1
11:13:26: Reserv1                                       :0x0
11:13:26: Time Access 1 TAAC                            :0xe
11:13:26: Time Access 2 NSAC*100                        :0x0
11:13:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:26: Card Command Classess CCC                     :0x5b5
11:13:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:26: DSR(driver stage register)  DSR_IMP           :0x0
11:13:26: Reserv2                                       :0x0
11:13:26: Device Size C_SIZE                            :0xedc8
11:13:26: Reserv3                                       :0x0
11:13:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:26: Reserv4                                       :0x0
11:13:26: Write Speed Factor R2W_FACTOR                 :0x2
11:13:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:26: FILE_FORMAT_GRP                               :0x0
11:13:26: COPY flag                                     :0x1
11:13:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:26: File_Format                                   :0x0
11:13:26: CRC                                           :0x0
11:13:26: ####CSD Registe Values####  

11:13:26: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:26: ProductSerialNumber = 0x23482900
11:13:26: CardMaximumLBA      = 0x3b72400
11:13:26: CardCapacity        = 32G
11:13:26: Is card secure      = 0
11:13:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:26: [DVTCommonLib]###  LogicalWrite called
11:13:27: [ WriteLba(0x1E1F926, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 580 ] 
11:13:27: [DVTCommonLib]###  LogicalWrite Completed 

11:13:27: [DVTCommonLib]###  LogicalRead called
11:13:29: [ ReadLba(0x1E1F926, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 581 ] 
11:13:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:29: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 17 times 
11:13:29: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x11, 0x0) , Command count = 582 ] 
11:13:29: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:29: [DVTCommonLib]### Card response as High Capacity from card
11:13:29: [DVTCommonLib]### VOLA from card : 0x1
11:13:29: [DVTCommonLib]### CMD Pattern from card : 0x11
11:13:29: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 583 ] 
11:13:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x064B95D0>) , Command count = 584 ] 
11:13:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:29: [ SetCardRCA(0x1, 0xD555) , Command count = 585 ] 
11:13:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:29: [ SetBusWidth(0x4) , Command count = 586 ] 
11:13:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:29: ####CSD Registe 2.0 Values####
11:13:29: CSD_STRUCTURE                                 :0x1
11:13:29: Reserv1                                       :0x0
11:13:29: Time Access 1 TAAC                            :0xe
11:13:29: Time Access 2 NSAC*100                        :0x0
11:13:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:29: Card Command Classess CCC                     :0x5b5
11:13:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:29: DSR(driver stage register)  DSR_IMP           :0x0
11:13:29: Reserv2                                       :0x0
11:13:29: Device Size C_SIZE                            :0xedc8
11:13:29: Reserv3                                       :0x0
11:13:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:29: Reserv4                                       :0x0
11:13:29: Write Speed Factor R2W_FACTOR                 :0x2
11:13:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:29: FILE_FORMAT_GRP                               :0x0
11:13:29: COPY flag                                     :0x1
11:13:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:29: File_Format                                   :0x0
11:13:29: CRC                                           :0x0
11:13:29: ####CSD Registe Values####  

11:13:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:29: ProductSerialNumber = 0x23482900
11:13:29: CardMaximumLBA      = 0x3b72400
11:13:29: CardCapacity        = 32G
11:13:29: Is card secure      = 0
11:13:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:29: [DVTCommonLib]###  LogicalWrite called
11:13:31: [ WriteLba(0x58BA7E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 587 ] 
11:13:31: [DVTCommonLib]###  LogicalWrite Completed 

11:13:31: [DVTCommonLib]###  LogicalRead called
11:13:33: [ ReadLba(0x58BA7E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 588 ] 
11:13:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 18 times 
11:13:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x12, 0x0) , Command count = 589 ] 
11:13:33: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:33: [DVTCommonLib]### Card response as High Capacity from card
11:13:33: [DVTCommonLib]### VOLA from card : 0x1
11:13:33: [DVTCommonLib]### CMD Pattern from card : 0x12
11:13:33: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9930>, <py_sfcl.CommandDataDefinition object at 0x064B9720>) , Command count = 590 ] 
11:13:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9780>, <py_sfcl.CommandDataDefinition object at 0x064B97B0>) , Command count = 591 ] 
11:13:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:33: [ SetCardRCA(0x1, 0xD555) , Command count = 592 ] 
11:13:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:33: [ SetBusWidth(0x4) , Command count = 593 ] 
11:13:33: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:33: ####CSD Registe 2.0 Values####
11:13:33: CSD_STRUCTURE                                 :0x1
11:13:33: Reserv1                                       :0x0
11:13:33: Time Access 1 TAAC                            :0xe
11:13:33: Time Access 2 NSAC*100                        :0x0
11:13:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:33: Card Command Classess CCC                     :0x5b5
11:13:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:33: DSR(driver stage register)  DSR_IMP           :0x0
11:13:33: Reserv2                                       :0x0
11:13:33: Device Size C_SIZE                            :0xedc8
11:13:33: Reserv3                                       :0x0
11:13:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:33: Reserv4                                       :0x0
11:13:33: Write Speed Factor R2W_FACTOR                 :0x2
11:13:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:33: FILE_FORMAT_GRP                               :0x0
11:13:33: COPY flag                                     :0x1
11:13:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:33: File_Format                                   :0x0
11:13:33: CRC                                           :0x0
11:13:33: ####CSD Registe Values####  

11:13:33: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:33: ProductSerialNumber = 0x23482900
11:13:33: CardMaximumLBA      = 0x3b72400
11:13:33: CardCapacity        = 32G
11:13:33: Is card secure      = 0
11:13:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:33: [DVTCommonLib]###  LogicalWrite called
11:13:34: [ WriteLba(0x2511D07, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 594 ] 
11:13:34: [DVTCommonLib]###  LogicalWrite Completed 

11:13:34: [DVTCommonLib]###  LogicalRead called
11:13:36: [ ReadLba(0x2511D07, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 595 ] 
11:13:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:36: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 19 times 
11:13:36: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x13, 0x0) , Command count = 596 ] 
11:13:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:36: [DVTCommonLib]### Card response as High Capacity from card
11:13:36: [DVTCommonLib]### VOLA from card : 0x1
11:13:36: [DVTCommonLib]### CMD Pattern from card : 0x13
11:13:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A50>, <py_sfcl.CommandDataDefinition object at 0x064B9A80>) , Command count = 597 ] 
11:13:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9D20>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 598 ] 
11:13:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:36: [ SetCardRCA(0x1, 0xD555) , Command count = 599 ] 
11:13:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:36: [ SetBusWidth(0x4) , Command count = 600 ] 
11:13:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:36: ####CSD Registe 2.0 Values####
11:13:36: CSD_STRUCTURE                                 :0x1
11:13:36: Reserv1                                       :0x0
11:13:36: Time Access 1 TAAC                            :0xe
11:13:36: Time Access 2 NSAC*100                        :0x0
11:13:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:36: Card Command Classess CCC                     :0x5b5
11:13:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:36: DSR(driver stage register)  DSR_IMP           :0x0
11:13:36: Reserv2                                       :0x0
11:13:36: Device Size C_SIZE                            :0xedc8
11:13:36: Reserv3                                       :0x0
11:13:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:36: Reserv4                                       :0x0
11:13:36: Write Speed Factor R2W_FACTOR                 :0x2
11:13:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:36: FILE_FORMAT_GRP                               :0x0
11:13:36: COPY flag                                     :0x1
11:13:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:36: File_Format                                   :0x0
11:13:36: CRC                                           :0x0
11:13:36: ####CSD Registe Values####  

11:13:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:36: ProductSerialNumber = 0x23482900
11:13:36: CardMaximumLBA      = 0x3b72400
11:13:36: CardCapacity        = 32G
11:13:36: Is card secure      = 0
11:13:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:36: [DVTCommonLib]###  LogicalWrite called
11:13:38: [ WriteLba(0x2E4FB1C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 601 ] 
11:13:38: [DVTCommonLib]###  LogicalWrite Completed 

11:13:38: [DVTCommonLib]###  LogicalRead called
11:13:40: [ ReadLba(0x2E4FB1C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 602 ] 
11:13:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:40: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 20 times 
11:13:40: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x14, 0x0) , Command count = 603 ] 
11:13:40: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:40: [DVTCommonLib]### Card response as High Capacity from card
11:13:40: [DVTCommonLib]### VOLA from card : 0x1
11:13:40: [DVTCommonLib]### CMD Pattern from card : 0x14
11:13:40: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 604 ] 
11:13:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9F30>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 605 ] 
11:13:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:40: [ SetCardRCA(0x1, 0xD555) , Command count = 606 ] 
11:13:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:40: [ SetBusWidth(0x4) , Command count = 607 ] 
11:13:40: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:40: ####CSD Registe 2.0 Values####
11:13:40: CSD_STRUCTURE                                 :0x1
11:13:40: Reserv1                                       :0x0
11:13:40: Time Access 1 TAAC                            :0xe
11:13:40: Time Access 2 NSAC*100                        :0x0
11:13:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:40: Card Command Classess CCC                     :0x5b5
11:13:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:40: DSR(driver stage register)  DSR_IMP           :0x0
11:13:40: Reserv2                                       :0x0
11:13:40: Device Size C_SIZE                            :0xedc8
11:13:40: Reserv3                                       :0x0
11:13:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:40: Reserv4                                       :0x0
11:13:40: Write Speed Factor R2W_FACTOR                 :0x2
11:13:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:40: FILE_FORMAT_GRP                               :0x0
11:13:40: COPY flag                                     :0x1
11:13:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:40: File_Format                                   :0x0
11:13:40: CRC                                           :0x0
11:13:40: ####CSD Registe Values####  

11:13:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:40: ProductSerialNumber = 0x23482900
11:13:40: CardMaximumLBA      = 0x3b72400
11:13:40: CardCapacity        = 32G
11:13:40: Is card secure      = 0
11:13:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:40: [DVTCommonLib]###  LogicalWrite called
11:13:42: [ WriteLba(0x1D1F866, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 608 ] 
11:13:42: [DVTCommonLib]###  LogicalWrite Completed 

11:13:42: [DVTCommonLib]###  LogicalRead called
11:13:43: [ ReadLba(0x1D1F866, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 609 ] 
11:13:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:43: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 21 times 
11:13:43: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x15, 0x0) , Command count = 610 ] 
11:13:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:43: [DVTCommonLib]### Card response as High Capacity from card
11:13:43: [DVTCommonLib]### VOLA from card : 0x1
11:13:43: [DVTCommonLib]### CMD Pattern from card : 0x15
11:13:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9690>, <py_sfcl.CommandDataDefinition object at 0x064B9750>) , Command count = 611 ] 
11:13:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488090>, <py_sfcl.CommandDataDefinition object at 0x06488E70>) , Command count = 612 ] 
11:13:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:43: [ SetCardRCA(0x1, 0xD555) , Command count = 613 ] 
11:13:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:43: [ SetBusWidth(0x4) , Command count = 614 ] 
11:13:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:43: ####CSD Registe 2.0 Values####
11:13:43: CSD_STRUCTURE                                 :0x1
11:13:43: Reserv1                                       :0x0
11:13:43: Time Access 1 TAAC                            :0xe
11:13:43: Time Access 2 NSAC*100                        :0x0
11:13:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:43: Card Command Classess CCC                     :0x5b5
11:13:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:43: DSR(driver stage register)  DSR_IMP           :0x0
11:13:43: Reserv2                                       :0x0
11:13:43: Device Size C_SIZE                            :0xedc8
11:13:43: Reserv3                                       :0x0
11:13:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:43: Reserv4                                       :0x0
11:13:43: Write Speed Factor R2W_FACTOR                 :0x2
11:13:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:43: FILE_FORMAT_GRP                               :0x0
11:13:43: COPY flag                                     :0x1
11:13:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:43: File_Format                                   :0x0
11:13:43: CRC                                           :0x0
11:13:43: ####CSD Registe Values####  

11:13:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:44: ProductSerialNumber = 0x23482900
11:13:44: CardMaximumLBA      = 0x3b72400
11:13:44: CardCapacity        = 32G
11:13:44: Is card secure      = 0
11:13:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:44: [DVTCommonLib]###  LogicalWrite called
11:13:45: [ WriteLba(0x811F32, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 615 ] 
11:13:45: [DVTCommonLib]###  LogicalWrite Completed 

11:13:45: [DVTCommonLib]###  LogicalRead called
11:13:47: [ ReadLba(0x811F32, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 616 ] 
11:13:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:47: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 22 times 
11:13:47: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x16, 0x0) , Command count = 617 ] 
11:13:47: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:47: [DVTCommonLib]### Card response as High Capacity from card
11:13:47: [DVTCommonLib]### VOLA from card : 0x1
11:13:47: [DVTCommonLib]### CMD Pattern from card : 0x16
11:13:47: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9CF0>, <py_sfcl.CommandDataDefinition object at 0x064B9C00>) , Command count = 618 ] 
11:13:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9B10>, <py_sfcl.CommandDataDefinition object at 0x06488420>) , Command count = 619 ] 
11:13:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:47: [ SetCardRCA(0x1, 0xD555) , Command count = 620 ] 
11:13:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:47: [ SetBusWidth(0x4) , Command count = 621 ] 
11:13:47: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:47: ####CSD Registe 2.0 Values####
11:13:47: CSD_STRUCTURE                                 :0x1
11:13:47: Reserv1                                       :0x0
11:13:47: Time Access 1 TAAC                            :0xe
11:13:47: Time Access 2 NSAC*100                        :0x0
11:13:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:47: Card Command Classess CCC                     :0x5b5
11:13:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:47: DSR(driver stage register)  DSR_IMP           :0x0
11:13:47: Reserv2                                       :0x0
11:13:47: Device Size C_SIZE                            :0xedc8
11:13:47: Reserv3                                       :0x0
11:13:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:47: Reserv4                                       :0x0
11:13:47: Write Speed Factor R2W_FACTOR                 :0x2
11:13:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:47: FILE_FORMAT_GRP                               :0x0
11:13:47: COPY flag                                     :0x1
11:13:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:47: File_Format                                   :0x0
11:13:47: CRC                                           :0x0
11:13:47: ####CSD Registe Values####  

11:13:47: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:47: ProductSerialNumber = 0x23482900
11:13:47: CardMaximumLBA      = 0x3b72400
11:13:47: CardCapacity        = 32G
11:13:47: Is card secure      = 0
11:13:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:47: [DVTCommonLib]###  LogicalWrite called
11:13:49: [ WriteLba(0x2CBAE8F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 622 ] 
11:13:49: [DVTCommonLib]###  LogicalWrite Completed 

11:13:49: [DVTCommonLib]###  LogicalRead called
11:13:50: [ ReadLba(0x2CBAE8F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 623 ] 
11:13:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 23 times 
11:13:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x17, 0x0) , Command count = 624 ] 
11:13:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:51: [DVTCommonLib]### Card response as High Capacity from card
11:13:51: [DVTCommonLib]### VOLA from card : 0x1
11:13:51: [DVTCommonLib]### CMD Pattern from card : 0x17
11:13:51: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B98D0>, <py_sfcl.CommandDataDefinition object at 0x064B9840>) , Command count = 625 ] 
11:13:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AB0>, <py_sfcl.CommandDataDefinition object at 0x06508A50>) , Command count = 626 ] 
11:13:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:51: [ SetCardRCA(0x1, 0xD555) , Command count = 627 ] 
11:13:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:51: [ SetBusWidth(0x4) , Command count = 628 ] 
11:13:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:51: ####CSD Registe 2.0 Values####
11:13:51: CSD_STRUCTURE                                 :0x1
11:13:51: Reserv1                                       :0x0
11:13:51: Time Access 1 TAAC                            :0xe
11:13:51: Time Access 2 NSAC*100                        :0x0
11:13:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:51: Card Command Classess CCC                     :0x5b5
11:13:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:51: DSR(driver stage register)  DSR_IMP           :0x0
11:13:51: Reserv2                                       :0x0
11:13:51: Device Size C_SIZE                            :0xedc8
11:13:51: Reserv3                                       :0x0
11:13:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:51: Reserv4                                       :0x0
11:13:51: Write Speed Factor R2W_FACTOR                 :0x2
11:13:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:51: FILE_FORMAT_GRP                               :0x0
11:13:51: COPY flag                                     :0x1
11:13:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:51: File_Format                                   :0x0
11:13:51: CRC                                           :0x0
11:13:51: ####CSD Registe Values####  

11:13:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:51: ProductSerialNumber = 0x23482900
11:13:51: CardMaximumLBA      = 0x3b72400
11:13:51: CardCapacity        = 32G
11:13:51: Is card secure      = 0
11:13:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:51: [DVTCommonLib]###  LogicalWrite called
11:13:52: [ WriteLba(0x7E759C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 629 ] 
11:13:52: [DVTCommonLib]###  LogicalWrite Completed 

11:13:52: [DVTCommonLib]###  LogicalRead called
11:13:54: [ ReadLba(0x7E759C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 630 ] 
11:13:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:54: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 24 times 
11:13:54: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x18, 0x0) , Command count = 631 ] 
11:13:54: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:54: [DVTCommonLib]### Card response as High Capacity from card
11:13:54: [DVTCommonLib]### VOLA from card : 0x1
11:13:54: [DVTCommonLib]### CMD Pattern from card : 0x18
11:13:54: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508480>) , Command count = 632 ] 
11:13:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065082A0>, <py_sfcl.CommandDataDefinition object at 0x06508360>) , Command count = 633 ] 
11:13:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:54: [ SetCardRCA(0x1, 0xD555) , Command count = 634 ] 
11:13:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:54: [ SetBusWidth(0x4) , Command count = 635 ] 
11:13:54: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:54: ####CSD Registe 2.0 Values####
11:13:54: CSD_STRUCTURE                                 :0x1
11:13:54: Reserv1                                       :0x0
11:13:54: Time Access 1 TAAC                            :0xe
11:13:54: Time Access 2 NSAC*100                        :0x0
11:13:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:54: Card Command Classess CCC                     :0x5b5
11:13:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:54: DSR(driver stage register)  DSR_IMP           :0x0
11:13:54: Reserv2                                       :0x0
11:13:54: Device Size C_SIZE                            :0xedc8
11:13:54: Reserv3                                       :0x0
11:13:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:54: Reserv4                                       :0x0
11:13:54: Write Speed Factor R2W_FACTOR                 :0x2
11:13:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:54: FILE_FORMAT_GRP                               :0x0
11:13:54: COPY flag                                     :0x1
11:13:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:54: File_Format                                   :0x0
11:13:54: CRC                                           :0x0
11:13:54: ####CSD Registe Values####  

11:13:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:54: ProductSerialNumber = 0x23482900
11:13:54: CardMaximumLBA      = 0x3b72400
11:13:54: CardCapacity        = 32G
11:13:54: Is card secure      = 0
11:13:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:54: [DVTCommonLib]###  LogicalWrite called
11:13:56: [ WriteLba(0x27D7451, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 636 ] 
11:13:56: [DVTCommonLib]###  LogicalWrite Completed 

11:13:56: [DVTCommonLib]###  LogicalRead called
11:13:57: [ ReadLba(0x27D7451, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 637 ] 
11:13:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:13:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:13:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 25 times 
11:13:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:13:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:13:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x19, 0x0) , Command count = 638 ] 
11:13:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:13:58: [DVTCommonLib]### Card response as High Capacity from card
11:13:58: [DVTCommonLib]### VOLA from card : 0x1
11:13:58: [DVTCommonLib]### CMD Pattern from card : 0x19
11:13:58: [DVTCommonLib]### Reserved bits from card : 0x0
11:13:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:13:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C90>, <py_sfcl.CommandDataDefinition object at 0x065064E0>) , Command count = 639 ] 
11:13:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:13:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAB10>, <py_sfcl.CommandDataDefinition object at 0x064889F0>) , Command count = 640 ] 
11:13:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:13:58: [ SetCardRCA(0x1, 0xD555) , Command count = 641 ] 
11:13:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:13:58: [ SetBusWidth(0x4) , Command count = 642 ] 
11:13:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:13:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:13:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:13:58: ####CSD Registe 2.0 Values####
11:13:58: CSD_STRUCTURE                                 :0x1
11:13:58: Reserv1                                       :0x0
11:13:58: Time Access 1 TAAC                            :0xe
11:13:58: Time Access 2 NSAC*100                        :0x0
11:13:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:13:58: Card Command Classess CCC                     :0x5b5
11:13:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:13:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:13:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:13:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:13:58: DSR(driver stage register)  DSR_IMP           :0x0
11:13:58: Reserv2                                       :0x0
11:13:58: Device Size C_SIZE                            :0xedc8
11:13:58: Reserv3                                       :0x0
11:13:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:13:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:13:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:13:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:13:58: Reserv4                                       :0x0
11:13:58: Write Speed Factor R2W_FACTOR                 :0x2
11:13:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:13:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:13:58: FILE_FORMAT_GRP                               :0x0
11:13:58: COPY flag                                     :0x1
11:13:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:13:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:13:58: File_Format                                   :0x0
11:13:58: CRC                                           :0x0
11:13:58: ####CSD Registe Values####  

11:13:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:13:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:13:58: ProductSerialNumber = 0x23482900
11:13:58: CardMaximumLBA      = 0x3b72400
11:13:58: CardCapacity        = 32G
11:13:58: Is card secure      = 0
11:13:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:13:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:13:58: [DVTCommonLib]###  LogicalWrite called
11:13:59: [ WriteLba(0xB17CCF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 643 ] 
11:13:59: [DVTCommonLib]###  LogicalWrite Completed 

11:13:59: [DVTCommonLib]###  LogicalRead called
11:14:01: [ ReadLba(0xB17CCF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 644 ] 
11:14:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:01: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 26 times 
11:14:01: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1A, 0x0) , Command count = 645 ] 
11:14:01: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:01: [DVTCommonLib]### Card response as High Capacity from card
11:14:01: [DVTCommonLib]### VOLA from card : 0x1
11:14:01: [DVTCommonLib]### CMD Pattern from card : 0x1A
11:14:01: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506ED0>, <py_sfcl.CommandDataDefinition object at 0x06506F00>) , Command count = 646 ] 
11:14:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506E70>, <py_sfcl.CommandDataDefinition object at 0x06506F30>) , Command count = 647 ] 
11:14:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:01: [ SetCardRCA(0x1, 0xD555) , Command count = 648 ] 
11:14:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:01: [ SetBusWidth(0x4) , Command count = 649 ] 
11:14:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:01: ####CSD Registe 2.0 Values####
11:14:01: CSD_STRUCTURE                                 :0x1
11:14:01: Reserv1                                       :0x0
11:14:01: Time Access 1 TAAC                            :0xe
11:14:01: Time Access 2 NSAC*100                        :0x0
11:14:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:01: Card Command Classess CCC                     :0x5b5
11:14:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:01: DSR(driver stage register)  DSR_IMP           :0x0
11:14:01: Reserv2                                       :0x0
11:14:01: Device Size C_SIZE                            :0xedc8
11:14:01: Reserv3                                       :0x0
11:14:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:01: Reserv4                                       :0x0
11:14:01: Write Speed Factor R2W_FACTOR                 :0x2
11:14:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:01: FILE_FORMAT_GRP                               :0x0
11:14:01: COPY flag                                     :0x1
11:14:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:01: File_Format                                   :0x0
11:14:01: CRC                                           :0x0
11:14:01: ####CSD Registe Values####  

11:14:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:01: ProductSerialNumber = 0x23482900
11:14:01: CardMaximumLBA      = 0x3b72400
11:14:01: CardCapacity        = 32G
11:14:01: Is card secure      = 0
11:14:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:01: [DVTCommonLib]###  LogicalWrite called
11:14:03: [ WriteLba(0x156D5E3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 650 ] 
11:14:03: [DVTCommonLib]###  LogicalWrite Completed 

11:14:03: [DVTCommonLib]###  LogicalRead called
11:14:05: [ ReadLba(0x156D5E3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 651 ] 
11:14:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 27 times 
11:14:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1B, 0x0) , Command count = 652 ] 
11:14:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:05: [DVTCommonLib]### Card response as High Capacity from card
11:14:05: [DVTCommonLib]### VOLA from card : 0x1
11:14:05: [DVTCommonLib]### CMD Pattern from card : 0x1B
11:14:05: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C60>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 653 ] 
11:14:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506A80>, <py_sfcl.CommandDataDefinition object at 0x06506B40>) , Command count = 654 ] 
11:14:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:05: [ SetCardRCA(0x1, 0xD555) , Command count = 655 ] 
11:14:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:05: [ SetBusWidth(0x4) , Command count = 656 ] 
11:14:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:05: ####CSD Registe 2.0 Values####
11:14:05: CSD_STRUCTURE                                 :0x1
11:14:05: Reserv1                                       :0x0
11:14:05: Time Access 1 TAAC                            :0xe
11:14:05: Time Access 2 NSAC*100                        :0x0
11:14:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:05: Card Command Classess CCC                     :0x5b5
11:14:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:05: DSR(driver stage register)  DSR_IMP           :0x0
11:14:05: Reserv2                                       :0x0
11:14:05: Device Size C_SIZE                            :0xedc8
11:14:05: Reserv3                                       :0x0
11:14:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:05: Reserv4                                       :0x0
11:14:05: Write Speed Factor R2W_FACTOR                 :0x2
11:14:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:05: FILE_FORMAT_GRP                               :0x0
11:14:05: COPY flag                                     :0x1
11:14:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:05: File_Format                                   :0x0
11:14:05: CRC                                           :0x0
11:14:05: ####CSD Registe Values####  

11:14:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:05: ProductSerialNumber = 0x23482900
11:14:05: CardMaximumLBA      = 0x3b72400
11:14:05: CardCapacity        = 32G
11:14:05: Is card secure      = 0
11:14:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:05: [DVTCommonLib]###  LogicalWrite called
11:14:07: [ WriteLba(0x1BC06D9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 657 ] 
11:14:07: [DVTCommonLib]###  LogicalWrite Completed 

11:14:07: [DVTCommonLib]###  LogicalRead called
11:14:08: [ ReadLba(0x1BC06D9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 658 ] 
11:14:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 28 times 
11:14:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1C, 0x0) , Command count = 659 ] 
11:14:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:08: [DVTCommonLib]### Card response as High Capacity from card
11:14:08: [DVTCommonLib]### VOLA from card : 0x1
11:14:08: [DVTCommonLib]### CMD Pattern from card : 0x1C
11:14:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065067E0>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 660 ] 
11:14:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506570>, <py_sfcl.CommandDataDefinition object at 0x06506480>) , Command count = 661 ] 
11:14:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:08: [ SetCardRCA(0x1, 0xD555) , Command count = 662 ] 
11:14:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:08: [ SetBusWidth(0x4) , Command count = 663 ] 
11:14:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:08: ####CSD Registe 2.0 Values####
11:14:08: CSD_STRUCTURE                                 :0x1
11:14:08: Reserv1                                       :0x0
11:14:08: Time Access 1 TAAC                            :0xe
11:14:08: Time Access 2 NSAC*100                        :0x0
11:14:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:08: Card Command Classess CCC                     :0x5b5
11:14:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:08: DSR(driver stage register)  DSR_IMP           :0x0
11:14:08: Reserv2                                       :0x0
11:14:08: Device Size C_SIZE                            :0xedc8
11:14:08: Reserv3                                       :0x0
11:14:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:08: Reserv4                                       :0x0
11:14:08: Write Speed Factor R2W_FACTOR                 :0x2
11:14:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:08: FILE_FORMAT_GRP                               :0x0
11:14:08: COPY flag                                     :0x1
11:14:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:08: File_Format                                   :0x0
11:14:08: CRC                                           :0x0
11:14:08: ####CSD Registe Values####  

11:14:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:08: ProductSerialNumber = 0x23482900
11:14:08: CardMaximumLBA      = 0x3b72400
11:14:08: CardCapacity        = 32G
11:14:08: Is card secure      = 0
11:14:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:08: [DVTCommonLib]###  LogicalWrite called
11:14:10: [ WriteLba(0x15A16B9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 664 ] 
11:14:10: [DVTCommonLib]###  LogicalWrite Completed 

11:14:10: [DVTCommonLib]###  LogicalRead called
11:14:12: [ ReadLba(0x15A16B9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 665 ] 
11:14:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 29 times 
11:14:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1D, 0x0) , Command count = 666 ] 
11:14:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:12: [DVTCommonLib]### Card response as High Capacity from card
11:14:12: [DVTCommonLib]### VOLA from card : 0x1
11:14:12: [DVTCommonLib]### CMD Pattern from card : 0x1D
11:14:12: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFF00>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 667 ] 
11:14:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064D7CC0>, <py_sfcl.CommandDataDefinition object at 0x064D7D80>) , Command count = 668 ] 
11:14:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:12: [ SetCardRCA(0x1, 0xD555) , Command count = 669 ] 
11:14:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:12: [ SetBusWidth(0x4) , Command count = 670 ] 
11:14:12: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:12: ####CSD Registe 2.0 Values####
11:14:12: CSD_STRUCTURE                                 :0x1
11:14:12: Reserv1                                       :0x0
11:14:12: Time Access 1 TAAC                            :0xe
11:14:12: Time Access 2 NSAC*100                        :0x0
11:14:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:12: Card Command Classess CCC                     :0x5b5
11:14:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:12: DSR(driver stage register)  DSR_IMP           :0x0
11:14:12: Reserv2                                       :0x0
11:14:12: Device Size C_SIZE                            :0xedc8
11:14:12: Reserv3                                       :0x0
11:14:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:12: Reserv4                                       :0x0
11:14:12: Write Speed Factor R2W_FACTOR                 :0x2
11:14:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:12: FILE_FORMAT_GRP                               :0x0
11:14:12: COPY flag                                     :0x1
11:14:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:12: File_Format                                   :0x0
11:14:12: CRC                                           :0x0
11:14:12: ####CSD Registe Values####  

11:14:12: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:12: ProductSerialNumber = 0x23482900
11:14:12: CardMaximumLBA      = 0x3b72400
11:14:12: CardCapacity        = 32G
11:14:12: Is card secure      = 0
11:14:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:12: [DVTCommonLib]###  LogicalWrite called
11:14:14: [ WriteLba(0xB24C18, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 671 ] 
11:14:14: [DVTCommonLib]###  LogicalWrite Completed 

11:14:14: [DVTCommonLib]###  LogicalRead called
11:14:15: [ ReadLba(0xB24C18, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 672 ] 
11:14:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 30 times 
11:14:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1E, 0x0) , Command count = 673 ] 
11:14:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:15: [DVTCommonLib]### Card response as High Capacity from card
11:14:15: [DVTCommonLib]### VOLA from card : 0x1
11:14:15: [DVTCommonLib]### CMD Pattern from card : 0x1E
11:14:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064D7720>) , Command count = 674 ] 
11:14:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF030>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 675 ] 
11:14:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:15: [ SetCardRCA(0x1, 0xD555) , Command count = 676 ] 
11:14:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:16: [ SetBusWidth(0x4) , Command count = 677 ] 
11:14:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:16: ####CSD Registe 2.0 Values####
11:14:16: CSD_STRUCTURE                                 :0x1
11:14:16: Reserv1                                       :0x0
11:14:16: Time Access 1 TAAC                            :0xe
11:14:16: Time Access 2 NSAC*100                        :0x0
11:14:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:16: Card Command Classess CCC                     :0x5b5
11:14:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:16: DSR(driver stage register)  DSR_IMP           :0x0
11:14:16: Reserv2                                       :0x0
11:14:16: Device Size C_SIZE                            :0xedc8
11:14:16: Reserv3                                       :0x0
11:14:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:16: Reserv4                                       :0x0
11:14:16: Write Speed Factor R2W_FACTOR                 :0x2
11:14:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:16: FILE_FORMAT_GRP                               :0x0
11:14:16: COPY flag                                     :0x1
11:14:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:16: File_Format                                   :0x0
11:14:16: CRC                                           :0x0
11:14:16: ####CSD Registe Values####  

11:14:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:16: ProductSerialNumber = 0x23482900
11:14:16: CardMaximumLBA      = 0x3b72400
11:14:16: CardCapacity        = 32G
11:14:16: Is card secure      = 0
11:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:16: [DVTCommonLib]###  LogicalWrite called
11:14:17: [ WriteLba(0x190F858, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 678 ] 
11:14:17: [DVTCommonLib]###  LogicalWrite Completed 

11:14:17: [DVTCommonLib]###  LogicalRead called
11:14:19: [ ReadLba(0x190F858, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 679 ] 
11:14:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 31 times 
11:14:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1F, 0x0) , Command count = 680 ] 
11:14:19: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:19: [DVTCommonLib]### Card response as High Capacity from card
11:14:19: [DVTCommonLib]### VOLA from card : 0x1
11:14:19: [DVTCommonLib]### CMD Pattern from card : 0x1F
11:14:19: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 681 ] 
11:14:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF3F0>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 682 ] 
11:14:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:19: [ SetCardRCA(0x1, 0xD555) , Command count = 683 ] 
11:14:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:19: [ SetBusWidth(0x4) , Command count = 684 ] 
11:14:19: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:19: ####CSD Registe 2.0 Values####
11:14:19: CSD_STRUCTURE                                 :0x1
11:14:19: Reserv1                                       :0x0
11:14:19: Time Access 1 TAAC                            :0xe
11:14:19: Time Access 2 NSAC*100                        :0x0
11:14:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:19: Card Command Classess CCC                     :0x5b5
11:14:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:19: DSR(driver stage register)  DSR_IMP           :0x0
11:14:19: Reserv2                                       :0x0
11:14:19: Device Size C_SIZE                            :0xedc8
11:14:19: Reserv3                                       :0x0
11:14:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:19: Reserv4                                       :0x0
11:14:19: Write Speed Factor R2W_FACTOR                 :0x2
11:14:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:19: FILE_FORMAT_GRP                               :0x0
11:14:19: COPY flag                                     :0x1
11:14:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:19: File_Format                                   :0x0
11:14:19: CRC                                           :0x0
11:14:19: ####CSD Registe Values####  

11:14:19: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:19: ProductSerialNumber = 0x23482900
11:14:19: CardMaximumLBA      = 0x3b72400
11:14:19: CardCapacity        = 32G
11:14:19: Is card secure      = 0
11:14:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:19: [DVTCommonLib]###  LogicalWrite called
11:14:21: [ WriteLba(0x1D1DC7E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 685 ] 
11:14:21: [DVTCommonLib]###  LogicalWrite Completed 

11:14:21: [DVTCommonLib]###  LogicalRead called
11:14:22: [ ReadLba(0x1D1DC7E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 686 ] 
11:14:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:22: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 32 times 
11:14:22: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x20, 0x0) , Command count = 687 ] 
11:14:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:23: [DVTCommonLib]### Card response as High Capacity from card
11:14:23: [DVTCommonLib]### VOLA from card : 0x1
11:14:23: [DVTCommonLib]### CMD Pattern from card : 0x20
11:14:23: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 688 ] 
11:14:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF7E0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 689 ] 
11:14:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:23: [ SetCardRCA(0x1, 0xD555) , Command count = 690 ] 
11:14:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:23: [ SetBusWidth(0x4) , Command count = 691 ] 
11:14:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:23: ####CSD Registe 2.0 Values####
11:14:23: CSD_STRUCTURE                                 :0x1
11:14:23: Reserv1                                       :0x0
11:14:23: Time Access 1 TAAC                            :0xe
11:14:23: Time Access 2 NSAC*100                        :0x0
11:14:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:23: Card Command Classess CCC                     :0x5b5
11:14:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:23: DSR(driver stage register)  DSR_IMP           :0x0
11:14:23: Reserv2                                       :0x0
11:14:23: Device Size C_SIZE                            :0xedc8
11:14:23: Reserv3                                       :0x0
11:14:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:23: Reserv4                                       :0x0
11:14:23: Write Speed Factor R2W_FACTOR                 :0x2
11:14:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:23: FILE_FORMAT_GRP                               :0x0
11:14:23: COPY flag                                     :0x1
11:14:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:23: File_Format                                   :0x0
11:14:23: CRC                                           :0x0
11:14:23: ####CSD Registe Values####  

11:14:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:23: ProductSerialNumber = 0x23482900
11:14:23: CardMaximumLBA      = 0x3b72400
11:14:23: CardCapacity        = 32G
11:14:23: Is card secure      = 0
11:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:23: [DVTCommonLib]###  LogicalWrite called
11:14:24: [ WriteLba(0x19AECAC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 692 ] 
11:14:24: [DVTCommonLib]###  LogicalWrite Completed 

11:14:24: [DVTCommonLib]###  LogicalRead called
11:14:26: [ ReadLba(0x19AECAC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 693 ] 
11:14:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 33 times 
11:14:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x21, 0x0) , Command count = 694 ] 
11:14:26: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:26: [DVTCommonLib]### Card response as High Capacity from card
11:14:26: [DVTCommonLib]### VOLA from card : 0x1
11:14:26: [DVTCommonLib]### CMD Pattern from card : 0x21
11:14:26: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 695 ] 
11:14:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFBD0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 696 ] 
11:14:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:26: [ SetCardRCA(0x1, 0xD555) , Command count = 697 ] 
11:14:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:26: [ SetBusWidth(0x4) , Command count = 698 ] 
11:14:26: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:26: ####CSD Registe 2.0 Values####
11:14:26: CSD_STRUCTURE                                 :0x1
11:14:26: Reserv1                                       :0x0
11:14:26: Time Access 1 TAAC                            :0xe
11:14:26: Time Access 2 NSAC*100                        :0x0
11:14:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:26: Card Command Classess CCC                     :0x5b5
11:14:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:26: DSR(driver stage register)  DSR_IMP           :0x0
11:14:26: Reserv2                                       :0x0
11:14:26: Device Size C_SIZE                            :0xedc8
11:14:26: Reserv3                                       :0x0
11:14:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:26: Reserv4                                       :0x0
11:14:26: Write Speed Factor R2W_FACTOR                 :0x2
11:14:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:26: FILE_FORMAT_GRP                               :0x0
11:14:26: COPY flag                                     :0x1
11:14:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:26: File_Format                                   :0x0
11:14:26: CRC                                           :0x0
11:14:26: ####CSD Registe Values####  

11:14:26: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:26: ProductSerialNumber = 0x23482900
11:14:26: CardMaximumLBA      = 0x3b72400
11:14:26: CardCapacity        = 32G
11:14:26: Is card secure      = 0
11:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:26: [DVTCommonLib]###  LogicalWrite called
11:14:28: [ WriteLba(0x330CE77, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 699 ] 
11:14:28: [DVTCommonLib]###  LogicalWrite Completed 

11:14:28: [DVTCommonLib]###  LogicalRead called
11:14:30: [ ReadLba(0x330CE77, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 700 ] 
11:14:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 34 times 
11:14:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x22, 0x0) , Command count = 701 ] 
11:14:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:30: [DVTCommonLib]### Card response as High Capacity from card
11:14:30: [DVTCommonLib]### VOLA from card : 0x1
11:14:30: [DVTCommonLib]### CMD Pattern from card : 0x22
11:14:30: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 702 ] 
11:14:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506090>, <py_sfcl.CommandDataDefinition object at 0x064DFC90>) , Command count = 703 ] 
11:14:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:30: [ SetCardRCA(0x1, 0xD555) , Command count = 704 ] 
11:14:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:30: [ SetBusWidth(0x4) , Command count = 705 ] 
11:14:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:30: ####CSD Registe 2.0 Values####
11:14:30: CSD_STRUCTURE                                 :0x1
11:14:30: Reserv1                                       :0x0
11:14:30: Time Access 1 TAAC                            :0xe
11:14:30: Time Access 2 NSAC*100                        :0x0
11:14:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:30: Card Command Classess CCC                     :0x5b5
11:14:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:30: DSR(driver stage register)  DSR_IMP           :0x0
11:14:30: Reserv2                                       :0x0
11:14:30: Device Size C_SIZE                            :0xedc8
11:14:30: Reserv3                                       :0x0
11:14:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:30: Reserv4                                       :0x0
11:14:30: Write Speed Factor R2W_FACTOR                 :0x2
11:14:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:30: FILE_FORMAT_GRP                               :0x0
11:14:30: COPY flag                                     :0x1
11:14:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:30: File_Format                                   :0x0
11:14:30: CRC                                           :0x0
11:14:30: ####CSD Registe Values####  

11:14:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:30: ProductSerialNumber = 0x23482900
11:14:30: CardMaximumLBA      = 0x3b72400
11:14:30: CardCapacity        = 32G
11:14:30: Is card secure      = 0
11:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:30: [DVTCommonLib]###  LogicalWrite called
11:14:32: [ WriteLba(0x189EB46, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 706 ] 
11:14:32: [DVTCommonLib]###  LogicalWrite Completed 

11:14:32: [DVTCommonLib]###  LogicalRead called
11:14:33: [ ReadLba(0x189EB46, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 707 ] 
11:14:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 35 times 
11:14:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x23, 0x0) , Command count = 708 ] 
11:14:33: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:33: [DVTCommonLib]### Card response as High Capacity from card
11:14:33: [DVTCommonLib]### VOLA from card : 0x1
11:14:33: [DVTCommonLib]### CMD Pattern from card : 0x23
11:14:33: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 709 ] 
11:14:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506390>, <py_sfcl.CommandDataDefinition object at 0x064DFF30>) , Command count = 710 ] 
11:14:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:33: [ SetCardRCA(0x1, 0xD555) , Command count = 711 ] 
11:14:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:33: [ SetBusWidth(0x4) , Command count = 712 ] 
11:14:33: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:33: ####CSD Registe 2.0 Values####
11:14:33: CSD_STRUCTURE                                 :0x1
11:14:33: Reserv1                                       :0x0
11:14:33: Time Access 1 TAAC                            :0xe
11:14:33: Time Access 2 NSAC*100                        :0x0
11:14:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:33: Card Command Classess CCC                     :0x5b5
11:14:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:33: DSR(driver stage register)  DSR_IMP           :0x0
11:14:33: Reserv2                                       :0x0
11:14:33: Device Size C_SIZE                            :0xedc8
11:14:33: Reserv3                                       :0x0
11:14:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:33: Reserv4                                       :0x0
11:14:33: Write Speed Factor R2W_FACTOR                 :0x2
11:14:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:33: FILE_FORMAT_GRP                               :0x0
11:14:33: COPY flag                                     :0x1
11:14:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:33: File_Format                                   :0x0
11:14:33: CRC                                           :0x0
11:14:33: ####CSD Registe Values####  

11:14:33: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:33: ProductSerialNumber = 0x23482900
11:14:33: CardMaximumLBA      = 0x3b72400
11:14:33: CardCapacity        = 32G
11:14:33: Is card secure      = 0
11:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:33: [DVTCommonLib]###  LogicalWrite called
11:14:35: [ WriteLba(0x17D2002, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 713 ] 
11:14:35: [DVTCommonLib]###  LogicalWrite Completed 

11:14:35: [DVTCommonLib]###  LogicalRead called
11:14:37: [ ReadLba(0x17D2002, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 714 ] 
11:14:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 36 times 
11:14:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x24, 0x0) , Command count = 715 ] 
11:14:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:37: [DVTCommonLib]### Card response as High Capacity from card
11:14:37: [DVTCommonLib]### VOLA from card : 0x1
11:14:37: [DVTCommonLib]### CMD Pattern from card : 0x24
11:14:37: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 716 ] 
11:14:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506450>, <py_sfcl.CommandDataDefinition object at 0x064DFF30>) , Command count = 717 ] 
11:14:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:37: [ SetCardRCA(0x1, 0xD555) , Command count = 718 ] 
11:14:37: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:37: [ SetBusWidth(0x4) , Command count = 719 ] 
11:14:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:37: ####CSD Registe 2.0 Values####
11:14:37: CSD_STRUCTURE                                 :0x1
11:14:37: Reserv1                                       :0x0
11:14:37: Time Access 1 TAAC                            :0xe
11:14:37: Time Access 2 NSAC*100                        :0x0
11:14:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:37: Card Command Classess CCC                     :0x5b5
11:14:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:37: DSR(driver stage register)  DSR_IMP           :0x0
11:14:37: Reserv2                                       :0x0
11:14:37: Device Size C_SIZE                            :0xedc8
11:14:37: Reserv3                                       :0x0
11:14:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:37: Reserv4                                       :0x0
11:14:37: Write Speed Factor R2W_FACTOR                 :0x2
11:14:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:37: FILE_FORMAT_GRP                               :0x0
11:14:37: COPY flag                                     :0x1
11:14:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:37: File_Format                                   :0x0
11:14:37: CRC                                           :0x0
11:14:37: ####CSD Registe Values####  

11:14:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:37: ProductSerialNumber = 0x23482900
11:14:37: CardMaximumLBA      = 0x3b72400
11:14:37: CardCapacity        = 32G
11:14:37: Is card secure      = 0
11:14:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:37: [DVTCommonLib]###  LogicalWrite called
11:14:39: [ WriteLba(0x2A0A67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 720 ] 
11:14:39: [DVTCommonLib]###  LogicalWrite Completed 

11:14:39: [DVTCommonLib]###  LogicalRead called
11:14:40: [ ReadLba(0x2A0A67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 721 ] 
11:14:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:40: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 37 times 
11:14:40: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x25, 0x0) , Command count = 722 ] 
11:14:40: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:40: [DVTCommonLib]### Card response as High Capacity from card
11:14:40: [DVTCommonLib]### VOLA from card : 0x1
11:14:40: [DVTCommonLib]### CMD Pattern from card : 0x25
11:14:40: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 723 ] 
11:14:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506930>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 724 ] 
11:14:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:40: [ SetCardRCA(0x1, 0xD555) , Command count = 725 ] 
11:14:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:41: [ SetBusWidth(0x4) , Command count = 726 ] 
11:14:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:41: ####CSD Registe 2.0 Values####
11:14:41: CSD_STRUCTURE                                 :0x1
11:14:41: Reserv1                                       :0x0
11:14:41: Time Access 1 TAAC                            :0xe
11:14:41: Time Access 2 NSAC*100                        :0x0
11:14:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:41: Card Command Classess CCC                     :0x5b5
11:14:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:41: DSR(driver stage register)  DSR_IMP           :0x0
11:14:41: Reserv2                                       :0x0
11:14:41: Device Size C_SIZE                            :0xedc8
11:14:41: Reserv3                                       :0x0
11:14:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:41: Reserv4                                       :0x0
11:14:41: Write Speed Factor R2W_FACTOR                 :0x2
11:14:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:41: FILE_FORMAT_GRP                               :0x0
11:14:41: COPY flag                                     :0x1
11:14:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:41: File_Format                                   :0x0
11:14:41: CRC                                           :0x0
11:14:41: ####CSD Registe Values####  

11:14:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:41: ProductSerialNumber = 0x23482900
11:14:41: CardMaximumLBA      = 0x3b72400
11:14:41: CardCapacity        = 32G
11:14:41: Is card secure      = 0
11:14:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:41: [DVTCommonLib]###  LogicalWrite called
11:14:42: [ WriteLba(0x18FF0F0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 727 ] 
11:14:42: [DVTCommonLib]###  LogicalWrite Completed 

11:14:42: [DVTCommonLib]###  LogicalRead called
11:14:44: [ ReadLba(0x18FF0F0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 728 ] 
11:14:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 38 times 
11:14:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x26, 0x0) , Command count = 729 ] 
11:14:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:44: [DVTCommonLib]### Card response as High Capacity from card
11:14:44: [DVTCommonLib]### VOLA from card : 0x1
11:14:44: [DVTCommonLib]### CMD Pattern from card : 0x26
11:14:44: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 730 ] 
11:14:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506D20>, <py_sfcl.CommandDataDefinition object at 0x065068D0>) , Command count = 731 ] 
11:14:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:44: [ SetCardRCA(0x1, 0xD555) , Command count = 732 ] 
11:14:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:44: [ SetBusWidth(0x4) , Command count = 733 ] 
11:14:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:44: ####CSD Registe 2.0 Values####
11:14:44: CSD_STRUCTURE                                 :0x1
11:14:44: Reserv1                                       :0x0
11:14:44: Time Access 1 TAAC                            :0xe
11:14:44: Time Access 2 NSAC*100                        :0x0
11:14:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:44: Card Command Classess CCC                     :0x5b5
11:14:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:44: DSR(driver stage register)  DSR_IMP           :0x0
11:14:44: Reserv2                                       :0x0
11:14:44: Device Size C_SIZE                            :0xedc8
11:14:44: Reserv3                                       :0x0
11:14:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:44: Reserv4                                       :0x0
11:14:44: Write Speed Factor R2W_FACTOR                 :0x2
11:14:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:44: FILE_FORMAT_GRP                               :0x0
11:14:44: COPY flag                                     :0x1
11:14:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:44: File_Format                                   :0x0
11:14:44: CRC                                           :0x0
11:14:44: ####CSD Registe Values####  

11:14:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:44: ProductSerialNumber = 0x23482900
11:14:44: CardMaximumLBA      = 0x3b72400
11:14:44: CardCapacity        = 32G
11:14:44: Is card secure      = 0
11:14:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:44: [DVTCommonLib]###  LogicalWrite called
11:14:46: [ WriteLba(0xD9B831, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 734 ] 
11:14:46: [DVTCommonLib]###  LogicalWrite Completed 

11:14:46: [DVTCommonLib]###  LogicalRead called
11:14:47: [ ReadLba(0xD9B831, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 735 ] 
11:14:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:47: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 39 times 
11:14:47: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x27, 0x0) , Command count = 736 ] 
11:14:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:48: [DVTCommonLib]### Card response as High Capacity from card
11:14:48: [DVTCommonLib]### VOLA from card : 0x1
11:14:48: [DVTCommonLib]### CMD Pattern from card : 0x27
11:14:48: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 737 ] 
11:14:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508150>, <py_sfcl.CommandDataDefinition object at 0x06506C90>) , Command count = 738 ] 
11:14:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:48: [ SetCardRCA(0x1, 0xD555) , Command count = 739 ] 
11:14:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:48: [ SetBusWidth(0x4) , Command count = 740 ] 
11:14:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:48: ####CSD Registe 2.0 Values####
11:14:48: CSD_STRUCTURE                                 :0x1
11:14:48: Reserv1                                       :0x0
11:14:48: Time Access 1 TAAC                            :0xe
11:14:48: Time Access 2 NSAC*100                        :0x0
11:14:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:48: Card Command Classess CCC                     :0x5b5
11:14:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:48: DSR(driver stage register)  DSR_IMP           :0x0
11:14:48: Reserv2                                       :0x0
11:14:48: Device Size C_SIZE                            :0xedc8
11:14:48: Reserv3                                       :0x0
11:14:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:48: Reserv4                                       :0x0
11:14:48: Write Speed Factor R2W_FACTOR                 :0x2
11:14:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:48: FILE_FORMAT_GRP                               :0x0
11:14:48: COPY flag                                     :0x1
11:14:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:48: File_Format                                   :0x0
11:14:48: CRC                                           :0x0
11:14:48: ####CSD Registe Values####  

11:14:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:48: ProductSerialNumber = 0x23482900
11:14:48: CardMaximumLBA      = 0x3b72400
11:14:48: CardCapacity        = 32G
11:14:48: Is card secure      = 0
11:14:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:48: [DVTCommonLib]###  LogicalWrite called
11:14:49: [ WriteLba(0x342A69C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 741 ] 
11:14:49: [DVTCommonLib]###  LogicalWrite Completed 

11:14:49: [DVTCommonLib]###  LogicalRead called
11:14:51: [ ReadLba(0x342A69C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 742 ] 
11:14:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 40 times 
11:14:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x28, 0x0) , Command count = 743 ] 
11:14:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:51: [DVTCommonLib]### Card response as High Capacity from card
11:14:51: [DVTCommonLib]### VOLA from card : 0x1
11:14:51: [DVTCommonLib]### CMD Pattern from card : 0x28
11:14:51: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508420>, <py_sfcl.CommandDataDefinition object at 0x06508450>) , Command count = 744 ] 
11:14:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508540>, <py_sfcl.CommandDataDefinition object at 0x065080F0>) , Command count = 745 ] 
11:14:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:51: [ SetCardRCA(0x1, 0xD555) , Command count = 746 ] 
11:14:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:51: [ SetBusWidth(0x4) , Command count = 747 ] 
11:14:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:51: ####CSD Registe 2.0 Values####
11:14:51: CSD_STRUCTURE                                 :0x1
11:14:51: Reserv1                                       :0x0
11:14:51: Time Access 1 TAAC                            :0xe
11:14:51: Time Access 2 NSAC*100                        :0x0
11:14:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:51: Card Command Classess CCC                     :0x5b5
11:14:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:51: DSR(driver stage register)  DSR_IMP           :0x0
11:14:51: Reserv2                                       :0x0
11:14:51: Device Size C_SIZE                            :0xedc8
11:14:51: Reserv3                                       :0x0
11:14:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:51: Reserv4                                       :0x0
11:14:51: Write Speed Factor R2W_FACTOR                 :0x2
11:14:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:51: FILE_FORMAT_GRP                               :0x0
11:14:51: COPY flag                                     :0x1
11:14:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:51: File_Format                                   :0x0
11:14:51: CRC                                           :0x0
11:14:51: ####CSD Registe Values####  

11:14:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:51: ProductSerialNumber = 0x23482900
11:14:51: CardMaximumLBA      = 0x3b72400
11:14:51: CardCapacity        = 32G
11:14:51: Is card secure      = 0
11:14:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:51: [DVTCommonLib]###  LogicalWrite called
11:14:53: [ WriteLba(0xE36F52, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 748 ] 
11:14:53: [DVTCommonLib]###  LogicalWrite Completed 

11:14:53: [DVTCommonLib]###  LogicalRead called
11:14:54: [ ReadLba(0xE36F52, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 749 ] 
11:14:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:54: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 41 times 
11:14:54: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x29, 0x0) , Command count = 750 ] 
11:14:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:55: [DVTCommonLib]### Card response as High Capacity from card
11:14:55: [DVTCommonLib]### VOLA from card : 0x1
11:14:55: [DVTCommonLib]### CMD Pattern from card : 0x29
11:14:55: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 751 ] 
11:14:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508780>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 752 ] 
11:14:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:55: [ SetCardRCA(0x1, 0xD555) , Command count = 753 ] 
11:14:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:55: [ SetBusWidth(0x4) , Command count = 754 ] 
11:14:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:55: ####CSD Registe 2.0 Values####
11:14:55: CSD_STRUCTURE                                 :0x1
11:14:55: Reserv1                                       :0x0
11:14:55: Time Access 1 TAAC                            :0xe
11:14:55: Time Access 2 NSAC*100                        :0x0
11:14:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:55: Card Command Classess CCC                     :0x5b5
11:14:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:55: DSR(driver stage register)  DSR_IMP           :0x0
11:14:55: Reserv2                                       :0x0
11:14:55: Device Size C_SIZE                            :0xedc8
11:14:55: Reserv3                                       :0x0
11:14:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:55: Reserv4                                       :0x0
11:14:55: Write Speed Factor R2W_FACTOR                 :0x2
11:14:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:55: FILE_FORMAT_GRP                               :0x0
11:14:55: COPY flag                                     :0x1
11:14:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:55: File_Format                                   :0x0
11:14:55: CRC                                           :0x0
11:14:55: ####CSD Registe Values####  

11:14:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:55: ProductSerialNumber = 0x23482900
11:14:55: CardMaximumLBA      = 0x3b72400
11:14:55: CardCapacity        = 32G
11:14:55: Is card secure      = 0
11:14:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:55: [DVTCommonLib]###  LogicalWrite called
11:14:56: [ WriteLba(0x366A453, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 755 ] 
11:14:56: [DVTCommonLib]###  LogicalWrite Completed 

11:14:56: [DVTCommonLib]###  LogicalRead called
11:14:58: [ ReadLba(0x366A453, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 756 ] 
11:14:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:14:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:14:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 42 times 
11:14:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:14:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2A, 0x0) , Command count = 757 ] 
11:14:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:14:58: [DVTCommonLib]### Card response as High Capacity from card
11:14:58: [DVTCommonLib]### VOLA from card : 0x1
11:14:58: [DVTCommonLib]### CMD Pattern from card : 0x2A
11:14:58: [DVTCommonLib]### Reserved bits from card : 0x0
11:14:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 758 ] 
11:14:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089C0>, <py_sfcl.CommandDataDefinition object at 0x06508660>) , Command count = 759 ] 
11:14:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:14:58: [ SetCardRCA(0x1, 0xD555) , Command count = 760 ] 
11:14:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:58: [ SetBusWidth(0x4) , Command count = 761 ] 
11:14:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:14:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:14:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:58: ####CSD Registe 2.0 Values####
11:14:58: CSD_STRUCTURE                                 :0x1
11:14:58: Reserv1                                       :0x0
11:14:58: Time Access 1 TAAC                            :0xe
11:14:58: Time Access 2 NSAC*100                        :0x0
11:14:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:58: Card Command Classess CCC                     :0x5b5
11:14:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:58: DSR(driver stage register)  DSR_IMP           :0x0
11:14:58: Reserv2                                       :0x0
11:14:58: Device Size C_SIZE                            :0xedc8
11:14:58: Reserv3                                       :0x0
11:14:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:58: Reserv4                                       :0x0
11:14:58: Write Speed Factor R2W_FACTOR                 :0x2
11:14:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:58: FILE_FORMAT_GRP                               :0x0
11:14:58: COPY flag                                     :0x1
11:14:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:58: File_Format                                   :0x0
11:14:58: CRC                                           :0x0
11:14:58: ####CSD Registe Values####  

11:14:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:14:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:58: ProductSerialNumber = 0x23482900
11:14:58: CardMaximumLBA      = 0x3b72400
11:14:58: CardCapacity        = 32G
11:14:58: Is card secure      = 0
11:14:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:14:58: [DVTCommonLib]###  LogicalWrite called
11:15:00: [ WriteLba(0x25971D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 762 ] 
11:15:00: [DVTCommonLib]###  LogicalWrite Completed 

11:15:00: [DVTCommonLib]###  LogicalRead called
11:15:02: [ ReadLba(0x25971D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 763 ] 
11:15:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 43 times 
11:15:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2B, 0x0) , Command count = 764 ] 
11:15:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:02: [DVTCommonLib]### Card response as High Capacity from card
11:15:02: [DVTCommonLib]### VOLA from card : 0x1
11:15:02: [DVTCommonLib]### CMD Pattern from card : 0x2B
11:15:02: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 765 ] 
11:15:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDE0C0>, <py_sfcl.CommandDataDefinition object at 0x06508870>) , Command count = 766 ] 
11:15:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:02: [ SetCardRCA(0x1, 0xD555) , Command count = 767 ] 
11:15:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:02: [ SetBusWidth(0x4) , Command count = 768 ] 
11:15:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:02: ####CSD Registe 2.0 Values####
11:15:02: CSD_STRUCTURE                                 :0x1
11:15:02: Reserv1                                       :0x0
11:15:02: Time Access 1 TAAC                            :0xe
11:15:02: Time Access 2 NSAC*100                        :0x0
11:15:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:02: Card Command Classess CCC                     :0x5b5
11:15:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:02: DSR(driver stage register)  DSR_IMP           :0x0
11:15:02: Reserv2                                       :0x0
11:15:02: Device Size C_SIZE                            :0xedc8
11:15:02: Reserv3                                       :0x0
11:15:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:02: Reserv4                                       :0x0
11:15:02: Write Speed Factor R2W_FACTOR                 :0x2
11:15:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:02: FILE_FORMAT_GRP                               :0x0
11:15:02: COPY flag                                     :0x1
11:15:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:02: File_Format                                   :0x0
11:15:02: CRC                                           :0x0
11:15:02: ####CSD Registe Values####  

11:15:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:02: ProductSerialNumber = 0x23482900
11:15:02: CardMaximumLBA      = 0x3b72400
11:15:02: CardCapacity        = 32G
11:15:02: Is card secure      = 0
11:15:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:02: [DVTCommonLib]###  LogicalWrite called
11:15:04: [ WriteLba(0x36554F0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 769 ] 
11:15:04: [DVTCommonLib]###  LogicalWrite Completed 

11:15:04: [DVTCommonLib]###  LogicalRead called
11:15:05: [ ReadLba(0x36554F0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 770 ] 
11:15:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 44 times 
11:15:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2C, 0x0) , Command count = 771 ] 
11:15:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:05: [DVTCommonLib]### Card response as High Capacity from card
11:15:05: [DVTCommonLib]### VOLA from card : 0x1
11:15:05: [DVTCommonLib]### CMD Pattern from card : 0x2C
11:15:05: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 772 ] 
11:15:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7A80>, <py_sfcl.CommandDataDefinition object at 0x06508990>) , Command count = 773 ] 
11:15:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:05: [ SetCardRCA(0x1, 0xD555) , Command count = 774 ] 
11:15:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:05: [ SetBusWidth(0x4) , Command count = 775 ] 
11:15:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:05: ####CSD Registe 2.0 Values####
11:15:05: CSD_STRUCTURE                                 :0x1
11:15:05: Reserv1                                       :0x0
11:15:05: Time Access 1 TAAC                            :0xe
11:15:05: Time Access 2 NSAC*100                        :0x0
11:15:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:05: Card Command Classess CCC                     :0x5b5
11:15:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:05: DSR(driver stage register)  DSR_IMP           :0x0
11:15:05: Reserv2                                       :0x0
11:15:05: Device Size C_SIZE                            :0xedc8
11:15:05: Reserv3                                       :0x0
11:15:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:05: Reserv4                                       :0x0
11:15:05: Write Speed Factor R2W_FACTOR                 :0x2
11:15:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:05: FILE_FORMAT_GRP                               :0x0
11:15:05: COPY flag                                     :0x1
11:15:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:05: File_Format                                   :0x0
11:15:05: CRC                                           :0x0
11:15:05: ####CSD Registe Values####  

11:15:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:06: ProductSerialNumber = 0x23482900
11:15:06: CardMaximumLBA      = 0x3b72400
11:15:06: CardCapacity        = 32G
11:15:06: Is card secure      = 0
11:15:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:06: [DVTCommonLib]###  LogicalWrite called
11:15:07: [ WriteLba(0x2AC8C3B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 776 ] 
11:15:07: [DVTCommonLib]###  LogicalWrite Completed 

11:15:07: [DVTCommonLib]###  LogicalRead called
11:15:09: [ ReadLba(0x2AC8C3B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 777 ] 
11:15:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 45 times 
11:15:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2D, 0x0) , Command count = 778 ] 
11:15:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:09: [DVTCommonLib]### Card response as High Capacity from card
11:15:09: [DVTCommonLib]### VOLA from card : 0x1
11:15:09: [DVTCommonLib]### CMD Pattern from card : 0x2D
11:15:09: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 779 ] 
11:15:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB49F0>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 780 ] 
11:15:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:09: [ SetCardRCA(0x1, 0xD555) , Command count = 781 ] 
11:15:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:09: [ SetBusWidth(0x4) , Command count = 782 ] 
11:15:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:09: ####CSD Registe 2.0 Values####
11:15:09: CSD_STRUCTURE                                 :0x1
11:15:09: Reserv1                                       :0x0
11:15:09: Time Access 1 TAAC                            :0xe
11:15:09: Time Access 2 NSAC*100                        :0x0
11:15:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:09: Card Command Classess CCC                     :0x5b5
11:15:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:09: DSR(driver stage register)  DSR_IMP           :0x0
11:15:09: Reserv2                                       :0x0
11:15:09: Device Size C_SIZE                            :0xedc8
11:15:09: Reserv3                                       :0x0
11:15:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:09: Reserv4                                       :0x0
11:15:09: Write Speed Factor R2W_FACTOR                 :0x2
11:15:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:09: FILE_FORMAT_GRP                               :0x0
11:15:09: COPY flag                                     :0x1
11:15:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:09: File_Format                                   :0x0
11:15:09: CRC                                           :0x0
11:15:09: ####CSD Registe Values####  

11:15:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:09: ProductSerialNumber = 0x23482900
11:15:09: CardMaximumLBA      = 0x3b72400
11:15:09: CardCapacity        = 32G
11:15:09: Is card secure      = 0
11:15:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:09: [DVTCommonLib]###  LogicalWrite called
11:15:11: [ WriteLba(0x37A5E58, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 783 ] 
11:15:11: [DVTCommonLib]###  LogicalWrite Completed 

11:15:11: [DVTCommonLib]###  LogicalRead called
11:15:12: [ ReadLba(0x37A5E58, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 784 ] 
11:15:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 46 times 
11:15:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2E, 0x0) , Command count = 785 ] 
11:15:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:12: [DVTCommonLib]### Card response as High Capacity from card
11:15:12: [DVTCommonLib]### VOLA from card : 0x1
11:15:12: [DVTCommonLib]### CMD Pattern from card : 0x2E
11:15:12: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x06508DE0>) , Command count = 786 ] 
11:15:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508D50>) , Command count = 787 ] 
11:15:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:13: [ SetCardRCA(0x1, 0xD555) , Command count = 788 ] 
11:15:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:13: [ SetBusWidth(0x4) , Command count = 789 ] 
11:15:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:13: ####CSD Registe 2.0 Values####
11:15:13: CSD_STRUCTURE                                 :0x1
11:15:13: Reserv1                                       :0x0
11:15:13: Time Access 1 TAAC                            :0xe
11:15:13: Time Access 2 NSAC*100                        :0x0
11:15:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:13: Card Command Classess CCC                     :0x5b5
11:15:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:13: DSR(driver stage register)  DSR_IMP           :0x0
11:15:13: Reserv2                                       :0x0
11:15:13: Device Size C_SIZE                            :0xedc8
11:15:13: Reserv3                                       :0x0
11:15:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:13: Reserv4                                       :0x0
11:15:13: Write Speed Factor R2W_FACTOR                 :0x2
11:15:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:13: FILE_FORMAT_GRP                               :0x0
11:15:13: COPY flag                                     :0x1
11:15:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:13: File_Format                                   :0x0
11:15:13: CRC                                           :0x0
11:15:13: ####CSD Registe Values####  

11:15:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:13: ProductSerialNumber = 0x23482900
11:15:13: CardMaximumLBA      = 0x3b72400
11:15:13: CardCapacity        = 32G
11:15:13: Is card secure      = 0
11:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:13: [DVTCommonLib]###  LogicalWrite called
11:15:14: [ WriteLba(0x10E8796, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 790 ] 
11:15:14: [DVTCommonLib]###  LogicalWrite Completed 

11:15:14: [DVTCommonLib]###  LogicalRead called
11:15:16: [ ReadLba(0x10E8796, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 791 ] 
11:15:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 47 times 
11:15:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2F, 0x0) , Command count = 792 ] 
11:15:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:16: [DVTCommonLib]### Card response as High Capacity from card
11:15:16: [DVTCommonLib]### VOLA from card : 0x1
11:15:16: [DVTCommonLib]### CMD Pattern from card : 0x2F
11:15:16: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508E70>, <py_sfcl.CommandDataDefinition object at 0x06508E40>) , Command count = 793 ] 
11:15:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E180>, <py_sfcl.CommandDataDefinition object at 0x05DFAC60>) , Command count = 794 ] 
11:15:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:16: [ SetCardRCA(0x1, 0xD555) , Command count = 795 ] 
11:15:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:16: [ SetBusWidth(0x4) , Command count = 796 ] 
11:15:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:16: ####CSD Registe 2.0 Values####
11:15:16: CSD_STRUCTURE                                 :0x1
11:15:16: Reserv1                                       :0x0
11:15:16: Time Access 1 TAAC                            :0xe
11:15:16: Time Access 2 NSAC*100                        :0x0
11:15:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:16: Card Command Classess CCC                     :0x5b5
11:15:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:16: DSR(driver stage register)  DSR_IMP           :0x0
11:15:16: Reserv2                                       :0x0
11:15:16: Device Size C_SIZE                            :0xedc8
11:15:16: Reserv3                                       :0x0
11:15:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:16: Reserv4                                       :0x0
11:15:16: Write Speed Factor R2W_FACTOR                 :0x2
11:15:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:16: FILE_FORMAT_GRP                               :0x0
11:15:16: COPY flag                                     :0x1
11:15:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:16: File_Format                                   :0x0
11:15:16: CRC                                           :0x0
11:15:16: ####CSD Registe Values####  

11:15:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:16: ProductSerialNumber = 0x23482900
11:15:16: CardMaximumLBA      = 0x3b72400
11:15:16: CardCapacity        = 32G
11:15:16: Is card secure      = 0
11:15:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:16: [DVTCommonLib]###  LogicalWrite called
11:15:18: [ WriteLba(0x2394BA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 797 ] 
11:15:18: [DVTCommonLib]###  LogicalWrite Completed 

11:15:18: [DVTCommonLib]###  LogicalRead called
11:15:19: [ ReadLba(0x2394BA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 798 ] 
11:15:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 48 times 
11:15:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x30, 0x0) , Command count = 799 ] 
11:15:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:20: [DVTCommonLib]### Card response as High Capacity from card
11:15:20: [DVTCommonLib]### VOLA from card : 0x1
11:15:20: [DVTCommonLib]### CMD Pattern from card : 0x30
11:15:20: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x06508EA0>) , Command count = 800 ] 
11:15:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE4F30>, <py_sfcl.CommandDataDefinition object at 0x05DFAC60>) , Command count = 801 ] 
11:15:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:20: [ SetCardRCA(0x1, 0xD555) , Command count = 802 ] 
11:15:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:20: [ SetBusWidth(0x4) , Command count = 803 ] 
11:15:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:20: ####CSD Registe 2.0 Values####
11:15:20: CSD_STRUCTURE                                 :0x1
11:15:20: Reserv1                                       :0x0
11:15:20: Time Access 1 TAAC                            :0xe
11:15:20: Time Access 2 NSAC*100                        :0x0
11:15:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:20: Card Command Classess CCC                     :0x5b5
11:15:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:20: DSR(driver stage register)  DSR_IMP           :0x0
11:15:20: Reserv2                                       :0x0
11:15:20: Device Size C_SIZE                            :0xedc8
11:15:20: Reserv3                                       :0x0
11:15:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:20: Reserv4                                       :0x0
11:15:20: Write Speed Factor R2W_FACTOR                 :0x2
11:15:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:20: FILE_FORMAT_GRP                               :0x0
11:15:20: COPY flag                                     :0x1
11:15:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:20: File_Format                                   :0x0
11:15:20: CRC                                           :0x0
11:15:20: ####CSD Registe Values####  

11:15:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:20: ProductSerialNumber = 0x23482900
11:15:20: CardMaximumLBA      = 0x3b72400
11:15:20: CardCapacity        = 32G
11:15:20: Is card secure      = 0
11:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:20: [DVTCommonLib]###  LogicalWrite called
11:15:21: [ WriteLba(0x92F890, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 804 ] 
11:15:21: [DVTCommonLib]###  LogicalWrite Completed 

11:15:21: [DVTCommonLib]###  LogicalRead called
11:15:23: [ ReadLba(0x92F890, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 805 ] 
11:15:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 49 times 
11:15:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x31, 0x0) , Command count = 806 ] 
11:15:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:23: [DVTCommonLib]### Card response as High Capacity from card
11:15:23: [DVTCommonLib]### VOLA from card : 0x1
11:15:23: [DVTCommonLib]### CMD Pattern from card : 0x31
11:15:23: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 807 ] 
11:15:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F00>, <py_sfcl.CommandDataDefinition object at 0x06508CC0>) , Command count = 808 ] 
11:15:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:23: [ SetCardRCA(0x1, 0xD555) , Command count = 809 ] 
11:15:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:23: [ SetBusWidth(0x4) , Command count = 810 ] 
11:15:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:23: ####CSD Registe 2.0 Values####
11:15:23: CSD_STRUCTURE                                 :0x1
11:15:23: Reserv1                                       :0x0
11:15:23: Time Access 1 TAAC                            :0xe
11:15:23: Time Access 2 NSAC*100                        :0x0
11:15:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:23: Card Command Classess CCC                     :0x5b5
11:15:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:23: DSR(driver stage register)  DSR_IMP           :0x0
11:15:23: Reserv2                                       :0x0
11:15:23: Device Size C_SIZE                            :0xedc8
11:15:23: Reserv3                                       :0x0
11:15:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:23: Reserv4                                       :0x0
11:15:23: Write Speed Factor R2W_FACTOR                 :0x2
11:15:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:23: FILE_FORMAT_GRP                               :0x0
11:15:23: COPY flag                                     :0x1
11:15:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:23: File_Format                                   :0x0
11:15:23: CRC                                           :0x0
11:15:23: ####CSD Registe Values####  

11:15:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:23: ProductSerialNumber = 0x23482900
11:15:23: CardMaximumLBA      = 0x3b72400
11:15:23: CardCapacity        = 32G
11:15:23: Is card secure      = 0
11:15:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:23: [DVTCommonLib]###  LogicalWrite called
11:15:25: [ WriteLba(0x24F5599, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 811 ] 
11:15:25: [DVTCommonLib]###  LogicalWrite Completed 

11:15:25: [DVTCommonLib]###  LogicalRead called
11:15:27: [ ReadLba(0x24F5599, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 812 ] 
11:15:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 50 times 
11:15:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x32, 0x0) , Command count = 813 ] 
11:15:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:27: [DVTCommonLib]### Card response as High Capacity from card
11:15:27: [DVTCommonLib]### VOLA from card : 0x1
11:15:27: [DVTCommonLib]### CMD Pattern from card : 0x32
11:15:27: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488990>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 814 ] 
11:15:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488ED0>, <py_sfcl.CommandDataDefinition object at 0x06488B70>) , Command count = 815 ] 
11:15:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:27: [ SetCardRCA(0x1, 0xD555) , Command count = 816 ] 
11:15:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:27: [ SetBusWidth(0x4) , Command count = 817 ] 
11:15:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:27: ####CSD Registe 2.0 Values####
11:15:27: CSD_STRUCTURE                                 :0x1
11:15:27: Reserv1                                       :0x0
11:15:27: Time Access 1 TAAC                            :0xe
11:15:27: Time Access 2 NSAC*100                        :0x0
11:15:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:27: Card Command Classess CCC                     :0x5b5
11:15:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:27: DSR(driver stage register)  DSR_IMP           :0x0
11:15:27: Reserv2                                       :0x0
11:15:27: Device Size C_SIZE                            :0xedc8
11:15:27: Reserv3                                       :0x0
11:15:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:27: Reserv4                                       :0x0
11:15:27: Write Speed Factor R2W_FACTOR                 :0x2
11:15:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:27: FILE_FORMAT_GRP                               :0x0
11:15:27: COPY flag                                     :0x1
11:15:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:27: File_Format                                   :0x0
11:15:27: CRC                                           :0x0
11:15:27: ####CSD Registe Values####  

11:15:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:27: ProductSerialNumber = 0x23482900
11:15:27: CardMaximumLBA      = 0x3b72400
11:15:27: CardCapacity        = 32G
11:15:27: Is card secure      = 0
11:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:27: [DVTCommonLib]###  LogicalWrite called
11:15:29: [ WriteLba(0x815361, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 818 ] 
11:15:29: [DVTCommonLib]###  LogicalWrite Completed 

11:15:29: [DVTCommonLib]###  LogicalRead called
11:15:30: [ ReadLba(0x815361, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 819 ] 
11:15:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 51 times 
11:15:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x33, 0x0) , Command count = 820 ] 
11:15:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:30: [DVTCommonLib]### Card response as High Capacity from card
11:15:30: [DVTCommonLib]### VOLA from card : 0x1
11:15:30: [DVTCommonLib]### CMD Pattern from card : 0x33
11:15:30: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 821 ] 
11:15:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488720>, <py_sfcl.CommandDataDefinition object at 0x06488D50>) , Command count = 822 ] 
11:15:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:30: [ SetCardRCA(0x1, 0xD555) , Command count = 823 ] 
11:15:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:30: [ SetBusWidth(0x4) , Command count = 824 ] 
11:15:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:30: ####CSD Registe 2.0 Values####
11:15:30: CSD_STRUCTURE                                 :0x1
11:15:30: Reserv1                                       :0x0
11:15:30: Time Access 1 TAAC                            :0xe
11:15:30: Time Access 2 NSAC*100                        :0x0
11:15:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:30: Card Command Classess CCC                     :0x5b5
11:15:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:30: DSR(driver stage register)  DSR_IMP           :0x0
11:15:30: Reserv2                                       :0x0
11:15:30: Device Size C_SIZE                            :0xedc8
11:15:30: Reserv3                                       :0x0
11:15:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:30: Reserv4                                       :0x0
11:15:30: Write Speed Factor R2W_FACTOR                 :0x2
11:15:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:30: FILE_FORMAT_GRP                               :0x0
11:15:30: COPY flag                                     :0x1
11:15:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:30: File_Format                                   :0x0
11:15:30: CRC                                           :0x0
11:15:30: ####CSD Registe Values####  

11:15:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:30: ProductSerialNumber = 0x23482900
11:15:30: CardMaximumLBA      = 0x3b72400
11:15:30: CardCapacity        = 32G
11:15:30: Is card secure      = 0
11:15:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:30: [DVTCommonLib]###  LogicalWrite called
11:15:32: [ WriteLba(0x29D3CAD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 825 ] 
11:15:32: [DVTCommonLib]###  LogicalWrite Completed 

11:15:32: [DVTCommonLib]###  LogicalRead called
11:15:34: [ ReadLba(0x29D3CAD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 826 ] 
11:15:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 52 times 
11:15:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x34, 0x0) , Command count = 827 ] 
11:15:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:34: [DVTCommonLib]### Card response as High Capacity from card
11:15:34: [DVTCommonLib]### VOLA from card : 0x1
11:15:34: [DVTCommonLib]### CMD Pattern from card : 0x34
11:15:34: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 828 ] 
11:15:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1B0>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 829 ] 
11:15:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:34: [ SetCardRCA(0x1, 0xD555) , Command count = 830 ] 
11:15:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:34: [ SetBusWidth(0x4) , Command count = 831 ] 
11:15:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:34: ####CSD Registe 2.0 Values####
11:15:34: CSD_STRUCTURE                                 :0x1
11:15:34: Reserv1                                       :0x0
11:15:34: Time Access 1 TAAC                            :0xe
11:15:34: Time Access 2 NSAC*100                        :0x0
11:15:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:34: Card Command Classess CCC                     :0x5b5
11:15:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:34: DSR(driver stage register)  DSR_IMP           :0x0
11:15:34: Reserv2                                       :0x0
11:15:34: Device Size C_SIZE                            :0xedc8
11:15:34: Reserv3                                       :0x0
11:15:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:34: Reserv4                                       :0x0
11:15:34: Write Speed Factor R2W_FACTOR                 :0x2
11:15:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:34: FILE_FORMAT_GRP                               :0x0
11:15:34: COPY flag                                     :0x1
11:15:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:34: File_Format                                   :0x0
11:15:34: CRC                                           :0x0
11:15:34: ####CSD Registe Values####  

11:15:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:34: ProductSerialNumber = 0x23482900
11:15:34: CardMaximumLBA      = 0x3b72400
11:15:34: CardCapacity        = 32G
11:15:34: Is card secure      = 0
11:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:34: [DVTCommonLib]###  LogicalWrite called
11:15:36: [ WriteLba(0x1F21177, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 832 ] 
11:15:36: [DVTCommonLib]###  LogicalWrite Completed 

11:15:36: [DVTCommonLib]###  LogicalRead called
11:15:37: [ ReadLba(0x1F21177, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 833 ] 
11:15:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 53 times 
11:15:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x35, 0x0) , Command count = 834 ] 
11:15:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:37: [DVTCommonLib]### Card response as High Capacity from card
11:15:37: [DVTCommonLib]### VOLA from card : 0x1
11:15:37: [DVTCommonLib]### CMD Pattern from card : 0x35
11:15:37: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 835 ] 
11:15:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9570>, <py_sfcl.CommandDataDefinition object at 0x064AB1B0>) , Command count = 836 ] 
11:15:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:38: [ SetCardRCA(0x1, 0xD555) , Command count = 837 ] 
11:15:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:38: [ SetBusWidth(0x4) , Command count = 838 ] 
11:15:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:38: ####CSD Registe 2.0 Values####
11:15:38: CSD_STRUCTURE                                 :0x1
11:15:38: Reserv1                                       :0x0
11:15:38: Time Access 1 TAAC                            :0xe
11:15:38: Time Access 2 NSAC*100                        :0x0
11:15:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:38: Card Command Classess CCC                     :0x5b5
11:15:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:38: DSR(driver stage register)  DSR_IMP           :0x0
11:15:38: Reserv2                                       :0x0
11:15:38: Device Size C_SIZE                            :0xedc8
11:15:38: Reserv3                                       :0x0
11:15:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:38: Reserv4                                       :0x0
11:15:38: Write Speed Factor R2W_FACTOR                 :0x2
11:15:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:38: FILE_FORMAT_GRP                               :0x0
11:15:38: COPY flag                                     :0x1
11:15:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:38: File_Format                                   :0x0
11:15:38: CRC                                           :0x0
11:15:38: ####CSD Registe Values####  

11:15:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:38: ProductSerialNumber = 0x23482900
11:15:38: CardMaximumLBA      = 0x3b72400
11:15:38: CardCapacity        = 32G
11:15:38: Is card secure      = 0
11:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:38: [DVTCommonLib]###  LogicalWrite called
11:15:39: [ WriteLba(0x313BA6A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 839 ] 
11:15:39: [DVTCommonLib]###  LogicalWrite Completed 

11:15:39: [DVTCommonLib]###  LogicalRead called
11:15:41: [ ReadLba(0x313BA6A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 840 ] 
11:15:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 54 times 
11:15:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x36, 0x0) , Command count = 841 ] 
11:15:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:41: [DVTCommonLib]### Card response as High Capacity from card
11:15:41: [DVTCommonLib]### VOLA from card : 0x1
11:15:41: [DVTCommonLib]### CMD Pattern from card : 0x36
11:15:41: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9930>, <py_sfcl.CommandDataDefinition object at 0x064B9720>) , Command count = 842 ] 
11:15:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B99C0>, <py_sfcl.CommandDataDefinition object at 0x064AB1B0>) , Command count = 843 ] 
11:15:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:41: [ SetCardRCA(0x1, 0xD555) , Command count = 844 ] 
11:15:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:41: [ SetBusWidth(0x4) , Command count = 845 ] 
11:15:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:41: ####CSD Registe 2.0 Values####
11:15:41: CSD_STRUCTURE                                 :0x1
11:15:41: Reserv1                                       :0x0
11:15:41: Time Access 1 TAAC                            :0xe
11:15:41: Time Access 2 NSAC*100                        :0x0
11:15:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:41: Card Command Classess CCC                     :0x5b5
11:15:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:41: DSR(driver stage register)  DSR_IMP           :0x0
11:15:41: Reserv2                                       :0x0
11:15:41: Device Size C_SIZE                            :0xedc8
11:15:41: Reserv3                                       :0x0
11:15:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:41: Reserv4                                       :0x0
11:15:41: Write Speed Factor R2W_FACTOR                 :0x2
11:15:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:41: FILE_FORMAT_GRP                               :0x0
11:15:41: COPY flag                                     :0x1
11:15:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:41: File_Format                                   :0x0
11:15:41: CRC                                           :0x0
11:15:41: ####CSD Registe Values####  

11:15:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:41: ProductSerialNumber = 0x23482900
11:15:41: CardMaximumLBA      = 0x3b72400
11:15:41: CardCapacity        = 32G
11:15:41: Is card secure      = 0
11:15:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:41: [DVTCommonLib]###  LogicalWrite called
11:15:43: [ WriteLba(0x1CC7DBE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 846 ] 
11:15:43: [DVTCommonLib]###  LogicalWrite Completed 

11:15:43: [DVTCommonLib]###  LogicalRead called
11:15:44: [ ReadLba(0x1CC7DBE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 847 ] 
11:15:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 55 times 
11:15:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x37, 0x0) , Command count = 848 ] 
11:15:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:45: [DVTCommonLib]### Card response as High Capacity from card
11:15:45: [DVTCommonLib]### VOLA from card : 0x1
11:15:45: [DVTCommonLib]### CMD Pattern from card : 0x37
11:15:45: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A50>, <py_sfcl.CommandDataDefinition object at 0x064B9A80>) , Command count = 849 ] 
11:15:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9DB0>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 850 ] 
11:15:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:45: [ SetCardRCA(0x1, 0xD555) , Command count = 851 ] 
11:15:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:45: [ SetBusWidth(0x4) , Command count = 852 ] 
11:15:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:45: ####CSD Registe 2.0 Values####
11:15:45: CSD_STRUCTURE                                 :0x1
11:15:45: Reserv1                                       :0x0
11:15:45: Time Access 1 TAAC                            :0xe
11:15:45: Time Access 2 NSAC*100                        :0x0
11:15:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:45: Card Command Classess CCC                     :0x5b5
11:15:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:45: DSR(driver stage register)  DSR_IMP           :0x0
11:15:45: Reserv2                                       :0x0
11:15:45: Device Size C_SIZE                            :0xedc8
11:15:45: Reserv3                                       :0x0
11:15:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:45: Reserv4                                       :0x0
11:15:45: Write Speed Factor R2W_FACTOR                 :0x2
11:15:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:45: FILE_FORMAT_GRP                               :0x0
11:15:45: COPY flag                                     :0x1
11:15:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:45: File_Format                                   :0x0
11:15:45: CRC                                           :0x0
11:15:45: ####CSD Registe Values####  

11:15:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:45: ProductSerialNumber = 0x23482900
11:15:45: CardMaximumLBA      = 0x3b72400
11:15:45: CardCapacity        = 32G
11:15:45: Is card secure      = 0
11:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:45: [DVTCommonLib]###  LogicalWrite called
11:15:46: [ WriteLba(0xEB2A18, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 853 ] 
11:15:46: [DVTCommonLib]###  LogicalWrite Completed 

11:15:46: [DVTCommonLib]###  LogicalRead called
11:15:48: [ ReadLba(0xEB2A18, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 854 ] 
11:15:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 56 times 
11:15:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x38, 0x0) , Command count = 855 ] 
11:15:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:48: [DVTCommonLib]### Card response as High Capacity from card
11:15:48: [DVTCommonLib]### VOLA from card : 0x1
11:15:48: [DVTCommonLib]### CMD Pattern from card : 0x38
11:15:48: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 856 ] 
11:15:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9B40>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 857 ] 
11:15:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:48: [ SetCardRCA(0x1, 0xD555) , Command count = 858 ] 
11:15:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:48: [ SetBusWidth(0x4) , Command count = 859 ] 
11:15:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:48: ####CSD Registe 2.0 Values####
11:15:48: CSD_STRUCTURE                                 :0x1
11:15:48: Reserv1                                       :0x0
11:15:48: Time Access 1 TAAC                            :0xe
11:15:48: Time Access 2 NSAC*100                        :0x0
11:15:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:48: Card Command Classess CCC                     :0x5b5
11:15:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:48: DSR(driver stage register)  DSR_IMP           :0x0
11:15:48: Reserv2                                       :0x0
11:15:48: Device Size C_SIZE                            :0xedc8
11:15:48: Reserv3                                       :0x0
11:15:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:48: Reserv4                                       :0x0
11:15:48: Write Speed Factor R2W_FACTOR                 :0x2
11:15:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:48: FILE_FORMAT_GRP                               :0x0
11:15:48: COPY flag                                     :0x1
11:15:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:48: File_Format                                   :0x0
11:15:48: CRC                                           :0x0
11:15:48: ####CSD Registe Values####  

11:15:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:48: ProductSerialNumber = 0x23482900
11:15:48: CardMaximumLBA      = 0x3b72400
11:15:48: CardCapacity        = 32G
11:15:48: Is card secure      = 0
11:15:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:48: [DVTCommonLib]###  LogicalWrite called
11:15:50: [ WriteLba(0x87FE7F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 860 ] 
11:15:50: [DVTCommonLib]###  LogicalWrite Completed 

11:15:50: [DVTCommonLib]###  LogicalRead called
11:15:52: [ ReadLba(0x87FE7F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 861 ] 
11:15:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 57 times 
11:15:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x39, 0x0) , Command count = 862 ] 
11:15:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:52: [DVTCommonLib]### Card response as High Capacity from card
11:15:52: [DVTCommonLib]### VOLA from card : 0x1
11:15:52: [DVTCommonLib]### CMD Pattern from card : 0x39
11:15:52: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9690>, <py_sfcl.CommandDataDefinition object at 0x064B9750>) , Command count = 863 ] 
11:15:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DB0>, <py_sfcl.CommandDataDefinition object at 0x06488A50>) , Command count = 864 ] 
11:15:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:52: [ SetCardRCA(0x1, 0xD555) , Command count = 865 ] 
11:15:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:52: [ SetBusWidth(0x4) , Command count = 866 ] 
11:15:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:52: ####CSD Registe 2.0 Values####
11:15:52: CSD_STRUCTURE                                 :0x1
11:15:52: Reserv1                                       :0x0
11:15:52: Time Access 1 TAAC                            :0xe
11:15:52: Time Access 2 NSAC*100                        :0x0
11:15:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:52: Card Command Classess CCC                     :0x5b5
11:15:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:52: DSR(driver stage register)  DSR_IMP           :0x0
11:15:52: Reserv2                                       :0x0
11:15:52: Device Size C_SIZE                            :0xedc8
11:15:52: Reserv3                                       :0x0
11:15:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:52: Reserv4                                       :0x0
11:15:52: Write Speed Factor R2W_FACTOR                 :0x2
11:15:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:52: FILE_FORMAT_GRP                               :0x0
11:15:52: COPY flag                                     :0x1
11:15:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:52: File_Format                                   :0x0
11:15:52: CRC                                           :0x0
11:15:52: ####CSD Registe Values####  

11:15:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:52: ProductSerialNumber = 0x23482900
11:15:52: CardMaximumLBA      = 0x3b72400
11:15:52: CardCapacity        = 32G
11:15:52: Is card secure      = 0
11:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:52: [DVTCommonLib]###  LogicalWrite called
11:15:54: [ WriteLba(0xE051C8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 867 ] 
11:15:54: [DVTCommonLib]###  LogicalWrite Completed 

11:15:54: [DVTCommonLib]###  LogicalRead called
11:15:55: [ ReadLba(0xE051C8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 868 ] 
11:15:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 58 times 
11:15:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3A, 0x0) , Command count = 869 ] 
11:15:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:55: [DVTCommonLib]### Card response as High Capacity from card
11:15:55: [DVTCommonLib]### VOLA from card : 0x1
11:15:55: [DVTCommonLib]### CMD Pattern from card : 0x3A
11:15:55: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9CF0>, <py_sfcl.CommandDataDefinition object at 0x064B9C00>) , Command count = 870 ] 
11:15:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C60>, <py_sfcl.CommandDataDefinition object at 0x06488E70>) , Command count = 871 ] 
11:15:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:55: [ SetCardRCA(0x1, 0xD555) , Command count = 872 ] 
11:15:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:55: [ SetBusWidth(0x4) , Command count = 873 ] 
11:15:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:55: ####CSD Registe 2.0 Values####
11:15:55: CSD_STRUCTURE                                 :0x1
11:15:55: Reserv1                                       :0x0
11:15:55: Time Access 1 TAAC                            :0xe
11:15:55: Time Access 2 NSAC*100                        :0x0
11:15:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:55: Card Command Classess CCC                     :0x5b5
11:15:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:55: DSR(driver stage register)  DSR_IMP           :0x0
11:15:55: Reserv2                                       :0x0
11:15:55: Device Size C_SIZE                            :0xedc8
11:15:55: Reserv3                                       :0x0
11:15:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:55: Reserv4                                       :0x0
11:15:55: Write Speed Factor R2W_FACTOR                 :0x2
11:15:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:55: FILE_FORMAT_GRP                               :0x0
11:15:55: COPY flag                                     :0x1
11:15:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:55: File_Format                                   :0x0
11:15:55: CRC                                           :0x0
11:15:55: ####CSD Registe Values####  

11:15:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:55: ProductSerialNumber = 0x23482900
11:15:55: CardMaximumLBA      = 0x3b72400
11:15:55: CardCapacity        = 32G
11:15:55: Is card secure      = 0
11:15:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:55: [DVTCommonLib]###  LogicalWrite called
11:15:57: [ WriteLba(0x36519DB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 874 ] 
11:15:57: [DVTCommonLib]###  LogicalWrite Completed 

11:15:57: [DVTCommonLib]###  LogicalRead called
11:15:59: [ ReadLba(0x36519DB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 875 ] 
11:15:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:15:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:15:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 59 times 
11:15:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:15:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3B, 0x0) , Command count = 876 ] 
11:15:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:15:59: [DVTCommonLib]### Card response as High Capacity from card
11:15:59: [DVTCommonLib]### VOLA from card : 0x1
11:15:59: [DVTCommonLib]### CMD Pattern from card : 0x3B
11:15:59: [DVTCommonLib]### Reserved bits from card : 0x0
11:15:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 877 ] 
11:15:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508600>, <py_sfcl.CommandDataDefinition object at 0x064B9B10>) , Command count = 878 ] 
11:15:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:15:59: [ SetCardRCA(0x1, 0xD555) , Command count = 879 ] 
11:15:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:59: [ SetBusWidth(0x4) , Command count = 880 ] 
11:15:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:15:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:15:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:59: ####CSD Registe 2.0 Values####
11:15:59: CSD_STRUCTURE                                 :0x1
11:15:59: Reserv1                                       :0x0
11:15:59: Time Access 1 TAAC                            :0xe
11:15:59: Time Access 2 NSAC*100                        :0x0
11:15:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:59: Card Command Classess CCC                     :0x5b5
11:15:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:59: DSR(driver stage register)  DSR_IMP           :0x0
11:15:59: Reserv2                                       :0x0
11:15:59: Device Size C_SIZE                            :0xedc8
11:15:59: Reserv3                                       :0x0
11:15:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:59: Reserv4                                       :0x0
11:15:59: Write Speed Factor R2W_FACTOR                 :0x2
11:15:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:59: FILE_FORMAT_GRP                               :0x0
11:15:59: COPY flag                                     :0x1
11:15:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:59: File_Format                                   :0x0
11:15:59: CRC                                           :0x0
11:15:59: ####CSD Registe Values####  

11:15:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:15:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:15:59: ProductSerialNumber = 0x23482900
11:15:59: CardMaximumLBA      = 0x3b72400
11:15:59: CardCapacity        = 32G
11:15:59: Is card secure      = 0
11:15:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:15:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:15:59: [DVTCommonLib]###  LogicalWrite called
11:16:01: [ WriteLba(0x172E70E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 881 ] 
11:16:01: [DVTCommonLib]###  LogicalWrite Completed 

11:16:01: [DVTCommonLib]###  LogicalRead called
11:16:02: [ ReadLba(0x172E70E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 882 ] 
11:16:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 60 times 
11:16:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3C, 0x0) , Command count = 883 ] 
11:16:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:02: [DVTCommonLib]### Card response as High Capacity from card
11:16:02: [DVTCommonLib]### VOLA from card : 0x1
11:16:02: [DVTCommonLib]### CMD Pattern from card : 0x3C
11:16:02: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508480>) , Command count = 884 ] 
11:16:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508180>, <py_sfcl.CommandDataDefinition object at 0x06508A50>) , Command count = 885 ] 
11:16:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:02: [ SetCardRCA(0x1, 0xD555) , Command count = 886 ] 
11:16:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:03: [ SetBusWidth(0x4) , Command count = 887 ] 
11:16:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:03: ####CSD Registe 2.0 Values####
11:16:03: CSD_STRUCTURE                                 :0x1
11:16:03: Reserv1                                       :0x0
11:16:03: Time Access 1 TAAC                            :0xe
11:16:03: Time Access 2 NSAC*100                        :0x0
11:16:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:03: Card Command Classess CCC                     :0x5b5
11:16:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:03: DSR(driver stage register)  DSR_IMP           :0x0
11:16:03: Reserv2                                       :0x0
11:16:03: Device Size C_SIZE                            :0xedc8
11:16:03: Reserv3                                       :0x0
11:16:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:03: Reserv4                                       :0x0
11:16:03: Write Speed Factor R2W_FACTOR                 :0x2
11:16:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:03: FILE_FORMAT_GRP                               :0x0
11:16:03: COPY flag                                     :0x1
11:16:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:03: File_Format                                   :0x0
11:16:03: CRC                                           :0x0
11:16:03: ####CSD Registe Values####  

11:16:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:03: ProductSerialNumber = 0x23482900
11:16:03: CardMaximumLBA      = 0x3b72400
11:16:03: CardCapacity        = 32G
11:16:03: Is card secure      = 0
11:16:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:03: [DVTCommonLib]###  LogicalWrite called
11:16:04: [ WriteLba(0x2A278A5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 888 ] 
11:16:04: [DVTCommonLib]###  LogicalWrite Completed 

11:16:04: [DVTCommonLib]###  LogicalRead called
11:16:06: [ ReadLba(0x2A278A5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 889 ] 
11:16:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 61 times 
11:16:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3D, 0x0) , Command count = 890 ] 
11:16:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:06: [DVTCommonLib]### Card response as High Capacity from card
11:16:06: [DVTCommonLib]### VOLA from card : 0x1
11:16:06: [DVTCommonLib]### CMD Pattern from card : 0x3D
11:16:06: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C90>, <py_sfcl.CommandDataDefinition object at 0x06508360>) , Command count = 891 ] 
11:16:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506F60>, <py_sfcl.CommandDataDefinition object at 0x06506EA0>) , Command count = 892 ] 
11:16:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:06: [ SetCardRCA(0x1, 0xD555) , Command count = 893 ] 
11:16:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:06: [ SetBusWidth(0x4) , Command count = 894 ] 
11:16:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:06: ####CSD Registe 2.0 Values####
11:16:06: CSD_STRUCTURE                                 :0x1
11:16:06: Reserv1                                       :0x0
11:16:06: Time Access 1 TAAC                            :0xe
11:16:06: Time Access 2 NSAC*100                        :0x0
11:16:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:06: Card Command Classess CCC                     :0x5b5
11:16:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:06: DSR(driver stage register)  DSR_IMP           :0x0
11:16:06: Reserv2                                       :0x0
11:16:06: Device Size C_SIZE                            :0xedc8
11:16:06: Reserv3                                       :0x0
11:16:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:06: Reserv4                                       :0x0
11:16:06: Write Speed Factor R2W_FACTOR                 :0x2
11:16:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:06: FILE_FORMAT_GRP                               :0x0
11:16:06: COPY flag                                     :0x1
11:16:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:06: File_Format                                   :0x0
11:16:06: CRC                                           :0x0
11:16:06: ####CSD Registe Values####  

11:16:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:06: ProductSerialNumber = 0x23482900
11:16:06: CardMaximumLBA      = 0x3b72400
11:16:06: CardCapacity        = 32G
11:16:06: Is card secure      = 0
11:16:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:06: [DVTCommonLib]###  LogicalWrite called
11:16:08: [ WriteLba(0x106142F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 895 ] 
11:16:08: [DVTCommonLib]###  LogicalWrite Completed 

11:16:08: [DVTCommonLib]###  LogicalRead called
11:16:09: [ ReadLba(0x106142F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 896 ] 
11:16:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 62 times 
11:16:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3E, 0x0) , Command count = 897 ] 
11:16:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:10: [DVTCommonLib]### Card response as High Capacity from card
11:16:10: [DVTCommonLib]### VOLA from card : 0x1
11:16:10: [DVTCommonLib]### CMD Pattern from card : 0x3E
11:16:10: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889F0>, <py_sfcl.CommandDataDefinition object at 0x06506ED0>) , Command count = 898 ] 
11:16:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506D50>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 899 ] 
11:16:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:10: [ SetCardRCA(0x1, 0xD555) , Command count = 900 ] 
11:16:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:10: [ SetBusWidth(0x4) , Command count = 901 ] 
11:16:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:10: ####CSD Registe 2.0 Values####
11:16:10: CSD_STRUCTURE                                 :0x1
11:16:10: Reserv1                                       :0x0
11:16:10: Time Access 1 TAAC                            :0xe
11:16:10: Time Access 2 NSAC*100                        :0x0
11:16:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:10: Card Command Classess CCC                     :0x5b5
11:16:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:10: DSR(driver stage register)  DSR_IMP           :0x0
11:16:10: Reserv2                                       :0x0
11:16:10: Device Size C_SIZE                            :0xedc8
11:16:10: Reserv3                                       :0x0
11:16:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:10: Reserv4                                       :0x0
11:16:10: Write Speed Factor R2W_FACTOR                 :0x2
11:16:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:10: FILE_FORMAT_GRP                               :0x0
11:16:10: COPY flag                                     :0x1
11:16:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:10: File_Format                                   :0x0
11:16:10: CRC                                           :0x0
11:16:10: ####CSD Registe Values####  

11:16:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:10: ProductSerialNumber = 0x23482900
11:16:10: CardMaximumLBA      = 0x3b72400
11:16:10: CardCapacity        = 32G
11:16:10: Is card secure      = 0
11:16:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:10: [DVTCommonLib]###  LogicalWrite called
11:16:11: [ WriteLba(0xFCCF8E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 902 ] 
11:16:11: [DVTCommonLib]###  LogicalWrite Completed 

11:16:11: [DVTCommonLib]###  LogicalRead called
11:16:13: [ ReadLba(0xFCCF8E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 903 ] 
11:16:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 63 times 
11:16:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3F, 0x0) , Command count = 904 ] 
11:16:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:13: [DVTCommonLib]### Card response as High Capacity from card
11:16:13: [DVTCommonLib]### VOLA from card : 0x1
11:16:13: [DVTCommonLib]### CMD Pattern from card : 0x3F
11:16:13: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C60>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 905 ] 
11:16:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506960>, <py_sfcl.CommandDataDefinition object at 0x06506F30>) , Command count = 906 ] 
11:16:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:13: [ SetCardRCA(0x1, 0xD555) , Command count = 907 ] 
11:16:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:13: [ SetBusWidth(0x4) , Command count = 908 ] 
11:16:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:13: ####CSD Registe 2.0 Values####
11:16:13: CSD_STRUCTURE                                 :0x1
11:16:13: Reserv1                                       :0x0
11:16:13: Time Access 1 TAAC                            :0xe
11:16:13: Time Access 2 NSAC*100                        :0x0
11:16:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:13: Card Command Classess CCC                     :0x5b5
11:16:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:13: DSR(driver stage register)  DSR_IMP           :0x0
11:16:13: Reserv2                                       :0x0
11:16:13: Device Size C_SIZE                            :0xedc8
11:16:13: Reserv3                                       :0x0
11:16:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:13: Reserv4                                       :0x0
11:16:13: Write Speed Factor R2W_FACTOR                 :0x2
11:16:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:13: FILE_FORMAT_GRP                               :0x0
11:16:13: COPY flag                                     :0x1
11:16:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:13: File_Format                                   :0x0
11:16:13: CRC                                           :0x0
11:16:13: ####CSD Registe Values####  

11:16:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:13: ProductSerialNumber = 0x23482900
11:16:13: CardMaximumLBA      = 0x3b72400
11:16:13: CardCapacity        = 32G
11:16:13: Is card secure      = 0
11:16:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:13: [DVTCommonLib]###  LogicalWrite called
11:16:15: [ WriteLba(0xC536DE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 909 ] 
11:16:15: [DVTCommonLib]###  LogicalWrite Completed 

11:16:15: [DVTCommonLib]###  LogicalRead called
11:16:16: [ ReadLba(0xC536DE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 910 ] 
11:16:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 64 times 
11:16:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x40, 0x0) , Command count = 911 ] 
11:16:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:17: [DVTCommonLib]### Card response as High Capacity from card
11:16:17: [DVTCommonLib]### VOLA from card : 0x1
11:16:17: [DVTCommonLib]### CMD Pattern from card : 0x40
11:16:17: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065067E0>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 912 ] 
11:16:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506B40>, <py_sfcl.CommandDataDefinition object at 0x06506690>) , Command count = 913 ] 
11:16:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:17: [ SetCardRCA(0x1, 0xD555) , Command count = 914 ] 
11:16:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:17: [ SetBusWidth(0x4) , Command count = 915 ] 
11:16:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:17: ####CSD Registe 2.0 Values####
11:16:17: CSD_STRUCTURE                                 :0x1
11:16:17: Reserv1                                       :0x0
11:16:17: Time Access 1 TAAC                            :0xe
11:16:17: Time Access 2 NSAC*100                        :0x0
11:16:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:17: Card Command Classess CCC                     :0x5b5
11:16:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:17: DSR(driver stage register)  DSR_IMP           :0x0
11:16:17: Reserv2                                       :0x0
11:16:17: Device Size C_SIZE                            :0xedc8
11:16:17: Reserv3                                       :0x0
11:16:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:17: Reserv4                                       :0x0
11:16:17: Write Speed Factor R2W_FACTOR                 :0x2
11:16:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:17: FILE_FORMAT_GRP                               :0x0
11:16:17: COPY flag                                     :0x1
11:16:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:17: File_Format                                   :0x0
11:16:17: CRC                                           :0x0
11:16:17: ####CSD Registe Values####  

11:16:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:17: ProductSerialNumber = 0x23482900
11:16:17: CardMaximumLBA      = 0x3b72400
11:16:17: CardCapacity        = 32G
11:16:17: Is card secure      = 0
11:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:17: [DVTCommonLib]###  LogicalWrite called
11:16:18: [ WriteLba(0x10DCA54, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 916 ] 
11:16:18: [DVTCommonLib]###  LogicalWrite Completed 

11:16:18: [DVTCommonLib]###  LogicalRead called
11:16:20: [ ReadLba(0x10DCA54, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 917 ] 
11:16:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 65 times 
11:16:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x41, 0x0) , Command count = 918 ] 
11:16:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:20: [DVTCommonLib]### Card response as High Capacity from card
11:16:20: [DVTCommonLib]### VOLA from card : 0x1
11:16:20: [DVTCommonLib]### CMD Pattern from card : 0x41
11:16:20: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506480>, <py_sfcl.CommandDataDefinition object at 0x064DFF00>) , Command count = 919 ] 
11:16:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF9C0>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 920 ] 
11:16:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:20: [ SetCardRCA(0x1, 0xD555) , Command count = 921 ] 
11:16:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:20: [ SetBusWidth(0x4) , Command count = 922 ] 
11:16:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:20: ####CSD Registe 2.0 Values####
11:16:20: CSD_STRUCTURE                                 :0x1
11:16:20: Reserv1                                       :0x0
11:16:20: Time Access 1 TAAC                            :0xe
11:16:20: Time Access 2 NSAC*100                        :0x0
11:16:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:20: Card Command Classess CCC                     :0x5b5
11:16:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:20: DSR(driver stage register)  DSR_IMP           :0x0
11:16:20: Reserv2                                       :0x0
11:16:20: Device Size C_SIZE                            :0xedc8
11:16:20: Reserv3                                       :0x0
11:16:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:20: Reserv4                                       :0x0
11:16:20: Write Speed Factor R2W_FACTOR                 :0x2
11:16:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:20: FILE_FORMAT_GRP                               :0x0
11:16:20: COPY flag                                     :0x1
11:16:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:20: File_Format                                   :0x0
11:16:20: CRC                                           :0x0
11:16:20: ####CSD Registe Values####  

11:16:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:20: ProductSerialNumber = 0x23482900
11:16:20: CardMaximumLBA      = 0x3b72400
11:16:20: CardCapacity        = 32G
11:16:20: Is card secure      = 0
11:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:20: [DVTCommonLib]###  LogicalWrite called
11:16:22: [ WriteLba(0x193263D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 923 ] 
11:16:22: [DVTCommonLib]###  LogicalWrite Completed 

11:16:22: [DVTCommonLib]###  LogicalRead called
11:16:24: [ ReadLba(0x193263D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 924 ] 
11:16:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 66 times 
11:16:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x42, 0x0) , Command count = 925 ] 
11:16:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:24: [DVTCommonLib]### Card response as High Capacity from card
11:16:24: [DVTCommonLib]### VOLA from card : 0x1
11:16:24: [DVTCommonLib]### CMD Pattern from card : 0x42
11:16:24: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 926 ] 
11:16:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF0C0>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 927 ] 
11:16:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:24: [ SetCardRCA(0x1, 0xD555) , Command count = 928 ] 
11:16:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:24: [ SetBusWidth(0x4) , Command count = 929 ] 
11:16:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:24: ####CSD Registe 2.0 Values####
11:16:24: CSD_STRUCTURE                                 :0x1
11:16:24: Reserv1                                       :0x0
11:16:24: Time Access 1 TAAC                            :0xe
11:16:24: Time Access 2 NSAC*100                        :0x0
11:16:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:24: Card Command Classess CCC                     :0x5b5
11:16:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:24: DSR(driver stage register)  DSR_IMP           :0x0
11:16:24: Reserv2                                       :0x0
11:16:24: Device Size C_SIZE                            :0xedc8
11:16:24: Reserv3                                       :0x0
11:16:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:24: Reserv4                                       :0x0
11:16:24: Write Speed Factor R2W_FACTOR                 :0x2
11:16:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:24: FILE_FORMAT_GRP                               :0x0
11:16:24: COPY flag                                     :0x1
11:16:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:24: File_Format                                   :0x0
11:16:24: CRC                                           :0x0
11:16:24: ####CSD Registe Values####  

11:16:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:24: ProductSerialNumber = 0x23482900
11:16:24: CardMaximumLBA      = 0x3b72400
11:16:24: CardCapacity        = 32G
11:16:24: Is card secure      = 0
11:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:24: [DVTCommonLib]###  LogicalWrite called
11:16:26: [ WriteLba(0x1B585A2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 930 ] 
11:16:26: [DVTCommonLib]###  LogicalWrite Completed 

11:16:26: [DVTCommonLib]###  LogicalRead called
11:16:27: [ ReadLba(0x1B585A2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 931 ] 
11:16:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 67 times 
11:16:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x43, 0x0) , Command count = 932 ] 
11:16:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:27: [DVTCommonLib]### Card response as High Capacity from card
11:16:27: [DVTCommonLib]### VOLA from card : 0x1
11:16:27: [DVTCommonLib]### CMD Pattern from card : 0x43
11:16:27: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 933 ] 
11:16:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF480>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 934 ] 
11:16:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:27: [ SetCardRCA(0x1, 0xD555) , Command count = 935 ] 
11:16:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:27: [ SetBusWidth(0x4) , Command count = 936 ] 
11:16:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:27: ####CSD Registe 2.0 Values####
11:16:27: CSD_STRUCTURE                                 :0x1
11:16:27: Reserv1                                       :0x0
11:16:27: Time Access 1 TAAC                            :0xe
11:16:27: Time Access 2 NSAC*100                        :0x0
11:16:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:27: Card Command Classess CCC                     :0x5b5
11:16:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:27: DSR(driver stage register)  DSR_IMP           :0x0
11:16:27: Reserv2                                       :0x0
11:16:27: Device Size C_SIZE                            :0xedc8
11:16:27: Reserv3                                       :0x0
11:16:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:27: Reserv4                                       :0x0
11:16:27: Write Speed Factor R2W_FACTOR                 :0x2
11:16:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:27: FILE_FORMAT_GRP                               :0x0
11:16:27: COPY flag                                     :0x1
11:16:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:27: File_Format                                   :0x0
11:16:27: CRC                                           :0x0
11:16:27: ####CSD Registe Values####  

11:16:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:27: ProductSerialNumber = 0x23482900
11:16:27: CardMaximumLBA      = 0x3b72400
11:16:27: CardCapacity        = 32G
11:16:27: Is card secure      = 0
11:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:27: [DVTCommonLib]###  LogicalWrite called
11:16:29: [ WriteLba(0x349CDB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 937 ] 
11:16:29: [DVTCommonLib]###  LogicalWrite Completed 

11:16:29: [DVTCommonLib]###  LogicalRead called
11:16:31: [ ReadLba(0x349CDB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 938 ] 
11:16:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 68 times 
11:16:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x44, 0x0) , Command count = 939 ] 
11:16:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:31: [DVTCommonLib]### Card response as High Capacity from card
11:16:31: [DVTCommonLib]### VOLA from card : 0x1
11:16:31: [DVTCommonLib]### CMD Pattern from card : 0x44
11:16:31: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 940 ] 
11:16:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF870>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 941 ] 
11:16:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:31: [ SetCardRCA(0x1, 0xD555) , Command count = 942 ] 
11:16:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:31: [ SetBusWidth(0x4) , Command count = 943 ] 
11:16:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:31: ####CSD Registe 2.0 Values####
11:16:31: CSD_STRUCTURE                                 :0x1
11:16:31: Reserv1                                       :0x0
11:16:31: Time Access 1 TAAC                            :0xe
11:16:31: Time Access 2 NSAC*100                        :0x0
11:16:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:31: Card Command Classess CCC                     :0x5b5
11:16:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:31: DSR(driver stage register)  DSR_IMP           :0x0
11:16:31: Reserv2                                       :0x0
11:16:31: Device Size C_SIZE                            :0xedc8
11:16:31: Reserv3                                       :0x0
11:16:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:31: Reserv4                                       :0x0
11:16:31: Write Speed Factor R2W_FACTOR                 :0x2
11:16:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:31: FILE_FORMAT_GRP                               :0x0
11:16:31: COPY flag                                     :0x1
11:16:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:31: File_Format                                   :0x0
11:16:31: CRC                                           :0x0
11:16:31: ####CSD Registe Values####  

11:16:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:31: ProductSerialNumber = 0x23482900
11:16:31: CardMaximumLBA      = 0x3b72400
11:16:31: CardCapacity        = 32G
11:16:31: Is card secure      = 0
11:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:31: [DVTCommonLib]###  LogicalWrite called
11:16:33: [ WriteLba(0x21D4990, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 944 ] 
11:16:33: [DVTCommonLib]###  LogicalWrite Completed 

11:16:33: [DVTCommonLib]###  LogicalRead called
11:16:34: [ ReadLba(0x21D4990, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 945 ] 
11:16:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 69 times 
11:16:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x45, 0x0) , Command count = 946 ] 
11:16:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:34: [DVTCommonLib]### Card response as High Capacity from card
11:16:34: [DVTCommonLib]### VOLA from card : 0x1
11:16:34: [DVTCommonLib]### CMD Pattern from card : 0x45
11:16:34: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 947 ] 
11:16:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFCF0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 948 ] 
11:16:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:34: [ SetCardRCA(0x1, 0xD555) , Command count = 949 ] 
11:16:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:35: [ SetBusWidth(0x4) , Command count = 950 ] 
11:16:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:35: ####CSD Registe 2.0 Values####
11:16:35: CSD_STRUCTURE                                 :0x1
11:16:35: Reserv1                                       :0x0
11:16:35: Time Access 1 TAAC                            :0xe
11:16:35: Time Access 2 NSAC*100                        :0x0
11:16:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:35: Card Command Classess CCC                     :0x5b5
11:16:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:35: DSR(driver stage register)  DSR_IMP           :0x0
11:16:35: Reserv2                                       :0x0
11:16:35: Device Size C_SIZE                            :0xedc8
11:16:35: Reserv3                                       :0x0
11:16:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:35: Reserv4                                       :0x0
11:16:35: Write Speed Factor R2W_FACTOR                 :0x2
11:16:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:35: FILE_FORMAT_GRP                               :0x0
11:16:35: COPY flag                                     :0x1
11:16:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:35: File_Format                                   :0x0
11:16:35: CRC                                           :0x0
11:16:35: ####CSD Registe Values####  

11:16:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:35: ProductSerialNumber = 0x23482900
11:16:35: CardMaximumLBA      = 0x3b72400
11:16:35: CardCapacity        = 32G
11:16:35: Is card secure      = 0
11:16:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:35: [DVTCommonLib]###  LogicalWrite called
11:16:36: [ WriteLba(0x3CB13D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 951 ] 
11:16:36: [DVTCommonLib]###  LogicalWrite Completed 

11:16:36: [DVTCommonLib]###  LogicalRead called
11:16:38: [ ReadLba(0x3CB13D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 952 ] 
11:16:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 70 times 
11:16:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x46, 0x0) , Command count = 953 ] 
11:16:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:38: [DVTCommonLib]### Card response as High Capacity from card
11:16:38: [DVTCommonLib]### VOLA from card : 0x1
11:16:38: [DVTCommonLib]### CMD Pattern from card : 0x46
11:16:38: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 954 ] 
11:16:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065060C0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 955 ] 
11:16:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:38: [ SetCardRCA(0x1, 0xD555) , Command count = 956 ] 
11:16:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:38: [ SetBusWidth(0x4) , Command count = 957 ] 
11:16:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:38: ####CSD Registe 2.0 Values####
11:16:38: CSD_STRUCTURE                                 :0x1
11:16:38: Reserv1                                       :0x0
11:16:38: Time Access 1 TAAC                            :0xe
11:16:38: Time Access 2 NSAC*100                        :0x0
11:16:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:38: Card Command Classess CCC                     :0x5b5
11:16:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:38: DSR(driver stage register)  DSR_IMP           :0x0
11:16:38: Reserv2                                       :0x0
11:16:38: Device Size C_SIZE                            :0xedc8
11:16:38: Reserv3                                       :0x0
11:16:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:38: Reserv4                                       :0x0
11:16:38: Write Speed Factor R2W_FACTOR                 :0x2
11:16:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:38: FILE_FORMAT_GRP                               :0x0
11:16:38: COPY flag                                     :0x1
11:16:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:38: File_Format                                   :0x0
11:16:38: CRC                                           :0x0
11:16:38: ####CSD Registe Values####  

11:16:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:38: ProductSerialNumber = 0x23482900
11:16:38: CardMaximumLBA      = 0x3b72400
11:16:38: CardCapacity        = 32G
11:16:38: Is card secure      = 0
11:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:38: [DVTCommonLib]###  LogicalWrite called
11:16:40: [ WriteLba(0x303EBF3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 958 ] 
11:16:40: [DVTCommonLib]###  LogicalWrite Completed 

11:16:40: [DVTCommonLib]###  LogicalRead called
11:16:41: [ ReadLba(0x303EBF3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 959 ] 
11:16:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 71 times 
11:16:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x47, 0x0) , Command count = 960 ] 
11:16:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:42: [DVTCommonLib]### Card response as High Capacity from card
11:16:42: [DVTCommonLib]### VOLA from card : 0x1
11:16:42: [DVTCommonLib]### CMD Pattern from card : 0x47
11:16:42: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 961 ] 
11:16:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065063C0>, <py_sfcl.CommandDataDefinition object at 0x064DFBD0>) , Command count = 962 ] 
11:16:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:42: [ SetCardRCA(0x1, 0xD555) , Command count = 963 ] 
11:16:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:42: [ SetBusWidth(0x4) , Command count = 964 ] 
11:16:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:42: ####CSD Registe 2.0 Values####
11:16:42: CSD_STRUCTURE                                 :0x1
11:16:42: Reserv1                                       :0x0
11:16:42: Time Access 1 TAAC                            :0xe
11:16:42: Time Access 2 NSAC*100                        :0x0
11:16:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:42: Card Command Classess CCC                     :0x5b5
11:16:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:42: DSR(driver stage register)  DSR_IMP           :0x0
11:16:42: Reserv2                                       :0x0
11:16:42: Device Size C_SIZE                            :0xedc8
11:16:42: Reserv3                                       :0x0
11:16:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:42: Reserv4                                       :0x0
11:16:42: Write Speed Factor R2W_FACTOR                 :0x2
11:16:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:42: FILE_FORMAT_GRP                               :0x0
11:16:42: COPY flag                                     :0x1
11:16:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:42: File_Format                                   :0x0
11:16:42: CRC                                           :0x0
11:16:42: ####CSD Registe Values####  

11:16:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:42: ProductSerialNumber = 0x23482900
11:16:42: CardMaximumLBA      = 0x3b72400
11:16:42: CardCapacity        = 32G
11:16:42: Is card secure      = 0
11:16:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:42: [DVTCommonLib]###  LogicalWrite called
11:16:43: [ WriteLba(0xF80801, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 965 ] 
11:16:43: [DVTCommonLib]###  LogicalWrite Completed 

11:16:43: [DVTCommonLib]###  LogicalRead called
11:16:45: [ ReadLba(0xF80801, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 966 ] 
11:16:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 72 times 
11:16:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x48, 0x0) , Command count = 967 ] 
11:16:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:45: [DVTCommonLib]### Card response as High Capacity from card
11:16:45: [DVTCommonLib]### VOLA from card : 0x1
11:16:45: [DVTCommonLib]### CMD Pattern from card : 0x48
11:16:45: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 968 ] 
11:16:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506540>, <py_sfcl.CommandDataDefinition object at 0x06506060>) , Command count = 969 ] 
11:16:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:45: [ SetCardRCA(0x1, 0xD555) , Command count = 970 ] 
11:16:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:45: [ SetBusWidth(0x4) , Command count = 971 ] 
11:16:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:45: ####CSD Registe 2.0 Values####
11:16:45: CSD_STRUCTURE                                 :0x1
11:16:45: Reserv1                                       :0x0
11:16:45: Time Access 1 TAAC                            :0xe
11:16:45: Time Access 2 NSAC*100                        :0x0
11:16:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:45: Card Command Classess CCC                     :0x5b5
11:16:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:45: DSR(driver stage register)  DSR_IMP           :0x0
11:16:45: Reserv2                                       :0x0
11:16:45: Device Size C_SIZE                            :0xedc8
11:16:45: Reserv3                                       :0x0
11:16:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:45: Reserv4                                       :0x0
11:16:45: Write Speed Factor R2W_FACTOR                 :0x2
11:16:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:45: FILE_FORMAT_GRP                               :0x0
11:16:45: COPY flag                                     :0x1
11:16:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:45: File_Format                                   :0x0
11:16:45: CRC                                           :0x0
11:16:45: ####CSD Registe Values####  

11:16:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:45: ProductSerialNumber = 0x23482900
11:16:45: CardMaximumLBA      = 0x3b72400
11:16:45: CardCapacity        = 32G
11:16:45: Is card secure      = 0
11:16:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:45: [DVTCommonLib]###  LogicalWrite called
11:16:47: [ WriteLba(0x2D8494D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 972 ] 
11:16:47: [DVTCommonLib]###  LogicalWrite Completed 

11:16:47: [DVTCommonLib]###  LogicalRead called
11:16:48: [ ReadLba(0x2D8494D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 973 ] 
11:16:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 73 times 
11:16:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x49, 0x0) , Command count = 974 ] 
11:16:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:49: [DVTCommonLib]### Card response as High Capacity from card
11:16:49: [DVTCommonLib]### VOLA from card : 0x1
11:16:49: [DVTCommonLib]### CMD Pattern from card : 0x49
11:16:49: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 975 ] 
11:16:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065069C0>, <py_sfcl.CommandDataDefinition object at 0x06506900>) , Command count = 976 ] 
11:16:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:49: [ SetCardRCA(0x1, 0xD555) , Command count = 977 ] 
11:16:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:49: [ SetBusWidth(0x4) , Command count = 978 ] 
11:16:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:49: ####CSD Registe 2.0 Values####
11:16:49: CSD_STRUCTURE                                 :0x1
11:16:49: Reserv1                                       :0x0
11:16:49: Time Access 1 TAAC                            :0xe
11:16:49: Time Access 2 NSAC*100                        :0x0
11:16:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:49: Card Command Classess CCC                     :0x5b5
11:16:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:49: DSR(driver stage register)  DSR_IMP           :0x0
11:16:49: Reserv2                                       :0x0
11:16:49: Device Size C_SIZE                            :0xedc8
11:16:49: Reserv3                                       :0x0
11:16:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:49: Reserv4                                       :0x0
11:16:49: Write Speed Factor R2W_FACTOR                 :0x2
11:16:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:49: FILE_FORMAT_GRP                               :0x0
11:16:49: COPY flag                                     :0x1
11:16:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:49: File_Format                                   :0x0
11:16:49: CRC                                           :0x0
11:16:49: ####CSD Registe Values####  

11:16:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:49: ProductSerialNumber = 0x23482900
11:16:49: CardMaximumLBA      = 0x3b72400
11:16:49: CardCapacity        = 32G
11:16:49: Is card secure      = 0
11:16:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:49: [DVTCommonLib]###  LogicalWrite called
11:16:50: [ WriteLba(0x39508D1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 979 ] 
11:16:50: [DVTCommonLib]###  LogicalWrite Completed 

11:16:50: [DVTCommonLib]###  LogicalRead called
11:16:52: [ ReadLba(0x39508D1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 980 ] 
11:16:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 74 times 
11:16:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4A, 0x0) , Command count = 981 ] 
11:16:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:52: [DVTCommonLib]### Card response as High Capacity from card
11:16:52: [DVTCommonLib]### VOLA from card : 0x1
11:16:52: [DVTCommonLib]### CMD Pattern from card : 0x4A
11:16:52: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 982 ] 
11:16:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506DB0>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 983 ] 
11:16:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:52: [ SetCardRCA(0x1, 0xD555) , Command count = 984 ] 
11:16:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:52: [ SetBusWidth(0x4) , Command count = 985 ] 
11:16:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:52: ####CSD Registe 2.0 Values####
11:16:52: CSD_STRUCTURE                                 :0x1
11:16:52: Reserv1                                       :0x0
11:16:52: Time Access 1 TAAC                            :0xe
11:16:52: Time Access 2 NSAC*100                        :0x0
11:16:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:52: Card Command Classess CCC                     :0x5b5
11:16:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:52: DSR(driver stage register)  DSR_IMP           :0x0
11:16:52: Reserv2                                       :0x0
11:16:52: Device Size C_SIZE                            :0xedc8
11:16:52: Reserv3                                       :0x0
11:16:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:52: Reserv4                                       :0x0
11:16:52: Write Speed Factor R2W_FACTOR                 :0x2
11:16:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:52: FILE_FORMAT_GRP                               :0x0
11:16:52: COPY flag                                     :0x1
11:16:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:52: File_Format                                   :0x0
11:16:52: CRC                                           :0x0
11:16:52: ####CSD Registe Values####  

11:16:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:52: ProductSerialNumber = 0x23482900
11:16:52: CardMaximumLBA      = 0x3b72400
11:16:52: CardCapacity        = 32G
11:16:52: Is card secure      = 0
11:16:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:52: [DVTCommonLib]###  LogicalWrite called
11:16:54: [ WriteLba(0x17DFF97, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 986 ] 
11:16:54: [DVTCommonLib]###  LogicalWrite Completed 

11:16:54: [DVTCommonLib]###  LogicalRead called
11:16:56: [ ReadLba(0x17DFF97, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 987 ] 
11:16:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 75 times 
11:16:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4B, 0x0) , Command count = 988 ] 
11:16:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:56: [DVTCommonLib]### Card response as High Capacity from card
11:16:56: [DVTCommonLib]### VOLA from card : 0x1
11:16:56: [DVTCommonLib]### CMD Pattern from card : 0x4B
11:16:56: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 989 ] 
11:16:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065081E0>, <py_sfcl.CommandDataDefinition object at 0x06506D20>) , Command count = 990 ] 
11:16:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:56: [ SetCardRCA(0x1, 0xD555) , Command count = 991 ] 
11:16:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:56: [ SetBusWidth(0x4) , Command count = 992 ] 
11:16:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:56: ####CSD Registe 2.0 Values####
11:16:56: CSD_STRUCTURE                                 :0x1
11:16:56: Reserv1                                       :0x0
11:16:56: Time Access 1 TAAC                            :0xe
11:16:56: Time Access 2 NSAC*100                        :0x0
11:16:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:56: Card Command Classess CCC                     :0x5b5
11:16:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:56: DSR(driver stage register)  DSR_IMP           :0x0
11:16:56: Reserv2                                       :0x0
11:16:56: Device Size C_SIZE                            :0xedc8
11:16:56: Reserv3                                       :0x0
11:16:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:56: Reserv4                                       :0x0
11:16:56: Write Speed Factor R2W_FACTOR                 :0x2
11:16:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:56: FILE_FORMAT_GRP                               :0x0
11:16:56: COPY flag                                     :0x1
11:16:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:56: File_Format                                   :0x0
11:16:56: CRC                                           :0x0
11:16:56: ####CSD Registe Values####  

11:16:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:56: ProductSerialNumber = 0x23482900
11:16:56: CardMaximumLBA      = 0x3b72400
11:16:56: CardCapacity        = 32G
11:16:56: Is card secure      = 0
11:16:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:56: [DVTCommonLib]###  LogicalWrite called
11:16:58: [ WriteLba(0x237DAA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 993 ] 
11:16:58: [DVTCommonLib]###  LogicalWrite Completed 

11:16:58: [DVTCommonLib]###  LogicalRead called
11:16:59: [ ReadLba(0x237DAA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 994 ] 
11:16:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:16:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:16:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 76 times 
11:16:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:16:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4C, 0x0) , Command count = 995 ] 
11:16:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:16:59: [DVTCommonLib]### Card response as High Capacity from card
11:16:59: [DVTCommonLib]### VOLA from card : 0x1
11:16:59: [DVTCommonLib]### CMD Pattern from card : 0x4C
11:16:59: [DVTCommonLib]### Reserved bits from card : 0x0
11:16:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508420>, <py_sfcl.CommandDataDefinition object at 0x06508450>) , Command count = 996 ] 
11:16:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065085D0>, <py_sfcl.CommandDataDefinition object at 0x06506D20>) , Command count = 997 ] 
11:16:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:16:59: [ SetCardRCA(0x1, 0xD555) , Command count = 998 ] 
11:16:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:59: [ SetBusWidth(0x4) , Command count = 999 ] 
11:16:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:16:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:16:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:59: ####CSD Registe 2.0 Values####
11:16:59: CSD_STRUCTURE                                 :0x1
11:16:59: Reserv1                                       :0x0
11:16:59: Time Access 1 TAAC                            :0xe
11:16:59: Time Access 2 NSAC*100                        :0x0
11:16:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:59: Card Command Classess CCC                     :0x5b5
11:16:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:59: DSR(driver stage register)  DSR_IMP           :0x0
11:16:59: Reserv2                                       :0x0
11:16:59: Device Size C_SIZE                            :0xedc8
11:16:59: Reserv3                                       :0x0
11:16:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:59: Reserv4                                       :0x0
11:16:59: Write Speed Factor R2W_FACTOR                 :0x2
11:16:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:59: FILE_FORMAT_GRP                               :0x0
11:16:59: COPY flag                                     :0x1
11:16:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:59: File_Format                                   :0x0
11:16:59: CRC                                           :0x0
11:16:59: ####CSD Registe Values####  

11:16:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:16:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:16:59: ProductSerialNumber = 0x23482900
11:16:59: CardMaximumLBA      = 0x3b72400
11:16:59: CardCapacity        = 32G
11:16:59: Is card secure      = 0
11:16:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:16:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:16:59: [DVTCommonLib]###  LogicalWrite called
11:17:01: [ WriteLba(0x26F5925, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1000 ] 
11:17:01: [DVTCommonLib]###  LogicalWrite Completed 

11:17:01: [DVTCommonLib]###  LogicalRead called
11:17:03: [ ReadLba(0x26F5925, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1001 ] 
11:17:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 77 times 
11:17:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4D, 0x0) , Command count = 1002 ] 
11:17:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:03: [DVTCommonLib]### Card response as High Capacity from card
11:17:03: [DVTCommonLib]### VOLA from card : 0x1
11:17:03: [DVTCommonLib]### CMD Pattern from card : 0x4D
11:17:03: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 1003 ] 
11:17:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065088A0>, <py_sfcl.CommandDataDefinition object at 0x06508690>) , Command count = 1004 ] 
11:17:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1005 ] 
11:17:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:03: [ SetBusWidth(0x4) , Command count = 1006 ] 
11:17:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:03: ####CSD Registe 2.0 Values####
11:17:03: CSD_STRUCTURE                                 :0x1
11:17:03: Reserv1                                       :0x0
11:17:03: Time Access 1 TAAC                            :0xe
11:17:03: Time Access 2 NSAC*100                        :0x0
11:17:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:03: Card Command Classess CCC                     :0x5b5
11:17:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:03: DSR(driver stage register)  DSR_IMP           :0x0
11:17:03: Reserv2                                       :0x0
11:17:03: Device Size C_SIZE                            :0xedc8
11:17:03: Reserv3                                       :0x0
11:17:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:03: Reserv4                                       :0x0
11:17:03: Write Speed Factor R2W_FACTOR                 :0x2
11:17:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:03: FILE_FORMAT_GRP                               :0x0
11:17:03: COPY flag                                     :0x1
11:17:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:03: File_Format                                   :0x0
11:17:03: CRC                                           :0x0
11:17:03: ####CSD Registe Values####  

11:17:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:03: ProductSerialNumber = 0x23482900
11:17:03: CardMaximumLBA      = 0x3b72400
11:17:03: CardCapacity        = 32G
11:17:03: Is card secure      = 0
11:17:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:03: [DVTCommonLib]###  LogicalWrite called
11:17:05: [ WriteLba(0x16A36D5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1007 ] 
11:17:05: [DVTCommonLib]###  LogicalWrite Completed 

11:17:05: [DVTCommonLib]###  LogicalRead called
11:17:06: [ ReadLba(0x16A36D5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1008 ] 
11:17:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 78 times 
11:17:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4E, 0x0) , Command count = 1009 ] 
11:17:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:07: [DVTCommonLib]### Card response as High Capacity from card
11:17:07: [DVTCommonLib]### VOLA from card : 0x1
11:17:07: [DVTCommonLib]### CMD Pattern from card : 0x4E
11:17:07: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 1010 ] 
11:17:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508900>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 1011 ] 
11:17:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1012 ] 
11:17:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:07: [ SetBusWidth(0x4) , Command count = 1013 ] 
11:17:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:07: ####CSD Registe 2.0 Values####
11:17:07: CSD_STRUCTURE                                 :0x1
11:17:07: Reserv1                                       :0x0
11:17:07: Time Access 1 TAAC                            :0xe
11:17:07: Time Access 2 NSAC*100                        :0x0
11:17:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:07: Card Command Classess CCC                     :0x5b5
11:17:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:07: DSR(driver stage register)  DSR_IMP           :0x0
11:17:07: Reserv2                                       :0x0
11:17:07: Device Size C_SIZE                            :0xedc8
11:17:07: Reserv3                                       :0x0
11:17:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:07: Reserv4                                       :0x0
11:17:07: Write Speed Factor R2W_FACTOR                 :0x2
11:17:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:07: FILE_FORMAT_GRP                               :0x0
11:17:07: COPY flag                                     :0x1
11:17:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:07: File_Format                                   :0x0
11:17:07: CRC                                           :0x0
11:17:07: ####CSD Registe Values####  

11:17:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:07: ProductSerialNumber = 0x23482900
11:17:07: CardMaximumLBA      = 0x3b72400
11:17:07: CardCapacity        = 32G
11:17:07: Is card secure      = 0
11:17:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:07: [DVTCommonLib]###  LogicalWrite called
11:17:08: [ WriteLba(0x358AB72, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1014 ] 
11:17:08: [DVTCommonLib]###  LogicalWrite Completed 

11:17:08: [DVTCommonLib]###  LogicalRead called
11:17:10: [ ReadLba(0x358AB72, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1015 ] 
11:17:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 79 times 
11:17:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4F, 0x0) , Command count = 1016 ] 
11:17:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:10: [DVTCommonLib]### Card response as High Capacity from card
11:17:10: [DVTCommonLib]### VOLA from card : 0x1
11:17:10: [DVTCommonLib]### CMD Pattern from card : 0x4F
11:17:10: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 1017 ] 
11:17:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6C00>, <py_sfcl.CommandDataDefinition object at 0x06508660>) , Command count = 1018 ] 
11:17:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1019 ] 
11:17:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:10: [ SetBusWidth(0x4) , Command count = 1020 ] 
11:17:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:10: ####CSD Registe 2.0 Values####
11:17:10: CSD_STRUCTURE                                 :0x1
11:17:10: Reserv1                                       :0x0
11:17:10: Time Access 1 TAAC                            :0xe
11:17:10: Time Access 2 NSAC*100                        :0x0
11:17:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:10: Card Command Classess CCC                     :0x5b5
11:17:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:10: DSR(driver stage register)  DSR_IMP           :0x0
11:17:10: Reserv2                                       :0x0
11:17:10: Device Size C_SIZE                            :0xedc8
11:17:10: Reserv3                                       :0x0
11:17:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:10: Reserv4                                       :0x0
11:17:10: Write Speed Factor R2W_FACTOR                 :0x2
11:17:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:10: FILE_FORMAT_GRP                               :0x0
11:17:10: COPY flag                                     :0x1
11:17:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:10: File_Format                                   :0x0
11:17:10: CRC                                           :0x0
11:17:10: ####CSD Registe Values####  

11:17:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:10: ProductSerialNumber = 0x23482900
11:17:10: CardMaximumLBA      = 0x3b72400
11:17:10: CardCapacity        = 32G
11:17:10: Is card secure      = 0
11:17:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:10: [DVTCommonLib]###  LogicalWrite called
11:17:12: [ WriteLba(0x1BA5FA9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1021 ] 
11:17:12: [DVTCommonLib]###  LogicalWrite Completed 

11:17:12: [DVTCommonLib]###  LogicalRead called
11:17:13: [ ReadLba(0x1BA5FA9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1022 ] 
11:17:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 80 times 
11:17:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x50, 0x0) , Command count = 1023 ] 
11:17:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:14: [DVTCommonLib]### Card response as High Capacity from card
11:17:14: [DVTCommonLib]### VOLA from card : 0x1
11:17:14: [DVTCommonLib]### CMD Pattern from card : 0x50
11:17:14: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 1024 ] 
11:17:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6C60>, <py_sfcl.CommandDataDefinition object at 0x06508870>) , Command count = 1025 ] 
11:17:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1026 ] 
11:17:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:14: [ SetBusWidth(0x4) , Command count = 1027 ] 
11:17:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:14: ####CSD Registe 2.0 Values####
11:17:14: CSD_STRUCTURE                                 :0x1
11:17:14: Reserv1                                       :0x0
11:17:14: Time Access 1 TAAC                            :0xe
11:17:14: Time Access 2 NSAC*100                        :0x0
11:17:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:14: Card Command Classess CCC                     :0x5b5
11:17:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:14: DSR(driver stage register)  DSR_IMP           :0x0
11:17:14: Reserv2                                       :0x0
11:17:14: Device Size C_SIZE                            :0xedc8
11:17:14: Reserv3                                       :0x0
11:17:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:14: Reserv4                                       :0x0
11:17:14: Write Speed Factor R2W_FACTOR                 :0x2
11:17:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:14: FILE_FORMAT_GRP                               :0x0
11:17:14: COPY flag                                     :0x1
11:17:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:14: File_Format                                   :0x0
11:17:14: CRC                                           :0x0
11:17:14: ####CSD Registe Values####  

11:17:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:14: ProductSerialNumber = 0x23482900
11:17:14: CardMaximumLBA      = 0x3b72400
11:17:14: CardCapacity        = 32G
11:17:14: Is card secure      = 0
11:17:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:14: [DVTCommonLib]###  LogicalWrite called
11:17:15: [ WriteLba(0x350A5AB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1028 ] 
11:17:15: [DVTCommonLib]###  LogicalWrite Completed 

11:17:15: [DVTCommonLib]###  LogicalRead called
11:17:17: [ ReadLba(0x350A5AB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1029 ] 
11:17:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 81 times 
11:17:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x51, 0x0) , Command count = 1030 ] 
11:17:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:17: [DVTCommonLib]### Card response as High Capacity from card
11:17:17: [DVTCommonLib]### VOLA from card : 0x1
11:17:17: [DVTCommonLib]### CMD Pattern from card : 0x51
11:17:17: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 1031 ] 
11:17:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4330>, <py_sfcl.CommandDataDefinition object at 0x06508990>) , Command count = 1032 ] 
11:17:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1033 ] 
11:17:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:17: [ SetBusWidth(0x4) , Command count = 1034 ] 
11:17:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:17: ####CSD Registe 2.0 Values####
11:17:17: CSD_STRUCTURE                                 :0x1
11:17:17: Reserv1                                       :0x0
11:17:17: Time Access 1 TAAC                            :0xe
11:17:17: Time Access 2 NSAC*100                        :0x0
11:17:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:17: Card Command Classess CCC                     :0x5b5
11:17:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:17: DSR(driver stage register)  DSR_IMP           :0x0
11:17:17: Reserv2                                       :0x0
11:17:17: Device Size C_SIZE                            :0xedc8
11:17:17: Reserv3                                       :0x0
11:17:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:17: Reserv4                                       :0x0
11:17:17: Write Speed Factor R2W_FACTOR                 :0x2
11:17:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:17: FILE_FORMAT_GRP                               :0x0
11:17:17: COPY flag                                     :0x1
11:17:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:17: File_Format                                   :0x0
11:17:17: CRC                                           :0x0
11:17:17: ####CSD Registe Values####  

11:17:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:17: ProductSerialNumber = 0x23482900
11:17:17: CardMaximumLBA      = 0x3b72400
11:17:17: CardCapacity        = 32G
11:17:17: Is card secure      = 0
11:17:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:17: [DVTCommonLib]###  LogicalWrite called
11:17:19: [ WriteLba(0x2933FD8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1035 ] 
11:17:19: [DVTCommonLib]###  LogicalWrite Completed 

11:17:19: [DVTCommonLib]###  LogicalRead called
11:17:21: [ ReadLba(0x2933FD8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1036 ] 
11:17:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 82 times 
11:17:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x52, 0x0) , Command count = 1037 ] 
11:17:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:21: [DVTCommonLib]### Card response as High Capacity from card
11:17:21: [DVTCommonLib]### VOLA from card : 0x1
11:17:21: [DVTCommonLib]### CMD Pattern from card : 0x52
11:17:21: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x06508DE0>) , Command count = 1038 ] 
11:17:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508FC0>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 1039 ] 
11:17:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1040 ] 
11:17:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:21: [ SetBusWidth(0x4) , Command count = 1041 ] 
11:17:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:21: ####CSD Registe 2.0 Values####
11:17:21: CSD_STRUCTURE                                 :0x1
11:17:21: Reserv1                                       :0x0
11:17:21: Time Access 1 TAAC                            :0xe
11:17:21: Time Access 2 NSAC*100                        :0x0
11:17:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:21: Card Command Classess CCC                     :0x5b5
11:17:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:21: DSR(driver stage register)  DSR_IMP           :0x0
11:17:21: Reserv2                                       :0x0
11:17:21: Device Size C_SIZE                            :0xedc8
11:17:21: Reserv3                                       :0x0
11:17:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:21: Reserv4                                       :0x0
11:17:21: Write Speed Factor R2W_FACTOR                 :0x2
11:17:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:21: FILE_FORMAT_GRP                               :0x0
11:17:21: COPY flag                                     :0x1
11:17:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:21: File_Format                                   :0x0
11:17:21: CRC                                           :0x0
11:17:21: ####CSD Registe Values####  

11:17:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:21: ProductSerialNumber = 0x23482900
11:17:21: CardMaximumLBA      = 0x3b72400
11:17:21: CardCapacity        = 32G
11:17:21: Is card secure      = 0
11:17:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:21: [DVTCommonLib]###  LogicalWrite called
11:17:23: [ WriteLba(0x27EE9CB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1042 ] 
11:17:23: [DVTCommonLib]###  LogicalWrite Completed 

11:17:23: [DVTCommonLib]###  LogicalRead called
11:17:24: [ ReadLba(0x27EE9CB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1043 ] 
11:17:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 83 times 
11:17:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x53, 0x0) , Command count = 1044 ] 
11:17:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:24: [DVTCommonLib]### Card response as High Capacity from card
11:17:24: [DVTCommonLib]### VOLA from card : 0x1
11:17:24: [DVTCommonLib]### CMD Pattern from card : 0x53
11:17:24: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508E70>, <py_sfcl.CommandDataDefinition object at 0x06508E40>) , Command count = 1045 ] 
11:17:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E420>, <py_sfcl.CommandDataDefinition object at 0x05DFABA0>) , Command count = 1046 ] 
11:17:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1047 ] 
11:17:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:24: [ SetBusWidth(0x4) , Command count = 1048 ] 
11:17:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:24: ####CSD Registe 2.0 Values####
11:17:24: CSD_STRUCTURE                                 :0x1
11:17:24: Reserv1                                       :0x0
11:17:24: Time Access 1 TAAC                            :0xe
11:17:24: Time Access 2 NSAC*100                        :0x0
11:17:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:24: Card Command Classess CCC                     :0x5b5
11:17:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:24: DSR(driver stage register)  DSR_IMP           :0x0
11:17:24: Reserv2                                       :0x0
11:17:24: Device Size C_SIZE                            :0xedc8
11:17:24: Reserv3                                       :0x0
11:17:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:24: Reserv4                                       :0x0
11:17:24: Write Speed Factor R2W_FACTOR                 :0x2
11:17:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:24: FILE_FORMAT_GRP                               :0x0
11:17:24: COPY flag                                     :0x1
11:17:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:24: File_Format                                   :0x0
11:17:24: CRC                                           :0x0
11:17:24: ####CSD Registe Values####  

11:17:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:24: ProductSerialNumber = 0x23482900
11:17:24: CardMaximumLBA      = 0x3b72400
11:17:24: CardCapacity        = 32G
11:17:24: Is card secure      = 0
11:17:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:24: [DVTCommonLib]###  LogicalWrite called
11:17:26: [ WriteLba(0x12D8D25, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1049 ] 
11:17:26: [DVTCommonLib]###  LogicalWrite Completed 

11:17:26: [DVTCommonLib]###  LogicalRead called
11:17:28: [ ReadLba(0x12D8D25, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1050 ] 
11:17:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 84 times 
11:17:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x54, 0x0) , Command count = 1051 ] 
11:17:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:28: [DVTCommonLib]### Card response as High Capacity from card
11:17:28: [DVTCommonLib]### VOLA from card : 0x1
11:17:28: [DVTCommonLib]### CMD Pattern from card : 0x54
11:17:28: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x05DFAC90>) , Command count = 1052 ] 
11:17:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488690>, <py_sfcl.CommandDataDefinition object at 0x06508BD0>) , Command count = 1053 ] 
11:17:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1054 ] 
11:17:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:28: [ SetBusWidth(0x4) , Command count = 1055 ] 
11:17:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:28: ####CSD Registe 2.0 Values####
11:17:28: CSD_STRUCTURE                                 :0x1
11:17:28: Reserv1                                       :0x0
11:17:28: Time Access 1 TAAC                            :0xe
11:17:28: Time Access 2 NSAC*100                        :0x0
11:17:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:28: Card Command Classess CCC                     :0x5b5
11:17:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:28: DSR(driver stage register)  DSR_IMP           :0x0
11:17:28: Reserv2                                       :0x0
11:17:28: Device Size C_SIZE                            :0xedc8
11:17:28: Reserv3                                       :0x0
11:17:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:28: Reserv4                                       :0x0
11:17:28: Write Speed Factor R2W_FACTOR                 :0x2
11:17:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:28: FILE_FORMAT_GRP                               :0x0
11:17:28: COPY flag                                     :0x1
11:17:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:28: File_Format                                   :0x0
11:17:28: CRC                                           :0x0
11:17:28: ####CSD Registe Values####  

11:17:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:28: ProductSerialNumber = 0x23482900
11:17:28: CardMaximumLBA      = 0x3b72400
11:17:28: CardCapacity        = 32G
11:17:28: Is card secure      = 0
11:17:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:28: [DVTCommonLib]###  LogicalWrite called
11:17:30: [ WriteLba(0x154616B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1056 ] 
11:17:30: [DVTCommonLib]###  LogicalWrite Completed 

11:17:30: [DVTCommonLib]###  LogicalRead called
11:17:31: [ ReadLba(0x154616B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1057 ] 
11:17:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 85 times 
11:17:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x55, 0x0) , Command count = 1058 ] 
11:17:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:31: [DVTCommonLib]### Card response as High Capacity from card
11:17:31: [DVTCommonLib]### VOLA from card : 0x1
11:17:31: [DVTCommonLib]### CMD Pattern from card : 0x55
11:17:31: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 1059 ] 
11:17:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C90>, <py_sfcl.CommandDataDefinition object at 0x06508B10>) , Command count = 1060 ] 
11:17:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1061 ] 
11:17:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:32: [ SetBusWidth(0x4) , Command count = 1062 ] 
11:17:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:32: ####CSD Registe 2.0 Values####
11:17:32: CSD_STRUCTURE                                 :0x1
11:17:32: Reserv1                                       :0x0
11:17:32: Time Access 1 TAAC                            :0xe
11:17:32: Time Access 2 NSAC*100                        :0x0
11:17:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:32: Card Command Classess CCC                     :0x5b5
11:17:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:32: DSR(driver stage register)  DSR_IMP           :0x0
11:17:32: Reserv2                                       :0x0
11:17:32: Device Size C_SIZE                            :0xedc8
11:17:32: Reserv3                                       :0x0
11:17:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:32: Reserv4                                       :0x0
11:17:32: Write Speed Factor R2W_FACTOR                 :0x2
11:17:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:32: FILE_FORMAT_GRP                               :0x0
11:17:32: COPY flag                                     :0x1
11:17:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:32: File_Format                                   :0x0
11:17:32: CRC                                           :0x0
11:17:32: ####CSD Registe Values####  

11:17:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:32: ProductSerialNumber = 0x23482900
11:17:32: CardMaximumLBA      = 0x3b72400
11:17:32: CardCapacity        = 32G
11:17:32: Is card secure      = 0
11:17:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:32: [DVTCommonLib]###  LogicalWrite called
11:17:33: [ WriteLba(0x31B6AC4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1063 ] 
11:17:33: [DVTCommonLib]###  LogicalWrite Completed 

11:17:33: [DVTCommonLib]###  LogicalRead called
11:17:35: [ ReadLba(0x31B6AC4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1064 ] 
11:17:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 86 times 
11:17:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x56, 0x0) , Command count = 1065 ] 
11:17:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:35: [DVTCommonLib]### Card response as High Capacity from card
11:17:35: [DVTCommonLib]### VOLA from card : 0x1
11:17:35: [DVTCommonLib]### CMD Pattern from card : 0x56
11:17:35: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488990>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 1066 ] 
11:17:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F30>, <py_sfcl.CommandDataDefinition object at 0x06488F00>) , Command count = 1067 ] 
11:17:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1068 ] 
11:17:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:35: [ SetBusWidth(0x4) , Command count = 1069 ] 
11:17:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:35: ####CSD Registe 2.0 Values####
11:17:35: CSD_STRUCTURE                                 :0x1
11:17:35: Reserv1                                       :0x0
11:17:35: Time Access 1 TAAC                            :0xe
11:17:35: Time Access 2 NSAC*100                        :0x0
11:17:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:35: Card Command Classess CCC                     :0x5b5
11:17:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:35: DSR(driver stage register)  DSR_IMP           :0x0
11:17:35: Reserv2                                       :0x0
11:17:35: Device Size C_SIZE                            :0xedc8
11:17:35: Reserv3                                       :0x0
11:17:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:35: Reserv4                                       :0x0
11:17:35: Write Speed Factor R2W_FACTOR                 :0x2
11:17:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:35: FILE_FORMAT_GRP                               :0x0
11:17:35: COPY flag                                     :0x1
11:17:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:35: File_Format                                   :0x0
11:17:35: CRC                                           :0x0
11:17:35: ####CSD Registe Values####  

11:17:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:35: ProductSerialNumber = 0x23482900
11:17:35: CardMaximumLBA      = 0x3b72400
11:17:35: CardCapacity        = 32G
11:17:35: Is card secure      = 0
11:17:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:35: [DVTCommonLib]###  LogicalWrite called
11:17:37: [ WriteLba(0xB0E3F8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1070 ] 
11:17:37: [DVTCommonLib]###  LogicalWrite Completed 

11:17:37: [DVTCommonLib]###  LogicalRead called
11:17:38: [ ReadLba(0xB0E3F8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1071 ] 
11:17:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 87 times 
11:17:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x57, 0x0) , Command count = 1072 ] 
11:17:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:39: [DVTCommonLib]### Card response as High Capacity from card
11:17:39: [DVTCommonLib]### VOLA from card : 0x1
11:17:39: [DVTCommonLib]### CMD Pattern from card : 0x57
11:17:39: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 1073 ] 
11:17:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488E10>, <py_sfcl.CommandDataDefinition object at 0x06488B70>) , Command count = 1074 ] 
11:17:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1075 ] 
11:17:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:39: [ SetBusWidth(0x4) , Command count = 1076 ] 
11:17:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:39: ####CSD Registe 2.0 Values####
11:17:39: CSD_STRUCTURE                                 :0x1
11:17:39: Reserv1                                       :0x0
11:17:39: Time Access 1 TAAC                            :0xe
11:17:39: Time Access 2 NSAC*100                        :0x0
11:17:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:39: Card Command Classess CCC                     :0x5b5
11:17:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:39: DSR(driver stage register)  DSR_IMP           :0x0
11:17:39: Reserv2                                       :0x0
11:17:39: Device Size C_SIZE                            :0xedc8
11:17:39: Reserv3                                       :0x0
11:17:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:39: Reserv4                                       :0x0
11:17:39: Write Speed Factor R2W_FACTOR                 :0x2
11:17:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:39: FILE_FORMAT_GRP                               :0x0
11:17:39: COPY flag                                     :0x1
11:17:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:39: File_Format                                   :0x0
11:17:39: CRC                                           :0x0
11:17:39: ####CSD Registe Values####  

11:17:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:39: ProductSerialNumber = 0x23482900
11:17:39: CardMaximumLBA      = 0x3b72400
11:17:39: CardCapacity        = 32G
11:17:39: Is card secure      = 0
11:17:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:39: [DVTCommonLib]###  LogicalWrite called
11:17:40: [ WriteLba(0x22C3B6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1077 ] 
11:17:40: [DVTCommonLib]###  LogicalWrite Completed 

11:17:40: [DVTCommonLib]###  LogicalRead called
11:17:42: [ ReadLba(0x22C3B6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1078 ] 
11:17:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 88 times 
11:17:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x58, 0x0) , Command count = 1079 ] 
11:17:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:42: [DVTCommonLib]### Card response as High Capacity from card
11:17:42: [DVTCommonLib]### VOLA from card : 0x1
11:17:42: [DVTCommonLib]### CMD Pattern from card : 0x58
11:17:42: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 1080 ] 
11:17:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB0C0>, <py_sfcl.CommandDataDefinition object at 0x06488D50>) , Command count = 1081 ] 
11:17:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1082 ] 
11:17:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:42: [ SetBusWidth(0x4) , Command count = 1083 ] 
11:17:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:42: ####CSD Registe 2.0 Values####
11:17:42: CSD_STRUCTURE                                 :0x1
11:17:42: Reserv1                                       :0x0
11:17:42: Time Access 1 TAAC                            :0xe
11:17:42: Time Access 2 NSAC*100                        :0x0
11:17:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:42: Card Command Classess CCC                     :0x5b5
11:17:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:42: DSR(driver stage register)  DSR_IMP           :0x0
11:17:42: Reserv2                                       :0x0
11:17:42: Device Size C_SIZE                            :0xedc8
11:17:42: Reserv3                                       :0x0
11:17:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:42: Reserv4                                       :0x0
11:17:42: Write Speed Factor R2W_FACTOR                 :0x2
11:17:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:42: FILE_FORMAT_GRP                               :0x0
11:17:42: COPY flag                                     :0x1
11:17:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:42: File_Format                                   :0x0
11:17:42: CRC                                           :0x0
11:17:42: ####CSD Registe Values####  

11:17:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:42: ProductSerialNumber = 0x23482900
11:17:42: CardMaximumLBA      = 0x3b72400
11:17:42: CardCapacity        = 32G
11:17:42: Is card secure      = 0
11:17:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:42: [DVTCommonLib]###  LogicalWrite called
11:17:44: [ WriteLba(0x31B3309, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1084 ] 
11:17:44: [DVTCommonLib]###  LogicalWrite Completed 

11:17:44: [DVTCommonLib]###  LogicalRead called
11:17:45: [ ReadLba(0x31B3309, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1085 ] 
11:17:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 89 times 
11:17:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x59, 0x0) , Command count = 1086 ] 
11:17:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:46: [DVTCommonLib]### Card response as High Capacity from card
11:17:46: [DVTCommonLib]### VOLA from card : 0x1
11:17:46: [DVTCommonLib]### CMD Pattern from card : 0x59
11:17:46: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 1087 ] 
11:17:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9660>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 1088 ] 
11:17:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1089 ] 
11:17:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:46: [ SetBusWidth(0x4) , Command count = 1090 ] 
11:17:46: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:46: ####CSD Registe 2.0 Values####
11:17:46: CSD_STRUCTURE                                 :0x1
11:17:46: Reserv1                                       :0x0
11:17:46: Time Access 1 TAAC                            :0xe
11:17:46: Time Access 2 NSAC*100                        :0x0
11:17:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:46: Card Command Classess CCC                     :0x5b5
11:17:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:46: DSR(driver stage register)  DSR_IMP           :0x0
11:17:46: Reserv2                                       :0x0
11:17:46: Device Size C_SIZE                            :0xedc8
11:17:46: Reserv3                                       :0x0
11:17:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:46: Reserv4                                       :0x0
11:17:46: Write Speed Factor R2W_FACTOR                 :0x2
11:17:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:46: FILE_FORMAT_GRP                               :0x0
11:17:46: COPY flag                                     :0x1
11:17:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:46: File_Format                                   :0x0
11:17:46: CRC                                           :0x0
11:17:46: ####CSD Registe Values####  

11:17:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:46: ProductSerialNumber = 0x23482900
11:17:46: CardMaximumLBA      = 0x3b72400
11:17:46: CardCapacity        = 32G
11:17:46: Is card secure      = 0
11:17:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:46: [DVTCommonLib]###  LogicalWrite called
11:17:47: [ WriteLba(0xE966CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1091 ] 
11:17:47: [DVTCommonLib]###  LogicalWrite Completed 

11:17:47: [DVTCommonLib]###  LogicalRead called
11:17:49: [ ReadLba(0xE966CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1092 ] 
11:17:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 90 times 
11:17:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5A, 0x0) , Command count = 1093 ] 
11:17:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:49: [DVTCommonLib]### Card response as High Capacity from card
11:17:49: [DVTCommonLib]### VOLA from card : 0x1
11:17:49: [DVTCommonLib]### CMD Pattern from card : 0x5A
11:17:49: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x064B9930>) , Command count = 1094 ] 
11:17:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9AE0>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 1095 ] 
11:17:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1096 ] 
11:17:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:49: [ SetBusWidth(0x4) , Command count = 1097 ] 
11:17:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:49: ####CSD Registe 2.0 Values####
11:17:49: CSD_STRUCTURE                                 :0x1
11:17:49: Reserv1                                       :0x0
11:17:49: Time Access 1 TAAC                            :0xe
11:17:49: Time Access 2 NSAC*100                        :0x0
11:17:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:49: Card Command Classess CCC                     :0x5b5
11:17:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:49: DSR(driver stage register)  DSR_IMP           :0x0
11:17:49: Reserv2                                       :0x0
11:17:49: Device Size C_SIZE                            :0xedc8
11:17:49: Reserv3                                       :0x0
11:17:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:49: Reserv4                                       :0x0
11:17:49: Write Speed Factor R2W_FACTOR                 :0x2
11:17:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:49: FILE_FORMAT_GRP                               :0x0
11:17:49: COPY flag                                     :0x1
11:17:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:49: File_Format                                   :0x0
11:17:49: CRC                                           :0x0
11:17:49: ####CSD Registe Values####  

11:17:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:49: ProductSerialNumber = 0x23482900
11:17:49: CardMaximumLBA      = 0x3b72400
11:17:49: CardCapacity        = 32G
11:17:49: Is card secure      = 0
11:17:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:49: [DVTCommonLib]###  LogicalWrite called
11:17:51: [ WriteLba(0x3532CF3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1098 ] 
11:17:51: [DVTCommonLib]###  LogicalWrite Completed 

11:17:51: [DVTCommonLib]###  LogicalRead called
11:17:53: [ ReadLba(0x3532CF3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1099 ] 
11:17:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 91 times 
11:17:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5B, 0x0) , Command count = 1100 ] 
11:17:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:53: [DVTCommonLib]### Card response as High Capacity from card
11:17:53: [DVTCommonLib]### VOLA from card : 0x1
11:17:53: [DVTCommonLib]### CMD Pattern from card : 0x5B
11:17:53: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1B0>, <py_sfcl.CommandDataDefinition object at 0x064B9A50>) , Command count = 1101 ] 
11:17:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E70>, <py_sfcl.CommandDataDefinition object at 0x064B97B0>) , Command count = 1102 ] 
11:17:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1103 ] 
11:17:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:53: [ SetBusWidth(0x4) , Command count = 1104 ] 
11:17:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:53: ####CSD Registe 2.0 Values####
11:17:53: CSD_STRUCTURE                                 :0x1
11:17:53: Reserv1                                       :0x0
11:17:53: Time Access 1 TAAC                            :0xe
11:17:53: Time Access 2 NSAC*100                        :0x0
11:17:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:53: Card Command Classess CCC                     :0x5b5
11:17:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:53: DSR(driver stage register)  DSR_IMP           :0x0
11:17:53: Reserv2                                       :0x0
11:17:53: Device Size C_SIZE                            :0xedc8
11:17:53: Reserv3                                       :0x0
11:17:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:53: Reserv4                                       :0x0
11:17:53: Write Speed Factor R2W_FACTOR                 :0x2
11:17:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:53: FILE_FORMAT_GRP                               :0x0
11:17:53: COPY flag                                     :0x1
11:17:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:53: File_Format                                   :0x0
11:17:53: CRC                                           :0x0
11:17:53: ####CSD Registe Values####  

11:17:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:53: ProductSerialNumber = 0x23482900
11:17:53: CardMaximumLBA      = 0x3b72400
11:17:53: CardCapacity        = 32G
11:17:53: Is card secure      = 0
11:17:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:53: [DVTCommonLib]###  LogicalWrite called
11:17:55: [ WriteLba(0xD9E757, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1105 ] 
11:17:55: [DVTCommonLib]###  LogicalWrite Completed 

11:17:55: [DVTCommonLib]###  LogicalRead called
11:17:56: [ ReadLba(0xD9E757, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1106 ] 
11:17:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:17:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:17:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 92 times 
11:17:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:17:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5C, 0x0) , Command count = 1107 ] 
11:17:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:17:56: [DVTCommonLib]### Card response as High Capacity from card
11:17:56: [DVTCommonLib]### VOLA from card : 0x1
11:17:56: [DVTCommonLib]### CMD Pattern from card : 0x5C
11:17:56: [DVTCommonLib]### Reserved bits from card : 0x0
11:17:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 1108 ] 
11:17:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E480>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 1109 ] 
11:17:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:17:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1110 ] 
11:17:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:56: [ SetBusWidth(0x4) , Command count = 1111 ] 
11:17:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:17:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:17:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:56: ####CSD Registe 2.0 Values####
11:17:56: CSD_STRUCTURE                                 :0x1
11:17:56: Reserv1                                       :0x0
11:17:56: Time Access 1 TAAC                            :0xe
11:17:56: Time Access 2 NSAC*100                        :0x0
11:17:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:56: Card Command Classess CCC                     :0x5b5
11:17:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:56: DSR(driver stage register)  DSR_IMP           :0x0
11:17:56: Reserv2                                       :0x0
11:17:56: Device Size C_SIZE                            :0xedc8
11:17:56: Reserv3                                       :0x0
11:17:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:56: Reserv4                                       :0x0
11:17:56: Write Speed Factor R2W_FACTOR                 :0x2
11:17:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:56: FILE_FORMAT_GRP                               :0x0
11:17:56: COPY flag                                     :0x1
11:17:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:56: File_Format                                   :0x0
11:17:56: CRC                                           :0x0
11:17:56: ####CSD Registe Values####  

11:17:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:17:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:17:56: ProductSerialNumber = 0x23482900
11:17:56: CardMaximumLBA      = 0x3b72400
11:17:56: CardCapacity        = 32G
11:17:56: Is card secure      = 0
11:17:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:17:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:17:56: [DVTCommonLib]###  LogicalWrite called
11:17:58: [ WriteLba(0x399116D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1112 ] 
11:17:58: [DVTCommonLib]###  LogicalWrite Completed 

11:17:58: [DVTCommonLib]###  LogicalRead called
11:18:00: [ ReadLba(0x399116D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1113 ] 
11:18:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 93 times 
11:18:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5D, 0x0) , Command count = 1114 ] 
11:18:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:00: [DVTCommonLib]### Card response as High Capacity from card
11:18:00: [DVTCommonLib]### VOLA from card : 0x1
11:18:00: [DVTCommonLib]### CMD Pattern from card : 0x5D
11:18:00: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 1115 ] 
11:18:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9D80>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 1116 ] 
11:18:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1117 ] 
11:18:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:00: [ SetBusWidth(0x4) , Command count = 1118 ] 
11:18:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:00: ####CSD Registe 2.0 Values####
11:18:00: CSD_STRUCTURE                                 :0x1
11:18:00: Reserv1                                       :0x0
11:18:00: Time Access 1 TAAC                            :0xe
11:18:00: Time Access 2 NSAC*100                        :0x0
11:18:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:00: Card Command Classess CCC                     :0x5b5
11:18:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:00: DSR(driver stage register)  DSR_IMP           :0x0
11:18:00: Reserv2                                       :0x0
11:18:00: Device Size C_SIZE                            :0xedc8
11:18:00: Reserv3                                       :0x0
11:18:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:00: Reserv4                                       :0x0
11:18:00: Write Speed Factor R2W_FACTOR                 :0x2
11:18:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:00: FILE_FORMAT_GRP                               :0x0
11:18:00: COPY flag                                     :0x1
11:18:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:00: File_Format                                   :0x0
11:18:00: CRC                                           :0x0
11:18:00: ####CSD Registe Values####  

11:18:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:00: ProductSerialNumber = 0x23482900
11:18:00: CardMaximumLBA      = 0x3b72400
11:18:00: CardCapacity        = 32G
11:18:00: Is card secure      = 0
11:18:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:00: [DVTCommonLib]###  LogicalWrite called
11:18:02: [ WriteLba(0xD8844A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1119 ] 
11:18:02: [DVTCommonLib]###  LogicalWrite Completed 

11:18:02: [DVTCommonLib]###  LogicalRead called
11:18:03: [ ReadLba(0xD8844A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1120 ] 
11:18:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 94 times 
11:18:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5E, 0x0) , Command count = 1121 ] 
11:18:04: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:04: [DVTCommonLib]### Card response as High Capacity from card
11:18:04: [DVTCommonLib]### VOLA from card : 0x1
11:18:04: [DVTCommonLib]### CMD Pattern from card : 0x5E
11:18:04: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488330>, <py_sfcl.CommandDataDefinition object at 0x064881E0>) , Command count = 1122 ] 
11:18:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9BD0>, <py_sfcl.CommandDataDefinition object at 0x064B9C00>) , Command count = 1123 ] 
11:18:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1124 ] 
11:18:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:04: [ SetBusWidth(0x4) , Command count = 1125 ] 
11:18:04: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:04: ####CSD Registe 2.0 Values####
11:18:04: CSD_STRUCTURE                                 :0x1
11:18:04: Reserv1                                       :0x0
11:18:04: Time Access 1 TAAC                            :0xe
11:18:04: Time Access 2 NSAC*100                        :0x0
11:18:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:04: Card Command Classess CCC                     :0x5b5
11:18:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:04: DSR(driver stage register)  DSR_IMP           :0x0
11:18:04: Reserv2                                       :0x0
11:18:04: Device Size C_SIZE                            :0xedc8
11:18:04: Reserv3                                       :0x0
11:18:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:04: Reserv4                                       :0x0
11:18:04: Write Speed Factor R2W_FACTOR                 :0x2
11:18:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:04: FILE_FORMAT_GRP                               :0x0
11:18:04: COPY flag                                     :0x1
11:18:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:04: File_Format                                   :0x0
11:18:04: CRC                                           :0x0
11:18:04: ####CSD Registe Values####  

11:18:04: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:04: ProductSerialNumber = 0x23482900
11:18:04: CardMaximumLBA      = 0x3b72400
11:18:04: CardCapacity        = 32G
11:18:04: Is card secure      = 0
11:18:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:04: [DVTCommonLib]###  LogicalWrite called
11:18:05: [ WriteLba(0xEDC750, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1126 ] 
11:18:05: [DVTCommonLib]###  LogicalWrite Completed 

11:18:05: [DVTCommonLib]###  LogicalRead called
11:18:07: [ ReadLba(0xEDC750, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1127 ] 
11:18:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:07: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 95 times 
11:18:07: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5F, 0x0) , Command count = 1128 ] 
11:18:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:07: [DVTCommonLib]### Card response as High Capacity from card
11:18:07: [DVTCommonLib]### VOLA from card : 0x1
11:18:07: [DVTCommonLib]### CMD Pattern from card : 0x5F
11:18:07: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 1129 ] 
11:18:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508570>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 1130 ] 
11:18:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1131 ] 
11:18:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:07: [ SetBusWidth(0x4) , Command count = 1132 ] 
11:18:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:07: ####CSD Registe 2.0 Values####
11:18:07: CSD_STRUCTURE                                 :0x1
11:18:07: Reserv1                                       :0x0
11:18:07: Time Access 1 TAAC                            :0xe
11:18:07: Time Access 2 NSAC*100                        :0x0
11:18:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:07: Card Command Classess CCC                     :0x5b5
11:18:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:07: DSR(driver stage register)  DSR_IMP           :0x0
11:18:07: Reserv2                                       :0x0
11:18:07: Device Size C_SIZE                            :0xedc8
11:18:07: Reserv3                                       :0x0
11:18:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:07: Reserv4                                       :0x0
11:18:07: Write Speed Factor R2W_FACTOR                 :0x2
11:18:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:07: FILE_FORMAT_GRP                               :0x0
11:18:07: COPY flag                                     :0x1
11:18:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:07: File_Format                                   :0x0
11:18:07: CRC                                           :0x0
11:18:07: ####CSD Registe Values####  

11:18:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:07: ProductSerialNumber = 0x23482900
11:18:07: CardMaximumLBA      = 0x3b72400
11:18:07: CardCapacity        = 32G
11:18:07: Is card secure      = 0
11:18:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:07: [DVTCommonLib]###  LogicalWrite called
11:18:09: [ WriteLba(0x2A3B109, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1133 ] 
11:18:09: [DVTCommonLib]###  LogicalWrite Completed 

11:18:09: [DVTCommonLib]###  LogicalRead called
11:18:10: [ ReadLba(0x2A3B109, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1134 ] 
11:18:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 96 times 
11:18:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x60, 0x0) , Command count = 1135 ] 
11:18:11: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:11: [DVTCommonLib]### Card response as High Capacity from card
11:18:11: [DVTCommonLib]### VOLA from card : 0x1
11:18:11: [DVTCommonLib]### CMD Pattern from card : 0x60
11:18:11: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508480>) , Command count = 1136 ] 
11:18:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508240>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 1137 ] 
11:18:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1138 ] 
11:18:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:11: [ SetBusWidth(0x4) , Command count = 1139 ] 
11:18:11: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:11: ####CSD Registe 2.0 Values####
11:18:11: CSD_STRUCTURE                                 :0x1
11:18:11: Reserv1                                       :0x0
11:18:11: Time Access 1 TAAC                            :0xe
11:18:11: Time Access 2 NSAC*100                        :0x0
11:18:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:11: Card Command Classess CCC                     :0x5b5
11:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:11: DSR(driver stage register)  DSR_IMP           :0x0
11:18:11: Reserv2                                       :0x0
11:18:11: Device Size C_SIZE                            :0xedc8
11:18:11: Reserv3                                       :0x0
11:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:11: Reserv4                                       :0x0
11:18:11: Write Speed Factor R2W_FACTOR                 :0x2
11:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:11: FILE_FORMAT_GRP                               :0x0
11:18:11: COPY flag                                     :0x1
11:18:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:11: File_Format                                   :0x0
11:18:11: CRC                                           :0x0
11:18:11: ####CSD Registe Values####  

11:18:11: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:11: ProductSerialNumber = 0x23482900
11:18:11: CardMaximumLBA      = 0x3b72400
11:18:11: CardCapacity        = 32G
11:18:11: Is card secure      = 0
11:18:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:11: [DVTCommonLib]###  LogicalWrite called
11:18:12: [ WriteLba(0xAC80DD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1140 ] 
11:18:12: [DVTCommonLib]###  LogicalWrite Completed 

11:18:12: [DVTCommonLib]###  LogicalRead called
11:18:14: [ ReadLba(0xAC80DD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1141 ] 
11:18:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:14: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 97 times 
11:18:14: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x61, 0x0) , Command count = 1142 ] 
11:18:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:14: [DVTCommonLib]### Card response as High Capacity from card
11:18:14: [DVTCommonLib]### VOLA from card : 0x1
11:18:14: [DVTCommonLib]### CMD Pattern from card : 0x61
11:18:14: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB2A0>, <py_sfcl.CommandDataDefinition object at 0x06508360>) , Command count = 1143 ] 
11:18:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488060>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 1144 ] 
11:18:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1145 ] 
11:18:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:14: [ SetBusWidth(0x4) , Command count = 1146 ] 
11:18:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:14: ####CSD Registe 2.0 Values####
11:18:14: CSD_STRUCTURE                                 :0x1
11:18:14: Reserv1                                       :0x0
11:18:14: Time Access 1 TAAC                            :0xe
11:18:14: Time Access 2 NSAC*100                        :0x0
11:18:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:14: Card Command Classess CCC                     :0x5b5
11:18:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:14: DSR(driver stage register)  DSR_IMP           :0x0
11:18:14: Reserv2                                       :0x0
11:18:14: Device Size C_SIZE                            :0xedc8
11:18:14: Reserv3                                       :0x0
11:18:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:14: Reserv4                                       :0x0
11:18:14: Write Speed Factor R2W_FACTOR                 :0x2
11:18:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:14: FILE_FORMAT_GRP                               :0x0
11:18:14: COPY flag                                     :0x1
11:18:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:14: File_Format                                   :0x0
11:18:14: CRC                                           :0x0
11:18:14: ####CSD Registe Values####  

11:18:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:14: ProductSerialNumber = 0x23482900
11:18:14: CardMaximumLBA      = 0x3b72400
11:18:14: CardCapacity        = 32G
11:18:14: Is card secure      = 0
11:18:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:14: [DVTCommonLib]###  LogicalWrite called
11:18:16: [ WriteLba(0x2249B7B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1147 ] 
11:18:16: [DVTCommonLib]###  LogicalWrite Completed 

11:18:16: [DVTCommonLib]###  LogicalRead called
11:18:18: [ ReadLba(0x2249B7B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1148 ] 
11:18:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:18: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 98 times 
11:18:18: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x62, 0x0) , Command count = 1149 ] 
11:18:18: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:18: [DVTCommonLib]### Card response as High Capacity from card
11:18:18: [DVTCommonLib]### VOLA from card : 0x1
11:18:18: [DVTCommonLib]### CMD Pattern from card : 0x62
11:18:18: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889F0>, <py_sfcl.CommandDataDefinition object at 0x06506ED0>) , Command count = 1150 ] 
11:18:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506E10>, <py_sfcl.CommandDataDefinition object at 0x06506F00>) , Command count = 1151 ] 
11:18:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1152 ] 
11:18:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:18: [ SetBusWidth(0x4) , Command count = 1153 ] 
11:18:18: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:18: ####CSD Registe 2.0 Values####
11:18:18: CSD_STRUCTURE                                 :0x1
11:18:18: Reserv1                                       :0x0
11:18:18: Time Access 1 TAAC                            :0xe
11:18:18: Time Access 2 NSAC*100                        :0x0
11:18:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:18: Card Command Classess CCC                     :0x5b5
11:18:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:18: DSR(driver stage register)  DSR_IMP           :0x0
11:18:18: Reserv2                                       :0x0
11:18:18: Device Size C_SIZE                            :0xedc8
11:18:18: Reserv3                                       :0x0
11:18:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:18: Reserv4                                       :0x0
11:18:18: Write Speed Factor R2W_FACTOR                 :0x2
11:18:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:18: FILE_FORMAT_GRP                               :0x0
11:18:18: COPY flag                                     :0x1
11:18:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:18: File_Format                                   :0x0
11:18:18: CRC                                           :0x0
11:18:18: ####CSD Registe Values####  

11:18:18: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:18: ProductSerialNumber = 0x23482900
11:18:18: CardMaximumLBA      = 0x3b72400
11:18:18: CardCapacity        = 32G
11:18:18: Is card secure      = 0
11:18:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:18: [DVTCommonLib]###  LogicalWrite called
11:18:20: [ WriteLba(0x2CD4BB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1154 ] 
11:18:20: [DVTCommonLib]###  LogicalWrite Completed 

11:18:20: [DVTCommonLib]###  LogicalRead called
11:18:21: [ ReadLba(0x2CD4BB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1155 ] 
11:18:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 99 times 
11:18:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x63, 0x0) , Command count = 1156 ] 
11:18:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:21: [DVTCommonLib]### Card response as High Capacity from card
11:18:21: [DVTCommonLib]### VOLA from card : 0x1
11:18:21: [DVTCommonLib]### CMD Pattern from card : 0x63
11:18:21: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C60>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 1157 ] 
11:18:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506A20>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 1158 ] 
11:18:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1159 ] 
11:18:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:21: [ SetBusWidth(0x4) , Command count = 1160 ] 
11:18:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:21: ####CSD Registe 2.0 Values####
11:18:21: CSD_STRUCTURE                                 :0x1
11:18:21: Reserv1                                       :0x0
11:18:21: Time Access 1 TAAC                            :0xe
11:18:21: Time Access 2 NSAC*100                        :0x0
11:18:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:21: Card Command Classess CCC                     :0x5b5
11:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:21: DSR(driver stage register)  DSR_IMP           :0x0
11:18:21: Reserv2                                       :0x0
11:18:21: Device Size C_SIZE                            :0xedc8
11:18:21: Reserv3                                       :0x0
11:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:21: Reserv4                                       :0x0
11:18:21: Write Speed Factor R2W_FACTOR                 :0x2
11:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:21: FILE_FORMAT_GRP                               :0x0
11:18:21: COPY flag                                     :0x1
11:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:21: File_Format                                   :0x0
11:18:21: CRC                                           :0x0
11:18:21: ####CSD Registe Values####  

11:18:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:21: ProductSerialNumber = 0x23482900
11:18:21: CardMaximumLBA      = 0x3b72400
11:18:21: CardCapacity        = 32G
11:18:21: Is card secure      = 0
11:18:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:21: [DVTCommonLib]###  LogicalWrite called
11:18:23: [ WriteLba(0x304E0B6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1161 ] 
11:18:23: [DVTCommonLib]###  LogicalWrite Completed 

11:18:23: [DVTCommonLib]###  LogicalRead called
11:18:25: [ ReadLba(0x304E0B6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1162 ] 
11:18:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:25: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 100 times 
11:18:25: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x64, 0x0) , Command count = 1163 ] 
11:18:25: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:25: [DVTCommonLib]### Card response as High Capacity from card
11:18:25: [DVTCommonLib]### VOLA from card : 0x1
11:18:25: [DVTCommonLib]### CMD Pattern from card : 0x64
11:18:25: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065067E0>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 1164 ] 
11:18:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506630>, <py_sfcl.CommandDataDefinition object at 0x064DF090>) , Command count = 1165 ] 
11:18:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1166 ] 
11:18:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:25: [ SetBusWidth(0x4) , Command count = 1167 ] 
11:18:25: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:25: ####CSD Registe 2.0 Values####
11:18:25: CSD_STRUCTURE                                 :0x1
11:18:25: Reserv1                                       :0x0
11:18:25: Time Access 1 TAAC                            :0xe
11:18:25: Time Access 2 NSAC*100                        :0x0
11:18:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:25: Card Command Classess CCC                     :0x5b5
11:18:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:25: DSR(driver stage register)  DSR_IMP           :0x0
11:18:25: Reserv2                                       :0x0
11:18:25: Device Size C_SIZE                            :0xedc8
11:18:25: Reserv3                                       :0x0
11:18:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:25: Reserv4                                       :0x0
11:18:25: Write Speed Factor R2W_FACTOR                 :0x2
11:18:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:25: FILE_FORMAT_GRP                               :0x0
11:18:25: COPY flag                                     :0x1
11:18:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:25: File_Format                                   :0x0
11:18:25: CRC                                           :0x0
11:18:25: ####CSD Registe Values####  

11:18:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:25: ProductSerialNumber = 0x23482900
11:18:25: CardMaximumLBA      = 0x3b72400
11:18:25: CardCapacity        = 32G
11:18:25: Is card secure      = 0
11:18:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:25: [DVTCommonLib]###  LogicalWrite called
11:18:27: [ WriteLba(0x1506FBE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1168 ] 
11:18:27: [DVTCommonLib]###  LogicalWrite Completed 

11:18:27: [DVTCommonLib]###  LogicalRead called
11:18:28: [ ReadLba(0x1506FBE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1169 ] 
11:18:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 101 times 
11:18:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x65, 0x0) , Command count = 1170 ] 
11:18:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:28: [DVTCommonLib]### Card response as High Capacity from card
11:18:28: [DVTCommonLib]### VOLA from card : 0x1
11:18:28: [DVTCommonLib]### CMD Pattern from card : 0x65
11:18:28: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506480>, <py_sfcl.CommandDataDefinition object at 0x06506690>) , Command count = 1171 ] 
11:18:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF990>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 1172 ] 
11:18:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1173 ] 
11:18:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:29: [ SetBusWidth(0x4) , Command count = 1174 ] 
11:18:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:29: ####CSD Registe 2.0 Values####
11:18:29: CSD_STRUCTURE                                 :0x1
11:18:29: Reserv1                                       :0x0
11:18:29: Time Access 1 TAAC                            :0xe
11:18:29: Time Access 2 NSAC*100                        :0x0
11:18:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:29: Card Command Classess CCC                     :0x5b5
11:18:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:29: DSR(driver stage register)  DSR_IMP           :0x0
11:18:29: Reserv2                                       :0x0
11:18:29: Device Size C_SIZE                            :0xedc8
11:18:29: Reserv3                                       :0x0
11:18:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:29: Reserv4                                       :0x0
11:18:29: Write Speed Factor R2W_FACTOR                 :0x2
11:18:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:29: FILE_FORMAT_GRP                               :0x0
11:18:29: COPY flag                                     :0x1
11:18:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:29: File_Format                                   :0x0
11:18:29: CRC                                           :0x0
11:18:29: ####CSD Registe Values####  

11:18:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:29: ProductSerialNumber = 0x23482900
11:18:29: CardMaximumLBA      = 0x3b72400
11:18:29: CardCapacity        = 32G
11:18:29: Is card secure      = 0
11:18:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:29: [DVTCommonLib]###  LogicalWrite called
11:18:30: [ WriteLba(0x3980C9C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1175 ] 
11:18:30: [DVTCommonLib]###  LogicalWrite Completed 

11:18:30: [DVTCommonLib]###  LogicalRead called
11:18:32: [ ReadLba(0x3980C9C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1176 ] 
11:18:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:32: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 102 times 
11:18:32: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x66, 0x0) , Command count = 1177 ] 
11:18:32: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:32: [DVTCommonLib]### Card response as High Capacity from card
11:18:32: [DVTCommonLib]### VOLA from card : 0x1
11:18:32: [DVTCommonLib]### CMD Pattern from card : 0x66
11:18:32: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 1178 ] 
11:18:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF120>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 1179 ] 
11:18:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1180 ] 
11:18:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:32: [ SetBusWidth(0x4) , Command count = 1181 ] 
11:18:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:32: ####CSD Registe 2.0 Values####
11:18:32: CSD_STRUCTURE                                 :0x1
11:18:32: Reserv1                                       :0x0
11:18:32: Time Access 1 TAAC                            :0xe
11:18:32: Time Access 2 NSAC*100                        :0x0
11:18:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:32: Card Command Classess CCC                     :0x5b5
11:18:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:32: DSR(driver stage register)  DSR_IMP           :0x0
11:18:32: Reserv2                                       :0x0
11:18:32: Device Size C_SIZE                            :0xedc8
11:18:32: Reserv3                                       :0x0
11:18:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:32: Reserv4                                       :0x0
11:18:32: Write Speed Factor R2W_FACTOR                 :0x2
11:18:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:32: FILE_FORMAT_GRP                               :0x0
11:18:32: COPY flag                                     :0x1
11:18:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:32: File_Format                                   :0x0
11:18:32: CRC                                           :0x0
11:18:32: ####CSD Registe Values####  

11:18:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:32: ProductSerialNumber = 0x23482900
11:18:32: CardMaximumLBA      = 0x3b72400
11:18:32: CardCapacity        = 32G
11:18:32: Is card secure      = 0
11:18:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:32: [DVTCommonLib]###  LogicalWrite called
11:18:34: [ WriteLba(0x2F74BEB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1182 ] 
11:18:34: [DVTCommonLib]###  LogicalWrite Completed 

11:18:34: [DVTCommonLib]###  LogicalRead called
11:18:35: [ ReadLba(0x2F74BEB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1183 ] 
11:18:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 103 times 
11:18:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x67, 0x0) , Command count = 1184 ] 
11:18:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:36: [DVTCommonLib]### Card response as High Capacity from card
11:18:36: [DVTCommonLib]### VOLA from card : 0x1
11:18:36: [DVTCommonLib]### CMD Pattern from card : 0x67
11:18:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 1185 ] 
11:18:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF510>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 1186 ] 
11:18:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1187 ] 
11:18:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:36: [ SetBusWidth(0x4) , Command count = 1188 ] 
11:18:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:36: ####CSD Registe 2.0 Values####
11:18:36: CSD_STRUCTURE                                 :0x1
11:18:36: Reserv1                                       :0x0
11:18:36: Time Access 1 TAAC                            :0xe
11:18:36: Time Access 2 NSAC*100                        :0x0
11:18:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:36: Card Command Classess CCC                     :0x5b5
11:18:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:36: DSR(driver stage register)  DSR_IMP           :0x0
11:18:36: Reserv2                                       :0x0
11:18:36: Device Size C_SIZE                            :0xedc8
11:18:36: Reserv3                                       :0x0
11:18:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:36: Reserv4                                       :0x0
11:18:36: Write Speed Factor R2W_FACTOR                 :0x2
11:18:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:36: FILE_FORMAT_GRP                               :0x0
11:18:36: COPY flag                                     :0x1
11:18:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:36: File_Format                                   :0x0
11:18:36: CRC                                           :0x0
11:18:36: ####CSD Registe Values####  

11:18:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:36: ProductSerialNumber = 0x23482900
11:18:36: CardMaximumLBA      = 0x3b72400
11:18:36: CardCapacity        = 32G
11:18:36: Is card secure      = 0
11:18:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:36: [DVTCommonLib]###  LogicalWrite called
11:18:37: [ WriteLba(0x981A8B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1189 ] 
11:18:37: [DVTCommonLib]###  LogicalWrite Completed 

11:18:37: [DVTCommonLib]###  LogicalRead called
11:18:39: [ ReadLba(0x981A8B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1190 ] 
11:18:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:39: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 104 times 
11:18:39: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x68, 0x0) , Command count = 1191 ] 
11:18:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:39: [DVTCommonLib]### Card response as High Capacity from card
11:18:39: [DVTCommonLib]### VOLA from card : 0x1
11:18:39: [DVTCommonLib]### CMD Pattern from card : 0x68
11:18:39: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 1192 ] 
11:18:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF900>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 1193 ] 
11:18:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1194 ] 
11:18:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:39: [ SetBusWidth(0x4) , Command count = 1195 ] 
11:18:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:39: ####CSD Registe 2.0 Values####
11:18:39: CSD_STRUCTURE                                 :0x1
11:18:39: Reserv1                                       :0x0
11:18:39: Time Access 1 TAAC                            :0xe
11:18:39: Time Access 2 NSAC*100                        :0x0
11:18:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:39: Card Command Classess CCC                     :0x5b5
11:18:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:39: DSR(driver stage register)  DSR_IMP           :0x0
11:18:39: Reserv2                                       :0x0
11:18:39: Device Size C_SIZE                            :0xedc8
11:18:39: Reserv3                                       :0x0
11:18:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:39: Reserv4                                       :0x0
11:18:39: Write Speed Factor R2W_FACTOR                 :0x2
11:18:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:39: FILE_FORMAT_GRP                               :0x0
11:18:39: COPY flag                                     :0x1
11:18:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:39: File_Format                                   :0x0
11:18:39: CRC                                           :0x0
11:18:39: ####CSD Registe Values####  

11:18:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:39: ProductSerialNumber = 0x23482900
11:18:39: CardMaximumLBA      = 0x3b72400
11:18:39: CardCapacity        = 32G
11:18:39: Is card secure      = 0
11:18:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:39: [DVTCommonLib]###  LogicalWrite called
11:18:41: [ WriteLba(0x949555, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1196 ] 
11:18:41: [DVTCommonLib]###  LogicalWrite Completed 

11:18:41: [DVTCommonLib]###  LogicalRead called
11:18:42: [ ReadLba(0x949555, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1197 ] 
11:18:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 105 times 
11:18:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x69, 0x0) , Command count = 1198 ] 
11:18:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:43: [DVTCommonLib]### Card response as High Capacity from card
11:18:43: [DVTCommonLib]### VOLA from card : 0x1
11:18:43: [DVTCommonLib]### CMD Pattern from card : 0x69
11:18:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 1199 ] 
11:18:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFD80>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 1200 ] 
11:18:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1201 ] 
11:18:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:43: [ SetBusWidth(0x4) , Command count = 1202 ] 
11:18:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:43: ####CSD Registe 2.0 Values####
11:18:43: CSD_STRUCTURE                                 :0x1
11:18:43: Reserv1                                       :0x0
11:18:43: Time Access 1 TAAC                            :0xe
11:18:43: Time Access 2 NSAC*100                        :0x0
11:18:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:43: Card Command Classess CCC                     :0x5b5
11:18:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:43: DSR(driver stage register)  DSR_IMP           :0x0
11:18:43: Reserv2                                       :0x0
11:18:43: Device Size C_SIZE                            :0xedc8
11:18:43: Reserv3                                       :0x0
11:18:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:43: Reserv4                                       :0x0
11:18:43: Write Speed Factor R2W_FACTOR                 :0x2
11:18:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:43: FILE_FORMAT_GRP                               :0x0
11:18:43: COPY flag                                     :0x1
11:18:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:43: File_Format                                   :0x0
11:18:43: CRC                                           :0x0
11:18:43: ####CSD Registe Values####  

11:18:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:43: ProductSerialNumber = 0x23482900
11:18:43: CardMaximumLBA      = 0x3b72400
11:18:43: CardCapacity        = 32G
11:18:43: Is card secure      = 0
11:18:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:43: [DVTCommonLib]###  LogicalWrite called
11:18:44: [ WriteLba(0x38012F1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1203 ] 
11:18:44: [DVTCommonLib]###  LogicalWrite Completed 

11:18:44: [DVTCommonLib]###  LogicalRead called
11:18:46: [ ReadLba(0x38012F1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1204 ] 
11:18:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:46: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 106 times 
11:18:46: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6A, 0x0) , Command count = 1205 ] 
11:18:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:46: [DVTCommonLib]### Card response as High Capacity from card
11:18:46: [DVTCommonLib]### VOLA from card : 0x1
11:18:46: [DVTCommonLib]### CMD Pattern from card : 0x6A
11:18:46: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 1206 ] 
11:18:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506180>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 1207 ] 
11:18:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1208 ] 
11:18:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:46: [ SetBusWidth(0x4) , Command count = 1209 ] 
11:18:46: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:46: ####CSD Registe 2.0 Values####
11:18:46: CSD_STRUCTURE                                 :0x1
11:18:46: Reserv1                                       :0x0
11:18:46: Time Access 1 TAAC                            :0xe
11:18:46: Time Access 2 NSAC*100                        :0x0
11:18:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:46: Card Command Classess CCC                     :0x5b5
11:18:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:46: DSR(driver stage register)  DSR_IMP           :0x0
11:18:46: Reserv2                                       :0x0
11:18:46: Device Size C_SIZE                            :0xedc8
11:18:46: Reserv3                                       :0x0
11:18:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:46: Reserv4                                       :0x0
11:18:46: Write Speed Factor R2W_FACTOR                 :0x2
11:18:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:46: FILE_FORMAT_GRP                               :0x0
11:18:46: COPY flag                                     :0x1
11:18:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:46: File_Format                                   :0x0
11:18:46: CRC                                           :0x0
11:18:46: ####CSD Registe Values####  

11:18:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:46: ProductSerialNumber = 0x23482900
11:18:46: CardMaximumLBA      = 0x3b72400
11:18:46: CardCapacity        = 32G
11:18:46: Is card secure      = 0
11:18:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:46: [DVTCommonLib]###  LogicalWrite called
11:18:48: [ WriteLba(0x2485443, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1210 ] 
11:18:48: [DVTCommonLib]###  LogicalWrite Completed 

11:18:48: [DVTCommonLib]###  LogicalRead called
11:18:50: [ ReadLba(0x2485443, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1211 ] 
11:18:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 107 times 
11:18:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6B, 0x0) , Command count = 1212 ] 
11:18:50: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:50: [DVTCommonLib]### Card response as High Capacity from card
11:18:50: [DVTCommonLib]### VOLA from card : 0x1
11:18:50: [DVTCommonLib]### CMD Pattern from card : 0x6B
11:18:50: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 1213 ] 
11:18:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065061B0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 1214 ] 
11:18:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1215 ] 
11:18:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:50: [ SetBusWidth(0x4) , Command count = 1216 ] 
11:18:50: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:50: ####CSD Registe 2.0 Values####
11:18:50: CSD_STRUCTURE                                 :0x1
11:18:50: Reserv1                                       :0x0
11:18:50: Time Access 1 TAAC                            :0xe
11:18:50: Time Access 2 NSAC*100                        :0x0
11:18:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:50: Card Command Classess CCC                     :0x5b5
11:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:50: DSR(driver stage register)  DSR_IMP           :0x0
11:18:50: Reserv2                                       :0x0
11:18:50: Device Size C_SIZE                            :0xedc8
11:18:50: Reserv3                                       :0x0
11:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:50: Reserv4                                       :0x0
11:18:50: Write Speed Factor R2W_FACTOR                 :0x2
11:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:50: FILE_FORMAT_GRP                               :0x0
11:18:50: COPY flag                                     :0x1
11:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:50: File_Format                                   :0x0
11:18:50: CRC                                           :0x0
11:18:50: ####CSD Registe Values####  

11:18:50: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:50: ProductSerialNumber = 0x23482900
11:18:50: CardMaximumLBA      = 0x3b72400
11:18:50: CardCapacity        = 32G
11:18:50: Is card secure      = 0
11:18:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:50: [DVTCommonLib]###  LogicalWrite called
11:18:52: [ WriteLba(0x12A330B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1217 ] 
11:18:52: [DVTCommonLib]###  LogicalWrite Completed 

11:18:52: [DVTCommonLib]###  LogicalRead called
11:18:53: [ ReadLba(0x12A330B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1218 ] 
11:18:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 108 times 
11:18:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6C, 0x0) , Command count = 1219 ] 
11:18:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:53: [DVTCommonLib]### Card response as High Capacity from card
11:18:53: [DVTCommonLib]### VOLA from card : 0x1
11:18:53: [DVTCommonLib]### CMD Pattern from card : 0x6C
11:18:53: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 1220 ] 
11:18:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065062D0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 1221 ] 
11:18:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1222 ] 
11:18:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:53: [ SetBusWidth(0x4) , Command count = 1223 ] 
11:18:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:53: ####CSD Registe 2.0 Values####
11:18:53: CSD_STRUCTURE                                 :0x1
11:18:53: Reserv1                                       :0x0
11:18:53: Time Access 1 TAAC                            :0xe
11:18:53: Time Access 2 NSAC*100                        :0x0
11:18:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:53: Card Command Classess CCC                     :0x5b5
11:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:53: DSR(driver stage register)  DSR_IMP           :0x0
11:18:53: Reserv2                                       :0x0
11:18:53: Device Size C_SIZE                            :0xedc8
11:18:53: Reserv3                                       :0x0
11:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:53: Reserv4                                       :0x0
11:18:53: Write Speed Factor R2W_FACTOR                 :0x2
11:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:53: FILE_FORMAT_GRP                               :0x0
11:18:53: COPY flag                                     :0x1
11:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:53: File_Format                                   :0x0
11:18:53: CRC                                           :0x0
11:18:53: ####CSD Registe Values####  

11:18:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:53: ProductSerialNumber = 0x23482900
11:18:53: CardMaximumLBA      = 0x3b72400
11:18:53: CardCapacity        = 32G
11:18:53: Is card secure      = 0
11:18:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:53: [DVTCommonLib]###  LogicalWrite called
11:18:55: [ WriteLba(0x117E78E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1224 ] 
11:18:55: [DVTCommonLib]###  LogicalWrite Completed 

11:18:55: [DVTCommonLib]###  LogicalRead called
11:18:57: [ ReadLba(0x117E78E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1225 ] 
11:18:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:18:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:18:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 109 times 
11:18:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:18:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6D, 0x0) , Command count = 1226 ] 
11:18:57: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:18:57: [DVTCommonLib]### Card response as High Capacity from card
11:18:57: [DVTCommonLib]### VOLA from card : 0x1
11:18:57: [DVTCommonLib]### CMD Pattern from card : 0x6D
11:18:57: [DVTCommonLib]### Reserved bits from card : 0x0
11:18:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 1227 ] 
11:18:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065066C0>, <py_sfcl.CommandDataDefinition object at 0x064DFC00>) , Command count = 1228 ] 
11:18:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:18:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1229 ] 
11:18:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:57: [ SetBusWidth(0x4) , Command count = 1230 ] 
11:18:57: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:18:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:18:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:57: ####CSD Registe 2.0 Values####
11:18:57: CSD_STRUCTURE                                 :0x1
11:18:57: Reserv1                                       :0x0
11:18:57: Time Access 1 TAAC                            :0xe
11:18:57: Time Access 2 NSAC*100                        :0x0
11:18:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:57: Card Command Classess CCC                     :0x5b5
11:18:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:57: DSR(driver stage register)  DSR_IMP           :0x0
11:18:57: Reserv2                                       :0x0
11:18:57: Device Size C_SIZE                            :0xedc8
11:18:57: Reserv3                                       :0x0
11:18:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:57: Reserv4                                       :0x0
11:18:57: Write Speed Factor R2W_FACTOR                 :0x2
11:18:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:57: FILE_FORMAT_GRP                               :0x0
11:18:57: COPY flag                                     :0x1
11:18:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:57: File_Format                                   :0x0
11:18:57: CRC                                           :0x0
11:18:57: ####CSD Registe Values####  

11:18:57: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:18:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:18:57: ProductSerialNumber = 0x23482900
11:18:57: CardMaximumLBA      = 0x3b72400
11:18:57: CardCapacity        = 32G
11:18:57: Is card secure      = 0
11:18:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:18:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:18:57: [DVTCommonLib]###  LogicalWrite called
11:18:59: [ WriteLba(0x30426B8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1231 ] 
11:18:59: [DVTCommonLib]###  LogicalWrite Completed 

11:18:59: [DVTCommonLib]###  LogicalRead called
11:19:00: [ ReadLba(0x30426B8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1232 ] 
11:19:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 110 times 
11:19:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6E, 0x0) , Command count = 1233 ] 
11:19:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:00: [DVTCommonLib]### Card response as High Capacity from card
11:19:00: [DVTCommonLib]### VOLA from card : 0x1
11:19:00: [DVTCommonLib]### CMD Pattern from card : 0x6E
11:19:00: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 1234 ] 
11:19:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506CF0>, <py_sfcl.CommandDataDefinition object at 0x064DFE10>) , Command count = 1235 ] 
11:19:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1236 ] 
11:19:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:01: [ SetBusWidth(0x4) , Command count = 1237 ] 
11:19:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:01: ####CSD Registe 2.0 Values####
11:19:01: CSD_STRUCTURE                                 :0x1
11:19:01: Reserv1                                       :0x0
11:19:01: Time Access 1 TAAC                            :0xe
11:19:01: Time Access 2 NSAC*100                        :0x0
11:19:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:01: Card Command Classess CCC                     :0x5b5
11:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:01: DSR(driver stage register)  DSR_IMP           :0x0
11:19:01: Reserv2                                       :0x0
11:19:01: Device Size C_SIZE                            :0xedc8
11:19:01: Reserv3                                       :0x0
11:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:01: Reserv4                                       :0x0
11:19:01: Write Speed Factor R2W_FACTOR                 :0x2
11:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:01: FILE_FORMAT_GRP                               :0x0
11:19:01: COPY flag                                     :0x1
11:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:01: File_Format                                   :0x0
11:19:01: CRC                                           :0x0
11:19:01: ####CSD Registe Values####  

11:19:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:01: ProductSerialNumber = 0x23482900
11:19:01: CardMaximumLBA      = 0x3b72400
11:19:01: CardCapacity        = 32G
11:19:01: Is card secure      = 0
11:19:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:01: [DVTCommonLib]###  LogicalWrite called
11:19:02: [ WriteLba(0x35E9474, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1238 ] 
11:19:02: [DVTCommonLib]###  LogicalWrite Completed 

11:19:02: [DVTCommonLib]###  LogicalRead called
11:19:04: [ ReadLba(0x35E9474, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1239 ] 
11:19:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:04: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 111 times 
11:19:04: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6F, 0x0) , Command count = 1240 ] 
11:19:04: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:04: [DVTCommonLib]### Card response as High Capacity from card
11:19:04: [DVTCommonLib]### VOLA from card : 0x1
11:19:04: [DVTCommonLib]### CMD Pattern from card : 0x6F
11:19:04: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 1241 ] 
11:19:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508270>, <py_sfcl.CommandDataDefinition object at 0x06506CC0>) , Command count = 1242 ] 
11:19:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1243 ] 
11:19:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:04: [ SetBusWidth(0x4) , Command count = 1244 ] 
11:19:04: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:04: ####CSD Registe 2.0 Values####
11:19:04: CSD_STRUCTURE                                 :0x1
11:19:04: Reserv1                                       :0x0
11:19:04: Time Access 1 TAAC                            :0xe
11:19:04: Time Access 2 NSAC*100                        :0x0
11:19:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:04: Card Command Classess CCC                     :0x5b5
11:19:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:04: DSR(driver stage register)  DSR_IMP           :0x0
11:19:04: Reserv2                                       :0x0
11:19:04: Device Size C_SIZE                            :0xedc8
11:19:04: Reserv3                                       :0x0
11:19:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:04: Reserv4                                       :0x0
11:19:04: Write Speed Factor R2W_FACTOR                 :0x2
11:19:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:04: FILE_FORMAT_GRP                               :0x0
11:19:04: COPY flag                                     :0x1
11:19:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:04: File_Format                                   :0x0
11:19:04: CRC                                           :0x0
11:19:04: ####CSD Registe Values####  

11:19:04: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:04: ProductSerialNumber = 0x23482900
11:19:04: CardMaximumLBA      = 0x3b72400
11:19:04: CardCapacity        = 32G
11:19:04: Is card secure      = 0
11:19:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:04: [DVTCommonLib]###  LogicalWrite called
11:19:06: [ WriteLba(0x1CE55E8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1245 ] 
11:19:06: [DVTCommonLib]###  LogicalWrite Completed 

11:19:06: [DVTCommonLib]###  LogicalRead called
11:19:07: [ ReadLba(0x1CE55E8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1246 ] 
11:19:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:07: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 112 times 
11:19:07: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x70, 0x0) , Command count = 1247 ] 
11:19:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:08: [DVTCommonLib]### Card response as High Capacity from card
11:19:08: [DVTCommonLib]### VOLA from card : 0x1
11:19:08: [DVTCommonLib]### CMD Pattern from card : 0x70
11:19:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x06508420>) , Command count = 1248 ] 
11:19:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065082D0>, <py_sfcl.CommandDataDefinition object at 0x06508510>) , Command count = 1249 ] 
11:19:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1250 ] 
11:19:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:08: [ SetBusWidth(0x4) , Command count = 1251 ] 
11:19:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:08: ####CSD Registe 2.0 Values####
11:19:08: CSD_STRUCTURE                                 :0x1
11:19:08: Reserv1                                       :0x0
11:19:08: Time Access 1 TAAC                            :0xe
11:19:08: Time Access 2 NSAC*100                        :0x0
11:19:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:08: Card Command Classess CCC                     :0x5b5
11:19:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:08: DSR(driver stage register)  DSR_IMP           :0x0
11:19:08: Reserv2                                       :0x0
11:19:08: Device Size C_SIZE                            :0xedc8
11:19:08: Reserv3                                       :0x0
11:19:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:08: Reserv4                                       :0x0
11:19:08: Write Speed Factor R2W_FACTOR                 :0x2
11:19:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:08: FILE_FORMAT_GRP                               :0x0
11:19:08: COPY flag                                     :0x1
11:19:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:08: File_Format                                   :0x0
11:19:08: CRC                                           :0x0
11:19:08: ####CSD Registe Values####  

11:19:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:08: ProductSerialNumber = 0x23482900
11:19:08: CardMaximumLBA      = 0x3b72400
11:19:08: CardCapacity        = 32G
11:19:08: Is card secure      = 0
11:19:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:08: [DVTCommonLib]###  LogicalWrite called
11:19:09: [ WriteLba(0x209B97F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1252 ] 
11:19:09: [DVTCommonLib]###  LogicalWrite Completed 

11:19:09: [DVTCommonLib]###  LogicalRead called
11:19:11: [ ReadLba(0x209B97F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1253 ] 
11:19:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:11: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 113 times 
11:19:11: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x71, 0x0) , Command count = 1254 ] 
11:19:11: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:11: [DVTCommonLib]### Card response as High Capacity from card
11:19:11: [DVTCommonLib]### VOLA from card : 0x1
11:19:11: [DVTCommonLib]### CMD Pattern from card : 0x71
11:19:11: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 1255 ] 
11:19:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506D20>, <py_sfcl.CommandDataDefinition object at 0x065087E0>) , Command count = 1256 ] 
11:19:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1257 ] 
11:19:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:11: [ SetBusWidth(0x4) , Command count = 1258 ] 
11:19:11: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:11: ####CSD Registe 2.0 Values####
11:19:11: CSD_STRUCTURE                                 :0x1
11:19:11: Reserv1                                       :0x0
11:19:11: Time Access 1 TAAC                            :0xe
11:19:11: Time Access 2 NSAC*100                        :0x0
11:19:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:11: Card Command Classess CCC                     :0x5b5
11:19:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:11: DSR(driver stage register)  DSR_IMP           :0x0
11:19:11: Reserv2                                       :0x0
11:19:11: Device Size C_SIZE                            :0xedc8
11:19:11: Reserv3                                       :0x0
11:19:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:11: Reserv4                                       :0x0
11:19:11: Write Speed Factor R2W_FACTOR                 :0x2
11:19:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:11: FILE_FORMAT_GRP                               :0x0
11:19:11: COPY flag                                     :0x1
11:19:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:11: File_Format                                   :0x0
11:19:11: CRC                                           :0x0
11:19:11: ####CSD Registe Values####  

11:19:11: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:11: ProductSerialNumber = 0x23482900
11:19:11: CardMaximumLBA      = 0x3b72400
11:19:11: CardCapacity        = 32G
11:19:11: Is card secure      = 0
11:19:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:11: [DVTCommonLib]###  LogicalWrite called
11:19:13: [ WriteLba(0xA3ABA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1259 ] 
11:19:13: [DVTCommonLib]###  LogicalWrite Completed 

11:19:13: [DVTCommonLib]###  LogicalRead called
11:19:15: [ ReadLba(0xA3ABA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1260 ] 
11:19:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 114 times 
11:19:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x72, 0x0) , Command count = 1261 ] 
11:19:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:15: [DVTCommonLib]### Card response as High Capacity from card
11:19:15: [DVTCommonLib]### VOLA from card : 0x1
11:19:15: [DVTCommonLib]### CMD Pattern from card : 0x72
11:19:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 1262 ] 
11:19:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C7BA20>, <py_sfcl.CommandDataDefinition object at 0x06508690>) , Command count = 1263 ] 
11:19:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1264 ] 
11:19:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:15: [ SetBusWidth(0x4) , Command count = 1265 ] 
11:19:15: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:15: ####CSD Registe 2.0 Values####
11:19:15: CSD_STRUCTURE                                 :0x1
11:19:15: Reserv1                                       :0x0
11:19:15: Time Access 1 TAAC                            :0xe
11:19:15: Time Access 2 NSAC*100                        :0x0
11:19:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:15: Card Command Classess CCC                     :0x5b5
11:19:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:15: DSR(driver stage register)  DSR_IMP           :0x0
11:19:15: Reserv2                                       :0x0
11:19:15: Device Size C_SIZE                            :0xedc8
11:19:15: Reserv3                                       :0x0
11:19:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:15: Reserv4                                       :0x0
11:19:15: Write Speed Factor R2W_FACTOR                 :0x2
11:19:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:15: FILE_FORMAT_GRP                               :0x0
11:19:15: COPY flag                                     :0x1
11:19:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:15: File_Format                                   :0x0
11:19:15: CRC                                           :0x0
11:19:15: ####CSD Registe Values####  

11:19:15: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:15: ProductSerialNumber = 0x23482900
11:19:15: CardMaximumLBA      = 0x3b72400
11:19:15: CardCapacity        = 32G
11:19:15: Is card secure      = 0
11:19:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:15: [DVTCommonLib]###  LogicalWrite called
11:19:16: [ WriteLba(0x39E4600, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1266 ] 
11:19:16: [DVTCommonLib]###  LogicalWrite Completed 

11:19:16: [DVTCommonLib]###  LogicalRead called
11:19:18: [ ReadLba(0x39E4600, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1267 ] 
11:19:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:18: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 115 times 
11:19:18: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x73, 0x0) , Command count = 1268 ] 
11:19:18: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:18: [DVTCommonLib]### Card response as High Capacity from card
11:19:18: [DVTCommonLib]### VOLA from card : 0x1
11:19:18: [DVTCommonLib]### CMD Pattern from card : 0x73
11:19:18: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 1269 ] 
11:19:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508750>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 1270 ] 
11:19:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1271 ] 
11:19:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:18: [ SetBusWidth(0x4) , Command count = 1272 ] 
11:19:18: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:18: ####CSD Registe 2.0 Values####
11:19:18: CSD_STRUCTURE                                 :0x1
11:19:18: Reserv1                                       :0x0
11:19:18: Time Access 1 TAAC                            :0xe
11:19:18: Time Access 2 NSAC*100                        :0x0
11:19:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:18: Card Command Classess CCC                     :0x5b5
11:19:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:18: DSR(driver stage register)  DSR_IMP           :0x0
11:19:18: Reserv2                                       :0x0
11:19:18: Device Size C_SIZE                            :0xedc8
11:19:18: Reserv3                                       :0x0
11:19:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:18: Reserv4                                       :0x0
11:19:18: Write Speed Factor R2W_FACTOR                 :0x2
11:19:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:18: FILE_FORMAT_GRP                               :0x0
11:19:18: COPY flag                                     :0x1
11:19:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:18: File_Format                                   :0x0
11:19:18: CRC                                           :0x0
11:19:18: ####CSD Registe Values####  

11:19:18: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:18: ProductSerialNumber = 0x23482900
11:19:18: CardMaximumLBA      = 0x3b72400
11:19:18: CardCapacity        = 32G
11:19:18: Is card secure      = 0
11:19:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:18: [DVTCommonLib]###  LogicalWrite called
11:19:20: [ WriteLba(0x10EF245, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1273 ] 
11:19:20: [DVTCommonLib]###  LogicalWrite Completed 

11:19:20: [DVTCommonLib]###  LogicalRead called
11:19:22: [ ReadLba(0x10EF245, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1274 ] 
11:19:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:22: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 116 times 
11:19:22: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x74, 0x0) , Command count = 1275 ] 
11:19:22: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:22: [DVTCommonLib]### Card response as High Capacity from card
11:19:22: [DVTCommonLib]### VOLA from card : 0x1
11:19:22: [DVTCommonLib]### CMD Pattern from card : 0x74
11:19:22: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 1276 ] 
11:19:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6CF0>, <py_sfcl.CommandDataDefinition object at 0x06508660>) , Command count = 1277 ] 
11:19:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1278 ] 
11:19:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:22: [ SetBusWidth(0x4) , Command count = 1279 ] 
11:19:22: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:22: ####CSD Registe 2.0 Values####
11:19:22: CSD_STRUCTURE                                 :0x1
11:19:22: Reserv1                                       :0x0
11:19:22: Time Access 1 TAAC                            :0xe
11:19:22: Time Access 2 NSAC*100                        :0x0
11:19:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:22: Card Command Classess CCC                     :0x5b5
11:19:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:22: DSR(driver stage register)  DSR_IMP           :0x0
11:19:22: Reserv2                                       :0x0
11:19:22: Device Size C_SIZE                            :0xedc8
11:19:22: Reserv3                                       :0x0
11:19:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:22: Reserv4                                       :0x0
11:19:22: Write Speed Factor R2W_FACTOR                 :0x2
11:19:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:22: FILE_FORMAT_GRP                               :0x0
11:19:22: COPY flag                                     :0x1
11:19:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:22: File_Format                                   :0x0
11:19:22: CRC                                           :0x0
11:19:22: ####CSD Registe Values####  

11:19:22: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:22: ProductSerialNumber = 0x23482900
11:19:22: CardMaximumLBA      = 0x3b72400
11:19:22: CardCapacity        = 32G
11:19:22: Is card secure      = 0
11:19:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:22: [DVTCommonLib]###  LogicalWrite called
11:19:24: [ WriteLba(0x180B729, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1280 ] 
11:19:24: [DVTCommonLib]###  LogicalWrite Completed 

11:19:24: [DVTCommonLib]###  LogicalRead called
11:19:25: [ ReadLba(0x180B729, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1281 ] 
11:19:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:25: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 117 times 
11:19:25: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x75, 0x0) , Command count = 1282 ] 
11:19:25: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:25: [DVTCommonLib]### Card response as High Capacity from card
11:19:25: [DVTCommonLib]### VOLA from card : 0x1
11:19:25: [DVTCommonLib]### CMD Pattern from card : 0x75
11:19:25: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 1283 ] 
11:19:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508870>, <py_sfcl.CommandDataDefinition object at 0x06508CF0>) , Command count = 1284 ] 
11:19:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1285 ] 
11:19:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:25: [ SetBusWidth(0x4) , Command count = 1286 ] 
11:19:25: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:25: ####CSD Registe 2.0 Values####
11:19:25: CSD_STRUCTURE                                 :0x1
11:19:25: Reserv1                                       :0x0
11:19:25: Time Access 1 TAAC                            :0xe
11:19:25: Time Access 2 NSAC*100                        :0x0
11:19:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:25: Card Command Classess CCC                     :0x5b5
11:19:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:25: DSR(driver stage register)  DSR_IMP           :0x0
11:19:25: Reserv2                                       :0x0
11:19:25: Device Size C_SIZE                            :0xedc8
11:19:25: Reserv3                                       :0x0
11:19:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:25: Reserv4                                       :0x0
11:19:25: Write Speed Factor R2W_FACTOR                 :0x2
11:19:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:25: FILE_FORMAT_GRP                               :0x0
11:19:25: COPY flag                                     :0x1
11:19:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:25: File_Format                                   :0x0
11:19:25: CRC                                           :0x0
11:19:25: ####CSD Registe Values####  

11:19:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:26: ProductSerialNumber = 0x23482900
11:19:26: CardMaximumLBA      = 0x3b72400
11:19:26: CardCapacity        = 32G
11:19:26: Is card secure      = 0
11:19:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:26: [DVTCommonLib]###  LogicalWrite called
11:19:27: [ WriteLba(0x136A66A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1287 ] 
11:19:27: [DVTCommonLib]###  LogicalWrite Completed 

11:19:27: [DVTCommonLib]###  LogicalRead called
11:19:29: [ ReadLba(0x136A66A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1288 ] 
11:19:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:29: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 118 times 
11:19:29: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x76, 0x0) , Command count = 1289 ] 
11:19:29: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:29: [DVTCommonLib]### Card response as High Capacity from card
11:19:29: [DVTCommonLib]### VOLA from card : 0x1
11:19:29: [DVTCommonLib]### CMD Pattern from card : 0x76
11:19:29: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x06508DE0>) , Command count = 1290 ] 
11:19:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508990>, <py_sfcl.CommandDataDefinition object at 0x06508F00>) , Command count = 1291 ] 
11:19:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1292 ] 
11:19:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:29: [ SetBusWidth(0x4) , Command count = 1293 ] 
11:19:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:29: ####CSD Registe 2.0 Values####
11:19:29: CSD_STRUCTURE                                 :0x1
11:19:29: Reserv1                                       :0x0
11:19:29: Time Access 1 TAAC                            :0xe
11:19:29: Time Access 2 NSAC*100                        :0x0
11:19:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:29: Card Command Classess CCC                     :0x5b5
11:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:29: DSR(driver stage register)  DSR_IMP           :0x0
11:19:29: Reserv2                                       :0x0
11:19:29: Device Size C_SIZE                            :0xedc8
11:19:29: Reserv3                                       :0x0
11:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:29: Reserv4                                       :0x0
11:19:29: Write Speed Factor R2W_FACTOR                 :0x2
11:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:29: FILE_FORMAT_GRP                               :0x0
11:19:29: COPY flag                                     :0x1
11:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:29: File_Format                                   :0x0
11:19:29: CRC                                           :0x0
11:19:29: ####CSD Registe Values####  

11:19:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:29: ProductSerialNumber = 0x23482900
11:19:29: CardMaximumLBA      = 0x3b72400
11:19:29: CardCapacity        = 32G
11:19:29: Is card secure      = 0
11:19:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:29: [DVTCommonLib]###  LogicalWrite called
11:19:31: [ WriteLba(0x39A72FA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1294 ] 
11:19:31: [DVTCommonLib]###  LogicalWrite Completed 

11:19:31: [DVTCommonLib]###  LogicalRead called
11:19:32: [ ReadLba(0x39A72FA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1295 ] 
11:19:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:32: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 119 times 
11:19:32: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x77, 0x0) , Command count = 1296 ] 
11:19:33: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:33: [DVTCommonLib]### Card response as High Capacity from card
11:19:33: [DVTCommonLib]### VOLA from card : 0x1
11:19:33: [DVTCommonLib]### CMD Pattern from card : 0x77
11:19:33: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508E70>) , Command count = 1297 ] 
11:19:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC00>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 1298 ] 
11:19:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1299 ] 
11:19:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:33: [ SetBusWidth(0x4) , Command count = 1300 ] 
11:19:33: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:33: ####CSD Registe 2.0 Values####
11:19:33: CSD_STRUCTURE                                 :0x1
11:19:33: Reserv1                                       :0x0
11:19:33: Time Access 1 TAAC                            :0xe
11:19:33: Time Access 2 NSAC*100                        :0x0
11:19:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:33: Card Command Classess CCC                     :0x5b5
11:19:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:33: DSR(driver stage register)  DSR_IMP           :0x0
11:19:33: Reserv2                                       :0x0
11:19:33: Device Size C_SIZE                            :0xedc8
11:19:33: Reserv3                                       :0x0
11:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:33: Reserv4                                       :0x0
11:19:33: Write Speed Factor R2W_FACTOR                 :0x2
11:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:33: FILE_FORMAT_GRP                               :0x0
11:19:33: COPY flag                                     :0x1
11:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:33: File_Format                                   :0x0
11:19:33: CRC                                           :0x0
11:19:33: ####CSD Registe Values####  

11:19:33: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:33: ProductSerialNumber = 0x23482900
11:19:33: CardMaximumLBA      = 0x3b72400
11:19:33: CardCapacity        = 32G
11:19:33: Is card secure      = 0
11:19:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:33: [DVTCommonLib]###  LogicalWrite called
11:19:34: [ WriteLba(0x21DAFBD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1301 ] 
11:19:34: [DVTCommonLib]###  LogicalWrite Completed 

11:19:34: [DVTCommonLib]###  LogicalRead called
11:19:36: [ ReadLba(0x21DAFBD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1302 ] 
11:19:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:36: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 120 times 
11:19:36: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x78, 0x0) , Command count = 1303 ] 
11:19:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:36: [DVTCommonLib]### Card response as High Capacity from card
11:19:36: [DVTCommonLib]### VOLA from card : 0x1
11:19:36: [DVTCommonLib]### CMD Pattern from card : 0x78
11:19:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x05DFAC90>) , Command count = 1304 ] 
11:19:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAF30>, <py_sfcl.CommandDataDefinition object at 0x06508FC0>) , Command count = 1305 ] 
11:19:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1306 ] 
11:19:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:36: [ SetBusWidth(0x4) , Command count = 1307 ] 
11:19:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:36: ####CSD Registe 2.0 Values####
11:19:36: CSD_STRUCTURE                                 :0x1
11:19:36: Reserv1                                       :0x0
11:19:36: Time Access 1 TAAC                            :0xe
11:19:36: Time Access 2 NSAC*100                        :0x0
11:19:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:36: Card Command Classess CCC                     :0x5b5
11:19:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:36: DSR(driver stage register)  DSR_IMP           :0x0
11:19:36: Reserv2                                       :0x0
11:19:36: Device Size C_SIZE                            :0xedc8
11:19:36: Reserv3                                       :0x0
11:19:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:36: Reserv4                                       :0x0
11:19:36: Write Speed Factor R2W_FACTOR                 :0x2
11:19:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:36: FILE_FORMAT_GRP                               :0x0
11:19:36: COPY flag                                     :0x1
11:19:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:36: File_Format                                   :0x0
11:19:36: CRC                                           :0x0
11:19:36: ####CSD Registe Values####  

11:19:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:36: ProductSerialNumber = 0x23482900
11:19:36: CardMaximumLBA      = 0x3b72400
11:19:36: CardCapacity        = 32G
11:19:36: Is card secure      = 0
11:19:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:36: [DVTCommonLib]###  LogicalWrite called
11:19:38: [ WriteLba(0x2C43EC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1308 ] 
11:19:38: [DVTCommonLib]###  LogicalWrite Completed 

11:19:38: [DVTCommonLib]###  LogicalRead called
11:19:39: [ ReadLba(0x2C43EC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1309 ] 
11:19:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:39: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 121 times 
11:19:39: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x79, 0x0) , Command count = 1310 ] 
11:19:40: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:40: [DVTCommonLib]### Card response as High Capacity from card
11:19:40: [DVTCommonLib]### VOLA from card : 0x1
11:19:40: [DVTCommonLib]### CMD Pattern from card : 0x79
11:19:40: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 1311 ] 
11:19:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFACC0>, <py_sfcl.CommandDataDefinition object at 0x06508BD0>) , Command count = 1312 ] 
11:19:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1313 ] 
11:19:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:40: [ SetBusWidth(0x4) , Command count = 1314 ] 
11:19:40: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:40: ####CSD Registe 2.0 Values####
11:19:40: CSD_STRUCTURE                                 :0x1
11:19:40: Reserv1                                       :0x0
11:19:40: Time Access 1 TAAC                            :0xe
11:19:40: Time Access 2 NSAC*100                        :0x0
11:19:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:40: Card Command Classess CCC                     :0x5b5
11:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:40: DSR(driver stage register)  DSR_IMP           :0x0
11:19:40: Reserv2                                       :0x0
11:19:40: Device Size C_SIZE                            :0xedc8
11:19:40: Reserv3                                       :0x0
11:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:40: Reserv4                                       :0x0
11:19:40: Write Speed Factor R2W_FACTOR                 :0x2
11:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:40: FILE_FORMAT_GRP                               :0x0
11:19:40: COPY flag                                     :0x1
11:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:40: File_Format                                   :0x0
11:19:40: CRC                                           :0x0
11:19:40: ####CSD Registe Values####  

11:19:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:40: ProductSerialNumber = 0x23482900
11:19:40: CardMaximumLBA      = 0x3b72400
11:19:40: CardCapacity        = 32G
11:19:40: Is card secure      = 0
11:19:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:40: [DVTCommonLib]###  LogicalWrite called
11:19:41: [ WriteLba(0x2EF1A58, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1315 ] 
11:19:41: [DVTCommonLib]###  LogicalWrite Completed 

11:19:41: [DVTCommonLib]###  LogicalRead called
11:19:43: [ ReadLba(0x2EF1A58, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1316 ] 
11:19:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:43: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 122 times 
11:19:43: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7A, 0x0) , Command count = 1317 ] 
11:19:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:43: [DVTCommonLib]### Card response as High Capacity from card
11:19:43: [DVTCommonLib]### VOLA from card : 0x1
11:19:43: [DVTCommonLib]### CMD Pattern from card : 0x7A
11:19:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488990>, <py_sfcl.CommandDataDefinition object at 0x06488A20>) , Command count = 1318 ] 
11:19:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D80>, <py_sfcl.CommandDataDefinition object at 0x06488C90>) , Command count = 1319 ] 
11:19:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1320 ] 
11:19:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:43: [ SetBusWidth(0x4) , Command count = 1321 ] 
11:19:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:43: ####CSD Registe 2.0 Values####
11:19:43: CSD_STRUCTURE                                 :0x1
11:19:43: Reserv1                                       :0x0
11:19:43: Time Access 1 TAAC                            :0xe
11:19:43: Time Access 2 NSAC*100                        :0x0
11:19:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:43: Card Command Classess CCC                     :0x5b5
11:19:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:43: DSR(driver stage register)  DSR_IMP           :0x0
11:19:43: Reserv2                                       :0x0
11:19:43: Device Size C_SIZE                            :0xedc8
11:19:43: Reserv3                                       :0x0
11:19:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:43: Reserv4                                       :0x0
11:19:43: Write Speed Factor R2W_FACTOR                 :0x2
11:19:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:43: FILE_FORMAT_GRP                               :0x0
11:19:43: COPY flag                                     :0x1
11:19:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:43: File_Format                                   :0x0
11:19:43: CRC                                           :0x0
11:19:43: ####CSD Registe Values####  

11:19:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:43: ProductSerialNumber = 0x23482900
11:19:43: CardMaximumLBA      = 0x3b72400
11:19:43: CardCapacity        = 32G
11:19:43: Is card secure      = 0
11:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:43: [DVTCommonLib]###  LogicalWrite called
11:19:45: [ WriteLba(0x2DEAACF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1322 ] 
11:19:45: [DVTCommonLib]###  LogicalWrite Completed 

11:19:45: [DVTCommonLib]###  LogicalRead called
11:19:47: [ ReadLba(0x2DEAACF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1323 ] 
11:19:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:47: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 123 times 
11:19:47: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7B, 0x0) , Command count = 1324 ] 
11:19:47: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:47: [DVTCommonLib]### Card response as High Capacity from card
11:19:47: [DVTCommonLib]### VOLA from card : 0x1
11:19:47: [DVTCommonLib]### CMD Pattern from card : 0x7B
11:19:47: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 1325 ] 
11:19:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488F60>, <py_sfcl.CommandDataDefinition object at 0x06488F00>) , Command count = 1326 ] 
11:19:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1327 ] 
11:19:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:47: [ SetBusWidth(0x4) , Command count = 1328 ] 
11:19:47: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:47: ####CSD Registe 2.0 Values####
11:19:47: CSD_STRUCTURE                                 :0x1
11:19:47: Reserv1                                       :0x0
11:19:47: Time Access 1 TAAC                            :0xe
11:19:47: Time Access 2 NSAC*100                        :0x0
11:19:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:47: Card Command Classess CCC                     :0x5b5
11:19:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:47: DSR(driver stage register)  DSR_IMP           :0x0
11:19:47: Reserv2                                       :0x0
11:19:47: Device Size C_SIZE                            :0xedc8
11:19:47: Reserv3                                       :0x0
11:19:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:47: Reserv4                                       :0x0
11:19:47: Write Speed Factor R2W_FACTOR                 :0x2
11:19:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:47: FILE_FORMAT_GRP                               :0x0
11:19:47: COPY flag                                     :0x1
11:19:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:47: File_Format                                   :0x0
11:19:47: CRC                                           :0x0
11:19:47: ####CSD Registe Values####  

11:19:47: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:47: ProductSerialNumber = 0x23482900
11:19:47: CardMaximumLBA      = 0x3b72400
11:19:47: CardCapacity        = 32G
11:19:47: Is card secure      = 0
11:19:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:47: [DVTCommonLib]###  LogicalWrite called
11:19:49: [ WriteLba(0x2151340, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1329 ] 
11:19:49: [DVTCommonLib]###  LogicalWrite Completed 

11:19:49: [DVTCommonLib]###  LogicalRead called
11:19:50: [ ReadLba(0x2151340, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1330 ] 
11:19:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 124 times 
11:19:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7C, 0x0) , Command count = 1331 ] 
11:19:50: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:50: [DVTCommonLib]### Card response as High Capacity from card
11:19:50: [DVTCommonLib]### VOLA from card : 0x1
11:19:50: [DVTCommonLib]### CMD Pattern from card : 0x7C
11:19:50: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 1332 ] 
11:19:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAA80>, <py_sfcl.CommandDataDefinition object at 0x06488B70>) , Command count = 1333 ] 
11:19:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1334 ] 
11:19:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:50: [ SetBusWidth(0x4) , Command count = 1335 ] 
11:19:50: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:50: ####CSD Registe 2.0 Values####
11:19:50: CSD_STRUCTURE                                 :0x1
11:19:50: Reserv1                                       :0x0
11:19:50: Time Access 1 TAAC                            :0xe
11:19:50: Time Access 2 NSAC*100                        :0x0
11:19:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:50: Card Command Classess CCC                     :0x5b5
11:19:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:50: DSR(driver stage register)  DSR_IMP           :0x0
11:19:50: Reserv2                                       :0x0
11:19:50: Device Size C_SIZE                            :0xedc8
11:19:50: Reserv3                                       :0x0
11:19:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:50: Reserv4                                       :0x0
11:19:50: Write Speed Factor R2W_FACTOR                 :0x2
11:19:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:50: FILE_FORMAT_GRP                               :0x0
11:19:50: COPY flag                                     :0x1
11:19:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:50: File_Format                                   :0x0
11:19:50: CRC                                           :0x0
11:19:50: ####CSD Registe Values####  

11:19:50: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:51: ProductSerialNumber = 0x23482900
11:19:51: CardMaximumLBA      = 0x3b72400
11:19:51: CardCapacity        = 32G
11:19:51: Is card secure      = 0
11:19:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:51: [DVTCommonLib]###  LogicalWrite called
11:19:52: [ WriteLba(0x14D6881, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1336 ] 
11:19:52: [DVTCommonLib]###  LogicalWrite Completed 

11:19:52: [DVTCommonLib]###  LogicalRead called
11:19:54: [ ReadLba(0x14D6881, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1337 ] 
11:19:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:54: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 125 times 
11:19:54: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7D, 0x0) , Command count = 1338 ] 
11:19:54: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:54: [DVTCommonLib]### Card response as High Capacity from card
11:19:54: [DVTCommonLib]### VOLA from card : 0x1
11:19:54: [DVTCommonLib]### CMD Pattern from card : 0x7D
11:19:54: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 1339 ] 
11:19:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1E0>, <py_sfcl.CommandDataDefinition object at 0x06488E10>) , Command count = 1340 ] 
11:19:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1341 ] 
11:19:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:54: [ SetBusWidth(0x4) , Command count = 1342 ] 
11:19:54: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:54: ####CSD Registe 2.0 Values####
11:19:54: CSD_STRUCTURE                                 :0x1
11:19:54: Reserv1                                       :0x0
11:19:54: Time Access 1 TAAC                            :0xe
11:19:54: Time Access 2 NSAC*100                        :0x0
11:19:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:54: Card Command Classess CCC                     :0x5b5
11:19:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:54: DSR(driver stage register)  DSR_IMP           :0x0
11:19:54: Reserv2                                       :0x0
11:19:54: Device Size C_SIZE                            :0xedc8
11:19:54: Reserv3                                       :0x0
11:19:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:54: Reserv4                                       :0x0
11:19:54: Write Speed Factor R2W_FACTOR                 :0x2
11:19:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:54: FILE_FORMAT_GRP                               :0x0
11:19:54: COPY flag                                     :0x1
11:19:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:54: File_Format                                   :0x0
11:19:54: CRC                                           :0x0
11:19:54: ####CSD Registe Values####  

11:19:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:54: ProductSerialNumber = 0x23482900
11:19:54: CardMaximumLBA      = 0x3b72400
11:19:54: CardCapacity        = 32G
11:19:54: Is card secure      = 0
11:19:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:54: [DVTCommonLib]###  LogicalWrite called
11:19:56: [ WriteLba(0x4B1475, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1343 ] 
11:19:56: [DVTCommonLib]###  LogicalWrite Completed 

11:19:56: [DVTCommonLib]###  LogicalRead called
11:19:57: [ ReadLba(0x4B1475, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1344 ] 
11:19:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:19:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:19:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 126 times 
11:19:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:19:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7E, 0x0) , Command count = 1345 ] 
11:19:57: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:19:57: [DVTCommonLib]### Card response as High Capacity from card
11:19:57: [DVTCommonLib]### VOLA from card : 0x1
11:19:57: [DVTCommonLib]### CMD Pattern from card : 0x7E
11:19:57: [DVTCommonLib]### Reserved bits from card : 0x0
11:19:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 1346 ] 
11:19:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B97E0>, <py_sfcl.CommandDataDefinition object at 0x064B9720>) , Command count = 1347 ] 
11:19:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:19:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1348 ] 
11:19:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:58: [ SetBusWidth(0x4) , Command count = 1349 ] 
11:19:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:19:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:19:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:58: ####CSD Registe 2.0 Values####
11:19:58: CSD_STRUCTURE                                 :0x1
11:19:58: Reserv1                                       :0x0
11:19:58: Time Access 1 TAAC                            :0xe
11:19:58: Time Access 2 NSAC*100                        :0x0
11:19:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:58: Card Command Classess CCC                     :0x5b5
11:19:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:58: DSR(driver stage register)  DSR_IMP           :0x0
11:19:58: Reserv2                                       :0x0
11:19:58: Device Size C_SIZE                            :0xedc8
11:19:58: Reserv3                                       :0x0
11:19:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:58: Reserv4                                       :0x0
11:19:58: Write Speed Factor R2W_FACTOR                 :0x2
11:19:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:58: FILE_FORMAT_GRP                               :0x0
11:19:58: COPY flag                                     :0x1
11:19:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:58: File_Format                                   :0x0
11:19:58: CRC                                           :0x0
11:19:58: ####CSD Registe Values####  

11:19:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:19:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:19:58: ProductSerialNumber = 0x23482900
11:19:58: CardMaximumLBA      = 0x3b72400
11:19:58: CardCapacity        = 32G
11:19:58: Is card secure      = 0
11:19:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:19:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:19:58: [DVTCommonLib]###  LogicalWrite called
11:19:59: [ WriteLba(0x297B1F9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1350 ] 
11:19:59: [DVTCommonLib]###  LogicalWrite Completed 

11:19:59: [DVTCommonLib]###  LogicalRead called
11:20:01: [ ReadLba(0x297B1F9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1351 ] 
11:20:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:01: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 127 times 
11:20:01: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7F, 0x0) , Command count = 1352 ] 
11:20:01: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:01: [DVTCommonLib]### Card response as High Capacity from card
11:20:01: [DVTCommonLib]### VOLA from card : 0x1
11:20:01: [DVTCommonLib]### CMD Pattern from card : 0x7F
11:20:01: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1B0>, <py_sfcl.CommandDataDefinition object at 0x064882A0>) , Command count = 1353 ] 
11:20:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B95A0>, <py_sfcl.CommandDataDefinition object at 0x064B9A80>) , Command count = 1354 ] 
11:20:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1355 ] 
11:20:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:01: [ SetBusWidth(0x4) , Command count = 1356 ] 
11:20:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:01: ####CSD Registe 2.0 Values####
11:20:01: CSD_STRUCTURE                                 :0x1
11:20:01: Reserv1                                       :0x0
11:20:01: Time Access 1 TAAC                            :0xe
11:20:01: Time Access 2 NSAC*100                        :0x0
11:20:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:01: Card Command Classess CCC                     :0x5b5
11:20:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:01: DSR(driver stage register)  DSR_IMP           :0x0
11:20:01: Reserv2                                       :0x0
11:20:01: Device Size C_SIZE                            :0xedc8
11:20:01: Reserv3                                       :0x0
11:20:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:01: Reserv4                                       :0x0
11:20:01: Write Speed Factor R2W_FACTOR                 :0x2
11:20:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:01: FILE_FORMAT_GRP                               :0x0
11:20:01: COPY flag                                     :0x1
11:20:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:01: File_Format                                   :0x0
11:20:01: CRC                                           :0x0
11:20:01: ####CSD Registe Values####  

11:20:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:01: ProductSerialNumber = 0x23482900
11:20:01: CardMaximumLBA      = 0x3b72400
11:20:01: CardCapacity        = 32G
11:20:01: Is card secure      = 0
11:20:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:01: [DVTCommonLib]###  LogicalWrite called
11:20:03: [ WriteLba(0x24EA971, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1357 ] 
11:20:03: [DVTCommonLib]###  LogicalWrite Completed 

11:20:03: [DVTCommonLib]###  LogicalRead called
11:20:04: [ ReadLba(0x24EA971, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1358 ] 
11:20:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:04: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 128 times 
11:20:04: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x80, 0x0) , Command count = 1359 ] 
11:20:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:05: [DVTCommonLib]### Card response as High Capacity from card
11:20:05: [DVTCommonLib]### VOLA from card : 0x1
11:20:05: [DVTCommonLib]### CMD Pattern from card : 0x80
11:20:05: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 1360 ] 
11:20:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB4E0>, <py_sfcl.CommandDataDefinition object at 0x064B97B0>) , Command count = 1361 ] 
11:20:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1362 ] 
11:20:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:05: [ SetBusWidth(0x4) , Command count = 1363 ] 
11:20:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:05: ####CSD Registe 2.0 Values####
11:20:05: CSD_STRUCTURE                                 :0x1
11:20:05: Reserv1                                       :0x0
11:20:05: Time Access 1 TAAC                            :0xe
11:20:05: Time Access 2 NSAC*100                        :0x0
11:20:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:05: Card Command Classess CCC                     :0x5b5
11:20:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:05: DSR(driver stage register)  DSR_IMP           :0x0
11:20:05: Reserv2                                       :0x0
11:20:05: Device Size C_SIZE                            :0xedc8
11:20:05: Reserv3                                       :0x0
11:20:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:05: Reserv4                                       :0x0
11:20:05: Write Speed Factor R2W_FACTOR                 :0x2
11:20:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:05: FILE_FORMAT_GRP                               :0x0
11:20:05: COPY flag                                     :0x1
11:20:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:05: File_Format                                   :0x0
11:20:05: CRC                                           :0x0
11:20:05: ####CSD Registe Values####  

11:20:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:05: ProductSerialNumber = 0x23482900
11:20:05: CardMaximumLBA      = 0x3b72400
11:20:05: CardCapacity        = 32G
11:20:05: Is card secure      = 0
11:20:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:05: [DVTCommonLib]###  LogicalWrite called
11:20:06: [ WriteLba(0xCC3FCB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1364 ] 
11:20:06: [DVTCommonLib]###  LogicalWrite Completed 

11:20:06: [DVTCommonLib]###  LogicalRead called
11:20:08: [ ReadLba(0xCC3FCB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1365 ] 
11:20:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 129 times 
11:20:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x81, 0x0) , Command count = 1366 ] 
11:20:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:08: [DVTCommonLib]### Card response as High Capacity from card
11:20:08: [DVTCommonLib]### VOLA from card : 0x1
11:20:08: [DVTCommonLib]### CMD Pattern from card : 0x81
11:20:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 1367 ] 
11:20:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB480>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 1368 ] 
11:20:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1369 ] 
11:20:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:08: [ SetBusWidth(0x4) , Command count = 1370 ] 
11:20:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:08: ####CSD Registe 2.0 Values####
11:20:08: CSD_STRUCTURE                                 :0x1
11:20:08: Reserv1                                       :0x0
11:20:08: Time Access 1 TAAC                            :0xe
11:20:08: Time Access 2 NSAC*100                        :0x0
11:20:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:08: Card Command Classess CCC                     :0x5b5
11:20:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:08: DSR(driver stage register)  DSR_IMP           :0x0
11:20:08: Reserv2                                       :0x0
11:20:08: Device Size C_SIZE                            :0xedc8
11:20:08: Reserv3                                       :0x0
11:20:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:08: Reserv4                                       :0x0
11:20:08: Write Speed Factor R2W_FACTOR                 :0x2
11:20:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:08: FILE_FORMAT_GRP                               :0x0
11:20:08: COPY flag                                     :0x1
11:20:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:08: File_Format                                   :0x0
11:20:08: CRC                                           :0x0
11:20:08: ####CSD Registe Values####  

11:20:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:08: ProductSerialNumber = 0x23482900
11:20:08: CardMaximumLBA      = 0x3b72400
11:20:08: CardCapacity        = 32G
11:20:08: Is card secure      = 0
11:20:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:08: [DVTCommonLib]###  LogicalWrite called
11:20:10: [ WriteLba(0xCAA4C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1371 ] 
11:20:10: [DVTCommonLib]###  LogicalWrite Completed 

11:20:10: [DVTCommonLib]###  LogicalRead called
11:20:12: [ ReadLba(0xCAA4C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1372 ] 
11:20:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 130 times 
11:20:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x82, 0x0) , Command count = 1373 ] 
11:20:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:12: [DVTCommonLib]### Card response as High Capacity from card
11:20:12: [DVTCommonLib]### VOLA from card : 0x1
11:20:12: [DVTCommonLib]### CMD Pattern from card : 0x82
11:20:12: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488330>, <py_sfcl.CommandDataDefinition object at 0x064881E0>) , Command count = 1374 ] 
11:20:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9CC0>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 1375 ] 
11:20:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1376 ] 
11:20:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:12: [ SetBusWidth(0x4) , Command count = 1377 ] 
11:20:12: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:12: ####CSD Registe 2.0 Values####
11:20:12: CSD_STRUCTURE                                 :0x1
11:20:12: Reserv1                                       :0x0
11:20:12: Time Access 1 TAAC                            :0xe
11:20:12: Time Access 2 NSAC*100                        :0x0
11:20:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:12: Card Command Classess CCC                     :0x5b5
11:20:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:12: DSR(driver stage register)  DSR_IMP           :0x0
11:20:12: Reserv2                                       :0x0
11:20:12: Device Size C_SIZE                            :0xedc8
11:20:12: Reserv3                                       :0x0
11:20:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:12: Reserv4                                       :0x0
11:20:12: Write Speed Factor R2W_FACTOR                 :0x2
11:20:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:12: FILE_FORMAT_GRP                               :0x0
11:20:12: COPY flag                                     :0x1
11:20:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:12: File_Format                                   :0x0
11:20:12: CRC                                           :0x0
11:20:12: ####CSD Registe Values####  

11:20:12: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:12: ProductSerialNumber = 0x23482900
11:20:12: CardMaximumLBA      = 0x3b72400
11:20:12: CardCapacity        = 32G
11:20:12: Is card secure      = 0
11:20:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:12: [DVTCommonLib]###  LogicalWrite called
11:20:14: [ WriteLba(0x3709743, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1378 ] 
11:20:14: [DVTCommonLib]###  LogicalWrite Completed 

11:20:14: [DVTCommonLib]###  LogicalRead called
11:20:15: [ ReadLba(0x3709743, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1379 ] 
11:20:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 131 times 
11:20:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x83, 0x0) , Command count = 1380 ] 
11:20:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:15: [DVTCommonLib]### Card response as High Capacity from card
11:20:15: [DVTCommonLib]### VOLA from card : 0x1
11:20:15: [DVTCommonLib]### CMD Pattern from card : 0x83
11:20:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 1381 ] 
11:20:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB570>, <py_sfcl.CommandDataDefinition object at 0x064B9C00>) , Command count = 1382 ] 
11:20:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1383 ] 
11:20:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:15: [ SetBusWidth(0x4) , Command count = 1384 ] 
11:20:15: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:15: ####CSD Registe 2.0 Values####
11:20:15: CSD_STRUCTURE                                 :0x1
11:20:15: Reserv1                                       :0x0
11:20:15: Time Access 1 TAAC                            :0xe
11:20:15: Time Access 2 NSAC*100                        :0x0
11:20:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:15: Card Command Classess CCC                     :0x5b5
11:20:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:15: DSR(driver stage register)  DSR_IMP           :0x0
11:20:15: Reserv2                                       :0x0
11:20:15: Device Size C_SIZE                            :0xedc8
11:20:15: Reserv3                                       :0x0
11:20:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:15: Reserv4                                       :0x0
11:20:15: Write Speed Factor R2W_FACTOR                 :0x2
11:20:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:15: FILE_FORMAT_GRP                               :0x0
11:20:15: COPY flag                                     :0x1
11:20:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:15: File_Format                                   :0x0
11:20:15: CRC                                           :0x0
11:20:15: ####CSD Registe Values####  

11:20:15: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:15: ProductSerialNumber = 0x23482900
11:20:15: CardMaximumLBA      = 0x3b72400
11:20:15: CardCapacity        = 32G
11:20:15: Is card secure      = 0
11:20:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:15: [DVTCommonLib]###  LogicalWrite called
11:20:17: [ WriteLba(0x1F2927F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1385 ] 
11:20:17: [DVTCommonLib]###  LogicalWrite Completed 

11:20:17: [DVTCommonLib]###  LogicalRead called
11:20:19: [ ReadLba(0x1F2927F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1386 ] 
11:20:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 132 times 
11:20:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x84, 0x0) , Command count = 1387 ] 
11:20:19: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:19: [DVTCommonLib]### Card response as High Capacity from card
11:20:19: [DVTCommonLib]### VOLA from card : 0x1
11:20:19: [DVTCommonLib]### CMD Pattern from card : 0x84
11:20:19: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9B10>, <py_sfcl.CommandDataDefinition object at 0x065083C0>) , Command count = 1388 ] 
11:20:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083F0>, <py_sfcl.CommandDataDefinition object at 0x06508330>) , Command count = 1389 ] 
11:20:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1390 ] 
11:20:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:19: [ SetBusWidth(0x4) , Command count = 1391 ] 
11:20:19: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:19: ####CSD Registe 2.0 Values####
11:20:19: CSD_STRUCTURE                                 :0x1
11:20:19: Reserv1                                       :0x0
11:20:19: Time Access 1 TAAC                            :0xe
11:20:19: Time Access 2 NSAC*100                        :0x0
11:20:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:19: Card Command Classess CCC                     :0x5b5
11:20:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:19: DSR(driver stage register)  DSR_IMP           :0x0
11:20:19: Reserv2                                       :0x0
11:20:19: Device Size C_SIZE                            :0xedc8
11:20:19: Reserv3                                       :0x0
11:20:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:19: Reserv4                                       :0x0
11:20:19: Write Speed Factor R2W_FACTOR                 :0x2
11:20:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:19: FILE_FORMAT_GRP                               :0x0
11:20:19: COPY flag                                     :0x1
11:20:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:19: File_Format                                   :0x0
11:20:19: CRC                                           :0x0
11:20:19: ####CSD Registe Values####  

11:20:19: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:19: ProductSerialNumber = 0x23482900
11:20:19: CardMaximumLBA      = 0x3b72400
11:20:19: CardCapacity        = 32G
11:20:19: Is card secure      = 0
11:20:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:19: [DVTCommonLib]###  LogicalWrite called
11:20:21: [ WriteLba(0x15D5807, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1392 ] 
11:20:21: [DVTCommonLib]###  LogicalWrite Completed 

11:20:21: [DVTCommonLib]###  LogicalRead called
11:20:22: [ ReadLba(0x15D5807, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1393 ] 
11:20:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:22: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 133 times 
11:20:22: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x85, 0x0) , Command count = 1394 ] 
11:20:22: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:22: [DVTCommonLib]### Card response as High Capacity from card
11:20:22: [DVTCommonLib]### VOLA from card : 0x1
11:20:22: [DVTCommonLib]### CMD Pattern from card : 0x85
11:20:22: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB2A0>, <py_sfcl.CommandDataDefinition object at 0x064B9C90>) , Command count = 1395 ] 
11:20:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508A50>, <py_sfcl.CommandDataDefinition object at 0x06506F90>) , Command count = 1396 ] 
11:20:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1397 ] 
11:20:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:23: [ SetBusWidth(0x4) , Command count = 1398 ] 
11:20:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:23: ####CSD Registe 2.0 Values####
11:20:23: CSD_STRUCTURE                                 :0x1
11:20:23: Reserv1                                       :0x0
11:20:23: Time Access 1 TAAC                            :0xe
11:20:23: Time Access 2 NSAC*100                        :0x0
11:20:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:23: Card Command Classess CCC                     :0x5b5
11:20:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:23: DSR(driver stage register)  DSR_IMP           :0x0
11:20:23: Reserv2                                       :0x0
11:20:23: Device Size C_SIZE                            :0xedc8
11:20:23: Reserv3                                       :0x0
11:20:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:23: Reserv4                                       :0x0
11:20:23: Write Speed Factor R2W_FACTOR                 :0x2
11:20:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:23: FILE_FORMAT_GRP                               :0x0
11:20:23: COPY flag                                     :0x1
11:20:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:23: File_Format                                   :0x0
11:20:23: CRC                                           :0x0
11:20:23: ####CSD Registe Values####  

11:20:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:23: ProductSerialNumber = 0x23482900
11:20:23: CardMaximumLBA      = 0x3b72400
11:20:23: CardCapacity        = 32G
11:20:23: Is card secure      = 0
11:20:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:23: [DVTCommonLib]###  LogicalWrite called
11:20:24: [ WriteLba(0x4068F6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1399 ] 
11:20:24: [DVTCommonLib]###  LogicalWrite Completed 

11:20:24: [DVTCommonLib]###  LogicalRead called
11:20:26: [ ReadLba(0x4068F6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1400 ] 
11:20:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 134 times 
11:20:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x86, 0x0) , Command count = 1401 ] 
11:20:26: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:26: [DVTCommonLib]### Card response as High Capacity from card
11:20:26: [DVTCommonLib]### VOLA from card : 0x1
11:20:26: [DVTCommonLib]### CMD Pattern from card : 0x86
11:20:26: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C60>, <py_sfcl.CommandDataDefinition object at 0x06506ED0>) , Command count = 1402 ] 
11:20:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB030>, <py_sfcl.CommandDataDefinition object at 0x064889F0>) , Command count = 1403 ] 
11:20:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1404 ] 
11:20:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:26: [ SetBusWidth(0x4) , Command count = 1405 ] 
11:20:26: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:26: ####CSD Registe 2.0 Values####
11:20:26: CSD_STRUCTURE                                 :0x1
11:20:26: Reserv1                                       :0x0
11:20:26: Time Access 1 TAAC                            :0xe
11:20:26: Time Access 2 NSAC*100                        :0x0
11:20:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:26: Card Command Classess CCC                     :0x5b5
11:20:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:26: DSR(driver stage register)  DSR_IMP           :0x0
11:20:26: Reserv2                                       :0x0
11:20:26: Device Size C_SIZE                            :0xedc8
11:20:26: Reserv3                                       :0x0
11:20:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:26: Reserv4                                       :0x0
11:20:26: Write Speed Factor R2W_FACTOR                 :0x2
11:20:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:26: FILE_FORMAT_GRP                               :0x0
11:20:26: COPY flag                                     :0x1
11:20:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:26: File_Format                                   :0x0
11:20:26: CRC                                           :0x0
11:20:26: ####CSD Registe Values####  

11:20:26: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:26: ProductSerialNumber = 0x23482900
11:20:26: CardMaximumLBA      = 0x3b72400
11:20:26: CardCapacity        = 32G
11:20:26: Is card secure      = 0
11:20:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:26: [DVTCommonLib]###  LogicalWrite called
11:20:28: [ WriteLba(0x1B2EEB7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1406 ] 
11:20:28: [DVTCommonLib]###  LogicalWrite Completed 

11:20:28: [DVTCommonLib]###  LogicalRead called
11:20:29: [ ReadLba(0x1B2EEB7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1407 ] 
11:20:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:29: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 135 times 
11:20:29: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x87, 0x0) , Command count = 1408 ] 
11:20:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:30: [DVTCommonLib]### Card response as High Capacity from card
11:20:30: [DVTCommonLib]### VOLA from card : 0x1
11:20:30: [DVTCommonLib]### CMD Pattern from card : 0x87
11:20:30: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C60>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 1409 ] 
11:20:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506A50>, <py_sfcl.CommandDataDefinition object at 0x06506BD0>) , Command count = 1410 ] 
11:20:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1411 ] 
11:20:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:30: [ SetBusWidth(0x4) , Command count = 1412 ] 
11:20:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:30: ####CSD Registe 2.0 Values####
11:20:30: CSD_STRUCTURE                                 :0x1
11:20:30: Reserv1                                       :0x0
11:20:30: Time Access 1 TAAC                            :0xe
11:20:30: Time Access 2 NSAC*100                        :0x0
11:20:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:30: Card Command Classess CCC                     :0x5b5
11:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:30: DSR(driver stage register)  DSR_IMP           :0x0
11:20:30: Reserv2                                       :0x0
11:20:30: Device Size C_SIZE                            :0xedc8
11:20:30: Reserv3                                       :0x0
11:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:30: Reserv4                                       :0x0
11:20:30: Write Speed Factor R2W_FACTOR                 :0x2
11:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:30: FILE_FORMAT_GRP                               :0x0
11:20:30: COPY flag                                     :0x1
11:20:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:30: File_Format                                   :0x0
11:20:30: CRC                                           :0x0
11:20:30: ####CSD Registe Values####  

11:20:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:30: ProductSerialNumber = 0x23482900
11:20:30: CardMaximumLBA      = 0x3b72400
11:20:30: CardCapacity        = 32G
11:20:30: Is card secure      = 0
11:20:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:30: [DVTCommonLib]###  LogicalWrite called
11:20:31: [ WriteLba(0x18F839A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1413 ] 
11:20:31: [DVTCommonLib]###  LogicalWrite Completed 

11:20:31: [DVTCommonLib]###  LogicalRead called
11:20:33: [ ReadLba(0x18F839A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1414 ] 
11:20:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 136 times 
11:20:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x88, 0x0) , Command count = 1415 ] 
11:20:33: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:33: [DVTCommonLib]### Card response as High Capacity from card
11:20:33: [DVTCommonLib]### VOLA from card : 0x1
11:20:33: [DVTCommonLib]### CMD Pattern from card : 0x88
11:20:33: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065067E0>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 1416 ] 
11:20:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506750>, <py_sfcl.CommandDataDefinition object at 0x06506F30>) , Command count = 1417 ] 
11:20:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1418 ] 
11:20:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:33: [ SetBusWidth(0x4) , Command count = 1419 ] 
11:20:33: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:33: ####CSD Registe 2.0 Values####
11:20:33: CSD_STRUCTURE                                 :0x1
11:20:33: Reserv1                                       :0x0
11:20:33: Time Access 1 TAAC                            :0xe
11:20:33: Time Access 2 NSAC*100                        :0x0
11:20:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:33: Card Command Classess CCC                     :0x5b5
11:20:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:33: DSR(driver stage register)  DSR_IMP           :0x0
11:20:33: Reserv2                                       :0x0
11:20:33: Device Size C_SIZE                            :0xedc8
11:20:33: Reserv3                                       :0x0
11:20:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:33: Reserv4                                       :0x0
11:20:33: Write Speed Factor R2W_FACTOR                 :0x2
11:20:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:33: FILE_FORMAT_GRP                               :0x0
11:20:33: COPY flag                                     :0x1
11:20:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:33: File_Format                                   :0x0
11:20:33: CRC                                           :0x0
11:20:33: ####CSD Registe Values####  

11:20:33: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:33: ProductSerialNumber = 0x23482900
11:20:33: CardMaximumLBA      = 0x3b72400
11:20:33: CardCapacity        = 32G
11:20:33: Is card secure      = 0
11:20:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:33: [DVTCommonLib]###  LogicalWrite called
11:20:35: [ WriteLba(0x2C056BC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1420 ] 
11:20:35: [DVTCommonLib]###  LogicalWrite Completed 

11:20:35: [DVTCommonLib]###  LogicalRead called
11:20:36: [ ReadLba(0x2C056BC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1421 ] 
11:20:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:36: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 137 times 
11:20:36: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x89, 0x0) , Command count = 1422 ] 
11:20:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:37: [DVTCommonLib]### Card response as High Capacity from card
11:20:37: [DVTCommonLib]### VOLA from card : 0x1
11:20:37: [DVTCommonLib]### CMD Pattern from card : 0x89
11:20:37: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506480>, <py_sfcl.CommandDataDefinition object at 0x06506690>) , Command count = 1423 ] 
11:20:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFE70>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 1424 ] 
11:20:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1425 ] 
11:20:37: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:37: [ SetBusWidth(0x4) , Command count = 1426 ] 
11:20:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:37: ####CSD Registe 2.0 Values####
11:20:37: CSD_STRUCTURE                                 :0x1
11:20:37: Reserv1                                       :0x0
11:20:37: Time Access 1 TAAC                            :0xe
11:20:37: Time Access 2 NSAC*100                        :0x0
11:20:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:37: Card Command Classess CCC                     :0x5b5
11:20:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:37: DSR(driver stage register)  DSR_IMP           :0x0
11:20:37: Reserv2                                       :0x0
11:20:37: Device Size C_SIZE                            :0xedc8
11:20:37: Reserv3                                       :0x0
11:20:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:37: Reserv4                                       :0x0
11:20:37: Write Speed Factor R2W_FACTOR                 :0x2
11:20:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:37: FILE_FORMAT_GRP                               :0x0
11:20:37: COPY flag                                     :0x1
11:20:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:37: File_Format                                   :0x0
11:20:37: CRC                                           :0x0
11:20:37: ####CSD Registe Values####  

11:20:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:37: ProductSerialNumber = 0x23482900
11:20:37: CardMaximumLBA      = 0x3b72400
11:20:37: CardCapacity        = 32G
11:20:37: Is card secure      = 0
11:20:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:37: [DVTCommonLib]###  LogicalWrite called
11:20:38: [ WriteLba(0x17464BB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1427 ] 
11:20:38: [DVTCommonLib]###  LogicalWrite Completed 

11:20:38: [DVTCommonLib]###  LogicalRead called
11:20:40: [ ReadLba(0x17464BB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1428 ] 
11:20:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:40: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 138 times 
11:20:40: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8A, 0x0) , Command count = 1429 ] 
11:20:40: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:40: [DVTCommonLib]### Card response as High Capacity from card
11:20:40: [DVTCommonLib]### VOLA from card : 0x1
11:20:40: [DVTCommonLib]### CMD Pattern from card : 0x8A
11:20:40: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 1430 ] 
11:20:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF7B0>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 1431 ] 
11:20:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1432 ] 
11:20:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:40: [ SetBusWidth(0x4) , Command count = 1433 ] 
11:20:40: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:40: ####CSD Registe 2.0 Values####
11:20:40: CSD_STRUCTURE                                 :0x1
11:20:40: Reserv1                                       :0x0
11:20:40: Time Access 1 TAAC                            :0xe
11:20:40: Time Access 2 NSAC*100                        :0x0
11:20:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:40: Card Command Classess CCC                     :0x5b5
11:20:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:40: DSR(driver stage register)  DSR_IMP           :0x0
11:20:40: Reserv2                                       :0x0
11:20:40: Device Size C_SIZE                            :0xedc8
11:20:40: Reserv3                                       :0x0
11:20:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:40: Reserv4                                       :0x0
11:20:40: Write Speed Factor R2W_FACTOR                 :0x2
11:20:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:40: FILE_FORMAT_GRP                               :0x0
11:20:40: COPY flag                                     :0x1
11:20:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:40: File_Format                                   :0x0
11:20:40: CRC                                           :0x0
11:20:40: ####CSD Registe Values####  

11:20:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:40: ProductSerialNumber = 0x23482900
11:20:40: CardMaximumLBA      = 0x3b72400
11:20:40: CardCapacity        = 32G
11:20:40: Is card secure      = 0
11:20:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:40: [DVTCommonLib]###  LogicalWrite called
11:20:42: [ WriteLba(0x1339A53, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1434 ] 
11:20:42: [DVTCommonLib]###  LogicalWrite Completed 

11:20:42: [DVTCommonLib]###  LogicalRead called
11:20:44: [ ReadLba(0x1339A53, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1435 ] 
11:20:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 139 times 
11:20:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8B, 0x0) , Command count = 1436 ] 
11:20:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:44: [DVTCommonLib]### Card response as High Capacity from card
11:20:44: [DVTCommonLib]### VOLA from card : 0x1
11:20:44: [DVTCommonLib]### CMD Pattern from card : 0x8B
11:20:44: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 1437 ] 
11:20:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF2A0>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 1438 ] 
11:20:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1439 ] 
11:20:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:44: [ SetBusWidth(0x4) , Command count = 1440 ] 
11:20:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:44: ####CSD Registe 2.0 Values####
11:20:44: CSD_STRUCTURE                                 :0x1
11:20:44: Reserv1                                       :0x0
11:20:44: Time Access 1 TAAC                            :0xe
11:20:44: Time Access 2 NSAC*100                        :0x0
11:20:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:44: Card Command Classess CCC                     :0x5b5
11:20:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:44: DSR(driver stage register)  DSR_IMP           :0x0
11:20:44: Reserv2                                       :0x0
11:20:44: Device Size C_SIZE                            :0xedc8
11:20:44: Reserv3                                       :0x0
11:20:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:44: Reserv4                                       :0x0
11:20:44: Write Speed Factor R2W_FACTOR                 :0x2
11:20:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:44: FILE_FORMAT_GRP                               :0x0
11:20:44: COPY flag                                     :0x1
11:20:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:44: File_Format                                   :0x0
11:20:44: CRC                                           :0x0
11:20:44: ####CSD Registe Values####  

11:20:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:44: ProductSerialNumber = 0x23482900
11:20:44: CardMaximumLBA      = 0x3b72400
11:20:44: CardCapacity        = 32G
11:20:44: Is card secure      = 0
11:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:44: [DVTCommonLib]###  LogicalWrite called
11:20:45: [ WriteLba(0xFAAD74, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1441 ] 
11:20:45: [DVTCommonLib]###  LogicalWrite Completed 

11:20:45: [DVTCommonLib]###  LogicalRead called
11:20:47: [ ReadLba(0xFAAD74, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1442 ] 
11:20:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:47: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 140 times 
11:20:47: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8C, 0x0) , Command count = 1443 ] 
11:20:47: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:47: [DVTCommonLib]### Card response as High Capacity from card
11:20:47: [DVTCommonLib]### VOLA from card : 0x1
11:20:47: [DVTCommonLib]### CMD Pattern from card : 0x8C
11:20:47: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 1444 ] 
11:20:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF690>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 1445 ] 
11:20:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1446 ] 
11:20:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:47: [ SetBusWidth(0x4) , Command count = 1447 ] 
11:20:47: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:47: ####CSD Registe 2.0 Values####
11:20:47: CSD_STRUCTURE                                 :0x1
11:20:47: Reserv1                                       :0x0
11:20:47: Time Access 1 TAAC                            :0xe
11:20:47: Time Access 2 NSAC*100                        :0x0
11:20:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:47: Card Command Classess CCC                     :0x5b5
11:20:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:47: DSR(driver stage register)  DSR_IMP           :0x0
11:20:47: Reserv2                                       :0x0
11:20:47: Device Size C_SIZE                            :0xedc8
11:20:47: Reserv3                                       :0x0
11:20:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:47: Reserv4                                       :0x0
11:20:47: Write Speed Factor R2W_FACTOR                 :0x2
11:20:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:47: FILE_FORMAT_GRP                               :0x0
11:20:47: COPY flag                                     :0x1
11:20:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:47: File_Format                                   :0x0
11:20:47: CRC                                           :0x0
11:20:47: ####CSD Registe Values####  

11:20:47: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:47: ProductSerialNumber = 0x23482900
11:20:47: CardMaximumLBA      = 0x3b72400
11:20:47: CardCapacity        = 32G
11:20:47: Is card secure      = 0
11:20:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:47: [DVTCommonLib]###  LogicalWrite called
11:20:49: [ WriteLba(0xE4C1DB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1448 ] 
11:20:49: [DVTCommonLib]###  LogicalWrite Completed 

11:20:49: [DVTCommonLib]###  LogicalRead called
11:20:51: [ ReadLba(0xE4C1DB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1449 ] 
11:20:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 141 times 
11:20:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8D, 0x0) , Command count = 1450 ] 
11:20:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:51: [DVTCommonLib]### Card response as High Capacity from card
11:20:51: [DVTCommonLib]### VOLA from card : 0x1
11:20:51: [DVTCommonLib]### CMD Pattern from card : 0x8D
11:20:51: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 1451 ] 
11:20:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFA80>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 1452 ] 
11:20:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1453 ] 
11:20:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:51: [ SetBusWidth(0x4) , Command count = 1454 ] 
11:20:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:51: ####CSD Registe 2.0 Values####
11:20:51: CSD_STRUCTURE                                 :0x1
11:20:51: Reserv1                                       :0x0
11:20:51: Time Access 1 TAAC                            :0xe
11:20:51: Time Access 2 NSAC*100                        :0x0
11:20:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:51: Card Command Classess CCC                     :0x5b5
11:20:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:51: DSR(driver stage register)  DSR_IMP           :0x0
11:20:51: Reserv2                                       :0x0
11:20:51: Device Size C_SIZE                            :0xedc8
11:20:51: Reserv3                                       :0x0
11:20:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:51: Reserv4                                       :0x0
11:20:51: Write Speed Factor R2W_FACTOR                 :0x2
11:20:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:51: FILE_FORMAT_GRP                               :0x0
11:20:51: COPY flag                                     :0x1
11:20:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:51: File_Format                                   :0x0
11:20:51: CRC                                           :0x0
11:20:51: ####CSD Registe Values####  

11:20:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:51: ProductSerialNumber = 0x23482900
11:20:51: CardMaximumLBA      = 0x3b72400
11:20:51: CardCapacity        = 32G
11:20:51: Is card secure      = 0
11:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:51: [DVTCommonLib]###  LogicalWrite called
11:20:53: [ WriteLba(0x2370F0D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1455 ] 
11:20:53: [DVTCommonLib]###  LogicalWrite Completed 

11:20:53: [DVTCommonLib]###  LogicalRead called
11:20:54: [ ReadLba(0x2370F0D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1456 ] 
11:20:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:54: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 142 times 
11:20:54: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8E, 0x0) , Command count = 1457 ] 
11:20:54: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:54: [DVTCommonLib]### Card response as High Capacity from card
11:20:54: [DVTCommonLib]### VOLA from card : 0x1
11:20:54: [DVTCommonLib]### CMD Pattern from card : 0x8E
11:20:54: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 1458 ] 
11:20:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFA20>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 1459 ] 
11:20:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1460 ] 
11:20:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:55: [ SetBusWidth(0x4) , Command count = 1461 ] 
11:20:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:55: ####CSD Registe 2.0 Values####
11:20:55: CSD_STRUCTURE                                 :0x1
11:20:55: Reserv1                                       :0x0
11:20:55: Time Access 1 TAAC                            :0xe
11:20:55: Time Access 2 NSAC*100                        :0x0
11:20:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:55: Card Command Classess CCC                     :0x5b5
11:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:55: DSR(driver stage register)  DSR_IMP           :0x0
11:20:55: Reserv2                                       :0x0
11:20:55: Device Size C_SIZE                            :0xedc8
11:20:55: Reserv3                                       :0x0
11:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:55: Reserv4                                       :0x0
11:20:55: Write Speed Factor R2W_FACTOR                 :0x2
11:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:55: FILE_FORMAT_GRP                               :0x0
11:20:55: COPY flag                                     :0x1
11:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:55: File_Format                                   :0x0
11:20:55: CRC                                           :0x0
11:20:55: ####CSD Registe Values####  

11:20:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:55: ProductSerialNumber = 0x23482900
11:20:55: CardMaximumLBA      = 0x3b72400
11:20:55: CardCapacity        = 32G
11:20:55: Is card secure      = 0
11:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:55: [DVTCommonLib]###  LogicalWrite called
11:20:56: [ WriteLba(0x3B37F9E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1462 ] 
11:20:56: [DVTCommonLib]###  LogicalWrite Completed 

11:20:56: [DVTCommonLib]###  LogicalRead called
11:20:58: [ ReadLba(0x3B37F9E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1463 ] 
11:20:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:20:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:20:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 143 times 
11:20:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:20:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8F, 0x0) , Command count = 1464 ] 
11:20:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:20:58: [DVTCommonLib]### Card response as High Capacity from card
11:20:58: [DVTCommonLib]### VOLA from card : 0x1
11:20:58: [DVTCommonLib]### CMD Pattern from card : 0x8F
11:20:58: [DVTCommonLib]### Reserved bits from card : 0x0
11:20:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 1465 ] 
11:20:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFC60>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 1466 ] 
11:20:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:20:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1467 ] 
11:20:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:58: [ SetBusWidth(0x4) , Command count = 1468 ] 
11:20:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:20:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:20:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:58: ####CSD Registe 2.0 Values####
11:20:58: CSD_STRUCTURE                                 :0x1
11:20:58: Reserv1                                       :0x0
11:20:58: Time Access 1 TAAC                            :0xe
11:20:58: Time Access 2 NSAC*100                        :0x0
11:20:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:58: Card Command Classess CCC                     :0x5b5
11:20:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:58: DSR(driver stage register)  DSR_IMP           :0x0
11:20:58: Reserv2                                       :0x0
11:20:58: Device Size C_SIZE                            :0xedc8
11:20:58: Reserv3                                       :0x0
11:20:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:58: Reserv4                                       :0x0
11:20:58: Write Speed Factor R2W_FACTOR                 :0x2
11:20:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:58: FILE_FORMAT_GRP                               :0x0
11:20:58: COPY flag                                     :0x1
11:20:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:58: File_Format                                   :0x0
11:20:58: CRC                                           :0x0
11:20:58: ####CSD Registe Values####  

11:20:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:20:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:20:58: ProductSerialNumber = 0x23482900
11:20:58: CardMaximumLBA      = 0x3b72400
11:20:58: CardCapacity        = 32G
11:20:58: Is card secure      = 0
11:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:20:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:20:58: [DVTCommonLib]###  LogicalWrite called
11:21:00: [ WriteLba(0x1552D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1469 ] 
11:21:00: [DVTCommonLib]###  LogicalWrite Completed 

11:21:00: [DVTCommonLib]###  LogicalRead called
11:21:01: [ ReadLba(0x1552D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1470 ] 
11:21:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:01: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 144 times 
11:21:01: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x90, 0x0) , Command count = 1471 ] 
11:21:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:02: [DVTCommonLib]### Card response as High Capacity from card
11:21:02: [DVTCommonLib]### VOLA from card : 0x1
11:21:02: [DVTCommonLib]### CMD Pattern from card : 0x90
11:21:02: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 1472 ] 
11:21:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065061E0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 1473 ] 
11:21:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1474 ] 
11:21:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:02: [ SetBusWidth(0x4) , Command count = 1475 ] 
11:21:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:02: ####CSD Registe 2.0 Values####
11:21:02: CSD_STRUCTURE                                 :0x1
11:21:02: Reserv1                                       :0x0
11:21:02: Time Access 1 TAAC                            :0xe
11:21:02: Time Access 2 NSAC*100                        :0x0
11:21:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:02: Card Command Classess CCC                     :0x5b5
11:21:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:02: DSR(driver stage register)  DSR_IMP           :0x0
11:21:02: Reserv2                                       :0x0
11:21:02: Device Size C_SIZE                            :0xedc8
11:21:02: Reserv3                                       :0x0
11:21:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:02: Reserv4                                       :0x0
11:21:02: Write Speed Factor R2W_FACTOR                 :0x2
11:21:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:02: FILE_FORMAT_GRP                               :0x0
11:21:02: COPY flag                                     :0x1
11:21:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:02: File_Format                                   :0x0
11:21:02: CRC                                           :0x0
11:21:02: ####CSD Registe Values####  

11:21:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:02: ProductSerialNumber = 0x23482900
11:21:02: CardMaximumLBA      = 0x3b72400
11:21:02: CardCapacity        = 32G
11:21:02: Is card secure      = 0
11:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:02: [DVTCommonLib]###  LogicalWrite called
11:21:03: [ WriteLba(0x1F5EB56, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1476 ] 
11:21:03: [DVTCommonLib]###  LogicalWrite Completed 

11:21:03: [DVTCommonLib]###  LogicalRead called
11:21:05: [ ReadLba(0x1F5EB56, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1477 ] 
11:21:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 145 times 
11:21:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x91, 0x0) , Command count = 1478 ] 
11:21:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:05: [DVTCommonLib]### Card response as High Capacity from card
11:21:05: [DVTCommonLib]### VOLA from card : 0x1
11:21:05: [DVTCommonLib]### CMD Pattern from card : 0x91
11:21:05: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 1479 ] 
11:21:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506600>, <py_sfcl.CommandDataDefinition object at 0x065063C0>) , Command count = 1480 ] 
11:21:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1481 ] 
11:21:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:05: [ SetBusWidth(0x4) , Command count = 1482 ] 
11:21:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:05: ####CSD Registe 2.0 Values####
11:21:05: CSD_STRUCTURE                                 :0x1
11:21:05: Reserv1                                       :0x0
11:21:05: Time Access 1 TAAC                            :0xe
11:21:05: Time Access 2 NSAC*100                        :0x0
11:21:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:05: Card Command Classess CCC                     :0x5b5
11:21:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:05: DSR(driver stage register)  DSR_IMP           :0x0
11:21:05: Reserv2                                       :0x0
11:21:05: Device Size C_SIZE                            :0xedc8
11:21:05: Reserv3                                       :0x0
11:21:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:05: Reserv4                                       :0x0
11:21:05: Write Speed Factor R2W_FACTOR                 :0x2
11:21:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:05: FILE_FORMAT_GRP                               :0x0
11:21:05: COPY flag                                     :0x1
11:21:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:05: File_Format                                   :0x0
11:21:05: CRC                                           :0x0
11:21:05: ####CSD Registe Values####  

11:21:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:05: ProductSerialNumber = 0x23482900
11:21:05: CardMaximumLBA      = 0x3b72400
11:21:05: CardCapacity        = 32G
11:21:05: Is card secure      = 0
11:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:05: [DVTCommonLib]###  LogicalWrite called
11:21:07: [ WriteLba(0xA98D2B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1483 ] 
11:21:07: [DVTCommonLib]###  LogicalWrite Completed 

11:21:07: [DVTCommonLib]###  LogicalRead called
11:21:08: [ ReadLba(0xA98D2B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1484 ] 
11:21:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 146 times 
11:21:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x92, 0x0) , Command count = 1485 ] 
11:21:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:09: [DVTCommonLib]### Card response as High Capacity from card
11:21:09: [DVTCommonLib]### VOLA from card : 0x1
11:21:09: [DVTCommonLib]### CMD Pattern from card : 0x92
11:21:09: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 1486 ] 
11:21:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506720>, <py_sfcl.CommandDataDefinition object at 0x06506900>) , Command count = 1487 ] 
11:21:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1488 ] 
11:21:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:09: [ SetBusWidth(0x4) , Command count = 1489 ] 
11:21:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:09: ####CSD Registe 2.0 Values####
11:21:09: CSD_STRUCTURE                                 :0x1
11:21:09: Reserv1                                       :0x0
11:21:09: Time Access 1 TAAC                            :0xe
11:21:09: Time Access 2 NSAC*100                        :0x0
11:21:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:09: Card Command Classess CCC                     :0x5b5
11:21:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:09: DSR(driver stage register)  DSR_IMP           :0x0
11:21:09: Reserv2                                       :0x0
11:21:09: Device Size C_SIZE                            :0xedc8
11:21:09: Reserv3                                       :0x0
11:21:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:09: Reserv4                                       :0x0
11:21:09: Write Speed Factor R2W_FACTOR                 :0x2
11:21:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:09: FILE_FORMAT_GRP                               :0x0
11:21:09: COPY flag                                     :0x1
11:21:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:09: File_Format                                   :0x0
11:21:09: CRC                                           :0x0
11:21:09: ####CSD Registe Values####  

11:21:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:09: ProductSerialNumber = 0x23482900
11:21:09: CardMaximumLBA      = 0x3b72400
11:21:09: CardCapacity        = 32G
11:21:09: Is card secure      = 0
11:21:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:09: [DVTCommonLib]###  LogicalWrite called
11:21:10: [ WriteLba(0x36BBCE4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1490 ] 
11:21:10: [DVTCommonLib]###  LogicalWrite Completed 

11:21:10: [DVTCommonLib]###  LogicalRead called
11:21:12: [ ReadLba(0x36BBCE4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1491 ] 
11:21:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 147 times 
11:21:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x93, 0x0) , Command count = 1492 ] 
11:21:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:12: [DVTCommonLib]### Card response as High Capacity from card
11:21:12: [DVTCommonLib]### VOLA from card : 0x1
11:21:12: [DVTCommonLib]### CMD Pattern from card : 0x93
11:21:12: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 1493 ] 
11:21:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506AE0>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 1494 ] 
11:21:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1495 ] 
11:21:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:12: [ SetBusWidth(0x4) , Command count = 1496 ] 
11:21:12: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:12: ####CSD Registe 2.0 Values####
11:21:12: CSD_STRUCTURE                                 :0x1
11:21:12: Reserv1                                       :0x0
11:21:12: Time Access 1 TAAC                            :0xe
11:21:12: Time Access 2 NSAC*100                        :0x0
11:21:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:12: Card Command Classess CCC                     :0x5b5
11:21:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:12: DSR(driver stage register)  DSR_IMP           :0x0
11:21:12: Reserv2                                       :0x0
11:21:12: Device Size C_SIZE                            :0xedc8
11:21:12: Reserv3                                       :0x0
11:21:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:12: Reserv4                                       :0x0
11:21:12: Write Speed Factor R2W_FACTOR                 :0x2
11:21:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:12: FILE_FORMAT_GRP                               :0x0
11:21:12: COPY flag                                     :0x1
11:21:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:12: File_Format                                   :0x0
11:21:12: CRC                                           :0x0
11:21:12: ####CSD Registe Values####  

11:21:12: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:12: ProductSerialNumber = 0x23482900
11:21:12: CardMaximumLBA      = 0x3b72400
11:21:12: CardCapacity        = 32G
11:21:12: Is card secure      = 0
11:21:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:12: [DVTCommonLib]###  LogicalWrite called
11:21:14: [ WriteLba(0x1ED24CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1497 ] 
11:21:14: [DVTCommonLib]###  LogicalWrite Completed 

11:21:14: [DVTCommonLib]###  LogicalRead called
11:21:16: [ ReadLba(0x1ED24CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1498 ] 
11:21:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 148 times 
11:21:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x94, 0x0) , Command count = 1499 ] 
11:21:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:16: [DVTCommonLib]### Card response as High Capacity from card
11:21:16: [DVTCommonLib]### VOLA from card : 0x1
11:21:16: [DVTCommonLib]### CMD Pattern from card : 0x94
11:21:16: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x06508420>) , Command count = 1500 ] 
11:21:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB300>, <py_sfcl.CommandDataDefinition object at 0x06508270>) , Command count = 1501 ] 
11:21:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1502 ] 
11:21:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:16: [ SetBusWidth(0x4) , Command count = 1503 ] 
11:21:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:16: ####CSD Registe 2.0 Values####
11:21:16: CSD_STRUCTURE                                 :0x1
11:21:16: Reserv1                                       :0x0
11:21:16: Time Access 1 TAAC                            :0xe
11:21:16: Time Access 2 NSAC*100                        :0x0
11:21:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:16: Card Command Classess CCC                     :0x5b5
11:21:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:16: DSR(driver stage register)  DSR_IMP           :0x0
11:21:16: Reserv2                                       :0x0
11:21:16: Device Size C_SIZE                            :0xedc8
11:21:16: Reserv3                                       :0x0
11:21:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:16: Reserv4                                       :0x0
11:21:16: Write Speed Factor R2W_FACTOR                 :0x2
11:21:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:16: FILE_FORMAT_GRP                               :0x0
11:21:16: COPY flag                                     :0x1
11:21:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:16: File_Format                                   :0x0
11:21:16: CRC                                           :0x0
11:21:16: ####CSD Registe Values####  

11:21:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:16: ProductSerialNumber = 0x23482900
11:21:16: CardMaximumLBA      = 0x3b72400
11:21:16: CardCapacity        = 32G
11:21:16: Is card secure      = 0
11:21:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:16: [DVTCommonLib]###  LogicalWrite called
11:21:18: [ WriteLba(0x2BA3DE2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1504 ] 
11:21:18: [DVTCommonLib]###  LogicalWrite Completed 

11:21:18: [DVTCommonLib]###  LogicalRead called
11:21:19: [ ReadLba(0x2BA3DE2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1505 ] 
11:21:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 149 times 
11:21:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x95, 0x0) , Command count = 1506 ] 
11:21:19: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:19: [DVTCommonLib]### Card response as High Capacity from card
11:21:19: [DVTCommonLib]### VOLA from card : 0x1
11:21:19: [DVTCommonLib]### CMD Pattern from card : 0x95
11:21:19: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 1507 ] 
11:21:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508300>, <py_sfcl.CommandDataDefinition object at 0x06508510>) , Command count = 1508 ] 
11:21:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1509 ] 
11:21:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:19: [ SetBusWidth(0x4) , Command count = 1510 ] 
11:21:19: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:19: ####CSD Registe 2.0 Values####
11:21:19: CSD_STRUCTURE                                 :0x1
11:21:19: Reserv1                                       :0x0
11:21:19: Time Access 1 TAAC                            :0xe
11:21:19: Time Access 2 NSAC*100                        :0x0
11:21:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:19: Card Command Classess CCC                     :0x5b5
11:21:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:19: DSR(driver stage register)  DSR_IMP           :0x0
11:21:19: Reserv2                                       :0x0
11:21:19: Device Size C_SIZE                            :0xedc8
11:21:19: Reserv3                                       :0x0
11:21:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:19: Reserv4                                       :0x0
11:21:19: Write Speed Factor R2W_FACTOR                 :0x2
11:21:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:19: FILE_FORMAT_GRP                               :0x0
11:21:19: COPY flag                                     :0x1
11:21:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:19: File_Format                                   :0x0
11:21:19: CRC                                           :0x0
11:21:19: ####CSD Registe Values####  

11:21:19: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:20: ProductSerialNumber = 0x23482900
11:21:20: CardMaximumLBA      = 0x3b72400
11:21:20: CardCapacity        = 32G
11:21:20: Is card secure      = 0
11:21:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:20: [DVTCommonLib]###  LogicalWrite called
11:21:21: [ WriteLba(0x24331C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1511 ] 
11:21:21: [DVTCommonLib]###  LogicalWrite Completed 

11:21:21: [DVTCommonLib]###  LogicalRead called
11:21:23: [ ReadLba(0x24331C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1512 ] 
11:21:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 150 times 
11:21:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x96, 0x0) , Command count = 1513 ] 
11:21:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:23: [DVTCommonLib]### Card response as High Capacity from card
11:21:23: [DVTCommonLib]### VOLA from card : 0x1
11:21:23: [DVTCommonLib]### CMD Pattern from card : 0x96
11:21:23: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 1514 ] 
11:21:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065068A0>, <py_sfcl.CommandDataDefinition object at 0x065087E0>) , Command count = 1515 ] 
11:21:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1516 ] 
11:21:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:23: [ SetBusWidth(0x4) , Command count = 1517 ] 
11:21:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:23: ####CSD Registe 2.0 Values####
11:21:23: CSD_STRUCTURE                                 :0x1
11:21:23: Reserv1                                       :0x0
11:21:23: Time Access 1 TAAC                            :0xe
11:21:23: Time Access 2 NSAC*100                        :0x0
11:21:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:23: Card Command Classess CCC                     :0x5b5
11:21:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:23: DSR(driver stage register)  DSR_IMP           :0x0
11:21:23: Reserv2                                       :0x0
11:21:23: Device Size C_SIZE                            :0xedc8
11:21:23: Reserv3                                       :0x0
11:21:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:23: Reserv4                                       :0x0
11:21:23: Write Speed Factor R2W_FACTOR                 :0x2
11:21:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:23: FILE_FORMAT_GRP                               :0x0
11:21:23: COPY flag                                     :0x1
11:21:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:23: File_Format                                   :0x0
11:21:23: CRC                                           :0x0
11:21:23: ####CSD Registe Values####  

11:21:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:23: ProductSerialNumber = 0x23482900
11:21:23: CardMaximumLBA      = 0x3b72400
11:21:23: CardCapacity        = 32G
11:21:23: Is card secure      = 0
11:21:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:23: [DVTCommonLib]###  LogicalWrite called
11:21:25: [ WriteLba(0x1B890FE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1518 ] 
11:21:25: [DVTCommonLib]###  LogicalWrite Completed 

11:21:25: [DVTCommonLib]###  LogicalRead called
11:21:26: [ ReadLba(0x1B890FE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1519 ] 
11:21:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 151 times 
11:21:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x97, 0x0) , Command count = 1520 ] 
11:21:26: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:26: [DVTCommonLib]### Card response as High Capacity from card
11:21:26: [DVTCommonLib]### VOLA from card : 0x1
11:21:26: [DVTCommonLib]### CMD Pattern from card : 0x97
11:21:26: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 1521 ] 
11:21:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB3C0>, <py_sfcl.CommandDataDefinition object at 0x06508690>) , Command count = 1522 ] 
11:21:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1523 ] 
11:21:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:27: [ SetBusWidth(0x4) , Command count = 1524 ] 
11:21:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:27: ####CSD Registe 2.0 Values####
11:21:27: CSD_STRUCTURE                                 :0x1
11:21:27: Reserv1                                       :0x0
11:21:27: Time Access 1 TAAC                            :0xe
11:21:27: Time Access 2 NSAC*100                        :0x0
11:21:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:27: Card Command Classess CCC                     :0x5b5
11:21:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:27: DSR(driver stage register)  DSR_IMP           :0x0
11:21:27: Reserv2                                       :0x0
11:21:27: Device Size C_SIZE                            :0xedc8
11:21:27: Reserv3                                       :0x0
11:21:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:27: Reserv4                                       :0x0
11:21:27: Write Speed Factor R2W_FACTOR                 :0x2
11:21:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:27: FILE_FORMAT_GRP                               :0x0
11:21:27: COPY flag                                     :0x1
11:21:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:27: File_Format                                   :0x0
11:21:27: CRC                                           :0x0
11:21:27: ####CSD Registe Values####  

11:21:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:27: ProductSerialNumber = 0x23482900
11:21:27: CardMaximumLBA      = 0x3b72400
11:21:27: CardCapacity        = 32G
11:21:27: Is card secure      = 0
11:21:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:27: [DVTCommonLib]###  LogicalWrite called
11:21:28: [ WriteLba(0x1DB5F5C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1525 ] 
11:21:28: [DVTCommonLib]###  LogicalWrite Completed 

11:21:28: [DVTCommonLib]###  LogicalRead called
11:21:30: [ ReadLba(0x1DB5F5C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1526 ] 
11:21:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 152 times 
11:21:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x98, 0x0) , Command count = 1527 ] 
11:21:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:30: [DVTCommonLib]### Card response as High Capacity from card
11:21:30: [DVTCommonLib]### VOLA from card : 0x1
11:21:30: [DVTCommonLib]### CMD Pattern from card : 0x98
11:21:30: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 1528 ] 
11:21:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6120>, <py_sfcl.CommandDataDefinition object at 0x065084E0>) , Command count = 1529 ] 
11:21:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1530 ] 
11:21:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:30: [ SetBusWidth(0x4) , Command count = 1531 ] 
11:21:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:30: ####CSD Registe 2.0 Values####
11:21:30: CSD_STRUCTURE                                 :0x1
11:21:30: Reserv1                                       :0x0
11:21:30: Time Access 1 TAAC                            :0xe
11:21:30: Time Access 2 NSAC*100                        :0x0
11:21:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:30: Card Command Classess CCC                     :0x5b5
11:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:30: DSR(driver stage register)  DSR_IMP           :0x0
11:21:30: Reserv2                                       :0x0
11:21:30: Device Size C_SIZE                            :0xedc8
11:21:30: Reserv3                                       :0x0
11:21:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:30: Reserv4                                       :0x0
11:21:30: Write Speed Factor R2W_FACTOR                 :0x2
11:21:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:30: FILE_FORMAT_GRP                               :0x0
11:21:30: COPY flag                                     :0x1
11:21:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:30: File_Format                                   :0x0
11:21:30: CRC                                           :0x0
11:21:30: ####CSD Registe Values####  

11:21:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:30: ProductSerialNumber = 0x23482900
11:21:30: CardMaximumLBA      = 0x3b72400
11:21:30: CardCapacity        = 32G
11:21:30: Is card secure      = 0
11:21:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:30: [DVTCommonLib]###  LogicalWrite called
11:21:32: [ WriteLba(0x12C1FEE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1532 ] 
11:21:32: [DVTCommonLib]###  LogicalWrite Completed 

11:21:32: [DVTCommonLib]###  LogicalRead called
11:21:33: [ ReadLba(0x12C1FEE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1533 ] 
11:21:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 153 times 
11:21:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x99, 0x0) , Command count = 1534 ] 
11:21:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:34: [DVTCommonLib]### Card response as High Capacity from card
11:21:34: [DVTCommonLib]### VOLA from card : 0x1
11:21:34: [DVTCommonLib]### CMD Pattern from card : 0x99
11:21:34: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 1535 ] 
11:21:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508E10>, <py_sfcl.CommandDataDefinition object at 0x064DF240>) , Command count = 1536 ] 
11:21:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1537 ] 
11:21:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:34: [ SetBusWidth(0x4) , Command count = 1538 ] 
11:21:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:34: ####CSD Registe 2.0 Values####
11:21:34: CSD_STRUCTURE                                 :0x1
11:21:34: Reserv1                                       :0x0
11:21:34: Time Access 1 TAAC                            :0xe
11:21:34: Time Access 2 NSAC*100                        :0x0
11:21:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:34: Card Command Classess CCC                     :0x5b5
11:21:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:34: DSR(driver stage register)  DSR_IMP           :0x0
11:21:34: Reserv2                                       :0x0
11:21:34: Device Size C_SIZE                            :0xedc8
11:21:34: Reserv3                                       :0x0
11:21:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:34: Reserv4                                       :0x0
11:21:34: Write Speed Factor R2W_FACTOR                 :0x2
11:21:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:34: FILE_FORMAT_GRP                               :0x0
11:21:34: COPY flag                                     :0x1
11:21:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:34: File_Format                                   :0x0
11:21:34: CRC                                           :0x0
11:21:34: ####CSD Registe Values####  

11:21:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:34: ProductSerialNumber = 0x23482900
11:21:34: CardMaximumLBA      = 0x3b72400
11:21:34: CardCapacity        = 32G
11:21:34: Is card secure      = 0
11:21:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:34: [DVTCommonLib]###  LogicalWrite called
11:21:35: [ WriteLba(0xF06E9E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1539 ] 
11:21:35: [DVTCommonLib]###  LogicalWrite Completed 

11:21:35: [DVTCommonLib]###  LogicalRead called
11:21:37: [ ReadLba(0xF06E9E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1540 ] 
11:21:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 154 times 
11:21:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9A, 0x0) , Command count = 1541 ] 
11:21:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:37: [DVTCommonLib]### Card response as High Capacity from card
11:21:37: [DVTCommonLib]### VOLA from card : 0x1
11:21:37: [DVTCommonLib]### CMD Pattern from card : 0x9A
11:21:37: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x05DD7A80>) , Command count = 1542 ] 
11:21:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508F60>, <py_sfcl.CommandDataDefinition object at 0x064DF600>) , Command count = 1543 ] 
11:21:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1544 ] 
11:21:37: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:37: [ SetBusWidth(0x4) , Command count = 1545 ] 
11:21:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:37: ####CSD Registe 2.0 Values####
11:21:37: CSD_STRUCTURE                                 :0x1
11:21:37: Reserv1                                       :0x0
11:21:37: Time Access 1 TAAC                            :0xe
11:21:37: Time Access 2 NSAC*100                        :0x0
11:21:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:37: Card Command Classess CCC                     :0x5b5
11:21:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:37: DSR(driver stage register)  DSR_IMP           :0x0
11:21:37: Reserv2                                       :0x0
11:21:37: Device Size C_SIZE                            :0xedc8
11:21:37: Reserv3                                       :0x0
11:21:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:37: Reserv4                                       :0x0
11:21:37: Write Speed Factor R2W_FACTOR                 :0x2
11:21:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:37: FILE_FORMAT_GRP                               :0x0
11:21:37: COPY flag                                     :0x1
11:21:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:37: File_Format                                   :0x0
11:21:37: CRC                                           :0x0
11:21:37: ####CSD Registe Values####  

11:21:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:37: ProductSerialNumber = 0x23482900
11:21:37: CardMaximumLBA      = 0x3b72400
11:21:37: CardCapacity        = 32G
11:21:37: Is card secure      = 0
11:21:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:37: [DVTCommonLib]###  LogicalWrite called
11:21:39: [ WriteLba(0x29CC79A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1546 ] 
11:21:39: [DVTCommonLib]###  LogicalWrite Completed 

11:21:39: [DVTCommonLib]###  LogicalRead called
11:21:41: [ ReadLba(0x29CC79A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1547 ] 
11:21:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 155 times 
11:21:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9B, 0x0) , Command count = 1548 ] 
11:21:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:41: [DVTCommonLib]### Card response as High Capacity from card
11:21:41: [DVTCommonLib]### VOLA from card : 0x1
11:21:41: [DVTCommonLib]### CMD Pattern from card : 0x9B
11:21:41: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508E70>) , Command count = 1549 ] 
11:21:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE61B0>, <py_sfcl.CommandDataDefinition object at 0x06508E40>) , Command count = 1550 ] 
11:21:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1551 ] 
11:21:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:41: [ SetBusWidth(0x4) , Command count = 1552 ] 
11:21:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:41: ####CSD Registe 2.0 Values####
11:21:41: CSD_STRUCTURE                                 :0x1
11:21:41: Reserv1                                       :0x0
11:21:41: Time Access 1 TAAC                            :0xe
11:21:41: Time Access 2 NSAC*100                        :0x0
11:21:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:41: Card Command Classess CCC                     :0x5b5
11:21:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:41: DSR(driver stage register)  DSR_IMP           :0x0
11:21:41: Reserv2                                       :0x0
11:21:41: Device Size C_SIZE                            :0xedc8
11:21:41: Reserv3                                       :0x0
11:21:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:41: Reserv4                                       :0x0
11:21:41: Write Speed Factor R2W_FACTOR                 :0x2
11:21:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:41: FILE_FORMAT_GRP                               :0x0
11:21:41: COPY flag                                     :0x1
11:21:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:41: File_Format                                   :0x0
11:21:41: CRC                                           :0x0
11:21:41: ####CSD Registe Values####  

11:21:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:41: ProductSerialNumber = 0x23482900
11:21:41: CardMaximumLBA      = 0x3b72400
11:21:41: CardCapacity        = 32G
11:21:41: Is card secure      = 0
11:21:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:41: [DVTCommonLib]###  LogicalWrite called
11:21:43: [ WriteLba(0x16D0326, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1553 ] 
11:21:43: [DVTCommonLib]###  LogicalWrite Completed 

11:21:43: [DVTCommonLib]###  LogicalRead called
11:21:44: [ ReadLba(0x16D0326, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1554 ] 
11:21:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 156 times 
11:21:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9C, 0x0) , Command count = 1555 ] 
11:21:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:44: [DVTCommonLib]### Card response as High Capacity from card
11:21:44: [DVTCommonLib]### VOLA from card : 0x1
11:21:44: [DVTCommonLib]### CMD Pattern from card : 0x9C
11:21:44: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x05DFAC90>) , Command count = 1556 ] 
11:21:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD79F0>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 1557 ] 
11:21:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1558 ] 
11:21:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:44: [ SetBusWidth(0x4) , Command count = 1559 ] 
11:21:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:44: ####CSD Registe 2.0 Values####
11:21:44: CSD_STRUCTURE                                 :0x1
11:21:44: Reserv1                                       :0x0
11:21:44: Time Access 1 TAAC                            :0xe
11:21:44: Time Access 2 NSAC*100                        :0x0
11:21:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:44: Card Command Classess CCC                     :0x5b5
11:21:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:44: DSR(driver stage register)  DSR_IMP           :0x0
11:21:44: Reserv2                                       :0x0
11:21:44: Device Size C_SIZE                            :0xedc8
11:21:44: Reserv3                                       :0x0
11:21:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:44: Reserv4                                       :0x0
11:21:44: Write Speed Factor R2W_FACTOR                 :0x2
11:21:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:44: FILE_FORMAT_GRP                               :0x0
11:21:44: COPY flag                                     :0x1
11:21:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:44: File_Format                                   :0x0
11:21:44: CRC                                           :0x0
11:21:44: ####CSD Registe Values####  

11:21:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:44: ProductSerialNumber = 0x23482900
11:21:44: CardMaximumLBA      = 0x3b72400
11:21:44: CardCapacity        = 32G
11:21:44: Is card secure      = 0
11:21:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:44: [DVTCommonLib]###  LogicalWrite called
11:21:46: [ WriteLba(0x3B19839, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1560 ] 
11:21:46: [DVTCommonLib]###  LogicalWrite Completed 

11:21:46: [DVTCommonLib]###  LogicalRead called
11:21:48: [ ReadLba(0x3B19839, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1561 ] 
11:21:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 157 times 
11:21:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9D, 0x0) , Command count = 1562 ] 
11:21:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:48: [DVTCommonLib]### Card response as High Capacity from card
11:21:48: [DVTCommonLib]### VOLA from card : 0x1
11:21:48: [DVTCommonLib]### CMD Pattern from card : 0x9D
11:21:48: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 1563 ] 
11:21:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E5D0>, <py_sfcl.CommandDataDefinition object at 0x06508FC0>) , Command count = 1564 ] 
11:21:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1565 ] 
11:21:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:48: [ SetBusWidth(0x4) , Command count = 1566 ] 
11:21:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:48: ####CSD Registe 2.0 Values####
11:21:48: CSD_STRUCTURE                                 :0x1
11:21:48: Reserv1                                       :0x0
11:21:48: Time Access 1 TAAC                            :0xe
11:21:48: Time Access 2 NSAC*100                        :0x0
11:21:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:48: Card Command Classess CCC                     :0x5b5
11:21:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:48: DSR(driver stage register)  DSR_IMP           :0x0
11:21:48: Reserv2                                       :0x0
11:21:48: Device Size C_SIZE                            :0xedc8
11:21:48: Reserv3                                       :0x0
11:21:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:48: Reserv4                                       :0x0
11:21:48: Write Speed Factor R2W_FACTOR                 :0x2
11:21:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:48: FILE_FORMAT_GRP                               :0x0
11:21:48: COPY flag                                     :0x1
11:21:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:48: File_Format                                   :0x0
11:21:48: CRC                                           :0x0
11:21:48: ####CSD Registe Values####  

11:21:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:48: ProductSerialNumber = 0x23482900
11:21:48: CardMaximumLBA      = 0x3b72400
11:21:48: CardCapacity        = 32G
11:21:48: Is card secure      = 0
11:21:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:48: [DVTCommonLib]###  LogicalWrite called
11:21:50: [ WriteLba(0x36FBB55, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1567 ] 
11:21:50: [DVTCommonLib]###  LogicalWrite Completed 

11:21:50: [DVTCommonLib]###  LogicalRead called
11:21:51: [ ReadLba(0x36FBB55, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1568 ] 
11:21:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 158 times 
11:21:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9E, 0x0) , Command count = 1569 ] 
11:21:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:51: [DVTCommonLib]### Card response as High Capacity from card
11:21:51: [DVTCommonLib]### VOLA from card : 0x1
11:21:51: [DVTCommonLib]### CMD Pattern from card : 0x9E
11:21:51: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508BD0>, <py_sfcl.CommandDataDefinition object at 0x06488990>) , Command count = 1570 ] 
11:21:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAC30>, <py_sfcl.CommandDataDefinition object at 0x06488210>) , Command count = 1571 ] 
11:21:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1572 ] 
11:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:52: [ SetBusWidth(0x4) , Command count = 1573 ] 
11:21:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:52: ####CSD Registe 2.0 Values####
11:21:52: CSD_STRUCTURE                                 :0x1
11:21:52: Reserv1                                       :0x0
11:21:52: Time Access 1 TAAC                            :0xe
11:21:52: Time Access 2 NSAC*100                        :0x0
11:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:52: Card Command Classess CCC                     :0x5b5
11:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:52: DSR(driver stage register)  DSR_IMP           :0x0
11:21:52: Reserv2                                       :0x0
11:21:52: Device Size C_SIZE                            :0xedc8
11:21:52: Reserv3                                       :0x0
11:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:52: Reserv4                                       :0x0
11:21:52: Write Speed Factor R2W_FACTOR                 :0x2
11:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:52: FILE_FORMAT_GRP                               :0x0
11:21:52: COPY flag                                     :0x1
11:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:52: File_Format                                   :0x0
11:21:52: CRC                                           :0x0
11:21:52: ####CSD Registe Values####  

11:21:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:52: ProductSerialNumber = 0x23482900
11:21:52: CardMaximumLBA      = 0x3b72400
11:21:52: CardCapacity        = 32G
11:21:52: Is card secure      = 0
11:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:52: [DVTCommonLib]###  LogicalWrite called
11:21:53: [ WriteLba(0x27B2E88, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1574 ] 
11:21:53: [DVTCommonLib]###  LogicalWrite Completed 

11:21:53: [DVTCommonLib]###  LogicalRead called
11:21:55: [ ReadLba(0x27B2E88, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1575 ] 
11:21:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 159 times 
11:21:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9F, 0x0) , Command count = 1576 ] 
11:21:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:55: [DVTCommonLib]### Card response as High Capacity from card
11:21:55: [DVTCommonLib]### VOLA from card : 0x1
11:21:55: [DVTCommonLib]### CMD Pattern from card : 0x9F
11:21:55: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 1577 ] 
11:21:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488D20>, <py_sfcl.CommandDataDefinition object at 0x06488C90>) , Command count = 1578 ] 
11:21:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1579 ] 
11:21:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:55: [ SetBusWidth(0x4) , Command count = 1580 ] 
11:21:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:55: ####CSD Registe 2.0 Values####
11:21:55: CSD_STRUCTURE                                 :0x1
11:21:55: Reserv1                                       :0x0
11:21:55: Time Access 1 TAAC                            :0xe
11:21:55: Time Access 2 NSAC*100                        :0x0
11:21:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:55: Card Command Classess CCC                     :0x5b5
11:21:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:55: DSR(driver stage register)  DSR_IMP           :0x0
11:21:55: Reserv2                                       :0x0
11:21:55: Device Size C_SIZE                            :0xedc8
11:21:55: Reserv3                                       :0x0
11:21:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:55: Reserv4                                       :0x0
11:21:55: Write Speed Factor R2W_FACTOR                 :0x2
11:21:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:55: FILE_FORMAT_GRP                               :0x0
11:21:55: COPY flag                                     :0x1
11:21:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:55: File_Format                                   :0x0
11:21:55: CRC                                           :0x0
11:21:55: ####CSD Registe Values####  

11:21:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:55: ProductSerialNumber = 0x23482900
11:21:55: CardMaximumLBA      = 0x3b72400
11:21:55: CardCapacity        = 32G
11:21:55: Is card secure      = 0
11:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:55: [DVTCommonLib]###  LogicalWrite called
11:21:57: [ WriteLba(0x10672FB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1581 ] 
11:21:57: [DVTCommonLib]###  LogicalWrite Completed 

11:21:57: [DVTCommonLib]###  LogicalRead called
11:21:58: [ ReadLba(0x10672FB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1582 ] 
11:21:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:21:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:21:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 160 times 
11:21:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:21:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA0, 0x0) , Command count = 1583 ] 
11:21:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:21:59: [DVTCommonLib]### Card response as High Capacity from card
11:21:59: [DVTCommonLib]### VOLA from card : 0x1
11:21:59: [DVTCommonLib]### CMD Pattern from card : 0xA0
11:21:59: [DVTCommonLib]### Reserved bits from card : 0x0
11:21:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 1584 ] 
11:21:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E180>, <py_sfcl.CommandDataDefinition object at 0x06488F00>) , Command count = 1585 ] 
11:21:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:21:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1586 ] 
11:21:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:59: [ SetBusWidth(0x4) , Command count = 1587 ] 
11:21:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:21:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:21:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:59: ####CSD Registe 2.0 Values####
11:21:59: CSD_STRUCTURE                                 :0x1
11:21:59: Reserv1                                       :0x0
11:21:59: Time Access 1 TAAC                            :0xe
11:21:59: Time Access 2 NSAC*100                        :0x0
11:21:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:59: Card Command Classess CCC                     :0x5b5
11:21:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:59: DSR(driver stage register)  DSR_IMP           :0x0
11:21:59: Reserv2                                       :0x0
11:21:59: Device Size C_SIZE                            :0xedc8
11:21:59: Reserv3                                       :0x0
11:21:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:59: Reserv4                                       :0x0
11:21:59: Write Speed Factor R2W_FACTOR                 :0x2
11:21:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:59: FILE_FORMAT_GRP                               :0x0
11:21:59: COPY flag                                     :0x1
11:21:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:59: File_Format                                   :0x0
11:21:59: CRC                                           :0x0
11:21:59: ####CSD Registe Values####  

11:21:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:21:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:21:59: ProductSerialNumber = 0x23482900
11:21:59: CardMaximumLBA      = 0x3b72400
11:21:59: CardCapacity        = 32G
11:21:59: Is card secure      = 0
11:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:21:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:21:59: [DVTCommonLib]###  LogicalWrite called
11:22:00: [ WriteLba(0x966715, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1588 ] 
11:22:00: [DVTCommonLib]###  LogicalWrite Completed 

11:22:00: [DVTCommonLib]###  LogicalRead called
11:22:02: [ ReadLba(0x966715, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1589 ] 
11:22:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 161 times 
11:22:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA1, 0x0) , Command count = 1590 ] 
11:22:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:02: [DVTCommonLib]### Card response as High Capacity from card
11:22:02: [DVTCommonLib]### VOLA from card : 0x1
11:22:02: [DVTCommonLib]### CMD Pattern from card : 0xA1
11:22:02: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 1591 ] 
11:22:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064881B0>, <py_sfcl.CommandDataDefinition object at 0x06488B70>) , Command count = 1592 ] 
11:22:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1593 ] 
11:22:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:02: [ SetBusWidth(0x4) , Command count = 1594 ] 
11:22:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:02: ####CSD Registe 2.0 Values####
11:22:02: CSD_STRUCTURE                                 :0x1
11:22:02: Reserv1                                       :0x0
11:22:02: Time Access 1 TAAC                            :0xe
11:22:02: Time Access 2 NSAC*100                        :0x0
11:22:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:02: Card Command Classess CCC                     :0x5b5
11:22:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:02: DSR(driver stage register)  DSR_IMP           :0x0
11:22:02: Reserv2                                       :0x0
11:22:02: Device Size C_SIZE                            :0xedc8
11:22:02: Reserv3                                       :0x0
11:22:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:02: Reserv4                                       :0x0
11:22:02: Write Speed Factor R2W_FACTOR                 :0x2
11:22:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:02: FILE_FORMAT_GRP                               :0x0
11:22:02: COPY flag                                     :0x1
11:22:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:02: File_Format                                   :0x0
11:22:02: CRC                                           :0x0
11:22:02: ####CSD Registe Values####  

11:22:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:02: ProductSerialNumber = 0x23482900
11:22:02: CardMaximumLBA      = 0x3b72400
11:22:02: CardCapacity        = 32G
11:22:02: Is card secure      = 0
11:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:02: [DVTCommonLib]###  LogicalWrite called
11:22:04: [ WriteLba(0x2F6808, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1595 ] 
11:22:04: [DVTCommonLib]###  LogicalWrite Completed 

11:22:04: [DVTCommonLib]###  LogicalRead called
11:22:05: [ ReadLba(0x2F6808, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1596 ] 
11:22:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 162 times 
11:22:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA2, 0x0) , Command count = 1597 ] 
11:22:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:06: [DVTCommonLib]### Card response as High Capacity from card
11:22:06: [DVTCommonLib]### VOLA from card : 0x1
11:22:06: [DVTCommonLib]### CMD Pattern from card : 0xA2
11:22:06: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C30>, <py_sfcl.CommandDataDefinition object at 0x064B9870>) , Command count = 1598 ] 
11:22:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB210>, <py_sfcl.CommandDataDefinition object at 0x064AB180>) , Command count = 1599 ] 
11:22:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1600 ] 
11:22:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:06: [ SetBusWidth(0x4) , Command count = 1601 ] 
11:22:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:06: ####CSD Registe 2.0 Values####
11:22:06: CSD_STRUCTURE                                 :0x1
11:22:06: Reserv1                                       :0x0
11:22:06: Time Access 1 TAAC                            :0xe
11:22:06: Time Access 2 NSAC*100                        :0x0
11:22:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:06: Card Command Classess CCC                     :0x5b5
11:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:06: DSR(driver stage register)  DSR_IMP           :0x0
11:22:06: Reserv2                                       :0x0
11:22:06: Device Size C_SIZE                            :0xedc8
11:22:06: Reserv3                                       :0x0
11:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:06: Reserv4                                       :0x0
11:22:06: Write Speed Factor R2W_FACTOR                 :0x2
11:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:06: FILE_FORMAT_GRP                               :0x0
11:22:06: COPY flag                                     :0x1
11:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:06: File_Format                                   :0x0
11:22:06: CRC                                           :0x0
11:22:06: ####CSD Registe Values####  

11:22:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:06: ProductSerialNumber = 0x23482900
11:22:06: CardMaximumLBA      = 0x3b72400
11:22:06: CardCapacity        = 32G
11:22:06: Is card secure      = 0
11:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:06: [DVTCommonLib]###  LogicalWrite called
11:22:07: [ WriteLba(0x1ECE986, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1602 ] 
11:22:07: [DVTCommonLib]###  LogicalWrite Completed 

11:22:07: [DVTCommonLib]###  LogicalRead called
11:22:09: [ ReadLba(0x1ECE986, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1603 ] 
11:22:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 163 times 
11:22:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA3, 0x0) , Command count = 1604 ] 
11:22:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:09: [DVTCommonLib]### Card response as High Capacity from card
11:22:09: [DVTCommonLib]### VOLA from card : 0x1
11:22:09: [DVTCommonLib]### CMD Pattern from card : 0xA3
11:22:09: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064882A0>, <py_sfcl.CommandDataDefinition object at 0x064B99F0>) , Command count = 1605 ] 
11:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064880F0>, <py_sfcl.CommandDataDefinition object at 0x064AB180>) , Command count = 1606 ] 
11:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1607 ] 
11:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:09: [ SetBusWidth(0x4) , Command count = 1608 ] 
11:22:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:09: ####CSD Registe 2.0 Values####
11:22:09: CSD_STRUCTURE                                 :0x1
11:22:09: Reserv1                                       :0x0
11:22:09: Time Access 1 TAAC                            :0xe
11:22:09: Time Access 2 NSAC*100                        :0x0
11:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:09: Card Command Classess CCC                     :0x5b5
11:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:09: DSR(driver stage register)  DSR_IMP           :0x0
11:22:09: Reserv2                                       :0x0
11:22:09: Device Size C_SIZE                            :0xedc8
11:22:09: Reserv3                                       :0x0
11:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:09: Reserv4                                       :0x0
11:22:09: Write Speed Factor R2W_FACTOR                 :0x2
11:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:09: FILE_FORMAT_GRP                               :0x0
11:22:09: COPY flag                                     :0x1
11:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:09: File_Format                                   :0x0
11:22:09: CRC                                           :0x0
11:22:09: ####CSD Registe Values####  

11:22:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:09: ProductSerialNumber = 0x23482900
11:22:09: CardMaximumLBA      = 0x3b72400
11:22:09: CardCapacity        = 32G
11:22:09: Is card secure      = 0
11:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:09: [DVTCommonLib]###  LogicalWrite called
11:22:11: [ WriteLba(0x2787A84, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1609 ] 
11:22:11: [DVTCommonLib]###  LogicalWrite Completed 

11:22:11: [DVTCommonLib]###  LogicalRead called
11:22:13: [ ReadLba(0x2787A84, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1610 ] 
11:22:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 164 times 
11:22:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA4, 0x0) , Command count = 1611 ] 
11:22:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:13: [DVTCommonLib]### Card response as High Capacity from card
11:22:13: [DVTCommonLib]### VOLA from card : 0x1
11:22:13: [DVTCommonLib]### CMD Pattern from card : 0xA4
11:22:13: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9E40>, <py_sfcl.CommandDataDefinition object at 0x064B9F00>) , Command count = 1612 ] 
11:22:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9B70>, <py_sfcl.CommandDataDefinition object at 0x064B9E10>) , Command count = 1613 ] 
11:22:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1614 ] 
11:22:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:13: [ SetBusWidth(0x4) , Command count = 1615 ] 
11:22:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:13: ####CSD Registe 2.0 Values####
11:22:13: CSD_STRUCTURE                                 :0x1
11:22:13: Reserv1                                       :0x0
11:22:13: Time Access 1 TAAC                            :0xe
11:22:13: Time Access 2 NSAC*100                        :0x0
11:22:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:13: Card Command Classess CCC                     :0x5b5
11:22:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:13: DSR(driver stage register)  DSR_IMP           :0x0
11:22:13: Reserv2                                       :0x0
11:22:13: Device Size C_SIZE                            :0xedc8
11:22:13: Reserv3                                       :0x0
11:22:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:13: Reserv4                                       :0x0
11:22:13: Write Speed Factor R2W_FACTOR                 :0x2
11:22:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:13: FILE_FORMAT_GRP                               :0x0
11:22:13: COPY flag                                     :0x1
11:22:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:13: File_Format                                   :0x0
11:22:13: CRC                                           :0x0
11:22:13: ####CSD Registe Values####  

11:22:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:13: ProductSerialNumber = 0x23482900
11:22:13: CardMaximumLBA      = 0x3b72400
11:22:13: CardCapacity        = 32G
11:22:13: Is card secure      = 0
11:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:13: [DVTCommonLib]###  LogicalWrite called
11:22:14: [ WriteLba(0x28CF4E4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1616 ] 
11:22:14: [DVTCommonLib]###  LogicalWrite Completed 

11:22:14: [DVTCommonLib]###  LogicalRead called
11:22:16: [ ReadLba(0x28CF4E4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1617 ] 
11:22:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 165 times 
11:22:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA5, 0x0) , Command count = 1618 ] 
11:22:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:16: [DVTCommonLib]### Card response as High Capacity from card
11:22:16: [DVTCommonLib]### VOLA from card : 0x1
11:22:16: [DVTCommonLib]### CMD Pattern from card : 0xA5
11:22:16: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 1619 ] 
11:22:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B97B0>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 1620 ] 
11:22:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1621 ] 
11:22:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:16: [ SetBusWidth(0x4) , Command count = 1622 ] 
11:22:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:16: ####CSD Registe 2.0 Values####
11:22:16: CSD_STRUCTURE                                 :0x1
11:22:16: Reserv1                                       :0x0
11:22:16: Time Access 1 TAAC                            :0xe
11:22:16: Time Access 2 NSAC*100                        :0x0
11:22:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:16: Card Command Classess CCC                     :0x5b5
11:22:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:16: DSR(driver stage register)  DSR_IMP           :0x0
11:22:16: Reserv2                                       :0x0
11:22:16: Device Size C_SIZE                            :0xedc8
11:22:16: Reserv3                                       :0x0
11:22:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:16: Reserv4                                       :0x0
11:22:16: Write Speed Factor R2W_FACTOR                 :0x2
11:22:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:16: FILE_FORMAT_GRP                               :0x0
11:22:16: COPY flag                                     :0x1
11:22:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:16: File_Format                                   :0x0
11:22:16: CRC                                           :0x0
11:22:16: ####CSD Registe Values####  

11:22:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:16: ProductSerialNumber = 0x23482900
11:22:16: CardMaximumLBA      = 0x3b72400
11:22:16: CardCapacity        = 32G
11:22:16: Is card secure      = 0
11:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:16: [DVTCommonLib]###  LogicalWrite called
11:22:18: [ WriteLba(0x1ECFDA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1623 ] 
11:22:18: [DVTCommonLib]###  LogicalWrite Completed 

11:22:18: [DVTCommonLib]###  LogicalRead called
11:22:20: [ ReadLba(0x1ECFDA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1624 ] 
11:22:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 166 times 
11:22:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA6, 0x0) , Command count = 1625 ] 
11:22:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:20: [DVTCommonLib]### Card response as High Capacity from card
11:22:20: [DVTCommonLib]### VOLA from card : 0x1
11:22:20: [DVTCommonLib]### CMD Pattern from card : 0xA6
11:22:20: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488330>, <py_sfcl.CommandDataDefinition object at 0x064881E0>) , Command count = 1626 ] 
11:22:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB330>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 1627 ] 
11:22:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1628 ] 
11:22:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:20: [ SetBusWidth(0x4) , Command count = 1629 ] 
11:22:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:20: ####CSD Registe 2.0 Values####
11:22:20: CSD_STRUCTURE                                 :0x1
11:22:20: Reserv1                                       :0x0
11:22:20: Time Access 1 TAAC                            :0xe
11:22:20: Time Access 2 NSAC*100                        :0x0
11:22:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:20: Card Command Classess CCC                     :0x5b5
11:22:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:20: DSR(driver stage register)  DSR_IMP           :0x0
11:22:20: Reserv2                                       :0x0
11:22:20: Device Size C_SIZE                            :0xedc8
11:22:20: Reserv3                                       :0x0
11:22:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:20: Reserv4                                       :0x0
11:22:20: Write Speed Factor R2W_FACTOR                 :0x2
11:22:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:20: FILE_FORMAT_GRP                               :0x0
11:22:20: COPY flag                                     :0x1
11:22:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:20: File_Format                                   :0x0
11:22:20: CRC                                           :0x0
11:22:20: ####CSD Registe Values####  

11:22:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:20: ProductSerialNumber = 0x23482900
11:22:20: CardMaximumLBA      = 0x3b72400
11:22:20: CardCapacity        = 32G
11:22:20: Is card secure      = 0
11:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:20: [DVTCommonLib]###  LogicalWrite called
11:22:22: [ WriteLba(0x2DFEB15, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1630 ] 
11:22:22: [DVTCommonLib]###  LogicalWrite Completed 

11:22:22: [DVTCommonLib]###  LogicalRead called
11:22:23: [ ReadLba(0x2DFEB15, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1631 ] 
11:22:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 167 times 
11:22:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA7, 0x0) , Command count = 1632 ] 
11:22:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:23: [DVTCommonLib]### Card response as High Capacity from card
11:22:23: [DVTCommonLib]### VOLA from card : 0x1
11:22:23: [DVTCommonLib]### CMD Pattern from card : 0xA7
11:22:23: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 1633 ] 
11:22:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9990>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 1634 ] 
11:22:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1635 ] 
11:22:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:23: [ SetBusWidth(0x4) , Command count = 1636 ] 
11:22:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:23: ####CSD Registe 2.0 Values####
11:22:23: CSD_STRUCTURE                                 :0x1
11:22:23: Reserv1                                       :0x0
11:22:23: Time Access 1 TAAC                            :0xe
11:22:23: Time Access 2 NSAC*100                        :0x0
11:22:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:23: Card Command Classess CCC                     :0x5b5
11:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:23: DSR(driver stage register)  DSR_IMP           :0x0
11:22:23: Reserv2                                       :0x0
11:22:23: Device Size C_SIZE                            :0xedc8
11:22:23: Reserv3                                       :0x0
11:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:23: Reserv4                                       :0x0
11:22:23: Write Speed Factor R2W_FACTOR                 :0x2
11:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:23: FILE_FORMAT_GRP                               :0x0
11:22:23: COPY flag                                     :0x1
11:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:23: File_Format                                   :0x0
11:22:23: CRC                                           :0x0
11:22:23: ####CSD Registe Values####  

11:22:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:23: ProductSerialNumber = 0x23482900
11:22:23: CardMaximumLBA      = 0x3b72400
11:22:23: CardCapacity        = 32G
11:22:23: Is card secure      = 0
11:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:23: [DVTCommonLib]###  LogicalWrite called
11:22:25: [ WriteLba(0x2E88521, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1637 ] 
11:22:25: [DVTCommonLib]###  LogicalWrite Completed 

11:22:25: [DVTCommonLib]###  LogicalRead called
11:22:27: [ ReadLba(0x2E88521, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1638 ] 
11:22:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 168 times 
11:22:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA8, 0x0) , Command count = 1639 ] 
11:22:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:27: [DVTCommonLib]### Card response as High Capacity from card
11:22:27: [DVTCommonLib]### VOLA from card : 0x1
11:22:27: [DVTCommonLib]### CMD Pattern from card : 0xA8
11:22:27: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508210>) , Command count = 1640 ] 
11:22:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9900>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 1641 ] 
11:22:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1642 ] 
11:22:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:27: [ SetBusWidth(0x4) , Command count = 1643 ] 
11:22:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:27: ####CSD Registe 2.0 Values####
11:22:27: CSD_STRUCTURE                                 :0x1
11:22:27: Reserv1                                       :0x0
11:22:27: Time Access 1 TAAC                            :0xe
11:22:27: Time Access 2 NSAC*100                        :0x0
11:22:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:27: Card Command Classess CCC                     :0x5b5
11:22:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:27: DSR(driver stage register)  DSR_IMP           :0x0
11:22:27: Reserv2                                       :0x0
11:22:27: Device Size C_SIZE                            :0xedc8
11:22:27: Reserv3                                       :0x0
11:22:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:27: Reserv4                                       :0x0
11:22:27: Write Speed Factor R2W_FACTOR                 :0x2
11:22:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:27: FILE_FORMAT_GRP                               :0x0
11:22:27: COPY flag                                     :0x1
11:22:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:27: File_Format                                   :0x0
11:22:27: CRC                                           :0x0
11:22:27: ####CSD Registe Values####  

11:22:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:27: ProductSerialNumber = 0x23482900
11:22:27: CardMaximumLBA      = 0x3b72400
11:22:27: CardCapacity        = 32G
11:22:27: Is card secure      = 0
11:22:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:27: [DVTCommonLib]###  LogicalWrite called
11:22:29: [ WriteLba(0xB84B28, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1644 ] 
11:22:29: [DVTCommonLib]###  LogicalWrite Completed 

11:22:29: [DVTCommonLib]###  LogicalRead called
11:22:30: [ ReadLba(0xB84B28, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1645 ] 
11:22:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 169 times 
11:22:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA9, 0x0) , Command count = 1646 ] 
11:22:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:31: [DVTCommonLib]### Card response as High Capacity from card
11:22:31: [DVTCommonLib]### VOLA from card : 0x1
11:22:31: [DVTCommonLib]### CMD Pattern from card : 0xA9
11:22:31: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB2A0>, <py_sfcl.CommandDataDefinition object at 0x065064E0>) , Command count = 1647 ] 
11:22:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB060>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 1648 ] 
11:22:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1649 ] 
11:22:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:31: [ SetBusWidth(0x4) , Command count = 1650 ] 
11:22:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:31: ####CSD Registe 2.0 Values####
11:22:31: CSD_STRUCTURE                                 :0x1
11:22:31: Reserv1                                       :0x0
11:22:31: Time Access 1 TAAC                            :0xe
11:22:31: Time Access 2 NSAC*100                        :0x0
11:22:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:31: Card Command Classess CCC                     :0x5b5
11:22:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:31: DSR(driver stage register)  DSR_IMP           :0x0
11:22:31: Reserv2                                       :0x0
11:22:31: Device Size C_SIZE                            :0xedc8
11:22:31: Reserv3                                       :0x0
11:22:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:31: Reserv4                                       :0x0
11:22:31: Write Speed Factor R2W_FACTOR                 :0x2
11:22:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:31: FILE_FORMAT_GRP                               :0x0
11:22:31: COPY flag                                     :0x1
11:22:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:31: File_Format                                   :0x0
11:22:31: CRC                                           :0x0
11:22:31: ####CSD Registe Values####  

11:22:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:31: ProductSerialNumber = 0x23482900
11:22:31: CardMaximumLBA      = 0x3b72400
11:22:31: CardCapacity        = 32G
11:22:31: Is card secure      = 0
11:22:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:31: [DVTCommonLib]###  LogicalWrite called
11:22:32: [ WriteLba(0x37FF57D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1651 ] 
11:22:32: [DVTCommonLib]###  LogicalWrite Completed 

11:22:32: [DVTCommonLib]###  LogicalRead called
11:22:34: [ ReadLba(0x37FF57D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1652 ] 
11:22:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 170 times 
11:22:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1653 ] 
11:22:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:34: [DVTCommonLib]### Card response as High Capacity from card
11:22:34: [DVTCommonLib]### VOLA from card : 0x1
11:22:34: [DVTCommonLib]### CMD Pattern from card : 0xAA
11:22:34: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488060>, <py_sfcl.CommandDataDefinition object at 0x06506ED0>) , Command count = 1654 ] 
11:22:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064888A0>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 1655 ] 
11:22:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1656 ] 
11:22:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:34: [ SetBusWidth(0x4) , Command count = 1657 ] 
11:22:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:34: ####CSD Registe 2.0 Values####
11:22:34: CSD_STRUCTURE                                 :0x1
11:22:34: Reserv1                                       :0x0
11:22:34: Time Access 1 TAAC                            :0xe
11:22:34: Time Access 2 NSAC*100                        :0x0
11:22:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:34: Card Command Classess CCC                     :0x5b5
11:22:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:34: DSR(driver stage register)  DSR_IMP           :0x0
11:22:34: Reserv2                                       :0x0
11:22:34: Device Size C_SIZE                            :0xedc8
11:22:34: Reserv3                                       :0x0
11:22:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:34: Reserv4                                       :0x0
11:22:34: Write Speed Factor R2W_FACTOR                 :0x2
11:22:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:34: FILE_FORMAT_GRP                               :0x0
11:22:34: COPY flag                                     :0x1
11:22:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:34: File_Format                                   :0x0
11:22:34: CRC                                           :0x0
11:22:34: ####CSD Registe Values####  

11:22:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:34: ProductSerialNumber = 0x23482900
11:22:34: CardMaximumLBA      = 0x3b72400
11:22:34: CardCapacity        = 32G
11:22:34: Is card secure      = 0
11:22:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:34: [DVTCommonLib]###  LogicalWrite called
11:22:36: [ WriteLba(0x17B7F67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1658 ] 
11:22:36: [DVTCommonLib]###  LogicalWrite Completed 

11:22:36: [DVTCommonLib]###  LogicalRead called
11:22:37: [ ReadLba(0x17B7F67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1659 ] 
11:22:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 171 times 
11:22:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAB, 0x0) , Command count = 1660 ] 
11:22:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:38: [DVTCommonLib]### Card response as High Capacity from card
11:22:38: [DVTCommonLib]### VOLA from card : 0x1
11:22:38: [DVTCommonLib]### CMD Pattern from card : 0xAB
11:22:38: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889F0>, <py_sfcl.CommandDataDefinition object at 0x06506C60>) , Command count = 1661 ] 
11:22:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506F00>, <py_sfcl.CommandDataDefinition object at 0x064B9F30>) , Command count = 1662 ] 
11:22:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1663 ] 
11:22:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:38: [ SetBusWidth(0x4) , Command count = 1664 ] 
11:22:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:38: ####CSD Registe 2.0 Values####
11:22:38: CSD_STRUCTURE                                 :0x1
11:22:38: Reserv1                                       :0x0
11:22:38: Time Access 1 TAAC                            :0xe
11:22:38: Time Access 2 NSAC*100                        :0x0
11:22:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:38: Card Command Classess CCC                     :0x5b5
11:22:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:38: DSR(driver stage register)  DSR_IMP           :0x0
11:22:38: Reserv2                                       :0x0
11:22:38: Device Size C_SIZE                            :0xedc8
11:22:38: Reserv3                                       :0x0
11:22:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:38: Reserv4                                       :0x0
11:22:38: Write Speed Factor R2W_FACTOR                 :0x2
11:22:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:38: FILE_FORMAT_GRP                               :0x0
11:22:38: COPY flag                                     :0x1
11:22:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:38: File_Format                                   :0x0
11:22:38: CRC                                           :0x0
11:22:38: ####CSD Registe Values####  

11:22:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:38: ProductSerialNumber = 0x23482900
11:22:38: CardMaximumLBA      = 0x3b72400
11:22:38: CardCapacity        = 32G
11:22:38: Is card secure      = 0
11:22:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:38: [DVTCommonLib]###  LogicalWrite called
11:22:39: [ WriteLba(0x3A57ECD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1665 ] 
11:22:39: [DVTCommonLib]###  LogicalWrite Completed 

11:22:39: [DVTCommonLib]###  LogicalRead called
11:22:41: [ ReadLba(0x3A57ECD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1666 ] 
11:22:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 172 times 
11:22:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAC, 0x0) , Command count = 1667 ] 
11:22:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:41: [DVTCommonLib]### Card response as High Capacity from card
11:22:41: [DVTCommonLib]### VOLA from card : 0x1
11:22:41: [DVTCommonLib]### CMD Pattern from card : 0xAC
11:22:41: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DB0>, <py_sfcl.CommandDataDefinition object at 0x065067E0>) , Command count = 1668 ] 
11:22:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF6F90>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 1669 ] 
11:22:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1670 ] 
11:22:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:41: [ SetBusWidth(0x4) , Command count = 1671 ] 
11:22:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:41: ####CSD Registe 2.0 Values####
11:22:41: CSD_STRUCTURE                                 :0x1
11:22:41: Reserv1                                       :0x0
11:22:41: Time Access 1 TAAC                            :0xe
11:22:41: Time Access 2 NSAC*100                        :0x0
11:22:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:41: Card Command Classess CCC                     :0x5b5
11:22:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:41: DSR(driver stage register)  DSR_IMP           :0x0
11:22:41: Reserv2                                       :0x0
11:22:41: Device Size C_SIZE                            :0xedc8
11:22:41: Reserv3                                       :0x0
11:22:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:41: Reserv4                                       :0x0
11:22:41: Write Speed Factor R2W_FACTOR                 :0x2
11:22:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:41: FILE_FORMAT_GRP                               :0x0
11:22:41: COPY flag                                     :0x1
11:22:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:41: File_Format                                   :0x0
11:22:41: CRC                                           :0x0
11:22:41: ####CSD Registe Values####  

11:22:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:41: ProductSerialNumber = 0x23482900
11:22:41: CardMaximumLBA      = 0x3b72400
11:22:41: CardCapacity        = 32G
11:22:41: Is card secure      = 0
11:22:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:41: [DVTCommonLib]###  LogicalWrite called
11:22:43: [ WriteLba(0x2E30CCE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1672 ] 
11:22:43: [DVTCommonLib]###  LogicalWrite Completed 

11:22:43: [DVTCommonLib]###  LogicalRead called
11:22:45: [ ReadLba(0x2E30CCE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1673 ] 
11:22:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 173 times 
11:22:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAD, 0x0) , Command count = 1674 ] 
11:22:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:45: [DVTCommonLib]### Card response as High Capacity from card
11:22:45: [DVTCommonLib]### VOLA from card : 0x1
11:22:45: [DVTCommonLib]### CMD Pattern from card : 0xAD
11:22:45: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506480>, <py_sfcl.CommandDataDefinition object at 0x06506690>) , Command count = 1675 ] 
11:22:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506870>, <py_sfcl.CommandDataDefinition object at 0x06506960>) , Command count = 1676 ] 
11:22:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1677 ] 
11:22:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:45: [ SetBusWidth(0x4) , Command count = 1678 ] 
11:22:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:45: ####CSD Registe 2.0 Values####
11:22:45: CSD_STRUCTURE                                 :0x1
11:22:45: Reserv1                                       :0x0
11:22:45: Time Access 1 TAAC                            :0xe
11:22:45: Time Access 2 NSAC*100                        :0x0
11:22:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:45: Card Command Classess CCC                     :0x5b5
11:22:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:45: DSR(driver stage register)  DSR_IMP           :0x0
11:22:45: Reserv2                                       :0x0
11:22:45: Device Size C_SIZE                            :0xedc8
11:22:45: Reserv3                                       :0x0
11:22:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:45: Reserv4                                       :0x0
11:22:45: Write Speed Factor R2W_FACTOR                 :0x2
11:22:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:45: FILE_FORMAT_GRP                               :0x0
11:22:45: COPY flag                                     :0x1
11:22:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:45: File_Format                                   :0x0
11:22:45: CRC                                           :0x0
11:22:45: ####CSD Registe Values####  

11:22:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:45: ProductSerialNumber = 0x23482900
11:22:45: CardMaximumLBA      = 0x3b72400
11:22:45: CardCapacity        = 32G
11:22:45: Is card secure      = 0
11:22:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:45: [DVTCommonLib]###  LogicalWrite called
11:22:47: [ WriteLba(0x272CB9D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1679 ] 
11:22:47: [DVTCommonLib]###  LogicalWrite Completed 

11:22:47: [DVTCommonLib]###  LogicalRead called
11:22:48: [ ReadLba(0x272CB9D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1680 ] 
11:22:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 174 times 
11:22:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAE, 0x0) , Command count = 1681 ] 
11:22:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:48: [DVTCommonLib]### Card response as High Capacity from card
11:22:48: [DVTCommonLib]### VOLA from card : 0x1
11:22:48: [DVTCommonLib]### CMD Pattern from card : 0xAE
11:22:48: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF060>, <py_sfcl.CommandDataDefinition object at 0x064DF8A0>) , Command count = 1682 ] 
11:22:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF840>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 1683 ] 
11:22:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1684 ] 
11:22:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:48: [ SetBusWidth(0x4) , Command count = 1685 ] 
11:22:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:48: ####CSD Registe 2.0 Values####
11:22:48: CSD_STRUCTURE                                 :0x1
11:22:48: Reserv1                                       :0x0
11:22:48: Time Access 1 TAAC                            :0xe
11:22:48: Time Access 2 NSAC*100                        :0x0
11:22:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:48: Card Command Classess CCC                     :0x5b5
11:22:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:48: DSR(driver stage register)  DSR_IMP           :0x0
11:22:48: Reserv2                                       :0x0
11:22:48: Device Size C_SIZE                            :0xedc8
11:22:48: Reserv3                                       :0x0
11:22:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:48: Reserv4                                       :0x0
11:22:48: Write Speed Factor R2W_FACTOR                 :0x2
11:22:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:48: FILE_FORMAT_GRP                               :0x0
11:22:48: COPY flag                                     :0x1
11:22:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:48: File_Format                                   :0x0
11:22:48: CRC                                           :0x0
11:22:48: ####CSD Registe Values####  

11:22:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:48: ProductSerialNumber = 0x23482900
11:22:48: CardMaximumLBA      = 0x3b72400
11:22:48: CardCapacity        = 32G
11:22:48: Is card secure      = 0
11:22:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:48: [DVTCommonLib]###  LogicalWrite called
11:22:50: [ WriteLba(0x1BCD899, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1686 ] 
11:22:50: [DVTCommonLib]###  LogicalWrite Completed 

11:22:50: [DVTCommonLib]###  LogicalRead called
11:22:52: [ ReadLba(0x1BCD899, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1687 ] 
11:22:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 175 times 
11:22:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAF, 0x0) , Command count = 1688 ] 
11:22:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:52: [DVTCommonLib]### Card response as High Capacity from card
11:22:52: [DVTCommonLib]### VOLA from card : 0x1
11:22:52: [DVTCommonLib]### CMD Pattern from card : 0xAF
11:22:52: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 1689 ] 
11:22:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF540>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 1690 ] 
11:22:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1691 ] 
11:22:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:52: [ SetBusWidth(0x4) , Command count = 1692 ] 
11:22:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:52: ####CSD Registe 2.0 Values####
11:22:52: CSD_STRUCTURE                                 :0x1
11:22:52: Reserv1                                       :0x0
11:22:52: Time Access 1 TAAC                            :0xe
11:22:52: Time Access 2 NSAC*100                        :0x0
11:22:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:52: Card Command Classess CCC                     :0x5b5
11:22:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:52: DSR(driver stage register)  DSR_IMP           :0x0
11:22:52: Reserv2                                       :0x0
11:22:52: Device Size C_SIZE                            :0xedc8
11:22:52: Reserv3                                       :0x0
11:22:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:52: Reserv4                                       :0x0
11:22:52: Write Speed Factor R2W_FACTOR                 :0x2
11:22:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:52: FILE_FORMAT_GRP                               :0x0
11:22:52: COPY flag                                     :0x1
11:22:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:52: File_Format                                   :0x0
11:22:52: CRC                                           :0x0
11:22:52: ####CSD Registe Values####  

11:22:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:52: ProductSerialNumber = 0x23482900
11:22:52: CardMaximumLBA      = 0x3b72400
11:22:52: CardCapacity        = 32G
11:22:52: Is card secure      = 0
11:22:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:52: [DVTCommonLib]###  LogicalWrite called
11:22:54: [ WriteLba(0x2B1CE2D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1693 ] 
11:22:54: [DVTCommonLib]###  LogicalWrite Completed 

11:22:54: [DVTCommonLib]###  LogicalRead called
11:22:55: [ ReadLba(0x2B1CE2D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1694 ] 
11:22:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 176 times 
11:22:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB0, 0x0) , Command count = 1695 ] 
11:22:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:55: [DVTCommonLib]### Card response as High Capacity from card
11:22:55: [DVTCommonLib]### VOLA from card : 0x1
11:22:55: [DVTCommonLib]### CMD Pattern from card : 0xB0
11:22:55: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 1696 ] 
11:22:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF720>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 1697 ] 
11:22:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1698 ] 
11:22:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:56: [ SetBusWidth(0x4) , Command count = 1699 ] 
11:22:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:56: ####CSD Registe 2.0 Values####
11:22:56: CSD_STRUCTURE                                 :0x1
11:22:56: Reserv1                                       :0x0
11:22:56: Time Access 1 TAAC                            :0xe
11:22:56: Time Access 2 NSAC*100                        :0x0
11:22:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:56: Card Command Classess CCC                     :0x5b5
11:22:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:56: DSR(driver stage register)  DSR_IMP           :0x0
11:22:56: Reserv2                                       :0x0
11:22:56: Device Size C_SIZE                            :0xedc8
11:22:56: Reserv3                                       :0x0
11:22:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:56: Reserv4                                       :0x0
11:22:56: Write Speed Factor R2W_FACTOR                 :0x2
11:22:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:56: FILE_FORMAT_GRP                               :0x0
11:22:56: COPY flag                                     :0x1
11:22:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:56: File_Format                                   :0x0
11:22:56: CRC                                           :0x0
11:22:56: ####CSD Registe Values####  

11:22:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:56: ProductSerialNumber = 0x23482900
11:22:56: CardMaximumLBA      = 0x3b72400
11:22:56: CardCapacity        = 32G
11:22:56: Is card secure      = 0
11:22:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:56: [DVTCommonLib]###  LogicalWrite called
11:22:57: [ WriteLba(0x14BB215, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1700 ] 
11:22:57: [DVTCommonLib]###  LogicalWrite Completed 

11:22:57: [DVTCommonLib]###  LogicalRead called
11:22:59: [ ReadLba(0x14BB215, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1701 ] 
11:22:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:22:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:22:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 177 times 
11:22:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:22:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB1, 0x0) , Command count = 1702 ] 
11:22:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:22:59: [DVTCommonLib]### Card response as High Capacity from card
11:22:59: [DVTCommonLib]### VOLA from card : 0x1
11:22:59: [DVTCommonLib]### CMD Pattern from card : 0xB1
11:22:59: [DVTCommonLib]### Reserved bits from card : 0x0
11:22:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 1703 ] 
11:22:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF5D0>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 1704 ] 
11:22:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:22:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1705 ] 
11:22:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:59: [ SetBusWidth(0x4) , Command count = 1706 ] 
11:22:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:22:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:22:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:59: ####CSD Registe 2.0 Values####
11:22:59: CSD_STRUCTURE                                 :0x1
11:22:59: Reserv1                                       :0x0
11:22:59: Time Access 1 TAAC                            :0xe
11:22:59: Time Access 2 NSAC*100                        :0x0
11:22:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:59: Card Command Classess CCC                     :0x5b5
11:22:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:59: DSR(driver stage register)  DSR_IMP           :0x0
11:22:59: Reserv2                                       :0x0
11:22:59: Device Size C_SIZE                            :0xedc8
11:22:59: Reserv3                                       :0x0
11:22:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:59: Reserv4                                       :0x0
11:22:59: Write Speed Factor R2W_FACTOR                 :0x2
11:22:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:59: FILE_FORMAT_GRP                               :0x0
11:22:59: COPY flag                                     :0x1
11:22:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:59: File_Format                                   :0x0
11:22:59: CRC                                           :0x0
11:22:59: ####CSD Registe Values####  

11:22:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:22:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:22:59: ProductSerialNumber = 0x23482900
11:22:59: CardMaximumLBA      = 0x3b72400
11:22:59: CardCapacity        = 32G
11:22:59: Is card secure      = 0
11:22:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:22:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:22:59: [DVTCommonLib]###  LogicalWrite called
11:23:01: [ WriteLba(0x2DAAA54, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1707 ] 
11:23:01: [DVTCommonLib]###  LogicalWrite Completed 

11:23:01: [DVTCommonLib]###  LogicalRead called
11:23:02: [ ReadLba(0x2DAAA54, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1708 ] 
11:23:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 178 times 
11:23:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB2, 0x0) , Command count = 1709 ] 
11:23:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:03: [DVTCommonLib]### Card response as High Capacity from card
11:23:03: [DVTCommonLib]### VOLA from card : 0x1
11:23:03: [DVTCommonLib]### CMD Pattern from card : 0xB2
11:23:03: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 1710 ] 
11:23:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF5A0>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 1711 ] 
11:23:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1712 ] 
11:23:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:03: [ SetBusWidth(0x4) , Command count = 1713 ] 
11:23:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:03: ####CSD Registe 2.0 Values####
11:23:03: CSD_STRUCTURE                                 :0x1
11:23:03: Reserv1                                       :0x0
11:23:03: Time Access 1 TAAC                            :0xe
11:23:03: Time Access 2 NSAC*100                        :0x0
11:23:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:03: Card Command Classess CCC                     :0x5b5
11:23:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:03: DSR(driver stage register)  DSR_IMP           :0x0
11:23:03: Reserv2                                       :0x0
11:23:03: Device Size C_SIZE                            :0xedc8
11:23:03: Reserv3                                       :0x0
11:23:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:03: Reserv4                                       :0x0
11:23:03: Write Speed Factor R2W_FACTOR                 :0x2
11:23:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:03: FILE_FORMAT_GRP                               :0x0
11:23:03: COPY flag                                     :0x1
11:23:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:03: File_Format                                   :0x0
11:23:03: CRC                                           :0x0
11:23:03: ####CSD Registe Values####  

11:23:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:03: ProductSerialNumber = 0x23482900
11:23:03: CardMaximumLBA      = 0x3b72400
11:23:03: CardCapacity        = 32G
11:23:03: Is card secure      = 0
11:23:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:03: [DVTCommonLib]###  LogicalWrite called
11:23:04: [ WriteLba(0xDDF77A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1714 ] 
11:23:04: [DVTCommonLib]###  LogicalWrite Completed 

11:23:04: [DVTCommonLib]###  LogicalRead called
11:23:06: [ ReadLba(0xDDF77A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1715 ] 
11:23:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 179 times 
11:23:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB3, 0x0) , Command count = 1716 ] 
11:23:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:06: [DVTCommonLib]### Card response as High Capacity from card
11:23:06: [DVTCommonLib]### VOLA from card : 0x1
11:23:06: [DVTCommonLib]### CMD Pattern from card : 0xB3
11:23:06: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 1717 ] 
11:23:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF7E0>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 1718 ] 
11:23:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1719 ] 
11:23:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:06: [ SetBusWidth(0x4) , Command count = 1720 ] 
11:23:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:06: ####CSD Registe 2.0 Values####
11:23:06: CSD_STRUCTURE                                 :0x1
11:23:06: Reserv1                                       :0x0
11:23:06: Time Access 1 TAAC                            :0xe
11:23:06: Time Access 2 NSAC*100                        :0x0
11:23:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:06: Card Command Classess CCC                     :0x5b5
11:23:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:06: DSR(driver stage register)  DSR_IMP           :0x0
11:23:06: Reserv2                                       :0x0
11:23:06: Device Size C_SIZE                            :0xedc8
11:23:06: Reserv3                                       :0x0
11:23:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:06: Reserv4                                       :0x0
11:23:06: Write Speed Factor R2W_FACTOR                 :0x2
11:23:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:06: FILE_FORMAT_GRP                               :0x0
11:23:06: COPY flag                                     :0x1
11:23:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:06: File_Format                                   :0x0
11:23:06: CRC                                           :0x0
11:23:06: ####CSD Registe Values####  

11:23:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:06: ProductSerialNumber = 0x23482900
11:23:06: CardMaximumLBA      = 0x3b72400
11:23:06: CardCapacity        = 32G
11:23:06: Is card secure      = 0
11:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:06: [DVTCommonLib]###  LogicalWrite called
11:23:08: [ WriteLba(0x381B6D2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1721 ] 
11:23:08: [DVTCommonLib]###  LogicalWrite Completed 

11:23:08: [DVTCommonLib]###  LogicalRead called
11:23:10: [ ReadLba(0x381B6D2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1722 ] 
11:23:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 180 times 
11:23:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB4, 0x0) , Command count = 1723 ] 
11:23:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:10: [DVTCommonLib]### Card response as High Capacity from card
11:23:10: [DVTCommonLib]### VOLA from card : 0x1
11:23:10: [DVTCommonLib]### CMD Pattern from card : 0xB4
11:23:10: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 1724 ] 
11:23:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506120>, <py_sfcl.CommandDataDefinition object at 0x064DFA20>) , Command count = 1725 ] 
11:23:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1726 ] 
11:23:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:10: [ SetBusWidth(0x4) , Command count = 1727 ] 
11:23:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:10: ####CSD Registe 2.0 Values####
11:23:10: CSD_STRUCTURE                                 :0x1
11:23:10: Reserv1                                       :0x0
11:23:10: Time Access 1 TAAC                            :0xe
11:23:10: Time Access 2 NSAC*100                        :0x0
11:23:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:10: Card Command Classess CCC                     :0x5b5
11:23:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:10: DSR(driver stage register)  DSR_IMP           :0x0
11:23:10: Reserv2                                       :0x0
11:23:10: Device Size C_SIZE                            :0xedc8
11:23:10: Reserv3                                       :0x0
11:23:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:10: Reserv4                                       :0x0
11:23:10: Write Speed Factor R2W_FACTOR                 :0x2
11:23:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:10: FILE_FORMAT_GRP                               :0x0
11:23:10: COPY flag                                     :0x1
11:23:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:10: File_Format                                   :0x0
11:23:10: CRC                                           :0x0
11:23:10: ####CSD Registe Values####  

11:23:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:10: ProductSerialNumber = 0x23482900
11:23:10: CardMaximumLBA      = 0x3b72400
11:23:10: CardCapacity        = 32G
11:23:10: Is card secure      = 0
11:23:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:10: [DVTCommonLib]###  LogicalWrite called
11:23:11: [ WriteLba(0x3171466, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1728 ] 
11:23:11: [DVTCommonLib]###  LogicalWrite Completed 

11:23:11: [DVTCommonLib]###  LogicalRead called
11:23:13: [ ReadLba(0x3171466, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1729 ] 
11:23:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 181 times 
11:23:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB5, 0x0) , Command count = 1730 ] 
11:23:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:13: [DVTCommonLib]### Card response as High Capacity from card
11:23:13: [DVTCommonLib]### VOLA from card : 0x1
11:23:13: [DVTCommonLib]### CMD Pattern from card : 0xB5
11:23:13: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 1731 ] 
11:23:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506210>, <py_sfcl.CommandDataDefinition object at 0x064DFA20>) , Command count = 1732 ] 
11:23:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1733 ] 
11:23:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:13: [ SetBusWidth(0x4) , Command count = 1734 ] 
11:23:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:13: ####CSD Registe 2.0 Values####
11:23:13: CSD_STRUCTURE                                 :0x1
11:23:13: Reserv1                                       :0x0
11:23:13: Time Access 1 TAAC                            :0xe
11:23:13: Time Access 2 NSAC*100                        :0x0
11:23:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:13: Card Command Classess CCC                     :0x5b5
11:23:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:13: DSR(driver stage register)  DSR_IMP           :0x0
11:23:13: Reserv2                                       :0x0
11:23:13: Device Size C_SIZE                            :0xedc8
11:23:13: Reserv3                                       :0x0
11:23:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:13: Reserv4                                       :0x0
11:23:13: Write Speed Factor R2W_FACTOR                 :0x2
11:23:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:13: FILE_FORMAT_GRP                               :0x0
11:23:13: COPY flag                                     :0x1
11:23:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:13: File_Format                                   :0x0
11:23:13: CRC                                           :0x0
11:23:13: ####CSD Registe Values####  

11:23:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:13: ProductSerialNumber = 0x23482900
11:23:13: CardMaximumLBA      = 0x3b72400
11:23:13: CardCapacity        = 32G
11:23:13: Is card secure      = 0
11:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:13: [DVTCommonLib]###  LogicalWrite called
11:23:15: [ WriteLba(0xAA726F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1735 ] 
11:23:15: [DVTCommonLib]###  LogicalWrite Completed 

11:23:15: [DVTCommonLib]###  LogicalRead called
11:23:17: [ ReadLba(0xAA726F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1736 ] 
11:23:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 182 times 
11:23:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB6, 0x0) , Command count = 1737 ] 
11:23:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:17: [DVTCommonLib]### Card response as High Capacity from card
11:23:17: [DVTCommonLib]### VOLA from card : 0x1
11:23:17: [DVTCommonLib]### CMD Pattern from card : 0xB6
11:23:17: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 1738 ] 
11:23:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF6C0>, <py_sfcl.CommandDataDefinition object at 0x064DFA20>) , Command count = 1739 ] 
11:23:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1740 ] 
11:23:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:17: [ SetBusWidth(0x4) , Command count = 1741 ] 
11:23:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:17: ####CSD Registe 2.0 Values####
11:23:17: CSD_STRUCTURE                                 :0x1
11:23:17: Reserv1                                       :0x0
11:23:17: Time Access 1 TAAC                            :0xe
11:23:17: Time Access 2 NSAC*100                        :0x0
11:23:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:17: Card Command Classess CCC                     :0x5b5
11:23:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:17: DSR(driver stage register)  DSR_IMP           :0x0
11:23:17: Reserv2                                       :0x0
11:23:17: Device Size C_SIZE                            :0xedc8
11:23:17: Reserv3                                       :0x0
11:23:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:17: Reserv4                                       :0x0
11:23:17: Write Speed Factor R2W_FACTOR                 :0x2
11:23:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:17: FILE_FORMAT_GRP                               :0x0
11:23:17: COPY flag                                     :0x1
11:23:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:17: File_Format                                   :0x0
11:23:17: CRC                                           :0x0
11:23:17: ####CSD Registe Values####  

11:23:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:17: ProductSerialNumber = 0x23482900
11:23:17: CardMaximumLBA      = 0x3b72400
11:23:17: CardCapacity        = 32G
11:23:17: Is card secure      = 0
11:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:17: [DVTCommonLib]###  LogicalWrite called
11:23:19: [ WriteLba(0x274205E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1742 ] 
11:23:19: [DVTCommonLib]###  LogicalWrite Completed 

11:23:19: [DVTCommonLib]###  LogicalRead called
11:23:20: [ ReadLba(0x274205E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1743 ] 
11:23:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 183 times 
11:23:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB7, 0x0) , Command count = 1744 ] 
11:23:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:20: [DVTCommonLib]### Card response as High Capacity from card
11:23:20: [DVTCommonLib]### VOLA from card : 0x1
11:23:20: [DVTCommonLib]### CMD Pattern from card : 0xB7
11:23:20: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 1745 ] 
11:23:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506780>, <py_sfcl.CommandDataDefinition object at 0x064DFA20>) , Command count = 1746 ] 
11:23:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1747 ] 
11:23:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:20: [ SetBusWidth(0x4) , Command count = 1748 ] 
11:23:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:20: ####CSD Registe 2.0 Values####
11:23:20: CSD_STRUCTURE                                 :0x1
11:23:20: Reserv1                                       :0x0
11:23:20: Time Access 1 TAAC                            :0xe
11:23:20: Time Access 2 NSAC*100                        :0x0
11:23:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:20: Card Command Classess CCC                     :0x5b5
11:23:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:20: DSR(driver stage register)  DSR_IMP           :0x0
11:23:20: Reserv2                                       :0x0
11:23:20: Device Size C_SIZE                            :0xedc8
11:23:20: Reserv3                                       :0x0
11:23:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:20: Reserv4                                       :0x0
11:23:20: Write Speed Factor R2W_FACTOR                 :0x2
11:23:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:20: FILE_FORMAT_GRP                               :0x0
11:23:20: COPY flag                                     :0x1
11:23:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:20: File_Format                                   :0x0
11:23:20: CRC                                           :0x0
11:23:20: ####CSD Registe Values####  

11:23:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:20: ProductSerialNumber = 0x23482900
11:23:20: CardMaximumLBA      = 0x3b72400
11:23:20: CardCapacity        = 32G
11:23:20: Is card secure      = 0
11:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:20: [DVTCommonLib]###  LogicalWrite called
11:23:22: [ WriteLba(0xBBB8C7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1749 ] 
11:23:22: [DVTCommonLib]###  LogicalWrite Completed 

11:23:22: [DVTCommonLib]###  LogicalRead called
11:23:24: [ ReadLba(0xBBB8C7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1750 ] 
11:23:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 184 times 
11:23:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB8, 0x0) , Command count = 1751 ] 
11:23:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:24: [DVTCommonLib]### Card response as High Capacity from card
11:23:24: [DVTCommonLib]### VOLA from card : 0x1
11:23:24: [DVTCommonLib]### CMD Pattern from card : 0xB8
11:23:24: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 1752 ] 
11:23:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506B70>, <py_sfcl.CommandDataDefinition object at 0x065085A0>) , Command count = 1753 ] 
11:23:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1754 ] 
11:23:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:24: [ SetBusWidth(0x4) , Command count = 1755 ] 
11:23:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:24: ####CSD Registe 2.0 Values####
11:23:24: CSD_STRUCTURE                                 :0x1
11:23:24: Reserv1                                       :0x0
11:23:24: Time Access 1 TAAC                            :0xe
11:23:24: Time Access 2 NSAC*100                        :0x0
11:23:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:24: Card Command Classess CCC                     :0x5b5
11:23:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:24: DSR(driver stage register)  DSR_IMP           :0x0
11:23:24: Reserv2                                       :0x0
11:23:24: Device Size C_SIZE                            :0xedc8
11:23:24: Reserv3                                       :0x0
11:23:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:24: Reserv4                                       :0x0
11:23:24: Write Speed Factor R2W_FACTOR                 :0x2
11:23:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:24: FILE_FORMAT_GRP                               :0x0
11:23:24: COPY flag                                     :0x1
11:23:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:24: File_Format                                   :0x0
11:23:24: CRC                                           :0x0
11:23:24: ####CSD Registe Values####  

11:23:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:24: ProductSerialNumber = 0x23482900
11:23:24: CardMaximumLBA      = 0x3b72400
11:23:24: CardCapacity        = 32G
11:23:24: Is card secure      = 0
11:23:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:24: [DVTCommonLib]###  LogicalWrite called
11:23:26: [ WriteLba(0x104905E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1756 ] 
11:23:26: [DVTCommonLib]###  LogicalWrite Completed 

11:23:26: [DVTCommonLib]###  LogicalRead called
11:23:27: [ ReadLba(0x104905E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1757 ] 
11:23:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 185 times 
11:23:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB9, 0x0) , Command count = 1758 ] 
11:23:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:27: [DVTCommonLib]### Card response as High Capacity from card
11:23:27: [DVTCommonLib]### VOLA from card : 0x1
11:23:27: [DVTCommonLib]### CMD Pattern from card : 0xB9
11:23:27: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 1759 ] 
11:23:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508270>, <py_sfcl.CommandDataDefinition object at 0x065080F0>) , Command count = 1760 ] 
11:23:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1761 ] 
11:23:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:28: [ SetBusWidth(0x4) , Command count = 1762 ] 
11:23:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:28: ####CSD Registe 2.0 Values####
11:23:28: CSD_STRUCTURE                                 :0x1
11:23:28: Reserv1                                       :0x0
11:23:28: Time Access 1 TAAC                            :0xe
11:23:28: Time Access 2 NSAC*100                        :0x0
11:23:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:28: Card Command Classess CCC                     :0x5b5
11:23:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:28: DSR(driver stage register)  DSR_IMP           :0x0
11:23:28: Reserv2                                       :0x0
11:23:28: Device Size C_SIZE                            :0xedc8
11:23:28: Reserv3                                       :0x0
11:23:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:28: Reserv4                                       :0x0
11:23:28: Write Speed Factor R2W_FACTOR                 :0x2
11:23:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:28: FILE_FORMAT_GRP                               :0x0
11:23:28: COPY flag                                     :0x1
11:23:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:28: File_Format                                   :0x0
11:23:28: CRC                                           :0x0
11:23:28: ####CSD Registe Values####  

11:23:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:28: ProductSerialNumber = 0x23482900
11:23:28: CardMaximumLBA      = 0x3b72400
11:23:28: CardCapacity        = 32G
11:23:28: Is card secure      = 0
11:23:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:28: [DVTCommonLib]###  LogicalWrite called
11:23:29: [ WriteLba(0x4EE47B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1763 ] 
11:23:29: [DVTCommonLib]###  LogicalWrite Completed 

11:23:29: [DVTCommonLib]###  LogicalRead called
11:23:31: [ ReadLba(0x4EE47B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1764 ] 
11:23:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 186 times 
11:23:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBA, 0x0) , Command count = 1765 ] 
11:23:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:31: [DVTCommonLib]### Card response as High Capacity from card
11:23:31: [DVTCommonLib]### VOLA from card : 0x1
11:23:31: [DVTCommonLib]### CMD Pattern from card : 0xBA
11:23:31: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 1766 ] 
11:23:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508390>, <py_sfcl.CommandDataDefinition object at 0x06508510>) , Command count = 1767 ] 
11:23:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1768 ] 
11:23:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:31: [ SetBusWidth(0x4) , Command count = 1769 ] 
11:23:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:31: ####CSD Registe 2.0 Values####
11:23:31: CSD_STRUCTURE                                 :0x1
11:23:31: Reserv1                                       :0x0
11:23:31: Time Access 1 TAAC                            :0xe
11:23:31: Time Access 2 NSAC*100                        :0x0
11:23:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:31: Card Command Classess CCC                     :0x5b5
11:23:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:31: DSR(driver stage register)  DSR_IMP           :0x0
11:23:31: Reserv2                                       :0x0
11:23:31: Device Size C_SIZE                            :0xedc8
11:23:31: Reserv3                                       :0x0
11:23:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:31: Reserv4                                       :0x0
11:23:31: Write Speed Factor R2W_FACTOR                 :0x2
11:23:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:31: FILE_FORMAT_GRP                               :0x0
11:23:31: COPY flag                                     :0x1
11:23:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:31: File_Format                                   :0x0
11:23:31: CRC                                           :0x0
11:23:31: ####CSD Registe Values####  

11:23:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:31: ProductSerialNumber = 0x23482900
11:23:31: CardMaximumLBA      = 0x3b72400
11:23:31: CardCapacity        = 32G
11:23:31: Is card secure      = 0
11:23:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:31: [DVTCommonLib]###  LogicalWrite called
11:23:33: [ WriteLba(0x38B4C6C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1770 ] 
11:23:33: [DVTCommonLib]###  LogicalWrite Completed 

11:23:33: [DVTCommonLib]###  LogicalRead called
11:23:34: [ ReadLba(0x38B4C6C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1771 ] 
11:23:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 187 times 
11:23:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBB, 0x0) , Command count = 1772 ] 
11:23:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:35: [DVTCommonLib]### Card response as High Capacity from card
11:23:35: [DVTCommonLib]### VOLA from card : 0x1
11:23:35: [DVTCommonLib]### CMD Pattern from card : 0xBB
11:23:35: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 1773 ] 
11:23:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508810>, <py_sfcl.CommandDataDefinition object at 0x065087E0>) , Command count = 1774 ] 
11:23:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1775 ] 
11:23:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:35: [ SetBusWidth(0x4) , Command count = 1776 ] 
11:23:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:35: ####CSD Registe 2.0 Values####
11:23:35: CSD_STRUCTURE                                 :0x1
11:23:35: Reserv1                                       :0x0
11:23:35: Time Access 1 TAAC                            :0xe
11:23:35: Time Access 2 NSAC*100                        :0x0
11:23:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:35: Card Command Classess CCC                     :0x5b5
11:23:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:35: DSR(driver stage register)  DSR_IMP           :0x0
11:23:35: Reserv2                                       :0x0
11:23:35: Device Size C_SIZE                            :0xedc8
11:23:35: Reserv3                                       :0x0
11:23:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:35: Reserv4                                       :0x0
11:23:35: Write Speed Factor R2W_FACTOR                 :0x2
11:23:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:35: FILE_FORMAT_GRP                               :0x0
11:23:35: COPY flag                                     :0x1
11:23:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:35: File_Format                                   :0x0
11:23:35: CRC                                           :0x0
11:23:35: ####CSD Registe Values####  

11:23:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:35: ProductSerialNumber = 0x23482900
11:23:35: CardMaximumLBA      = 0x3b72400
11:23:35: CardCapacity        = 32G
11:23:35: Is card secure      = 0
11:23:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:35: [DVTCommonLib]###  LogicalWrite called
11:23:36: [ WriteLba(0x1B6D56C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1777 ] 
11:23:36: [DVTCommonLib]###  LogicalWrite Completed 

11:23:36: [DVTCommonLib]###  LogicalRead called
11:23:38: [ ReadLba(0x1B6D56C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1778 ] 
11:23:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 188 times 
11:23:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBC, 0x0) , Command count = 1779 ] 
11:23:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:38: [DVTCommonLib]### Card response as High Capacity from card
11:23:38: [DVTCommonLib]### VOLA from card : 0x1
11:23:38: [DVTCommonLib]### CMD Pattern from card : 0xBC
11:23:38: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 1780 ] 
11:23:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508BA0>, <py_sfcl.CommandDataDefinition object at 0x06508690>) , Command count = 1781 ] 
11:23:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1782 ] 
11:23:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:38: [ SetBusWidth(0x4) , Command count = 1783 ] 
11:23:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:38: ####CSD Registe 2.0 Values####
11:23:38: CSD_STRUCTURE                                 :0x1
11:23:38: Reserv1                                       :0x0
11:23:38: Time Access 1 TAAC                            :0xe
11:23:38: Time Access 2 NSAC*100                        :0x0
11:23:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:38: Card Command Classess CCC                     :0x5b5
11:23:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:38: DSR(driver stage register)  DSR_IMP           :0x0
11:23:38: Reserv2                                       :0x0
11:23:38: Device Size C_SIZE                            :0xedc8
11:23:38: Reserv3                                       :0x0
11:23:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:38: Reserv4                                       :0x0
11:23:38: Write Speed Factor R2W_FACTOR                 :0x2
11:23:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:38: FILE_FORMAT_GRP                               :0x0
11:23:38: COPY flag                                     :0x1
11:23:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:38: File_Format                                   :0x0
11:23:38: CRC                                           :0x0
11:23:38: ####CSD Registe Values####  

11:23:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:38: ProductSerialNumber = 0x23482900
11:23:38: CardMaximumLBA      = 0x3b72400
11:23:38: CardCapacity        = 32G
11:23:38: Is card secure      = 0
11:23:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:38: [DVTCommonLib]###  LogicalWrite called
11:23:40: [ WriteLba(0x223DE21, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1784 ] 
11:23:40: [DVTCommonLib]###  LogicalWrite Completed 

11:23:40: [DVTCommonLib]###  LogicalRead called
11:23:42: [ ReadLba(0x223DE21, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1785 ] 
11:23:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 189 times 
11:23:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBD, 0x0) , Command count = 1786 ] 
11:23:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:42: [DVTCommonLib]### Card response as High Capacity from card
11:23:42: [DVTCommonLib]### VOLA from card : 0x1
11:23:42: [DVTCommonLib]### CMD Pattern from card : 0xBD
11:23:42: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 1787 ] 
11:23:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE61E0>, <py_sfcl.CommandDataDefinition object at 0x06508660>) , Command count = 1788 ] 
11:23:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1789 ] 
11:23:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:42: [ SetBusWidth(0x4) , Command count = 1790 ] 
11:23:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:42: ####CSD Registe 2.0 Values####
11:23:42: CSD_STRUCTURE                                 :0x1
11:23:42: Reserv1                                       :0x0
11:23:42: Time Access 1 TAAC                            :0xe
11:23:42: Time Access 2 NSAC*100                        :0x0
11:23:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:42: Card Command Classess CCC                     :0x5b5
11:23:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:42: DSR(driver stage register)  DSR_IMP           :0x0
11:23:42: Reserv2                                       :0x0
11:23:42: Device Size C_SIZE                            :0xedc8
11:23:42: Reserv3                                       :0x0
11:23:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:42: Reserv4                                       :0x0
11:23:42: Write Speed Factor R2W_FACTOR                 :0x2
11:23:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:42: FILE_FORMAT_GRP                               :0x0
11:23:42: COPY flag                                     :0x1
11:23:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:42: File_Format                                   :0x0
11:23:42: CRC                                           :0x0
11:23:42: ####CSD Registe Values####  

11:23:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:42: ProductSerialNumber = 0x23482900
11:23:42: CardMaximumLBA      = 0x3b72400
11:23:42: CardCapacity        = 32G
11:23:42: Is card secure      = 0
11:23:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:42: [DVTCommonLib]###  LogicalWrite called
11:23:44: [ WriteLba(0x1984EB8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1791 ] 
11:23:44: [DVTCommonLib]###  LogicalWrite Completed 

11:23:44: [DVTCommonLib]###  LogicalRead called
11:23:45: [ ReadLba(0x1984EB8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1792 ] 
11:23:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 190 times 
11:23:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBE, 0x0) , Command count = 1793 ] 
11:23:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:45: [DVTCommonLib]### Card response as High Capacity from card
11:23:45: [DVTCommonLib]### VOLA from card : 0x1
11:23:45: [DVTCommonLib]### CMD Pattern from card : 0xBE
11:23:45: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x05DD7A80>) , Command count = 1794 ] 
11:23:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6120>, <py_sfcl.CommandDataDefinition object at 0x05DE6CF0>) , Command count = 1795 ] 
11:23:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1796 ] 
11:23:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:45: [ SetBusWidth(0x4) , Command count = 1797 ] 
11:23:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:45: ####CSD Registe 2.0 Values####
11:23:45: CSD_STRUCTURE                                 :0x1
11:23:45: Reserv1                                       :0x0
11:23:45: Time Access 1 TAAC                            :0xe
11:23:45: Time Access 2 NSAC*100                        :0x0
11:23:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:45: Card Command Classess CCC                     :0x5b5
11:23:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:45: DSR(driver stage register)  DSR_IMP           :0x0
11:23:45: Reserv2                                       :0x0
11:23:45: Device Size C_SIZE                            :0xedc8
11:23:45: Reserv3                                       :0x0
11:23:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:45: Reserv4                                       :0x0
11:23:45: Write Speed Factor R2W_FACTOR                 :0x2
11:23:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:45: FILE_FORMAT_GRP                               :0x0
11:23:45: COPY flag                                     :0x1
11:23:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:45: File_Format                                   :0x0
11:23:45: CRC                                           :0x0
11:23:45: ####CSD Registe Values####  

11:23:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:45: ProductSerialNumber = 0x23482900
11:23:45: CardMaximumLBA      = 0x3b72400
11:23:45: CardCapacity        = 32G
11:23:45: Is card secure      = 0
11:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:45: [DVTCommonLib]###  LogicalWrite called
11:23:47: [ WriteLba(0x29047FE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1798 ] 
11:23:47: [DVTCommonLib]###  LogicalWrite Completed 

11:23:47: [DVTCommonLib]###  LogicalRead called
11:23:49: [ ReadLba(0x29047FE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1799 ] 
11:23:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 191 times 
11:23:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBF, 0x0) , Command count = 1800 ] 
11:23:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:49: [DVTCommonLib]### Card response as High Capacity from card
11:23:49: [DVTCommonLib]### VOLA from card : 0x1
11:23:49: [DVTCommonLib]### CMD Pattern from card : 0xBF
11:23:49: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508E70>) , Command count = 1801 ] 
11:23:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF6DE0>, <py_sfcl.CommandDataDefinition object at 0x06508F00>) , Command count = 1802 ] 
11:23:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1803 ] 
11:23:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:49: [ SetBusWidth(0x4) , Command count = 1804 ] 
11:23:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:49: ####CSD Registe 2.0 Values####
11:23:49: CSD_STRUCTURE                                 :0x1
11:23:49: Reserv1                                       :0x0
11:23:49: Time Access 1 TAAC                            :0xe
11:23:49: Time Access 2 NSAC*100                        :0x0
11:23:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:49: Card Command Classess CCC                     :0x5b5
11:23:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:49: DSR(driver stage register)  DSR_IMP           :0x0
11:23:49: Reserv2                                       :0x0
11:23:49: Device Size C_SIZE                            :0xedc8
11:23:49: Reserv3                                       :0x0
11:23:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:49: Reserv4                                       :0x0
11:23:49: Write Speed Factor R2W_FACTOR                 :0x2
11:23:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:49: FILE_FORMAT_GRP                               :0x0
11:23:49: COPY flag                                     :0x1
11:23:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:49: File_Format                                   :0x0
11:23:49: CRC                                           :0x0
11:23:49: ####CSD Registe Values####  

11:23:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:49: ProductSerialNumber = 0x23482900
11:23:49: CardMaximumLBA      = 0x3b72400
11:23:49: CardCapacity        = 32G
11:23:49: Is card secure      = 0
11:23:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:49: [DVTCommonLib]###  LogicalWrite called
11:23:51: [ WriteLba(0xDBD689, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1805 ] 
11:23:51: [DVTCommonLib]###  LogicalWrite Completed 

11:23:51: [DVTCommonLib]###  LogicalRead called
11:23:52: [ ReadLba(0xDBD689, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1806 ] 
11:23:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 192 times 
11:23:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC0, 0x0) , Command count = 1807 ] 
11:23:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:52: [DVTCommonLib]### Card response as High Capacity from card
11:23:52: [DVTCommonLib]### VOLA from card : 0x1
11:23:52: [DVTCommonLib]### CMD Pattern from card : 0xC0
11:23:52: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x05DFAC90>) , Command count = 1808 ] 
11:23:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9BA0>, <py_sfcl.CommandDataDefinition object at 0x06508E40>) , Command count = 1809 ] 
11:23:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1810 ] 
11:23:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:53: [ SetBusWidth(0x4) , Command count = 1811 ] 
11:23:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:53: ####CSD Registe 2.0 Values####
11:23:53: CSD_STRUCTURE                                 :0x1
11:23:53: Reserv1                                       :0x0
11:23:53: Time Access 1 TAAC                            :0xe
11:23:53: Time Access 2 NSAC*100                        :0x0
11:23:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:53: Card Command Classess CCC                     :0x5b5
11:23:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:53: DSR(driver stage register)  DSR_IMP           :0x0
11:23:53: Reserv2                                       :0x0
11:23:53: Device Size C_SIZE                            :0xedc8
11:23:53: Reserv3                                       :0x0
11:23:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:53: Reserv4                                       :0x0
11:23:53: Write Speed Factor R2W_FACTOR                 :0x2
11:23:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:53: FILE_FORMAT_GRP                               :0x0
11:23:53: COPY flag                                     :0x1
11:23:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:53: File_Format                                   :0x0
11:23:53: CRC                                           :0x0
11:23:53: ####CSD Registe Values####  

11:23:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:53: ProductSerialNumber = 0x23482900
11:23:53: CardMaximumLBA      = 0x3b72400
11:23:53: CardCapacity        = 32G
11:23:53: Is card secure      = 0
11:23:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:53: [DVTCommonLib]###  LogicalWrite called
11:23:54: [ WriteLba(0x2E6F4B2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1812 ] 
11:23:54: [DVTCommonLib]###  LogicalWrite Completed 

11:23:54: [DVTCommonLib]###  LogicalRead called
11:23:56: [ ReadLba(0x2E6F4B2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1813 ] 
11:23:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 193 times 
11:23:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC1, 0x0) , Command count = 1814 ] 
11:23:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:23:56: [DVTCommonLib]### Card response as High Capacity from card
11:23:56: [DVTCommonLib]### VOLA from card : 0x1
11:23:56: [DVTCommonLib]### CMD Pattern from card : 0xC1
11:23:56: [DVTCommonLib]### Reserved bits from card : 0x0
11:23:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 1815 ] 
11:23:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488900>, <py_sfcl.CommandDataDefinition object at 0x06508DB0>) , Command count = 1816 ] 
11:23:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:23:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1817 ] 
11:23:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:56: [ SetBusWidth(0x4) , Command count = 1818 ] 
11:23:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:23:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:23:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:56: ####CSD Registe 2.0 Values####
11:23:56: CSD_STRUCTURE                                 :0x1
11:23:56: Reserv1                                       :0x0
11:23:56: Time Access 1 TAAC                            :0xe
11:23:56: Time Access 2 NSAC*100                        :0x0
11:23:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:56: Card Command Classess CCC                     :0x5b5
11:23:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:56: DSR(driver stage register)  DSR_IMP           :0x0
11:23:56: Reserv2                                       :0x0
11:23:56: Device Size C_SIZE                            :0xedc8
11:23:56: Reserv3                                       :0x0
11:23:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:56: Reserv4                                       :0x0
11:23:56: Write Speed Factor R2W_FACTOR                 :0x2
11:23:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:56: FILE_FORMAT_GRP                               :0x0
11:23:56: COPY flag                                     :0x1
11:23:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:56: File_Format                                   :0x0
11:23:56: CRC                                           :0x0
11:23:56: ####CSD Registe Values####  

11:23:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:23:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:23:56: ProductSerialNumber = 0x23482900
11:23:56: CardMaximumLBA      = 0x3b72400
11:23:56: CardCapacity        = 32G
11:23:56: Is card secure      = 0
11:23:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:23:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:23:56: [DVTCommonLib]###  LogicalWrite called
11:23:58: [ WriteLba(0x2539208, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1819 ] 
11:23:58: [DVTCommonLib]###  LogicalWrite Completed 

11:23:58: [DVTCommonLib]###  LogicalRead called
11:23:59: [ ReadLba(0x2539208, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1820 ] 
11:23:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:23:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:23:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 194 times 
11:23:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:23:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC2, 0x0) , Command count = 1821 ] 
11:24:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:00: [DVTCommonLib]### Card response as High Capacity from card
11:24:00: [DVTCommonLib]### VOLA from card : 0x1
11:24:00: [DVTCommonLib]### CMD Pattern from card : 0xC2
11:24:00: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508BD0>, <py_sfcl.CommandDataDefinition object at 0x06508FC0>) , Command count = 1822 ] 
11:24:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065086C0>, <py_sfcl.CommandDataDefinition object at 0x06488A80>) , Command count = 1823 ] 
11:24:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1824 ] 
11:24:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:00: [ SetBusWidth(0x4) , Command count = 1825 ] 
11:24:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:00: ####CSD Registe 2.0 Values####
11:24:00: CSD_STRUCTURE                                 :0x1
11:24:00: Reserv1                                       :0x0
11:24:00: Time Access 1 TAAC                            :0xe
11:24:00: Time Access 2 NSAC*100                        :0x0
11:24:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:00: Card Command Classess CCC                     :0x5b5
11:24:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:00: DSR(driver stage register)  DSR_IMP           :0x0
11:24:00: Reserv2                                       :0x0
11:24:00: Device Size C_SIZE                            :0xedc8
11:24:00: Reserv3                                       :0x0
11:24:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:00: Reserv4                                       :0x0
11:24:00: Write Speed Factor R2W_FACTOR                 :0x2
11:24:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:00: FILE_FORMAT_GRP                               :0x0
11:24:00: COPY flag                                     :0x1
11:24:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:00: File_Format                                   :0x0
11:24:00: CRC                                           :0x0
11:24:00: ####CSD Registe Values####  

11:24:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:00: ProductSerialNumber = 0x23482900
11:24:00: CardMaximumLBA      = 0x3b72400
11:24:00: CardCapacity        = 32G
11:24:00: Is card secure      = 0
11:24:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:00: [DVTCommonLib]###  LogicalWrite called
11:24:01: [ WriteLba(0x599757, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1826 ] 
11:24:01: [DVTCommonLib]###  LogicalWrite Completed 

11:24:01: [DVTCommonLib]###  LogicalRead called
11:24:03: [ ReadLba(0x599757, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1827 ] 
11:24:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 195 times 
11:24:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC3, 0x0) , Command count = 1828 ] 
11:24:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:03: [DVTCommonLib]### Card response as High Capacity from card
11:24:03: [DVTCommonLib]### VOLA from card : 0x1
11:24:03: [DVTCommonLib]### CMD Pattern from card : 0xC3
11:24:03: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 1829 ] 
11:24:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488CF0>, <py_sfcl.CommandDataDefinition object at 0x06488210>) , Command count = 1830 ] 
11:24:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1831 ] 
11:24:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:03: [ SetBusWidth(0x4) , Command count = 1832 ] 
11:24:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:03: ####CSD Registe 2.0 Values####
11:24:03: CSD_STRUCTURE                                 :0x1
11:24:03: Reserv1                                       :0x0
11:24:03: Time Access 1 TAAC                            :0xe
11:24:03: Time Access 2 NSAC*100                        :0x0
11:24:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:03: Card Command Classess CCC                     :0x5b5
11:24:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:03: DSR(driver stage register)  DSR_IMP           :0x0
11:24:03: Reserv2                                       :0x0
11:24:03: Device Size C_SIZE                            :0xedc8
11:24:03: Reserv3                                       :0x0
11:24:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:03: Reserv4                                       :0x0
11:24:03: Write Speed Factor R2W_FACTOR                 :0x2
11:24:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:03: FILE_FORMAT_GRP                               :0x0
11:24:03: COPY flag                                     :0x1
11:24:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:03: File_Format                                   :0x0
11:24:03: CRC                                           :0x0
11:24:03: ####CSD Registe Values####  

11:24:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:03: ProductSerialNumber = 0x23482900
11:24:03: CardMaximumLBA      = 0x3b72400
11:24:03: CardCapacity        = 32G
11:24:03: Is card secure      = 0
11:24:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:03: [DVTCommonLib]###  LogicalWrite called
11:24:05: [ WriteLba(0xE94B20, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1833 ] 
11:24:05: [DVTCommonLib]###  LogicalWrite Completed 

11:24:05: [DVTCommonLib]###  LogicalRead called
11:24:06: [ ReadLba(0xE94B20, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1834 ] 
11:24:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 196 times 
11:24:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC4, 0x0) , Command count = 1835 ] 
11:24:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:07: [DVTCommonLib]### Card response as High Capacity from card
11:24:07: [DVTCommonLib]### VOLA from card : 0x1
11:24:07: [DVTCommonLib]### CMD Pattern from card : 0xC4
11:24:07: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 1836 ] 
11:24:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C90>, <py_sfcl.CommandDataDefinition object at 0x064889C0>) , Command count = 1837 ] 
11:24:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1838 ] 
11:24:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:07: [ SetBusWidth(0x4) , Command count = 1839 ] 
11:24:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:07: ####CSD Registe 2.0 Values####
11:24:07: CSD_STRUCTURE                                 :0x1
11:24:07: Reserv1                                       :0x0
11:24:07: Time Access 1 TAAC                            :0xe
11:24:07: Time Access 2 NSAC*100                        :0x0
11:24:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:07: Card Command Classess CCC                     :0x5b5
11:24:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:07: DSR(driver stage register)  DSR_IMP           :0x0
11:24:07: Reserv2                                       :0x0
11:24:07: Device Size C_SIZE                            :0xedc8
11:24:07: Reserv3                                       :0x0
11:24:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:07: Reserv4                                       :0x0
11:24:07: Write Speed Factor R2W_FACTOR                 :0x2
11:24:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:07: FILE_FORMAT_GRP                               :0x0
11:24:07: COPY flag                                     :0x1
11:24:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:07: File_Format                                   :0x0
11:24:07: CRC                                           :0x0
11:24:07: ####CSD Registe Values####  

11:24:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:07: ProductSerialNumber = 0x23482900
11:24:07: CardMaximumLBA      = 0x3b72400
11:24:07: CardCapacity        = 32G
11:24:07: Is card secure      = 0
11:24:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:07: [DVTCommonLib]###  LogicalWrite called
11:24:08: [ WriteLba(0x29004C1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1840 ] 
11:24:08: [DVTCommonLib]###  LogicalWrite Completed 

11:24:08: [DVTCommonLib]###  LogicalRead called
11:24:10: [ ReadLba(0x29004C1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1841 ] 
11:24:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 197 times 
11:24:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC5, 0x0) , Command count = 1842 ] 
11:24:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:10: [DVTCommonLib]### Card response as High Capacity from card
11:24:10: [DVTCommonLib]### VOLA from card : 0x1
11:24:10: [DVTCommonLib]### CMD Pattern from card : 0xC5
11:24:10: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 1843 ] 
11:24:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488270>, <py_sfcl.CommandDataDefinition object at 0x06488F00>) , Command count = 1844 ] 
11:24:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1845 ] 
11:24:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:10: [ SetBusWidth(0x4) , Command count = 1846 ] 
11:24:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:10: ####CSD Registe 2.0 Values####
11:24:10: CSD_STRUCTURE                                 :0x1
11:24:10: Reserv1                                       :0x0
11:24:10: Time Access 1 TAAC                            :0xe
11:24:10: Time Access 2 NSAC*100                        :0x0
11:24:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:10: Card Command Classess CCC                     :0x5b5
11:24:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:10: DSR(driver stage register)  DSR_IMP           :0x0
11:24:10: Reserv2                                       :0x0
11:24:10: Device Size C_SIZE                            :0xedc8
11:24:10: Reserv3                                       :0x0
11:24:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:10: Reserv4                                       :0x0
11:24:10: Write Speed Factor R2W_FACTOR                 :0x2
11:24:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:10: FILE_FORMAT_GRP                               :0x0
11:24:10: COPY flag                                     :0x1
11:24:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:10: File_Format                                   :0x0
11:24:10: CRC                                           :0x0
11:24:10: ####CSD Registe Values####  

11:24:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:10: ProductSerialNumber = 0x23482900
11:24:10: CardMaximumLBA      = 0x3b72400
11:24:10: CardCapacity        = 32G
11:24:10: Is card secure      = 0
11:24:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:10: [DVTCommonLib]###  LogicalWrite called
11:24:12: [ WriteLba(0x35957F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1847 ] 
11:24:12: [DVTCommonLib]###  LogicalWrite Completed 

11:24:12: [DVTCommonLib]###  LogicalRead called
11:24:14: [ ReadLba(0x35957F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1848 ] 
11:24:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:14: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 198 times 
11:24:14: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC6, 0x0) , Command count = 1849 ] 
11:24:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:14: [DVTCommonLib]### Card response as High Capacity from card
11:24:14: [DVTCommonLib]### VOLA from card : 0x1
11:24:14: [DVTCommonLib]### CMD Pattern from card : 0xC6
11:24:14: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1E0>, <py_sfcl.CommandDataDefinition object at 0x06488C30>) , Command count = 1850 ] 
11:24:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7B10>, <py_sfcl.CommandDataDefinition object at 0x064B9870>) , Command count = 1851 ] 
11:24:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1852 ] 
11:24:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:14: [ SetBusWidth(0x4) , Command count = 1853 ] 
11:24:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:14: ####CSD Registe 2.0 Values####
11:24:14: CSD_STRUCTURE                                 :0x1
11:24:14: Reserv1                                       :0x0
11:24:14: Time Access 1 TAAC                            :0xe
11:24:14: Time Access 2 NSAC*100                        :0x0
11:24:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:14: Card Command Classess CCC                     :0x5b5
11:24:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:14: DSR(driver stage register)  DSR_IMP           :0x0
11:24:14: Reserv2                                       :0x0
11:24:14: Device Size C_SIZE                            :0xedc8
11:24:14: Reserv3                                       :0x0
11:24:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:14: Reserv4                                       :0x0
11:24:14: Write Speed Factor R2W_FACTOR                 :0x2
11:24:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:14: FILE_FORMAT_GRP                               :0x0
11:24:14: COPY flag                                     :0x1
11:24:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:14: File_Format                                   :0x0
11:24:14: CRC                                           :0x0
11:24:14: ####CSD Registe Values####  

11:24:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:14: ProductSerialNumber = 0x23482900
11:24:14: CardMaximumLBA      = 0x3b72400
11:24:14: CardCapacity        = 32G
11:24:14: Is card secure      = 0
11:24:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:14: [DVTCommonLib]###  LogicalWrite called
11:24:16: [ WriteLba(0x2AAA3D2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1854 ] 
11:24:16: [DVTCommonLib]###  LogicalWrite Completed 

11:24:16: [DVTCommonLib]###  LogicalRead called
11:24:17: [ ReadLba(0x2AAA3D2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1855 ] 
11:24:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 199 times 
11:24:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC7, 0x0) , Command count = 1856 ] 
11:24:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:17: [DVTCommonLib]### Card response as High Capacity from card
11:24:17: [DVTCommonLib]### VOLA from card : 0x1
11:24:17: [DVTCommonLib]### CMD Pattern from card : 0xC7
11:24:17: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064882A0>, <py_sfcl.CommandDataDefinition object at 0x064B99F0>) , Command count = 1857 ] 
11:24:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B96F0>, <py_sfcl.CommandDataDefinition object at 0x064AB1B0>) , Command count = 1858 ] 
11:24:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1859 ] 
11:24:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:17: [ SetBusWidth(0x4) , Command count = 1860 ] 
11:24:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:17: ####CSD Registe 2.0 Values####
11:24:17: CSD_STRUCTURE                                 :0x1
11:24:17: Reserv1                                       :0x0
11:24:17: Time Access 1 TAAC                            :0xe
11:24:17: Time Access 2 NSAC*100                        :0x0
11:24:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:17: Card Command Classess CCC                     :0x5b5
11:24:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:17: DSR(driver stage register)  DSR_IMP           :0x0
11:24:17: Reserv2                                       :0x0
11:24:17: Device Size C_SIZE                            :0xedc8
11:24:17: Reserv3                                       :0x0
11:24:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:17: Reserv4                                       :0x0
11:24:17: Write Speed Factor R2W_FACTOR                 :0x2
11:24:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:17: FILE_FORMAT_GRP                               :0x0
11:24:17: COPY flag                                     :0x1
11:24:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:17: File_Format                                   :0x0
11:24:17: CRC                                           :0x0
11:24:17: ####CSD Registe Values####  

11:24:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:17: ProductSerialNumber = 0x23482900
11:24:17: CardMaximumLBA      = 0x3b72400
11:24:17: CardCapacity        = 32G
11:24:17: Is card secure      = 0
11:24:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:17: [DVTCommonLib]###  LogicalWrite called
11:24:19: [ WriteLba(0x3874DB9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1861 ] 
11:24:19: [DVTCommonLib]###  LogicalWrite Completed 

11:24:19: [DVTCommonLib]###  LogicalRead called
11:24:21: [ ReadLba(0x3874DB9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1862 ] 
11:24:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 200 times 
11:24:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC8, 0x0) , Command count = 1863 ] 
11:24:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:21: [DVTCommonLib]### Card response as High Capacity from card
11:24:21: [DVTCommonLib]### VOLA from card : 0x1
11:24:21: [DVTCommonLib]### CMD Pattern from card : 0xC8
11:24:21: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x064B9E40>) , Command count = 1864 ] 
11:24:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB0C0>, <py_sfcl.CommandDataDefinition object at 0x064B9F60>) , Command count = 1865 ] 
11:24:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1866 ] 
11:24:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:21: [ SetBusWidth(0x4) , Command count = 1867 ] 
11:24:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:21: ####CSD Registe 2.0 Values####
11:24:21: CSD_STRUCTURE                                 :0x1
11:24:21: Reserv1                                       :0x0
11:24:21: Time Access 1 TAAC                            :0xe
11:24:21: Time Access 2 NSAC*100                        :0x0
11:24:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:21: Card Command Classess CCC                     :0x5b5
11:24:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:21: DSR(driver stage register)  DSR_IMP           :0x0
11:24:21: Reserv2                                       :0x0
11:24:21: Device Size C_SIZE                            :0xedc8
11:24:21: Reserv3                                       :0x0
11:24:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:21: Reserv4                                       :0x0
11:24:21: Write Speed Factor R2W_FACTOR                 :0x2
11:24:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:21: FILE_FORMAT_GRP                               :0x0
11:24:21: COPY flag                                     :0x1
11:24:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:21: File_Format                                   :0x0
11:24:21: CRC                                           :0x0
11:24:21: ####CSD Registe Values####  

11:24:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:21: ProductSerialNumber = 0x23482900
11:24:21: CardMaximumLBA      = 0x3b72400
11:24:21: CardCapacity        = 32G
11:24:21: Is card secure      = 0
11:24:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:21: [DVTCommonLib]###  LogicalWrite called
11:24:23: [ WriteLba(0x467DB3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1868 ] 
11:24:23: [DVTCommonLib]###  LogicalWrite Completed 

11:24:23: [DVTCommonLib]###  LogicalRead called
11:24:24: [ ReadLba(0x467DB3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1869 ] 
11:24:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 201 times 
11:24:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC9, 0x0) , Command count = 1870 ] 
11:24:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:24: [DVTCommonLib]### Card response as High Capacity from card
11:24:24: [DVTCommonLib]### VOLA from card : 0x1
11:24:24: [DVTCommonLib]### CMD Pattern from card : 0xC9
11:24:24: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 1871 ] 
11:24:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9750>, <py_sfcl.CommandDataDefinition object at 0x05DFAA80>) , Command count = 1872 ] 
11:24:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1873 ] 
11:24:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:25: [ SetBusWidth(0x4) , Command count = 1874 ] 
11:24:25: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:25: ####CSD Registe 2.0 Values####
11:24:25: CSD_STRUCTURE                                 :0x1
11:24:25: Reserv1                                       :0x0
11:24:25: Time Access 1 TAAC                            :0xe
11:24:25: Time Access 2 NSAC*100                        :0x0
11:24:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:25: Card Command Classess CCC                     :0x5b5
11:24:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:25: DSR(driver stage register)  DSR_IMP           :0x0
11:24:25: Reserv2                                       :0x0
11:24:25: Device Size C_SIZE                            :0xedc8
11:24:25: Reserv3                                       :0x0
11:24:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:25: Reserv4                                       :0x0
11:24:25: Write Speed Factor R2W_FACTOR                 :0x2
11:24:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:25: FILE_FORMAT_GRP                               :0x0
11:24:25: COPY flag                                     :0x1
11:24:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:25: File_Format                                   :0x0
11:24:25: CRC                                           :0x0
11:24:25: ####CSD Registe Values####  

11:24:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:25: ProductSerialNumber = 0x23482900
11:24:25: CardMaximumLBA      = 0x3b72400
11:24:25: CardCapacity        = 32G
11:24:25: Is card secure      = 0
11:24:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:25: [DVTCommonLib]###  LogicalWrite called
11:24:26: [ WriteLba(0x3529C17, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1875 ] 
11:24:26: [DVTCommonLib]###  LogicalWrite Completed 

11:24:26: [DVTCommonLib]###  LogicalRead called
11:24:28: [ ReadLba(0x3529C17, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1876 ] 
11:24:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 202 times 
11:24:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCA, 0x0) , Command count = 1877 ] 
11:24:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:28: [DVTCommonLib]### Card response as High Capacity from card
11:24:28: [DVTCommonLib]### VOLA from card : 0x1
11:24:28: [DVTCommonLib]### CMD Pattern from card : 0xCA
11:24:28: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488330>, <py_sfcl.CommandDataDefinition object at 0x064881E0>) , Command count = 1878 ] 
11:24:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9F90>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 1879 ] 
11:24:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1880 ] 
11:24:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:28: [ SetBusWidth(0x4) , Command count = 1881 ] 
11:24:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:28: ####CSD Registe 2.0 Values####
11:24:28: CSD_STRUCTURE                                 :0x1
11:24:28: Reserv1                                       :0x0
11:24:28: Time Access 1 TAAC                            :0xe
11:24:28: Time Access 2 NSAC*100                        :0x0
11:24:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:28: Card Command Classess CCC                     :0x5b5
11:24:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:28: DSR(driver stage register)  DSR_IMP           :0x0
11:24:28: Reserv2                                       :0x0
11:24:28: Device Size C_SIZE                            :0xedc8
11:24:28: Reserv3                                       :0x0
11:24:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:28: Reserv4                                       :0x0
11:24:28: Write Speed Factor R2W_FACTOR                 :0x2
11:24:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:28: FILE_FORMAT_GRP                               :0x0
11:24:28: COPY flag                                     :0x1
11:24:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:28: File_Format                                   :0x0
11:24:28: CRC                                           :0x0
11:24:28: ####CSD Registe Values####  

11:24:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:28: ProductSerialNumber = 0x23482900
11:24:28: CardMaximumLBA      = 0x3b72400
11:24:28: CardCapacity        = 32G
11:24:28: Is card secure      = 0
11:24:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:28: [DVTCommonLib]###  LogicalWrite called
11:24:30: [ WriteLba(0x5BF1F6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1882 ] 
11:24:30: [DVTCommonLib]###  LogicalWrite Completed 

11:24:30: [DVTCommonLib]###  LogicalRead called
11:24:31: [ ReadLba(0x5BF1F6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1883 ] 
11:24:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 203 times 
11:24:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCB, 0x0) , Command count = 1884 ] 
11:24:32: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:32: [DVTCommonLib]### Card response as High Capacity from card
11:24:32: [DVTCommonLib]### VOLA from card : 0x1
11:24:32: [DVTCommonLib]### CMD Pattern from card : 0xCB
11:24:32: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 1885 ] 
11:24:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9FC0>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 1886 ] 
11:24:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1887 ] 
11:24:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:32: [ SetBusWidth(0x4) , Command count = 1888 ] 
11:24:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:32: ####CSD Registe 2.0 Values####
11:24:32: CSD_STRUCTURE                                 :0x1
11:24:32: Reserv1                                       :0x0
11:24:32: Time Access 1 TAAC                            :0xe
11:24:32: Time Access 2 NSAC*100                        :0x0
11:24:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:32: Card Command Classess CCC                     :0x5b5
11:24:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:32: DSR(driver stage register)  DSR_IMP           :0x0
11:24:32: Reserv2                                       :0x0
11:24:32: Device Size C_SIZE                            :0xedc8
11:24:32: Reserv3                                       :0x0
11:24:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:32: Reserv4                                       :0x0
11:24:32: Write Speed Factor R2W_FACTOR                 :0x2
11:24:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:32: FILE_FORMAT_GRP                               :0x0
11:24:32: COPY flag                                     :0x1
11:24:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:32: File_Format                                   :0x0
11:24:32: CRC                                           :0x0
11:24:32: ####CSD Registe Values####  

11:24:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:32: ProductSerialNumber = 0x23482900
11:24:32: CardMaximumLBA      = 0x3b72400
11:24:32: CardCapacity        = 32G
11:24:32: Is card secure      = 0
11:24:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:32: [DVTCommonLib]###  LogicalWrite called
11:24:33: [ WriteLba(0xF0ABE1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1889 ] 
11:24:33: [DVTCommonLib]###  LogicalWrite Completed 

11:24:33: [DVTCommonLib]###  LogicalRead called
11:24:35: [ ReadLba(0xF0ABE1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1890 ] 
11:24:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 204 times 
11:24:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCC, 0x0) , Command count = 1891 ] 
11:24:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:35: [DVTCommonLib]### Card response as High Capacity from card
11:24:35: [DVTCommonLib]### VOLA from card : 0x1
11:24:35: [DVTCommonLib]### CMD Pattern from card : 0xCC
11:24:35: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508210>) , Command count = 1892 ] 
11:24:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9C30>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 1893 ] 
11:24:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1894 ] 
11:24:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:35: [ SetBusWidth(0x4) , Command count = 1895 ] 
11:24:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:35: ####CSD Registe 2.0 Values####
11:24:35: CSD_STRUCTURE                                 :0x1
11:24:35: Reserv1                                       :0x0
11:24:35: Time Access 1 TAAC                            :0xe
11:24:35: Time Access 2 NSAC*100                        :0x0
11:24:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:35: Card Command Classess CCC                     :0x5b5
11:24:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:35: DSR(driver stage register)  DSR_IMP           :0x0
11:24:35: Reserv2                                       :0x0
11:24:35: Device Size C_SIZE                            :0xedc8
11:24:35: Reserv3                                       :0x0
11:24:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:35: Reserv4                                       :0x0
11:24:35: Write Speed Factor R2W_FACTOR                 :0x2
11:24:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:35: FILE_FORMAT_GRP                               :0x0
11:24:35: COPY flag                                     :0x1
11:24:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:35: File_Format                                   :0x0
11:24:35: CRC                                           :0x0
11:24:35: ####CSD Registe Values####  

11:24:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:35: ProductSerialNumber = 0x23482900
11:24:35: CardMaximumLBA      = 0x3b72400
11:24:35: CardCapacity        = 32G
11:24:35: Is card secure      = 0
11:24:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:35: [DVTCommonLib]###  LogicalWrite called
11:24:37: [ WriteLba(0x29AD1E8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1896 ] 
11:24:37: [DVTCommonLib]###  LogicalWrite Completed 

11:24:37: [DVTCommonLib]###  LogicalRead called
11:24:39: [ ReadLba(0x29AD1E8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1897 ] 
11:24:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:39: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 205 times 
11:24:39: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCD, 0x0) , Command count = 1898 ] 
11:24:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:39: [DVTCommonLib]### Card response as High Capacity from card
11:24:39: [DVTCommonLib]### VOLA from card : 0x1
11:24:39: [DVTCommonLib]### CMD Pattern from card : 0xCD
11:24:39: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB2A0>, <py_sfcl.CommandDataDefinition object at 0x065064E0>) , Command count = 1899 ] 
11:24:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9A20>, <py_sfcl.CommandDataDefinition object at 0x064B9990>) , Command count = 1900 ] 
11:24:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1901 ] 
11:24:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:39: [ SetBusWidth(0x4) , Command count = 1902 ] 
11:24:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:39: ####CSD Registe 2.0 Values####
11:24:39: CSD_STRUCTURE                                 :0x1
11:24:39: Reserv1                                       :0x0
11:24:39: Time Access 1 TAAC                            :0xe
11:24:39: Time Access 2 NSAC*100                        :0x0
11:24:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:39: Card Command Classess CCC                     :0x5b5
11:24:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:39: DSR(driver stage register)  DSR_IMP           :0x0
11:24:39: Reserv2                                       :0x0
11:24:39: Device Size C_SIZE                            :0xedc8
11:24:39: Reserv3                                       :0x0
11:24:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:39: Reserv4                                       :0x0
11:24:39: Write Speed Factor R2W_FACTOR                 :0x2
11:24:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:39: FILE_FORMAT_GRP                               :0x0
11:24:39: COPY flag                                     :0x1
11:24:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:39: File_Format                                   :0x0
11:24:39: CRC                                           :0x0
11:24:39: ####CSD Registe Values####  

11:24:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:39: ProductSerialNumber = 0x23482900
11:24:39: CardMaximumLBA      = 0x3b72400
11:24:39: CardCapacity        = 32G
11:24:39: Is card secure      = 0
11:24:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:39: [DVTCommonLib]###  LogicalWrite called
11:24:41: [ WriteLba(0x2BE11BD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1903 ] 
11:24:41: [DVTCommonLib]###  LogicalWrite Completed 

11:24:41: [DVTCommonLib]###  LogicalRead called
11:24:42: [ ReadLba(0x2BE11BD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1904 ] 
11:24:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 206 times 
11:24:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCE, 0x0) , Command count = 1905 ] 
11:24:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:42: [DVTCommonLib]### Card response as High Capacity from card
11:24:42: [DVTCommonLib]### VOLA from card : 0x1
11:24:42: [DVTCommonLib]### CMD Pattern from card : 0xCE
11:24:42: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488060>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 1906 ] 
11:24:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508630>, <py_sfcl.CommandDataDefinition object at 0x06506F90>) , Command count = 1907 ] 
11:24:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1908 ] 
11:24:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:42: [ SetBusWidth(0x4) , Command count = 1909 ] 
11:24:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:42: ####CSD Registe 2.0 Values####
11:24:42: CSD_STRUCTURE                                 :0x1
11:24:42: Reserv1                                       :0x0
11:24:42: Time Access 1 TAAC                            :0xe
11:24:42: Time Access 2 NSAC*100                        :0x0
11:24:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:42: Card Command Classess CCC                     :0x5b5
11:24:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:42: DSR(driver stage register)  DSR_IMP           :0x0
11:24:42: Reserv2                                       :0x0
11:24:42: Device Size C_SIZE                            :0xedc8
11:24:42: Reserv3                                       :0x0
11:24:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:42: Reserv4                                       :0x0
11:24:42: Write Speed Factor R2W_FACTOR                 :0x2
11:24:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:42: FILE_FORMAT_GRP                               :0x0
11:24:42: COPY flag                                     :0x1
11:24:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:42: File_Format                                   :0x0
11:24:42: CRC                                           :0x0
11:24:42: ####CSD Registe Values####  

11:24:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:42: ProductSerialNumber = 0x23482900
11:24:42: CardMaximumLBA      = 0x3b72400
11:24:42: CardCapacity        = 32G
11:24:42: Is card secure      = 0
11:24:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:42: [DVTCommonLib]###  LogicalWrite called
11:24:44: [ WriteLba(0x227C106, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1910 ] 
11:24:44: [DVTCommonLib]###  LogicalWrite Completed 

11:24:44: [DVTCommonLib]###  LogicalRead called
11:24:46: [ ReadLba(0x227C106, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1911 ] 
11:24:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:46: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 207 times 
11:24:46: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCF, 0x0) , Command count = 1912 ] 
11:24:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:46: [DVTCommonLib]### Card response as High Capacity from card
11:24:46: [DVTCommonLib]### VOLA from card : 0x1
11:24:46: [DVTCommonLib]### CMD Pattern from card : 0xCF
11:24:46: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889F0>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 1913 ] 
11:24:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065066F0>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 1914 ] 
11:24:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1915 ] 
11:24:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:46: [ SetBusWidth(0x4) , Command count = 1916 ] 
11:24:46: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:46: ####CSD Registe 2.0 Values####
11:24:46: CSD_STRUCTURE                                 :0x1
11:24:46: Reserv1                                       :0x0
11:24:46: Time Access 1 TAAC                            :0xe
11:24:46: Time Access 2 NSAC*100                        :0x0
11:24:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:46: Card Command Classess CCC                     :0x5b5
11:24:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:46: DSR(driver stage register)  DSR_IMP           :0x0
11:24:46: Reserv2                                       :0x0
11:24:46: Device Size C_SIZE                            :0xedc8
11:24:46: Reserv3                                       :0x0
11:24:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:46: Reserv4                                       :0x0
11:24:46: Write Speed Factor R2W_FACTOR                 :0x2
11:24:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:46: FILE_FORMAT_GRP                               :0x0
11:24:46: COPY flag                                     :0x1
11:24:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:46: File_Format                                   :0x0
11:24:46: CRC                                           :0x0
11:24:46: ####CSD Registe Values####  

11:24:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:46: ProductSerialNumber = 0x23482900
11:24:46: CardMaximumLBA      = 0x3b72400
11:24:46: CardCapacity        = 32G
11:24:46: Is card secure      = 0
11:24:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:46: [DVTCommonLib]###  LogicalWrite called
11:24:48: [ WriteLba(0x196C3D0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1917 ] 
11:24:48: [DVTCommonLib]###  LogicalWrite Completed 

11:24:48: [DVTCommonLib]###  LogicalRead called
11:24:49: [ ReadLba(0x196C3D0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1918 ] 
11:24:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 208 times 
11:24:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD0, 0x0) , Command count = 1919 ] 
11:24:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:49: [DVTCommonLib]### Card response as High Capacity from card
11:24:49: [DVTCommonLib]### VOLA from card : 0x1
11:24:49: [DVTCommonLib]### CMD Pattern from card : 0xD0
11:24:49: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DB0>, <py_sfcl.CommandDataDefinition object at 0x064B9F30>) , Command count = 1920 ] 
11:24:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506E40>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 1921 ] 
11:24:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1922 ] 
11:24:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:50: [ SetBusWidth(0x4) , Command count = 1923 ] 
11:24:50: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:50: ####CSD Registe 2.0 Values####
11:24:50: CSD_STRUCTURE                                 :0x1
11:24:50: Reserv1                                       :0x0
11:24:50: Time Access 1 TAAC                            :0xe
11:24:50: Time Access 2 NSAC*100                        :0x0
11:24:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:50: Card Command Classess CCC                     :0x5b5
11:24:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:50: DSR(driver stage register)  DSR_IMP           :0x0
11:24:50: Reserv2                                       :0x0
11:24:50: Device Size C_SIZE                            :0xedc8
11:24:50: Reserv3                                       :0x0
11:24:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:50: Reserv4                                       :0x0
11:24:50: Write Speed Factor R2W_FACTOR                 :0x2
11:24:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:50: FILE_FORMAT_GRP                               :0x0
11:24:50: COPY flag                                     :0x1
11:24:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:50: File_Format                                   :0x0
11:24:50: CRC                                           :0x0
11:24:50: ####CSD Registe Values####  

11:24:50: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:50: ProductSerialNumber = 0x23482900
11:24:50: CardMaximumLBA      = 0x3b72400
11:24:50: CardCapacity        = 32G
11:24:50: Is card secure      = 0
11:24:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:50: [DVTCommonLib]###  LogicalWrite called
11:24:51: [ WriteLba(0x1F7DA28, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1924 ] 
11:24:51: [DVTCommonLib]###  LogicalWrite Completed 

11:24:51: [DVTCommonLib]###  LogicalRead called
11:24:53: [ ReadLba(0x1F7DA28, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1925 ] 
11:24:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 209 times 
11:24:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD1, 0x0) , Command count = 1926 ] 
11:24:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:53: [DVTCommonLib]### Card response as High Capacity from card
11:24:53: [DVTCommonLib]### VOLA from card : 0x1
11:24:53: [DVTCommonLib]### CMD Pattern from card : 0xD1
11:24:53: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9BD0>, <py_sfcl.CommandDataDefinition object at 0x06506480>) , Command count = 1927 ] 
11:24:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506BA0>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 1928 ] 
11:24:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1929 ] 
11:24:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:53: [ SetBusWidth(0x4) , Command count = 1930 ] 
11:24:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:53: ####CSD Registe 2.0 Values####
11:24:53: CSD_STRUCTURE                                 :0x1
11:24:53: Reserv1                                       :0x0
11:24:53: Time Access 1 TAAC                            :0xe
11:24:53: Time Access 2 NSAC*100                        :0x0
11:24:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:53: Card Command Classess CCC                     :0x5b5
11:24:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:53: DSR(driver stage register)  DSR_IMP           :0x0
11:24:53: Reserv2                                       :0x0
11:24:53: Device Size C_SIZE                            :0xedc8
11:24:53: Reserv3                                       :0x0
11:24:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:53: Reserv4                                       :0x0
11:24:53: Write Speed Factor R2W_FACTOR                 :0x2
11:24:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:53: FILE_FORMAT_GRP                               :0x0
11:24:53: COPY flag                                     :0x1
11:24:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:53: File_Format                                   :0x0
11:24:53: CRC                                           :0x0
11:24:53: ####CSD Registe Values####  

11:24:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:53: ProductSerialNumber = 0x23482900
11:24:53: CardMaximumLBA      = 0x3b72400
11:24:53: CardCapacity        = 32G
11:24:53: Is card secure      = 0
11:24:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:53: [DVTCommonLib]###  LogicalWrite called
11:24:55: [ WriteLba(0x348B157, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1931 ] 
11:24:55: [DVTCommonLib]###  LogicalWrite Completed 

11:24:55: [DVTCommonLib]###  LogicalRead called
11:24:56: [ ReadLba(0x348B157, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1932 ] 
11:24:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:24:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:24:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 210 times 
11:24:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:24:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD2, 0x0) , Command count = 1933 ] 
11:24:57: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:24:57: [DVTCommonLib]### Card response as High Capacity from card
11:24:57: [DVTCommonLib]### VOLA from card : 0x1
11:24:57: [DVTCommonLib]### CMD Pattern from card : 0xD2
11:24:57: [DVTCommonLib]### Reserved bits from card : 0x0
11:24:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506960>, <py_sfcl.CommandDataDefinition object at 0x064DF060>) , Command count = 1934 ] 
11:24:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064886C0>, <py_sfcl.CommandDataDefinition object at 0x064DF9F0>) , Command count = 1935 ] 
11:24:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:24:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1936 ] 
11:24:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:57: [ SetBusWidth(0x4) , Command count = 1937 ] 
11:24:57: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:24:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:24:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:57: ####CSD Registe 2.0 Values####
11:24:57: CSD_STRUCTURE                                 :0x1
11:24:57: Reserv1                                       :0x0
11:24:57: Time Access 1 TAAC                            :0xe
11:24:57: Time Access 2 NSAC*100                        :0x0
11:24:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:57: Card Command Classess CCC                     :0x5b5
11:24:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:57: DSR(driver stage register)  DSR_IMP           :0x0
11:24:57: Reserv2                                       :0x0
11:24:57: Device Size C_SIZE                            :0xedc8
11:24:57: Reserv3                                       :0x0
11:24:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:57: Reserv4                                       :0x0
11:24:57: Write Speed Factor R2W_FACTOR                 :0x2
11:24:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:57: FILE_FORMAT_GRP                               :0x0
11:24:57: COPY flag                                     :0x1
11:24:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:57: File_Format                                   :0x0
11:24:57: CRC                                           :0x0
11:24:57: ####CSD Registe Values####  

11:24:57: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:24:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:24:57: ProductSerialNumber = 0x23482900
11:24:57: CardMaximumLBA      = 0x3b72400
11:24:57: CardCapacity        = 32G
11:24:57: Is card secure      = 0
11:24:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:24:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:24:57: [DVTCommonLib]###  LogicalWrite called
11:24:58: [ WriteLba(0x113396E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1938 ] 
11:24:58: [DVTCommonLib]###  LogicalWrite Completed 

11:24:58: [DVTCommonLib]###  LogicalRead called
11:25:00: [ ReadLba(0x113396E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1939 ] 
11:25:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 211 times 
11:25:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD3, 0x0) , Command count = 1940 ] 
11:25:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:00: [DVTCommonLib]### Card response as High Capacity from card
11:25:00: [DVTCommonLib]### VOLA from card : 0x1
11:25:00: [DVTCommonLib]### CMD Pattern from card : 0xD3
11:25:00: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 1941 ] 
11:25:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFBA0>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 1942 ] 
11:25:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1943 ] 
11:25:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:00: [ SetBusWidth(0x4) , Command count = 1944 ] 
11:25:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:00: ####CSD Registe 2.0 Values####
11:25:00: CSD_STRUCTURE                                 :0x1
11:25:00: Reserv1                                       :0x0
11:25:00: Time Access 1 TAAC                            :0xe
11:25:00: Time Access 2 NSAC*100                        :0x0
11:25:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:00: Card Command Classess CCC                     :0x5b5
11:25:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:00: DSR(driver stage register)  DSR_IMP           :0x0
11:25:00: Reserv2                                       :0x0
11:25:00: Device Size C_SIZE                            :0xedc8
11:25:00: Reserv3                                       :0x0
11:25:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:00: Reserv4                                       :0x0
11:25:00: Write Speed Factor R2W_FACTOR                 :0x2
11:25:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:00: FILE_FORMAT_GRP                               :0x0
11:25:00: COPY flag                                     :0x1
11:25:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:00: File_Format                                   :0x0
11:25:00: CRC                                           :0x0
11:25:00: ####CSD Registe Values####  

11:25:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:00: ProductSerialNumber = 0x23482900
11:25:00: CardMaximumLBA      = 0x3b72400
11:25:00: CardCapacity        = 32G
11:25:00: Is card secure      = 0
11:25:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:00: [DVTCommonLib]###  LogicalWrite called
11:25:02: [ WriteLba(0x37C3D02, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1945 ] 
11:25:02: [DVTCommonLib]###  LogicalWrite Completed 

11:25:02: [DVTCommonLib]###  LogicalRead called
11:25:03: [ ReadLba(0x37C3D02, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1946 ] 
11:25:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 212 times 
11:25:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD4, 0x0) , Command count = 1947 ] 
11:25:04: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:04: [DVTCommonLib]### Card response as High Capacity from card
11:25:04: [DVTCommonLib]### VOLA from card : 0x1
11:25:04: [DVTCommonLib]### CMD Pattern from card : 0xD4
11:25:04: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 1948 ] 
11:25:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFC30>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 1949 ] 
11:25:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1950 ] 
11:25:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:04: [ SetBusWidth(0x4) , Command count = 1951 ] 
11:25:04: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:04: ####CSD Registe 2.0 Values####
11:25:04: CSD_STRUCTURE                                 :0x1
11:25:04: Reserv1                                       :0x0
11:25:04: Time Access 1 TAAC                            :0xe
11:25:04: Time Access 2 NSAC*100                        :0x0
11:25:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:04: Card Command Classess CCC                     :0x5b5
11:25:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:04: DSR(driver stage register)  DSR_IMP           :0x0
11:25:04: Reserv2                                       :0x0
11:25:04: Device Size C_SIZE                            :0xedc8
11:25:04: Reserv3                                       :0x0
11:25:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:04: Reserv4                                       :0x0
11:25:04: Write Speed Factor R2W_FACTOR                 :0x2
11:25:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:04: FILE_FORMAT_GRP                               :0x0
11:25:04: COPY flag                                     :0x1
11:25:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:04: File_Format                                   :0x0
11:25:04: CRC                                           :0x0
11:25:04: ####CSD Registe Values####  

11:25:04: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:04: ProductSerialNumber = 0x23482900
11:25:04: CardMaximumLBA      = 0x3b72400
11:25:04: CardCapacity        = 32G
11:25:04: Is card secure      = 0
11:25:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:04: [DVTCommonLib]###  LogicalWrite called
11:25:05: [ WriteLba(0xA24564, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1952 ] 
11:25:05: [DVTCommonLib]###  LogicalWrite Completed 

11:25:05: [DVTCommonLib]###  LogicalRead called
11:25:07: [ ReadLba(0xA24564, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1953 ] 
11:25:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:07: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 213 times 
11:25:07: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD5, 0x0) , Command count = 1954 ] 
11:25:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:07: [DVTCommonLib]### Card response as High Capacity from card
11:25:07: [DVTCommonLib]### VOLA from card : 0x1
11:25:07: [DVTCommonLib]### CMD Pattern from card : 0xD5
11:25:07: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 1955 ] 
11:25:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF450>, <py_sfcl.CommandDataDefinition object at 0x064DFAE0>) , Command count = 1956 ] 
11:25:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1957 ] 
11:25:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:07: [ SetBusWidth(0x4) , Command count = 1958 ] 
11:25:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:07: ####CSD Registe 2.0 Values####
11:25:07: CSD_STRUCTURE                                 :0x1
11:25:07: Reserv1                                       :0x0
11:25:07: Time Access 1 TAAC                            :0xe
11:25:07: Time Access 2 NSAC*100                        :0x0
11:25:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:07: Card Command Classess CCC                     :0x5b5
11:25:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:07: DSR(driver stage register)  DSR_IMP           :0x0
11:25:07: Reserv2                                       :0x0
11:25:07: Device Size C_SIZE                            :0xedc8
11:25:07: Reserv3                                       :0x0
11:25:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:07: Reserv4                                       :0x0
11:25:07: Write Speed Factor R2W_FACTOR                 :0x2
11:25:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:07: FILE_FORMAT_GRP                               :0x0
11:25:07: COPY flag                                     :0x1
11:25:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:07: File_Format                                   :0x0
11:25:07: CRC                                           :0x0
11:25:07: ####CSD Registe Values####  

11:25:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:07: ProductSerialNumber = 0x23482900
11:25:07: CardMaximumLBA      = 0x3b72400
11:25:07: CardCapacity        = 32G
11:25:07: Is card secure      = 0
11:25:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:07: [DVTCommonLib]###  LogicalWrite called
11:25:09: [ WriteLba(0xFD05E4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1959 ] 
11:25:09: [DVTCommonLib]###  LogicalWrite Completed 

11:25:09: [DVTCommonLib]###  LogicalRead called
11:25:11: [ ReadLba(0xFD05E4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1960 ] 
11:25:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:11: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 214 times 
11:25:11: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD6, 0x0) , Command count = 1961 ] 
11:25:11: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:11: [DVTCommonLib]### Card response as High Capacity from card
11:25:11: [DVTCommonLib]### VOLA from card : 0x1
11:25:11: [DVTCommonLib]### CMD Pattern from card : 0xD6
11:25:11: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506030>, <py_sfcl.CommandDataDefinition object at 0x064DFED0>) , Command count = 1962 ] 
11:25:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF870>, <py_sfcl.CommandDataDefinition object at 0x064DF6F0>) , Command count = 1963 ] 
11:25:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1964 ] 
11:25:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:11: [ SetBusWidth(0x4) , Command count = 1965 ] 
11:25:11: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:11: ####CSD Registe 2.0 Values####
11:25:11: CSD_STRUCTURE                                 :0x1
11:25:11: Reserv1                                       :0x0
11:25:11: Time Access 1 TAAC                            :0xe
11:25:11: Time Access 2 NSAC*100                        :0x0
11:25:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:11: Card Command Classess CCC                     :0x5b5
11:25:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:11: DSR(driver stage register)  DSR_IMP           :0x0
11:25:11: Reserv2                                       :0x0
11:25:11: Device Size C_SIZE                            :0xedc8
11:25:11: Reserv3                                       :0x0
11:25:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:11: Reserv4                                       :0x0
11:25:11: Write Speed Factor R2W_FACTOR                 :0x2
11:25:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:11: FILE_FORMAT_GRP                               :0x0
11:25:11: COPY flag                                     :0x1
11:25:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:11: File_Format                                   :0x0
11:25:11: CRC                                           :0x0
11:25:11: ####CSD Registe Values####  

11:25:11: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:11: ProductSerialNumber = 0x23482900
11:25:11: CardMaximumLBA      = 0x3b72400
11:25:11: CardCapacity        = 32G
11:25:11: Is card secure      = 0
11:25:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:11: [DVTCommonLib]###  LogicalWrite called
11:25:13: [ WriteLba(0x27542D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1966 ] 
11:25:13: [DVTCommonLib]###  LogicalWrite Completed 

11:25:13: [DVTCommonLib]###  LogicalRead called
11:25:14: [ ReadLba(0x27542D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1967 ] 
11:25:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:14: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 215 times 
11:25:14: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD7, 0x0) , Command count = 1968 ] 
11:25:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:14: [DVTCommonLib]### Card response as High Capacity from card
11:25:14: [DVTCommonLib]### VOLA from card : 0x1
11:25:14: [DVTCommonLib]### CMD Pattern from card : 0xD7
11:25:14: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506240>, <py_sfcl.CommandDataDefinition object at 0x06506270>) , Command count = 1969 ] 
11:25:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF300>, <py_sfcl.CommandDataDefinition object at 0x064DF0F0>) , Command count = 1970 ] 
11:25:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1971 ] 
11:25:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:14: [ SetBusWidth(0x4) , Command count = 1972 ] 
11:25:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:14: ####CSD Registe 2.0 Values####
11:25:14: CSD_STRUCTURE                                 :0x1
11:25:14: Reserv1                                       :0x0
11:25:14: Time Access 1 TAAC                            :0xe
11:25:14: Time Access 2 NSAC*100                        :0x0
11:25:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:14: Card Command Classess CCC                     :0x5b5
11:25:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:14: DSR(driver stage register)  DSR_IMP           :0x0
11:25:14: Reserv2                                       :0x0
11:25:14: Device Size C_SIZE                            :0xedc8
11:25:14: Reserv3                                       :0x0
11:25:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:14: Reserv4                                       :0x0
11:25:14: Write Speed Factor R2W_FACTOR                 :0x2
11:25:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:14: FILE_FORMAT_GRP                               :0x0
11:25:14: COPY flag                                     :0x1
11:25:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:14: File_Format                                   :0x0
11:25:14: CRC                                           :0x0
11:25:14: ####CSD Registe Values####  

11:25:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:14: ProductSerialNumber = 0x23482900
11:25:14: CardMaximumLBA      = 0x3b72400
11:25:14: CardCapacity        = 32G
11:25:14: Is card secure      = 0
11:25:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:14: [DVTCommonLib]###  LogicalWrite called
11:25:16: [ WriteLba(0x32A9D38, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1973 ] 
11:25:16: [DVTCommonLib]###  LogicalWrite Completed 

11:25:16: [DVTCommonLib]###  LogicalRead called
11:25:18: [ ReadLba(0x32A9D38, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1974 ] 
11:25:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:18: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 216 times 
11:25:18: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD8, 0x0) , Command count = 1975 ] 
11:25:18: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:18: [DVTCommonLib]### Card response as High Capacity from card
11:25:18: [DVTCommonLib]### VOLA from card : 0x1
11:25:18: [DVTCommonLib]### CMD Pattern from card : 0xD8
11:25:18: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065064B0>, <py_sfcl.CommandDataDefinition object at 0x06506300>) , Command count = 1976 ] 
11:25:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506330>, <py_sfcl.CommandDataDefinition object at 0x064DF420>) , Command count = 1977 ] 
11:25:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1978 ] 
11:25:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:18: [ SetBusWidth(0x4) , Command count = 1979 ] 
11:25:18: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:18: ####CSD Registe 2.0 Values####
11:25:18: CSD_STRUCTURE                                 :0x1
11:25:18: Reserv1                                       :0x0
11:25:18: Time Access 1 TAAC                            :0xe
11:25:18: Time Access 2 NSAC*100                        :0x0
11:25:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:18: Card Command Classess CCC                     :0x5b5
11:25:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:18: DSR(driver stage register)  DSR_IMP           :0x0
11:25:18: Reserv2                                       :0x0
11:25:18: Device Size C_SIZE                            :0xedc8
11:25:18: Reserv3                                       :0x0
11:25:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:18: Reserv4                                       :0x0
11:25:18: Write Speed Factor R2W_FACTOR                 :0x2
11:25:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:18: FILE_FORMAT_GRP                               :0x0
11:25:18: COPY flag                                     :0x1
11:25:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:18: File_Format                                   :0x0
11:25:18: CRC                                           :0x0
11:25:18: ####CSD Registe Values####  

11:25:18: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:18: ProductSerialNumber = 0x23482900
11:25:18: CardMaximumLBA      = 0x3b72400
11:25:18: CardCapacity        = 32G
11:25:18: Is card secure      = 0
11:25:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:18: [DVTCommonLib]###  LogicalWrite called
11:25:20: [ WriteLba(0x2E8B5CC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1980 ] 
11:25:20: [DVTCommonLib]###  LogicalWrite Completed 

11:25:20: [DVTCommonLib]###  LogicalRead called
11:25:21: [ ReadLba(0x2E8B5CC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1981 ] 
11:25:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 217 times 
11:25:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD9, 0x0) , Command count = 1982 ] 
11:25:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:21: [DVTCommonLib]### Card response as High Capacity from card
11:25:21: [DVTCommonLib]### VOLA from card : 0x1
11:25:21: [DVTCommonLib]### CMD Pattern from card : 0xD9
11:25:21: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506810>, <py_sfcl.CommandDataDefinition object at 0x06506840>) , Command count = 1983 ] 
11:25:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7BA0>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 1984 ] 
11:25:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1985 ] 
11:25:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:22: [ SetBusWidth(0x4) , Command count = 1986 ] 
11:25:22: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:22: ####CSD Registe 2.0 Values####
11:25:22: CSD_STRUCTURE                                 :0x1
11:25:22: Reserv1                                       :0x0
11:25:22: Time Access 1 TAAC                            :0xe
11:25:22: Time Access 2 NSAC*100                        :0x0
11:25:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:22: Card Command Classess CCC                     :0x5b5
11:25:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:22: DSR(driver stage register)  DSR_IMP           :0x0
11:25:22: Reserv2                                       :0x0
11:25:22: Device Size C_SIZE                            :0xedc8
11:25:22: Reserv3                                       :0x0
11:25:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:22: Reserv4                                       :0x0
11:25:22: Write Speed Factor R2W_FACTOR                 :0x2
11:25:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:22: FILE_FORMAT_GRP                               :0x0
11:25:22: COPY flag                                     :0x1
11:25:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:22: File_Format                                   :0x0
11:25:22: CRC                                           :0x0
11:25:22: ####CSD Registe Values####  

11:25:22: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:22: ProductSerialNumber = 0x23482900
11:25:22: CardMaximumLBA      = 0x3b72400
11:25:22: CardCapacity        = 32G
11:25:22: Is card secure      = 0
11:25:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:22: [DVTCommonLib]###  LogicalWrite called
11:25:23: [ WriteLba(0x11A783, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1987 ] 
11:25:23: [DVTCommonLib]###  LogicalWrite Completed 

11:25:23: [DVTCommonLib]###  LogicalRead called
11:25:25: [ ReadLba(0x11A783, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1988 ] 
11:25:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:25: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 218 times 
11:25:25: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDA, 0x0) , Command count = 1989 ] 
11:25:25: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:25: [DVTCommonLib]### Card response as High Capacity from card
11:25:25: [DVTCommonLib]### VOLA from card : 0x1
11:25:25: [DVTCommonLib]### CMD Pattern from card : 0xDA
11:25:25: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C00>, <py_sfcl.CommandDataDefinition object at 0x06506C30>) , Command count = 1990 ] 
11:25:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFD20>, <py_sfcl.CommandDataDefinition object at 0x064DF810>) , Command count = 1991 ] 
11:25:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1992 ] 
11:25:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:25: [ SetBusWidth(0x4) , Command count = 1993 ] 
11:25:25: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:25: ####CSD Registe 2.0 Values####
11:25:25: CSD_STRUCTURE                                 :0x1
11:25:25: Reserv1                                       :0x0
11:25:25: Time Access 1 TAAC                            :0xe
11:25:25: Time Access 2 NSAC*100                        :0x0
11:25:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:25: Card Command Classess CCC                     :0x5b5
11:25:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:25: DSR(driver stage register)  DSR_IMP           :0x0
11:25:25: Reserv2                                       :0x0
11:25:25: Device Size C_SIZE                            :0xedc8
11:25:25: Reserv3                                       :0x0
11:25:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:25: Reserv4                                       :0x0
11:25:25: Write Speed Factor R2W_FACTOR                 :0x2
11:25:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:25: FILE_FORMAT_GRP                               :0x0
11:25:25: COPY flag                                     :0x1
11:25:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:25: File_Format                                   :0x0
11:25:25: CRC                                           :0x0
11:25:25: ####CSD Registe Values####  

11:25:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:25: ProductSerialNumber = 0x23482900
11:25:25: CardMaximumLBA      = 0x3b72400
11:25:25: CardCapacity        = 32G
11:25:25: Is card secure      = 0
11:25:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:25: [DVTCommonLib]###  LogicalWrite called
11:25:27: [ WriteLba(0x7EC08, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1994 ] 
11:25:27: [DVTCommonLib]###  LogicalWrite Completed 

11:25:27: [DVTCommonLib]###  LogicalRead called
11:25:28: [ ReadLba(0x7EC08, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1995 ] 
11:25:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 219 times 
11:25:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDB, 0x0) , Command count = 1996 ] 
11:25:29: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:29: [DVTCommonLib]### Card response as High Capacity from card
11:25:29: [DVTCommonLib]### VOLA from card : 0x1
11:25:29: [DVTCommonLib]### CMD Pattern from card : 0xDB
11:25:29: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508030>, <py_sfcl.CommandDataDefinition object at 0x06508060>) , Command count = 1997 ] 
11:25:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506510>, <py_sfcl.CommandDataDefinition object at 0x064DFE10>) , Command count = 1998 ] 
11:25:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1999 ] 
11:25:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:29: [ SetBusWidth(0x4) , Command count = 2000 ] 
11:25:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:29: ####CSD Registe 2.0 Values####
11:25:29: CSD_STRUCTURE                                 :0x1
11:25:29: Reserv1                                       :0x0
11:25:29: Time Access 1 TAAC                            :0xe
11:25:29: Time Access 2 NSAC*100                        :0x0
11:25:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:29: Card Command Classess CCC                     :0x5b5
11:25:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:29: DSR(driver stage register)  DSR_IMP           :0x0
11:25:29: Reserv2                                       :0x0
11:25:29: Device Size C_SIZE                            :0xedc8
11:25:29: Reserv3                                       :0x0
11:25:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:29: Reserv4                                       :0x0
11:25:29: Write Speed Factor R2W_FACTOR                 :0x2
11:25:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:29: FILE_FORMAT_GRP                               :0x0
11:25:29: COPY flag                                     :0x1
11:25:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:29: File_Format                                   :0x0
11:25:29: CRC                                           :0x0
11:25:29: ####CSD Registe Values####  

11:25:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:29: ProductSerialNumber = 0x23482900
11:25:29: CardMaximumLBA      = 0x3b72400
11:25:29: CardCapacity        = 32G
11:25:29: Is card secure      = 0
11:25:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:29: [DVTCommonLib]###  LogicalWrite called
11:25:30: [ WriteLba(0x284E12B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2001 ] 
11:25:30: [DVTCommonLib]###  LogicalWrite Completed 

11:25:30: [DVTCommonLib]###  LogicalRead called
11:25:32: [ ReadLba(0x284E12B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2002 ] 
11:25:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:32: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 220 times 
11:25:32: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDC, 0x0) , Command count = 2003 ] 
11:25:32: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:32: [DVTCommonLib]### Card response as High Capacity from card
11:25:32: [DVTCommonLib]### VOLA from card : 0x1
11:25:32: [DVTCommonLib]### CMD Pattern from card : 0xDC
11:25:32: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506C90>, <py_sfcl.CommandDataDefinition object at 0x065067B0>) , Command count = 2004 ] 
11:25:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDE210>, <py_sfcl.CommandDataDefinition object at 0x064DFE10>) , Command count = 2005 ] 
11:25:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2006 ] 
11:25:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:32: [ SetBusWidth(0x4) , Command count = 2007 ] 
11:25:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:32: ####CSD Registe 2.0 Values####
11:25:32: CSD_STRUCTURE                                 :0x1
11:25:32: Reserv1                                       :0x0
11:25:32: Time Access 1 TAAC                            :0xe
11:25:32: Time Access 2 NSAC*100                        :0x0
11:25:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:32: Card Command Classess CCC                     :0x5b5
11:25:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:32: DSR(driver stage register)  DSR_IMP           :0x0
11:25:32: Reserv2                                       :0x0
11:25:32: Device Size C_SIZE                            :0xedc8
11:25:32: Reserv3                                       :0x0
11:25:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:32: Reserv4                                       :0x0
11:25:32: Write Speed Factor R2W_FACTOR                 :0x2
11:25:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:32: FILE_FORMAT_GRP                               :0x0
11:25:32: COPY flag                                     :0x1
11:25:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:32: File_Format                                   :0x0
11:25:32: CRC                                           :0x0
11:25:32: ####CSD Registe Values####  

11:25:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:32: ProductSerialNumber = 0x23482900
11:25:32: CardMaximumLBA      = 0x3b72400
11:25:32: CardCapacity        = 32G
11:25:32: Is card secure      = 0
11:25:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:32: [DVTCommonLib]###  LogicalWrite called
11:25:34: [ WriteLba(0x23BD5AF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2008 ] 
11:25:34: [DVTCommonLib]###  LogicalWrite Completed 

11:25:34: [DVTCommonLib]###  LogicalRead called
11:25:35: [ ReadLba(0x23BD5AF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2009 ] 
11:25:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 221 times 
11:25:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDD, 0x0) , Command count = 2010 ] 
11:25:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:36: [DVTCommonLib]### Card response as High Capacity from card
11:25:36: [DVTCommonLib]### VOLA from card : 0x1
11:25:36: [DVTCommonLib]### CMD Pattern from card : 0xDD
11:25:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508840>, <py_sfcl.CommandDataDefinition object at 0x06508720>) , Command count = 2011 ] 
11:25:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508120>, <py_sfcl.CommandDataDefinition object at 0x06506AE0>) , Command count = 2012 ] 
11:25:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2013 ] 
11:25:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:36: [ SetBusWidth(0x4) , Command count = 2014 ] 
11:25:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:36: ####CSD Registe 2.0 Values####
11:25:36: CSD_STRUCTURE                                 :0x1
11:25:36: Reserv1                                       :0x0
11:25:36: Time Access 1 TAAC                            :0xe
11:25:36: Time Access 2 NSAC*100                        :0x0
11:25:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:36: Card Command Classess CCC                     :0x5b5
11:25:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:36: DSR(driver stage register)  DSR_IMP           :0x0
11:25:36: Reserv2                                       :0x0
11:25:36: Device Size C_SIZE                            :0xedc8
11:25:36: Reserv3                                       :0x0
11:25:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:36: Reserv4                                       :0x0
11:25:36: Write Speed Factor R2W_FACTOR                 :0x2
11:25:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:36: FILE_FORMAT_GRP                               :0x0
11:25:36: COPY flag                                     :0x1
11:25:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:36: File_Format                                   :0x0
11:25:36: CRC                                           :0x0
11:25:36: ####CSD Registe Values####  

11:25:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:36: ProductSerialNumber = 0x23482900
11:25:36: CardMaximumLBA      = 0x3b72400
11:25:36: CardCapacity        = 32G
11:25:36: Is card secure      = 0
11:25:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:36: [DVTCommonLib]###  LogicalWrite called
11:25:37: [ WriteLba(0x23C56D1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2015 ] 
11:25:37: [DVTCommonLib]###  LogicalWrite Completed 

11:25:37: [DVTCommonLib]###  LogicalRead called
11:25:39: [ ReadLba(0x23C56D1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2016 ] 
11:25:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:39: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 222 times 
11:25:39: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDE, 0x0) , Command count = 2017 ] 
11:25:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:39: [DVTCommonLib]### Card response as High Capacity from card
11:25:39: [DVTCommonLib]### VOLA from card : 0x1
11:25:39: [DVTCommonLib]### CMD Pattern from card : 0xDE
11:25:39: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508930>, <py_sfcl.CommandDataDefinition object at 0x06508960>) , Command count = 2018 ] 
11:25:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488C60>, <py_sfcl.CommandDataDefinition object at 0x065080F0>) , Command count = 2019 ] 
11:25:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:39: [ SetCardRCA(0x1, 0xD555) , Command count = 2020 ] 
11:25:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:39: [ SetBusWidth(0x4) , Command count = 2021 ] 
11:25:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:39: ####CSD Registe 2.0 Values####
11:25:39: CSD_STRUCTURE                                 :0x1
11:25:39: Reserv1                                       :0x0
11:25:39: Time Access 1 TAAC                            :0xe
11:25:39: Time Access 2 NSAC*100                        :0x0
11:25:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:39: Card Command Classess CCC                     :0x5b5
11:25:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:39: DSR(driver stage register)  DSR_IMP           :0x0
11:25:39: Reserv2                                       :0x0
11:25:39: Device Size C_SIZE                            :0xedc8
11:25:39: Reserv3                                       :0x0
11:25:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:39: Reserv4                                       :0x0
11:25:39: Write Speed Factor R2W_FACTOR                 :0x2
11:25:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:39: FILE_FORMAT_GRP                               :0x0
11:25:39: COPY flag                                     :0x1
11:25:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:39: File_Format                                   :0x0
11:25:39: CRC                                           :0x0
11:25:39: ####CSD Registe Values####  

11:25:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:39: ProductSerialNumber = 0x23482900
11:25:39: CardMaximumLBA      = 0x3b72400
11:25:39: CardCapacity        = 32G
11:25:39: Is card secure      = 0
11:25:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:39: [DVTCommonLib]###  LogicalWrite called
11:25:41: [ WriteLba(0x11A65DF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2022 ] 
11:25:41: [DVTCommonLib]###  LogicalWrite Completed 

11:25:41: [DVTCommonLib]###  LogicalRead called
11:25:43: [ ReadLba(0x11A65DF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2023 ] 
11:25:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:43: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 223 times 
11:25:43: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xDF, 0x0) , Command count = 2024 ] 
11:25:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:43: [DVTCommonLib]### Card response as High Capacity from card
11:25:43: [DVTCommonLib]### VOLA from card : 0x1
11:25:43: [DVTCommonLib]### CMD Pattern from card : 0xDF
11:25:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AE0>, <py_sfcl.CommandDataDefinition object at 0x06508C60>) , Command count = 2025 ] 
11:25:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065084B0>, <py_sfcl.CommandDataDefinition object at 0x06508510>) , Command count = 2026 ] 
11:25:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2027 ] 
11:25:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:43: [ SetBusWidth(0x4) , Command count = 2028 ] 
11:25:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:43: ####CSD Registe 2.0 Values####
11:25:43: CSD_STRUCTURE                                 :0x1
11:25:43: Reserv1                                       :0x0
11:25:43: Time Access 1 TAAC                            :0xe
11:25:43: Time Access 2 NSAC*100                        :0x0
11:25:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:43: Card Command Classess CCC                     :0x5b5
11:25:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:43: DSR(driver stage register)  DSR_IMP           :0x0
11:25:43: Reserv2                                       :0x0
11:25:43: Device Size C_SIZE                            :0xedc8
11:25:43: Reserv3                                       :0x0
11:25:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:43: Reserv4                                       :0x0
11:25:43: Write Speed Factor R2W_FACTOR                 :0x2
11:25:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:43: FILE_FORMAT_GRP                               :0x0
11:25:43: COPY flag                                     :0x1
11:25:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:43: File_Format                                   :0x0
11:25:43: CRC                                           :0x0
11:25:43: ####CSD Registe Values####  

11:25:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:43: ProductSerialNumber = 0x23482900
11:25:43: CardMaximumLBA      = 0x3b72400
11:25:43: CardCapacity        = 32G
11:25:43: Is card secure      = 0
11:25:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:43: [DVTCommonLib]###  LogicalWrite called
11:25:45: [ WriteLba(0x17FD761, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2029 ] 
11:25:45: [DVTCommonLib]###  LogicalWrite Completed 

11:25:45: [DVTCommonLib]###  LogicalRead called
11:25:46: [ ReadLba(0x17FD761, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2030 ] 
11:25:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:46: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 224 times 
11:25:46: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE0, 0x0) , Command count = 2031 ] 
11:25:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:46: [DVTCommonLib]### Card response as High Capacity from card
11:25:46: [DVTCommonLib]### VOLA from card : 0x1
11:25:46: [DVTCommonLib]### CMD Pattern from card : 0xE0
11:25:46: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF69F0>, <py_sfcl.CommandDataDefinition object at 0x06508D80>) , Command count = 2032 ] 
11:25:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DC8D20>, <py_sfcl.CommandDataDefinition object at 0x065087E0>) , Command count = 2033 ] 
11:25:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2034 ] 
11:25:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:46: [ SetBusWidth(0x4) , Command count = 2035 ] 
11:25:46: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:46: ####CSD Registe 2.0 Values####
11:25:46: CSD_STRUCTURE                                 :0x1
11:25:46: Reserv1                                       :0x0
11:25:46: Time Access 1 TAAC                            :0xe
11:25:46: Time Access 2 NSAC*100                        :0x0
11:25:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:46: Card Command Classess CCC                     :0x5b5
11:25:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:46: DSR(driver stage register)  DSR_IMP           :0x0
11:25:46: Reserv2                                       :0x0
11:25:46: Device Size C_SIZE                            :0xedc8
11:25:46: Reserv3                                       :0x0
11:25:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:46: Reserv4                                       :0x0
11:25:46: Write Speed Factor R2W_FACTOR                 :0x2
11:25:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:46: FILE_FORMAT_GRP                               :0x0
11:25:46: COPY flag                                     :0x1
11:25:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:46: File_Format                                   :0x0
11:25:46: CRC                                           :0x0
11:25:46: ####CSD Registe Values####  

11:25:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:46: ProductSerialNumber = 0x23482900
11:25:46: CardMaximumLBA      = 0x3b72400
11:25:46: CardCapacity        = 32G
11:25:46: Is card secure      = 0
11:25:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:46: [DVTCommonLib]###  LogicalWrite called
11:25:48: [ WriteLba(0x367D5E8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2036 ] 
11:25:48: [DVTCommonLib]###  LogicalWrite Completed 

11:25:48: [DVTCommonLib]###  LogicalRead called
11:25:50: [ ReadLba(0x367D5E8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2037 ] 
11:25:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 225 times 
11:25:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE1, 0x0) , Command count = 2038 ] 
11:25:50: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:50: [DVTCommonLib]### Card response as High Capacity from card
11:25:50: [DVTCommonLib]### VOLA from card : 0x1
11:25:50: [DVTCommonLib]### CMD Pattern from card : 0xE1
11:25:50: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DD7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE6240>) , Command count = 2039 ] 
11:25:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065084E0>, <py_sfcl.CommandDataDefinition object at 0x064DF030>) , Command count = 2040 ] 
11:25:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:50: [ SetCardRCA(0x1, 0xD555) , Command count = 2041 ] 
11:25:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:50: [ SetBusWidth(0x4) , Command count = 2042 ] 
11:25:50: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:50: ####CSD Registe 2.0 Values####
11:25:50: CSD_STRUCTURE                                 :0x1
11:25:50: Reserv1                                       :0x0
11:25:50: Time Access 1 TAAC                            :0xe
11:25:50: Time Access 2 NSAC*100                        :0x0
11:25:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:50: Card Command Classess CCC                     :0x5b5
11:25:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:50: DSR(driver stage register)  DSR_IMP           :0x0
11:25:50: Reserv2                                       :0x0
11:25:50: Device Size C_SIZE                            :0xedc8
11:25:50: Reserv3                                       :0x0
11:25:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:50: Reserv4                                       :0x0
11:25:50: Write Speed Factor R2W_FACTOR                 :0x2
11:25:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:50: FILE_FORMAT_GRP                               :0x0
11:25:50: COPY flag                                     :0x1
11:25:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:50: File_Format                                   :0x0
11:25:50: CRC                                           :0x0
11:25:50: ####CSD Registe Values####  

11:25:50: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:50: ProductSerialNumber = 0x23482900
11:25:50: CardMaximumLBA      = 0x3b72400
11:25:50: CardCapacity        = 32G
11:25:50: Is card secure      = 0
11:25:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:50: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:50: [DVTCommonLib]###  LogicalWrite called
11:25:52: [ WriteLba(0x1BFFAB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2043 ] 
11:25:52: [DVTCommonLib]###  LogicalWrite Completed 

11:25:52: [DVTCommonLib]###  LogicalRead called
11:25:53: [ ReadLba(0x1BFFAB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2044 ] 
11:25:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 226 times 
11:25:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE2, 0x0) , Command count = 2045 ] 
11:25:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:53: [DVTCommonLib]### Card response as High Capacity from card
11:25:53: [DVTCommonLib]### VOLA from card : 0x1
11:25:53: [DVTCommonLib]### CMD Pattern from card : 0xE2
11:25:53: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB4390>, <py_sfcl.CommandDataDefinition object at 0x05DD7A80>) , Command count = 2046 ] 
11:25:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C7BCF0>, <py_sfcl.CommandDataDefinition object at 0x064DF030>) , Command count = 2047 ] 
11:25:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:53: [ SetCardRCA(0x1, 0xD555) , Command count = 2048 ] 
11:25:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:54: [ SetBusWidth(0x4) , Command count = 2049 ] 
11:25:54: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:54: ####CSD Registe 2.0 Values####
11:25:54: CSD_STRUCTURE                                 :0x1
11:25:54: Reserv1                                       :0x0
11:25:54: Time Access 1 TAAC                            :0xe
11:25:54: Time Access 2 NSAC*100                        :0x0
11:25:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:54: Card Command Classess CCC                     :0x5b5
11:25:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:54: DSR(driver stage register)  DSR_IMP           :0x0
11:25:54: Reserv2                                       :0x0
11:25:54: Device Size C_SIZE                            :0xedc8
11:25:54: Reserv3                                       :0x0
11:25:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:54: Reserv4                                       :0x0
11:25:54: Write Speed Factor R2W_FACTOR                 :0x2
11:25:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:54: FILE_FORMAT_GRP                               :0x0
11:25:54: COPY flag                                     :0x1
11:25:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:54: File_Format                                   :0x0
11:25:54: CRC                                           :0x0
11:25:54: ####CSD Registe Values####  

11:25:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:54: ProductSerialNumber = 0x23482900
11:25:54: CardMaximumLBA      = 0x3b72400
11:25:54: CardCapacity        = 32G
11:25:54: Is card secure      = 0
11:25:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:54: [DVTCommonLib]###  LogicalWrite called
11:25:55: [ WriteLba(0x2D4E9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2050 ] 
11:25:55: [DVTCommonLib]###  LogicalWrite Completed 

11:25:55: [DVTCommonLib]###  LogicalRead called
11:25:57: [ ReadLba(0x2D4E9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2051 ] 
11:25:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:25:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:25:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 227 times 
11:25:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:25:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE3, 0x0) , Command count = 2052 ] 
11:25:57: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:25:57: [DVTCommonLib]### Card response as High Capacity from card
11:25:57: [DVTCommonLib]### VOLA from card : 0x1
11:25:57: [DVTCommonLib]### CMD Pattern from card : 0xE3
11:25:57: [DVTCommonLib]### Reserved bits from card : 0x0
11:25:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFABD0>, <py_sfcl.CommandDataDefinition object at 0x06508E70>) , Command count = 2053 ] 
11:25:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508C90>, <py_sfcl.CommandDataDefinition object at 0x06508E10>) , Command count = 2054 ] 
11:25:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:25:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2055 ] 
11:25:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:57: [ SetBusWidth(0x4) , Command count = 2056 ] 
11:25:57: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:25:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:25:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:57: ####CSD Registe 2.0 Values####
11:25:57: CSD_STRUCTURE                                 :0x1
11:25:57: Reserv1                                       :0x0
11:25:57: Time Access 1 TAAC                            :0xe
11:25:57: Time Access 2 NSAC*100                        :0x0
11:25:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:57: Card Command Classess CCC                     :0x5b5
11:25:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:57: DSR(driver stage register)  DSR_IMP           :0x0
11:25:57: Reserv2                                       :0x0
11:25:57: Device Size C_SIZE                            :0xedc8
11:25:57: Reserv3                                       :0x0
11:25:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:57: Reserv4                                       :0x0
11:25:57: Write Speed Factor R2W_FACTOR                 :0x2
11:25:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:57: FILE_FORMAT_GRP                               :0x0
11:25:57: COPY flag                                     :0x1
11:25:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:57: File_Format                                   :0x0
11:25:57: CRC                                           :0x0
11:25:57: ####CSD Registe Values####  

11:25:57: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:25:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:25:57: ProductSerialNumber = 0x23482900
11:25:57: CardMaximumLBA      = 0x3b72400
11:25:57: CardCapacity        = 32G
11:25:57: Is card secure      = 0
11:25:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:25:57: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:25:57: [DVTCommonLib]###  LogicalWrite called
11:25:59: [ WriteLba(0x25A1ACB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2057 ] 
11:25:59: [DVTCommonLib]###  LogicalWrite Completed 

11:25:59: [DVTCommonLib]###  LogicalRead called
11:26:00: [ ReadLba(0x25A1ACB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2058 ] 
11:26:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 228 times 
11:26:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE4, 0x0) , Command count = 2059 ] 
11:26:01: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:01: [DVTCommonLib]### Card response as High Capacity from card
11:26:01: [DVTCommonLib]### VOLA from card : 0x1
11:26:01: [DVTCommonLib]### CMD Pattern from card : 0xE4
11:26:01: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E450>, <py_sfcl.CommandDataDefinition object at 0x05DFAC90>) , Command count = 2060 ] 
11:26:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508F00>, <py_sfcl.CommandDataDefinition object at 0x06508D20>) , Command count = 2061 ] 
11:26:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:01: [ SetCardRCA(0x1, 0xD555) , Command count = 2062 ] 
11:26:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:01: [ SetBusWidth(0x4) , Command count = 2063 ] 
11:26:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:01: ####CSD Registe 2.0 Values####
11:26:01: CSD_STRUCTURE                                 :0x1
11:26:01: Reserv1                                       :0x0
11:26:01: Time Access 1 TAAC                            :0xe
11:26:01: Time Access 2 NSAC*100                        :0x0
11:26:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:01: Card Command Classess CCC                     :0x5b5
11:26:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:01: DSR(driver stage register)  DSR_IMP           :0x0
11:26:01: Reserv2                                       :0x0
11:26:01: Device Size C_SIZE                            :0xedc8
11:26:01: Reserv3                                       :0x0
11:26:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:01: Reserv4                                       :0x0
11:26:01: Write Speed Factor R2W_FACTOR                 :0x2
11:26:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:01: FILE_FORMAT_GRP                               :0x0
11:26:01: COPY flag                                     :0x1
11:26:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:01: File_Format                                   :0x0
11:26:01: CRC                                           :0x0
11:26:01: ####CSD Registe Values####  

11:26:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:01: ProductSerialNumber = 0x23482900
11:26:01: CardMaximumLBA      = 0x3b72400
11:26:01: CardCapacity        = 32G
11:26:01: Is card secure      = 0
11:26:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:01: [DVTCommonLib]###  LogicalWrite called
11:26:02: [ WriteLba(0x37E346A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2064 ] 
11:26:02: [DVTCommonLib]###  LogicalWrite Completed 

11:26:02: [DVTCommonLib]###  LogicalRead called
11:26:04: [ ReadLba(0x37E346A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2065 ] 
11:26:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:04: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 229 times 
11:26:04: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE5, 0x0) , Command count = 2066 ] 
11:26:04: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:04: [DVTCommonLib]### Card response as High Capacity from card
11:26:04: [DVTCommonLib]### VOLA from card : 0x1
11:26:04: [DVTCommonLib]### CMD Pattern from card : 0xE5
11:26:04: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488480>, <py_sfcl.CommandDataDefinition object at 0x064882D0>) , Command count = 2067 ] 
11:26:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508ED0>, <py_sfcl.CommandDataDefinition object at 0x06508A80>) , Command count = 2068 ] 
11:26:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2069 ] 
11:26:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:04: [ SetBusWidth(0x4) , Command count = 2070 ] 
11:26:04: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:04: ####CSD Registe 2.0 Values####
11:26:04: CSD_STRUCTURE                                 :0x1
11:26:04: Reserv1                                       :0x0
11:26:04: Time Access 1 TAAC                            :0xe
11:26:04: Time Access 2 NSAC*100                        :0x0
11:26:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:04: Card Command Classess CCC                     :0x5b5
11:26:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:04: DSR(driver stage register)  DSR_IMP           :0x0
11:26:04: Reserv2                                       :0x0
11:26:04: Device Size C_SIZE                            :0xedc8
11:26:04: Reserv3                                       :0x0
11:26:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:04: Reserv4                                       :0x0
11:26:04: Write Speed Factor R2W_FACTOR                 :0x2
11:26:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:04: FILE_FORMAT_GRP                               :0x0
11:26:04: COPY flag                                     :0x1
11:26:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:04: File_Format                                   :0x0
11:26:04: CRC                                           :0x0
11:26:04: ####CSD Registe Values####  

11:26:04: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:04: ProductSerialNumber = 0x23482900
11:26:04: CardMaximumLBA      = 0x3b72400
11:26:04: CardCapacity        = 32G
11:26:04: Is card secure      = 0
11:26:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:04: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:04: [DVTCommonLib]###  LogicalWrite called
11:26:06: [ WriteLba(0x700F2E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2071 ] 
11:26:06: [DVTCommonLib]###  LogicalWrite Completed 

11:26:06: [DVTCommonLib]###  LogicalRead called
11:26:08: [ ReadLba(0x700F2E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2072 ] 
11:26:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 230 times 
11:26:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE6, 0x0) , Command count = 2073 ] 
11:26:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:08: [DVTCommonLib]### Card response as High Capacity from card
11:26:08: [DVTCommonLib]### VOLA from card : 0x1
11:26:08: [DVTCommonLib]### CMD Pattern from card : 0xE6
11:26:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508BD0>, <py_sfcl.CommandDataDefinition object at 0x06508FC0>) , Command count = 2074 ] 
11:26:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAF30>, <py_sfcl.CommandDataDefinition object at 0x06488900>) , Command count = 2075 ] 
11:26:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2076 ] 
11:26:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:08: [ SetBusWidth(0x4) , Command count = 2077 ] 
11:26:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:08: ####CSD Registe 2.0 Values####
11:26:08: CSD_STRUCTURE                                 :0x1
11:26:08: Reserv1                                       :0x0
11:26:08: Time Access 1 TAAC                            :0xe
11:26:08: Time Access 2 NSAC*100                        :0x0
11:26:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:08: Card Command Classess CCC                     :0x5b5
11:26:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:08: DSR(driver stage register)  DSR_IMP           :0x0
11:26:08: Reserv2                                       :0x0
11:26:08: Device Size C_SIZE                            :0xedc8
11:26:08: Reserv3                                       :0x0
11:26:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:08: Reserv4                                       :0x0
11:26:08: Write Speed Factor R2W_FACTOR                 :0x2
11:26:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:08: FILE_FORMAT_GRP                               :0x0
11:26:08: COPY flag                                     :0x1
11:26:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:08: File_Format                                   :0x0
11:26:08: CRC                                           :0x0
11:26:08: ####CSD Registe Values####  

11:26:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:08: ProductSerialNumber = 0x23482900
11:26:08: CardMaximumLBA      = 0x3b72400
11:26:08: CardCapacity        = 32G
11:26:08: Is card secure      = 0
11:26:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:08: [DVTCommonLib]###  LogicalWrite called
11:26:10: [ WriteLba(0x119B53B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2078 ] 
11:26:10: [DVTCommonLib]###  LogicalWrite Completed 

11:26:10: [DVTCommonLib]###  LogicalRead called
11:26:11: [ ReadLba(0x119B53B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2079 ] 
11:26:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:11: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 231 times 
11:26:11: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE7, 0x0) , Command count = 2080 ] 
11:26:11: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:11: [DVTCommonLib]### Card response as High Capacity from card
11:26:11: [DVTCommonLib]### VOLA from card : 0x1
11:26:11: [DVTCommonLib]### CMD Pattern from card : 0xE7
11:26:11: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488540>, <py_sfcl.CommandDataDefinition object at 0x06488780>) , Command count = 2081 ] 
11:26:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488120>, <py_sfcl.CommandDataDefinition object at 0x06488A80>) , Command count = 2082 ] 
11:26:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2083 ] 
11:26:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:11: [ SetBusWidth(0x4) , Command count = 2084 ] 
11:26:11: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:11: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:11: ####CSD Registe 2.0 Values####
11:26:11: CSD_STRUCTURE                                 :0x1
11:26:11: Reserv1                                       :0x0
11:26:11: Time Access 1 TAAC                            :0xe
11:26:11: Time Access 2 NSAC*100                        :0x0
11:26:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:11: Card Command Classess CCC                     :0x5b5
11:26:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:11: DSR(driver stage register)  DSR_IMP           :0x0
11:26:11: Reserv2                                       :0x0
11:26:11: Device Size C_SIZE                            :0xedc8
11:26:11: Reserv3                                       :0x0
11:26:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:11: Reserv4                                       :0x0
11:26:11: Write Speed Factor R2W_FACTOR                 :0x2
11:26:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:11: FILE_FORMAT_GRP                               :0x0
11:26:11: COPY flag                                     :0x1
11:26:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:11: File_Format                                   :0x0
11:26:11: CRC                                           :0x0
11:26:11: ####CSD Registe Values####  

11:26:11: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:12: ProductSerialNumber = 0x23482900
11:26:12: CardMaximumLBA      = 0x3b72400
11:26:12: CardCapacity        = 32G
11:26:12: Is card secure      = 0
11:26:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:12: [DVTCommonLib]###  LogicalWrite called
11:26:13: [ WriteLba(0x2DFEC06, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2085 ] 
11:26:13: [DVTCommonLib]###  LogicalWrite Completed 

11:26:13: [DVTCommonLib]###  LogicalRead called
11:26:15: [ ReadLba(0x2DFEC06, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2086 ] 
11:26:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 232 times 
11:26:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE8, 0x0) , Command count = 2087 ] 
11:26:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:15: [DVTCommonLib]### Card response as High Capacity from card
11:26:15: [DVTCommonLib]### VOLA from card : 0x1
11:26:15: [DVTCommonLib]### CMD Pattern from card : 0xE8
11:26:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB090>, <py_sfcl.CommandDataDefinition object at 0x06488300>) , Command count = 2088 ] 
11:26:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488FC0>, <py_sfcl.CommandDataDefinition object at 0x0632E300>) , Command count = 2089 ] 
11:26:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2090 ] 
11:26:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:15: [ SetBusWidth(0x4) , Command count = 2091 ] 
11:26:15: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:15: ####CSD Registe 2.0 Values####
11:26:15: CSD_STRUCTURE                                 :0x1
11:26:15: Reserv1                                       :0x0
11:26:15: Time Access 1 TAAC                            :0xe
11:26:15: Time Access 2 NSAC*100                        :0x0
11:26:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:15: Card Command Classess CCC                     :0x5b5
11:26:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:15: DSR(driver stage register)  DSR_IMP           :0x0
11:26:15: Reserv2                                       :0x0
11:26:15: Device Size C_SIZE                            :0xedc8
11:26:15: Reserv3                                       :0x0
11:26:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:15: Reserv4                                       :0x0
11:26:15: Write Speed Factor R2W_FACTOR                 :0x2
11:26:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:15: FILE_FORMAT_GRP                               :0x0
11:26:15: COPY flag                                     :0x1
11:26:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:15: File_Format                                   :0x0
11:26:15: CRC                                           :0x0
11:26:15: ####CSD Registe Values####  

11:26:15: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:15: ProductSerialNumber = 0x23482900
11:26:15: CardMaximumLBA      = 0x3b72400
11:26:15: CardCapacity        = 32G
11:26:15: Is card secure      = 0
11:26:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:15: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:15: [DVTCommonLib]###  LogicalWrite called
11:26:17: [ WriteLba(0xB24029, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2092 ] 
11:26:17: [DVTCommonLib]###  LogicalWrite Completed 

11:26:17: [DVTCommonLib]###  LogicalRead called
11:26:18: [ ReadLba(0xB24029, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2093 ] 
11:26:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:18: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 233 times 
11:26:18: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE9, 0x0) , Command count = 2094 ] 
11:26:18: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:18: [DVTCommonLib]### Card response as High Capacity from card
11:26:18: [DVTCommonLib]### VOLA from card : 0x1
11:26:18: [DVTCommonLib]### CMD Pattern from card : 0xE9
11:26:18: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9600>, <py_sfcl.CommandDataDefinition object at 0x064B96C0>) , Command count = 2095 ] 
11:26:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0632E330>, <py_sfcl.CommandDataDefinition object at 0x064889C0>) , Command count = 2096 ] 
11:26:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2097 ] 
11:26:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:19: [ SetBusWidth(0x4) , Command count = 2098 ] 
11:26:19: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:19: ####CSD Registe 2.0 Values####
11:26:19: CSD_STRUCTURE                                 :0x1
11:26:19: Reserv1                                       :0x0
11:26:19: Time Access 1 TAAC                            :0xe
11:26:19: Time Access 2 NSAC*100                        :0x0
11:26:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:19: Card Command Classess CCC                     :0x5b5
11:26:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:19: DSR(driver stage register)  DSR_IMP           :0x0
11:26:19: Reserv2                                       :0x0
11:26:19: Device Size C_SIZE                            :0xedc8
11:26:19: Reserv3                                       :0x0
11:26:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:19: Reserv4                                       :0x0
11:26:19: Write Speed Factor R2W_FACTOR                 :0x2
11:26:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:19: FILE_FORMAT_GRP                               :0x0
11:26:19: COPY flag                                     :0x1
11:26:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:19: File_Format                                   :0x0
11:26:19: CRC                                           :0x0
11:26:19: ####CSD Registe Values####  

11:26:19: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:19: ProductSerialNumber = 0x23482900
11:26:19: CardMaximumLBA      = 0x3b72400
11:26:19: CardCapacity        = 32G
11:26:19: Is card secure      = 0
11:26:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:19: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:19: [DVTCommonLib]###  LogicalWrite called
11:26:20: [ WriteLba(0x3438A15, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2099 ] 
11:26:20: [DVTCommonLib]###  LogicalWrite Completed 

11:26:20: [DVTCommonLib]###  LogicalRead called
11:26:22: [ ReadLba(0x3438A15, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2100 ] 
11:26:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:22: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 234 times 
11:26:22: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xEA, 0x0) , Command count = 2101 ] 
11:26:22: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:22: [DVTCommonLib]### Card response as High Capacity from card
11:26:22: [DVTCommonLib]### VOLA from card : 0x1
11:26:22: [DVTCommonLib]### CMD Pattern from card : 0xEA
11:26:22: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB1E0>, <py_sfcl.CommandDataDefinition object at 0x064B9930>) , Command count = 2102 ] 
11:26:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDE030>, <py_sfcl.CommandDataDefinition object at 0x06488F00>) , Command count = 2103 ] 
11:26:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2104 ] 
11:26:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:22: [ SetBusWidth(0x4) , Command count = 2105 ] 
11:26:22: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:22: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:22: ####CSD Registe 2.0 Values####
11:26:22: CSD_STRUCTURE                                 :0x1
11:26:22: Reserv1                                       :0x0
11:26:22: Time Access 1 TAAC                            :0xe
11:26:22: Time Access 2 NSAC*100                        :0x0
11:26:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:22: Card Command Classess CCC                     :0x5b5
11:26:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:22: DSR(driver stage register)  DSR_IMP           :0x0
11:26:22: Reserv2                                       :0x0
11:26:22: Device Size C_SIZE                            :0xedc8
11:26:22: Reserv3                                       :0x0
11:26:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:22: Reserv4                                       :0x0
11:26:22: Write Speed Factor R2W_FACTOR                 :0x2
11:26:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:22: FILE_FORMAT_GRP                               :0x0
11:26:22: COPY flag                                     :0x1
11:26:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:22: File_Format                                   :0x0
11:26:22: CRC                                           :0x0
11:26:22: ####CSD Registe Values####  

11:26:22: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:22: ProductSerialNumber = 0x23482900
11:26:22: CardMaximumLBA      = 0x3b72400
11:26:22: CardCapacity        = 32G
11:26:22: Is card secure      = 0
11:26:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:22: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:22: [DVTCommonLib]###  LogicalWrite called
11:26:24: [ WriteLba(0x1463F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2106 ] 
11:26:24: [DVTCommonLib]###  LogicalWrite Completed 

11:26:24: [DVTCommonLib]###  LogicalRead called
11:26:25: [ ReadLba(0x1463F5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2107 ] 
11:26:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:25: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 235 times 
11:26:25: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xEB, 0x0) , Command count = 2108 ] 
11:26:26: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:26: [DVTCommonLib]### Card response as High Capacity from card
11:26:26: [DVTCommonLib]### VOLA from card : 0x1
11:26:26: [DVTCommonLib]### CMD Pattern from card : 0xEB
11:26:26: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064882A0>, <py_sfcl.CommandDataDefinition object at 0x064AB210>) , Command count = 2109 ] 
11:26:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06493D50>, <py_sfcl.CommandDataDefinition object at 0x064B9870>) , Command count = 2110 ] 
11:26:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2111 ] 
11:26:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:26: [ SetBusWidth(0x4) , Command count = 2112 ] 
11:26:26: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:26: ####CSD Registe 2.0 Values####
11:26:26: CSD_STRUCTURE                                 :0x1
11:26:26: Reserv1                                       :0x0
11:26:26: Time Access 1 TAAC                            :0xe
11:26:26: Time Access 2 NSAC*100                        :0x0
11:26:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:26: Card Command Classess CCC                     :0x5b5
11:26:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:26: DSR(driver stage register)  DSR_IMP           :0x0
11:26:26: Reserv2                                       :0x0
11:26:26: Device Size C_SIZE                            :0xedc8
11:26:26: Reserv3                                       :0x0
11:26:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:26: Reserv4                                       :0x0
11:26:26: Write Speed Factor R2W_FACTOR                 :0x2
11:26:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:26: FILE_FORMAT_GRP                               :0x0
11:26:26: COPY flag                                     :0x1
11:26:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:26: File_Format                                   :0x0
11:26:26: CRC                                           :0x0
11:26:26: ####CSD Registe Values####  

11:26:26: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:26: ProductSerialNumber = 0x23482900
11:26:26: CardMaximumLBA      = 0x3b72400
11:26:26: CardCapacity        = 32G
11:26:26: Is card secure      = 0
11:26:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:26: [DVTCommonLib]###  LogicalWrite called
11:26:27: [ WriteLba(0x236A9D4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2113 ] 
11:26:27: [DVTCommonLib]###  LogicalWrite Completed 

11:26:27: [DVTCommonLib]###  LogicalRead called
11:26:29: [ ReadLba(0x236A9D4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2114 ] 
11:26:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:29: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 236 times 
11:26:29: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xEC, 0x0) , Command count = 2115 ] 
11:26:29: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:29: [DVTCommonLib]### Card response as High Capacity from card
11:26:29: [DVTCommonLib]### VOLA from card : 0x1
11:26:29: [DVTCommonLib]### CMD Pattern from card : 0xEC
11:26:29: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB180>, <py_sfcl.CommandDataDefinition object at 0x064B9E40>) , Command count = 2116 ] 
11:26:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B95D0>, <py_sfcl.CommandDataDefinition object at 0x064B96F0>) , Command count = 2117 ] 
11:26:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2118 ] 
11:26:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:29: [ SetBusWidth(0x4) , Command count = 2119 ] 
11:26:29: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:29: ####CSD Registe 2.0 Values####
11:26:29: CSD_STRUCTURE                                 :0x1
11:26:29: Reserv1                                       :0x0
11:26:29: Time Access 1 TAAC                            :0xe
11:26:29: Time Access 2 NSAC*100                        :0x0
11:26:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:29: Card Command Classess CCC                     :0x5b5
11:26:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:29: DSR(driver stage register)  DSR_IMP           :0x0
11:26:29: Reserv2                                       :0x0
11:26:29: Device Size C_SIZE                            :0xedc8
11:26:29: Reserv3                                       :0x0
11:26:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:29: Reserv4                                       :0x0
11:26:29: Write Speed Factor R2W_FACTOR                 :0x2
11:26:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:29: FILE_FORMAT_GRP                               :0x0
11:26:29: COPY flag                                     :0x1
11:26:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:29: File_Format                                   :0x0
11:26:29: CRC                                           :0x0
11:26:29: ####CSD Registe Values####  

11:26:29: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:29: ProductSerialNumber = 0x23482900
11:26:29: CardMaximumLBA      = 0x3b72400
11:26:29: CardCapacity        = 32G
11:26:29: Is card secure      = 0
11:26:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:29: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:29: [DVTCommonLib]###  LogicalWrite called
11:26:31: [ WriteLba(0x271CFF4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2120 ] 
11:26:31: [DVTCommonLib]###  LogicalWrite Completed 

11:26:31: [DVTCommonLib]###  LogicalRead called
11:26:33: [ ReadLba(0x271CFF4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2121 ] 
11:26:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 237 times 
11:26:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xED, 0x0) , Command count = 2122 ] 
11:26:33: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:33: [DVTCommonLib]### Card response as High Capacity from card
11:26:33: [DVTCommonLib]### VOLA from card : 0x1
11:26:33: [DVTCommonLib]### CMD Pattern from card : 0xED
11:26:33: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488240>, <py_sfcl.CommandDataDefinition object at 0x064B9690>) , Command count = 2123 ] 
11:26:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9780>, <py_sfcl.CommandDataDefinition object at 0x064B9E10>) , Command count = 2124 ] 
11:26:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2125 ] 
11:26:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:33: [ SetBusWidth(0x4) , Command count = 2126 ] 
11:26:33: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:33: ####CSD Registe 2.0 Values####
11:26:33: CSD_STRUCTURE                                 :0x1
11:26:33: Reserv1                                       :0x0
11:26:33: Time Access 1 TAAC                            :0xe
11:26:33: Time Access 2 NSAC*100                        :0x0
11:26:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:33: Card Command Classess CCC                     :0x5b5
11:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:33: DSR(driver stage register)  DSR_IMP           :0x0
11:26:33: Reserv2                                       :0x0
11:26:33: Device Size C_SIZE                            :0xedc8
11:26:33: Reserv3                                       :0x0
11:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:33: Reserv4                                       :0x0
11:26:33: Write Speed Factor R2W_FACTOR                 :0x2
11:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:33: FILE_FORMAT_GRP                               :0x0
11:26:33: COPY flag                                     :0x1
11:26:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:33: File_Format                                   :0x0
11:26:33: CRC                                           :0x0
11:26:33: ####CSD Registe Values####  

11:26:33: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:33: ProductSerialNumber = 0x23482900
11:26:33: CardMaximumLBA      = 0x3b72400
11:26:33: CardCapacity        = 32G
11:26:33: Is card secure      = 0
11:26:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:33: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:33: [DVTCommonLib]###  LogicalWrite called
11:26:34: [ WriteLba(0x33AE7A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2127 ] 
11:26:34: [DVTCommonLib]###  LogicalWrite Completed 

11:26:34: [DVTCommonLib]###  LogicalRead called
11:26:36: [ ReadLba(0x33AE7A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2128 ] 
11:26:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:36: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 238 times 
11:26:36: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xEE, 0x0) , Command count = 2129 ] 
11:26:36: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:36: [DVTCommonLib]### Card response as High Capacity from card
11:26:36: [DVTCommonLib]### VOLA from card : 0x1
11:26:36: [DVTCommonLib]### CMD Pattern from card : 0xEE
11:26:36: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488330>, <py_sfcl.CommandDataDefinition object at 0x064881E0>) , Command count = 2130 ] 
11:26:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9750>, <py_sfcl.CommandDataDefinition object at 0x064B9B40>) , Command count = 2131 ] 
11:26:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2132 ] 
11:26:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:36: [ SetBusWidth(0x4) , Command count = 2133 ] 
11:26:36: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:36: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:36: ####CSD Registe 2.0 Values####
11:26:36: CSD_STRUCTURE                                 :0x1
11:26:36: Reserv1                                       :0x0
11:26:36: Time Access 1 TAAC                            :0xe
11:26:36: Time Access 2 NSAC*100                        :0x0
11:26:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:36: Card Command Classess CCC                     :0x5b5
11:26:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:36: DSR(driver stage register)  DSR_IMP           :0x0
11:26:36: Reserv2                                       :0x0
11:26:36: Device Size C_SIZE                            :0xedc8
11:26:36: Reserv3                                       :0x0
11:26:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:36: Reserv4                                       :0x0
11:26:36: Write Speed Factor R2W_FACTOR                 :0x2
11:26:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:36: FILE_FORMAT_GRP                               :0x0
11:26:36: COPY flag                                     :0x1
11:26:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:36: File_Format                                   :0x0
11:26:36: CRC                                           :0x0
11:26:36: ####CSD Registe Values####  

11:26:36: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:36: ProductSerialNumber = 0x23482900
11:26:36: CardMaximumLBA      = 0x3b72400
11:26:36: CardCapacity        = 32G
11:26:36: Is card secure      = 0
11:26:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:36: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:36: [DVTCommonLib]###  LogicalWrite called
11:26:38: [ WriteLba(0x26FCE06, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2134 ] 
11:26:38: [DVTCommonLib]###  LogicalWrite Completed 

11:26:38: [DVTCommonLib]###  LogicalRead called
11:26:40: [ ReadLba(0x26FCE06, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2135 ] 
11:26:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:40: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 239 times 
11:26:40: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xEF, 0x0) , Command count = 2136 ] 
11:26:40: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:40: [DVTCommonLib]### Card response as High Capacity from card
11:26:40: [DVTCommonLib]### VOLA from card : 0x1
11:26:40: [DVTCommonLib]### CMD Pattern from card : 0xEF
11:26:40: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065089F0>, <py_sfcl.CommandDataDefinition object at 0x064B98D0>) , Command count = 2137 ] 
11:26:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065065D0>, <py_sfcl.CommandDataDefinition object at 0x064B9DE0>) , Command count = 2138 ] 
11:26:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2139 ] 
11:26:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:40: [ SetBusWidth(0x4) , Command count = 2140 ] 
11:26:40: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:40: ####CSD Registe 2.0 Values####
11:26:40: CSD_STRUCTURE                                 :0x1
11:26:40: Reserv1                                       :0x0
11:26:40: Time Access 1 TAAC                            :0xe
11:26:40: Time Access 2 NSAC*100                        :0x0
11:26:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:40: Card Command Classess CCC                     :0x5b5
11:26:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:40: DSR(driver stage register)  DSR_IMP           :0x0
11:26:40: Reserv2                                       :0x0
11:26:40: Device Size C_SIZE                            :0xedc8
11:26:40: Reserv3                                       :0x0
11:26:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:40: Reserv4                                       :0x0
11:26:40: Write Speed Factor R2W_FACTOR                 :0x2
11:26:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:40: FILE_FORMAT_GRP                               :0x0
11:26:40: COPY flag                                     :0x1
11:26:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:40: File_Format                                   :0x0
11:26:40: CRC                                           :0x0
11:26:40: ####CSD Registe Values####  

11:26:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:40: ProductSerialNumber = 0x23482900
11:26:40: CardMaximumLBA      = 0x3b72400
11:26:40: CardCapacity        = 32G
11:26:40: Is card secure      = 0
11:26:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:40: [DVTCommonLib]###  LogicalWrite called
11:26:42: [ WriteLba(0x1060D85, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2141 ] 
11:26:42: [DVTCommonLib]###  LogicalWrite Completed 

11:26:42: [DVTCommonLib]###  LogicalRead called
11:26:43: [ ReadLba(0x1060D85, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2142 ] 
11:26:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:43: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 240 times 
11:26:43: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF0, 0x0) , Command count = 2143 ] 
11:26:43: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:43: [DVTCommonLib]### Card response as High Capacity from card
11:26:43: [DVTCommonLib]### VOLA from card : 0x1
11:26:43: [DVTCommonLib]### CMD Pattern from card : 0xF0
11:26:43: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065083C0>, <py_sfcl.CommandDataDefinition object at 0x06508210>) , Command count = 2144 ] 
11:26:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488090>, <py_sfcl.CommandDataDefinition object at 0x064B9D50>) , Command count = 2145 ] 
11:26:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2146 ] 
11:26:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:43: [ SetBusWidth(0x4) , Command count = 2147 ] 
11:26:43: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:43: ####CSD Registe 2.0 Values####
11:26:43: CSD_STRUCTURE                                 :0x1
11:26:43: Reserv1                                       :0x0
11:26:43: Time Access 1 TAAC                            :0xe
11:26:43: Time Access 2 NSAC*100                        :0x0
11:26:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:43: Card Command Classess CCC                     :0x5b5
11:26:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:43: DSR(driver stage register)  DSR_IMP           :0x0
11:26:43: Reserv2                                       :0x0
11:26:43: Device Size C_SIZE                            :0xedc8
11:26:43: Reserv3                                       :0x0
11:26:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:43: Reserv4                                       :0x0
11:26:43: Write Speed Factor R2W_FACTOR                 :0x2
11:26:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:43: FILE_FORMAT_GRP                               :0x0
11:26:43: COPY flag                                     :0x1
11:26:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:43: File_Format                                   :0x0
11:26:43: CRC                                           :0x0
11:26:43: ####CSD Registe Values####  

11:26:43: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:43: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:44: ProductSerialNumber = 0x23482900
11:26:44: CardMaximumLBA      = 0x3b72400
11:26:44: CardCapacity        = 32G
11:26:44: Is card secure      = 0
11:26:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:44: [DVTCommonLib]###  LogicalWrite called
11:26:45: [ WriteLba(0x3459F2B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2148 ] 
11:26:45: [DVTCommonLib]###  LogicalWrite Completed 

11:26:45: [DVTCommonLib]###  LogicalRead called
11:26:47: [ ReadLba(0x3459F2B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2149 ] 
11:26:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:47: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 241 times 
11:26:47: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF1, 0x0) , Command count = 2150 ] 
11:26:47: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:47: [DVTCommonLib]### Card response as High Capacity from card
11:26:47: [DVTCommonLib]### VOLA from card : 0x1
11:26:47: [DVTCommonLib]### CMD Pattern from card : 0xF1
11:26:47: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064AB2A0>, <py_sfcl.CommandDataDefinition object at 0x065064E0>) , Command count = 2151 ] 
11:26:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488420>, <py_sfcl.CommandDataDefinition object at 0x064B9EA0>) , Command count = 2152 ] 
11:26:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2153 ] 
11:26:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:47: [ SetBusWidth(0x4) , Command count = 2154 ] 
11:26:47: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:47: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:47: ####CSD Registe 2.0 Values####
11:26:47: CSD_STRUCTURE                                 :0x1
11:26:47: Reserv1                                       :0x0
11:26:47: Time Access 1 TAAC                            :0xe
11:26:47: Time Access 2 NSAC*100                        :0x0
11:26:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:47: Card Command Classess CCC                     :0x5b5
11:26:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:47: DSR(driver stage register)  DSR_IMP           :0x0
11:26:47: Reserv2                                       :0x0
11:26:47: Device Size C_SIZE                            :0xedc8
11:26:47: Reserv3                                       :0x0
11:26:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:47: Reserv4                                       :0x0
11:26:47: Write Speed Factor R2W_FACTOR                 :0x2
11:26:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:47: FILE_FORMAT_GRP                               :0x0
11:26:47: COPY flag                                     :0x1
11:26:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:47: File_Format                                   :0x0
11:26:47: CRC                                           :0x0
11:26:47: ####CSD Registe Values####  

11:26:47: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:47: ProductSerialNumber = 0x23482900
11:26:47: CardMaximumLBA      = 0x3b72400
11:26:47: CardCapacity        = 32G
11:26:47: Is card secure      = 0
11:26:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:47: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:47: [DVTCommonLib]###  LogicalWrite called
11:26:49: [ WriteLba(0xAB483C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2155 ] 
11:26:49: [DVTCommonLib]###  LogicalWrite Completed 

11:26:49: [DVTCommonLib]###  LogicalRead called
11:26:50: [ ReadLba(0xAB483C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2156 ] 
11:26:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:50: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 242 times 
11:26:50: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF2, 0x0) , Command count = 2157 ] 
11:26:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:51: [DVTCommonLib]### Card response as High Capacity from card
11:26:51: [DVTCommonLib]### VOLA from card : 0x1
11:26:51: [DVTCommonLib]### CMD Pattern from card : 0xF2
11:26:51: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488060>, <py_sfcl.CommandDataDefinition object at 0x064B9C60>) , Command count = 2158 ] 
11:26:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06508AB0>, <py_sfcl.CommandDataDefinition object at 0x06506EA0>) , Command count = 2159 ] 
11:26:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2160 ] 
11:26:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:51: [ SetBusWidth(0x4) , Command count = 2161 ] 
11:26:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:51: ####CSD Registe 2.0 Values####
11:26:51: CSD_STRUCTURE                                 :0x1
11:26:51: Reserv1                                       :0x0
11:26:51: Time Access 1 TAAC                            :0xe
11:26:51: Time Access 2 NSAC*100                        :0x0
11:26:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:51: Card Command Classess CCC                     :0x5b5
11:26:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:51: DSR(driver stage register)  DSR_IMP           :0x0
11:26:51: Reserv2                                       :0x0
11:26:51: Device Size C_SIZE                            :0xedc8
11:26:51: Reserv3                                       :0x0
11:26:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:51: Reserv4                                       :0x0
11:26:51: Write Speed Factor R2W_FACTOR                 :0x2
11:26:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:51: FILE_FORMAT_GRP                               :0x0
11:26:51: COPY flag                                     :0x1
11:26:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:51: File_Format                                   :0x0
11:26:51: CRC                                           :0x0
11:26:51: ####CSD Registe Values####  

11:26:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:51: ProductSerialNumber = 0x23482900
11:26:51: CardMaximumLBA      = 0x3b72400
11:26:51: CardCapacity        = 32G
11:26:51: Is card secure      = 0
11:26:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:51: [DVTCommonLib]###  LogicalWrite called
11:26:52: [ WriteLba(0x30E7EE6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2162 ] 
11:26:52: [DVTCommonLib]###  LogicalWrite Completed 

11:26:52: [DVTCommonLib]###  LogicalRead called
11:26:54: [ ReadLba(0x30E7EE6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2163 ] 
11:26:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:54: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 243 times 
11:26:54: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF3, 0x0) , Command count = 2164 ] 
11:26:54: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:54: [DVTCommonLib]### Card response as High Capacity from card
11:26:54: [DVTCommonLib]### VOLA from card : 0x1
11:26:54: [DVTCommonLib]### CMD Pattern from card : 0xF3
11:26:54: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064889F0>, <py_sfcl.CommandDataDefinition object at 0x064B9CC0>) , Command count = 2165 ] 
11:26:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065082A0>, <py_sfcl.CommandDataDefinition object at 0x06506F90>) , Command count = 2166 ] 
11:26:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2167 ] 
11:26:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:54: [ SetBusWidth(0x4) , Command count = 2168 ] 
11:26:54: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:54: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:54: ####CSD Registe 2.0 Values####
11:26:54: CSD_STRUCTURE                                 :0x1
11:26:54: Reserv1                                       :0x0
11:26:54: Time Access 1 TAAC                            :0xe
11:26:54: Time Access 2 NSAC*100                        :0x0
11:26:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:54: Card Command Classess CCC                     :0x5b5
11:26:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:54: DSR(driver stage register)  DSR_IMP           :0x0
11:26:54: Reserv2                                       :0x0
11:26:54: Device Size C_SIZE                            :0xedc8
11:26:54: Reserv3                                       :0x0
11:26:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:54: Reserv4                                       :0x0
11:26:54: Write Speed Factor R2W_FACTOR                 :0x2
11:26:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:54: FILE_FORMAT_GRP                               :0x0
11:26:54: COPY flag                                     :0x1
11:26:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:54: File_Format                                   :0x0
11:26:54: CRC                                           :0x0
11:26:54: ####CSD Registe Values####  

11:26:54: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:54: ProductSerialNumber = 0x23482900
11:26:54: CardMaximumLBA      = 0x3b72400
11:26:54: CardCapacity        = 32G
11:26:54: Is card secure      = 0
11:26:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:54: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:54: [DVTCommonLib]###  LogicalWrite called
11:26:56: [ WriteLba(0x33755D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2169 ] 
11:26:56: [DVTCommonLib]###  LogicalWrite Completed 

11:26:56: [DVTCommonLib]###  LogicalRead called
11:26:57: [ ReadLba(0x33755D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2170 ] 
11:26:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:26:57: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:26:57: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 244 times 
11:26:57: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:26:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF4, 0x0) , Command count = 2171 ] 
11:26:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:26:58: [DVTCommonLib]### Card response as High Capacity from card
11:26:58: [DVTCommonLib]### VOLA from card : 0x1
11:26:58: [DVTCommonLib]### CMD Pattern from card : 0xF4
11:26:58: [DVTCommonLib]### Reserved bits from card : 0x0
11:26:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06488DB0>, <py_sfcl.CommandDataDefinition object at 0x064B9F30>) , Command count = 2172 ] 
11:26:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFAB10>, <py_sfcl.CommandDataDefinition object at 0x06506B10>) , Command count = 2173 ] 
11:26:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:26:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2174 ] 
11:26:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:58: [ SetBusWidth(0x4) , Command count = 2175 ] 
11:26:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:26:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:26:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:58: ####CSD Registe 2.0 Values####
11:26:58: CSD_STRUCTURE                                 :0x1
11:26:58: Reserv1                                       :0x0
11:26:58: Time Access 1 TAAC                            :0xe
11:26:58: Time Access 2 NSAC*100                        :0x0
11:26:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:58: Card Command Classess CCC                     :0x5b5
11:26:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:58: DSR(driver stage register)  DSR_IMP           :0x0
11:26:58: Reserv2                                       :0x0
11:26:58: Device Size C_SIZE                            :0xedc8
11:26:58: Reserv3                                       :0x0
11:26:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:58: Reserv4                                       :0x0
11:26:58: Write Speed Factor R2W_FACTOR                 :0x2
11:26:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:58: FILE_FORMAT_GRP                               :0x0
11:26:58: COPY flag                                     :0x1
11:26:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:58: File_Format                                   :0x0
11:26:58: CRC                                           :0x0
11:26:58: ####CSD Registe Values####  

11:26:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:26:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:26:58: ProductSerialNumber = 0x23482900
11:26:58: CardMaximumLBA      = 0x3b72400
11:26:58: CardCapacity        = 32G
11:26:58: Is card secure      = 0
11:26:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:26:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:26:58: [DVTCommonLib]###  LogicalWrite called
11:26:59: [ WriteLba(0x3D7FD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2176 ] 
11:26:59: [DVTCommonLib]###  LogicalWrite Completed 

11:26:59: [DVTCommonLib]###  LogicalRead called
11:27:01: [ ReadLba(0x3D7FD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2177 ] 
11:27:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:27:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:27:01: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 245 times 
11:27:01: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:27:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF5, 0x0) , Command count = 2178 ] 
11:27:01: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:27:01: [DVTCommonLib]### Card response as High Capacity from card
11:27:01: [DVTCommonLib]### VOLA from card : 0x1
11:27:01: [DVTCommonLib]### CMD Pattern from card : 0xF5
11:27:01: [DVTCommonLib]### Reserved bits from card : 0x0
11:27:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064B9BD0>, <py_sfcl.CommandDataDefinition object at 0x06506480>) , Command count = 2179 ] 
11:27:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506E70>, <py_sfcl.CommandDataDefinition object at 0x06506660>) , Command count = 2180 ] 
11:27:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:27:01: [ SetCardRCA(0x1, 0xD555) , Command count = 2181 ] 
11:27:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:01: [ SetBusWidth(0x4) , Command count = 2182 ] 
11:27:01: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:27:01: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:27:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:01: ####CSD Registe 2.0 Values####
11:27:01: CSD_STRUCTURE                                 :0x1
11:27:01: Reserv1                                       :0x0
11:27:01: Time Access 1 TAAC                            :0xe
11:27:01: Time Access 2 NSAC*100                        :0x0
11:27:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:01: Card Command Classess CCC                     :0x5b5
11:27:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:01: DSR(driver stage register)  DSR_IMP           :0x0
11:27:01: Reserv2                                       :0x0
11:27:01: Device Size C_SIZE                            :0xedc8
11:27:01: Reserv3                                       :0x0
11:27:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:01: Reserv4                                       :0x0
11:27:01: Write Speed Factor R2W_FACTOR                 :0x2
11:27:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:01: FILE_FORMAT_GRP                               :0x0
11:27:01: COPY flag                                     :0x1
11:27:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:01: File_Format                                   :0x0
11:27:01: CRC                                           :0x0
11:27:01: ####CSD Registe Values####  

11:27:01: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:27:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:27:01: ProductSerialNumber = 0x23482900
11:27:01: CardMaximumLBA      = 0x3b72400
11:27:01: CardCapacity        = 32G
11:27:01: Is card secure      = 0
11:27:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:27:01: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:01: [DVTCommonLib]###  LogicalWrite called
11:27:03: [ WriteLba(0xB7849F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2183 ] 
11:27:03: [DVTCommonLib]###  LogicalWrite Completed 

11:27:03: [DVTCommonLib]###  LogicalRead called
11:27:04: [ ReadLba(0xB7849F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2184 ] 
11:27:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:27:04: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:27:04: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 246 times 
11:27:04: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:27:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF6, 0x0) , Command count = 2185 ] 
11:27:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:27:05: [DVTCommonLib]### Card response as High Capacity from card
11:27:05: [DVTCommonLib]### VOLA from card : 0x1
11:27:05: [DVTCommonLib]### CMD Pattern from card : 0xF6
11:27:05: [DVTCommonLib]### Reserved bits from card : 0x0
11:27:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506960>, <py_sfcl.CommandDataDefinition object at 0x06506DE0>) , Command count = 2186 ] 
11:27:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506A80>, <py_sfcl.CommandDataDefinition object at 0x064DF660>) , Command count = 2187 ] 
11:27:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:27:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2188 ] 
11:27:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:05: [ SetBusWidth(0x4) , Command count = 2189 ] 
11:27:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:27:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:27:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:05: ####CSD Registe 2.0 Values####
11:27:05: CSD_STRUCTURE                                 :0x1
11:27:05: Reserv1                                       :0x0
11:27:05: Time Access 1 TAAC                            :0xe
11:27:05: Time Access 2 NSAC*100                        :0x0
11:27:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:05: Card Command Classess CCC                     :0x5b5
11:27:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:05: DSR(driver stage register)  DSR_IMP           :0x0
11:27:05: Reserv2                                       :0x0
11:27:05: Device Size C_SIZE                            :0xedc8
11:27:05: Reserv3                                       :0x0
11:27:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:05: Reserv4                                       :0x0
11:27:05: Write Speed Factor R2W_FACTOR                 :0x2
11:27:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:05: FILE_FORMAT_GRP                               :0x0
11:27:05: COPY flag                                     :0x1
11:27:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:05: File_Format                                   :0x0
11:27:05: CRC                                           :0x0
11:27:05: ####CSD Registe Values####  

11:27:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:27:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:27:05: ProductSerialNumber = 0x23482900
11:27:05: CardMaximumLBA      = 0x3b72400
11:27:05: CardCapacity        = 32G
11:27:05: Is card secure      = 0
11:27:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:27:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:05: [DVTCommonLib]###  LogicalWrite called
11:27:07: [ WriteLba(0x1A62B65, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2190 ] 
11:27:07: [DVTCommonLib]###  LogicalWrite Completed 

11:27:07: [DVTCommonLib]###  LogicalRead called
11:27:08: [ ReadLba(0x1A62B65, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2191 ] 
11:27:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:27:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:27:08: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 247 times 
11:27:08: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:27:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF7, 0x0) , Command count = 2192 ] 
11:27:08: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:27:08: [DVTCommonLib]### Card response as High Capacity from card
11:27:08: [DVTCommonLib]### VOLA from card : 0x1
11:27:08: [DVTCommonLib]### CMD Pattern from card : 0xF7
11:27:08: [DVTCommonLib]### Reserved bits from card : 0x0
11:27:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF360>, <py_sfcl.CommandDataDefinition object at 0x064DF390>) , Command count = 2193 ] 
11:27:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06506570>, <py_sfcl.CommandDataDefinition object at 0x064DF9F0>) , Command count = 2194 ] 
11:27:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:27:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2195 ] 
11:27:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:08: [ SetBusWidth(0x4) , Command count = 2196 ] 
11:27:08: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:27:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:27:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:08: ####CSD Registe 2.0 Values####
11:27:08: CSD_STRUCTURE                                 :0x1
11:27:08: Reserv1                                       :0x0
11:27:08: Time Access 1 TAAC                            :0xe
11:27:08: Time Access 2 NSAC*100                        :0x0
11:27:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:08: Card Command Classess CCC                     :0x5b5
11:27:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:08: DSR(driver stage register)  DSR_IMP           :0x0
11:27:08: Reserv2                                       :0x0
11:27:08: Device Size C_SIZE                            :0xedc8
11:27:08: Reserv3                                       :0x0
11:27:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:08: Reserv4                                       :0x0
11:27:08: Write Speed Factor R2W_FACTOR                 :0x2
11:27:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:08: FILE_FORMAT_GRP                               :0x0
11:27:08: COPY flag                                     :0x1
11:27:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:08: File_Format                                   :0x0
11:27:08: CRC                                           :0x0
11:27:08: ####CSD Registe Values####  

11:27:08: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:27:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:27:08: ProductSerialNumber = 0x23482900
11:27:08: CardMaximumLBA      = 0x3b72400
11:27:08: CardCapacity        = 32G
11:27:08: Is card secure      = 0
11:27:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:27:08: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:08: [DVTCommonLib]###  LogicalWrite called
11:27:10: [ WriteLba(0x100C1E3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2197 ] 
11:27:10: [DVTCommonLib]###  LogicalWrite Completed 

11:27:10: [DVTCommonLib]###  LogicalRead called
11:27:12: [ ReadLba(0x100C1E3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2198 ] 
11:27:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:27:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:27:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 248 times 
11:27:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:27:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF8, 0x0) , Command count = 2199 ] 
11:27:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:27:12: [DVTCommonLib]### Card response as High Capacity from card
11:27:12: [DVTCommonLib]### VOLA from card : 0x1
11:27:12: [DVTCommonLib]### CMD Pattern from card : 0xF8
11:27:12: [DVTCommonLib]### Reserved bits from card : 0x0
11:27:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF750>, <py_sfcl.CommandDataDefinition object at 0x064DF780>) , Command count = 2200 ] 
11:27:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF3C0>, <py_sfcl.CommandDataDefinition object at 0x064DFDB0>) , Command count = 2201 ] 
11:27:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:27:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2202 ] 
11:27:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:12: [ SetBusWidth(0x4) , Command count = 2203 ] 
11:27:12: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:27:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:27:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:12: ####CSD Registe 2.0 Values####
11:27:12: CSD_STRUCTURE                                 :0x1
11:27:12: Reserv1                                       :0x0
11:27:12: Time Access 1 TAAC                            :0xe
11:27:12: Time Access 2 NSAC*100                        :0x0
11:27:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:12: Card Command Classess CCC                     :0x5b5
11:27:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:12: DSR(driver stage register)  DSR_IMP           :0x0
11:27:12: Reserv2                                       :0x0
11:27:12: Device Size C_SIZE                            :0xedc8
11:27:12: Reserv3                                       :0x0
11:27:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:12: Reserv4                                       :0x0
11:27:12: Write Speed Factor R2W_FACTOR                 :0x2
11:27:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:12: FILE_FORMAT_GRP                               :0x0
11:27:12: COPY flag                                     :0x1
11:27:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:12: File_Format                                   :0x0
11:27:12: CRC                                           :0x0
11:27:12: ####CSD Registe Values####  

11:27:12: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:27:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:27:12: ProductSerialNumber = 0x23482900
11:27:12: CardMaximumLBA      = 0x3b72400
11:27:12: CardCapacity        = 32G
11:27:12: Is card secure      = 0
11:27:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:27:12: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:12: [DVTCommonLib]###  LogicalWrite called
11:27:14: [ WriteLba(0x33E363D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2204 ] 
11:27:14: [DVTCommonLib]###  LogicalWrite Completed 

11:27:14: [DVTCommonLib]###  LogicalRead called
11:27:15: [ ReadLba(0x33E363D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2205 ] 
11:27:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

11:27:15: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
11:27:15: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 249 times 
11:27:15: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
11:27:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF9, 0x0) , Command count = 2206 ] 
11:27:15: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
11:27:15: [DVTCommonLib]### Card response as High Capacity from card
11:27:15: [DVTCommonLib]### VOLA from card : 0x1
11:27:15: [DVTCommonLib]### CMD Pattern from card : 0xF9
11:27:15: [DVTCommonLib]### Reserved bits from card : 0x0
11:27:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DFB40>, <py_sfcl.CommandDataDefinition object at 0x064DFB70>) , Command count = 2207 ] 
11:27:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064DF0C0>, <py_sfcl.CommandDataDefinition object at 0x064DF930>) , Command count = 2208 ] 
11:27:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
11:27:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2209 ] 
11:27:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:16: [ SetBusWidth(0x4) , Command count = 2210 ] 
11:27:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
11:27:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
11:27:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:16: ####CSD Registe 2.0 Values####
11:27:16: CSD_STRUCTURE                                 :0x1
11:27:16: Reserv1                                       :0x0
11:27:16: Time Access 1 TAAC                            :0xe
11:27:16: Time Access 2 NSAC*100                        :0x0
11:27:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:16: Card Command Classess CCC                     :0x5b5
11:27:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:16: DSR(driver stage register)  DSR_IMP           :0x0
11:27:16: Reserv2                                       :0x0
11:27:16: Device Size C_SIZE                            :0xedc8
11:27:16: Reserv3                                       :0x0
11:27:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:16: Reserv4                                       :0x0
11:27:16: Write Speed Factor R2W_FACTOR                 :0x2
11:27:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:16: FILE_FORMAT_GRP                               :0x0
11:27:16: COPY flag                                     :0x1
11:27:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:16: File_Format                                   :0x0
11:27:16: CRC                                           :0x0
11:27:16: ####CSD Registe Values####  

11:27:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
11:27:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:27:16: ProductSerialNumber = 0x23482900
11:27:16: CardMaximumLBA      = 0x3b72400
11:27:16: CardCapacity        = 32G
11:27:16: Is card secure      = 0
11:27:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:27:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
11:27:16: [DVTCommonLib]###  LogicalWrite called
11:27:17: [ WriteLba(0xF592E1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2211 ] 
11:27:17: [DVTCommonLib]###  LogicalWrite Completed 

11:27:17: [DVTCommonLib]###  LogicalRead called
