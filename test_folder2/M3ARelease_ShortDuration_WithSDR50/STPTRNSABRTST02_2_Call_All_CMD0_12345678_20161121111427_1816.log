11:14:21: Sata Disconnector Board found in COM1.
11:14:25: *****************************************************

11:14:25: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

11:14:25: *                                                   *

11:14:25: *  Compatibility with this version is not verified! *

11:14:25: *****************************************************

11:14:27: [ DeviceSetupCompletion() , Command count = 7 ] 
11:14:27: Testname Mapping: ScriptName=[STPTRNSABRTST02_2_Call_All_CMD0] -> TestId=[STPTRNSABRTST02]
11:14:27: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
11:14:28: [ GetPhysicalChipsInfo() , Command count = 9 ] 
11:14:28: [ GetFileSize(0xEA) , Command count = 10 ] 
11:14:28: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
11:14:28: [ GetFileSize(0x16) , Command count = 12 ] 
11:14:28: [ GetCardStatus() , Command count = 13 ] 
11:14:28: [ GetFileSize(0x18) , Command count = 14 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
11:14:28: [ GetFileSize(0x15) , Command count = 16 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
11:14:28: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
11:14:28: [ GetFileSize(0xE) , Command count = 18 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
11:14:28: [ GetFileSize(0x1E) , Command count = 20 ] 
11:14:28: [ GetCardStatus() , Command count = 21 ] 
11:14:28: [ GetFileSize(0x21) , Command count = 22 ] 
11:14:28: [ GetCardStatus() , Command count = 23 ] 
11:14:28: [ GetFileSize(0x33) , Command count = 24 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
11:14:28: [ GetFileSize(0x1F) , Command count = 26 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
11:14:28: [ GetFileSize(0x2A) , Command count = 28 ] 
11:14:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
11:14:28: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
11:14:28: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
11:14:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
11:14:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
11:14:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
11:14:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
11:14:28: [ GetFileSize(0x33) , Command count = 36 ] 
11:14:28: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
11:14:28: [ GetFileSize(0x33) , Command count = 38 ] 
11:14:28: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
11:14:28: [ GetIpVersionInfo() , Command count = 40 ] 
11:14:28: [ GetPhysicalChipsInfo() , Command count = 41 ] 
11:14:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061AF690>, <0x200/0x200, Arb>) , Command count = 42 ] 
11:14:29: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST02 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 11:14:28
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165897
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165897
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST02
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 111441023642
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST02_2_Call_All_CMD0 >>>>>>>>>>>>>>>



11:14:39: ###### Running call_All_CMD0_2 scripts  ######
11:14:46: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
11:14:46: MaxLba of the card: 0x3B72400 
11:14:49: [GO7_globalPreTestingSettings]### Default Initialization Start
11:14:49: [DVTCommonLib]###  SwitchHostVoltageRegion called
11:14:49: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
11:14:49: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

11:14:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
11:14:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
11:14:51: [ CardInit() , Command count = 47 ] 
11:14:51: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165897
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165897
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

11:14:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:52: ####CSD Registe 2.0 Values####
11:14:52: CSD_STRUCTURE                                 :0x1
11:14:52: Reserv1                                       :0x0
11:14:52: Time Access 1 TAAC                            :0xe
11:14:52: Time Access 2 NSAC*100                        :0x0
11:14:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:52: Card Command Classess CCC                     :0x5b5
11:14:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:52: DSR(driver stage register)  DSR_IMP           :0x0
11:14:52: Reserv2                                       :0x0
11:14:52: Device Size C_SIZE                            :0xedc8
11:14:53: Reserv3                                       :0x0
11:14:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:53: Reserv4                                       :0x0
11:14:53: Write Speed Factor R2W_FACTOR                 :0x2
11:14:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:53: FILE_FORMAT_GRP                               :0x0
11:14:53: COPY flag                                     :0x1
11:14:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:53: File_Format                                   :0x0
11:14:53: CRC                                           :0x0
11:14:53: ####CSD Registe Values####  

11:14:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
11:14:54: ProductSerialNumber = 0x23482900
11:14:54: CardMaximumLBA      = 0x3b72400
11:14:54: CardCapacity        = 32G
11:14:54: Is card secure      = 0
11:14:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

11:14:54: [GO7_globalPreTestingSettings]### Default Initialization Completed 


11:14:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:14:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:14:56: Host Frequency set to 25000 KHz
11:14:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:14:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:14:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:14:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216C00>, 0x0, True) , Command count = 49 ] 
11:14:56: [GO18_globalSetVolt]### Host voltage value is set.
11:14:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:14:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216A80>, 0x0, False) , Command count = 50 ] 
11:14:56: [GO18_globalSetVolt]### Host voltage value is set.
11:14:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
11:14:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:14:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
11:14:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:14:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:14:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:14:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:14:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:14:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
11:14:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:14:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:14:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216FC0>, <py_sfcl.CommandDataDefinition object at 0x062166C0>) , Command count = 54 ] 
11:14:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:14:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x06216EA0>) , Command count = 55 ] 
11:14:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:14:56: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
11:14:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:14:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:14:56: Host Frequency set to 25000 KHz
11:14:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:14:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:56: ####CSD Registe 2.0 Values####
11:14:56: CSD_STRUCTURE                                 :0x1
11:14:56: Reserv1                                       :0x0
11:14:56: Time Access 1 TAAC                            :0xe
11:14:56: Time Access 2 NSAC*100                        :0x0
11:14:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:14:56: Card Command Classess CCC                     :0x5b5
11:14:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:56: DSR(driver stage register)  DSR_IMP           :0x0
11:14:56: Reserv2                                       :0x0
11:14:56: Device Size C_SIZE                            :0xedc8
11:14:56: Reserv3                                       :0x0
11:14:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:57: Reserv4                                       :0x0
11:14:57: Write Speed Factor R2W_FACTOR                 :0x2
11:14:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:57: FILE_FORMAT_GRP                               :0x0
11:14:57: COPY flag                                     :0x1
11:14:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:57: File_Format                                   :0x0
11:14:57: CRC                                           :0x0
11:14:57: ####CSD Registe Values####  

11:14:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:14:57: [GetSCRRegisterEntry] Passed
11:14:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:14:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:14:57: Data_Status_After Erases          : 0
11:14:57: CPRM Security Support             : No Security
11:14:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:14:57: Spec. Version                     : Version 3.0X
11:14:57: Extended Security Support         : Extended_Security_Not_Supported
11:14:57: Command Support                   : COMMAND_SUPPORT
11:14:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216570>, <py_sfcl.CommandDataDefinition object at 0x06268030>) , Command count = 57 ] 
11:14:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 58 ] 
11:14:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:14:57: [ SetBusWidth(0x4) , Command count = 59 ] 
11:14:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:14:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062681E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
11:14:58: Protected Area Size 0x28000
11:14:58: Bus Width           2
11:14:58: Secure Mode         0
11:14:58: Speed  Class        4
11:14:58: Perf Move           0
11:14:58: Au Size             9
11:14:58: Erase Size          15
11:14:58: Erase Timeout       1
11:14:58: Erase offset        1
11:14:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:14:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:14:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:14:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
11:14:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:14:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:14:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:14:58: Host Frequency set to 100000 KHz
11:14:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:14:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:14:58: ####CSD Registe 2.0 Values####
11:14:58: CSD_STRUCTURE                                 :0x1
11:14:58: Reserv1                                       :0x0
11:14:58: Time Access 1 TAAC                            :0xe
11:14:58: Time Access 2 NSAC*100                        :0x0
11:14:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:14:58: Card Command Classess CCC                     :0x5b5
11:14:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:14:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:14:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:14:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:14:58: DSR(driver stage register)  DSR_IMP           :0x0
11:14:58: Reserv2                                       :0x0
11:14:58: Device Size C_SIZE                            :0xedc8
11:14:58: Reserv3                                       :0x0
11:14:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:14:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:14:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:14:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:14:58: Reserv4                                       :0x0
11:14:58: Write Speed Factor R2W_FACTOR                 :0x2
11:14:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:14:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:14:58: FILE_FORMAT_GRP                               :0x0
11:14:58: COPY flag                                     :0x1
11:14:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:14:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:14:59: File_Format                                   :0x0
11:14:59: CRC                                           :0x0
11:14:59: ####CSD Registe Values####  

11:14:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062685D0>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 62 ] 
11:14:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:14:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x06268480>) , Command count = 63 ] 
11:14:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:14:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:14:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
11:14:59: Protected Area Size 0x28000
11:14:59: Bus Width           2
11:14:59: Secure Mode         0
11:14:59: Speed  Class        4
11:14:59: Perf Move           0
11:14:59: Au Size             9
11:14:59: Erase Size          15
11:14:59: Erase Timeout       1
11:14:59: Erase offset        1
11:14:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:14:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:14:59: ########################################
11:14:59: Stated Running script STPTRNSABRTST62_util_LOAD_VARS 
11:14:59: ########################################
11:14:59: Failed Running script <module 'STPTRNSABRTST62_util_LOAD_VARS' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST62_util_LOAD_VARS.pyc'> with error 'module' object has no attribute 'TestProcedure' 
11:14:59: ########################################
11:14:59: ########################################
11:14:59: Stated Running script STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump 
11:14:59: ########################################
11:14:59: ###### Running STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump Test ###### 

11:15:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:02: Host Frequency set to 25000 KHz
11:15:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268810>, 0x0, True) , Command count = 65 ] 
11:15:02: [GO18_globalSetVolt]### Host voltage value is set.
11:15:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E70>, 0x0, False) , Command count = 66 ] 
11:15:02: [GO18_globalSetVolt]### Host voltage value is set.
11:15:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
11:15:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
11:15:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 69 ] 
11:15:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268990>, <py_sfcl.CommandDataDefinition object at 0x06268EA0>) , Command count = 70 ] 
11:15:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268C60>) , Command count = 71 ] 
11:15:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:02: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
11:15:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:02: Host Frequency set to 25000 KHz
11:15:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:02: ####CSD Registe 2.0 Values####
11:15:02: CSD_STRUCTURE                                 :0x1
11:15:02: Reserv1                                       :0x0
11:15:02: Time Access 1 TAAC                            :0xe
11:15:02: Time Access 2 NSAC*100                        :0x0
11:15:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:02: Card Command Classess CCC                     :0x5b5
11:15:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:02: DSR(driver stage register)  DSR_IMP           :0x0
11:15:02: Reserv2                                       :0x0
11:15:02: Device Size C_SIZE                            :0xedc8
11:15:02: Reserv3                                       :0x0
11:15:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:02: Reserv4                                       :0x0
11:15:02: Write Speed Factor R2W_FACTOR                 :0x2
11:15:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:02: FILE_FORMAT_GRP                               :0x0
11:15:02: COPY flag                                     :0x1
11:15:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:02: File_Format                                   :0x0
11:15:02: CRC                                           :0x0
11:15:02: ####CSD Registe Values####  

11:15:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:02: [GetSCRRegisterEntry] Passed
11:15:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:02: Data_Status_After Erases          : 0
11:15:02: CPRM Security Support             : No Security
11:15:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:02: Spec. Version                     : Version 3.0X
11:15:02: Extended Security Support         : Extended_Security_Not_Supported
11:15:02: Command Support                   : COMMAND_SUPPORT
11:15:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062688D0>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 73 ] 
11:15:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B40>, <py_sfcl.CommandDataDefinition object at 0x06268720>) , Command count = 74 ] 
11:15:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:02: [ SetBusWidth(0x4) , Command count = 75 ] 
11:15:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062687E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
11:15:02: Protected Area Size 0x28000
11:15:02: Bus Width           2
11:15:02: Secure Mode         0
11:15:02: Speed  Class        4
11:15:02: Perf Move           0
11:15:02: Au Size             9
11:15:02: Erase Size          15
11:15:02: Erase Timeout       1
11:15:02: Erase offset        1
11:15:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 77 ] 
11:15:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:03: Host Frequency set to 100000 KHz
11:15:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:03: ####CSD Registe 2.0 Values####
11:15:03: CSD_STRUCTURE                                 :0x1
11:15:03: Reserv1                                       :0x0
11:15:03: Time Access 1 TAAC                            :0xe
11:15:03: Time Access 2 NSAC*100                        :0x0
11:15:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:03: Card Command Classess CCC                     :0x5b5
11:15:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:03: DSR(driver stage register)  DSR_IMP           :0x0
11:15:03: Reserv2                                       :0x0
11:15:03: Device Size C_SIZE                            :0xedc8
11:15:03: Reserv3                                       :0x0
11:15:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:03: Reserv4                                       :0x0
11:15:03: Write Speed Factor R2W_FACTOR                 :0x2
11:15:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:03: FILE_FORMAT_GRP                               :0x0
11:15:03: COPY flag                                     :0x1
11:15:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:03: File_Format                                   :0x0
11:15:03: CRC                                           :0x0
11:15:03: ####CSD Registe Values####  

11:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C90>, <py_sfcl.CommandDataDefinition object at 0x06268FC0>) , Command count = 78 ] 
11:15:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 79 ] 
11:15:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
11:15:07: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
11:15:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Outer loop Count 1024
11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Inner loop Count 29
11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission called
11:15:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062686F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C00>, <py_sfcl.PySEnhancedCmdData object at 0x062687B0>, <None>, <py_sfcl.Command23 object at 0x06268D50>) , Command count = 81 ] 
11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062688A0>, <py_sfcl.PySEnhancedCmdData object at 0x06268780>, <None>, <py_sfcl.Command23 object at 0x06268AB0>) , Command count = 82 ] 
11:15:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:09: Host Frequency set to 25000 KHz
11:15:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269030>, 0x0, True) , Command count = 83 ] 
11:15:09: [GO18_globalSetVolt]### Host voltage value is set.
11:15:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269090>, 0x0, False) , Command count = 84 ] 
11:15:09: [GO18_globalSetVolt]### Host voltage value is set.
11:15:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 85 ] 
11:15:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 86 ] 
11:15:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 87 ] 
11:15:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691E0>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 88 ] 
11:15:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269210>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 89 ] 
11:15:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:09: [ SetCardRCA(0x1, 0xD555) , Command count = 90 ] 
11:15:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:09: Host Frequency set to 25000 KHz
11:15:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:09: ####CSD Registe 2.0 Values####
11:15:09: CSD_STRUCTURE                                 :0x1
11:15:09: Reserv1                                       :0x0
11:15:09: Time Access 1 TAAC                            :0xe
11:15:09: Time Access 2 NSAC*100                        :0x0
11:15:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:09: Card Command Classess CCC                     :0x5b5
11:15:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:09: DSR(driver stage register)  DSR_IMP           :0x0
11:15:09: Reserv2                                       :0x0
11:15:09: Device Size C_SIZE                            :0xedc8
11:15:09: Reserv3                                       :0x0
11:15:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:09: Reserv4                                       :0x0
11:15:09: Write Speed Factor R2W_FACTOR                 :0x2
11:15:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:09: FILE_FORMAT_GRP                               :0x0
11:15:09: COPY flag                                     :0x1
11:15:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:09: File_Format                                   :0x0
11:15:09: CRC                                           :0x0
11:15:09: ####CSD Registe Values####  

11:15:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:09: [GetSCRRegisterEntry] Passed
11:15:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:09: Data_Status_After Erases          : 0
11:15:09: CPRM Security Support             : No Security
11:15:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:09: Spec. Version                     : Version 3.0X
11:15:09: Extended Security Support         : Extended_Security_Not_Supported
11:15:09: Command Support                   : COMMAND_SUPPORT
11:15:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x062692D0>) , Command count = 91 ] 
11:15:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 92 ] 
11:15:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:09: [ SetBusWidth(0x4) , Command count = 93 ] 
11:15:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 94 ] 
11:15:09: Protected Area Size 0x28000
11:15:09: Bus Width           2
11:15:09: Secure Mode         0
11:15:09: Speed  Class        4
11:15:09: Perf Move           0
11:15:09: Au Size             9
11:15:09: Erase Size          15
11:15:09: Erase Timeout       1
11:15:09: Erase offset        1
11:15:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 95 ] 
11:15:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:09: Host Frequency set to 100000 KHz
11:15:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:10: ####CSD Registe 2.0 Values####
11:15:10: CSD_STRUCTURE                                 :0x1
11:15:10: Reserv1                                       :0x0
11:15:10: Time Access 1 TAAC                            :0xe
11:15:10: Time Access 2 NSAC*100                        :0x0
11:15:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:10: Card Command Classess CCC                     :0x5b5
11:15:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:10: DSR(driver stage register)  DSR_IMP           :0x0
11:15:10: Reserv2                                       :0x0
11:15:10: Device Size C_SIZE                            :0xedc8
11:15:10: Reserv3                                       :0x0
11:15:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:10: Reserv4                                       :0x0
11:15:10: Write Speed Factor R2W_FACTOR                 :0x2
11:15:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:10: FILE_FORMAT_GRP                               :0x0
11:15:10: COPY flag                                     :0x1
11:15:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:10: File_Format                                   :0x0
11:15:10: CRC                                           :0x0
11:15:10: ####CSD Registe Values####  

11:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x06269540>) , Command count = 96 ] 
11:15:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695A0>, <py_sfcl.CommandDataDefinition object at 0x062695D0>) , Command count = 97 ] 
11:15:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:11: Failed Running script <module 'STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump.pyc'> with error WriteWithFPGAPattern() got an unexpected keyword argument 'startLba' 
11:15:11: ########################################
11:15:11: ########################################
11:15:11: Stated Running script STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap 
11:15:11: ########################################
11:15:11: ###### Running STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap Test ###### 

11:15:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
11:15:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

11:15:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:13: Host Frequency set to 25000 KHz
11:15:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269840>, 0x0, True) , Command count = 98 ] 
11:15:13: [GO18_globalSetVolt]### Host voltage value is set.
11:15:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269E40>, 0x0, False) , Command count = 99 ] 
11:15:13: [GO18_globalSetVolt]### Host voltage value is set.
11:15:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 100 ] 
11:15:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 101 ] 
11:15:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 102 ] 
11:15:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269C00>) , Command count = 103 ] 
11:15:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x06269900>) , Command count = 104 ] 
11:15:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:13: [ SetCardRCA(0x1, 0xD555) , Command count = 105 ] 
11:15:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:14: Host Frequency set to 25000 KHz
11:15:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:14: ####CSD Registe 2.0 Values####
11:15:14: CSD_STRUCTURE                                 :0x1
11:15:14: Reserv1                                       :0x0
11:15:14: Time Access 1 TAAC                            :0xe
11:15:14: Time Access 2 NSAC*100                        :0x0
11:15:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:14: Card Command Classess CCC                     :0x5b5
11:15:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:14: DSR(driver stage register)  DSR_IMP           :0x0
11:15:14: Reserv2                                       :0x0
11:15:14: Device Size C_SIZE                            :0xedc8
11:15:14: Reserv3                                       :0x0
11:15:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:14: Reserv4                                       :0x0
11:15:14: Write Speed Factor R2W_FACTOR                 :0x2
11:15:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:14: FILE_FORMAT_GRP                               :0x0
11:15:14: COPY flag                                     :0x1
11:15:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:14: File_Format                                   :0x0
11:15:14: CRC                                           :0x0
11:15:14: ####CSD Registe Values####  

11:15:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:14: [GetSCRRegisterEntry] Passed
11:15:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:14: Data_Status_After Erases          : 0
11:15:14: CPRM Security Support             : No Security
11:15:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:14: Spec. Version                     : Version 3.0X
11:15:14: Extended Security Support         : Extended_Security_Not_Supported
11:15:14: Command Support                   : COMMAND_SUPPORT
11:15:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269AB0>, <py_sfcl.CommandDataDefinition object at 0x06269C60>) , Command count = 106 ] 
11:15:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269990>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 107 ] 
11:15:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:14: [ SetBusWidth(0x4) , Command count = 108 ] 
11:15:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062699C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 109 ] 
11:15:14: Protected Area Size 0x28000
11:15:14: Bus Width           2
11:15:14: Secure Mode         0
11:15:14: Speed  Class        4
11:15:14: Perf Move           0
11:15:14: Au Size             9
11:15:14: Erase Size          15
11:15:14: Erase Timeout       1
11:15:14: Erase offset        1
11:15:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 110 ] 
11:15:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:14: Host Frequency set to 100000 KHz
11:15:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:14: ####CSD Registe 2.0 Values####
11:15:14: CSD_STRUCTURE                                 :0x1
11:15:14: Reserv1                                       :0x0
11:15:14: Time Access 1 TAAC                            :0xe
11:15:14: Time Access 2 NSAC*100                        :0x0
11:15:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:14: Card Command Classess CCC                     :0x5b5
11:15:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:15: DSR(driver stage register)  DSR_IMP           :0x0
11:15:15: Reserv2                                       :0x0
11:15:15: Device Size C_SIZE                            :0xedc8
11:15:15: Reserv3                                       :0x0
11:15:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:15: Reserv4                                       :0x0
11:15:15: Write Speed Factor R2W_FACTOR                 :0x2
11:15:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:15: FILE_FORMAT_GRP                               :0x0
11:15:15: COPY flag                                     :0x1
11:15:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:15: File_Format                                   :0x0
11:15:15: CRC                                           :0x0
11:15:15: ####CSD Registe Values####  

11:15:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E10>, <py_sfcl.CommandDataDefinition object at 0x06269EA0>) , Command count = 111 ] 
11:15:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x062696F0>) , Command count = 112 ] 
11:15:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
11:15:18: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 113 ] 
11:15:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

11:15:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269B40>, <py_sfcl.PySEnhancedCmdData object at 0x06269780>, <None>, <py_sfcl.Command23 object at 0x06269BA0>) , Command count = 114 ] 
11:15:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:20: Host Frequency set to 25000 KHz
11:15:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269F30>, 0x0, True) , Command count = 115 ] 
11:15:20: [GO18_globalSetVolt]### Host voltage value is set.
11:15:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x062697B0>, 0x0, False) , Command count = 116 ] 
11:15:20: [GO18_globalSetVolt]### Host voltage value is set.
11:15:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 117 ] 
11:15:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 118 ] 
11:15:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 119 ] 
11:15:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0C0>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 120 ] 
11:15:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0F0>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 121 ] 
11:15:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:20: [ SetCardRCA(0x1, 0xD555) , Command count = 122 ] 
11:15:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:20: Host Frequency set to 25000 KHz
11:15:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:20: ####CSD Registe 2.0 Values####
11:15:20: CSD_STRUCTURE                                 :0x1
11:15:20: Reserv1                                       :0x0
11:15:20: Time Access 1 TAAC                            :0xe
11:15:20: Time Access 2 NSAC*100                        :0x0
11:15:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:20: Card Command Classess CCC                     :0x5b5
11:15:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:20: DSR(driver stage register)  DSR_IMP           :0x0
11:15:20: Reserv2                                       :0x0
11:15:20: Device Size C_SIZE                            :0xedc8
11:15:20: Reserv3                                       :0x0
11:15:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:20: Reserv4                                       :0x0
11:15:20: Write Speed Factor R2W_FACTOR                 :0x2
11:15:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:20: FILE_FORMAT_GRP                               :0x0
11:15:20: COPY flag                                     :0x1
11:15:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:20: File_Format                                   :0x0
11:15:20: CRC                                           :0x0
11:15:20: ####CSD Registe Values####  

11:15:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:20: [GetSCRRegisterEntry] Passed
11:15:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:20: Data_Status_After Erases          : 0
11:15:20: CPRM Security Support             : No Security
11:15:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:20: Spec. Version                     : Version 3.0X
11:15:20: Extended Security Support         : Extended_Security_Not_Supported
11:15:20: Command Support                   : COMMAND_SUPPORT
11:15:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D3C0>, <py_sfcl.CommandDataDefinition object at 0x0626D1E0>) , Command count = 123 ] 
11:15:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D240>, <py_sfcl.CommandDataDefinition object at 0x0626D270>) , Command count = 124 ] 
11:15:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:20: [ SetBusWidth(0x4) , Command count = 125 ] 
11:15:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 126 ] 
11:15:20: Protected Area Size 0x28000
11:15:20: Bus Width           2
11:15:20: Secure Mode         0
11:15:20: Speed  Class        4
11:15:20: Perf Move           0
11:15:20: Au Size             9
11:15:20: Erase Size          15
11:15:20: Erase Timeout       1
11:15:20: Erase offset        1
11:15:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 127 ] 
11:15:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:21: Host Frequency set to 100000 KHz
11:15:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:21: ####CSD Registe 2.0 Values####
11:15:21: CSD_STRUCTURE                                 :0x1
11:15:21: Reserv1                                       :0x0
11:15:21: Time Access 1 TAAC                            :0xe
11:15:21: Time Access 2 NSAC*100                        :0x0
11:15:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:21: Card Command Classess CCC                     :0x5b5
11:15:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:21: DSR(driver stage register)  DSR_IMP           :0x0
11:15:21: Reserv2                                       :0x0
11:15:21: Device Size C_SIZE                            :0xedc8
11:15:21: Reserv3                                       :0x0
11:15:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:21: Reserv4                                       :0x0
11:15:21: Write Speed Factor R2W_FACTOR                 :0x2
11:15:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:21: FILE_FORMAT_GRP                               :0x0
11:15:21: COPY flag                                     :0x1
11:15:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:21: File_Format                                   :0x0
11:15:21: CRC                                           :0x0
11:15:21: ####CSD Registe Values####  

11:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5D0>, <py_sfcl.CommandDataDefinition object at 0x0626D3F0>) , Command count = 128 ] 
11:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D450>, <py_sfcl.CommandDataDefinition object at 0x0626D480>) , Command count = 129 ] 
11:15:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0626D540>, <None>, <py_sfcl.Command23 object at 0x06269C90>) , Command count = 130 ] 
11:15:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:24: Host Frequency set to 25000 KHz
11:15:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D7E0>, 0x0, True) , Command count = 131 ] 
11:15:24: [GO18_globalSetVolt]### Host voltage value is set.
11:15:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D630>, 0x0, False) , Command count = 132 ] 
11:15:24: [GO18_globalSetVolt]### Host voltage value is set.
11:15:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 133 ] 
11:15:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 134 ] 
11:15:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 135 ] 
11:15:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D780>, <py_sfcl.CommandDataDefinition object at 0x0626D720>) , Command count = 136 ] 
11:15:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626D810>) , Command count = 137 ] 
11:15:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:25: [ SetCardRCA(0x1, 0xD555) , Command count = 138 ] 
11:15:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:25: Host Frequency set to 25000 KHz
11:15:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:25: ####CSD Registe 2.0 Values####
11:15:25: CSD_STRUCTURE                                 :0x1
11:15:25: Reserv1                                       :0x0
11:15:25: Time Access 1 TAAC                            :0xe
11:15:25: Time Access 2 NSAC*100                        :0x0
11:15:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:25: Card Command Classess CCC                     :0x5b5
11:15:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:25: DSR(driver stage register)  DSR_IMP           :0x0
11:15:25: Reserv2                                       :0x0
11:15:25: Device Size C_SIZE                            :0xedc8
11:15:25: Reserv3                                       :0x0
11:15:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:25: Reserv4                                       :0x0
11:15:25: Write Speed Factor R2W_FACTOR                 :0x2
11:15:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:25: FILE_FORMAT_GRP                               :0x0
11:15:25: COPY flag                                     :0x1
11:15:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:25: File_Format                                   :0x0
11:15:25: CRC                                           :0x0
11:15:25: ####CSD Registe Values####  

11:15:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:25: [GetSCRRegisterEntry] Passed
11:15:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:25: Data_Status_After Erases          : 0
11:15:25: CPRM Security Support             : No Security
11:15:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:25: Spec. Version                     : Version 3.0X
11:15:25: Extended Security Support         : Extended_Security_Not_Supported
11:15:25: Command Support                   : COMMAND_SUPPORT
11:15:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DA80>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 139 ] 
11:15:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0626D930>) , Command count = 140 ] 
11:15:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:25: [ SetBusWidth(0x4) , Command count = 141 ] 
11:15:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 142 ] 
11:15:25: Protected Area Size 0x28000
11:15:25: Bus Width           2
11:15:25: Secure Mode         0
11:15:25: Speed  Class        4
11:15:25: Perf Move           0
11:15:25: Au Size             9
11:15:25: Erase Size          15
11:15:25: Erase Timeout       1
11:15:25: Erase offset        1
11:15:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 143 ] 
11:15:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:25: Host Frequency set to 100000 KHz
11:15:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:25: ####CSD Registe 2.0 Values####
11:15:25: CSD_STRUCTURE                                 :0x1
11:15:25: Reserv1                                       :0x0
11:15:25: Time Access 1 TAAC                            :0xe
11:15:25: Time Access 2 NSAC*100                        :0x0
11:15:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:25: Card Command Classess CCC                     :0x5b5
11:15:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:25: DSR(driver stage register)  DSR_IMP           :0x0
11:15:25: Reserv2                                       :0x0
11:15:25: Device Size C_SIZE                            :0xedc8
11:15:25: Reserv3                                       :0x0
11:15:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:26: Reserv4                                       :0x0
11:15:26: Write Speed Factor R2W_FACTOR                 :0x2
11:15:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:26: FILE_FORMAT_GRP                               :0x0
11:15:26: COPY flag                                     :0x1
11:15:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:26: File_Format                                   :0x0
11:15:26: CRC                                           :0x0
11:15:26: ####CSD Registe Values####  

11:15:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 144 ] 
11:15:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB10>, <py_sfcl.CommandDataDefinition object at 0x0626DB40>) , Command count = 145 ] 
11:15:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DBA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC00>, <None>, <py_sfcl.Command23 object at 0x0626D570>) , Command count = 146 ] 
11:15:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:29: Host Frequency set to 25000 KHz
11:15:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DEA0>, 0x0, True) , Command count = 147 ] 
11:15:29: [GO18_globalSetVolt]### Host voltage value is set.
11:15:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DCF0>, 0x0, False) , Command count = 148 ] 
11:15:29: [GO18_globalSetVolt]### Host voltage value is set.
11:15:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 149 ] 
11:15:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 150 ] 
11:15:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 151 ] 
11:15:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x0626DDE0>) , Command count = 152 ] 
11:15:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE70>, <py_sfcl.CommandDataDefinition object at 0x0626DED0>) , Command count = 153 ] 
11:15:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:29: [ SetCardRCA(0x1, 0xD555) , Command count = 154 ] 
11:15:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:29: Host Frequency set to 25000 KHz
11:15:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:29: ####CSD Registe 2.0 Values####
11:15:29: CSD_STRUCTURE                                 :0x1
11:15:29: Reserv1                                       :0x0
11:15:29: Time Access 1 TAAC                            :0xe
11:15:29: Time Access 2 NSAC*100                        :0x0
11:15:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:29: Card Command Classess CCC                     :0x5b5
11:15:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:29: DSR(driver stage register)  DSR_IMP           :0x0
11:15:29: Reserv2                                       :0x0
11:15:29: Device Size C_SIZE                            :0xedc8
11:15:29: Reserv3                                       :0x0
11:15:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:29: Reserv4                                       :0x0
11:15:29: Write Speed Factor R2W_FACTOR                 :0x2
11:15:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:29: FILE_FORMAT_GRP                               :0x0
11:15:29: COPY flag                                     :0x1
11:15:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:29: File_Format                                   :0x0
11:15:29: CRC                                           :0x0
11:15:29: ####CSD Registe Values####  

11:15:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:29: [GetSCRRegisterEntry] Passed
11:15:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:29: Data_Status_After Erases          : 0
11:15:29: CPRM Security Support             : No Security
11:15:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:29: Spec. Version                     : Version 3.0X
11:15:29: Extended Security Support         : Extended_Security_Not_Supported
11:15:29: Command Support                   : COMMAND_SUPPORT
11:15:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 155 ] 
11:15:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273180>, <py_sfcl.CommandDataDefinition object at 0x06273030>) , Command count = 156 ] 
11:15:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:29: [ SetBusWidth(0x4) , Command count = 157 ] 
11:15:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062730F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 158 ] 
11:15:29: Protected Area Size 0x28000
11:15:29: Bus Width           2
11:15:29: Secure Mode         0
11:15:29: Speed  Class        4
11:15:29: Perf Move           0
11:15:29: Au Size             9
11:15:29: Erase Size          15
11:15:29: Erase Timeout       1
11:15:29: Erase offset        1
11:15:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 159 ] 
11:15:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:29: Host Frequency set to 100000 KHz
11:15:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:30: ####CSD Registe 2.0 Values####
11:15:30: CSD_STRUCTURE                                 :0x1
11:15:30: Reserv1                                       :0x0
11:15:30: Time Access 1 TAAC                            :0xe
11:15:30: Time Access 2 NSAC*100                        :0x0
11:15:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:30: Card Command Classess CCC                     :0x5b5
11:15:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:30: DSR(driver stage register)  DSR_IMP           :0x0
11:15:30: Reserv2                                       :0x0
11:15:30: Device Size C_SIZE                            :0xedc8
11:15:30: Reserv3                                       :0x0
11:15:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:30: Reserv4                                       :0x0
11:15:30: Write Speed Factor R2W_FACTOR                 :0x2
11:15:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:30: FILE_FORMAT_GRP                               :0x0
11:15:30: COPY flag                                     :0x1
11:15:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:30: File_Format                                   :0x0
11:15:30: CRC                                           :0x0
11:15:30: ####CSD Registe Values####  

11:15:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 160 ] 
11:15:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273210>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 161 ] 
11:15:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062732A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062732D0>, <py_sfcl.PySEnhancedCmdData object at 0x06273300>, <None>, <py_sfcl.Command23 object at 0x0626DC30>) , Command count = 162 ] 
11:15:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:33: Host Frequency set to 25000 KHz
11:15:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x062735A0>, 0x0, True) , Command count = 163 ] 
11:15:33: [GO18_globalSetVolt]### Host voltage value is set.
11:15:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x062733F0>, 0x0, False) , Command count = 164 ] 
11:15:33: [GO18_globalSetVolt]### Host voltage value is set.
11:15:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 165 ] 
11:15:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 166 ] 
11:15:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 167 ] 
11:15:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273540>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 168 ] 
11:15:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273570>, <py_sfcl.CommandDataDefinition object at 0x062735D0>) , Command count = 169 ] 
11:15:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:33: [ SetCardRCA(0x1, 0xD555) , Command count = 170 ] 
11:15:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:34: Host Frequency set to 25000 KHz
11:15:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:34: ####CSD Registe 2.0 Values####
11:15:34: CSD_STRUCTURE                                 :0x1
11:15:34: Reserv1                                       :0x0
11:15:34: Time Access 1 TAAC                            :0xe
11:15:34: Time Access 2 NSAC*100                        :0x0
11:15:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:34: Card Command Classess CCC                     :0x5b5
11:15:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:34: DSR(driver stage register)  DSR_IMP           :0x0
11:15:34: Reserv2                                       :0x0
11:15:34: Device Size C_SIZE                            :0xedc8
11:15:34: Reserv3                                       :0x0
11:15:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:34: Reserv4                                       :0x0
11:15:34: Write Speed Factor R2W_FACTOR                 :0x2
11:15:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:34: FILE_FORMAT_GRP                               :0x0
11:15:34: COPY flag                                     :0x1
11:15:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:34: File_Format                                   :0x0
11:15:34: CRC                                           :0x0
11:15:34: ####CSD Registe Values####  

11:15:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:34: [GetSCRRegisterEntry] Passed
11:15:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:34: Data_Status_After Erases          : 0
11:15:34: CPRM Security Support             : No Security
11:15:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:34: Spec. Version                     : Version 3.0X
11:15:34: Extended Security Support         : Extended_Security_Not_Supported
11:15:34: Command Support                   : COMMAND_SUPPORT
11:15:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 171 ] 
11:15:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062736C0>, <py_sfcl.CommandDataDefinition object at 0x062736F0>) , Command count = 172 ] 
11:15:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:34: [ SetBusWidth(0x4) , Command count = 173 ] 
11:15:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062737B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 174 ] 
11:15:34: Protected Area Size 0x28000
11:15:34: Bus Width           2
11:15:34: Secure Mode         0
11:15:34: Speed  Class        4
11:15:34: Perf Move           0
11:15:34: Au Size             9
11:15:34: Erase Size          15
11:15:34: Erase Timeout       1
11:15:34: Erase offset        1
11:15:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 175 ] 
11:15:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:34: Host Frequency set to 100000 KHz
11:15:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:34: ####CSD Registe 2.0 Values####
11:15:34: CSD_STRUCTURE                                 :0x1
11:15:34: Reserv1                                       :0x0
11:15:34: Time Access 1 TAAC                            :0xe
11:15:34: Time Access 2 NSAC*100                        :0x0
11:15:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:34: Card Command Classess CCC                     :0x5b5
11:15:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:34: DSR(driver stage register)  DSR_IMP           :0x0
11:15:34: Reserv2                                       :0x0
11:15:34: Device Size C_SIZE                            :0xedc8
11:15:34: Reserv3                                       :0x0
11:15:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:35: Reserv4                                       :0x0
11:15:35: Write Speed Factor R2W_FACTOR                 :0x2
11:15:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:35: FILE_FORMAT_GRP                               :0x0
11:15:35: COPY flag                                     :0x1
11:15:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:35: File_Format                                   :0x0
11:15:35: CRC                                           :0x0
11:15:35: ####CSD Registe Values####  

11:15:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 176 ] 
11:15:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738D0>, <py_sfcl.CommandDataDefinition object at 0x06273900>) , Command count = 177 ] 
11:15:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273990>, <py_sfcl.PySEnhancedCmdData object at 0x062739C0>, <None>, <py_sfcl.Command23 object at 0x06273330>) , Command count = 178 ] 
11:15:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:38: Host Frequency set to 25000 KHz
11:15:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C60>, 0x0, True) , Command count = 179 ] 
11:15:38: [GO18_globalSetVolt]### Host voltage value is set.
11:15:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AB0>, 0x0, False) , Command count = 180 ] 
11:15:38: [GO18_globalSetVolt]### Host voltage value is set.
11:15:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 181 ] 
11:15:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 182 ] 
11:15:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 183 ] 
11:15:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C00>, <py_sfcl.CommandDataDefinition object at 0x06273BA0>) , Command count = 184 ] 
11:15:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C30>, <py_sfcl.CommandDataDefinition object at 0x06273C90>) , Command count = 185 ] 
11:15:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:38: [ SetCardRCA(0x1, 0xD555) , Command count = 186 ] 
11:15:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:38: Host Frequency set to 25000 KHz
11:15:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:38: ####CSD Registe 2.0 Values####
11:15:38: CSD_STRUCTURE                                 :0x1
11:15:38: Reserv1                                       :0x0
11:15:38: Time Access 1 TAAC                            :0xe
11:15:38: Time Access 2 NSAC*100                        :0x0
11:15:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:38: Card Command Classess CCC                     :0x5b5
11:15:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:38: DSR(driver stage register)  DSR_IMP           :0x0
11:15:38: Reserv2                                       :0x0
11:15:38: Device Size C_SIZE                            :0xedc8
11:15:38: Reserv3                                       :0x0
11:15:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:38: Reserv4                                       :0x0
11:15:38: Write Speed Factor R2W_FACTOR                 :0x2
11:15:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:38: FILE_FORMAT_GRP                               :0x0
11:15:38: COPY flag                                     :0x1
11:15:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:38: File_Format                                   :0x0
11:15:38: CRC                                           :0x0
11:15:38: ####CSD Registe Values####  

11:15:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:38: [GetSCRRegisterEntry] Passed
11:15:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:38: Data_Status_After Erases          : 0
11:15:38: CPRM Security Support             : No Security
11:15:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:38: Spec. Version                     : Version 3.0X
11:15:38: Extended Security Support         : Extended_Security_Not_Supported
11:15:38: Command Support                   : COMMAND_SUPPORT
11:15:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F00>, <py_sfcl.CommandDataDefinition object at 0x06273D20>) , Command count = 187 ] 
11:15:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x06273DB0>) , Command count = 188 ] 
11:15:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:38: [ SetBusWidth(0x4) , Command count = 189 ] 
11:15:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 190 ] 
11:15:38: Protected Area Size 0x28000
11:15:38: Bus Width           2
11:15:38: Secure Mode         0
11:15:38: Speed  Class        4
11:15:38: Perf Move           0
11:15:38: Au Size             9
11:15:38: Erase Size          15
11:15:38: Erase Timeout       1
11:15:38: Erase offset        1
11:15:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 191 ] 
11:15:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:38: Host Frequency set to 100000 KHz
11:15:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:39: ####CSD Registe 2.0 Values####
11:15:39: CSD_STRUCTURE                                 :0x1
11:15:39: Reserv1                                       :0x0
11:15:39: Time Access 1 TAAC                            :0xe
11:15:39: Time Access 2 NSAC*100                        :0x0
11:15:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:39: Card Command Classess CCC                     :0x5b5
11:15:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:39: DSR(driver stage register)  DSR_IMP           :0x0
11:15:39: Reserv2                                       :0x0
11:15:39: Device Size C_SIZE                            :0xedc8
11:15:39: Reserv3                                       :0x0
11:15:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:39: Reserv4                                       :0x0
11:15:39: Write Speed Factor R2W_FACTOR                 :0x2
11:15:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:39: FILE_FORMAT_GRP                               :0x0
11:15:39: COPY flag                                     :0x1
11:15:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:39: File_Format                                   :0x0
11:15:39: CRC                                           :0x0
11:15:39: ####CSD Registe Values####  

11:15:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F30>, <py_sfcl.CommandDataDefinition object at 0x06273F60>) , Command count = 192 ] 
11:15:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273FC0>, <py_sfcl.CommandDataDefinition object at 0x06276150>) , Command count = 193 ] 
11:15:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276090>, <py_sfcl.PySEnhancedCmdData object at 0x062760C0>, <None>, <py_sfcl.Command23 object at 0x062739F0>) , Command count = 194 ] 
11:15:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:42: Host Frequency set to 25000 KHz
11:15:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276360>, 0x0, True) , Command count = 195 ] 
11:15:42: [GO18_globalSetVolt]### Host voltage value is set.
11:15:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x062761B0>, 0x0, False) , Command count = 196 ] 
11:15:42: [GO18_globalSetVolt]### Host voltage value is set.
11:15:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 197 ] 
11:15:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 198 ] 
11:15:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 199 ] 
11:15:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x062762A0>) , Command count = 200 ] 
11:15:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276330>, <py_sfcl.CommandDataDefinition object at 0x06276390>) , Command count = 201 ] 
11:15:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:42: [ SetCardRCA(0x1, 0xD555) , Command count = 202 ] 
11:15:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:43: Host Frequency set to 25000 KHz
11:15:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:43: ####CSD Registe 2.0 Values####
11:15:43: CSD_STRUCTURE                                 :0x1
11:15:43: Reserv1                                       :0x0
11:15:43: Time Access 1 TAAC                            :0xe
11:15:43: Time Access 2 NSAC*100                        :0x0
11:15:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:43: Card Command Classess CCC                     :0x5b5
11:15:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:43: DSR(driver stage register)  DSR_IMP           :0x0
11:15:43: Reserv2                                       :0x0
11:15:43: Device Size C_SIZE                            :0xedc8
11:15:43: Reserv3                                       :0x0
11:15:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:43: Reserv4                                       :0x0
11:15:43: Write Speed Factor R2W_FACTOR                 :0x2
11:15:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:43: FILE_FORMAT_GRP                               :0x0
11:15:43: COPY flag                                     :0x1
11:15:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:43: File_Format                                   :0x0
11:15:43: CRC                                           :0x0
11:15:43: ####CSD Registe Values####  

11:15:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:43: [GetSCRRegisterEntry] Passed
11:15:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:43: Data_Status_After Erases          : 0
11:15:43: CPRM Security Support             : No Security
11:15:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:43: Spec. Version                     : Version 3.0X
11:15:43: Extended Security Support         : Extended_Security_Not_Supported
11:15:43: Command Support                   : COMMAND_SUPPORT
11:15:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x06276420>) , Command count = 203 ] 
11:15:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x062764B0>) , Command count = 204 ] 
11:15:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:43: [ SetBusWidth(0x4) , Command count = 205 ] 
11:15:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 206 ] 
11:15:43: Protected Area Size 0x28000
11:15:43: Bus Width           2
11:15:43: Secure Mode         0
11:15:43: Speed  Class        4
11:15:43: Perf Move           0
11:15:43: Au Size             9
11:15:43: Erase Size          15
11:15:43: Erase Timeout       1
11:15:43: Erase offset        1
11:15:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 207 ] 
11:15:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:43: Host Frequency set to 100000 KHz
11:15:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:43: ####CSD Registe 2.0 Values####
11:15:43: CSD_STRUCTURE                                 :0x1
11:15:43: Reserv1                                       :0x0
11:15:43: Time Access 1 TAAC                            :0xe
11:15:43: Time Access 2 NSAC*100                        :0x0
11:15:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:43: Card Command Classess CCC                     :0x5b5
11:15:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:43: DSR(driver stage register)  DSR_IMP           :0x0
11:15:43: Reserv2                                       :0x0
11:15:43: Device Size C_SIZE                            :0xedc8
11:15:43: Reserv3                                       :0x0
11:15:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:44: Reserv4                                       :0x0
11:15:44: Write Speed Factor R2W_FACTOR                 :0x2
11:15:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:44: FILE_FORMAT_GRP                               :0x0
11:15:44: COPY flag                                     :0x1
11:15:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:44: File_Format                                   :0x0
11:15:44: CRC                                           :0x0
11:15:44: ####CSD Registe Values####  

11:15:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 208 ] 
11:15:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276690>, <py_sfcl.CommandDataDefinition object at 0x062766C0>) , Command count = 209 ] 
11:15:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276750>, <py_sfcl.PySEnhancedCmdData object at 0x06276780>, <None>, <py_sfcl.Command23 object at 0x062760F0>) , Command count = 210 ] 
11:15:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:47: Host Frequency set to 25000 KHz
11:15:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276A20>, 0x0, True) , Command count = 211 ] 
11:15:47: [GO18_globalSetVolt]### Host voltage value is set.
11:15:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276870>, 0x0, False) , Command count = 212 ] 
11:15:47: [GO18_globalSetVolt]### Host voltage value is set.
11:15:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 213 ] 
11:15:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 214 ] 
11:15:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 215 ] 
11:15:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062769C0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 216 ] 
11:15:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062769F0>, <py_sfcl.CommandDataDefinition object at 0x06276A50>) , Command count = 217 ] 
11:15:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:47: [ SetCardRCA(0x1, 0xD555) , Command count = 218 ] 
11:15:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:47: Host Frequency set to 25000 KHz
11:15:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:47: ####CSD Registe 2.0 Values####
11:15:47: CSD_STRUCTURE                                 :0x1
11:15:47: Reserv1                                       :0x0
11:15:47: Time Access 1 TAAC                            :0xe
11:15:47: Time Access 2 NSAC*100                        :0x0
11:15:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:47: Card Command Classess CCC                     :0x5b5
11:15:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:47: DSR(driver stage register)  DSR_IMP           :0x0
11:15:47: Reserv2                                       :0x0
11:15:47: Device Size C_SIZE                            :0xedc8
11:15:47: Reserv3                                       :0x0
11:15:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:47: Reserv4                                       :0x0
11:15:47: Write Speed Factor R2W_FACTOR                 :0x2
11:15:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:47: FILE_FORMAT_GRP                               :0x0
11:15:47: COPY flag                                     :0x1
11:15:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:47: File_Format                                   :0x0
11:15:47: CRC                                           :0x0
11:15:47: ####CSD Registe Values####  

11:15:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:47: [GetSCRRegisterEntry] Passed
11:15:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:47: Data_Status_After Erases          : 0
11:15:47: CPRM Security Support             : No Security
11:15:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:47: Spec. Version                     : Version 3.0X
11:15:47: Extended Security Support         : Extended_Security_Not_Supported
11:15:47: Command Support                   : COMMAND_SUPPORT
11:15:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276CC0>, <py_sfcl.CommandDataDefinition object at 0x06276AE0>) , Command count = 219 ] 
11:15:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276B40>, <py_sfcl.CommandDataDefinition object at 0x06276B70>) , Command count = 220 ] 
11:15:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:47: [ SetBusWidth(0x4) , Command count = 221 ] 
11:15:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 222 ] 
11:15:47: Protected Area Size 0x28000
11:15:47: Bus Width           2
11:15:47: Secure Mode         0
11:15:47: Speed  Class        4
11:15:47: Perf Move           0
11:15:47: Au Size             9
11:15:47: Erase Size          15
11:15:47: Erase Timeout       1
11:15:47: Erase offset        1
11:15:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 223 ] 
11:15:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:47: Host Frequency set to 100000 KHz
11:15:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:48: ####CSD Registe 2.0 Values####
11:15:48: CSD_STRUCTURE                                 :0x1
11:15:48: Reserv1                                       :0x0
11:15:48: Time Access 1 TAAC                            :0xe
11:15:48: Time Access 2 NSAC*100                        :0x0
11:15:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:48: Card Command Classess CCC                     :0x5b5
11:15:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:48: DSR(driver stage register)  DSR_IMP           :0x0
11:15:48: Reserv2                                       :0x0
11:15:48: Device Size C_SIZE                            :0xedc8
11:15:48: Reserv3                                       :0x0
11:15:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:48: Reserv4                                       :0x0
11:15:48: Write Speed Factor R2W_FACTOR                 :0x2
11:15:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:48: FILE_FORMAT_GRP                               :0x0
11:15:48: COPY flag                                     :0x1
11:15:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:48: File_Format                                   :0x0
11:15:48: CRC                                           :0x0
11:15:48: ####CSD Registe Values####  

11:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276ED0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 224 ] 
11:15:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D50>, <py_sfcl.CommandDataDefinition object at 0x06276D80>) , Command count = 225 ] 
11:15:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276E10>, <py_sfcl.PySEnhancedCmdData object at 0x06276E40>, <None>, <py_sfcl.Command23 object at 0x062767B0>) , Command count = 226 ] 
11:15:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:51: Host Frequency set to 25000 KHz
11:15:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276F00>, 0x0, True) , Command count = 227 ] 
11:15:51: [GO18_globalSetVolt]### Host voltage value is set.
11:15:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276F60>, 0x0, False) , Command count = 228 ] 
11:15:51: [GO18_globalSetVolt]### Host voltage value is set.
11:15:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 229 ] 
11:15:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 230 ] 
11:15:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 231 ] 
11:15:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A0C0>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 232 ] 
11:15:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A0F0>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 233 ] 
11:15:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:51: [ SetCardRCA(0x1, 0xD555) , Command count = 234 ] 
11:15:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:51: Host Frequency set to 25000 KHz
11:15:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:51: ####CSD Registe 2.0 Values####
11:15:51: CSD_STRUCTURE                                 :0x1
11:15:51: Reserv1                                       :0x0
11:15:51: Time Access 1 TAAC                            :0xe
11:15:51: Time Access 2 NSAC*100                        :0x0
11:15:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:51: Card Command Classess CCC                     :0x5b5
11:15:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:51: DSR(driver stage register)  DSR_IMP           :0x0
11:15:51: Reserv2                                       :0x0
11:15:51: Device Size C_SIZE                            :0xedc8
11:15:51: Reserv3                                       :0x0
11:15:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:51: Reserv4                                       :0x0
11:15:51: Write Speed Factor R2W_FACTOR                 :0x2
11:15:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:51: FILE_FORMAT_GRP                               :0x0
11:15:51: COPY flag                                     :0x1
11:15:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:51: File_Format                                   :0x0
11:15:51: CRC                                           :0x0
11:15:51: ####CSD Registe Values####  

11:15:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:51: [GetSCRRegisterEntry] Passed
11:15:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:51: Data_Status_After Erases          : 0
11:15:51: CPRM Security Support             : No Security
11:15:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:51: Spec. Version                     : Version 3.0X
11:15:51: Extended Security Support         : Extended_Security_Not_Supported
11:15:51: Command Support                   : COMMAND_SUPPORT
11:15:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A3C0>, <py_sfcl.CommandDataDefinition object at 0x0627A1E0>) , Command count = 235 ] 
11:15:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A240>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 236 ] 
11:15:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:51: [ SetBusWidth(0x4) , Command count = 237 ] 
11:15:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 238 ] 
11:15:51: Protected Area Size 0x28000
11:15:51: Bus Width           2
11:15:52: Secure Mode         0
11:15:52: Speed  Class        4
11:15:52: Perf Move           0
11:15:52: Au Size             9
11:15:52: Erase Size          15
11:15:52: Erase Timeout       1
11:15:52: Erase offset        1
11:15:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 239 ] 
11:15:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:52: Host Frequency set to 100000 KHz
11:15:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:52: ####CSD Registe 2.0 Values####
11:15:52: CSD_STRUCTURE                                 :0x1
11:15:52: Reserv1                                       :0x0
11:15:52: Time Access 1 TAAC                            :0xe
11:15:52: Time Access 2 NSAC*100                        :0x0
11:15:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:52: Card Command Classess CCC                     :0x5b5
11:15:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:52: DSR(driver stage register)  DSR_IMP           :0x0
11:15:52: Reserv2                                       :0x0
11:15:52: Device Size C_SIZE                            :0xedc8
11:15:52: Reserv3                                       :0x0
11:15:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:52: Reserv4                                       :0x0
11:15:52: Write Speed Factor R2W_FACTOR                 :0x2
11:15:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:52: FILE_FORMAT_GRP                               :0x0
11:15:52: COPY flag                                     :0x1
11:15:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:52: File_Format                                   :0x0
11:15:52: CRC                                           :0x0
11:15:52: ####CSD Registe Values####  

11:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5D0>, <py_sfcl.CommandDataDefinition object at 0x0627A3F0>) , Command count = 240 ] 
11:15:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A450>, <py_sfcl.CommandDataDefinition object at 0x0627A480>) , Command count = 241 ] 
11:15:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A510>, <py_sfcl.PySEnhancedCmdData object at 0x0627A540>, <None>, <py_sfcl.Command23 object at 0x06276E70>) , Command count = 242 ] 
11:15:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:53: [GO4_globalInitCard]### Switch to Specify Card Type
11:15:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:55: Host Frequency set to 25000 KHz
11:15:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:55: [GO18_globalSetVolt]### Set Host Voltage value.
11:15:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:15:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A7E0>, 0x0, True) , Command count = 243 ] 
11:15:55: [GO18_globalSetVolt]### Host voltage value is set.
11:15:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:15:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A630>, 0x0, False) , Command count = 244 ] 
11:15:55: [GO18_globalSetVolt]### Host voltage value is set.
11:15:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 245 ] 
11:15:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:15:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 246 ] 
11:15:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:15:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:15:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:15:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:15:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:15:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 247 ] 
11:15:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:15:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A780>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 248 ] 
11:15:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A7B0>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 249 ] 
11:15:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:15:56: [ SetCardRCA(0x1, 0xD555) , Command count = 250 ] 
11:15:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:15:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:15:56: Host Frequency set to 25000 KHz
11:15:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:15:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:56: ####CSD Registe 2.0 Values####
11:15:56: CSD_STRUCTURE                                 :0x1
11:15:56: Reserv1                                       :0x0
11:15:56: Time Access 1 TAAC                            :0xe
11:15:56: Time Access 2 NSAC*100                        :0x0
11:15:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:15:56: Card Command Classess CCC                     :0x5b5
11:15:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:56: DSR(driver stage register)  DSR_IMP           :0x0
11:15:56: Reserv2                                       :0x0
11:15:56: Device Size C_SIZE                            :0xedc8
11:15:56: Reserv3                                       :0x0
11:15:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:56: Reserv4                                       :0x0
11:15:56: Write Speed Factor R2W_FACTOR                 :0x2
11:15:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:56: FILE_FORMAT_GRP                               :0x0
11:15:56: COPY flag                                     :0x1
11:15:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:56: File_Format                                   :0x0
11:15:56: CRC                                           :0x0
11:15:56: ####CSD Registe Values####  

11:15:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:15:56: [GetSCRRegisterEntry] Passed
11:15:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:15:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:15:56: Data_Status_After Erases          : 0
11:15:56: CPRM Security Support             : No Security
11:15:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:15:56: Spec. Version                     : Version 3.0X
11:15:56: Extended Security Support         : Extended_Security_Not_Supported
11:15:56: Command Support                   : COMMAND_SUPPORT
11:15:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA80>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 251 ] 
11:15:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627A900>) , Command count = 252 ] 
11:15:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:15:56: [ SetBusWidth(0x4) , Command count = 253 ] 
11:15:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:15:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 254 ] 
11:15:56: Protected Area Size 0x28000
11:15:56: Bus Width           2
11:15:56: Secure Mode         0
11:15:56: Speed  Class        4
11:15:56: Perf Move           0
11:15:56: Au Size             9
11:15:56: Erase Size          15
11:15:56: Erase Timeout       1
11:15:56: Erase offset        1
11:15:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:15:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:15:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:15:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 255 ] 
11:15:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:15:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:15:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:15:56: Host Frequency set to 100000 KHz
11:15:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:15:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:15:56: ####CSD Registe 2.0 Values####
11:15:56: CSD_STRUCTURE                                 :0x1
11:15:56: Reserv1                                       :0x0
11:15:56: Time Access 1 TAAC                            :0xe
11:15:56: Time Access 2 NSAC*100                        :0x0
11:15:56: Data Transfer Rate TRAN_SPEED                 :0xb
11:15:56: Card Command Classess CCC                     :0x5b5
11:15:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:15:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:15:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:15:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:15:56: DSR(driver stage register)  DSR_IMP           :0x0
11:15:56: Reserv2                                       :0x0
11:15:56: Device Size C_SIZE                            :0xedc8
11:15:56: Reserv3                                       :0x0
11:15:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:15:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:15:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:15:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:15:57: Reserv4                                       :0x0
11:15:57: Write Speed Factor R2W_FACTOR                 :0x2
11:15:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:15:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:15:57: FILE_FORMAT_GRP                               :0x0
11:15:57: COPY flag                                     :0x1
11:15:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:15:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:15:57: File_Format                                   :0x0
11:15:57: CRC                                           :0x0
11:15:57: ####CSD Registe Values####  

11:15:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 256 ] 
11:15:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:15:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627A9F0>) , Command count = 257 ] 
11:15:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:15:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:15:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:15:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:15:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EDED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AA50>, <py_sfcl.PySEnhancedCmdData object at 0x0627AAB0>, <None>, <py_sfcl.Command23 object at 0x0627A570>) , Command count = 258 ] 
11:15:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:15:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:00: Host Frequency set to 25000 KHz
11:16:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF120>, 0x0, True) , Command count = 259 ] 
11:16:00: [GO18_globalSetVolt]### Host voltage value is set.
11:16:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1B0>, 0x0, False) , Command count = 260 ] 
11:16:00: [GO18_globalSetVolt]### Host voltage value is set.
11:16:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 261 ] 
11:16:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 262 ] 
11:16:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 263 ] 
11:16:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627AB70>) , Command count = 264 ] 
11:16:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627ABD0>) , Command count = 265 ] 
11:16:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:00: [ SetCardRCA(0x1, 0xD555) , Command count = 266 ] 
11:16:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:00: Host Frequency set to 25000 KHz
11:16:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:00: ####CSD Registe 2.0 Values####
11:16:00: CSD_STRUCTURE                                 :0x1
11:16:00: Reserv1                                       :0x0
11:16:00: Time Access 1 TAAC                            :0xe
11:16:00: Time Access 2 NSAC*100                        :0x0
11:16:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:00: Card Command Classess CCC                     :0x5b5
11:16:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:00: DSR(driver stage register)  DSR_IMP           :0x0
11:16:00: Reserv2                                       :0x0
11:16:00: Device Size C_SIZE                            :0xedc8
11:16:00: Reserv3                                       :0x0
11:16:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:00: Reserv4                                       :0x0
11:16:00: Write Speed Factor R2W_FACTOR                 :0x2
11:16:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:00: FILE_FORMAT_GRP                               :0x0
11:16:00: COPY flag                                     :0x1
11:16:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:00: File_Format                                   :0x0
11:16:00: CRC                                           :0x0
11:16:00: ####CSD Registe Values####  

11:16:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:00: [GetSCRRegisterEntry] Passed
11:16:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:00: Data_Status_After Erases          : 0
11:16:00: CPRM Security Support             : No Security
11:16:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:00: Spec. Version                     : Version 3.0X
11:16:00: Extended Security Support         : Extended_Security_Not_Supported
11:16:00: Command Support                   : COMMAND_SUPPORT
11:16:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 267 ] 
11:16:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC60>, <py_sfcl.CommandDataDefinition object at 0x0627AC90>) , Command count = 268 ] 
11:16:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:00: [ SetBusWidth(0x4) , Command count = 269 ] 
11:16:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ACF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 270 ] 
11:16:00: Protected Area Size 0x28000
11:16:00: Bus Width           2
11:16:00: Secure Mode         0
11:16:00: Speed  Class        4
11:16:00: Perf Move           0
11:16:00: Au Size             9
11:16:00: Erase Size          15
11:16:00: Erase Timeout       1
11:16:00: Erase offset        1
11:16:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 271 ] 
11:16:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:00: Host Frequency set to 100000 KHz
11:16:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:01: ####CSD Registe 2.0 Values####
11:16:01: CSD_STRUCTURE                                 :0x1
11:16:01: Reserv1                                       :0x0
11:16:01: Time Access 1 TAAC                            :0xe
11:16:01: Time Access 2 NSAC*100                        :0x0
11:16:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:01: Card Command Classess CCC                     :0x5b5
11:16:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:01: DSR(driver stage register)  DSR_IMP           :0x0
11:16:01: Reserv2                                       :0x0
11:16:01: Device Size C_SIZE                            :0xedc8
11:16:01: Reserv3                                       :0x0
11:16:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:01: Reserv4                                       :0x0
11:16:01: Write Speed Factor R2W_FACTOR                 :0x2
11:16:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:01: FILE_FORMAT_GRP                               :0x0
11:16:01: COPY flag                                     :0x1
11:16:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:01: File_Format                                   :0x0
11:16:01: CRC                                           :0x0
11:16:01: ####CSD Registe Values####  

11:16:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 272 ] 
11:16:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 273 ] 
11:16:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x054019F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AE10>, <py_sfcl.PySEnhancedCmdData object at 0x0627AE70>, <None>, <py_sfcl.Command23 object at 0x0627AAE0>) , Command count = 274 ] 
11:16:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:04: Host Frequency set to 25000 KHz
11:16:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x053FB4E0>, 0x0, True) , Command count = 275 ] 
11:16:04: [GO18_globalSetVolt]### Host voltage value is set.
11:16:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x053FB930>, 0x0, False) , Command count = 276 ] 
11:16:04: [GO18_globalSetVolt]### Host voltage value is set.
11:16:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 277 ] 
11:16:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 278 ] 
11:16:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 279 ] 
11:16:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 280 ] 
11:16:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x0627D030>) , Command count = 281 ] 
11:16:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:04: [ SetCardRCA(0x1, 0xD555) , Command count = 282 ] 
11:16:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:05: Host Frequency set to 25000 KHz
11:16:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:05: ####CSD Registe 2.0 Values####
11:16:05: CSD_STRUCTURE                                 :0x1
11:16:05: Reserv1                                       :0x0
11:16:05: Time Access 1 TAAC                            :0xe
11:16:05: Time Access 2 NSAC*100                        :0x0
11:16:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:05: Card Command Classess CCC                     :0x5b5
11:16:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:05: DSR(driver stage register)  DSR_IMP           :0x0
11:16:05: Reserv2                                       :0x0
11:16:05: Device Size C_SIZE                            :0xedc8
11:16:05: Reserv3                                       :0x0
11:16:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:05: Reserv4                                       :0x0
11:16:05: Write Speed Factor R2W_FACTOR                 :0x2
11:16:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:05: FILE_FORMAT_GRP                               :0x0
11:16:05: COPY flag                                     :0x1
11:16:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:05: File_Format                                   :0x0
11:16:05: CRC                                           :0x0
11:16:05: ####CSD Registe Values####  

11:16:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:05: [GetSCRRegisterEntry] Passed
11:16:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:05: Data_Status_After Erases          : 0
11:16:05: CPRM Security Support             : No Security
11:16:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:05: Spec. Version                     : Version 3.0X
11:16:05: Extended Security Support         : Extended_Security_Not_Supported
11:16:05: Command Support                   : COMMAND_SUPPORT
11:16:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0627D240>) , Command count = 283 ] 
11:16:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F30>, <py_sfcl.CommandDataDefinition object at 0x0627D0C0>) , Command count = 284 ] 
11:16:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:05: [ SetBusWidth(0x4) , Command count = 285 ] 
11:16:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 286 ] 
11:16:05: Protected Area Size 0x28000
11:16:05: Bus Width           2
11:16:05: Secure Mode         0
11:16:05: Speed  Class        4
11:16:05: Perf Move           0
11:16:05: Au Size             9
11:16:05: Erase Size          15
11:16:05: Erase Timeout       1
11:16:05: Erase offset        1
11:16:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 287 ] 
11:16:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:05: Host Frequency set to 100000 KHz
11:16:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:05: ####CSD Registe 2.0 Values####
11:16:05: CSD_STRUCTURE                                 :0x1
11:16:05: Reserv1                                       :0x0
11:16:05: Time Access 1 TAAC                            :0xe
11:16:05: Time Access 2 NSAC*100                        :0x0
11:16:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:05: Card Command Classess CCC                     :0x5b5
11:16:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:05: DSR(driver stage register)  DSR_IMP           :0x0
11:16:05: Reserv2                                       :0x0
11:16:05: Device Size C_SIZE                            :0xedc8
11:16:05: Reserv3                                       :0x0
11:16:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:06: Reserv4                                       :0x0
11:16:06: Write Speed Factor R2W_FACTOR                 :0x2
11:16:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:06: FILE_FORMAT_GRP                               :0x0
11:16:06: COPY flag                                     :0x1
11:16:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:06: File_Format                                   :0x0
11:16:06: CRC                                           :0x0
11:16:06: ####CSD Registe Values####  

11:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 288 ] 
11:16:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401FC0>, <py_sfcl.CommandDataDefinition object at 0x0627D1B0>) , Command count = 289 ] 
11:16:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D210>, <py_sfcl.PySEnhancedCmdData object at 0x0627D270>, <None>, <py_sfcl.Command23 object at 0x0627AEA0>) , Command count = 290 ] 
11:16:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:09: Host Frequency set to 25000 KHz
11:16:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF2D0>, 0x0, True) , Command count = 291 ] 
11:16:09: [GO18_globalSetVolt]### Host voltage value is set.
11:16:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF4E0>, 0x0, False) , Command count = 292 ] 
11:16:09: [GO18_globalSetVolt]### Host voltage value is set.
11:16:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 293 ] 
11:16:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 294 ] 
11:16:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 295 ] 
11:16:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x061AF7E0>) , Command count = 296 ] 
11:16:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216B40>, <py_sfcl.CommandDataDefinition object at 0x0627D330>) , Command count = 297 ] 
11:16:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:09: [ SetCardRCA(0x1, 0xD555) , Command count = 298 ] 
11:16:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:09: Host Frequency set to 25000 KHz
11:16:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:09: ####CSD Registe 2.0 Values####
11:16:09: CSD_STRUCTURE                                 :0x1
11:16:09: Reserv1                                       :0x0
11:16:09: Time Access 1 TAAC                            :0xe
11:16:09: Time Access 2 NSAC*100                        :0x0
11:16:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:09: Card Command Classess CCC                     :0x5b5
11:16:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:09: DSR(driver stage register)  DSR_IMP           :0x0
11:16:09: Reserv2                                       :0x0
11:16:09: Device Size C_SIZE                            :0xedc8
11:16:09: Reserv3                                       :0x0
11:16:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:09: Reserv4                                       :0x0
11:16:09: Write Speed Factor R2W_FACTOR                 :0x2
11:16:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:09: FILE_FORMAT_GRP                               :0x0
11:16:09: COPY flag                                     :0x1
11:16:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:09: File_Format                                   :0x0
11:16:09: CRC                                           :0x0
11:16:09: ####CSD Registe Values####  

11:16:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:09: [GetSCRRegisterEntry] Passed
11:16:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:09: Data_Status_After Erases          : 0
11:16:09: CPRM Security Support             : No Security
11:16:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:09: Spec. Version                     : Version 3.0X
11:16:09: Extended Security Support         : Extended_Security_Not_Supported
11:16:09: Command Support                   : COMMAND_SUPPORT
11:16:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062168D0>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 299 ] 
11:16:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 300 ] 
11:16:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:09: [ SetBusWidth(0x4) , Command count = 301 ] 
11:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 302 ] 
11:16:09: Protected Area Size 0x28000
11:16:09: Bus Width           2
11:16:09: Secure Mode         0
11:16:09: Speed  Class        4
11:16:09: Perf Move           0
11:16:09: Au Size             9
11:16:09: Erase Size          15
11:16:09: Erase Timeout       1
11:16:09: Erase offset        1
11:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 303 ] 
11:16:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:09: Host Frequency set to 100000 KHz
11:16:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:10: ####CSD Registe 2.0 Values####
11:16:10: CSD_STRUCTURE                                 :0x1
11:16:10: Reserv1                                       :0x0
11:16:10: Time Access 1 TAAC                            :0xe
11:16:10: Time Access 2 NSAC*100                        :0x0
11:16:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:10: Card Command Classess CCC                     :0x5b5
11:16:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:10: DSR(driver stage register)  DSR_IMP           :0x0
11:16:10: Reserv2                                       :0x0
11:16:10: Device Size C_SIZE                            :0xedc8
11:16:10: Reserv3                                       :0x0
11:16:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:10: Reserv4                                       :0x0
11:16:10: Write Speed Factor R2W_FACTOR                 :0x2
11:16:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:10: FILE_FORMAT_GRP                               :0x0
11:16:10: COPY flag                                     :0x1
11:16:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:10: File_Format                                   :0x0
11:16:10: CRC                                           :0x0
11:16:10: ####CSD Registe Values####  

11:16:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216AB0>, <py_sfcl.CommandDataDefinition object at 0x0627D660>) , Command count = 304 ] 
11:16:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062165D0>) , Command count = 305 ] 
11:16:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062166C0>, <py_sfcl.PySEnhancedCmdData object at 0x06216A20>, <None>, <py_sfcl.Command23 object at 0x0627D2A0>) , Command count = 306 ] 
11:16:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:13: Host Frequency set to 25000 KHz
11:16:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x062169F0>, 0x0, True) , Command count = 307 ] 
11:16:13: [GO18_globalSetVolt]### Host voltage value is set.
11:16:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216510>, 0x0, False) , Command count = 308 ] 
11:16:13: [GO18_globalSetVolt]### Host voltage value is set.
11:16:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 309 ] 
11:16:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 310 ] 
11:16:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 311 ] 
11:16:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062683C0>, <py_sfcl.CommandDataDefinition object at 0x06268030>) , Command count = 312 ] 
11:16:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 313 ] 
11:16:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:13: [ SetCardRCA(0x1, 0xD555) , Command count = 314 ] 
11:16:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:13: Host Frequency set to 25000 KHz
11:16:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:13: ####CSD Registe 2.0 Values####
11:16:13: CSD_STRUCTURE                                 :0x1
11:16:13: Reserv1                                       :0x0
11:16:13: Time Access 1 TAAC                            :0xe
11:16:13: Time Access 2 NSAC*100                        :0x0
11:16:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:13: Card Command Classess CCC                     :0x5b5
11:16:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:13: DSR(driver stage register)  DSR_IMP           :0x0
11:16:13: Reserv2                                       :0x0
11:16:13: Device Size C_SIZE                            :0xedc8
11:16:13: Reserv3                                       :0x0
11:16:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:13: Reserv4                                       :0x0
11:16:13: Write Speed Factor R2W_FACTOR                 :0x2
11:16:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:13: FILE_FORMAT_GRP                               :0x0
11:16:13: COPY flag                                     :0x1
11:16:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:13: File_Format                                   :0x0
11:16:13: CRC                                           :0x0
11:16:13: ####CSD Registe Values####  

11:16:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:13: [GetSCRRegisterEntry] Passed
11:16:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:13: Data_Status_After Erases          : 0
11:16:13: CPRM Security Support             : No Security
11:16:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:13: Spec. Version                     : Version 3.0X
11:16:13: Extended Security Support         : Extended_Security_Not_Supported
11:16:13: Command Support                   : COMMAND_SUPPORT
11:16:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062681B0>, <py_sfcl.CommandDataDefinition object at 0x06268540>) , Command count = 315 ] 
11:16:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x06268F90>) , Command count = 316 ] 
11:16:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:13: [ SetBusWidth(0x4) , Command count = 317 ] 
11:16:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 318 ] 
11:16:13: Protected Area Size 0x28000
11:16:13: Bus Width           2
11:16:14: Secure Mode         0
11:16:14: Speed  Class        4
11:16:14: Perf Move           0
11:16:14: Au Size             9
11:16:14: Erase Size          15
11:16:14: Erase Timeout       1
11:16:14: Erase offset        1
11:16:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 319 ] 
11:16:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:14: Host Frequency set to 100000 KHz
11:16:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:14: ####CSD Registe 2.0 Values####
11:16:14: CSD_STRUCTURE                                 :0x1
11:16:14: Reserv1                                       :0x0
11:16:14: Time Access 1 TAAC                            :0xe
11:16:14: Time Access 2 NSAC*100                        :0x0
11:16:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:14: Card Command Classess CCC                     :0x5b5
11:16:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:14: DSR(driver stage register)  DSR_IMP           :0x0
11:16:14: Reserv2                                       :0x0
11:16:14: Device Size C_SIZE                            :0xedc8
11:16:14: Reserv3                                       :0x0
11:16:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:14: Reserv4                                       :0x0
11:16:14: Write Speed Factor R2W_FACTOR                 :0x2
11:16:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:14: FILE_FORMAT_GRP                               :0x0
11:16:14: COPY flag                                     :0x1
11:16:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:15: File_Format                                   :0x0
11:16:15: CRC                                           :0x0
11:16:15: ####CSD Registe Values####  

11:16:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x06216E70>) , Command count = 320 ] 
11:16:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x06268480>) , Command count = 321 ] 
11:16:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268EA0>, <py_sfcl.PySEnhancedCmdData object at 0x06268CC0>, <None>, <py_sfcl.Command23 object at 0x0627D480>) , Command count = 322 ] 
11:16:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:17: Host Frequency set to 25000 KHz
11:16:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 323 ] 
11:16:17: [GO18_globalSetVolt]### Host voltage value is set.
11:16:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268A80>, 0x0, False) , Command count = 324 ] 
11:16:17: [GO18_globalSetVolt]### Host voltage value is set.
11:16:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 325 ] 
11:16:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 326 ] 
11:16:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 327 ] 
11:16:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268840>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 328 ] 
11:16:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x06268C30>) , Command count = 329 ] 
11:16:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:18: [ SetCardRCA(0x1, 0xD555) , Command count = 330 ] 
11:16:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:18: Host Frequency set to 25000 KHz
11:16:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:18: ####CSD Registe 2.0 Values####
11:16:18: CSD_STRUCTURE                                 :0x1
11:16:18: Reserv1                                       :0x0
11:16:18: Time Access 1 TAAC                            :0xe
11:16:18: Time Access 2 NSAC*100                        :0x0
11:16:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:18: Card Command Classess CCC                     :0x5b5
11:16:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:18: DSR(driver stage register)  DSR_IMP           :0x0
11:16:18: Reserv2                                       :0x0
11:16:18: Device Size C_SIZE                            :0xedc8
11:16:18: Reserv3                                       :0x0
11:16:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:18: Reserv4                                       :0x0
11:16:18: Write Speed Factor R2W_FACTOR                 :0x2
11:16:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:18: FILE_FORMAT_GRP                               :0x0
11:16:18: COPY flag                                     :0x1
11:16:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:18: File_Format                                   :0x0
11:16:18: CRC                                           :0x0
11:16:18: ####CSD Registe Values####  

11:16:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:18: [GetSCRRegisterEntry] Passed
11:16:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:18: Data_Status_After Erases          : 0
11:16:18: CPRM Security Support             : No Security
11:16:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:18: Spec. Version                     : Version 3.0X
11:16:18: Extended Security Support         : Extended_Security_Not_Supported
11:16:18: Command Support                   : COMMAND_SUPPORT
11:16:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268FC0>, <py_sfcl.CommandDataDefinition object at 0x062689F0>) , Command count = 331 ] 
11:16:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D80>, <py_sfcl.CommandDataDefinition object at 0x06268D20>) , Command count = 332 ] 
11:16:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:18: [ SetBusWidth(0x4) , Command count = 333 ] 
11:16:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 334 ] 
11:16:18: Protected Area Size 0x28000
11:16:18: Bus Width           2
11:16:18: Secure Mode         0
11:16:18: Speed  Class        4
11:16:18: Perf Move           0
11:16:18: Au Size             9
11:16:18: Erase Size          15
11:16:18: Erase Timeout       1
11:16:18: Erase offset        1
11:16:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 335 ] 
11:16:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:18: Host Frequency set to 100000 KHz
11:16:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:18: ####CSD Registe 2.0 Values####
11:16:18: CSD_STRUCTURE                                 :0x1
11:16:18: Reserv1                                       :0x0
11:16:18: Time Access 1 TAAC                            :0xe
11:16:18: Time Access 2 NSAC*100                        :0x0
11:16:18: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:18: Card Command Classess CCC                     :0x5b5
11:16:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:18: DSR(driver stage register)  DSR_IMP           :0x0
11:16:18: Reserv2                                       :0x0
11:16:18: Device Size C_SIZE                            :0xedc8
11:16:18: Reserv3                                       :0x0
11:16:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:19: Reserv4                                       :0x0
11:16:19: Write Speed Factor R2W_FACTOR                 :0x2
11:16:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:19: FILE_FORMAT_GRP                               :0x0
11:16:19: COPY flag                                     :0x1
11:16:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:19: File_Format                                   :0x0
11:16:19: CRC                                           :0x0
11:16:19: ####CSD Registe Values####  

11:16:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x062690C0>) , Command count = 336 ] 
11:16:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CF0>, <py_sfcl.CommandDataDefinition object at 0x062687B0>) , Command count = 337 ] 
11:16:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268900>, <py_sfcl.PySEnhancedCmdData object at 0x06268E10>, <None>, <py_sfcl.Command23 object at 0x0627D630>) , Command count = 338 ] 
11:16:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:22: Host Frequency set to 25000 KHz
11:16:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x062689C0>, 0x0, True) , Command count = 339 ] 
11:16:22: [GO18_globalSetVolt]### Host voltage value is set.
11:16:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x062691E0>, 0x0, False) , Command count = 340 ] 
11:16:22: [GO18_globalSetVolt]### Host voltage value is set.
11:16:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 341 ] 
11:16:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 342 ] 
11:16:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 343 ] 
11:16:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062693C0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 344 ] 
11:16:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268960>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 345 ] 
11:16:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:22: [ SetCardRCA(0x1, 0xD555) , Command count = 346 ] 
11:16:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:22: Host Frequency set to 25000 KHz
11:16:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:22: ####CSD Registe 2.0 Values####
11:16:22: CSD_STRUCTURE                                 :0x1
11:16:22: Reserv1                                       :0x0
11:16:22: Time Access 1 TAAC                            :0xe
11:16:22: Time Access 2 NSAC*100                        :0x0
11:16:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:22: Card Command Classess CCC                     :0x5b5
11:16:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:22: DSR(driver stage register)  DSR_IMP           :0x0
11:16:22: Reserv2                                       :0x0
11:16:22: Device Size C_SIZE                            :0xedc8
11:16:22: Reserv3                                       :0x0
11:16:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:22: Reserv4                                       :0x0
11:16:22: Write Speed Factor R2W_FACTOR                 :0x2
11:16:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:22: FILE_FORMAT_GRP                               :0x0
11:16:22: COPY flag                                     :0x1
11:16:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:22: File_Format                                   :0x0
11:16:22: CRC                                           :0x0
11:16:22: ####CSD Registe Values####  

11:16:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:22: [GetSCRRegisterEntry] Passed
11:16:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:22: Data_Status_After Erases          : 0
11:16:22: CPRM Security Support             : No Security
11:16:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:22: Spec. Version                     : Version 3.0X
11:16:22: Extended Security Support         : Extended_Security_Not_Supported
11:16:22: Command Support                   : COMMAND_SUPPORT
11:16:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691B0>, <py_sfcl.CommandDataDefinition object at 0x06269210>) , Command count = 347 ] 
11:16:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x06269540>) , Command count = 348 ] 
11:16:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:22: [ SetBusWidth(0x4) , Command count = 349 ] 
11:16:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 350 ] 
11:16:22: Protected Area Size 0x28000
11:16:22: Bus Width           2
11:16:22: Secure Mode         0
11:16:22: Speed  Class        4
11:16:22: Perf Move           0
11:16:22: Au Size             9
11:16:22: Erase Size          15
11:16:22: Erase Timeout       1
11:16:22: Erase offset        1
11:16:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 351 ] 
11:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:23: Host Frequency set to 100000 KHz
11:16:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:23: ####CSD Registe 2.0 Values####
11:16:23: CSD_STRUCTURE                                 :0x1
11:16:23: Reserv1                                       :0x0
11:16:23: Time Access 1 TAAC                            :0xe
11:16:23: Time Access 2 NSAC*100                        :0x0
11:16:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:23: Card Command Classess CCC                     :0x5b5
11:16:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:23: DSR(driver stage register)  DSR_IMP           :0x0
11:16:23: Reserv2                                       :0x0
11:16:23: Device Size C_SIZE                            :0xedc8
11:16:23: Reserv3                                       :0x0
11:16:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:23: Reserv4                                       :0x0
11:16:23: Write Speed Factor R2W_FACTOR                 :0x2
11:16:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:23: FILE_FORMAT_GRP                               :0x0
11:16:23: COPY flag                                     :0x1
11:16:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:23: File_Format                                   :0x0
11:16:23: CRC                                           :0x0
11:16:23: ####CSD Registe Values####  

11:16:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690F0>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 352 ] 
11:16:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269870>, <py_sfcl.CommandDataDefinition object at 0x0627D7B0>) , Command count = 353 ] 
11:16:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062695A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062695D0>, <py_sfcl.PySEnhancedCmdData object at 0x06269B70>, <None>, <py_sfcl.Command23 object at 0x06268660>) , Command count = 354 ] 
11:16:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:25: Host Frequency set to 25000 KHz
11:16:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269A80>, 0x0, True) , Command count = 355 ] 
11:16:25: [GO18_globalSetVolt]### Host voltage value is set.
11:16:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269DE0>, 0x0, False) , Command count = 356 ] 
11:16:25: [GO18_globalSetVolt]### Host voltage value is set.
11:16:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 357 ] 
11:16:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 358 ] 
11:16:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 359 ] 
11:16:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062693F0>, <py_sfcl.CommandDataDefinition object at 0x06269DB0>) , Command count = 360 ] 
11:16:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A20>, <py_sfcl.CommandDataDefinition object at 0x06269A50>) , Command count = 361 ] 
11:16:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:26: [ SetCardRCA(0x1, 0xD555) , Command count = 362 ] 
11:16:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:26: Host Frequency set to 25000 KHz
11:16:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:26: ####CSD Registe 2.0 Values####
11:16:26: CSD_STRUCTURE                                 :0x1
11:16:26: Reserv1                                       :0x0
11:16:26: Time Access 1 TAAC                            :0xe
11:16:26: Time Access 2 NSAC*100                        :0x0
11:16:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:26: Card Command Classess CCC                     :0x5b5
11:16:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:26: DSR(driver stage register)  DSR_IMP           :0x0
11:16:26: Reserv2                                       :0x0
11:16:26: Device Size C_SIZE                            :0xedc8
11:16:26: Reserv3                                       :0x0
11:16:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:26: Reserv4                                       :0x0
11:16:26: Write Speed Factor R2W_FACTOR                 :0x2
11:16:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:26: FILE_FORMAT_GRP                               :0x0
11:16:26: COPY flag                                     :0x1
11:16:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:26: File_Format                                   :0x0
11:16:26: CRC                                           :0x0
11:16:26: ####CSD Registe Values####  

11:16:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:26: [GetSCRRegisterEntry] Passed
11:16:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:26: Data_Status_After Erases          : 0
11:16:26: CPRM Security Support             : No Security
11:16:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:26: Spec. Version                     : Version 3.0X
11:16:26: Extended Security Support         : Extended_Security_Not_Supported
11:16:26: Command Support                   : COMMAND_SUPPORT
11:16:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E10>, <py_sfcl.CommandDataDefinition object at 0x06269EA0>) , Command count = 363 ] 
11:16:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F60>, <py_sfcl.CommandDataDefinition object at 0x06269D80>) , Command count = 364 ] 
11:16:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:26: [ SetBusWidth(0x4) , Command count = 365 ] 
11:16:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 366 ] 
11:16:26: Protected Area Size 0x28000
11:16:26: Bus Width           2
11:16:26: Secure Mode         0
11:16:26: Speed  Class        4
11:16:26: Perf Move           0
11:16:26: Au Size             9
11:16:26: Erase Size          15
11:16:26: Erase Timeout       1
11:16:26: Erase offset        1
11:16:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 367 ] 
11:16:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:26: Host Frequency set to 100000 KHz
11:16:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:26: ####CSD Registe 2.0 Values####
11:16:26: CSD_STRUCTURE                                 :0x1
11:16:26: Reserv1                                       :0x0
11:16:26: Time Access 1 TAAC                            :0xe
11:16:26: Time Access 2 NSAC*100                        :0x0
11:16:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:26: Card Command Classess CCC                     :0x5b5
11:16:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:26: DSR(driver stage register)  DSR_IMP           :0x0
11:16:26: Reserv2                                       :0x0
11:16:26: Device Size C_SIZE                            :0xedc8
11:16:26: Reserv3                                       :0x0
11:16:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:26: Reserv4                                       :0x0
11:16:26: Write Speed Factor R2W_FACTOR                 :0x2
11:16:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:26: FILE_FORMAT_GRP                               :0x0
11:16:26: COPY flag                                     :0x1
11:16:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:26: File_Format                                   :0x0
11:16:26: CRC                                           :0x0
11:16:26: ####CSD Registe Values####  

11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269FC0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 368 ] 
11:16:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698A0>, <py_sfcl.CommandDataDefinition object at 0x06269CC0>) , Command count = 369 ] 
11:16:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269BD0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D750>, <None>, <py_sfcl.Command23 object at 0x0627D570>) , Command count = 370 ] 
11:16:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:29: Host Frequency set to 25000 KHz
11:16:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269D50>, 0x0, True) , Command count = 371 ] 
11:16:29: [GO18_globalSetVolt]### Host voltage value is set.
11:16:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D0C0>, 0x0, False) , Command count = 372 ] 
11:16:29: [GO18_globalSetVolt]### Host voltage value is set.
11:16:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 373 ] 
11:16:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 374 ] 
11:16:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 375 ] 
11:16:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 376 ] 
11:16:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269960>, <py_sfcl.CommandDataDefinition object at 0x0626D360>) , Command count = 377 ] 
11:16:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:29: [ SetCardRCA(0x1, 0xD555) , Command count = 378 ] 
11:16:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:29: Host Frequency set to 25000 KHz
11:16:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:29: ####CSD Registe 2.0 Values####
11:16:29: CSD_STRUCTURE                                 :0x1
11:16:29: Reserv1                                       :0x0
11:16:29: Time Access 1 TAAC                            :0xe
11:16:29: Time Access 2 NSAC*100                        :0x0
11:16:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:29: Card Command Classess CCC                     :0x5b5
11:16:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:29: DSR(driver stage register)  DSR_IMP           :0x0
11:16:29: Reserv2                                       :0x0
11:16:29: Device Size C_SIZE                            :0xedc8
11:16:29: Reserv3                                       :0x0
11:16:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:29: Reserv4                                       :0x0
11:16:29: Write Speed Factor R2W_FACTOR                 :0x2
11:16:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:29: FILE_FORMAT_GRP                               :0x0
11:16:29: COPY flag                                     :0x1
11:16:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:29: File_Format                                   :0x0
11:16:29: CRC                                           :0x0
11:16:29: ####CSD Registe Values####  

11:16:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:29: [GetSCRRegisterEntry] Passed
11:16:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:29: Data_Status_After Erases          : 0
11:16:29: CPRM Security Support             : No Security
11:16:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:29: Spec. Version                     : Version 3.0X
11:16:29: Extended Security Support         : Extended_Security_Not_Supported
11:16:29: Command Support                   : COMMAND_SUPPORT
11:16:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D090>, <py_sfcl.CommandDataDefinition object at 0x0626D0F0>) , Command count = 379 ] 
11:16:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5D0>, <py_sfcl.CommandDataDefinition object at 0x0626D3F0>) , Command count = 380 ] 
11:16:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:29: [ SetBusWidth(0x4) , Command count = 381 ] 
11:16:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 382 ] 
11:16:29: Protected Area Size 0x28000
11:16:29: Bus Width           2
11:16:29: Secure Mode         0
11:16:29: Speed  Class        4
11:16:29: Perf Move           0
11:16:29: Au Size             9
11:16:29: Erase Size          15
11:16:29: Erase Timeout       1
11:16:29: Erase offset        1
11:16:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 383 ] 
11:16:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:30: Host Frequency set to 100000 KHz
11:16:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:30: ####CSD Registe 2.0 Values####
11:16:30: CSD_STRUCTURE                                 :0x1
11:16:30: Reserv1                                       :0x0
11:16:30: Time Access 1 TAAC                            :0xe
11:16:30: Time Access 2 NSAC*100                        :0x0
11:16:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:30: Card Command Classess CCC                     :0x5b5
11:16:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:30: DSR(driver stage register)  DSR_IMP           :0x0
11:16:30: Reserv2                                       :0x0
11:16:30: Device Size C_SIZE                            :0xedc8
11:16:30: Reserv3                                       :0x0
11:16:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:30: Reserv4                                       :0x0
11:16:30: Write Speed Factor R2W_FACTOR                 :0x2
11:16:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:30: FILE_FORMAT_GRP                               :0x0
11:16:30: COPY flag                                     :0x1
11:16:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:30: File_Format                                   :0x0
11:16:30: CRC                                           :0x0
11:16:30: ####CSD Registe Values####  

11:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 384 ] 
11:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D120>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 385 ] 
11:16:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D8A0>, <None>, <py_sfcl.Command23 object at 0x0627D7B0>) , Command count = 386 ] 
11:16:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:32: Host Frequency set to 25000 KHz
11:16:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D450>, 0x0, True) , Command count = 387 ] 
11:16:32: [GO18_globalSetVolt]### Host voltage value is set.
11:16:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D780>, 0x0, False) , Command count = 388 ] 
11:16:32: [GO18_globalSetVolt]### Host voltage value is set.
11:16:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 389 ] 
11:16:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 390 ] 
11:16:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 391 ] 
11:16:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D990>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 392 ] 
11:16:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D300>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 393 ] 
11:16:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:33: [ SetCardRCA(0x1, 0xD555) , Command count = 394 ] 
11:16:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:33: Host Frequency set to 25000 KHz
11:16:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:33: ####CSD Registe 2.0 Values####
11:16:33: CSD_STRUCTURE                                 :0x1
11:16:33: Reserv1                                       :0x0
11:16:33: Time Access 1 TAAC                            :0xe
11:16:33: Time Access 2 NSAC*100                        :0x0
11:16:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:33: Card Command Classess CCC                     :0x5b5
11:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:33: DSR(driver stage register)  DSR_IMP           :0x0
11:16:33: Reserv2                                       :0x0
11:16:33: Device Size C_SIZE                            :0xedc8
11:16:33: Reserv3                                       :0x0
11:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:33: Reserv4                                       :0x0
11:16:33: Write Speed Factor R2W_FACTOR                 :0x2
11:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:33: FILE_FORMAT_GRP                               :0x0
11:16:33: COPY flag                                     :0x1
11:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:33: File_Format                                   :0x0
11:16:33: CRC                                           :0x0
11:16:33: ####CSD Registe Values####  

11:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:33: [GetSCRRegisterEntry] Passed
11:16:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:33: Data_Status_After Erases          : 0
11:16:33: CPRM Security Support             : No Security
11:16:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:33: Spec. Version                     : Version 3.0X
11:16:33: Extended Security Support         : Extended_Security_Not_Supported
11:16:33: Command Support                   : COMMAND_SUPPORT
11:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D750>, <py_sfcl.CommandDataDefinition object at 0x0626D7B0>) , Command count = 395 ] 
11:16:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 396 ] 
11:16:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:33: [ SetBusWidth(0x4) , Command count = 397 ] 
11:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 398 ] 
11:16:33: Protected Area Size 0x28000
11:16:33: Bus Width           2
11:16:33: Secure Mode         0
11:16:33: Speed  Class        4
11:16:33: Perf Move           0
11:16:33: Au Size             9
11:16:33: Erase Size          15
11:16:33: Erase Timeout       1
11:16:33: Erase offset        1
11:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 399 ] 
11:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:33: Host Frequency set to 100000 KHz
11:16:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:33: ####CSD Registe 2.0 Values####
11:16:33: CSD_STRUCTURE                                 :0x1
11:16:33: Reserv1                                       :0x0
11:16:33: Time Access 1 TAAC                            :0xe
11:16:33: Time Access 2 NSAC*100                        :0x0
11:16:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:33: Card Command Classess CCC                     :0x5b5
11:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:33: DSR(driver stage register)  DSR_IMP           :0x0
11:16:33: Reserv2                                       :0x0
11:16:33: Device Size C_SIZE                            :0xedc8
11:16:33: Reserv3                                       :0x0
11:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:33: Reserv4                                       :0x0
11:16:33: Write Speed Factor R2W_FACTOR                 :0x2
11:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:33: FILE_FORMAT_GRP                               :0x0
11:16:33: COPY flag                                     :0x1
11:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:33: File_Format                                   :0x0
11:16:33: CRC                                           :0x0
11:16:33: ####CSD Registe Values####  

11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD80>, <py_sfcl.CommandDataDefinition object at 0x0626DEA0>) , Command count = 400 ] 
11:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D690>, <py_sfcl.CommandDataDefinition object at 0x0626D510>) , Command count = 401 ] 
11:16:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DC60>, <py_sfcl.PySEnhancedCmdData object at 0x0627D8D0>, <None>, <py_sfcl.Command23 object at 0x0627D990>) , Command count = 402 ] 
11:16:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:36: Host Frequency set to 25000 KHz
11:16:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DB10>, 0x0, True) , Command count = 403 ] 
11:16:36: [GO18_globalSetVolt]### Host voltage value is set.
11:16:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DE40>, 0x0, False) , Command count = 404 ] 
11:16:36: [GO18_globalSetVolt]### Host voltage value is set.
11:16:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 405 ] 
11:16:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 406 ] 
11:16:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 407 ] 
11:16:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273090>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 408 ] 
11:16:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273120>, <py_sfcl.CommandDataDefinition object at 0x0626D9C0>) , Command count = 409 ] 
11:16:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:36: [ SetCardRCA(0x1, 0xD555) , Command count = 410 ] 
11:16:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:36: Host Frequency set to 25000 KHz
11:16:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:36: ####CSD Registe 2.0 Values####
11:16:36: CSD_STRUCTURE                                 :0x1
11:16:36: Reserv1                                       :0x0
11:16:36: Time Access 1 TAAC                            :0xe
11:16:36: Time Access 2 NSAC*100                        :0x0
11:16:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:36: Card Command Classess CCC                     :0x5b5
11:16:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:36: DSR(driver stage register)  DSR_IMP           :0x0
11:16:36: Reserv2                                       :0x0
11:16:36: Device Size C_SIZE                            :0xedc8
11:16:36: Reserv3                                       :0x0
11:16:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:36: Reserv4                                       :0x0
11:16:36: Write Speed Factor R2W_FACTOR                 :0x2
11:16:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:36: FILE_FORMAT_GRP                               :0x0
11:16:36: COPY flag                                     :0x1
11:16:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:36: File_Format                                   :0x0
11:16:36: CRC                                           :0x0
11:16:36: ####CSD Registe Values####  

11:16:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:36: [GetSCRRegisterEntry] Passed
11:16:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:36: Data_Status_After Erases          : 0
11:16:36: CPRM Security Support             : No Security
11:16:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:36: Spec. Version                     : Version 3.0X
11:16:36: Extended Security Support         : Extended_Security_Not_Supported
11:16:36: Command Support                   : COMMAND_SUPPORT
11:16:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE10>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 411 ] 
11:16:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 412 ] 
11:16:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:36: [ SetBusWidth(0x4) , Command count = 413 ] 
11:16:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 414 ] 
11:16:36: Protected Area Size 0x28000
11:16:36: Bus Width           2
11:16:36: Secure Mode         0
11:16:36: Speed  Class        4
11:16:36: Perf Move           0
11:16:36: Au Size             9
11:16:36: Erase Size          15
11:16:36: Erase Timeout       1
11:16:36: Erase offset        1
11:16:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 415 ] 
11:16:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:36: Host Frequency set to 100000 KHz
11:16:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:36: ####CSD Registe 2.0 Values####
11:16:36: CSD_STRUCTURE                                 :0x1
11:16:37: Reserv1                                       :0x0
11:16:37: Time Access 1 TAAC                            :0xe
11:16:37: Time Access 2 NSAC*100                        :0x0
11:16:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:37: Card Command Classess CCC                     :0x5b5
11:16:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:37: DSR(driver stage register)  DSR_IMP           :0x0
11:16:37: Reserv2                                       :0x0
11:16:37: Device Size C_SIZE                            :0xedc8
11:16:37: Reserv3                                       :0x0
11:16:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:37: Reserv4                                       :0x0
11:16:37: Write Speed Factor R2W_FACTOR                 :0x2
11:16:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:37: FILE_FORMAT_GRP                               :0x0
11:16:37: COPY flag                                     :0x1
11:16:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:37: File_Format                                   :0x0
11:16:37: CRC                                           :0x0
11:16:37: ####CSD Registe Values####  

11:16:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D570>, <py_sfcl.CommandDataDefinition object at 0x06273480>) , Command count = 416 ] 
11:16:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD50>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 417 ] 
11:16:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062734B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273360>, <py_sfcl.PySEnhancedCmdData object at 0x0627D900>, <None>, <py_sfcl.Command23 object at 0x0627DA20>) , Command count = 418 ] 
11:16:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:37: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:39: Host Frequency set to 25000 KHz
11:16:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:39: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273210>, 0x0, True) , Command count = 419 ] 
11:16:39: [GO18_globalSetVolt]### Host voltage value is set.
11:16:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273540>, 0x0, False) , Command count = 420 ] 
11:16:39: [GO18_globalSetVolt]### Host voltage value is set.
11:16:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 421 ] 
11:16:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 422 ] 
11:16:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 423 ] 
11:16:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 424 ] 
11:16:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062730C0>, <py_sfcl.CommandDataDefinition object at 0x062737E0>) , Command count = 425 ] 
11:16:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:40: [ SetCardRCA(0x1, 0xD555) , Command count = 426 ] 
11:16:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:40: Host Frequency set to 25000 KHz
11:16:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:40: ####CSD Registe 2.0 Values####
11:16:40: CSD_STRUCTURE                                 :0x1
11:16:40: Reserv1                                       :0x0
11:16:40: Time Access 1 TAAC                            :0xe
11:16:40: Time Access 2 NSAC*100                        :0x0
11:16:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:40: Card Command Classess CCC                     :0x5b5
11:16:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:40: DSR(driver stage register)  DSR_IMP           :0x0
11:16:40: Reserv2                                       :0x0
11:16:40: Device Size C_SIZE                            :0xedc8
11:16:40: Reserv3                                       :0x0
11:16:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:40: Reserv4                                       :0x0
11:16:40: Write Speed Factor R2W_FACTOR                 :0x2
11:16:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:40: FILE_FORMAT_GRP                               :0x0
11:16:40: COPY flag                                     :0x1
11:16:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:40: File_Format                                   :0x0
11:16:40: CRC                                           :0x0
11:16:40: ####CSD Registe Values####  

11:16:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:40: [GetSCRRegisterEntry] Passed
11:16:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:40: Data_Status_After Erases          : 0
11:16:40: CPRM Security Support             : No Security
11:16:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:40: Spec. Version                     : Version 3.0X
11:16:40: Extended Security Support         : Extended_Security_Not_Supported
11:16:40: Command Support                   : COMMAND_SUPPORT
11:16:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x06273570>) , Command count = 427 ] 
11:16:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 428 ] 
11:16:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:40: [ SetBusWidth(0x4) , Command count = 429 ] 
11:16:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 430 ] 
11:16:40: Protected Area Size 0x28000
11:16:40: Bus Width           2
11:16:40: Secure Mode         0
11:16:40: Speed  Class        4
11:16:40: Perf Move           0
11:16:40: Au Size             9
11:16:40: Erase Size          15
11:16:40: Erase Timeout       1
11:16:40: Erase offset        1
11:16:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 431 ] 
11:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:40: Host Frequency set to 100000 KHz
11:16:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:40: ####CSD Registe 2.0 Values####
11:16:40: CSD_STRUCTURE                                 :0x1
11:16:40: Reserv1                                       :0x0
11:16:40: Time Access 1 TAAC                            :0xe
11:16:40: Time Access 2 NSAC*100                        :0x0
11:16:40: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:40: Card Command Classess CCC                     :0x5b5
11:16:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:40: DSR(driver stage register)  DSR_IMP           :0x0
11:16:40: Reserv2                                       :0x0
11:16:40: Device Size C_SIZE                            :0xedc8
11:16:40: Reserv3                                       :0x0
11:16:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:40: Reserv4                                       :0x0
11:16:40: Write Speed Factor R2W_FACTOR                 :0x2
11:16:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:40: FILE_FORMAT_GRP                               :0x0
11:16:40: COPY flag                                     :0x1
11:16:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:40: File_Format                                   :0x0
11:16:40: CRC                                           :0x0
11:16:40: ####CSD Registe Values####  

11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B40>, <py_sfcl.CommandDataDefinition object at 0x06273C60>) , Command count = 432 ] 
11:16:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x062732D0>) , Command count = 433 ] 
11:16:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273B70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273A20>, <py_sfcl.PySEnhancedCmdData object at 0x0627D960>, <None>, <py_sfcl.Command23 object at 0x0627DAB0>) , Command count = 434 ] 
11:16:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:43: Host Frequency set to 25000 KHz
11:16:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x062738D0>, 0x0, True) , Command count = 435 ] 
11:16:43: [GO18_globalSetVolt]### Host voltage value is set.
11:16:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C00>, 0x0, False) , Command count = 436 ] 
11:16:43: [GO18_globalSetVolt]### Host voltage value is set.
11:16:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 437 ] 
11:16:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 438 ] 
11:16:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 439 ] 
11:16:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E10>, <py_sfcl.CommandDataDefinition object at 0x06273D50>) , Command count = 440 ] 
11:16:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273780>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 441 ] 
11:16:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:43: [ SetCardRCA(0x1, 0xD555) , Command count = 442 ] 
11:16:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:43: Host Frequency set to 25000 KHz
11:16:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:43: ####CSD Registe 2.0 Values####
11:16:43: CSD_STRUCTURE                                 :0x1
11:16:43: Reserv1                                       :0x0
11:16:43: Time Access 1 TAAC                            :0xe
11:16:43: Time Access 2 NSAC*100                        :0x0
11:16:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:43: Card Command Classess CCC                     :0x5b5
11:16:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:43: DSR(driver stage register)  DSR_IMP           :0x0
11:16:43: Reserv2                                       :0x0
11:16:43: Device Size C_SIZE                            :0xedc8
11:16:43: Reserv3                                       :0x0
11:16:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:43: Reserv4                                       :0x0
11:16:43: Write Speed Factor R2W_FACTOR                 :0x2
11:16:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:43: FILE_FORMAT_GRP                               :0x0
11:16:43: COPY flag                                     :0x1
11:16:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:43: File_Format                                   :0x0
11:16:43: CRC                                           :0x0
11:16:43: ####CSD Registe Values####  

11:16:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:43: [GetSCRRegisterEntry] Passed
11:16:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:43: Data_Status_After Erases          : 0
11:16:43: CPRM Security Support             : No Security
11:16:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:43: Spec. Version                     : Version 3.0X
11:16:43: Extended Security Support         : Extended_Security_Not_Supported
11:16:43: Command Support                   : COMMAND_SUPPORT
11:16:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BD0>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 443 ] 
11:16:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F30>, <py_sfcl.CommandDataDefinition object at 0x06273F60>) , Command count = 444 ] 
11:16:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:43: [ SetBusWidth(0x4) , Command count = 445 ] 
11:16:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 446 ] 
11:16:43: Protected Area Size 0x28000
11:16:43: Bus Width           2
11:16:43: Secure Mode         0
11:16:43: Speed  Class        4
11:16:43: Perf Move           0
11:16:43: Au Size             9
11:16:43: Erase Size          15
11:16:43: Erase Timeout       1
11:16:43: Erase offset        1
11:16:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 447 ] 
11:16:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:43: Host Frequency set to 100000 KHz
11:16:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:43: ####CSD Registe 2.0 Values####
11:16:43: CSD_STRUCTURE                                 :0x1
11:16:44: Reserv1                                       :0x0
11:16:44: Time Access 1 TAAC                            :0xe
11:16:44: Time Access 2 NSAC*100                        :0x0
11:16:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:44: Card Command Classess CCC                     :0x5b5
11:16:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:44: DSR(driver stage register)  DSR_IMP           :0x0
11:16:44: Reserv2                                       :0x0
11:16:44: Device Size C_SIZE                            :0xedc8
11:16:44: Reserv3                                       :0x0
11:16:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:44: Reserv4                                       :0x0
11:16:44: Write Speed Factor R2W_FACTOR                 :0x2
11:16:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:44: FILE_FORMAT_GRP                               :0x0
11:16:44: COPY flag                                     :0x1
11:16:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:44: File_Format                                   :0x0
11:16:44: CRC                                           :0x0
11:16:44: ####CSD Registe Values####  

11:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273330>, <py_sfcl.CommandDataDefinition object at 0x06276240>) , Command count = 448 ] 
11:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B10>, <py_sfcl.CommandDataDefinition object at 0x062761E0>) , Command count = 449 ] 
11:16:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276120>, <py_sfcl.PySEnhancedCmdData object at 0x0627D9F0>, <None>, <py_sfcl.Command23 object at 0x0627DB40>) , Command count = 450 ] 
11:16:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:46: Host Frequency set to 25000 KHz
11:16:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:46: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273FC0>, 0x0, True) , Command count = 451 ] 
11:16:46: [GO18_globalSetVolt]### Host voltage value is set.
11:16:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276300>, 0x0, False) , Command count = 452 ] 
11:16:46: [GO18_globalSetVolt]### Host voltage value is set.
11:16:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 453 ] 
11:16:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 454 ] 
11:16:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 455 ] 
11:16:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276510>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 456 ] 
11:16:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x062765A0>) , Command count = 457 ] 
11:16:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:47: [ SetCardRCA(0x1, 0xD555) , Command count = 458 ] 
11:16:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:47: Host Frequency set to 25000 KHz
11:16:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:47: ####CSD Registe 2.0 Values####
11:16:47: CSD_STRUCTURE                                 :0x1
11:16:47: Reserv1                                       :0x0
11:16:47: Time Access 1 TAAC                            :0xe
11:16:47: Time Access 2 NSAC*100                        :0x0
11:16:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:47: Card Command Classess CCC                     :0x5b5
11:16:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:47: DSR(driver stage register)  DSR_IMP           :0x0
11:16:47: Reserv2                                       :0x0
11:16:47: Device Size C_SIZE                            :0xedc8
11:16:47: Reserv3                                       :0x0
11:16:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:47: Reserv4                                       :0x0
11:16:47: Write Speed Factor R2W_FACTOR                 :0x2
11:16:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:47: FILE_FORMAT_GRP                               :0x0
11:16:47: COPY flag                                     :0x1
11:16:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:47: File_Format                                   :0x0
11:16:47: CRC                                           :0x0
11:16:47: ####CSD Registe Values####  

11:16:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:47: [GetSCRRegisterEntry] Passed
11:16:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:47: Data_Status_After Erases          : 0
11:16:47: CPRM Security Support             : No Security
11:16:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:47: Spec. Version                     : Version 3.0X
11:16:47: Extended Security Support         : Extended_Security_Not_Supported
11:16:47: Command Support                   : COMMAND_SUPPORT
11:16:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062762D0>, <py_sfcl.CommandDataDefinition object at 0x06276330>) , Command count = 459 ] 
11:16:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 460 ] 
11:16:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:47: [ SetBusWidth(0x4) , Command count = 461 ] 
11:16:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 462 ] 
11:16:47: Protected Area Size 0x28000
11:16:47: Bus Width           2
11:16:47: Secure Mode         0
11:16:47: Speed  Class        4
11:16:47: Perf Move           0
11:16:47: Au Size             9
11:16:47: Erase Size          15
11:16:47: Erase Timeout       1
11:16:47: Erase offset        1
11:16:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 463 ] 
11:16:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:47: Host Frequency set to 100000 KHz
11:16:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:47: ####CSD Registe 2.0 Values####
11:16:47: CSD_STRUCTURE                                 :0x1
11:16:47: Reserv1                                       :0x0
11:16:47: Time Access 1 TAAC                            :0xe
11:16:47: Time Access 2 NSAC*100                        :0x0
11:16:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:47: Card Command Classess CCC                     :0x5b5
11:16:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:47: DSR(driver stage register)  DSR_IMP           :0x0
11:16:47: Reserv2                                       :0x0
11:16:47: Device Size C_SIZE                            :0xedc8
11:16:47: Reserv3                                       :0x0
11:16:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:47: Reserv4                                       :0x0
11:16:47: Write Speed Factor R2W_FACTOR                 :0x2
11:16:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:47: FILE_FORMAT_GRP                               :0x0
11:16:47: COPY flag                                     :0x1
11:16:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:47: File_Format                                   :0x0
11:16:47: CRC                                           :0x0
11:16:47: ####CSD Registe Values####  

11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276900>, <py_sfcl.CommandDataDefinition object at 0x06276A20>) , Command count = 464 ] 
11:16:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276210>, <py_sfcl.CommandDataDefinition object at 0x06276090>) , Command count = 465 ] 
11:16:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DA80>, <None>, <py_sfcl.Command23 object at 0x0627DBD0>) , Command count = 466 ] 
11:16:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:48: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:50: Host Frequency set to 25000 KHz
11:16:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:50: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276690>, 0x0, True) , Command count = 467 ] 
11:16:50: [GO18_globalSetVolt]### Host voltage value is set.
11:16:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x062769C0>, 0x0, False) , Command count = 468 ] 
11:16:50: [GO18_globalSetVolt]### Host voltage value is set.
11:16:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 469 ] 
11:16:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 470 ] 
11:16:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 471 ] 
11:16:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BD0>, <py_sfcl.CommandDataDefinition object at 0x06276B10>) , Command count = 472 ] 
11:16:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276540>, <py_sfcl.CommandDataDefinition object at 0x06276C60>) , Command count = 473 ] 
11:16:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:50: [ SetCardRCA(0x1, 0xD555) , Command count = 474 ] 
11:16:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:50: Host Frequency set to 25000 KHz
11:16:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:50: ####CSD Registe 2.0 Values####
11:16:50: CSD_STRUCTURE                                 :0x1
11:16:50: Reserv1                                       :0x0
11:16:50: Time Access 1 TAAC                            :0xe
11:16:50: Time Access 2 NSAC*100                        :0x0
11:16:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:50: Card Command Classess CCC                     :0x5b5
11:16:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:50: DSR(driver stage register)  DSR_IMP           :0x0
11:16:50: Reserv2                                       :0x0
11:16:50: Device Size C_SIZE                            :0xedc8
11:16:50: Reserv3                                       :0x0
11:16:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:50: Reserv4                                       :0x0
11:16:50: Write Speed Factor R2W_FACTOR                 :0x2
11:16:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:50: FILE_FORMAT_GRP                               :0x0
11:16:50: COPY flag                                     :0x1
11:16:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:50: File_Format                                   :0x0
11:16:50: CRC                                           :0x0
11:16:50: ####CSD Registe Values####  

11:16:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:50: [GetSCRRegisterEntry] Passed
11:16:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:50: Data_Status_After Erases          : 0
11:16:50: CPRM Security Support             : No Security
11:16:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:50: Spec. Version                     : Version 3.0X
11:16:50: Extended Security Support         : Extended_Security_Not_Supported
11:16:50: Command Support                   : COMMAND_SUPPORT
11:16:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276990>, <py_sfcl.CommandDataDefinition object at 0x062769F0>) , Command count = 475 ] 
11:16:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276ED0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 476 ] 
11:16:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:50: [ SetBusWidth(0x4) , Command count = 477 ] 
11:16:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 478 ] 
11:16:50: Protected Area Size 0x28000
11:16:50: Bus Width           2
11:16:50: Secure Mode         0
11:16:50: Speed  Class        4
11:16:50: Perf Move           0
11:16:50: Au Size             9
11:16:50: Erase Size          15
11:16:50: Erase Timeout       1
11:16:50: Erase offset        1
11:16:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 479 ] 
11:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:50: Host Frequency set to 100000 KHz
11:16:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:50: ####CSD Registe 2.0 Values####
11:16:50: CSD_STRUCTURE                                 :0x1
11:16:50: Reserv1                                       :0x0
11:16:50: Time Access 1 TAAC                            :0xe
11:16:50: Time Access 2 NSAC*100                        :0x0
11:16:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:50: Card Command Classess CCC                     :0x5b5
11:16:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:50: DSR(driver stage register)  DSR_IMP           :0x0
11:16:50: Reserv2                                       :0x0
11:16:50: Device Size C_SIZE                            :0xedc8
11:16:50: Reserv3                                       :0x0
11:16:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:51: Reserv4                                       :0x0
11:16:51: Write Speed Factor R2W_FACTOR                 :0x2
11:16:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:51: FILE_FORMAT_GRP                               :0x0
11:16:51: COPY flag                                     :0x1
11:16:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:51: File_Format                                   :0x0
11:16:51: CRC                                           :0x0
11:16:51: ####CSD Registe Values####  

11:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276F00>) , Command count = 480 ] 
11:16:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062768D0>, <py_sfcl.CommandDataDefinition object at 0x06276780>) , Command count = 481 ] 
11:16:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276EA0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DB10>, <None>, <py_sfcl.Command23 object at 0x0627DC60>) , Command count = 482 ] 
11:16:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:53: Host Frequency set to 25000 KHz
11:16:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276D50>, 0x0, True) , Command count = 483 ] 
11:16:53: [GO18_globalSetVolt]### Host voltage value is set.
11:16:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A0C0>, 0x0, False) , Command count = 484 ] 
11:16:53: [GO18_globalSetVolt]### Host voltage value is set.
11:16:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 485 ] 
11:16:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 486 ] 
11:16:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 487 ] 
11:16:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A2D0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 488 ] 
11:16:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x0627A360>) , Command count = 489 ] 
11:16:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:53: [ SetCardRCA(0x1, 0xD555) , Command count = 490 ] 
11:16:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:54: Host Frequency set to 25000 KHz
11:16:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:54: ####CSD Registe 2.0 Values####
11:16:54: CSD_STRUCTURE                                 :0x1
11:16:54: Reserv1                                       :0x0
11:16:54: Time Access 1 TAAC                            :0xe
11:16:54: Time Access 2 NSAC*100                        :0x0
11:16:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:54: Card Command Classess CCC                     :0x5b5
11:16:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:54: DSR(driver stage register)  DSR_IMP           :0x0
11:16:54: Reserv2                                       :0x0
11:16:54: Device Size C_SIZE                            :0xedc8
11:16:54: Reserv3                                       :0x0
11:16:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:54: Reserv4                                       :0x0
11:16:54: Write Speed Factor R2W_FACTOR                 :0x2
11:16:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:54: FILE_FORMAT_GRP                               :0x0
11:16:54: COPY flag                                     :0x1
11:16:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:54: File_Format                                   :0x0
11:16:54: CRC                                           :0x0
11:16:54: ####CSD Registe Values####  

11:16:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:54: [GetSCRRegisterEntry] Passed
11:16:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:54: Data_Status_After Erases          : 0
11:16:54: CPRM Security Support             : No Security
11:16:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:54: Spec. Version                     : Version 3.0X
11:16:54: Extended Security Support         : Extended_Security_Not_Supported
11:16:54: Command Support                   : COMMAND_SUPPORT
11:16:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A090>, <py_sfcl.CommandDataDefinition object at 0x0627A0F0>) , Command count = 491 ] 
11:16:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5D0>, <py_sfcl.CommandDataDefinition object at 0x0627A3F0>) , Command count = 492 ] 
11:16:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:54: [ SetBusWidth(0x4) , Command count = 493 ] 
11:16:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 494 ] 
11:16:54: Protected Area Size 0x28000
11:16:54: Bus Width           2
11:16:54: Secure Mode         0
11:16:54: Speed  Class        4
11:16:54: Perf Move           0
11:16:54: Au Size             9
11:16:54: Erase Size          15
11:16:54: Erase Timeout       1
11:16:54: Erase offset        1
11:16:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 495 ] 
11:16:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:54: Host Frequency set to 100000 KHz
11:16:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:54: ####CSD Registe 2.0 Values####
11:16:54: CSD_STRUCTURE                                 :0x1
11:16:54: Reserv1                                       :0x0
11:16:54: Time Access 1 TAAC                            :0xe
11:16:54: Time Access 2 NSAC*100                        :0x0
11:16:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:54: Card Command Classess CCC                     :0x5b5
11:16:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:54: DSR(driver stage register)  DSR_IMP           :0x0
11:16:54: Reserv2                                       :0x0
11:16:54: Device Size C_SIZE                            :0xedc8
11:16:54: Reserv3                                       :0x0
11:16:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:54: Reserv4                                       :0x0
11:16:54: Write Speed Factor R2W_FACTOR                 :0x2
11:16:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:54: FILE_FORMAT_GRP                               :0x0
11:16:54: COPY flag                                     :0x1
11:16:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:54: File_Format                                   :0x0
11:16:54: CRC                                           :0x0
11:16:54: ####CSD Registe Values####  

11:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767B0>, <py_sfcl.CommandDataDefinition object at 0x0627A6C0>) , Command count = 496 ] 
11:16:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A120>, <py_sfcl.CommandDataDefinition object at 0x0627A660>) , Command count = 497 ] 
11:16:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DBA0>, <None>, <py_sfcl.Command23 object at 0x0627DCF0>) , Command count = 498 ] 
11:16:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:16:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:57: Host Frequency set to 25000 KHz
11:16:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:16:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:16:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A450>, 0x0, True) , Command count = 499 ] 
11:16:57: [GO18_globalSetVolt]### Host voltage value is set.
11:16:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:16:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A780>, 0x0, False) , Command count = 500 ] 
11:16:57: [GO18_globalSetVolt]### Host voltage value is set.
11:16:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 501 ] 
11:16:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:16:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 502 ] 
11:16:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:16:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:16:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:16:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:16:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:16:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 503 ] 
11:16:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:16:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627A8D0>) , Command count = 504 ] 
11:16:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A300>, <py_sfcl.CommandDataDefinition object at 0x0627A9C0>) , Command count = 505 ] 
11:16:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:16:57: [ SetCardRCA(0x1, 0xD555) , Command count = 506 ] 
11:16:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:16:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:16:57: Host Frequency set to 25000 KHz
11:16:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:16:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:57: ####CSD Registe 2.0 Values####
11:16:57: CSD_STRUCTURE                                 :0x1
11:16:57: Reserv1                                       :0x0
11:16:57: Time Access 1 TAAC                            :0xe
11:16:57: Time Access 2 NSAC*100                        :0x0
11:16:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:16:57: Card Command Classess CCC                     :0x5b5
11:16:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:57: DSR(driver stage register)  DSR_IMP           :0x0
11:16:57: Reserv2                                       :0x0
11:16:57: Device Size C_SIZE                            :0xedc8
11:16:57: Reserv3                                       :0x0
11:16:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:57: Reserv4                                       :0x0
11:16:57: Write Speed Factor R2W_FACTOR                 :0x2
11:16:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:57: FILE_FORMAT_GRP                               :0x0
11:16:57: COPY flag                                     :0x1
11:16:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:57: File_Format                                   :0x0
11:16:57: CRC                                           :0x0
11:16:57: ####CSD Registe Values####  

11:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:16:57: [GetSCRRegisterEntry] Passed
11:16:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:16:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:16:57: Data_Status_After Erases          : 0
11:16:57: CPRM Security Support             : No Security
11:16:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:16:57: Spec. Version                     : Version 3.0X
11:16:57: Extended Security Support         : Extended_Security_Not_Supported
11:16:57: Command Support                   : COMMAND_SUPPORT
11:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A750>, <py_sfcl.CommandDataDefinition object at 0x0627A7B0>) , Command count = 507 ] 
11:16:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 508 ] 
11:16:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:16:57: [ SetBusWidth(0x4) , Command count = 509 ] 
11:16:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:16:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 510 ] 
11:16:57: Protected Area Size 0x28000
11:16:57: Bus Width           2
11:16:57: Secure Mode         0
11:16:57: Speed  Class        4
11:16:57: Perf Move           0
11:16:57: Au Size             9
11:16:57: Erase Size          15
11:16:57: Erase Timeout       1
11:16:57: Erase offset        1
11:16:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:16:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:16:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 511 ] 
11:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:16:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:16:57: Host Frequency set to 100000 KHz
11:16:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:16:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:16:57: ####CSD Registe 2.0 Values####
11:16:57: CSD_STRUCTURE                                 :0x1
11:16:57: Reserv1                                       :0x0
11:16:57: Time Access 1 TAAC                            :0xe
11:16:57: Time Access 2 NSAC*100                        :0x0
11:16:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:16:57: Card Command Classess CCC                     :0x5b5
11:16:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:16:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:16:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:16:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:16:57: DSR(driver stage register)  DSR_IMP           :0x0
11:16:57: Reserv2                                       :0x0
11:16:57: Device Size C_SIZE                            :0xedc8
11:16:57: Reserv3                                       :0x0
11:16:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:16:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:16:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:16:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:16:58: Reserv4                                       :0x0
11:16:58: Write Speed Factor R2W_FACTOR                 :0x2
11:16:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:16:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:16:58: FILE_FORMAT_GRP                               :0x0
11:16:58: COPY flag                                     :0x1
11:16:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:16:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:16:58: File_Format                                   :0x0
11:16:58: CRC                                           :0x0
11:16:58: ####CSD Registe Values####  

11:16:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 512 ] 
11:16:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:16:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A690>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 513 ] 
11:16:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:16:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:16:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:16:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:16:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x0627DC30>, <None>, <py_sfcl.Command23 object at 0x0627DD80>) , Command count = 514 ] 
11:16:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:16:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:00: Host Frequency set to 25000 KHz
11:17:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x053E2420>, 0x0, True) , Command count = 515 ] 
11:17:00: [GO18_globalSetVolt]### Host voltage value is set.
11:17:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFC30>, 0x0, False) , Command count = 516 ] 
11:17:00: [GO18_globalSetVolt]### Host voltage value is set.
11:17:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 517 ] 
11:17:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 518 ] 
11:17:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 519 ] 
11:17:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x0627ACC0>) , Command count = 520 ] 
11:17:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0627AD50>) , Command count = 521 ] 
11:17:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:00: [ SetCardRCA(0x1, 0xD555) , Command count = 522 ] 
11:17:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:01: Host Frequency set to 25000 KHz
11:17:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:01: ####CSD Registe 2.0 Values####
11:17:01: CSD_STRUCTURE                                 :0x1
11:17:01: Reserv1                                       :0x0
11:17:01: Time Access 1 TAAC                            :0xe
11:17:01: Time Access 2 NSAC*100                        :0x0
11:17:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:01: Card Command Classess CCC                     :0x5b5
11:17:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:01: DSR(driver stage register)  DSR_IMP           :0x0
11:17:01: Reserv2                                       :0x0
11:17:01: Device Size C_SIZE                            :0xedc8
11:17:01: Reserv3                                       :0x0
11:17:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:01: Reserv4                                       :0x0
11:17:01: Write Speed Factor R2W_FACTOR                 :0x2
11:17:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:01: FILE_FORMAT_GRP                               :0x0
11:17:01: COPY flag                                     :0x1
11:17:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:01: File_Format                                   :0x0
11:17:01: CRC                                           :0x0
11:17:01: ####CSD Registe Values####  

11:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:01: [GetSCRRegisterEntry] Passed
11:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:01: Data_Status_After Erases          : 0
11:17:01: CPRM Security Support             : No Security
11:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:01: Spec. Version                     : Version 3.0X
11:17:01: Extended Security Support         : Extended_Security_Not_Supported
11:17:01: Command Support                   : COMMAND_SUPPORT
11:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC60>, <py_sfcl.CommandDataDefinition object at 0x0627AC00>) , Command count = 523 ] 
11:17:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 524 ] 
11:17:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:01: [ SetBusWidth(0x4) , Command count = 525 ] 
11:17:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 526 ] 
11:17:01: Protected Area Size 0x28000
11:17:01: Bus Width           2
11:17:01: Secure Mode         0
11:17:01: Speed  Class        4
11:17:01: Perf Move           0
11:17:01: Au Size             9
11:17:01: Erase Size          15
11:17:01: Erase Timeout       1
11:17:01: Erase offset        1
11:17:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 527 ] 
11:17:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:01: Host Frequency set to 100000 KHz
11:17:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:01: ####CSD Registe 2.0 Values####
11:17:01: CSD_STRUCTURE                                 :0x1
11:17:01: Reserv1                                       :0x0
11:17:01: Time Access 1 TAAC                            :0xe
11:17:01: Time Access 2 NSAC*100                        :0x0
11:17:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:01: Card Command Classess CCC                     :0x5b5
11:17:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:01: DSR(driver stage register)  DSR_IMP           :0x0
11:17:01: Reserv2                                       :0x0
11:17:01: Device Size C_SIZE                            :0xedc8
11:17:01: Reserv3                                       :0x0
11:17:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:01: Reserv4                                       :0x0
11:17:01: Write Speed Factor R2W_FACTOR                 :0x2
11:17:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:01: FILE_FORMAT_GRP                               :0x0
11:17:01: COPY flag                                     :0x1
11:17:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:01: File_Format                                   :0x0
11:17:01: CRC                                           :0x0
11:17:01: ####CSD Registe Values####  

11:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 528 ] 
11:17:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x0627AAB0>) , Command count = 529 ] 
11:17:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AED0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DCC0>, <None>, <py_sfcl.Command23 object at 0x0627DE10>) , Command count = 530 ] 
11:17:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:01: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:03: Host Frequency set to 25000 KHz
11:17:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401A50>, 0x0, True) , Command count = 531 ] 
11:17:03: [GO18_globalSetVolt]### Host voltage value is set.
11:17:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401CC0>, 0x0, False) , Command count = 532 ] 
11:17:04: [GO18_globalSetVolt]### Host voltage value is set.
11:17:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 533 ] 
11:17:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 534 ] 
11:17:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 535 ] 
11:17:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F60>, <py_sfcl.CommandDataDefinition object at 0x0627AF90>) , Command count = 536 ] 
11:17:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 537 ] 
11:17:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:04: [ SetCardRCA(0x1, 0xD555) , Command count = 538 ] 
11:17:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:04: Host Frequency set to 25000 KHz
11:17:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:04: ####CSD Registe 2.0 Values####
11:17:04: CSD_STRUCTURE                                 :0x1
11:17:04: Reserv1                                       :0x0
11:17:04: Time Access 1 TAAC                            :0xe
11:17:04: Time Access 2 NSAC*100                        :0x0
11:17:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:04: Card Command Classess CCC                     :0x5b5
11:17:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:04: DSR(driver stage register)  DSR_IMP           :0x0
11:17:04: Reserv2                                       :0x0
11:17:04: Device Size C_SIZE                            :0xedc8
11:17:04: Reserv3                                       :0x0
11:17:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:04: Reserv4                                       :0x0
11:17:04: Write Speed Factor R2W_FACTOR                 :0x2
11:17:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:04: FILE_FORMAT_GRP                               :0x0
11:17:04: COPY flag                                     :0x1
11:17:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:04: File_Format                                   :0x0
11:17:04: CRC                                           :0x0
11:17:04: ####CSD Registe Values####  

11:17:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:04: [GetSCRRegisterEntry] Passed
11:17:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:04: Data_Status_After Erases          : 0
11:17:04: CPRM Security Support             : No Security
11:17:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:04: Spec. Version                     : Version 3.0X
11:17:04: Extended Security Support         : Extended_Security_Not_Supported
11:17:04: Command Support                   : COMMAND_SUPPORT
11:17:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x0627D090>) , Command count = 539 ] 
11:17:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 540 ] 
11:17:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:04: [ SetBusWidth(0x4) , Command count = 541 ] 
11:17:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 542 ] 
11:17:04: Protected Area Size 0x28000
11:17:04: Bus Width           2
11:17:04: Secure Mode         0
11:17:04: Speed  Class        4
11:17:04: Perf Move           0
11:17:04: Au Size             9
11:17:04: Erase Size          15
11:17:04: Erase Timeout       1
11:17:04: Erase offset        1
11:17:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 543 ] 
11:17:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:04: Host Frequency set to 100000 KHz
11:17:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:04: ####CSD Registe 2.0 Values####
11:17:04: CSD_STRUCTURE                                 :0x1
11:17:04: Reserv1                                       :0x0
11:17:04: Time Access 1 TAAC                            :0xe
11:17:04: Time Access 2 NSAC*100                        :0x0
11:17:04: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:04: Card Command Classess CCC                     :0x5b5
11:17:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:04: DSR(driver stage register)  DSR_IMP           :0x0
11:17:04: Reserv2                                       :0x0
11:17:04: Device Size C_SIZE                            :0xedc8
11:17:04: Reserv3                                       :0x0
11:17:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:05: Reserv4                                       :0x0
11:17:05: Write Speed Factor R2W_FACTOR                 :0x2
11:17:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:05: FILE_FORMAT_GRP                               :0x0
11:17:05: COPY flag                                     :0x1
11:17:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:05: File_Format                                   :0x0
11:17:05: CRC                                           :0x0
11:17:05: ####CSD Registe Values####  

11:17:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 544 ] 
11:17:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x0627DD50>) , Command count = 545 ] 
11:17:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D2D0>, <None>, <py_sfcl.Command23 object at 0x0627DEA0>) , Command count = 546 ] 
11:17:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:07: Host Frequency set to 25000 KHz
11:17:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401FC0>, 0x0, True) , Command count = 547 ] 
11:17:07: [GO18_globalSetVolt]### Host voltage value is set.
11:17:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, False) , Command count = 548 ] 
11:17:07: [GO18_globalSetVolt]### Host voltage value is set.
11:17:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 549 ] 
11:17:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 550 ] 
11:17:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 551 ] 
11:17:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216C00>, <py_sfcl.CommandDataDefinition object at 0x0627D420>) , Command count = 552 ] 
11:17:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F90>, <py_sfcl.CommandDataDefinition object at 0x0627D450>) , Command count = 553 ] 
11:17:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:07: [ SetCardRCA(0x1, 0xD555) , Command count = 554 ] 
11:17:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:07: Host Frequency set to 25000 KHz
11:17:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:07: ####CSD Registe 2.0 Values####
11:17:07: CSD_STRUCTURE                                 :0x1
11:17:07: Reserv1                                       :0x0
11:17:07: Time Access 1 TAAC                            :0xe
11:17:07: Time Access 2 NSAC*100                        :0x0
11:17:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:07: Card Command Classess CCC                     :0x5b5
11:17:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:07: DSR(driver stage register)  DSR_IMP           :0x0
11:17:07: Reserv2                                       :0x0
11:17:07: Device Size C_SIZE                            :0xedc8
11:17:07: Reserv3                                       :0x0
11:17:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:07: Reserv4                                       :0x0
11:17:07: Write Speed Factor R2W_FACTOR                 :0x2
11:17:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:07: FILE_FORMAT_GRP                               :0x0
11:17:07: COPY flag                                     :0x1
11:17:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:07: File_Format                                   :0x0
11:17:07: CRC                                           :0x0
11:17:07: ####CSD Registe Values####  

11:17:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:07: [GetSCRRegisterEntry] Passed
11:17:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:07: Data_Status_After Erases          : 0
11:17:07: CPRM Security Support             : No Security
11:17:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:07: Spec. Version                     : Version 3.0X
11:17:07: Extended Security Support         : Extended_Security_Not_Supported
11:17:07: Command Support                   : COMMAND_SUPPORT
11:17:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3F0>, <py_sfcl.CommandDataDefinition object at 0x0627D390>) , Command count = 555 ] 
11:17:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216AB0>, <py_sfcl.CommandDataDefinition object at 0x06216810>) , Command count = 556 ] 
11:17:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:07: [ SetBusWidth(0x4) , Command count = 557 ] 
11:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 558 ] 
11:17:07: Protected Area Size 0x28000
11:17:07: Bus Width           2
11:17:07: Secure Mode         0
11:17:07: Speed  Class        4
11:17:07: Perf Move           0
11:17:07: Au Size             9
11:17:07: Erase Size          15
11:17:07: Erase Timeout       1
11:17:07: Erase offset        1
11:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 559 ] 
11:17:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:07: Host Frequency set to 100000 KHz
11:17:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:07: ####CSD Registe 2.0 Values####
11:17:07: CSD_STRUCTURE                                 :0x1
11:17:08: Reserv1                                       :0x0
11:17:08: Time Access 1 TAAC                            :0xe
11:17:08: Time Access 2 NSAC*100                        :0x0
11:17:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:08: Card Command Classess CCC                     :0x5b5
11:17:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:08: DSR(driver stage register)  DSR_IMP           :0x0
11:17:08: Reserv2                                       :0x0
11:17:08: Device Size C_SIZE                            :0xedc8
11:17:08: Reserv3                                       :0x0
11:17:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:08: Reserv4                                       :0x0
11:17:08: Write Speed Factor R2W_FACTOR                 :0x2
11:17:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:08: FILE_FORMAT_GRP                               :0x0
11:17:08: COPY flag                                     :0x1
11:17:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:08: File_Format                                   :0x0
11:17:08: CRC                                           :0x0
11:17:08: ####CSD Registe Values####  

11:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216570>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 560 ] 
11:17:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 561 ] 
11:17:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D270>, <py_sfcl.PySEnhancedCmdData object at 0x0627D4B0>, <None>, <py_sfcl.Command23 object at 0x0627D060>) , Command count = 562 ] 
11:17:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:10: Host Frequency set to 25000 KHz
11:17:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216540>, 0x0, True) , Command count = 563 ] 
11:17:10: [GO18_globalSetVolt]### Host voltage value is set.
11:17:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x062683C0>, 0x0, False) , Command count = 564 ] 
11:17:10: [GO18_globalSetVolt]### Host voltage value is set.
11:17:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 565 ] 
11:17:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 566 ] 
11:17:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 567 ] 
11:17:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268810>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 568 ] 
11:17:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 569 ] 
11:17:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:11: [ SetCardRCA(0x1, 0xD555) , Command count = 570 ] 
11:17:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:11: Host Frequency set to 25000 KHz
11:17:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:11: ####CSD Registe 2.0 Values####
11:17:11: CSD_STRUCTURE                                 :0x1
11:17:11: Reserv1                                       :0x0
11:17:11: Time Access 1 TAAC                            :0xe
11:17:11: Time Access 2 NSAC*100                        :0x0
11:17:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:11: Card Command Classess CCC                     :0x5b5
11:17:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:11: DSR(driver stage register)  DSR_IMP           :0x0
11:17:11: Reserv2                                       :0x0
11:17:11: Device Size C_SIZE                            :0xedc8
11:17:11: Reserv3                                       :0x0
11:17:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:11: Reserv4                                       :0x0
11:17:11: Write Speed Factor R2W_FACTOR                 :0x2
11:17:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:11: FILE_FORMAT_GRP                               :0x0
11:17:11: COPY flag                                     :0x1
11:17:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:11: File_Format                                   :0x0
11:17:11: CRC                                           :0x0
11:17:11: ####CSD Registe Values####  

11:17:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:11: [GetSCRRegisterEntry] Passed
11:17:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:11: Data_Status_After Erases          : 0
11:17:11: CPRM Security Support             : No Security
11:17:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:11: Spec. Version                     : Version 3.0X
11:17:11: Extended Security Support         : Extended_Security_Not_Supported
11:17:11: Command Support                   : COMMAND_SUPPORT
11:17:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 571 ] 
11:17:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E70>, <py_sfcl.CommandDataDefinition object at 0x06268DE0>) , Command count = 572 ] 
11:17:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:11: [ SetBusWidth(0x4) , Command count = 573 ] 
11:17:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062166C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 574 ] 
11:17:11: Protected Area Size 0x28000
11:17:11: Bus Width           2
11:17:11: Secure Mode         0
11:17:11: Speed  Class        4
11:17:11: Perf Move           0
11:17:11: Au Size             9
11:17:11: Erase Size          15
11:17:11: Erase Timeout       1
11:17:11: Erase offset        1
11:17:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 575 ] 
11:17:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:11: Host Frequency set to 100000 KHz
11:17:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:11: ####CSD Registe 2.0 Values####
11:17:11: CSD_STRUCTURE                                 :0x1
11:17:11: Reserv1                                       :0x0
11:17:11: Time Access 1 TAAC                            :0xe
11:17:11: Time Access 2 NSAC*100                        :0x0
11:17:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:11: Card Command Classess CCC                     :0x5b5
11:17:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:11: DSR(driver stage register)  DSR_IMP           :0x0
11:17:11: Reserv2                                       :0x0
11:17:11: Device Size C_SIZE                            :0xedc8
11:17:11: Reserv3                                       :0x0
11:17:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:11: Reserv4                                       :0x0
11:17:11: Write Speed Factor R2W_FACTOR                 :0x2
11:17:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:11: FILE_FORMAT_GRP                               :0x0
11:17:11: COPY flag                                     :0x1
11:17:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:11: File_Format                                   :0x0
11:17:11: CRC                                           :0x0
11:17:11: ####CSD Registe Values####  

11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B10>, <py_sfcl.CommandDataDefinition object at 0x06268930>) , Command count = 576 ] 
11:17:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680F0>, <py_sfcl.CommandDataDefinition object at 0x0627D7E0>) , Command count = 577 ] 
11:17:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062688D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D510>, <py_sfcl.PySEnhancedCmdData object at 0x0627DDE0>, <None>, <py_sfcl.Command23 object at 0x0627D690>) , Command count = 578 ] 
11:17:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:14: Host Frequency set to 25000 KHz
11:17:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:14: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268450>, 0x0, True) , Command count = 579 ] 
11:17:14: [GO18_globalSetVolt]### Host voltage value is set.
11:17:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268840>, 0x0, False) , Command count = 580 ] 
11:17:14: [GO18_globalSetVolt]### Host voltage value is set.
11:17:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 581 ] 
11:17:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 582 ] 
11:17:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 583 ] 
11:17:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062686F0>, <py_sfcl.CommandDataDefinition object at 0x06268C30>) , Command count = 584 ] 
11:17:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A20>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 585 ] 
11:17:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:14: [ SetCardRCA(0x1, 0xD555) , Command count = 586 ] 
11:17:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:14: Host Frequency set to 25000 KHz
11:17:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:14: ####CSD Registe 2.0 Values####
11:17:14: CSD_STRUCTURE                                 :0x1
11:17:14: Reserv1                                       :0x0
11:17:14: Time Access 1 TAAC                            :0xe
11:17:14: Time Access 2 NSAC*100                        :0x0
11:17:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:14: Card Command Classess CCC                     :0x5b5
11:17:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:14: DSR(driver stage register)  DSR_IMP           :0x0
11:17:14: Reserv2                                       :0x0
11:17:14: Device Size C_SIZE                            :0xedc8
11:17:14: Reserv3                                       :0x0
11:17:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:14: Reserv4                                       :0x0
11:17:14: Write Speed Factor R2W_FACTOR                 :0x2
11:17:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:14: FILE_FORMAT_GRP                               :0x0
11:17:14: COPY flag                                     :0x1
11:17:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:14: File_Format                                   :0x0
11:17:14: CRC                                           :0x0
11:17:14: ####CSD Registe Values####  

11:17:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:14: [GetSCRRegisterEntry] Passed
11:17:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:14: Data_Status_After Erases          : 0
11:17:14: CPRM Security Support             : No Security
11:17:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:14: Spec. Version                     : Version 3.0X
11:17:14: Extended Security Support         : Extended_Security_Not_Supported
11:17:14: Command Support                   : COMMAND_SUPPORT
11:17:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7E0>, <py_sfcl.CommandDataDefinition object at 0x0627D810>) , Command count = 587 ] 
11:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x062690C0>) , Command count = 588 ] 
11:17:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:14: [ SetBusWidth(0x4) , Command count = 589 ] 
11:17:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 590 ] 
11:17:14: Protected Area Size 0x28000
11:17:14: Bus Width           2
11:17:14: Secure Mode         0
11:17:14: Speed  Class        4
11:17:14: Perf Move           0
11:17:14: Au Size             9
11:17:14: Erase Size          15
11:17:14: Erase Timeout       1
11:17:14: Erase offset        1
11:17:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 591 ] 
11:17:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:14: Host Frequency set to 100000 KHz
11:17:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:14: ####CSD Registe 2.0 Values####
11:17:14: CSD_STRUCTURE                                 :0x1
11:17:14: Reserv1                                       :0x0
11:17:14: Time Access 1 TAAC                            :0xe
11:17:14: Time Access 2 NSAC*100                        :0x0
11:17:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:14: Card Command Classess CCC                     :0x5b5
11:17:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:14: DSR(driver stage register)  DSR_IMP           :0x0
11:17:14: Reserv2                                       :0x0
11:17:14: Device Size C_SIZE                            :0xedc8
11:17:14: Reserv3                                       :0x0
11:17:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:15: Reserv4                                       :0x0
11:17:15: Write Speed Factor R2W_FACTOR                 :0x2
11:17:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:15: FILE_FORMAT_GRP                               :0x0
11:17:15: COPY flag                                     :0x1
11:17:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:15: File_Format                                   :0x0
11:17:15: CRC                                           :0x0
11:17:15: ####CSD Registe Values####  

11:17:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 592 ] 
11:17:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268F30>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 593 ] 
11:17:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D600>, <py_sfcl.PySEnhancedCmdData object at 0x0627DFC0>, <None>, <py_sfcl.Command23 object at 0x0627DE70>) , Command count = 594 ] 
11:17:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:17: Host Frequency set to 25000 KHz
11:17:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268CF0>, 0x0, True) , Command count = 595 ] 
11:17:17: [GO18_globalSetVolt]### Host voltage value is set.
11:17:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x062693C0>, 0x0, False) , Command count = 596 ] 
11:17:17: [GO18_globalSetVolt]### Host voltage value is set.
11:17:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 597 ] 
11:17:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 598 ] 
11:17:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 599 ] 
11:17:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 600 ] 
11:17:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269060>, <py_sfcl.CommandDataDefinition object at 0x06269B10>) , Command count = 601 ] 
11:17:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:17: [ SetCardRCA(0x1, 0xD555) , Command count = 602 ] 
11:17:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:18: Host Frequency set to 25000 KHz
11:17:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:18: ####CSD Registe 2.0 Values####
11:17:18: CSD_STRUCTURE                                 :0x1
11:17:18: Reserv1                                       :0x0
11:17:18: Time Access 1 TAAC                            :0xe
11:17:18: Time Access 2 NSAC*100                        :0x0
11:17:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:18: Card Command Classess CCC                     :0x5b5
11:17:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:18: DSR(driver stage register)  DSR_IMP           :0x0
11:17:18: Reserv2                                       :0x0
11:17:18: Device Size C_SIZE                            :0xedc8
11:17:18: Reserv3                                       :0x0
11:17:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:18: Reserv4                                       :0x0
11:17:18: Write Speed Factor R2W_FACTOR                 :0x2
11:17:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:18: FILE_FORMAT_GRP                               :0x0
11:17:18: COPY flag                                     :0x1
11:17:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:18: File_Format                                   :0x0
11:17:18: CRC                                           :0x0
11:17:18: ####CSD Registe Values####  

11:17:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:18: [GetSCRRegisterEntry] Passed
11:17:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:18: Data_Status_After Erases          : 0
11:17:18: CPRM Security Support             : No Security
11:17:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:18: Spec. Version                     : Version 3.0X
11:17:18: Extended Security Support         : Extended_Security_Not_Supported
11:17:18: Command Support                   : COMMAND_SUPPORT
11:17:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D870>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 603 ] 
11:17:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 604 ] 
11:17:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:18: [ SetBusWidth(0x4) , Command count = 605 ] 
11:17:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 606 ] 
11:17:18: Protected Area Size 0x28000
11:17:18: Bus Width           2
11:17:18: Secure Mode         0
11:17:18: Speed  Class        4
11:17:18: Perf Move           0
11:17:18: Au Size             9
11:17:18: Erase Size          15
11:17:18: Erase Timeout       1
11:17:18: Erase offset        1
11:17:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 607 ] 
11:17:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:18: Host Frequency set to 100000 KHz
11:17:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:18: ####CSD Registe 2.0 Values####
11:17:18: CSD_STRUCTURE                                 :0x1
11:17:18: Reserv1                                       :0x0
11:17:18: Time Access 1 TAAC                            :0xe
11:17:18: Time Access 2 NSAC*100                        :0x0
11:17:18: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:18: Card Command Classess CCC                     :0x5b5
11:17:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:18: DSR(driver stage register)  DSR_IMP           :0x0
11:17:18: Reserv2                                       :0x0
11:17:18: Device Size C_SIZE                            :0xedc8
11:17:18: Reserv3                                       :0x0
11:17:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:18: Reserv4                                       :0x0
11:17:18: Write Speed Factor R2W_FACTOR                 :0x2
11:17:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:18: FILE_FORMAT_GRP                               :0x0
11:17:18: COPY flag                                     :0x1
11:17:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:18: File_Format                                   :0x0
11:17:18: CRC                                           :0x0
11:17:18: ####CSD Registe Values####  

11:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 608 ] 
11:17:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269240>, <py_sfcl.CommandDataDefinition object at 0x062691E0>) , Command count = 609 ] 
11:17:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062698D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269150>, <py_sfcl.PySEnhancedCmdData object at 0x062692A0>, <None>, <py_sfcl.Command23 object at 0x06269510>) , Command count = 610 ] 
11:17:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:19: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:21: Host Frequency set to 25000 KHz
11:17:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269870>, 0x0, True) , Command count = 611 ] 
11:17:21: [GO18_globalSetVolt]### Host voltage value is set.
11:17:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x062693F0>, 0x0, False) , Command count = 612 ] 
11:17:21: [GO18_globalSetVolt]### Host voltage value is set.
11:17:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 613 ] 
11:17:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 614 ] 
11:17:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 615 ] 
11:17:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x06269EA0>) , Command count = 616 ] 
11:17:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x06269CF0>) , Command count = 617 ] 
11:17:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:21: [ SetCardRCA(0x1, 0xD555) , Command count = 618 ] 
11:17:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:21: Host Frequency set to 25000 KHz
11:17:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:21: ####CSD Registe 2.0 Values####
11:17:21: CSD_STRUCTURE                                 :0x1
11:17:21: Reserv1                                       :0x0
11:17:21: Time Access 1 TAAC                            :0xe
11:17:21: Time Access 2 NSAC*100                        :0x0
11:17:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:21: Card Command Classess CCC                     :0x5b5
11:17:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:21: DSR(driver stage register)  DSR_IMP           :0x0
11:17:21: Reserv2                                       :0x0
11:17:21: Device Size C_SIZE                            :0xedc8
11:17:21: Reserv3                                       :0x0
11:17:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:21: Reserv4                                       :0x0
11:17:21: Write Speed Factor R2W_FACTOR                 :0x2
11:17:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:21: FILE_FORMAT_GRP                               :0x0
11:17:21: COPY flag                                     :0x1
11:17:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:21: File_Format                                   :0x0
11:17:21: CRC                                           :0x0
11:17:21: ####CSD Registe Values####  

11:17:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:21: [GetSCRRegisterEntry] Passed
11:17:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:21: Data_Status_After Erases          : 0
11:17:21: CPRM Security Support             : No Security
11:17:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:21: Spec. Version                     : Version 3.0X
11:17:21: Extended Security Support         : Extended_Security_Not_Supported
11:17:21: Command Support                   : COMMAND_SUPPORT
11:17:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F60>, <py_sfcl.CommandDataDefinition object at 0x06269D80>) , Command count = 619 ] 
11:17:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269FC0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 620 ] 
11:17:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:21: [ SetBusWidth(0x4) , Command count = 621 ] 
11:17:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 622 ] 
11:17:21: Protected Area Size 0x28000
11:17:21: Bus Width           2
11:17:21: Secure Mode         0
11:17:21: Speed  Class        4
11:17:21: Perf Move           0
11:17:21: Au Size             9
11:17:21: Erase Size          15
11:17:21: Erase Timeout       1
11:17:21: Erase offset        1
11:17:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 623 ] 
11:17:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:21: Host Frequency set to 100000 KHz
11:17:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:21: ####CSD Registe 2.0 Values####
11:17:21: CSD_STRUCTURE                                 :0x1
11:17:22: Reserv1                                       :0x0
11:17:22: Time Access 1 TAAC                            :0xe
11:17:22: Time Access 2 NSAC*100                        :0x0
11:17:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:22: Card Command Classess CCC                     :0x5b5
11:17:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:22: DSR(driver stage register)  DSR_IMP           :0x0
11:17:22: Reserv2                                       :0x0
11:17:22: Device Size C_SIZE                            :0xedc8
11:17:22: Reserv3                                       :0x0
11:17:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:22: Reserv4                                       :0x0
11:17:22: Write Speed Factor R2W_FACTOR                 :0x2
11:17:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:22: FILE_FORMAT_GRP                               :0x0
11:17:22: COPY flag                                     :0x1
11:17:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:22: File_Format                                   :0x0
11:17:22: CRC                                           :0x0
11:17:22: ####CSD Registe Values####  

11:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 624 ] 
11:17:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C60>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 625 ] 
11:17:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269B70>, <py_sfcl.PySEnhancedCmdData object at 0x06269930>, <None>, <py_sfcl.Command23 object at 0x062694B0>) , Command count = 626 ] 
11:17:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:24: Host Frequency set to 25000 KHz
11:17:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x062698A0>, 0x0, True) , Command count = 627 ] 
11:17:24: [GO18_globalSetVolt]### Host voltage value is set.
11:17:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, False) , Command count = 628 ] 
11:17:24: [GO18_globalSetVolt]### Host voltage value is set.
11:17:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 629 ] 
11:17:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 630 ] 
11:17:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 631 ] 
11:17:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E70>, <py_sfcl.CommandDataDefinition object at 0x0626D360>) , Command count = 632 ] 
11:17:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E40>, <py_sfcl.CommandDataDefinition object at 0x06269780>) , Command count = 633 ] 
11:17:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:25: [ SetCardRCA(0x1, 0xD555) , Command count = 634 ] 
11:17:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:25: Host Frequency set to 25000 KHz
11:17:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:25: ####CSD Registe 2.0 Values####
11:17:25: CSD_STRUCTURE                                 :0x1
11:17:25: Reserv1                                       :0x0
11:17:25: Time Access 1 TAAC                            :0xe
11:17:25: Time Access 2 NSAC*100                        :0x0
11:17:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:25: Card Command Classess CCC                     :0x5b5
11:17:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:25: DSR(driver stage register)  DSR_IMP           :0x0
11:17:25: Reserv2                                       :0x0
11:17:25: Device Size C_SIZE                            :0xedc8
11:17:25: Reserv3                                       :0x0
11:17:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:25: Reserv4                                       :0x0
11:17:25: Write Speed Factor R2W_FACTOR                 :0x2
11:17:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:25: FILE_FORMAT_GRP                               :0x0
11:17:25: COPY flag                                     :0x1
11:17:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:25: File_Format                                   :0x0
11:17:25: CRC                                           :0x0
11:17:25: ####CSD Registe Values####  

11:17:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:25: [GetSCRRegisterEntry] Passed
11:17:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:25: Data_Status_After Erases          : 0
11:17:25: CPRM Security Support             : No Security
11:17:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:25: Spec. Version                     : Version 3.0X
11:17:25: Extended Security Support         : Extended_Security_Not_Supported
11:17:25: Command Support                   : COMMAND_SUPPORT
11:17:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5D0>, <py_sfcl.CommandDataDefinition object at 0x0626D3F0>) , Command count = 635 ] 
11:17:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 636 ] 
11:17:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:25: [ SetBusWidth(0x4) , Command count = 637 ] 
11:17:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 638 ] 
11:17:25: Protected Area Size 0x28000
11:17:25: Bus Width           2
11:17:25: Secure Mode         0
11:17:25: Speed  Class        4
11:17:25: Perf Move           0
11:17:25: Au Size             9
11:17:25: Erase Size          15
11:17:25: Erase Timeout       1
11:17:25: Erase offset        1
11:17:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 639 ] 
11:17:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:25: Host Frequency set to 100000 KHz
11:17:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:25: ####CSD Registe 2.0 Values####
11:17:25: CSD_STRUCTURE                                 :0x1
11:17:25: Reserv1                                       :0x0
11:17:25: Time Access 1 TAAC                            :0xe
11:17:25: Time Access 2 NSAC*100                        :0x0
11:17:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:25: Card Command Classess CCC                     :0x5b5
11:17:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:25: DSR(driver stage register)  DSR_IMP           :0x0
11:17:25: Reserv2                                       :0x0
11:17:25: Device Size C_SIZE                            :0xedc8
11:17:25: Reserv3                                       :0x0
11:17:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:25: Reserv4                                       :0x0
11:17:25: Write Speed Factor R2W_FACTOR                 :0x2
11:17:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:25: FILE_FORMAT_GRP                               :0x0
11:17:25: COPY flag                                     :0x1
11:17:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:25: File_Format                                   :0x0
11:17:25: CRC                                           :0x0
11:17:25: ####CSD Registe Values####  

11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 640 ] 
11:17:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x0626D0C0>) , Command count = 641 ] 
11:17:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D030>, <py_sfcl.PySEnhancedCmdData object at 0x0626D1B0>, <None>, <py_sfcl.Command23 object at 0x06269A20>) , Command count = 642 ] 
11:17:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:28: Host Frequency set to 25000 KHz
11:17:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D120>, 0x0, True) , Command count = 643 ] 
11:17:28: [GO18_globalSetVolt]### Host voltage value is set.
11:17:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D990>, 0x0, False) , Command count = 644 ] 
11:17:28: [GO18_globalSetVolt]### Host voltage value is set.
11:17:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 645 ] 
11:17:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 646 ] 
11:17:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 647 ] 
11:17:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x0626D870>) , Command count = 648 ] 
11:17:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 649 ] 
11:17:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:28: [ SetCardRCA(0x1, 0xD555) , Command count = 650 ] 
11:17:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:28: Host Frequency set to 25000 KHz
11:17:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:28: ####CSD Registe 2.0 Values####
11:17:28: CSD_STRUCTURE                                 :0x1
11:17:28: Reserv1                                       :0x0
11:17:28: Time Access 1 TAAC                            :0xe
11:17:28: Time Access 2 NSAC*100                        :0x0
11:17:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:28: Card Command Classess CCC                     :0x5b5
11:17:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:28: DSR(driver stage register)  DSR_IMP           :0x0
11:17:28: Reserv2                                       :0x0
11:17:28: Device Size C_SIZE                            :0xedc8
11:17:28: Reserv3                                       :0x0
11:17:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:28: Reserv4                                       :0x0
11:17:28: Write Speed Factor R2W_FACTOR                 :0x2
11:17:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:28: FILE_FORMAT_GRP                               :0x0
11:17:28: COPY flag                                     :0x1
11:17:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:28: File_Format                                   :0x0
11:17:28: CRC                                           :0x0
11:17:28: ####CSD Registe Values####  

11:17:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:28: [GetSCRRegisterEntry] Passed
11:17:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:28: Data_Status_After Erases          : 0
11:17:28: CPRM Security Support             : No Security
11:17:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:28: Spec. Version                     : Version 3.0X
11:17:28: Extended Security Support         : Extended_Security_Not_Supported
11:17:28: Command Support                   : COMMAND_SUPPORT
11:17:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 651 ] 
11:17:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD80>, <py_sfcl.CommandDataDefinition object at 0x0626DEA0>) , Command count = 652 ] 
11:17:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:28: [ SetBusWidth(0x4) , Command count = 653 ] 
11:17:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 654 ] 
11:17:28: Protected Area Size 0x28000
11:17:28: Bus Width           2
11:17:28: Secure Mode         0
11:17:28: Speed  Class        4
11:17:28: Perf Move           0
11:17:28: Au Size             9
11:17:28: Erase Size          15
11:17:28: Erase Timeout       1
11:17:28: Erase offset        1
11:17:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 655 ] 
11:17:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:28: Host Frequency set to 100000 KHz
11:17:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:28: ####CSD Registe 2.0 Values####
11:17:28: CSD_STRUCTURE                                 :0x1
11:17:28: Reserv1                                       :0x0
11:17:28: Time Access 1 TAAC                            :0xe
11:17:28: Time Access 2 NSAC*100                        :0x0
11:17:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:28: Card Command Classess CCC                     :0x5b5
11:17:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:28: DSR(driver stage register)  DSR_IMP           :0x0
11:17:28: Reserv2                                       :0x0
11:17:28: Device Size C_SIZE                            :0xedc8
11:17:28: Reserv3                                       :0x0
11:17:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:29: Reserv4                                       :0x0
11:17:29: Write Speed Factor R2W_FACTOR                 :0x2
11:17:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:29: FILE_FORMAT_GRP                               :0x0
11:17:29: COPY flag                                     :0x1
11:17:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:29: File_Format                                   :0x0
11:17:29: CRC                                           :0x0
11:17:29: ####CSD Registe Values####  

11:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 656 ] 
11:17:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D810>, <py_sfcl.CommandDataDefinition object at 0x0626DB40>) , Command count = 657 ] 
11:17:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DA80>, <None>, <py_sfcl.Command23 object at 0x0626D3C0>) , Command count = 658 ] 
11:17:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:29: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:31: Host Frequency set to 25000 KHz
11:17:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:31: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D690>, 0x0, True) , Command count = 659 ] 
11:17:31: [GO18_globalSetVolt]### Host voltage value is set.
11:17:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273090>, 0x0, False) , Command count = 660 ] 
11:17:31: [GO18_globalSetVolt]### Host voltage value is set.
11:17:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 661 ] 
11:17:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 662 ] 
11:17:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 663 ] 
11:17:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 664 ] 
11:17:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D630>, <py_sfcl.CommandDataDefinition object at 0x0626DC00>) , Command count = 665 ] 
11:17:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:32: [ SetCardRCA(0x1, 0xD555) , Command count = 666 ] 
11:17:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:32: Host Frequency set to 25000 KHz
11:17:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:32: ####CSD Registe 2.0 Values####
11:17:32: CSD_STRUCTURE                                 :0x1
11:17:32: Reserv1                                       :0x0
11:17:32: Time Access 1 TAAC                            :0xe
11:17:32: Time Access 2 NSAC*100                        :0x0
11:17:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:32: Card Command Classess CCC                     :0x5b5
11:17:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:32: DSR(driver stage register)  DSR_IMP           :0x0
11:17:32: Reserv2                                       :0x0
11:17:32: Device Size C_SIZE                            :0xedc8
11:17:32: Reserv3                                       :0x0
11:17:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:32: Reserv4                                       :0x0
11:17:32: Write Speed Factor R2W_FACTOR                 :0x2
11:17:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:32: FILE_FORMAT_GRP                               :0x0
11:17:32: COPY flag                                     :0x1
11:17:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:32: File_Format                                   :0x0
11:17:32: CRC                                           :0x0
11:17:32: ####CSD Registe Values####  

11:17:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:32: [GetSCRRegisterEntry] Passed
11:17:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:32: Data_Status_After Erases          : 0
11:17:32: CPRM Security Support             : No Security
11:17:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:32: Spec. Version                     : Version 3.0X
11:17:32: Extended Security Support         : Extended_Security_Not_Supported
11:17:32: Command Support                   : COMMAND_SUPPORT
11:17:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 667 ] 
11:17:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273480>, <py_sfcl.CommandDataDefinition object at 0x062733C0>) , Command count = 668 ] 
11:17:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:32: [ SetBusWidth(0x4) , Command count = 669 ] 
11:17:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 670 ] 
11:17:32: Protected Area Size 0x28000
11:17:32: Bus Width           2
11:17:32: Secure Mode         0
11:17:32: Speed  Class        4
11:17:32: Perf Move           0
11:17:32: Au Size             9
11:17:32: Erase Size          15
11:17:32: Erase Timeout       1
11:17:32: Erase offset        1
11:17:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 671 ] 
11:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:32: Host Frequency set to 100000 KHz
11:17:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:32: ####CSD Registe 2.0 Values####
11:17:32: CSD_STRUCTURE                                 :0x1
11:17:32: Reserv1                                       :0x0
11:17:32: Time Access 1 TAAC                            :0xe
11:17:32: Time Access 2 NSAC*100                        :0x0
11:17:32: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:32: Card Command Classess CCC                     :0x5b5
11:17:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:32: DSR(driver stage register)  DSR_IMP           :0x0
11:17:32: Reserv2                                       :0x0
11:17:32: Device Size C_SIZE                            :0xedc8
11:17:32: Reserv3                                       :0x0
11:17:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:32: Reserv4                                       :0x0
11:17:32: Write Speed Factor R2W_FACTOR                 :0x2
11:17:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:32: FILE_FORMAT_GRP                               :0x0
11:17:32: COPY flag                                     :0x1
11:17:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:32: File_Format                                   :0x0
11:17:32: CRC                                           :0x0
11:17:32: ####CSD Registe Values####  

11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273600>, <py_sfcl.CommandDataDefinition object at 0x06273210>) , Command count = 672 ] 
11:17:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DED0>, <py_sfcl.CommandDataDefinition object at 0x0626DE40>) , Command count = 673 ] 
11:17:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC60>, <None>, <py_sfcl.Command23 object at 0x0626D300>) , Command count = 674 ] 
11:17:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:33: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:35: Host Frequency set to 25000 KHz
11:17:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:35: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273420>, 0x0, True) , Command count = 675 ] 
11:17:35: [GO18_globalSetVolt]### Host voltage value is set.
11:17:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273750>, 0x0, False) , Command count = 676 ] 
11:17:35: [GO18_globalSetVolt]### Host voltage value is set.
11:17:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 677 ] 
11:17:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 678 ] 
11:17:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 679 ] 
11:17:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273630>, <py_sfcl.CommandDataDefinition object at 0x06273510>) , Command count = 680 ] 
11:17:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x0626DCF0>) , Command count = 681 ] 
11:17:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:35: [ SetCardRCA(0x1, 0xD555) , Command count = 682 ] 
11:17:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:35: Host Frequency set to 25000 KHz
11:17:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:35: ####CSD Registe 2.0 Values####
11:17:35: CSD_STRUCTURE                                 :0x1
11:17:35: Reserv1                                       :0x0
11:17:35: Time Access 1 TAAC                            :0xe
11:17:35: Time Access 2 NSAC*100                        :0x0
11:17:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:35: Card Command Classess CCC                     :0x5b5
11:17:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:35: DSR(driver stage register)  DSR_IMP           :0x0
11:17:35: Reserv2                                       :0x0
11:17:35: Device Size C_SIZE                            :0xedc8
11:17:35: Reserv3                                       :0x0
11:17:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:35: Reserv4                                       :0x0
11:17:35: Write Speed Factor R2W_FACTOR                 :0x2
11:17:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:35: FILE_FORMAT_GRP                               :0x0
11:17:35: COPY flag                                     :0x1
11:17:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:35: File_Format                                   :0x0
11:17:35: CRC                                           :0x0
11:17:35: ####CSD Registe Values####  

11:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:35: [GetSCRRegisterEntry] Passed
11:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:35: Data_Status_After Erases          : 0
11:17:35: CPRM Security Support             : No Security
11:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:35: Spec. Version                     : Version 3.0X
11:17:35: Extended Security Support         : Extended_Security_Not_Supported
11:17:35: Command Support                   : COMMAND_SUPPORT
11:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 683 ] 
11:17:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B40>, <py_sfcl.CommandDataDefinition object at 0x06273C60>) , Command count = 684 ] 
11:17:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:35: [ SetBusWidth(0x4) , Command count = 685 ] 
11:17:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 686 ] 
11:17:35: Protected Area Size 0x28000
11:17:35: Bus Width           2
11:17:35: Secure Mode         0
11:17:35: Speed  Class        4
11:17:35: Perf Move           0
11:17:35: Au Size             9
11:17:35: Erase Size          15
11:17:35: Erase Timeout       1
11:17:35: Erase offset        1
11:17:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 687 ] 
11:17:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:35: Host Frequency set to 100000 KHz
11:17:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:35: ####CSD Registe 2.0 Values####
11:17:35: CSD_STRUCTURE                                 :0x1
11:17:36: Reserv1                                       :0x0
11:17:36: Time Access 1 TAAC                            :0xe
11:17:36: Time Access 2 NSAC*100                        :0x0
11:17:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:36: Card Command Classess CCC                     :0x5b5
11:17:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:36: DSR(driver stage register)  DSR_IMP           :0x0
11:17:36: Reserv2                                       :0x0
11:17:36: Device Size C_SIZE                            :0xedc8
11:17:36: Reserv3                                       :0x0
11:17:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:36: Reserv4                                       :0x0
11:17:36: Write Speed Factor R2W_FACTOR                 :0x2
11:17:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:36: FILE_FORMAT_GRP                               :0x0
11:17:36: COPY flag                                     :0x1
11:17:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:36: File_Format                                   :0x0
11:17:36: CRC                                           :0x0
11:17:36: ####CSD Registe Values####  

11:17:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x0627DA50>) , Command count = 688 ] 
11:17:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x0627D900>) , Command count = 689 ] 
11:17:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DB70>, <py_sfcl.PySEnhancedCmdData object at 0x0626DE40>, <None>, <py_sfcl.Command23 object at 0x0626DF30>) , Command count = 690 ] 
11:17:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:38: Host Frequency set to 25000 KHz
11:17:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273450>, 0x0, True) , Command count = 691 ] 
11:17:38: [GO18_globalSetVolt]### Host voltage value is set.
11:17:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273E10>, 0x0, False) , Command count = 692 ] 
11:17:38: [GO18_globalSetVolt]### Host voltage value is set.
11:17:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 693 ] 
11:17:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 694 ] 
11:17:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 695 ] 
11:17:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273960>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 696 ] 
11:17:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062733F0>, <py_sfcl.CommandDataDefinition object at 0x062739C0>) , Command count = 697 ] 
11:17:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:39: [ SetCardRCA(0x1, 0xD555) , Command count = 698 ] 
11:17:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:39: Host Frequency set to 25000 KHz
11:17:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:39: ####CSD Registe 2.0 Values####
11:17:39: CSD_STRUCTURE                                 :0x1
11:17:39: Reserv1                                       :0x0
11:17:39: Time Access 1 TAAC                            :0xe
11:17:39: Time Access 2 NSAC*100                        :0x0
11:17:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:39: Card Command Classess CCC                     :0x5b5
11:17:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:39: DSR(driver stage register)  DSR_IMP           :0x0
11:17:39: Reserv2                                       :0x0
11:17:39: Device Size C_SIZE                            :0xedc8
11:17:39: Reserv3                                       :0x0
11:17:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:39: Reserv4                                       :0x0
11:17:39: Write Speed Factor R2W_FACTOR                 :0x2
11:17:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:39: FILE_FORMAT_GRP                               :0x0
11:17:39: COPY flag                                     :0x1
11:17:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:39: File_Format                                   :0x0
11:17:39: CRC                                           :0x0
11:17:39: ####CSD Registe Values####  

11:17:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:39: [GetSCRRegisterEntry] Passed
11:17:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:39: Data_Status_After Erases          : 0
11:17:39: CPRM Security Support             : No Security
11:17:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:39: Spec. Version                     : Version 3.0X
11:17:39: Extended Security Support         : Extended_Security_Not_Supported
11:17:39: Command Support                   : COMMAND_SUPPORT
11:17:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276360>, <py_sfcl.CommandDataDefinition object at 0x06273F30>) , Command count = 699 ] 
11:17:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06276180>) , Command count = 700 ] 
11:17:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:39: [ SetBusWidth(0x4) , Command count = 701 ] 
11:17:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 702 ] 
11:17:39: Protected Area Size 0x28000
11:17:39: Bus Width           2
11:17:39: Secure Mode         0
11:17:39: Speed  Class        4
11:17:39: Perf Move           0
11:17:39: Au Size             9
11:17:39: Erase Size          15
11:17:39: Erase Timeout       1
11:17:39: Erase offset        1
11:17:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 703 ] 
11:17:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:39: Host Frequency set to 100000 KHz
11:17:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:39: ####CSD Registe 2.0 Values####
11:17:39: CSD_STRUCTURE                                 :0x1
11:17:39: Reserv1                                       :0x0
11:17:39: Time Access 1 TAAC                            :0xe
11:17:39: Time Access 2 NSAC*100                        :0x0
11:17:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:39: Card Command Classess CCC                     :0x5b5
11:17:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:39: DSR(driver stage register)  DSR_IMP           :0x0
11:17:39: Reserv2                                       :0x0
11:17:39: Device Size C_SIZE                            :0xedc8
11:17:39: Reserv3                                       :0x0
11:17:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:39: Reserv4                                       :0x0
11:17:39: Write Speed Factor R2W_FACTOR                 :0x2
11:17:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:39: FILE_FORMAT_GRP                               :0x0
11:17:39: COPY flag                                     :0x1
11:17:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:39: File_Format                                   :0x0
11:17:39: CRC                                           :0x0
11:17:39: ####CSD Registe Values####  

11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062763C0>, <py_sfcl.CommandDataDefinition object at 0x06273900>) , Command count = 704 ] 
11:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C90>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 705 ] 
11:17:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062764E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273A20>, <py_sfcl.PySEnhancedCmdData object at 0x06273780>, <None>, <py_sfcl.Command23 object at 0x0626DC30>) , Command count = 706 ] 
11:17:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:42: Host Frequency set to 25000 KHz
11:17:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273B10>, 0x0, True) , Command count = 707 ] 
11:17:42: [GO18_globalSetVolt]### Host voltage value is set.
11:17:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276510>, 0x0, False) , Command count = 708 ] 
11:17:42: [GO18_globalSetVolt]### Host voltage value is set.
11:17:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 709 ] 
11:17:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 710 ] 
11:17:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 711 ] 
11:17:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x062765A0>) , Command count = 712 ] 
11:17:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AB0>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 713 ] 
11:17:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:42: [ SetCardRCA(0x1, 0xD555) , Command count = 714 ] 
11:17:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:42: Host Frequency set to 25000 KHz
11:17:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:42: ####CSD Registe 2.0 Values####
11:17:42: CSD_STRUCTURE                                 :0x1
11:17:42: Reserv1                                       :0x0
11:17:42: Time Access 1 TAAC                            :0xe
11:17:42: Time Access 2 NSAC*100                        :0x0
11:17:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:42: Card Command Classess CCC                     :0x5b5
11:17:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:42: DSR(driver stage register)  DSR_IMP           :0x0
11:17:42: Reserv2                                       :0x0
11:17:42: Device Size C_SIZE                            :0xedc8
11:17:42: Reserv3                                       :0x0
11:17:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:42: Reserv4                                       :0x0
11:17:42: Write Speed Factor R2W_FACTOR                 :0x2
11:17:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:42: FILE_FORMAT_GRP                               :0x0
11:17:42: COPY flag                                     :0x1
11:17:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:42: File_Format                                   :0x0
11:17:42: CRC                                           :0x0
11:17:42: ####CSD Registe Values####  

11:17:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:42: [GetSCRRegisterEntry] Passed
11:17:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:42: Data_Status_After Erases          : 0
11:17:42: CPRM Security Support             : No Security
11:17:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:42: Spec. Version                     : Version 3.0X
11:17:42: Extended Security Support         : Extended_Security_Not_Supported
11:17:42: Command Support                   : COMMAND_SUPPORT
11:17:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 715 ] 
11:17:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276900>, <py_sfcl.CommandDataDefinition object at 0x06276A20>) , Command count = 716 ] 
11:17:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:42: [ SetBusWidth(0x4) , Command count = 717 ] 
11:17:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 718 ] 
11:17:42: Protected Area Size 0x28000
11:17:42: Bus Width           2
11:17:42: Secure Mode         0
11:17:42: Speed  Class        4
11:17:42: Perf Move           0
11:17:42: Au Size             9
11:17:42: Erase Size          15
11:17:42: Erase Timeout       1
11:17:42: Erase offset        1
11:17:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 719 ] 
11:17:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:42: Host Frequency set to 100000 KHz
11:17:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:42: ####CSD Registe 2.0 Values####
11:17:42: CSD_STRUCTURE                                 :0x1
11:17:43: Reserv1                                       :0x0
11:17:43: Time Access 1 TAAC                            :0xe
11:17:43: Time Access 2 NSAC*100                        :0x0
11:17:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:43: Card Command Classess CCC                     :0x5b5
11:17:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:43: DSR(driver stage register)  DSR_IMP           :0x0
11:17:43: Reserv2                                       :0x0
11:17:43: Device Size C_SIZE                            :0xedc8
11:17:43: Reserv3                                       :0x0
11:17:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:43: Reserv4                                       :0x0
11:17:43: Write Speed Factor R2W_FACTOR                 :0x2
11:17:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:43: FILE_FORMAT_GRP                               :0x0
11:17:43: COPY flag                                     :0x1
11:17:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:43: File_Format                                   :0x0
11:17:43: CRC                                           :0x0
11:17:43: ####CSD Registe Values####  

11:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 720 ] 
11:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276390>, <py_sfcl.CommandDataDefinition object at 0x062766C0>) , Command count = 721 ] 
11:17:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276120>, <py_sfcl.PySEnhancedCmdData object at 0x062763F0>, <None>, <py_sfcl.Command23 object at 0x06273ED0>) , Command count = 722 ] 
11:17:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:43: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:45: Host Frequency set to 25000 KHz
11:17:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:45: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276210>, 0x0, True) , Command count = 723 ] 
11:17:45: [GO18_globalSetVolt]### Host voltage value is set.
11:17:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276BD0>, 0x0, False) , Command count = 724 ] 
11:17:45: [GO18_globalSetVolt]### Host voltage value is set.
11:17:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 725 ] 
11:17:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 726 ] 
11:17:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 727 ] 
11:17:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276720>, <py_sfcl.CommandDataDefinition object at 0x06276AB0>) , Command count = 728 ] 
11:17:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x06276750>) , Command count = 729 ] 
11:17:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:45: [ SetCardRCA(0x1, 0xD555) , Command count = 730 ] 
11:17:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:46: Host Frequency set to 25000 KHz
11:17:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:46: ####CSD Registe 2.0 Values####
11:17:46: CSD_STRUCTURE                                 :0x1
11:17:46: Reserv1                                       :0x0
11:17:46: Time Access 1 TAAC                            :0xe
11:17:46: Time Access 2 NSAC*100                        :0x0
11:17:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:46: Card Command Classess CCC                     :0x5b5
11:17:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:46: DSR(driver stage register)  DSR_IMP           :0x0
11:17:46: Reserv2                                       :0x0
11:17:46: Device Size C_SIZE                            :0xedc8
11:17:46: Reserv3                                       :0x0
11:17:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:46: Reserv4                                       :0x0
11:17:46: Write Speed Factor R2W_FACTOR                 :0x2
11:17:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:46: FILE_FORMAT_GRP                               :0x0
11:17:46: COPY flag                                     :0x1
11:17:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:46: File_Format                                   :0x0
11:17:46: CRC                                           :0x0
11:17:46: ####CSD Registe Values####  

11:17:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:46: [GetSCRRegisterEntry] Passed
11:17:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:46: Data_Status_After Erases          : 0
11:17:46: CPRM Security Support             : No Security
11:17:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:46: Spec. Version                     : Version 3.0X
11:17:46: Extended Security Support         : Extended_Security_Not_Supported
11:17:46: Command Support                   : COMMAND_SUPPORT
11:17:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276ED0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 731 ] 
11:17:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276F00>) , Command count = 732 ] 
11:17:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:46: [ SetBusWidth(0x4) , Command count = 733 ] 
11:17:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 734 ] 
11:17:46: Protected Area Size 0x28000
11:17:46: Bus Width           2
11:17:46: Secure Mode         0
11:17:46: Speed  Class        4
11:17:46: Perf Move           0
11:17:46: Au Size             9
11:17:46: Erase Size          15
11:17:46: Erase Timeout       1
11:17:46: Erase offset        1
11:17:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 735 ] 
11:17:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:46: Host Frequency set to 100000 KHz
11:17:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:46: ####CSD Registe 2.0 Values####
11:17:46: CSD_STRUCTURE                                 :0x1
11:17:46: Reserv1                                       :0x0
11:17:46: Time Access 1 TAAC                            :0xe
11:17:46: Time Access 2 NSAC*100                        :0x0
11:17:46: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:46: Card Command Classess CCC                     :0x5b5
11:17:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:46: DSR(driver stage register)  DSR_IMP           :0x0
11:17:46: Reserv2                                       :0x0
11:17:46: Device Size C_SIZE                            :0xedc8
11:17:46: Reserv3                                       :0x0
11:17:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:46: Reserv4                                       :0x0
11:17:46: Write Speed Factor R2W_FACTOR                 :0x2
11:17:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:46: FILE_FORMAT_GRP                               :0x0
11:17:46: COPY flag                                     :0x1
11:17:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:46: File_Format                                   :0x0
11:17:46: CRC                                           :0x0
11:17:46: ####CSD Registe Values####  

11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A180>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 736 ] 
11:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A50>, <py_sfcl.CommandDataDefinition object at 0x06276D80>) , Command count = 737 ] 
11:17:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767E0>, <py_sfcl.PySEnhancedCmdData object at 0x06276CC0>, <None>, <py_sfcl.Command23 object at 0x06276600>) , Command count = 738 ] 
11:17:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:49: Host Frequency set to 25000 KHz
11:17:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x062768D0>, 0x0, True) , Command count = 739 ] 
11:17:49: [GO18_globalSetVolt]### Host voltage value is set.
11:17:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A2D0>, 0x0, False) , Command count = 740 ] 
11:17:49: [GO18_globalSetVolt]### Host voltage value is set.
11:17:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 741 ] 
11:17:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 742 ] 
11:17:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 743 ] 
11:17:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x0627A360>) , Command count = 744 ] 
11:17:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x06276E40>) , Command count = 745 ] 
11:17:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:49: [ SetCardRCA(0x1, 0xD555) , Command count = 746 ] 
11:17:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:49: Host Frequency set to 25000 KHz
11:17:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:49: ####CSD Registe 2.0 Values####
11:17:49: CSD_STRUCTURE                                 :0x1
11:17:49: Reserv1                                       :0x0
11:17:49: Time Access 1 TAAC                            :0xe
11:17:49: Time Access 2 NSAC*100                        :0x0
11:17:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:49: Card Command Classess CCC                     :0x5b5
11:17:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:49: DSR(driver stage register)  DSR_IMP           :0x0
11:17:49: Reserv2                                       :0x0
11:17:49: Device Size C_SIZE                            :0xedc8
11:17:49: Reserv3                                       :0x0
11:17:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:49: Reserv4                                       :0x0
11:17:49: Write Speed Factor R2W_FACTOR                 :0x2
11:17:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:49: FILE_FORMAT_GRP                               :0x0
11:17:49: COPY flag                                     :0x1
11:17:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:49: File_Format                                   :0x0
11:17:49: CRC                                           :0x0
11:17:49: ####CSD Registe Values####  

11:17:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:49: [GetSCRRegisterEntry] Passed
11:17:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:49: Data_Status_After Erases          : 0
11:17:49: CPRM Security Support             : No Security
11:17:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:49: Spec. Version                     : Version 3.0X
11:17:49: Extended Security Support         : Extended_Security_Not_Supported
11:17:49: Command Support                   : COMMAND_SUPPORT
11:17:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5D0>, <py_sfcl.CommandDataDefinition object at 0x0627A3F0>) , Command count = 747 ] 
11:17:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767B0>, <py_sfcl.CommandDataDefinition object at 0x0627A6C0>) , Command count = 748 ] 
11:17:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:49: [ SetBusWidth(0x4) , Command count = 749 ] 
11:17:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 750 ] 
11:17:49: Protected Area Size 0x28000
11:17:49: Bus Width           2
11:17:49: Secure Mode         0
11:17:49: Speed  Class        4
11:17:49: Perf Move           0
11:17:49: Au Size             9
11:17:49: Erase Size          15
11:17:49: Erase Timeout       1
11:17:49: Erase offset        1
11:17:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 751 ] 
11:17:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:49: Host Frequency set to 100000 KHz
11:17:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:49: ####CSD Registe 2.0 Values####
11:17:49: CSD_STRUCTURE                                 :0x1
11:17:50: Reserv1                                       :0x0
11:17:50: Time Access 1 TAAC                            :0xe
11:17:50: Time Access 2 NSAC*100                        :0x0
11:17:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:50: Card Command Classess CCC                     :0x5b5
11:17:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:50: DSR(driver stage register)  DSR_IMP           :0x0
11:17:50: Reserv2                                       :0x0
11:17:50: Device Size C_SIZE                            :0xedc8
11:17:50: Reserv3                                       :0x0
11:17:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:50: Reserv4                                       :0x0
11:17:50: Write Speed Factor R2W_FACTOR                 :0x2
11:17:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:50: FILE_FORMAT_GRP                               :0x0
11:17:50: COPY flag                                     :0x1
11:17:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:50: File_Format                                   :0x0
11:17:50: CRC                                           :0x0
11:17:50: ####CSD Registe Values####  

11:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A840>, <py_sfcl.CommandDataDefinition object at 0x0627A450>) , Command count = 752 ] 
11:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A150>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 753 ] 
11:17:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A030>, <py_sfcl.PySEnhancedCmdData object at 0x0627A1B0>, <None>, <py_sfcl.Command23 object at 0x06276540>) , Command count = 754 ] 
11:17:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:50: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:52: Host Frequency set to 25000 KHz
11:17:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:52: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A120>, 0x0, True) , Command count = 755 ] 
11:17:52: [GO18_globalSetVolt]### Host voltage value is set.
11:17:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A960>, 0x0, False) , Command count = 756 ] 
11:17:52: [GO18_globalSetVolt]### Host voltage value is set.
11:17:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 757 ] 
11:17:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 758 ] 
11:17:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 759 ] 
11:17:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627A870>) , Command count = 760 ] 
11:17:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 761 ] 
11:17:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:53: [ SetCardRCA(0x1, 0xD555) , Command count = 762 ] 
11:17:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:53: Host Frequency set to 25000 KHz
11:17:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:53: ####CSD Registe 2.0 Values####
11:17:53: CSD_STRUCTURE                                 :0x1
11:17:53: Reserv1                                       :0x0
11:17:53: Time Access 1 TAAC                            :0xe
11:17:53: Time Access 2 NSAC*100                        :0x0
11:17:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:53: Card Command Classess CCC                     :0x5b5
11:17:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:53: DSR(driver stage register)  DSR_IMP           :0x0
11:17:53: Reserv2                                       :0x0
11:17:53: Device Size C_SIZE                            :0xedc8
11:17:53: Reserv3                                       :0x0
11:17:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:53: Reserv4                                       :0x0
11:17:53: Write Speed Factor R2W_FACTOR                 :0x2
11:17:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:53: FILE_FORMAT_GRP                               :0x0
11:17:53: COPY flag                                     :0x1
11:17:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:53: File_Format                                   :0x0
11:17:53: CRC                                           :0x0
11:17:53: ####CSD Registe Values####  

11:17:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:53: [GetSCRRegisterEntry] Passed
11:17:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:53: Data_Status_After Erases          : 0
11:17:53: CPRM Security Support             : No Security
11:17:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:53: Spec. Version                     : Version 3.0X
11:17:53: Extended Security Support         : Extended_Security_Not_Supported
11:17:53: Command Support                   : COMMAND_SUPPORT
11:17:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 763 ] 
11:17:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 764 ] 
11:17:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:53: [ SetBusWidth(0x4) , Command count = 765 ] 
11:17:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 766 ] 
11:17:53: Protected Area Size 0x28000
11:17:53: Bus Width           2
11:17:53: Secure Mode         0
11:17:53: Speed  Class        4
11:17:53: Perf Move           0
11:17:53: Au Size             9
11:17:53: Erase Size          15
11:17:53: Erase Timeout       1
11:17:53: Erase offset        1
11:17:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 767 ] 
11:17:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:53: Host Frequency set to 100000 KHz
11:17:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:53: ####CSD Registe 2.0 Values####
11:17:53: CSD_STRUCTURE                                 :0x1
11:17:53: Reserv1                                       :0x0
11:17:53: Time Access 1 TAAC                            :0xe
11:17:53: Time Access 2 NSAC*100                        :0x0
11:17:53: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:53: Card Command Classess CCC                     :0x5b5
11:17:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:53: DSR(driver stage register)  DSR_IMP           :0x0
11:17:53: Reserv2                                       :0x0
11:17:53: Device Size C_SIZE                            :0xedc8
11:17:53: Reserv3                                       :0x0
11:17:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:53: Reserv4                                       :0x0
11:17:53: Write Speed Factor R2W_FACTOR                 :0x2
11:17:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:53: FILE_FORMAT_GRP                               :0x0
11:17:53: COPY flag                                     :0x1
11:17:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:53: File_Format                                   :0x0
11:17:53: CRC                                           :0x0
11:17:53: ####CSD Registe Values####  

11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CAE70>, <py_sfcl.CommandDataDefinition object at 0x053E2420>) , Command count = 768 ] 
11:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A810>, <py_sfcl.CommandDataDefinition object at 0x0627A9F0>) , Command count = 769 ] 
11:17:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EFCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AA80>, <None>, <py_sfcl.Command23 object at 0x0627A3C0>) , Command count = 770 ] 
11:17:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:56: Host Frequency set to 25000 KHz
11:17:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A690>, 0x0, True) , Command count = 771 ] 
11:17:56: [GO18_globalSetVolt]### Host voltage value is set.
11:17:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFF60>, 0x0, False) , Command count = 772 ] 
11:17:56: [GO18_globalSetVolt]### Host voltage value is set.
11:17:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 773 ] 
11:17:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 774 ] 
11:17:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 775 ] 
11:17:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627AD50>) , Command count = 776 ] 
11:17:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A630>, <py_sfcl.CommandDataDefinition object at 0x0627AA50>) , Command count = 777 ] 
11:17:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:56: [ SetCardRCA(0x1, 0xD555) , Command count = 778 ] 
11:17:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:56: Host Frequency set to 25000 KHz
11:17:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:56: ####CSD Registe 2.0 Values####
11:17:56: CSD_STRUCTURE                                 :0x1
11:17:56: Reserv1                                       :0x0
11:17:56: Time Access 1 TAAC                            :0xe
11:17:56: Time Access 2 NSAC*100                        :0x0
11:17:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:17:56: Card Command Classess CCC                     :0x5b5
11:17:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:56: DSR(driver stage register)  DSR_IMP           :0x0
11:17:56: Reserv2                                       :0x0
11:17:56: Device Size C_SIZE                            :0xedc8
11:17:56: Reserv3                                       :0x0
11:17:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:56: Reserv4                                       :0x0
11:17:56: Write Speed Factor R2W_FACTOR                 :0x2
11:17:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:56: FILE_FORMAT_GRP                               :0x0
11:17:56: COPY flag                                     :0x1
11:17:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:56: File_Format                                   :0x0
11:17:56: CRC                                           :0x0
11:17:56: ####CSD Registe Values####  

11:17:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:17:56: [GetSCRRegisterEntry] Passed
11:17:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:17:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:17:56: Data_Status_After Erases          : 0
11:17:56: CPRM Security Support             : No Security
11:17:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:17:56: Spec. Version                     : Version 3.0X
11:17:56: Extended Security Support         : Extended_Security_Not_Supported
11:17:56: Command Support                   : COMMAND_SUPPORT
11:17:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 779 ] 
11:17:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 780 ] 
11:17:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:17:56: [ SetBusWidth(0x4) , Command count = 781 ] 
11:17:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:17:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 782 ] 
11:17:56: Protected Area Size 0x28000
11:17:56: Bus Width           2
11:17:56: Secure Mode         0
11:17:56: Speed  Class        4
11:17:56: Perf Move           0
11:17:56: Au Size             9
11:17:56: Erase Size          15
11:17:56: Erase Timeout       1
11:17:56: Erase offset        1
11:17:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:17:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:17:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:17:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 783 ] 
11:17:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:17:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:17:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:17:56: Host Frequency set to 100000 KHz
11:17:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:17:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:17:56: ####CSD Registe 2.0 Values####
11:17:56: CSD_STRUCTURE                                 :0x1
11:17:56: Reserv1                                       :0x0
11:17:56: Time Access 1 TAAC                            :0xe
11:17:56: Time Access 2 NSAC*100                        :0x0
11:17:56: Data Transfer Rate TRAN_SPEED                 :0xb
11:17:56: Card Command Classess CCC                     :0x5b5
11:17:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:17:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:17:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:17:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:17:56: DSR(driver stage register)  DSR_IMP           :0x0
11:17:56: Reserv2                                       :0x0
11:17:56: Device Size C_SIZE                            :0xedc8
11:17:56: Reserv3                                       :0x0
11:17:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:17:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:17:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:17:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:17:57: Reserv4                                       :0x0
11:17:57: Write Speed Factor R2W_FACTOR                 :0x2
11:17:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:17:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:17:57: FILE_FORMAT_GRP                               :0x0
11:17:57: COPY flag                                     :0x1
11:17:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:17:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:17:57: File_Format                                   :0x0
11:17:57: CRC                                           :0x0
11:17:57: ####CSD Registe Values####  

11:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 784 ] 
11:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 785 ] 
11:17:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:17:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:17:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:17:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:17:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x0627AC30>, <None>, <py_sfcl.Command23 object at 0x0627A300>) , Command count = 786 ] 
11:17:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:17:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:17:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:17:59: Host Frequency set to 25000 KHz
11:17:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:17:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:17:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:17:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF240>, 0x0, True) , Command count = 787 ] 
11:17:59: [GO18_globalSetVolt]### Host voltage value is set.
11:17:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:17:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F60>, 0x0, False) , Command count = 788 ] 
11:17:59: [GO18_globalSetVolt]### Host voltage value is set.
11:17:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 789 ] 
11:17:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:17:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 790 ] 
11:17:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:17:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:17:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:17:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:17:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:17:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 791 ] 
11:17:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:17:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 792 ] 
11:17:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x0627AE70>) , Command count = 793 ] 
11:17:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:17:59: [ SetCardRCA(0x1, 0xD555) , Command count = 794 ] 
11:17:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:17:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:00: Host Frequency set to 25000 KHz
11:18:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:00: ####CSD Registe 2.0 Values####
11:18:00: CSD_STRUCTURE                                 :0x1
11:18:00: Reserv1                                       :0x0
11:18:00: Time Access 1 TAAC                            :0xe
11:18:00: Time Access 2 NSAC*100                        :0x0
11:18:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:00: Card Command Classess CCC                     :0x5b5
11:18:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:00: DSR(driver stage register)  DSR_IMP           :0x0
11:18:00: Reserv2                                       :0x0
11:18:00: Device Size C_SIZE                            :0xedc8
11:18:00: Reserv3                                       :0x0
11:18:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:00: Reserv4                                       :0x0
11:18:00: Write Speed Factor R2W_FACTOR                 :0x2
11:18:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:00: FILE_FORMAT_GRP                               :0x0
11:18:00: COPY flag                                     :0x1
11:18:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:00: File_Format                                   :0x0
11:18:00: CRC                                           :0x0
11:18:00: ####CSD Registe Values####  

11:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:00: [GetSCRRegisterEntry] Passed
11:18:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:00: Data_Status_After Erases          : 0
11:18:00: CPRM Security Support             : No Security
11:18:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:00: Spec. Version                     : Version 3.0X
11:18:00: Extended Security Support         : Extended_Security_Not_Supported
11:18:00: Command Support                   : COMMAND_SUPPORT
11:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 795 ] 
11:18:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 796 ] 
11:18:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:00: [ SetBusWidth(0x4) , Command count = 797 ] 
11:18:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 798 ] 
11:18:00: Protected Area Size 0x28000
11:18:00: Bus Width           2
11:18:00: Secure Mode         0
11:18:00: Speed  Class        4
11:18:00: Perf Move           0
11:18:00: Au Size             9
11:18:00: Erase Size          15
11:18:00: Erase Timeout       1
11:18:00: Erase offset        1
11:18:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 799 ] 
11:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:00: Host Frequency set to 100000 KHz
11:18:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:00: ####CSD Registe 2.0 Values####
11:18:00: CSD_STRUCTURE                                 :0x1
11:18:00: Reserv1                                       :0x0
11:18:00: Time Access 1 TAAC                            :0xe
11:18:00: Time Access 2 NSAC*100                        :0x0
11:18:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:00: Card Command Classess CCC                     :0x5b5
11:18:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:00: DSR(driver stage register)  DSR_IMP           :0x0
11:18:00: Reserv2                                       :0x0
11:18:00: Device Size C_SIZE                            :0xedc8
11:18:00: Reserv3                                       :0x0
11:18:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:00: Reserv4                                       :0x0
11:18:00: Write Speed Factor R2W_FACTOR                 :0x2
11:18:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:00: FILE_FORMAT_GRP                               :0x0
11:18:00: COPY flag                                     :0x1
11:18:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:00: File_Format                                   :0x0
11:18:00: CRC                                           :0x0
11:18:00: ####CSD Registe Values####  

11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216750>, <py_sfcl.CommandDataDefinition object at 0x061AF7E0>) , Command count = 800 ] 
11:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x0627DCC0>) , Command count = 801 ] 
11:18:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062168D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DF60>, <py_sfcl.PySEnhancedCmdData object at 0x0627D030>, <None>, <py_sfcl.Command23 object at 0x0627ABD0>) , Command count = 802 ] 
11:18:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:03: Host Frequency set to 25000 KHz
11:18:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C60>, 0x0, True) , Command count = 803 ] 
11:18:03: [GO18_globalSetVolt]### Host voltage value is set.
11:18:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216C00>, 0x0, False) , Command count = 804 ] 
11:18:03: [GO18_globalSetVolt]### Host voltage value is set.
11:18:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 805 ] 
11:18:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 806 ] 
11:18:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 807 ] 
11:18:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x0627D450>) , Command count = 808 ] 
11:18:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 809 ] 
11:18:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:03: [ SetCardRCA(0x1, 0xD555) , Command count = 810 ] 
11:18:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:03: Host Frequency set to 25000 KHz
11:18:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:03: ####CSD Registe 2.0 Values####
11:18:03: CSD_STRUCTURE                                 :0x1
11:18:03: Reserv1                                       :0x0
11:18:03: Time Access 1 TAAC                            :0xe
11:18:03: Time Access 2 NSAC*100                        :0x0
11:18:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:03: Card Command Classess CCC                     :0x5b5
11:18:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:03: DSR(driver stage register)  DSR_IMP           :0x0
11:18:03: Reserv2                                       :0x0
11:18:03: Device Size C_SIZE                            :0xedc8
11:18:03: Reserv3                                       :0x0
11:18:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:03: Reserv4                                       :0x0
11:18:03: Write Speed Factor R2W_FACTOR                 :0x2
11:18:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:03: FILE_FORMAT_GRP                               :0x0
11:18:03: COPY flag                                     :0x1
11:18:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:03: File_Format                                   :0x0
11:18:03: CRC                                           :0x0
11:18:03: ####CSD Registe Values####  

11:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:03: [GetSCRRegisterEntry] Passed
11:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:03: Data_Status_After Erases          : 0
11:18:03: CPRM Security Support             : No Security
11:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:03: Spec. Version                     : Version 3.0X
11:18:03: Extended Security Support         : Extended_Security_Not_Supported
11:18:03: Command Support                   : COMMAND_SUPPORT
11:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216AB0>, <py_sfcl.CommandDataDefinition object at 0x06216810>) , Command count = 811 ] 
11:18:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216570>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 812 ] 
11:18:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:03: [ SetBusWidth(0x4) , Command count = 813 ] 
11:18:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062165D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 814 ] 
11:18:03: Protected Area Size 0x28000
11:18:03: Bus Width           2
11:18:03: Secure Mode         0
11:18:03: Speed  Class        4
11:18:03: Perf Move           0
11:18:03: Au Size             9
11:18:03: Erase Size          15
11:18:03: Erase Timeout       1
11:18:03: Erase offset        1
11:18:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 815 ] 
11:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:03: Host Frequency set to 100000 KHz
11:18:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:03: ####CSD Registe 2.0 Values####
11:18:03: CSD_STRUCTURE                                 :0x1
11:18:03: Reserv1                                       :0x0
11:18:03: Time Access 1 TAAC                            :0xe
11:18:03: Time Access 2 NSAC*100                        :0x0
11:18:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:03: Card Command Classess CCC                     :0x5b5
11:18:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:03: DSR(driver stage register)  DSR_IMP           :0x0
11:18:03: Reserv2                                       :0x0
11:18:03: Device Size C_SIZE                            :0xedc8
11:18:03: Reserv3                                       :0x0
11:18:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:04: Reserv4                                       :0x0
11:18:04: Write Speed Factor R2W_FACTOR                 :0x2
11:18:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:04: FILE_FORMAT_GRP                               :0x0
11:18:04: COPY flag                                     :0x1
11:18:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:04: File_Format                                   :0x0
11:18:04: CRC                                           :0x0
11:18:04: ####CSD Registe Values####  

11:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 816 ] 
11:18:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216B40>, <py_sfcl.CommandDataDefinition object at 0x0627D2D0>) , Command count = 817 ] 
11:18:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062684B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D6C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D3C0>, <None>, <py_sfcl.Command23 object at 0x0627D240>) , Command count = 818 ] 
11:18:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:06: Host Frequency set to 25000 KHz
11:18:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AFB10>, 0x0, True) , Command count = 819 ] 
11:18:06: [GO18_globalSetVolt]### Host voltage value is set.
11:18:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268810>, 0x0, False) , Command count = 820 ] 
11:18:06: [GO18_globalSetVolt]### Host voltage value is set.
11:18:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 821 ] 
11:18:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 822 ] 
11:18:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 823 ] 
11:18:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216FC0>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 824 ] 
11:18:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x06216A20>) , Command count = 825 ] 
11:18:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:06: [ SetCardRCA(0x1, 0xD555) , Command count = 826 ] 
11:18:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:06: Host Frequency set to 25000 KHz
11:18:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:06: ####CSD Registe 2.0 Values####
11:18:06: CSD_STRUCTURE                                 :0x1
11:18:06: Reserv1                                       :0x0
11:18:06: Time Access 1 TAAC                            :0xe
11:18:06: Time Access 2 NSAC*100                        :0x0
11:18:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:06: Card Command Classess CCC                     :0x5b5
11:18:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:06: DSR(driver stage register)  DSR_IMP           :0x0
11:18:06: Reserv2                                       :0x0
11:18:06: Device Size C_SIZE                            :0xedc8
11:18:06: Reserv3                                       :0x0
11:18:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:06: Reserv4                                       :0x0
11:18:06: Write Speed Factor R2W_FACTOR                 :0x2
11:18:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:06: FILE_FORMAT_GRP                               :0x0
11:18:06: COPY flag                                     :0x1
11:18:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:06: File_Format                                   :0x0
11:18:06: CRC                                           :0x0
11:18:06: ####CSD Registe Values####  

11:18:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:06: [GetSCRRegisterEntry] Passed
11:18:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:06: Data_Status_After Erases          : 0
11:18:06: CPRM Security Support             : No Security
11:18:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:06: Spec. Version                     : Version 3.0X
11:18:06: Extended Security Support         : Extended_Security_Not_Supported
11:18:06: Command Support                   : COMMAND_SUPPORT
11:18:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E70>, <py_sfcl.CommandDataDefinition object at 0x06268DE0>) , Command count = 827 ] 
11:18:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D2A0>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 828 ] 
11:18:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:06: [ SetBusWidth(0x4) , Command count = 829 ] 
11:18:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 830 ] 
11:18:06: Protected Area Size 0x28000
11:18:06: Bus Width           2
11:18:06: Secure Mode         0
11:18:06: Speed  Class        4
11:18:06: Perf Move           0
11:18:06: Au Size             9
11:18:06: Erase Size          15
11:18:06: Erase Timeout       1
11:18:06: Erase offset        1
11:18:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 831 ] 
11:18:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:07: Host Frequency set to 100000 KHz
11:18:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:07: ####CSD Registe 2.0 Values####
11:18:07: CSD_STRUCTURE                                 :0x1
11:18:07: Reserv1                                       :0x0
11:18:07: Time Access 1 TAAC                            :0xe
11:18:07: Time Access 2 NSAC*100                        :0x0
11:18:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:07: Card Command Classess CCC                     :0x5b5
11:18:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:07: DSR(driver stage register)  DSR_IMP           :0x0
11:18:07: Reserv2                                       :0x0
11:18:07: Device Size C_SIZE                            :0xedc8
11:18:07: Reserv3                                       :0x0
11:18:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:07: Reserv4                                       :0x0
11:18:07: Write Speed Factor R2W_FACTOR                 :0x2
11:18:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:07: FILE_FORMAT_GRP                               :0x0
11:18:07: COPY flag                                     :0x1
11:18:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:07: File_Format                                   :0x0
11:18:07: CRC                                           :0x0
11:18:07: ####CSD Registe Values####  

11:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF90>, <py_sfcl.CommandDataDefinition object at 0x06268C90>) , Command count = 832 ] 
11:18:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680C0>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 833 ] 
11:18:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268480>, <py_sfcl.PySEnhancedCmdData object at 0x06268540>, <None>, <py_sfcl.Command23 object at 0x0627D330>) , Command count = 834 ] 
11:18:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:09: Host Frequency set to 25000 KHz
11:18:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x062680F0>, 0x0, True) , Command count = 835 ] 
11:18:09: [GO18_globalSetVolt]### Host voltage value is set.
11:18:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, False) , Command count = 836 ] 
11:18:09: [GO18_globalSetVolt]### Host voltage value is set.
11:18:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 837 ] 
11:18:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 838 ] 
11:18:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 839 ] 
11:18:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x06268990>) , Command count = 840 ] 
11:18:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x06268EA0>) , Command count = 841 ] 
11:18:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:10: [ SetCardRCA(0x1, 0xD555) , Command count = 842 ] 
11:18:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:10: Host Frequency set to 25000 KHz
11:18:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:10: ####CSD Registe 2.0 Values####
11:18:10: CSD_STRUCTURE                                 :0x1
11:18:10: Reserv1                                       :0x0
11:18:10: Time Access 1 TAAC                            :0xe
11:18:10: Time Access 2 NSAC*100                        :0x0
11:18:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:10: Card Command Classess CCC                     :0x5b5
11:18:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:10: DSR(driver stage register)  DSR_IMP           :0x0
11:18:10: Reserv2                                       :0x0
11:18:10: Device Size C_SIZE                            :0xedc8
11:18:10: Reserv3                                       :0x0
11:18:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:10: Reserv4                                       :0x0
11:18:10: Write Speed Factor R2W_FACTOR                 :0x2
11:18:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:10: FILE_FORMAT_GRP                               :0x0
11:18:10: COPY flag                                     :0x1
11:18:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:10: File_Format                                   :0x0
11:18:10: CRC                                           :0x0
11:18:10: ####CSD Registe Values####  

11:18:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:10: [GetSCRRegisterEntry] Passed
11:18:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:10: Data_Status_After Erases          : 0
11:18:10: CPRM Security Support             : No Security
11:18:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:10: Spec. Version                     : Version 3.0X
11:18:10: Extended Security Support         : Extended_Security_Not_Supported
11:18:10: Command Support                   : COMMAND_SUPPORT
11:18:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x062690C0>) , Command count = 843 ] 
11:18:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 844 ] 
11:18:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:10: [ SetBusWidth(0x4) , Command count = 845 ] 
11:18:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 846 ] 
11:18:10: Protected Area Size 0x28000
11:18:10: Bus Width           2
11:18:10: Secure Mode         0
11:18:10: Speed  Class        4
11:18:10: Perf Move           0
11:18:10: Au Size             9
11:18:10: Erase Size          15
11:18:10: Erase Timeout       1
11:18:10: Erase offset        1
11:18:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 847 ] 
11:18:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:10: Host Frequency set to 100000 KHz
11:18:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:10: ####CSD Registe 2.0 Values####
11:18:10: CSD_STRUCTURE                                 :0x1
11:18:10: Reserv1                                       :0x0
11:18:10: Time Access 1 TAAC                            :0xe
11:18:10: Time Access 2 NSAC*100                        :0x0
11:18:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:10: Card Command Classess CCC                     :0x5b5
11:18:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:10: DSR(driver stage register)  DSR_IMP           :0x0
11:18:10: Reserv2                                       :0x0
11:18:10: Device Size C_SIZE                            :0xedc8
11:18:10: Reserv3                                       :0x0
11:18:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:10: Reserv4                                       :0x0
11:18:10: Write Speed Factor R2W_FACTOR                 :0x2
11:18:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:10: FILE_FORMAT_GRP                               :0x0
11:18:10: COPY flag                                     :0x1
11:18:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:10: File_Format                                   :0x0
11:18:10: CRC                                           :0x0
11:18:10: ####CSD Registe Values####  

11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 848 ] 
11:18:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x062687B0>) , Command count = 849 ] 
11:18:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C00>, <py_sfcl.PySEnhancedCmdData object at 0x062689F0>, <None>, <py_sfcl.Command23 object at 0x06268210>) , Command count = 850 ] 
11:18:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:13: Host Frequency set to 25000 KHz
11:18:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268F30>, 0x0, True) , Command count = 851 ] 
11:18:13: [GO18_globalSetVolt]### Host voltage value is set.
11:18:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269090>, 0x0, False) , Command count = 852 ] 
11:18:13: [GO18_globalSetVolt]### Host voltage value is set.
11:18:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 853 ] 
11:18:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 854 ] 
11:18:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 855 ] 
11:18:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268900>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 856 ] 
11:18:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x0627D5A0>) , Command count = 857 ] 
11:18:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:13: [ SetCardRCA(0x1, 0xD555) , Command count = 858 ] 
11:18:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:13: Host Frequency set to 25000 KHz
11:18:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:13: ####CSD Registe 2.0 Values####
11:18:13: CSD_STRUCTURE                                 :0x1
11:18:13: Reserv1                                       :0x0
11:18:13: Time Access 1 TAAC                            :0xe
11:18:13: Time Access 2 NSAC*100                        :0x0
11:18:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:13: Card Command Classess CCC                     :0x5b5
11:18:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:13: DSR(driver stage register)  DSR_IMP           :0x0
11:18:13: Reserv2                                       :0x0
11:18:13: Device Size C_SIZE                            :0xedc8
11:18:13: Reserv3                                       :0x0
11:18:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:13: Reserv4                                       :0x0
11:18:13: Write Speed Factor R2W_FACTOR                 :0x2
11:18:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:13: FILE_FORMAT_GRP                               :0x0
11:18:13: COPY flag                                     :0x1
11:18:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:13: File_Format                                   :0x0
11:18:13: CRC                                           :0x0
11:18:13: ####CSD Registe Values####  

11:18:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:13: [GetSCRRegisterEntry] Passed
11:18:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:13: Data_Status_After Erases          : 0
11:18:13: CPRM Security Support             : No Security
11:18:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:13: Spec. Version                     : Version 3.0X
11:18:13: Extended Security Support         : Extended_Security_Not_Supported
11:18:13: Command Support                   : COMMAND_SUPPORT
11:18:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 859 ] 
11:18:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 860 ] 
11:18:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:13: [ SetBusWidth(0x4) , Command count = 861 ] 
11:18:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 862 ] 
11:18:13: Protected Area Size 0x28000
11:18:13: Bus Width           2
11:18:13: Secure Mode         0
11:18:13: Speed  Class        4
11:18:13: Perf Move           0
11:18:13: Au Size             9
11:18:13: Erase Size          15
11:18:13: Erase Timeout       1
11:18:13: Erase offset        1
11:18:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 863 ] 
11:18:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:13: Host Frequency set to 100000 KHz
11:18:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:14: ####CSD Registe 2.0 Values####
11:18:14: CSD_STRUCTURE                                 :0x1
11:18:14: Reserv1                                       :0x0
11:18:14: Time Access 1 TAAC                            :0xe
11:18:14: Time Access 2 NSAC*100                        :0x0
11:18:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:14: Card Command Classess CCC                     :0x5b5
11:18:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:14: DSR(driver stage register)  DSR_IMP           :0x0
11:18:14: Reserv2                                       :0x0
11:18:14: Device Size C_SIZE                            :0xedc8
11:18:14: Reserv3                                       :0x0
11:18:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:14: Reserv4                                       :0x0
11:18:14: Write Speed Factor R2W_FACTOR                 :0x2
11:18:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:14: FILE_FORMAT_GRP                               :0x0
11:18:14: COPY flag                                     :0x1
11:18:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:14: File_Format                                   :0x0
11:18:14: CRC                                           :0x0
11:18:14: ####CSD Registe Values####  

11:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x06269870>) , Command count = 864 ] 
11:18:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268960>, <py_sfcl.CommandDataDefinition object at 0x06269AB0>) , Command count = 865 ] 
11:18:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062691B0>, <py_sfcl.PySEnhancedCmdData object at 0x06269060>, <None>, <py_sfcl.Command23 object at 0x06268510>) , Command count = 866 ] 
11:18:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:17: Host Frequency set to 25000 KHz
11:18:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269240>, 0x0, True) , Command count = 867 ] 
11:18:17: [GO18_globalSetVolt]### Host voltage value is set.
11:18:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268AB0>, 0x0, False) , Command count = 868 ] 
11:18:17: [GO18_globalSetVolt]### Host voltage value is set.
11:18:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 869 ] 
11:18:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 870 ] 
11:18:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 871 ] 
11:18:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268660>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 872 ] 
11:18:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268E10>, <py_sfcl.CommandDataDefinition object at 0x062696F0>) , Command count = 873 ] 
11:18:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:17: [ SetCardRCA(0x1, 0xD555) , Command count = 874 ] 
11:18:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:17: Host Frequency set to 25000 KHz
11:18:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:17: ####CSD Registe 2.0 Values####
11:18:17: CSD_STRUCTURE                                 :0x1
11:18:17: Reserv1                                       :0x0
11:18:17: Time Access 1 TAAC                            :0xe
11:18:17: Time Access 2 NSAC*100                        :0x0
11:18:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:17: Card Command Classess CCC                     :0x5b5
11:18:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:17: DSR(driver stage register)  DSR_IMP           :0x0
11:18:17: Reserv2                                       :0x0
11:18:17: Device Size C_SIZE                            :0xedc8
11:18:17: Reserv3                                       :0x0
11:18:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:17: Reserv4                                       :0x0
11:18:17: Write Speed Factor R2W_FACTOR                 :0x2
11:18:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:17: FILE_FORMAT_GRP                               :0x0
11:18:17: COPY flag                                     :0x1
11:18:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:17: File_Format                                   :0x0
11:18:17: CRC                                           :0x0
11:18:17: ####CSD Registe Values####  

11:18:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:17: [GetSCRRegisterEntry] Passed
11:18:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:17: Data_Status_After Erases          : 0
11:18:17: CPRM Security Support             : No Security
11:18:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:17: Spec. Version                     : Version 3.0X
11:18:17: Extended Security Support         : Extended_Security_Not_Supported
11:18:17: Command Support                   : COMMAND_SUPPORT
11:18:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269FC0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 875 ] 
11:18:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 876 ] 
11:18:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:17: [ SetBusWidth(0x4) , Command count = 877 ] 
11:18:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 878 ] 
11:18:17: Protected Area Size 0x28000
11:18:17: Bus Width           2
11:18:17: Secure Mode         0
11:18:17: Speed  Class        4
11:18:17: Perf Move           0
11:18:17: Au Size             9
11:18:17: Erase Size          15
11:18:17: Erase Timeout       1
11:18:17: Erase offset        1
11:18:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 879 ] 
11:18:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:17: Host Frequency set to 100000 KHz
11:18:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:17: ####CSD Registe 2.0 Values####
11:18:17: CSD_STRUCTURE                                 :0x1
11:18:17: Reserv1                                       :0x0
11:18:17: Time Access 1 TAAC                            :0xe
11:18:17: Time Access 2 NSAC*100                        :0x0
11:18:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:17: Card Command Classess CCC                     :0x5b5
11:18:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:18: DSR(driver stage register)  DSR_IMP           :0x0
11:18:18: Reserv2                                       :0x0
11:18:18: Device Size C_SIZE                            :0xedc8
11:18:18: Reserv3                                       :0x0
11:18:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:18: Reserv4                                       :0x0
11:18:18: Write Speed Factor R2W_FACTOR                 :0x2
11:18:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:18: FILE_FORMAT_GRP                               :0x0
11:18:18: COPY flag                                     :0x1
11:18:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:18: File_Format                                   :0x0
11:18:18: CRC                                           :0x0
11:18:18: ####CSD Registe Values####  

11:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 880 ] 
11:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 881 ] 
11:18:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269990>, <py_sfcl.PySEnhancedCmdData object at 0x06269AE0>, <None>, <py_sfcl.Command23 object at 0x06269030>) , Command count = 882 ] 
11:18:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:20: Host Frequency set to 25000 KHz
11:18:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C60>, 0x0, True) , Command count = 883 ] 
11:18:20: [GO18_globalSetVolt]### Host voltage value is set.
11:18:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269E70>, 0x0, False) , Command count = 884 ] 
11:18:20: [GO18_globalSetVolt]### Host voltage value is set.
11:18:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 885 ] 
11:18:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 886 ] 
11:18:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 887 ] 
11:18:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BD0>, <py_sfcl.CommandDataDefinition object at 0x0626D3F0>) , Command count = 888 ] 
11:18:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D930>, <py_sfcl.CommandDataDefinition object at 0x0627D9C0>) , Command count = 889 ] 
11:18:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:20: [ SetCardRCA(0x1, 0xD555) , Command count = 890 ] 
11:18:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:21: Host Frequency set to 25000 KHz
11:18:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:21: ####CSD Registe 2.0 Values####
11:18:21: CSD_STRUCTURE                                 :0x1
11:18:21: Reserv1                                       :0x0
11:18:21: Time Access 1 TAAC                            :0xe
11:18:21: Time Access 2 NSAC*100                        :0x0
11:18:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:21: Card Command Classess CCC                     :0x5b5
11:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:21: DSR(driver stage register)  DSR_IMP           :0x0
11:18:21: Reserv2                                       :0x0
11:18:21: Device Size C_SIZE                            :0xedc8
11:18:21: Reserv3                                       :0x0
11:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:21: Reserv4                                       :0x0
11:18:21: Write Speed Factor R2W_FACTOR                 :0x2
11:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:21: FILE_FORMAT_GRP                               :0x0
11:18:21: COPY flag                                     :0x1
11:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:21: File_Format                                   :0x0
11:18:21: CRC                                           :0x0
11:18:21: ####CSD Registe Values####  

11:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:21: [GetSCRRegisterEntry] Passed
11:18:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:21: Data_Status_After Erases          : 0
11:18:21: CPRM Security Support             : No Security
11:18:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:21: Spec. Version                     : Version 3.0X
11:18:21: Extended Security Support         : Extended_Security_Not_Supported
11:18:21: Command Support                   : COMMAND_SUPPORT
11:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 891 ] 
11:18:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 892 ] 
11:18:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:21: [ SetBusWidth(0x4) , Command count = 893 ] 
11:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062694B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 894 ] 
11:18:21: Protected Area Size 0x28000
11:18:21: Bus Width           2
11:18:21: Secure Mode         0
11:18:21: Speed  Class        4
11:18:21: Perf Move           0
11:18:21: Au Size             9
11:18:21: Erase Size          15
11:18:21: Erase Timeout       1
11:18:21: Erase offset        1
11:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 895 ] 
11:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:21: Host Frequency set to 100000 KHz
11:18:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:21: ####CSD Registe 2.0 Values####
11:18:21: CSD_STRUCTURE                                 :0x1
11:18:21: Reserv1                                       :0x0
11:18:21: Time Access 1 TAAC                            :0xe
11:18:21: Time Access 2 NSAC*100                        :0x0
11:18:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:21: Card Command Classess CCC                     :0x5b5
11:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:21: DSR(driver stage register)  DSR_IMP           :0x0
11:18:21: Reserv2                                       :0x0
11:18:21: Device Size C_SIZE                            :0xedc8
11:18:21: Reserv3                                       :0x0
11:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:21: Reserv4                                       :0x0
11:18:21: Write Speed Factor R2W_FACTOR                 :0x2
11:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:21: FILE_FORMAT_GRP                               :0x0
11:18:21: COPY flag                                     :0x1
11:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:21: File_Format                                   :0x0
11:18:21: CRC                                           :0x0
11:18:21: ####CSD Registe Values####  

11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626D120>) , Command count = 896 ] 
11:18:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269960>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 897 ] 
11:18:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D390>, <py_sfcl.PySEnhancedCmdData object at 0x0626D090>, <None>, <py_sfcl.Command23 object at 0x06269840>) , Command count = 898 ] 
11:18:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:24: Host Frequency set to 25000 KHz
11:18:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D150>, 0x0, True) , Command count = 899 ] 
11:18:24: [GO18_globalSetVolt]### Host voltage value is set.
11:18:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C90>, 0x0, False) , Command count = 900 ] 
11:18:24: [GO18_globalSetVolt]### Host voltage value is set.
11:18:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 901 ] 
11:18:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 902 ] 
11:18:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 903 ] 
11:18:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 904 ] 
11:18:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x0626D780>) , Command count = 905 ] 
11:18:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:24: [ SetCardRCA(0x1, 0xD555) , Command count = 906 ] 
11:18:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:24: Host Frequency set to 25000 KHz
11:18:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:24: ####CSD Registe 2.0 Values####
11:18:24: CSD_STRUCTURE                                 :0x1
11:18:24: Reserv1                                       :0x0
11:18:24: Time Access 1 TAAC                            :0xe
11:18:24: Time Access 2 NSAC*100                        :0x0
11:18:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:24: Card Command Classess CCC                     :0x5b5
11:18:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:24: DSR(driver stage register)  DSR_IMP           :0x0
11:18:24: Reserv2                                       :0x0
11:18:24: Device Size C_SIZE                            :0xedc8
11:18:24: Reserv3                                       :0x0
11:18:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:24: Reserv4                                       :0x0
11:18:24: Write Speed Factor R2W_FACTOR                 :0x2
11:18:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:24: FILE_FORMAT_GRP                               :0x0
11:18:24: COPY flag                                     :0x1
11:18:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:24: File_Format                                   :0x0
11:18:24: CRC                                           :0x0
11:18:24: ####CSD Registe Values####  

11:18:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:24: [GetSCRRegisterEntry] Passed
11:18:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:24: Data_Status_After Erases          : 0
11:18:24: CPRM Security Support             : No Security
11:18:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:24: Spec. Version                     : Version 3.0X
11:18:24: Extended Security Support         : Extended_Security_Not_Supported
11:18:24: Command Support                   : COMMAND_SUPPORT
11:18:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD80>, <py_sfcl.CommandDataDefinition object at 0x0626DEA0>) , Command count = 907 ] 
11:18:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD20>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 908 ] 
11:18:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:24: [ SetBusWidth(0x4) , Command count = 909 ] 
11:18:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 910 ] 
11:18:24: Protected Area Size 0x28000
11:18:24: Bus Width           2
11:18:24: Secure Mode         0
11:18:24: Speed  Class        4
11:18:24: Perf Move           0
11:18:24: Au Size             9
11:18:24: Erase Size          15
11:18:24: Erase Timeout       1
11:18:24: Erase offset        1
11:18:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 911 ] 
11:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:24: Host Frequency set to 100000 KHz
11:18:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:24: ####CSD Registe 2.0 Values####
11:18:24: CSD_STRUCTURE                                 :0x1
11:18:24: Reserv1                                       :0x0
11:18:24: Time Access 1 TAAC                            :0xe
11:18:24: Time Access 2 NSAC*100                        :0x0
11:18:24: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:24: Card Command Classess CCC                     :0x5b5
11:18:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:24: DSR(driver stage register)  DSR_IMP           :0x0
11:18:24: Reserv2                                       :0x0
11:18:24: Device Size C_SIZE                            :0xedc8
11:18:24: Reserv3                                       :0x0
11:18:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:25: Reserv4                                       :0x0
11:18:25: Write Speed Factor R2W_FACTOR                 :0x2
11:18:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:25: FILE_FORMAT_GRP                               :0x0
11:18:25: COPY flag                                     :0x1
11:18:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:25: File_Format                                   :0x0
11:18:25: CRC                                           :0x0
11:18:25: ####CSD Registe Values####  

11:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273150>, <py_sfcl.CommandDataDefinition object at 0x0626D690>) , Command count = 912 ] 
11:18:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DA20>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 913 ] 
11:18:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA50>, <py_sfcl.PySEnhancedCmdData object at 0x06280180>, <None>, <py_sfcl.Command23 object at 0x0626D7E0>) , Command count = 914 ] 
11:18:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:27: Host Frequency set to 25000 KHz
11:18:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:27: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D810>, 0x0, True) , Command count = 915 ] 
11:18:27: [GO18_globalSetVolt]### Host voltage value is set.
11:18:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DBA0>, 0x0, False) , Command count = 916 ] 
11:18:27: [GO18_globalSetVolt]### Host voltage value is set.
11:18:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 917 ] 
11:18:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 918 ] 
11:18:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 919 ] 
11:18:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 920 ] 
11:18:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x0627DAE0>) , Command count = 921 ] 
11:18:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:27: [ SetCardRCA(0x1, 0xD555) , Command count = 922 ] 
11:18:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:27: Host Frequency set to 25000 KHz
11:18:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:27: ####CSD Registe 2.0 Values####
11:18:27: CSD_STRUCTURE                                 :0x1
11:18:27: Reserv1                                       :0x0
11:18:27: Time Access 1 TAAC                            :0xe
11:18:27: Time Access 2 NSAC*100                        :0x0
11:18:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:27: Card Command Classess CCC                     :0x5b5
11:18:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:27: DSR(driver stage register)  DSR_IMP           :0x0
11:18:27: Reserv2                                       :0x0
11:18:27: Device Size C_SIZE                            :0xedc8
11:18:27: Reserv3                                       :0x0
11:18:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:27: Reserv4                                       :0x0
11:18:27: Write Speed Factor R2W_FACTOR                 :0x2
11:18:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:27: FILE_FORMAT_GRP                               :0x0
11:18:27: COPY flag                                     :0x1
11:18:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:27: File_Format                                   :0x0
11:18:27: CRC                                           :0x0
11:18:27: ####CSD Registe Values####  

11:18:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:27: [GetSCRRegisterEntry] Passed
11:18:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:27: Data_Status_After Erases          : 0
11:18:27: CPRM Security Support             : No Security
11:18:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:27: Spec. Version                     : Version 3.0X
11:18:27: Extended Security Support         : Extended_Security_Not_Supported
11:18:27: Command Support                   : COMMAND_SUPPORT
11:18:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273480>, <py_sfcl.CommandDataDefinition object at 0x062733C0>) , Command count = 923 ] 
11:18:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC00>, <py_sfcl.CommandDataDefinition object at 0x0626D9C0>) , Command count = 924 ] 
11:18:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:27: [ SetBusWidth(0x4) , Command count = 925 ] 
11:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 926 ] 
11:18:27: Protected Area Size 0x28000
11:18:27: Bus Width           2
11:18:27: Secure Mode         0
11:18:27: Speed  Class        4
11:18:27: Perf Move           0
11:18:27: Au Size             9
11:18:27: Erase Size          15
11:18:27: Erase Timeout       1
11:18:27: Erase offset        1
11:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 927 ] 
11:18:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:28: Host Frequency set to 100000 KHz
11:18:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:28: ####CSD Registe 2.0 Values####
11:18:28: CSD_STRUCTURE                                 :0x1
11:18:28: Reserv1                                       :0x0
11:18:28: Time Access 1 TAAC                            :0xe
11:18:28: Time Access 2 NSAC*100                        :0x0
11:18:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:28: Card Command Classess CCC                     :0x5b5
11:18:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:28: DSR(driver stage register)  DSR_IMP           :0x0
11:18:28: Reserv2                                       :0x0
11:18:28: Device Size C_SIZE                            :0xedc8
11:18:28: Reserv3                                       :0x0
11:18:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:28: Reserv4                                       :0x0
11:18:28: Write Speed Factor R2W_FACTOR                 :0x2
11:18:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:28: FILE_FORMAT_GRP                               :0x0
11:18:28: COPY flag                                     :0x1
11:18:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:28: File_Format                                   :0x0
11:18:28: CRC                                           :0x0
11:18:28: ####CSD Registe Values####  

11:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273810>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 928 ] 
11:18:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273120>, <py_sfcl.CommandDataDefinition object at 0x0626DA80>) , Command count = 929 ] 
11:18:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:28: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DFC0>, <py_sfcl.PySEnhancedCmdData object at 0x06280060>, <None>, <py_sfcl.Command23 object at 0x06280120>) , Command count = 930 ] 
11:18:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:28: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:30: Host Frequency set to 25000 KHz
11:18:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:30: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273570>, 0x0, True) , Command count = 931 ] 
11:18:30: [GO18_globalSetVolt]### Host voltage value is set.
11:18:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DED0>, 0x0, False) , Command count = 932 ] 
11:18:30: [GO18_globalSetVolt]### Host voltage value is set.
11:18:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 933 ] 
11:18:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 934 ] 
11:18:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 935 ] 
11:18:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062734B0>, <py_sfcl.CommandDataDefinition object at 0x062732A0>) , Command count = 936 ] 
11:18:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273240>, <py_sfcl.CommandDataDefinition object at 0x06273360>) , Command count = 937 ] 
11:18:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:31: [ SetCardRCA(0x1, 0xD555) , Command count = 938 ] 
11:18:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:31: Host Frequency set to 25000 KHz
11:18:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:31: ####CSD Registe 2.0 Values####
11:18:31: CSD_STRUCTURE                                 :0x1
11:18:31: Reserv1                                       :0x0
11:18:31: Time Access 1 TAAC                            :0xe
11:18:31: Time Access 2 NSAC*100                        :0x0
11:18:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:31: Card Command Classess CCC                     :0x5b5
11:18:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:31: DSR(driver stage register)  DSR_IMP           :0x0
11:18:31: Reserv2                                       :0x0
11:18:31: Device Size C_SIZE                            :0xedc8
11:18:31: Reserv3                                       :0x0
11:18:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:31: Reserv4                                       :0x0
11:18:31: Write Speed Factor R2W_FACTOR                 :0x2
11:18:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:31: FILE_FORMAT_GRP                               :0x0
11:18:31: COPY flag                                     :0x1
11:18:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:31: File_Format                                   :0x0
11:18:31: CRC                                           :0x0
11:18:31: ####CSD Registe Values####  

11:18:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:31: [GetSCRRegisterEntry] Passed
11:18:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:31: Data_Status_After Erases          : 0
11:18:31: CPRM Security Support             : No Security
11:18:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:31: Spec. Version                     : Version 3.0X
11:18:31: Extended Security Support         : Extended_Security_Not_Supported
11:18:31: Command Support                   : COMMAND_SUPPORT
11:18:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x06273B40>) , Command count = 939 ] 
11:18:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA50>, <py_sfcl.CommandDataDefinition object at 0x0627DA20>) , Command count = 940 ] 
11:18:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:31: [ SetBusWidth(0x4) , Command count = 941 ] 
11:18:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 942 ] 
11:18:31: Protected Area Size 0x28000
11:18:31: Bus Width           2
11:18:31: Secure Mode         0
11:18:31: Speed  Class        4
11:18:31: Perf Move           0
11:18:31: Au Size             9
11:18:31: Erase Size          15
11:18:31: Erase Timeout       1
11:18:31: Erase offset        1
11:18:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 943 ] 
11:18:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:31: Host Frequency set to 100000 KHz
11:18:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:31: ####CSD Registe 2.0 Values####
11:18:31: CSD_STRUCTURE                                 :0x1
11:18:31: Reserv1                                       :0x0
11:18:31: Time Access 1 TAAC                            :0xe
11:18:31: Time Access 2 NSAC*100                        :0x0
11:18:31: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:31: Card Command Classess CCC                     :0x5b5
11:18:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:31: DSR(driver stage register)  DSR_IMP           :0x0
11:18:31: Reserv2                                       :0x0
11:18:31: Device Size C_SIZE                            :0xedc8
11:18:31: Reserv3                                       :0x0
11:18:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:32: Reserv4                                       :0x0
11:18:32: Write Speed Factor R2W_FACTOR                 :0x2
11:18:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:32: FILE_FORMAT_GRP                               :0x0
11:18:32: COPY flag                                     :0x1
11:18:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:32: File_Format                                   :0x0
11:18:32: CRC                                           :0x0
11:18:32: ####CSD Registe Values####  

11:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x06273450>) , Command count = 944 ] 
11:18:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062737E0>, <py_sfcl.CommandDataDefinition object at 0x06273750>) , Command count = 945 ] 
11:18:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273720>, <py_sfcl.PySEnhancedCmdData object at 0x06273AE0>, <None>, <py_sfcl.Command23 object at 0x06273510>) , Command count = 946 ] 
11:18:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:34: Host Frequency set to 25000 KHz
11:18:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D900>, 0x0, True) , Command count = 947 ] 
11:18:34: [GO18_globalSetVolt]### Host voltage value is set.
11:18:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273960>, 0x0, False) , Command count = 948 ] 
11:18:34: [GO18_globalSetVolt]### Host voltage value is set.
11:18:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 949 ] 
11:18:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 950 ] 
11:18:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 951 ] 
11:18:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x06273330>) , Command count = 952 ] 
11:18:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC00>, <py_sfcl.CommandDataDefinition object at 0x06273540>) , Command count = 953 ] 
11:18:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:34: [ SetCardRCA(0x1, 0xD555) , Command count = 954 ] 
11:18:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:34: Host Frequency set to 25000 KHz
11:18:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:34: ####CSD Registe 2.0 Values####
11:18:34: CSD_STRUCTURE                                 :0x1
11:18:34: Reserv1                                       :0x0
11:18:34: Time Access 1 TAAC                            :0xe
11:18:34: Time Access 2 NSAC*100                        :0x0
11:18:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:34: Card Command Classess CCC                     :0x5b5
11:18:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:34: DSR(driver stage register)  DSR_IMP           :0x0
11:18:34: Reserv2                                       :0x0
11:18:34: Device Size C_SIZE                            :0xedc8
11:18:34: Reserv3                                       :0x0
11:18:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:34: Reserv4                                       :0x0
11:18:34: Write Speed Factor R2W_FACTOR                 :0x2
11:18:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:34: FILE_FORMAT_GRP                               :0x0
11:18:34: COPY flag                                     :0x1
11:18:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:34: File_Format                                   :0x0
11:18:34: CRC                                           :0x0
11:18:34: ####CSD Registe Values####  

11:18:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:34: [GetSCRRegisterEntry] Passed
11:18:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:34: Data_Status_After Erases          : 0
11:18:34: CPRM Security Support             : No Security
11:18:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:34: Spec. Version                     : Version 3.0X
11:18:34: Extended Security Support         : Extended_Security_Not_Supported
11:18:34: Command Support                   : COMMAND_SUPPORT
11:18:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06276180>) , Command count = 955 ] 
11:18:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062763C0>, <py_sfcl.CommandDataDefinition object at 0x06273900>) , Command count = 956 ] 
11:18:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:34: [ SetBusWidth(0x4) , Command count = 957 ] 
11:18:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 958 ] 
11:18:34: Protected Area Size 0x28000
11:18:34: Bus Width           2
11:18:35: Secure Mode         0
11:18:35: Speed  Class        4
11:18:35: Perf Move           0
11:18:35: Au Size             9
11:18:35: Erase Size          15
11:18:35: Erase Timeout       1
11:18:35: Erase offset        1
11:18:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 959 ] 
11:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:35: Host Frequency set to 100000 KHz
11:18:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:35: ####CSD Registe 2.0 Values####
11:18:35: CSD_STRUCTURE                                 :0x1
11:18:35: Reserv1                                       :0x0
11:18:35: Time Access 1 TAAC                            :0xe
11:18:35: Time Access 2 NSAC*100                        :0x0
11:18:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:35: Card Command Classess CCC                     :0x5b5
11:18:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:35: DSR(driver stage register)  DSR_IMP           :0x0
11:18:35: Reserv2                                       :0x0
11:18:35: Device Size C_SIZE                            :0xedc8
11:18:35: Reserv3                                       :0x0
11:18:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:35: Reserv4                                       :0x0
11:18:35: Write Speed Factor R2W_FACTOR                 :0x2
11:18:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:35: FILE_FORMAT_GRP                               :0x0
11:18:35: COPY flag                                     :0x1
11:18:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:35: File_Format                                   :0x0
11:18:35: CRC                                           :0x0
11:18:35: ####CSD Registe Values####  

11:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 960 ] 
11:18:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x06273600>) , Command count = 961 ] 
11:18:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062766F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273EA0>, <py_sfcl.PySEnhancedCmdData object at 0x06273B10>, <None>, <py_sfcl.Command23 object at 0x062730C0>) , Command count = 962 ] 
11:18:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:38: Host Frequency set to 25000 KHz
11:18:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x062762D0>, 0x0, True) , Command count = 963 ] 
11:18:38: [GO18_globalSetVolt]### Host voltage value is set.
11:18:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x062765A0>, 0x0, False) , Command count = 964 ] 
11:18:38: [GO18_globalSetVolt]### Host voltage value is set.
11:18:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 965 ] 
11:18:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 966 ] 
11:18:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 967 ] 
11:18:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 968 ] 
11:18:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276150>, <py_sfcl.CommandDataDefinition object at 0x06276300>) , Command count = 969 ] 
11:18:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:39: [ SetCardRCA(0x1, 0xD555) , Command count = 970 ] 
11:18:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:39: Host Frequency set to 25000 KHz
11:18:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:39: ####CSD Registe 2.0 Values####
11:18:39: CSD_STRUCTURE                                 :0x1
11:18:39: Reserv1                                       :0x0
11:18:39: Time Access 1 TAAC                            :0xe
11:18:39: Time Access 2 NSAC*100                        :0x0
11:18:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:39: Card Command Classess CCC                     :0x5b5
11:18:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:39: DSR(driver stage register)  DSR_IMP           :0x0
11:18:39: Reserv2                                       :0x0
11:18:39: Device Size C_SIZE                            :0xedc8
11:18:39: Reserv3                                       :0x0
11:18:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:39: Reserv4                                       :0x0
11:18:39: Write Speed Factor R2W_FACTOR                 :0x2
11:18:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:39: FILE_FORMAT_GRP                               :0x0
11:18:39: COPY flag                                     :0x1
11:18:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:39: File_Format                                   :0x0
11:18:39: CRC                                           :0x0
11:18:39: ####CSD Registe Values####  

11:18:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:39: [GetSCRRegisterEntry] Passed
11:18:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:39: Data_Status_After Erases          : 0
11:18:39: CPRM Security Support             : No Security
11:18:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:39: Spec. Version                     : Version 3.0X
11:18:39: Extended Security Support         : Extended_Security_Not_Supported
11:18:39: Command Support                   : COMMAND_SUPPORT
11:18:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276900>, <py_sfcl.CommandDataDefinition object at 0x06276A20>) , Command count = 971 ] 
11:18:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 972 ] 
11:18:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:39: [ SetBusWidth(0x4) , Command count = 973 ] 
11:18:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 974 ] 
11:18:39: Protected Area Size 0x28000
11:18:39: Bus Width           2
11:18:39: Secure Mode         0
11:18:39: Speed  Class        4
11:18:39: Perf Move           0
11:18:39: Au Size             9
11:18:39: Erase Size          15
11:18:39: Erase Timeout       1
11:18:39: Erase offset        1
11:18:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 975 ] 
11:18:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:39: Host Frequency set to 100000 KHz
11:18:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:39: ####CSD Registe 2.0 Values####
11:18:39: CSD_STRUCTURE                                 :0x1
11:18:39: Reserv1                                       :0x0
11:18:39: Time Access 1 TAAC                            :0xe
11:18:39: Time Access 2 NSAC*100                        :0x0
11:18:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:39: Card Command Classess CCC                     :0x5b5
11:18:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:39: DSR(driver stage register)  DSR_IMP           :0x0
11:18:39: Reserv2                                       :0x0
11:18:39: Device Size C_SIZE                            :0xedc8
11:18:39: Reserv3                                       :0x0
11:18:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:40: Reserv4                                       :0x0
11:18:40: Write Speed Factor R2W_FACTOR                 :0x2
11:18:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:40: FILE_FORMAT_GRP                               :0x0
11:18:40: COPY flag                                     :0x1
11:18:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:40: File_Format                                   :0x0
11:18:40: CRC                                           :0x0
11:18:40: ####CSD Registe Values####  

11:18:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276AE0>, <py_sfcl.CommandDataDefinition object at 0x06276B10>) , Command count = 976 ] 
11:18:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 977 ] 
11:18:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DC30>, <py_sfcl.PySEnhancedCmdData object at 0x06273E40>, <None>, <py_sfcl.Command23 object at 0x06273E10>) , Command count = 978 ] 
11:18:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:43: Host Frequency set to 25000 KHz
11:18:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276390>, 0x0, True) , Command count = 979 ] 
11:18:43: [GO18_globalSetVolt]### Host voltage value is set.
11:18:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276720>, 0x0, False) , Command count = 980 ] 
11:18:43: [GO18_globalSetVolt]### Host voltage value is set.
11:18:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 981 ] 
11:18:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 982 ] 
11:18:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 983 ] 
11:18:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA80>, <py_sfcl.CommandDataDefinition object at 0x06276F90>) , Command count = 984 ] 
11:18:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB40>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 985 ] 
11:18:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:43: [ SetCardRCA(0x1, 0xD555) , Command count = 986 ] 
11:18:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:43: Host Frequency set to 25000 KHz
11:18:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:43: ####CSD Registe 2.0 Values####
11:18:43: CSD_STRUCTURE                                 :0x1
11:18:43: Reserv1                                       :0x0
11:18:43: Time Access 1 TAAC                            :0xe
11:18:43: Time Access 2 NSAC*100                        :0x0
11:18:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:43: Card Command Classess CCC                     :0x5b5
11:18:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:43: DSR(driver stage register)  DSR_IMP           :0x0
11:18:43: Reserv2                                       :0x0
11:18:43: Device Size C_SIZE                            :0xedc8
11:18:43: Reserv3                                       :0x0
11:18:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:43: Reserv4                                       :0x0
11:18:43: Write Speed Factor R2W_FACTOR                 :0x2
11:18:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:43: FILE_FORMAT_GRP                               :0x0
11:18:43: COPY flag                                     :0x1
11:18:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:43: File_Format                                   :0x0
11:18:43: CRC                                           :0x0
11:18:43: ####CSD Registe Values####  

11:18:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:43: [GetSCRRegisterEntry] Passed
11:18:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:43: Data_Status_After Erases          : 0
11:18:43: CPRM Security Support             : No Security
11:18:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:43: Spec. Version                     : Version 3.0X
11:18:43: Extended Security Support         : Extended_Security_Not_Supported
11:18:43: Command Support                   : COMMAND_SUPPORT
11:18:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276F00>) , Command count = 987 ] 
11:18:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A180>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 988 ] 
11:18:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:43: [ SetBusWidth(0x4) , Command count = 989 ] 
11:18:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 990 ] 
11:18:43: Protected Area Size 0x28000
11:18:43: Bus Width           2
11:18:43: Secure Mode         0
11:18:43: Speed  Class        4
11:18:43: Perf Move           0
11:18:43: Au Size             9
11:18:43: Erase Size          15
11:18:43: Erase Timeout       1
11:18:43: Erase offset        1
11:18:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 991 ] 
11:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:44: Host Frequency set to 100000 KHz
11:18:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:44: ####CSD Registe 2.0 Values####
11:18:44: CSD_STRUCTURE                                 :0x1
11:18:44: Reserv1                                       :0x0
11:18:44: Time Access 1 TAAC                            :0xe
11:18:44: Time Access 2 NSAC*100                        :0x0
11:18:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:44: Card Command Classess CCC                     :0x5b5
11:18:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:44: DSR(driver stage register)  DSR_IMP           :0x0
11:18:44: Reserv2                                       :0x0
11:18:44: Device Size C_SIZE                            :0xedc8
11:18:44: Reserv3                                       :0x0
11:18:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:44: Reserv4                                       :0x0
11:18:44: Write Speed Factor R2W_FACTOR                 :0x2
11:18:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:44: FILE_FORMAT_GRP                               :0x0
11:18:44: COPY flag                                     :0x1
11:18:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:44: File_Format                                   :0x0
11:18:44: CRC                                           :0x0
11:18:44: ####CSD Registe Values####  

11:18:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A1E0>, <py_sfcl.CommandDataDefinition object at 0x06276090>) , Command count = 992 ] 
11:18:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C60>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 993 ] 
11:18:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276990>, <py_sfcl.PySEnhancedCmdData object at 0x062761B0>, <None>, <py_sfcl.Command23 object at 0x062733F0>) , Command count = 994 ] 
11:18:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:47: Host Frequency set to 25000 KHz
11:18:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276A50>, 0x0, True) , Command count = 995 ] 
11:18:47: [GO18_globalSetVolt]### Host voltage value is set.
11:18:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276DE0>, 0x0, False) , Command count = 996 ] 
11:18:47: [GO18_globalSetVolt]### Host voltage value is set.
11:18:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 997 ] 
11:18:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 998 ] 
11:18:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 999 ] 
11:18:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276EA0>, <py_sfcl.CommandDataDefinition object at 0x0627A3F0>) , Command count = 1000 ] 
11:18:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBD0>, <py_sfcl.CommandDataDefinition object at 0x0627DDB0>) , Command count = 1001 ] 
11:18:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1002 ] 
11:18:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:48: Host Frequency set to 25000 KHz
11:18:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:48: ####CSD Registe 2.0 Values####
11:18:48: CSD_STRUCTURE                                 :0x1
11:18:48: Reserv1                                       :0x0
11:18:48: Time Access 1 TAAC                            :0xe
11:18:48: Time Access 2 NSAC*100                        :0x0
11:18:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:48: Card Command Classess CCC                     :0x5b5
11:18:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:48: DSR(driver stage register)  DSR_IMP           :0x0
11:18:48: Reserv2                                       :0x0
11:18:48: Device Size C_SIZE                            :0xedc8
11:18:48: Reserv3                                       :0x0
11:18:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:48: Reserv4                                       :0x0
11:18:48: Write Speed Factor R2W_FACTOR                 :0x2
11:18:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:48: FILE_FORMAT_GRP                               :0x0
11:18:48: COPY flag                                     :0x1
11:18:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:48: File_Format                                   :0x0
11:18:48: CRC                                           :0x0
11:18:48: ####CSD Registe Values####  

11:18:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:48: [GetSCRRegisterEntry] Passed
11:18:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:48: Data_Status_After Erases          : 0
11:18:48: CPRM Security Support             : No Security
11:18:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:48: Spec. Version                     : Version 3.0X
11:18:48: Extended Security Support         : Extended_Security_Not_Supported
11:18:48: Command Support                   : COMMAND_SUPPORT
11:18:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767B0>, <py_sfcl.CommandDataDefinition object at 0x0627A6C0>) , Command count = 1003 ] 
11:18:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A840>, <py_sfcl.CommandDataDefinition object at 0x0627A450>) , Command count = 1004 ] 
11:18:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:48: [ SetBusWidth(0x4) , Command count = 1005 ] 
11:18:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1006 ] 
11:18:48: Protected Area Size 0x28000
11:18:48: Bus Width           2
11:18:48: Secure Mode         0
11:18:48: Speed  Class        4
11:18:48: Perf Move           0
11:18:48: Au Size             9
11:18:48: Erase Size          15
11:18:48: Erase Timeout       1
11:18:48: Erase offset        1
11:18:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1007 ] 
11:18:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:48: Host Frequency set to 100000 KHz
11:18:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:48: ####CSD Registe 2.0 Values####
11:18:48: CSD_STRUCTURE                                 :0x1
11:18:48: Reserv1                                       :0x0
11:18:48: Time Access 1 TAAC                            :0xe
11:18:48: Time Access 2 NSAC*100                        :0x0
11:18:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:48: Card Command Classess CCC                     :0x5b5
11:18:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:48: DSR(driver stage register)  DSR_IMP           :0x0
11:18:48: Reserv2                                       :0x0
11:18:48: Device Size C_SIZE                            :0xedc8
11:18:48: Reserv3                                       :0x0
11:18:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:49: Reserv4                                       :0x0
11:18:49: Write Speed Factor R2W_FACTOR                 :0x2
11:18:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:49: FILE_FORMAT_GRP                               :0x0
11:18:49: COPY flag                                     :0x1
11:18:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:49: File_Format                                   :0x0
11:18:49: CRC                                           :0x0
11:18:49: ####CSD Registe Values####  

11:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x0627A120>) , Command count = 1008 ] 
11:18:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x0627A240>) , Command count = 1009 ] 
11:18:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A420>, <py_sfcl.PySEnhancedCmdData object at 0x0627A660>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 1010 ] 
11:18:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:52: Host Frequency set to 25000 KHz
11:18:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:52: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A150>, 0x0, True) , Command count = 1011 ] 
11:18:52: [GO18_globalSetVolt]### Host voltage value is set.
11:18:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E70>, 0x0, False) , Command count = 1012 ] 
11:18:52: [GO18_globalSetVolt]### Host voltage value is set.
11:18:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1013 ] 
11:18:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1014 ] 
11:18:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1015 ] 
11:18:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 1016 ] 
11:18:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 1017 ] 
11:18:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1018 ] 
11:18:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:52: Host Frequency set to 25000 KHz
11:18:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:52: ####CSD Registe 2.0 Values####
11:18:52: CSD_STRUCTURE                                 :0x1
11:18:52: Reserv1                                       :0x0
11:18:52: Time Access 1 TAAC                            :0xe
11:18:52: Time Access 2 NSAC*100                        :0x0
11:18:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:52: Card Command Classess CCC                     :0x5b5
11:18:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:52: DSR(driver stage register)  DSR_IMP           :0x0
11:18:52: Reserv2                                       :0x0
11:18:52: Device Size C_SIZE                            :0xedc8
11:18:52: Reserv3                                       :0x0
11:18:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:52: Reserv4                                       :0x0
11:18:52: Write Speed Factor R2W_FACTOR                 :0x2
11:18:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:52: FILE_FORMAT_GRP                               :0x0
11:18:52: COPY flag                                     :0x1
11:18:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:52: File_Format                                   :0x0
11:18:52: CRC                                           :0x0
11:18:52: ####CSD Registe Values####  

11:18:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:52: [GetSCRRegisterEntry] Passed
11:18:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:52: Data_Status_After Erases          : 0
11:18:52: CPRM Security Support             : No Security
11:18:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:52: Spec. Version                     : Version 3.0X
11:18:52: Extended Security Support         : Extended_Security_Not_Supported
11:18:52: Command Support                   : COMMAND_SUPPORT
11:18:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 1019 ] 
11:18:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CAE70>, <py_sfcl.CommandDataDefinition object at 0x053E2420>) , Command count = 1020 ] 
11:18:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:52: [ SetBusWidth(0x4) , Command count = 1021 ] 
11:18:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1022 ] 
11:18:52: Protected Area Size 0x28000
11:18:52: Bus Width           2
11:18:52: Secure Mode         0
11:18:52: Speed  Class        4
11:18:52: Perf Move           0
11:18:52: Au Size             9
11:18:52: Erase Size          15
11:18:52: Erase Timeout       1
11:18:52: Erase offset        1
11:18:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1023 ] 
11:18:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:52: Host Frequency set to 100000 KHz
11:18:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:53: ####CSD Registe 2.0 Values####
11:18:53: CSD_STRUCTURE                                 :0x1
11:18:53: Reserv1                                       :0x0
11:18:53: Time Access 1 TAAC                            :0xe
11:18:53: Time Access 2 NSAC*100                        :0x0
11:18:53: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:53: Card Command Classess CCC                     :0x5b5
11:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:53: DSR(driver stage register)  DSR_IMP           :0x0
11:18:53: Reserv2                                       :0x0
11:18:53: Device Size C_SIZE                            :0xedc8
11:18:53: Reserv3                                       :0x0
11:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:53: Reserv4                                       :0x0
11:18:53: Write Speed Factor R2W_FACTOR                 :0x2
11:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:53: FILE_FORMAT_GRP                               :0x0
11:18:53: COPY flag                                     :0x1
11:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:53: File_Format                                   :0x0
11:18:53: CRC                                           :0x0
11:18:53: ####CSD Registe Values####  

11:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE40>, <py_sfcl.CommandDataDefinition object at 0x0627A690>) , Command count = 1024 ] 
11:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A9C0>, <py_sfcl.CommandDataDefinition object at 0x0627A030>) , Command count = 1025 ] 
11:18:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627ADE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A8A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB40>, <None>, <py_sfcl.Command23 object at 0x0627A2A0>) , Command count = 1026 ] 
11:18:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:18:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:56: Host Frequency set to 25000 KHz
11:18:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:18:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:18:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A810>, 0x0, True) , Command count = 1027 ] 
11:18:56: [GO18_globalSetVolt]### Host voltage value is set.
11:18:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:18:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EDED0>, 0x0, False) , Command count = 1028 ] 
11:18:56: [GO18_globalSetVolt]### Host voltage value is set.
11:18:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1029 ] 
11:18:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:18:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1030 ] 
11:18:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:18:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:18:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:18:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:18:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:18:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1031 ] 
11:18:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:18:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x0627A570>) , Command count = 1032 ] 
11:18:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DCF0>, <py_sfcl.CommandDataDefinition object at 0x0627DD80>) , Command count = 1033 ] 
11:18:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:18:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1034 ] 
11:18:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:18:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:18:56: Host Frequency set to 25000 KHz
11:18:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:18:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:56: ####CSD Registe 2.0 Values####
11:18:56: CSD_STRUCTURE                                 :0x1
11:18:56: Reserv1                                       :0x0
11:18:56: Time Access 1 TAAC                            :0xe
11:18:56: Time Access 2 NSAC*100                        :0x0
11:18:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:18:56: Card Command Classess CCC                     :0x5b5
11:18:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:56: DSR(driver stage register)  DSR_IMP           :0x0
11:18:56: Reserv2                                       :0x0
11:18:56: Device Size C_SIZE                            :0xedc8
11:18:56: Reserv3                                       :0x0
11:18:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:56: Reserv4                                       :0x0
11:18:56: Write Speed Factor R2W_FACTOR                 :0x2
11:18:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:56: FILE_FORMAT_GRP                               :0x0
11:18:56: COPY flag                                     :0x1
11:18:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:56: File_Format                                   :0x0
11:18:56: CRC                                           :0x0
11:18:56: ####CSD Registe Values####  

11:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:18:56: [GetSCRRegisterEntry] Passed
11:18:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:18:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:18:56: Data_Status_After Erases          : 0
11:18:56: CPRM Security Support             : No Security
11:18:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:18:56: Spec. Version                     : Version 3.0X
11:18:56: Extended Security Support         : Extended_Security_Not_Supported
11:18:56: Command Support                   : COMMAND_SUPPORT
11:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 1035 ] 
11:18:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 1036 ] 
11:18:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:18:56: [ SetBusWidth(0x4) , Command count = 1037 ] 
11:18:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:18:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1038 ] 
11:18:56: Protected Area Size 0x28000
11:18:56: Bus Width           2
11:18:57: Secure Mode         0
11:18:57: Speed  Class        4
11:18:57: Perf Move           0
11:18:57: Au Size             9
11:18:57: Erase Size          15
11:18:57: Erase Timeout       1
11:18:57: Erase offset        1
11:18:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:18:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:18:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:18:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1039 ] 
11:18:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:18:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:18:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:18:57: Host Frequency set to 100000 KHz
11:18:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:18:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:18:57: ####CSD Registe 2.0 Values####
11:18:57: CSD_STRUCTURE                                 :0x1
11:18:57: Reserv1                                       :0x0
11:18:57: Time Access 1 TAAC                            :0xe
11:18:57: Time Access 2 NSAC*100                        :0x0
11:18:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:18:57: Card Command Classess CCC                     :0x5b5
11:18:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:18:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:18:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:18:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:18:57: DSR(driver stage register)  DSR_IMP           :0x0
11:18:57: Reserv2                                       :0x0
11:18:57: Device Size C_SIZE                            :0xedc8
11:18:57: Reserv3                                       :0x0
11:18:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:18:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:18:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:18:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:18:57: Reserv4                                       :0x0
11:18:57: Write Speed Factor R2W_FACTOR                 :0x2
11:18:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:18:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:18:57: FILE_FORMAT_GRP                               :0x0
11:18:57: COPY flag                                     :0x1
11:18:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:18:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:18:57: File_Format                                   :0x0
11:18:57: CRC                                           :0x0
11:18:57: ####CSD Registe Values####  

11:18:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 1040 ] 
11:18:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 1041 ] 
11:18:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:18:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:18:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:18:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:18:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A990>, <py_sfcl.PySEnhancedCmdData object at 0x0627AC60>, <None>, <py_sfcl.Command23 object at 0x0627A750>) , Command count = 1042 ] 
11:18:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:18:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:00: Host Frequency set to 25000 KHz
11:19:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF270>, 0x0, True) , Command count = 1043 ] 
11:19:00: [GO18_globalSetVolt]### Host voltage value is set.
11:19:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x054019F0>, 0x0, False) , Command count = 1044 ] 
11:19:00: [GO18_globalSetVolt]### Host voltage value is set.
11:19:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1045 ] 
11:19:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1046 ] 
11:19:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1047 ] 
11:19:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x0627D300>) , Command count = 1048 ] 
11:19:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627D1B0>) , Command count = 1049 ] 
11:19:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1050 ] 
11:19:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:01: Host Frequency set to 25000 KHz
11:19:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:01: ####CSD Registe 2.0 Values####
11:19:01: CSD_STRUCTURE                                 :0x1
11:19:01: Reserv1                                       :0x0
11:19:01: Time Access 1 TAAC                            :0xe
11:19:01: Time Access 2 NSAC*100                        :0x0
11:19:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:01: Card Command Classess CCC                     :0x5b5
11:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:01: DSR(driver stage register)  DSR_IMP           :0x0
11:19:01: Reserv2                                       :0x0
11:19:01: Device Size C_SIZE                            :0xedc8
11:19:01: Reserv3                                       :0x0
11:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:01: Reserv4                                       :0x0
11:19:01: Write Speed Factor R2W_FACTOR                 :0x2
11:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:01: FILE_FORMAT_GRP                               :0x0
11:19:01: COPY flag                                     :0x1
11:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:01: File_Format                                   :0x0
11:19:01: CRC                                           :0x0
11:19:01: ####CSD Registe Values####  

11:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:01: [GetSCRRegisterEntry] Passed
11:19:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:01: Data_Status_After Erases          : 0
11:19:01: CPRM Security Support             : No Security
11:19:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:01: Spec. Version                     : Version 3.0X
11:19:01: Extended Security Support         : Extended_Security_Not_Supported
11:19:01: Command Support                   : COMMAND_SUPPORT
11:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627DC30>) , Command count = 1051 ] 
11:19:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216750>, <py_sfcl.CommandDataDefinition object at 0x061AF7E0>) , Command count = 1052 ] 
11:19:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:01: [ SetBusWidth(0x4) , Command count = 1053 ] 
11:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1054 ] 
11:19:01: Protected Area Size 0x28000
11:19:01: Bus Width           2
11:19:01: Secure Mode         0
11:19:01: Speed  Class        4
11:19:01: Perf Move           0
11:19:01: Au Size             9
11:19:01: Erase Size          15
11:19:01: Erase Timeout       1
11:19:01: Erase offset        1
11:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1055 ] 
11:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:01: Host Frequency set to 100000 KHz
11:19:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:01: ####CSD Registe 2.0 Values####
11:19:01: CSD_STRUCTURE                                 :0x1
11:19:01: Reserv1                                       :0x0
11:19:01: Time Access 1 TAAC                            :0xe
11:19:01: Time Access 2 NSAC*100                        :0x0
11:19:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:01: Card Command Classess CCC                     :0x5b5
11:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:01: DSR(driver stage register)  DSR_IMP           :0x0
11:19:01: Reserv2                                       :0x0
11:19:01: Device Size C_SIZE                            :0xedc8
11:19:01: Reserv3                                       :0x0
11:19:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:02: Reserv4                                       :0x0
11:19:02: Write Speed Factor R2W_FACTOR                 :0x2
11:19:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:02: FILE_FORMAT_GRP                               :0x0
11:19:02: COPY flag                                     :0x1
11:19:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:02: File_Format                                   :0x0
11:19:02: CRC                                           :0x0
11:19:02: ####CSD Registe Values####  

11:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x0627ACF0>) , Command count = 1056 ] 
11:19:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0626D930>) , Command count = 1057 ] 
11:19:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB10>, <None>, <py_sfcl.Command23 object at 0x0627A630>) , Command count = 1058 ] 
11:19:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:03: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:05: Host Frequency set to 25000 KHz
11:19:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401DE0>, 0x0, True) , Command count = 1059 ] 
11:19:05: [GO18_globalSetVolt]### Host voltage value is set.
11:19:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF030>, 0x0, False) , Command count = 1060 ] 
11:19:05: [GO18_globalSetVolt]### Host voltage value is set.
11:19:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1061 ] 
11:19:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1062 ] 
11:19:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1063 ] 
11:19:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216480>, <py_sfcl.CommandDataDefinition object at 0x06216810>) , Command count = 1064 ] 
11:19:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x0627D4E0>) , Command count = 1065 ] 
11:19:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1066 ] 
11:19:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:05: Host Frequency set to 25000 KHz
11:19:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:05: ####CSD Registe 2.0 Values####
11:19:05: CSD_STRUCTURE                                 :0x1
11:19:05: Reserv1                                       :0x0
11:19:05: Time Access 1 TAAC                            :0xe
11:19:05: Time Access 2 NSAC*100                        :0x0
11:19:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:05: Card Command Classess CCC                     :0x5b5
11:19:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:05: DSR(driver stage register)  DSR_IMP           :0x0
11:19:05: Reserv2                                       :0x0
11:19:05: Device Size C_SIZE                            :0xedc8
11:19:05: Reserv3                                       :0x0
11:19:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:05: Reserv4                                       :0x0
11:19:05: Write Speed Factor R2W_FACTOR                 :0x2
11:19:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:05: FILE_FORMAT_GRP                               :0x0
11:19:05: COPY flag                                     :0x1
11:19:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:05: File_Format                                   :0x0
11:19:05: CRC                                           :0x0
11:19:05: ####CSD Registe Values####  

11:19:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:05: [GetSCRRegisterEntry] Passed
11:19:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:05: Data_Status_After Erases          : 0
11:19:05: CPRM Security Support             : No Security
11:19:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:05: Spec. Version                     : Version 3.0X
11:19:05: Extended Security Support         : Extended_Security_Not_Supported
11:19:05: Command Support                   : COMMAND_SUPPORT
11:19:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216570>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 1067 ] 
11:19:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 1068 ] 
11:19:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:05: [ SetBusWidth(0x4) , Command count = 1069 ] 
11:19:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062681B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1070 ] 
11:19:05: Protected Area Size 0x28000
11:19:05: Bus Width           2
11:19:05: Secure Mode         0
11:19:05: Speed  Class        4
11:19:05: Perf Move           0
11:19:05: Au Size             9
11:19:05: Erase Size          15
11:19:05: Erase Timeout       1
11:19:05: Erase offset        1
11:19:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1071 ] 
11:19:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:06: Host Frequency set to 100000 KHz
11:19:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:06: ####CSD Registe 2.0 Values####
11:19:06: CSD_STRUCTURE                                 :0x1
11:19:06: Reserv1                                       :0x0
11:19:06: Time Access 1 TAAC                            :0xe
11:19:06: Time Access 2 NSAC*100                        :0x0
11:19:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:06: Card Command Classess CCC                     :0x5b5
11:19:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:06: DSR(driver stage register)  DSR_IMP           :0x0
11:19:06: Reserv2                                       :0x0
11:19:06: Device Size C_SIZE                            :0xedc8
11:19:06: Reserv3                                       :0x0
11:19:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:06: Reserv4                                       :0x0
11:19:06: Write Speed Factor R2W_FACTOR                 :0x2
11:19:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:06: FILE_FORMAT_GRP                               :0x0
11:19:06: COPY flag                                     :0x1
11:19:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:06: File_Format                                   :0x0
11:19:06: CRC                                           :0x0
11:19:06: ####CSD Registe Values####  

11:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216600>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 1072 ] 
11:19:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F90>, <py_sfcl.CommandDataDefinition object at 0x0627D030>) , Command count = 1073 ] 
11:19:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DF00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D720>, <None>, <py_sfcl.Command23 object at 0x0627AC30>) , Command count = 1074 ] 
11:19:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:09: Host Frequency set to 25000 KHz
11:19:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 1075 ] 
11:19:09: [GO18_globalSetVolt]### Host voltage value is set.
11:19:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216FC0>, 0x0, False) , Command count = 1076 ] 
11:19:09: [GO18_globalSetVolt]### Host voltage value is set.
11:19:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1077 ] 
11:19:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1078 ] 
11:19:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1079 ] 
11:19:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x06216A20>) , Command count = 1080 ] 
11:19:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x0627D060>) , Command count = 1081 ] 
11:19:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1082 ] 
11:19:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:10: Host Frequency set to 25000 KHz
11:19:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:10: ####CSD Registe 2.0 Values####
11:19:10: CSD_STRUCTURE                                 :0x1
11:19:10: Reserv1                                       :0x0
11:19:10: Time Access 1 TAAC                            :0xe
11:19:10: Time Access 2 NSAC*100                        :0x0
11:19:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:10: Card Command Classess CCC                     :0x5b5
11:19:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:10: DSR(driver stage register)  DSR_IMP           :0x0
11:19:10: Reserv2                                       :0x0
11:19:10: Device Size C_SIZE                            :0xedc8
11:19:10: Reserv3                                       :0x0
11:19:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:10: Reserv4                                       :0x0
11:19:10: Write Speed Factor R2W_FACTOR                 :0x2
11:19:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:10: FILE_FORMAT_GRP                               :0x0
11:19:10: COPY flag                                     :0x1
11:19:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:10: File_Format                                   :0x0
11:19:10: CRC                                           :0x0
11:19:10: ####CSD Registe Values####  

11:19:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:10: [GetSCRRegisterEntry] Passed
11:19:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:10: Data_Status_After Erases          : 0
11:19:10: CPRM Security Support             : No Security
11:19:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:10: Spec. Version                     : Version 3.0X
11:19:10: Extended Security Support         : Extended_Security_Not_Supported
11:19:10: Command Support                   : COMMAND_SUPPORT
11:19:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D2A0>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 1083 ] 
11:19:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF90>, <py_sfcl.CommandDataDefinition object at 0x06268C90>) , Command count = 1084 ] 
11:19:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:10: [ SetBusWidth(0x4) , Command count = 1085 ] 
11:19:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1086 ] 
11:19:10: Protected Area Size 0x28000
11:19:10: Bus Width           2
11:19:10: Secure Mode         0
11:19:10: Speed  Class        4
11:19:10: Perf Move           0
11:19:10: Au Size             9
11:19:10: Erase Size          15
11:19:10: Erase Timeout       1
11:19:10: Erase offset        1
11:19:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1087 ] 
11:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:10: Host Frequency set to 100000 KHz
11:19:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:10: ####CSD Registe 2.0 Values####
11:19:10: CSD_STRUCTURE                                 :0x1
11:19:10: Reserv1                                       :0x0
11:19:10: Time Access 1 TAAC                            :0xe
11:19:10: Time Access 2 NSAC*100                        :0x0
11:19:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:10: Card Command Classess CCC                     :0x5b5
11:19:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:10: DSR(driver stage register)  DSR_IMP           :0x0
11:19:10: Reserv2                                       :0x0
11:19:10: Device Size C_SIZE                            :0xedc8
11:19:10: Reserv3                                       :0x0
11:19:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:11: Reserv4                                       :0x0
11:19:11: Write Speed Factor R2W_FACTOR                 :0x2
11:19:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:11: FILE_FORMAT_GRP                               :0x0
11:19:11: COPY flag                                     :0x1
11:19:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:11: File_Format                                   :0x0
11:19:11: CRC                                           :0x0
11:19:11: ####CSD Registe Values####  

11:19:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E10>, <py_sfcl.CommandDataDefinition object at 0x062680F0>) , Command count = 1088 ] 
11:19:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x06268FC0>) , Command count = 1089 ] 
11:19:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268060>, <py_sfcl.PySEnhancedCmdData object at 0x06268C60>, <None>, <py_sfcl.Command23 object at 0x0627D390>) , Command count = 1090 ] 
11:19:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:14: Host Frequency set to 25000 KHz
11:19:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:14: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x062680C0>, 0x0, True) , Command count = 1091 ] 
11:19:14: [GO18_globalSetVolt]### Host voltage value is set.
11:19:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D810>, 0x0, False) , Command count = 1092 ] 
11:19:14: [GO18_globalSetVolt]### Host voltage value is set.
11:19:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1093 ] 
11:19:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1094 ] 
11:19:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1095 ] 
11:19:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690C0>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 1096 ] 
11:19:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x06268840>) , Command count = 1097 ] 
11:19:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1098 ] 
11:19:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:14: Host Frequency set to 25000 KHz
11:19:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:14: ####CSD Registe 2.0 Values####
11:19:14: CSD_STRUCTURE                                 :0x1
11:19:14: Reserv1                                       :0x0
11:19:14: Time Access 1 TAAC                            :0xe
11:19:14: Time Access 2 NSAC*100                        :0x0
11:19:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:14: Card Command Classess CCC                     :0x5b5
11:19:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:14: DSR(driver stage register)  DSR_IMP           :0x0
11:19:14: Reserv2                                       :0x0
11:19:14: Device Size C_SIZE                            :0xedc8
11:19:14: Reserv3                                       :0x0
11:19:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:14: Reserv4                                       :0x0
11:19:14: Write Speed Factor R2W_FACTOR                 :0x2
11:19:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:14: FILE_FORMAT_GRP                               :0x0
11:19:14: COPY flag                                     :0x1
11:19:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:14: File_Format                                   :0x0
11:19:14: CRC                                           :0x0
11:19:14: ####CSD Registe Values####  

11:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:14: [GetSCRRegisterEntry] Passed
11:19:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:14: Data_Status_After Erases          : 0
11:19:14: CPRM Security Support             : No Security
11:19:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:14: Spec. Version                     : Version 3.0X
11:19:14: Extended Security Support         : Extended_Security_Not_Supported
11:19:14: Command Support                   : COMMAND_SUPPORT
11:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 1099 ] 
11:19:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 1100 ] 
11:19:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:14: [ SetBusWidth(0x4) , Command count = 1101 ] 
11:19:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062686F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1102 ] 
11:19:14: Protected Area Size 0x28000
11:19:14: Bus Width           2
11:19:14: Secure Mode         0
11:19:14: Speed  Class        4
11:19:14: Perf Move           0
11:19:14: Au Size             9
11:19:14: Erase Size          15
11:19:14: Erase Timeout       1
11:19:14: Erase offset        1
11:19:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1103 ] 
11:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:14: Host Frequency set to 100000 KHz
11:19:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:15: ####CSD Registe 2.0 Values####
11:19:15: CSD_STRUCTURE                                 :0x1
11:19:15: Reserv1                                       :0x0
11:19:15: Time Access 1 TAAC                            :0xe
11:19:15: Time Access 2 NSAC*100                        :0x0
11:19:15: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:15: Card Command Classess CCC                     :0x5b5
11:19:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:15: DSR(driver stage register)  DSR_IMP           :0x0
11:19:15: Reserv2                                       :0x0
11:19:15: Device Size C_SIZE                            :0xedc8
11:19:15: Reserv3                                       :0x0
11:19:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:15: Reserv4                                       :0x0
11:19:15: Write Speed Factor R2W_FACTOR                 :0x2
11:19:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:15: FILE_FORMAT_GRP                               :0x0
11:19:15: COPY flag                                     :0x1
11:19:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:15: File_Format                                   :0x0
11:19:15: CRC                                           :0x0
11:19:15: ####CSD Registe Values####  

11:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269210>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 1104 ] 
11:19:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D540>, <py_sfcl.CommandDataDefinition object at 0x06268BA0>) , Command count = 1105 ] 
11:19:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268540>, <py_sfcl.PySEnhancedCmdData object at 0x062689C0>, <None>, <py_sfcl.Command23 object at 0x0627AA50>) , Command count = 1106 ] 
11:19:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:16: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:18: Host Frequency set to 25000 KHz
11:19:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:18: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x062684E0>, 0x0, True) , Command count = 1107 ] 
11:19:18: [GO18_globalSetVolt]### Host voltage value is set.
11:19:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268900>, 0x0, False) , Command count = 1108 ] 
11:19:18: [GO18_globalSetVolt]### Host voltage value is set.
11:19:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1109 ] 
11:19:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1110 ] 
11:19:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1111 ] 
11:19:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D600>, <py_sfcl.CommandDataDefinition object at 0x0627D5A0>) , Command count = 1112 ] 
11:19:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DDE0>, <py_sfcl.CommandDataDefinition object at 0x062693C0>) , Command count = 1113 ] 
11:19:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1114 ] 
11:19:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:18: Host Frequency set to 25000 KHz
11:19:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:18: ####CSD Registe 2.0 Values####
11:19:18: CSD_STRUCTURE                                 :0x1
11:19:18: Reserv1                                       :0x0
11:19:18: Time Access 1 TAAC                            :0xe
11:19:18: Time Access 2 NSAC*100                        :0x0
11:19:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:18: Card Command Classess CCC                     :0x5b5
11:19:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:18: DSR(driver stage register)  DSR_IMP           :0x0
11:19:18: Reserv2                                       :0x0
11:19:18: Device Size C_SIZE                            :0xedc8
11:19:18: Reserv3                                       :0x0
11:19:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:18: Reserv4                                       :0x0
11:19:18: Write Speed Factor R2W_FACTOR                 :0x2
11:19:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:18: FILE_FORMAT_GRP                               :0x0
11:19:18: COPY flag                                     :0x1
11:19:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:18: File_Format                                   :0x0
11:19:18: CRC                                           :0x0
11:19:18: ####CSD Registe Values####  

11:19:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:18: [GetSCRRegisterEntry] Passed
11:19:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:18: Data_Status_After Erases          : 0
11:19:18: CPRM Security Support             : No Security
11:19:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:18: Spec. Version                     : Version 3.0X
11:19:18: Extended Security Support         : Extended_Security_Not_Supported
11:19:18: Command Support                   : COMMAND_SUPPORT
11:19:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 1115 ] 
11:19:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x06269870>) , Command count = 1116 ] 
11:19:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:18: [ SetBusWidth(0x4) , Command count = 1117 ] 
11:19:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1118 ] 
11:19:18: Protected Area Size 0x28000
11:19:18: Bus Width           2
11:19:19: Secure Mode         0
11:19:19: Speed  Class        4
11:19:19: Perf Move           0
11:19:19: Au Size             9
11:19:19: Erase Size          15
11:19:19: Erase Timeout       1
11:19:19: Erase offset        1
11:19:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1119 ] 
11:19:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:19: Host Frequency set to 100000 KHz
11:19:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:19: ####CSD Registe 2.0 Values####
11:19:19: CSD_STRUCTURE                                 :0x1
11:19:19: Reserv1                                       :0x0
11:19:19: Time Access 1 TAAC                            :0xe
11:19:19: Time Access 2 NSAC*100                        :0x0
11:19:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:19: Card Command Classess CCC                     :0x5b5
11:19:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:19: DSR(driver stage register)  DSR_IMP           :0x0
11:19:19: Reserv2                                       :0x0
11:19:19: Device Size C_SIZE                            :0xedc8
11:19:19: Reserv3                                       :0x0
11:19:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:19: Reserv4                                       :0x0
11:19:19: Write Speed Factor R2W_FACTOR                 :0x2
11:19:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:19: FILE_FORMAT_GRP                               :0x0
11:19:19: COPY flag                                     :0x1
11:19:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:19: File_Format                                   :0x0
11:19:19: CRC                                           :0x0
11:19:19: ####CSD Registe Values####  

11:19:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268E70>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 1120 ] 
11:19:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x062764B0>) , Command count = 1121 ] 
11:19:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269B10>, <py_sfcl.PySEnhancedCmdData object at 0x062691E0>, <None>, <py_sfcl.Command23 object at 0x06268D50>) , Command count = 1122 ] 
11:19:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:22: Host Frequency set to 25000 KHz
11:19:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268960>, 0x0, True) , Command count = 1123 ] 
11:19:22: [GO18_globalSetVolt]### Host voltage value is set.
11:19:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268660>, 0x0, False) , Command count = 1124 ] 
11:19:22: [GO18_globalSetVolt]### Host voltage value is set.
11:19:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1125 ] 
11:19:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1126 ] 
11:19:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1127 ] 
11:19:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698D0>, <py_sfcl.CommandDataDefinition object at 0x062696F0>) , Command count = 1128 ] 
11:19:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DFC0>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 1129 ] 
11:19:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1130 ] 
11:19:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:23: Host Frequency set to 25000 KHz
11:19:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:23: ####CSD Registe 2.0 Values####
11:19:23: CSD_STRUCTURE                                 :0x1
11:19:23: Reserv1                                       :0x0
11:19:23: Time Access 1 TAAC                            :0xe
11:19:23: Time Access 2 NSAC*100                        :0x0
11:19:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:23: Card Command Classess CCC                     :0x5b5
11:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:23: DSR(driver stage register)  DSR_IMP           :0x0
11:19:23: Reserv2                                       :0x0
11:19:23: Device Size C_SIZE                            :0xedc8
11:19:23: Reserv3                                       :0x0
11:19:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:23: Reserv4                                       :0x0
11:19:23: Write Speed Factor R2W_FACTOR                 :0x2
11:19:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:23: FILE_FORMAT_GRP                               :0x0
11:19:23: COPY flag                                     :0x1
11:19:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:23: File_Format                                   :0x0
11:19:23: CRC                                           :0x0
11:19:23: ####CSD Registe Values####  

11:19:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:23: [GetSCRRegisterEntry] Passed
11:19:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:23: Data_Status_After Erases          : 0
11:19:23: CPRM Security Support             : No Security
11:19:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:23: Spec. Version                     : Version 3.0X
11:19:23: Extended Security Support         : Extended_Security_Not_Supported
11:19:23: Command Support                   : COMMAND_SUPPORT
11:19:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 1131 ] 
11:19:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 1132 ] 
11:19:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:23: [ SetBusWidth(0x4) , Command count = 1133 ] 
11:19:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1134 ] 
11:19:23: Protected Area Size 0x28000
11:19:23: Bus Width           2
11:19:23: Secure Mode         0
11:19:23: Speed  Class        4
11:19:23: Perf Move           0
11:19:23: Au Size             9
11:19:23: Erase Size          15
11:19:23: Erase Timeout       1
11:19:23: Erase offset        1
11:19:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1135 ] 
11:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:23: Host Frequency set to 100000 KHz
11:19:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:23: ####CSD Registe 2.0 Values####
11:19:23: CSD_STRUCTURE                                 :0x1
11:19:23: Reserv1                                       :0x0
11:19:23: Time Access 1 TAAC                            :0xe
11:19:23: Time Access 2 NSAC*100                        :0x0
11:19:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:23: Card Command Classess CCC                     :0x5b5
11:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:23: DSR(driver stage register)  DSR_IMP           :0x0
11:19:23: Reserv2                                       :0x0
11:19:23: Device Size C_SIZE                            :0xedc8
11:19:23: Reserv3                                       :0x0
11:19:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:24: Reserv4                                       :0x0
11:19:24: Write Speed Factor R2W_FACTOR                 :0x2
11:19:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:24: FILE_FORMAT_GRP                               :0x0
11:19:24: COPY flag                                     :0x1
11:19:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:24: File_Format                                   :0x0
11:19:24: CRC                                           :0x0
11:19:24: ####CSD Registe Values####  

11:19:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D360>, <py_sfcl.CommandDataDefinition object at 0x06269F00>) , Command count = 1136 ] 
11:19:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CF0>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 1137 ] 
11:19:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269E10>, <py_sfcl.PySEnhancedCmdData object at 0x06269D50>, <None>, <py_sfcl.Command23 object at 0x06269600>) , Command count = 1138 ] 
11:19:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:27: Host Frequency set to 25000 KHz
11:19:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:27: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D600>, 0x0, True) , Command count = 1139 ] 
11:19:27: [GO18_globalSetVolt]### Host voltage value is set.
11:19:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D3F0>, 0x0, False) , Command count = 1140 ] 
11:19:27: [GO18_globalSetVolt]### Host voltage value is set.
11:19:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1141 ] 
11:19:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1142 ] 
11:19:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1143 ] 
11:19:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D480>, <py_sfcl.CommandDataDefinition object at 0x0626D720>) , Command count = 1144 ] 
11:19:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x062693F0>) , Command count = 1145 ] 
11:19:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1146 ] 
11:19:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:27: Host Frequency set to 25000 KHz
11:19:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:27: ####CSD Registe 2.0 Values####
11:19:27: CSD_STRUCTURE                                 :0x1
11:19:27: Reserv1                                       :0x0
11:19:27: Time Access 1 TAAC                            :0xe
11:19:27: Time Access 2 NSAC*100                        :0x0
11:19:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:27: Card Command Classess CCC                     :0x5b5
11:19:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:27: DSR(driver stage register)  DSR_IMP           :0x0
11:19:27: Reserv2                                       :0x0
11:19:27: Device Size C_SIZE                            :0xedc8
11:19:27: Reserv3                                       :0x0
11:19:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:27: Reserv4                                       :0x0
11:19:27: Write Speed Factor R2W_FACTOR                 :0x2
11:19:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:27: FILE_FORMAT_GRP                               :0x0
11:19:27: COPY flag                                     :0x1
11:19:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:27: File_Format                                   :0x0
11:19:27: CRC                                           :0x0
11:19:27: ####CSD Registe Values####  

11:19:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:27: [GetSCRRegisterEntry] Passed
11:19:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:27: Data_Status_After Erases          : 0
11:19:27: CPRM Security Support             : No Security
11:19:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:27: Spec. Version                     : Version 3.0X
11:19:27: Extended Security Support         : Extended_Security_Not_Supported
11:19:27: Command Support                   : COMMAND_SUPPORT
11:19:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 1147 ] 
11:19:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626D120>) , Command count = 1148 ] 
11:19:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:27: [ SetBusWidth(0x4) , Command count = 1149 ] 
11:19:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1150 ] 
11:19:27: Protected Area Size 0x28000
11:19:27: Bus Width           2
11:19:27: Secure Mode         0
11:19:27: Speed  Class        4
11:19:27: Perf Move           0
11:19:27: Au Size             9
11:19:27: Erase Size          15
11:19:27: Erase Timeout       1
11:19:27: Erase offset        1
11:19:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1151 ] 
11:19:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:27: Host Frequency set to 100000 KHz
11:19:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:28: ####CSD Registe 2.0 Values####
11:19:28: CSD_STRUCTURE                                 :0x1
11:19:28: Reserv1                                       :0x0
11:19:28: Time Access 1 TAAC                            :0xe
11:19:28: Time Access 2 NSAC*100                        :0x0
11:19:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:28: Card Command Classess CCC                     :0x5b5
11:19:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:28: DSR(driver stage register)  DSR_IMP           :0x0
11:19:28: Reserv2                                       :0x0
11:19:28: Device Size C_SIZE                            :0xedc8
11:19:28: Reserv3                                       :0x0
11:19:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:28: Reserv4                                       :0x0
11:19:28: Write Speed Factor R2W_FACTOR                 :0x2
11:19:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:28: FILE_FORMAT_GRP                               :0x0
11:19:28: COPY flag                                     :0x1
11:19:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:28: File_Format                                   :0x0
11:19:28: CRC                                           :0x0
11:19:28: ####CSD Registe Values####  

11:19:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x0626D870>) , Command count = 1152 ] 
11:19:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E40>, <py_sfcl.CommandDataDefinition object at 0x06269990>) , Command count = 1153 ] 
11:19:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269030>, <py_sfcl.PySEnhancedCmdData object at 0x06269BA0>, <None>, <py_sfcl.Command23 object at 0x06269F60>) , Command count = 1154 ] 
11:19:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:29: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:31: Host Frequency set to 25000 KHz
11:19:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:31: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D660>, 0x0, True) , Command count = 1155 ] 
11:19:31: [GO18_globalSetVolt]### Host voltage value is set.
11:19:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8A0>, 0x0, False) , Command count = 1156 ] 
11:19:31: [GO18_globalSetVolt]### Host voltage value is set.
11:19:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1157 ] 
11:19:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1158 ] 
11:19:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1159 ] 
11:19:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D780>, <py_sfcl.CommandDataDefinition object at 0x0626DD80>) , Command count = 1160 ] 
11:19:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x06269930>) , Command count = 1161 ] 
11:19:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1162 ] 
11:19:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:31: Host Frequency set to 25000 KHz
11:19:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:31: ####CSD Registe 2.0 Values####
11:19:31: CSD_STRUCTURE                                 :0x1
11:19:31: Reserv1                                       :0x0
11:19:31: Time Access 1 TAAC                            :0xe
11:19:31: Time Access 2 NSAC*100                        :0x0
11:19:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:31: Card Command Classess CCC                     :0x5b5
11:19:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:31: DSR(driver stage register)  DSR_IMP           :0x0
11:19:31: Reserv2                                       :0x0
11:19:31: Device Size C_SIZE                            :0xedc8
11:19:31: Reserv3                                       :0x0
11:19:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:31: Reserv4                                       :0x0
11:19:31: Write Speed Factor R2W_FACTOR                 :0x2
11:19:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:31: FILE_FORMAT_GRP                               :0x0
11:19:31: COPY flag                                     :0x1
11:19:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:31: File_Format                                   :0x0
11:19:31: CRC                                           :0x0
11:19:31: ####CSD Registe Values####  

11:19:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:31: [GetSCRRegisterEntry] Passed
11:19:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:31: Data_Status_After Erases          : 0
11:19:31: CPRM Security Support             : No Security
11:19:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:31: Spec. Version                     : Version 3.0X
11:19:31: Extended Security Support         : Extended_Security_Not_Supported
11:19:31: Command Support                   : COMMAND_SUPPORT
11:19:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD20>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 1163 ] 
11:19:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D690>, <py_sfcl.CommandDataDefinition object at 0x0626D1B0>) , Command count = 1164 ] 
11:19:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:31: [ SetBusWidth(0x4) , Command count = 1165 ] 
11:19:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1166 ] 
11:19:31: Protected Area Size 0x28000
11:19:31: Bus Width           2
11:19:32: Secure Mode         0
11:19:32: Speed  Class        4
11:19:32: Perf Move           0
11:19:32: Au Size             9
11:19:32: Erase Size          15
11:19:32: Erase Timeout       1
11:19:32: Erase offset        1
11:19:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1167 ] 
11:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:32: Host Frequency set to 100000 KHz
11:19:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:32: ####CSD Registe 2.0 Values####
11:19:32: CSD_STRUCTURE                                 :0x1
11:19:32: Reserv1                                       :0x0
11:19:32: Time Access 1 TAAC                            :0xe
11:19:32: Time Access 2 NSAC*100                        :0x0
11:19:32: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:32: Card Command Classess CCC                     :0x5b5
11:19:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:32: DSR(driver stage register)  DSR_IMP           :0x0
11:19:32: Reserv2                                       :0x0
11:19:32: Device Size C_SIZE                            :0xedc8
11:19:32: Reserv3                                       :0x0
11:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:33: Reserv4                                       :0x0
11:19:33: Write Speed Factor R2W_FACTOR                 :0x2
11:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:33: FILE_FORMAT_GRP                               :0x0
11:19:33: COPY flag                                     :0x1
11:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:33: File_Format                                   :0x0
11:19:33: CRC                                           :0x0
11:19:33: ####CSD Registe Values####  

11:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D810>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 1168 ] 
11:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x06269C90>) , Command count = 1169 ] 
11:19:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DE0>, <py_sfcl.PySEnhancedCmdData object at 0x06269720>, <None>, <py_sfcl.Command23 object at 0x062692A0>) , Command count = 1170 ] 
11:19:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:33: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:35: Host Frequency set to 25000 KHz
11:19:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:35: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DA20>, 0x0, True) , Command count = 1171 ] 
11:19:35: [GO18_globalSetVolt]### Host voltage value is set.
11:19:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8D0>, 0x0, False) , Command count = 1172 ] 
11:19:35: [GO18_globalSetVolt]### Host voltage value is set.
11:19:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1173 ] 
11:19:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1174 ] 
11:19:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1175 ] 
11:19:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE10>, <py_sfcl.CommandDataDefinition object at 0x0626D570>) , Command count = 1176 ] 
11:19:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D990>, <py_sfcl.CommandDataDefinition object at 0x0626D5A0>) , Command count = 1177 ] 
11:19:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1178 ] 
11:19:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:36: Host Frequency set to 25000 KHz
11:19:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:36: ####CSD Registe 2.0 Values####
11:19:36: CSD_STRUCTURE                                 :0x1
11:19:36: Reserv1                                       :0x0
11:19:36: Time Access 1 TAAC                            :0xe
11:19:36: Time Access 2 NSAC*100                        :0x0
11:19:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:36: Card Command Classess CCC                     :0x5b5
11:19:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:36: DSR(driver stage register)  DSR_IMP           :0x0
11:19:36: Reserv2                                       :0x0
11:19:36: Device Size C_SIZE                            :0xedc8
11:19:36: Reserv3                                       :0x0
11:19:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:36: Reserv4                                       :0x0
11:19:36: Write Speed Factor R2W_FACTOR                 :0x2
11:19:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:36: FILE_FORMAT_GRP                               :0x0
11:19:36: COPY flag                                     :0x1
11:19:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:36: File_Format                                   :0x0
11:19:36: CRC                                           :0x0
11:19:36: ####CSD Registe Values####  

11:19:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:36: [GetSCRRegisterEntry] Passed
11:19:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:36: Data_Status_After Erases          : 0
11:19:36: CPRM Security Support             : No Security
11:19:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:36: Spec. Version                     : Version 3.0X
11:19:36: Extended Security Support         : Extended_Security_Not_Supported
11:19:36: Command Support                   : COMMAND_SUPPORT
11:19:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC00>, <py_sfcl.CommandDataDefinition object at 0x0626D9C0>) , Command count = 1179 ] 
11:19:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D3C0>, <py_sfcl.CommandDataDefinition object at 0x0627A0F0>) , Command count = 1180 ] 
11:19:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:36: [ SetBusWidth(0x4) , Command count = 1181 ] 
11:19:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1182 ] 
11:19:36: Protected Area Size 0x28000
11:19:36: Bus Width           2
11:19:36: Secure Mode         0
11:19:36: Speed  Class        4
11:19:36: Perf Move           0
11:19:36: Au Size             9
11:19:36: Erase Size          15
11:19:36: Erase Timeout       1
11:19:36: Erase offset        1
11:19:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1183 ] 
11:19:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:36: Host Frequency set to 100000 KHz
11:19:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:36: ####CSD Registe 2.0 Values####
11:19:36: CSD_STRUCTURE                                 :0x1
11:19:36: Reserv1                                       :0x0
11:19:36: Time Access 1 TAAC                            :0xe
11:19:36: Time Access 2 NSAC*100                        :0x0
11:19:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:36: Card Command Classess CCC                     :0x5b5
11:19:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:36: DSR(driver stage register)  DSR_IMP           :0x0
11:19:36: Reserv2                                       :0x0
11:19:36: Device Size C_SIZE                            :0xedc8
11:19:36: Reserv3                                       :0x0
11:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:37: Reserv4                                       :0x0
11:19:37: Write Speed Factor R2W_FACTOR                 :0x2
11:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:37: FILE_FORMAT_GRP                               :0x0
11:19:37: COPY flag                                     :0x1
11:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:37: File_Format                                   :0x0
11:19:37: CRC                                           :0x0
11:19:37: ####CSD Registe Values####  

11:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCC0>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 1184 ] 
11:19:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x06273630>) , Command count = 1185 ] 
11:19:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273690>, <py_sfcl.PySEnhancedCmdData object at 0x06273390>, <None>, <py_sfcl.Command23 object at 0x0627AE10>) , Command count = 1186 ] 
11:19:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:40: Host Frequency set to 25000 KHz
11:19:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DA80>, 0x0, True) , Command count = 1187 ] 
11:19:40: [GO18_globalSetVolt]### Host voltage value is set.
11:19:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x062734B0>, 0x0, False) , Command count = 1188 ] 
11:19:40: [GO18_globalSetVolt]### Host voltage value is set.
11:19:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1189 ] 
11:19:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1190 ] 
11:19:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1191 ] 
11:19:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x06273CC0>) , Command count = 1192 ] 
11:19:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD50>, <py_sfcl.CommandDataDefinition object at 0x06273090>) , Command count = 1193 ] 
11:19:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1194 ] 
11:19:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:40: Host Frequency set to 25000 KHz
11:19:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:40: ####CSD Registe 2.0 Values####
11:19:40: CSD_STRUCTURE                                 :0x1
11:19:40: Reserv1                                       :0x0
11:19:40: Time Access 1 TAAC                            :0xe
11:19:40: Time Access 2 NSAC*100                        :0x0
11:19:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:40: Card Command Classess CCC                     :0x5b5
11:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:40: DSR(driver stage register)  DSR_IMP           :0x0
11:19:40: Reserv2                                       :0x0
11:19:40: Device Size C_SIZE                            :0xedc8
11:19:40: Reserv3                                       :0x0
11:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:40: Reserv4                                       :0x0
11:19:40: Write Speed Factor R2W_FACTOR                 :0x2
11:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:40: FILE_FORMAT_GRP                               :0x0
11:19:40: COPY flag                                     :0x1
11:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:40: File_Format                                   :0x0
11:19:40: CRC                                           :0x0
11:19:40: ####CSD Registe Values####  

11:19:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:40: [GetSCRRegisterEntry] Passed
11:19:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:40: Data_Status_After Erases          : 0
11:19:40: CPRM Security Support             : No Security
11:19:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:40: Spec. Version                     : Version 3.0X
11:19:40: Extended Security Support         : Extended_Security_Not_Supported
11:19:40: Command Support                   : COMMAND_SUPPORT
11:19:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA50>, <py_sfcl.CommandDataDefinition object at 0x0627DA20>) , Command count = 1195 ] 
11:19:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x06273450>) , Command count = 1196 ] 
11:19:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:40: [ SetBusWidth(0x4) , Command count = 1197 ] 
11:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062735D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1198 ] 
11:19:40: Protected Area Size 0x28000
11:19:40: Bus Width           2
11:19:40: Secure Mode         0
11:19:40: Speed  Class        4
11:19:40: Perf Move           0
11:19:40: Au Size             9
11:19:40: Erase Size          15
11:19:40: Erase Timeout       1
11:19:40: Erase offset        1
11:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1199 ] 
11:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:40: Host Frequency set to 100000 KHz
11:19:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:41: ####CSD Registe 2.0 Values####
11:19:41: CSD_STRUCTURE                                 :0x1
11:19:41: Reserv1                                       :0x0
11:19:41: Time Access 1 TAAC                            :0xe
11:19:41: Time Access 2 NSAC*100                        :0x0
11:19:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:41: Card Command Classess CCC                     :0x5b5
11:19:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:41: DSR(driver stage register)  DSR_IMP           :0x0
11:19:41: Reserv2                                       :0x0
11:19:41: Device Size C_SIZE                            :0xedc8
11:19:41: Reserv3                                       :0x0
11:19:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:41: Reserv4                                       :0x0
11:19:41: Write Speed Factor R2W_FACTOR                 :0x2
11:19:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:41: FILE_FORMAT_GRP                               :0x0
11:19:41: COPY flag                                     :0x1
11:19:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:41: File_Format                                   :0x0
11:19:41: CRC                                           :0x0
11:19:41: ####CSD Registe Values####  

11:19:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 1200 ] 
11:19:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCF0>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 1201 ] 
11:19:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273120>, <py_sfcl.PySEnhancedCmdData object at 0x06273240>, <None>, <py_sfcl.Command23 object at 0x06273060>) , Command count = 1202 ] 
11:19:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:44: Host Frequency set to 25000 KHz
11:19:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AB0>, 0x0, True) , Command count = 1203 ] 
11:19:44: [GO18_globalSetVolt]### Host voltage value is set.
11:19:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D960>, 0x0, False) , Command count = 1204 ] 
11:19:44: [GO18_globalSetVolt]### Host voltage value is set.
11:19:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1205 ] 
11:19:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
11:19:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1207 ] 
11:19:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB70>, <py_sfcl.CommandDataDefinition object at 0x06276180>) , Command count = 1208 ] 
11:19:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC60>, <py_sfcl.CommandDataDefinition object at 0x0626DF30>) , Command count = 1209 ] 
11:19:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1210 ] 
11:19:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:45: Host Frequency set to 25000 KHz
11:19:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:45: ####CSD Registe 2.0 Values####
11:19:45: CSD_STRUCTURE                                 :0x1
11:19:45: Reserv1                                       :0x0
11:19:45: Time Access 1 TAAC                            :0xe
11:19:45: Time Access 2 NSAC*100                        :0x0
11:19:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:45: Card Command Classess CCC                     :0x5b5
11:19:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:45: DSR(driver stage register)  DSR_IMP           :0x0
11:19:45: Reserv2                                       :0x0
11:19:45: Device Size C_SIZE                            :0xedc8
11:19:45: Reserv3                                       :0x0
11:19:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:45: Reserv4                                       :0x0
11:19:45: Write Speed Factor R2W_FACTOR                 :0x2
11:19:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:45: FILE_FORMAT_GRP                               :0x0
11:19:45: COPY flag                                     :0x1
11:19:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:45: File_Format                                   :0x0
11:19:45: CRC                                           :0x0
11:19:45: ####CSD Registe Values####  

11:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:45: [GetSCRRegisterEntry] Passed
11:19:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:45: Data_Status_After Erases          : 0
11:19:45: CPRM Security Support             : No Security
11:19:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:45: Spec. Version                     : Version 3.0X
11:19:45: Extended Security Support         : Extended_Security_Not_Supported
11:19:45: Command Support                   : COMMAND_SUPPORT
11:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273990>, <py_sfcl.CommandDataDefinition object at 0x06273FC0>) , Command count = 1211 ] 
11:19:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 1212 ] 
11:19:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:45: [ SetBusWidth(0x4) , Command count = 1213 ] 
11:19:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1214 ] 
11:19:45: Protected Area Size 0x28000
11:19:45: Bus Width           2
11:19:45: Secure Mode         0
11:19:45: Speed  Class        4
11:19:45: Perf Move           0
11:19:45: Au Size             9
11:19:45: Erase Size          15
11:19:45: Erase Timeout       1
11:19:45: Erase offset        1
11:19:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1215 ] 
11:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:45: Host Frequency set to 100000 KHz
11:19:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:45: ####CSD Registe 2.0 Values####
11:19:45: CSD_STRUCTURE                                 :0x1
11:19:45: Reserv1                                       :0x0
11:19:45: Time Access 1 TAAC                            :0xe
11:19:45: Time Access 2 NSAC*100                        :0x0
11:19:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:45: Card Command Classess CCC                     :0x5b5
11:19:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:45: DSR(driver stage register)  DSR_IMP           :0x0
11:19:45: Reserv2                                       :0x0
11:19:45: Device Size C_SIZE                            :0xedc8
11:19:45: Reserv3                                       :0x0
11:19:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:45: Reserv4                                       :0x0
11:19:45: Write Speed Factor R2W_FACTOR                 :0x2
11:19:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:45: FILE_FORMAT_GRP                               :0x0
11:19:45: COPY flag                                     :0x1
11:19:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:45: File_Format                                   :0x0
11:19:45: CRC                                           :0x0
11:19:45: ####CSD Registe Values####  

11:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276330>, <py_sfcl.CommandDataDefinition object at 0x062733F0>) , Command count = 1216 ] 
11:19:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062768A0>, <py_sfcl.CommandDataDefinition object at 0x062735D0>) , Command count = 1217 ] 
11:19:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273510>, <py_sfcl.PySEnhancedCmdData object at 0x06273DE0>, <None>, <py_sfcl.Command23 object at 0x06273BA0>) , Command count = 1218 ] 
11:19:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:46: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:48: Host Frequency set to 25000 KHz
11:19:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:48: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DDB0>, 0x0, True) , Command count = 1219 ] 
11:19:48: [GO18_globalSetVolt]### Host voltage value is set.
11:19:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D9F0>, 0x0, False) , Command count = 1220 ] 
11:19:48: [GO18_globalSetVolt]### Host voltage value is set.
11:19:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1221 ] 
11:19:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1222 ] 
11:19:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1223 ] 
11:19:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764E0>, <py_sfcl.CommandDataDefinition object at 0x06276300>) , Command count = 1224 ] 
11:19:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761E0>, <py_sfcl.CommandDataDefinition object at 0x062765D0>) , Command count = 1225 ] 
11:19:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1226 ] 
11:19:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:49: Host Frequency set to 25000 KHz
11:19:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:49: ####CSD Registe 2.0 Values####
11:19:49: CSD_STRUCTURE                                 :0x1
11:19:49: Reserv1                                       :0x0
11:19:49: Time Access 1 TAAC                            :0xe
11:19:49: Time Access 2 NSAC*100                        :0x0
11:19:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:49: Card Command Classess CCC                     :0x5b5
11:19:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:49: DSR(driver stage register)  DSR_IMP           :0x0
11:19:49: Reserv2                                       :0x0
11:19:49: Device Size C_SIZE                            :0xedc8
11:19:49: Reserv3                                       :0x0
11:19:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:49: Reserv4                                       :0x0
11:19:49: Write Speed Factor R2W_FACTOR                 :0x2
11:19:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:49: FILE_FORMAT_GRP                               :0x0
11:19:49: COPY flag                                     :0x1
11:19:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:49: File_Format                                   :0x0
11:19:49: CRC                                           :0x0
11:19:49: ####CSD Registe Values####  

11:19:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:49: [GetSCRRegisterEntry] Passed
11:19:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:49: Data_Status_After Erases          : 0
11:19:49: CPRM Security Support             : No Security
11:19:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:49: Spec. Version                     : Version 3.0X
11:19:49: Extended Security Support         : Extended_Security_Not_Supported
11:19:49: Command Support                   : COMMAND_SUPPORT
11:19:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 1227 ] 
11:19:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276AE0>, <py_sfcl.CommandDataDefinition object at 0x06276B10>) , Command count = 1228 ] 
11:19:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:49: [ SetBusWidth(0x4) , Command count = 1229 ] 
11:19:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062766C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1230 ] 
11:19:49: Protected Area Size 0x28000
11:19:49: Bus Width           2
11:19:49: Secure Mode         0
11:19:49: Speed  Class        4
11:19:49: Perf Move           0
11:19:49: Au Size             9
11:19:49: Erase Size          15
11:19:49: Erase Timeout       1
11:19:49: Erase offset        1
11:19:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1231 ] 
11:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:49: Host Frequency set to 100000 KHz
11:19:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:49: ####CSD Registe 2.0 Values####
11:19:49: CSD_STRUCTURE                                 :0x1
11:19:49: Reserv1                                       :0x0
11:19:49: Time Access 1 TAAC                            :0xe
11:19:49: Time Access 2 NSAC*100                        :0x0
11:19:49: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:49: Card Command Classess CCC                     :0x5b5
11:19:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:49: DSR(driver stage register)  DSR_IMP           :0x0
11:19:49: Reserv2                                       :0x0
11:19:49: Device Size C_SIZE                            :0xedc8
11:19:49: Reserv3                                       :0x0
11:19:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:50: Reserv4                                       :0x0
11:19:50: Write Speed Factor R2W_FACTOR                 :0x2
11:19:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:50: FILE_FORMAT_GRP                               :0x0
11:19:50: COPY flag                                     :0x1
11:19:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:50: File_Format                                   :0x0
11:19:50: CRC                                           :0x0
11:19:50: ####CSD Registe Values####  

11:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062769F0>, <py_sfcl.CommandDataDefinition object at 0x06276AB0>) , Command count = 1232 ] 
11:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276060>, <py_sfcl.CommandDataDefinition object at 0x06273C90>) , Command count = 1233 ] 
11:19:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062760F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062730C0>, <py_sfcl.PySEnhancedCmdData object at 0x06273A20>, <None>, <py_sfcl.Command23 object at 0x062738D0>) , Command count = 1234 ] 
11:19:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:53: Host Frequency set to 25000 KHz
11:19:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DF00>, 0x0, True) , Command count = 1235 ] 
11:19:53: [GO18_globalSetVolt]### Host voltage value is set.
11:19:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA80>, 0x0, False) , Command count = 1236 ] 
11:19:53: [GO18_globalSetVolt]### Host voltage value is set.
11:19:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1237 ] 
11:19:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1238 ] 
11:19:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1239 ] 
11:19:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BA0>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 1240 ] 
11:19:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276510>, <py_sfcl.CommandDataDefinition object at 0x06276120>) , Command count = 1241 ] 
11:19:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1242 ] 
11:19:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:53: Host Frequency set to 25000 KHz
11:19:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:53: ####CSD Registe 2.0 Values####
11:19:53: CSD_STRUCTURE                                 :0x1
11:19:53: Reserv1                                       :0x0
11:19:53: Time Access 1 TAAC                            :0xe
11:19:53: Time Access 2 NSAC*100                        :0x0
11:19:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:53: Card Command Classess CCC                     :0x5b5
11:19:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:53: DSR(driver stage register)  DSR_IMP           :0x0
11:19:53: Reserv2                                       :0x0
11:19:53: Device Size C_SIZE                            :0xedc8
11:19:53: Reserv3                                       :0x0
11:19:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:53: Reserv4                                       :0x0
11:19:53: Write Speed Factor R2W_FACTOR                 :0x2
11:19:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:53: FILE_FORMAT_GRP                               :0x0
11:19:53: COPY flag                                     :0x1
11:19:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:53: File_Format                                   :0x0
11:19:53: CRC                                           :0x0
11:19:53: ####CSD Registe Values####  

11:19:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:53: [GetSCRRegisterEntry] Passed
11:19:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:53: Data_Status_After Erases          : 0
11:19:53: CPRM Security Support             : No Security
11:19:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:53: Spec. Version                     : Version 3.0X
11:19:53: Extended Security Support         : Extended_Security_Not_Supported
11:19:53: Command Support                   : COMMAND_SUPPORT
11:19:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A180>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 1243 ] 
11:19:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A1E0>, <py_sfcl.CommandDataDefinition object at 0x06276090>) , Command count = 1244 ] 
11:19:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:53: [ SetBusWidth(0x4) , Command count = 1245 ] 
11:19:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1246 ] 
11:19:53: Protected Area Size 0x28000
11:19:53: Bus Width           2
11:19:53: Secure Mode         0
11:19:53: Speed  Class        4
11:19:53: Perf Move           0
11:19:53: Au Size             9
11:19:53: Erase Size          15
11:19:53: Erase Timeout       1
11:19:53: Erase offset        1
11:19:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1247 ] 
11:19:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:53: Host Frequency set to 100000 KHz
11:19:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:54: ####CSD Registe 2.0 Values####
11:19:54: CSD_STRUCTURE                                 :0x1
11:19:54: Reserv1                                       :0x0
11:19:54: Time Access 1 TAAC                            :0xe
11:19:54: Time Access 2 NSAC*100                        :0x0
11:19:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:54: Card Command Classess CCC                     :0x5b5
11:19:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:54: DSR(driver stage register)  DSR_IMP           :0x0
11:19:54: Reserv2                                       :0x0
11:19:54: Device Size C_SIZE                            :0xedc8
11:19:54: Reserv3                                       :0x0
11:19:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:54: Reserv4                                       :0x0
11:19:54: Write Speed Factor R2W_FACTOR                 :0x2
11:19:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:54: FILE_FORMAT_GRP                               :0x0
11:19:54: COPY flag                                     :0x1
11:19:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:54: File_Format                                   :0x0
11:19:54: CRC                                           :0x0
11:19:54: ####CSD Registe Values####  

11:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276840>, <py_sfcl.CommandDataDefinition object at 0x062766C0>) , Command count = 1248 ] 
11:19:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062763C0>, <py_sfcl.CommandDataDefinition object at 0x06276750>) , Command count = 1249 ] 
11:19:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276E40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276CF0>, <py_sfcl.PySEnhancedCmdData object at 0x06273900>, <None>, <py_sfcl.Command23 object at 0x06273DB0>) , Command count = 1250 ] 
11:19:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:19:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:19:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:57: Host Frequency set to 25000 KHz
11:19:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:19:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:19:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276C60>, 0x0, True) , Command count = 1251 ] 
11:19:57: [GO18_globalSetVolt]### Host voltage value is set.
11:19:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:19:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276EA0>, 0x0, False) , Command count = 1252 ] 
11:19:57: [GO18_globalSetVolt]### Host voltage value is set.
11:19:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1253 ] 
11:19:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:19:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1254 ] 
11:19:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:19:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:19:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:19:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:19:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:19:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1255 ] 
11:19:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:19:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767E0>, <py_sfcl.CommandDataDefinition object at 0x0627DDB0>) , Command count = 1256 ] 
11:19:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BD0>, <py_sfcl.CommandDataDefinition object at 0x0627A2D0>) , Command count = 1257 ] 
11:19:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:19:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1258 ] 
11:19:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:19:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:19:58: Host Frequency set to 25000 KHz
11:19:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:19:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:58: ####CSD Registe 2.0 Values####
11:19:58: CSD_STRUCTURE                                 :0x1
11:19:58: Reserv1                                       :0x0
11:19:58: Time Access 1 TAAC                            :0xe
11:19:58: Time Access 2 NSAC*100                        :0x0
11:19:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:19:58: Card Command Classess CCC                     :0x5b5
11:19:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:58: DSR(driver stage register)  DSR_IMP           :0x0
11:19:58: Reserv2                                       :0x0
11:19:58: Device Size C_SIZE                            :0xedc8
11:19:58: Reserv3                                       :0x0
11:19:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:58: Reserv4                                       :0x0
11:19:58: Write Speed Factor R2W_FACTOR                 :0x2
11:19:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:58: FILE_FORMAT_GRP                               :0x0
11:19:58: COPY flag                                     :0x1
11:19:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:58: File_Format                                   :0x0
11:19:58: CRC                                           :0x0
11:19:58: ####CSD Registe Values####  

11:19:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:19:58: [GetSCRRegisterEntry] Passed
11:19:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:19:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:19:58: Data_Status_After Erases          : 0
11:19:58: CPRM Security Support             : No Security
11:19:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:19:58: Spec. Version                     : Version 3.0X
11:19:58: Extended Security Support         : Extended_Security_Not_Supported
11:19:58: Command Support                   : COMMAND_SUPPORT
11:19:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A600>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 1259 ] 
11:19:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x0627A120>) , Command count = 1260 ] 
11:19:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:19:58: [ SetBusWidth(0x4) , Command count = 1261 ] 
11:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062761B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1262 ] 
11:19:58: Protected Area Size 0x28000
11:19:58: Bus Width           2
11:19:58: Secure Mode         0
11:19:58: Speed  Class        4
11:19:58: Perf Move           0
11:19:58: Au Size             9
11:19:58: Erase Size          15
11:19:58: Erase Timeout       1
11:19:58: Erase offset        1
11:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:19:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:19:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:19:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1263 ] 
11:19:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:19:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:19:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:19:58: Host Frequency set to 100000 KHz
11:19:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:19:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:19:58: ####CSD Registe 2.0 Values####
11:19:58: CSD_STRUCTURE                                 :0x1
11:19:58: Reserv1                                       :0x0
11:19:58: Time Access 1 TAAC                            :0xe
11:19:58: Time Access 2 NSAC*100                        :0x0
11:19:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:19:58: Card Command Classess CCC                     :0x5b5
11:19:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:19:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:19:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:19:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:19:58: DSR(driver stage register)  DSR_IMP           :0x0
11:19:58: Reserv2                                       :0x0
11:19:58: Device Size C_SIZE                            :0xedc8
11:19:58: Reserv3                                       :0x0
11:19:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:19:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:19:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:19:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:19:59: Reserv4                                       :0x0
11:19:59: Write Speed Factor R2W_FACTOR                 :0x2
11:19:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:19:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:19:59: FILE_FORMAT_GRP                               :0x0
11:19:59: COPY flag                                     :0x1
11:19:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:19:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:19:59: File_Format                                   :0x0
11:19:59: CRC                                           :0x0
11:19:59: ####CSD Registe Values####  

11:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F30>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 1264 ] 
11:19:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x0627A4B0>) , Command count = 1265 ] 
11:19:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:19:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:19:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:19:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:19:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A7E0>, <py_sfcl.PySEnhancedCmdData object at 0x06273ED0>, <None>, <py_sfcl.Command23 object at 0x06273840>) , Command count = 1266 ] 
11:19:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:02: Host Frequency set to 25000 KHz
11:20:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276C00>, 0x0, True) , Command count = 1267 ] 
11:20:02: [GO18_globalSetVolt]### Host voltage value is set.
11:20:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DBA0>, 0x0, False) , Command count = 1268 ] 
11:20:02: [GO18_globalSetVolt]### Host voltage value is set.
11:20:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1269 ] 
11:20:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1270 ] 
11:20:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1271 ] 
11:20:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276540>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 1272 ] 
11:20:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276CC0>, <py_sfcl.CommandDataDefinition object at 0x0627A930>) , Command count = 1273 ] 
11:20:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1274 ] 
11:20:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:02: Host Frequency set to 25000 KHz
11:20:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:02: ####CSD Registe 2.0 Values####
11:20:02: CSD_STRUCTURE                                 :0x1
11:20:02: Reserv1                                       :0x0
11:20:02: Time Access 1 TAAC                            :0xe
11:20:02: Time Access 2 NSAC*100                        :0x0
11:20:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:02: Card Command Classess CCC                     :0x5b5
11:20:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:02: DSR(driver stage register)  DSR_IMP           :0x0
11:20:02: Reserv2                                       :0x0
11:20:02: Device Size C_SIZE                            :0xedc8
11:20:02: Reserv3                                       :0x0
11:20:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:02: Reserv4                                       :0x0
11:20:02: Write Speed Factor R2W_FACTOR                 :0x2
11:20:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:02: FILE_FORMAT_GRP                               :0x0
11:20:02: COPY flag                                     :0x1
11:20:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:02: File_Format                                   :0x0
11:20:02: CRC                                           :0x0
11:20:02: ####CSD Registe Values####  

11:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:02: [GetSCRRegisterEntry] Passed
11:20:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:02: Data_Status_After Erases          : 0
11:20:02: CPRM Security Support             : No Security
11:20:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:02: Spec. Version                     : Version 3.0X
11:20:02: Extended Security Support         : Extended_Security_Not_Supported
11:20:02: Command Support                   : COMMAND_SUPPORT
11:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CAE70>, <py_sfcl.CommandDataDefinition object at 0x053E2420>) , Command count = 1275 ] 
11:20:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE40>, <py_sfcl.CommandDataDefinition object at 0x0627A690>) , Command count = 1276 ] 
11:20:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:02: [ SetBusWidth(0x4) , Command count = 1277 ] 
11:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1278 ] 
11:20:02: Protected Area Size 0x28000
11:20:02: Bus Width           2
11:20:02: Secure Mode         0
11:20:02: Speed  Class        4
11:20:02: Perf Move           0
11:20:02: Au Size             9
11:20:02: Erase Size          15
11:20:02: Erase Timeout       1
11:20:02: Erase offset        1
11:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1279 ] 
11:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:02: Host Frequency set to 100000 KHz
11:20:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:03: ####CSD Registe 2.0 Values####
11:20:03: CSD_STRUCTURE                                 :0x1
11:20:03: Reserv1                                       :0x0
11:20:03: Time Access 1 TAAC                            :0xe
11:20:03: Time Access 2 NSAC*100                        :0x0
11:20:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:03: Card Command Classess CCC                     :0x5b5
11:20:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:03: DSR(driver stage register)  DSR_IMP           :0x0
11:20:03: Reserv2                                       :0x0
11:20:03: Device Size C_SIZE                            :0xedc8
11:20:03: Reserv3                                       :0x0
11:20:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:03: Reserv4                                       :0x0
11:20:03: Write Speed Factor R2W_FACTOR                 :0x2
11:20:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:03: FILE_FORMAT_GRP                               :0x0
11:20:03: COPY flag                                     :0x1
11:20:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:03: File_Format                                   :0x0
11:20:03: CRC                                           :0x0
11:20:03: ####CSD Registe Values####  

11:20:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 1280 ] 
11:20:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x0627A660>) , Command count = 1281 ] 
11:20:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x054019C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB70>, <None>, <py_sfcl.Command23 object at 0x0627ABA0>) , Command count = 1282 ] 
11:20:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:06: Host Frequency set to 25000 KHz
11:20:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A9C0>, 0x0, True) , Command count = 1283 ] 
11:20:06: [GO18_globalSetVolt]### Host voltage value is set.
11:20:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF420>, 0x0, False) , Command count = 1284 ] 
11:20:06: [GO18_globalSetVolt]### Host voltage value is set.
11:20:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1285 ] 
11:20:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1286 ] 
11:20:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1287 ] 
11:20:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 1288 ] 
11:20:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 1289 ] 
11:20:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1290 ] 
11:20:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:06: Host Frequency set to 25000 KHz
11:20:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:06: ####CSD Registe 2.0 Values####
11:20:06: CSD_STRUCTURE                                 :0x1
11:20:06: Reserv1                                       :0x0
11:20:06: Time Access 1 TAAC                            :0xe
11:20:06: Time Access 2 NSAC*100                        :0x0
11:20:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:06: Card Command Classess CCC                     :0x5b5
11:20:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:06: DSR(driver stage register)  DSR_IMP           :0x0
11:20:06: Reserv2                                       :0x0
11:20:06: Device Size C_SIZE                            :0xedc8
11:20:06: Reserv3                                       :0x0
11:20:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:06: Reserv4                                       :0x0
11:20:06: Write Speed Factor R2W_FACTOR                 :0x2
11:20:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:06: FILE_FORMAT_GRP                               :0x0
11:20:06: COPY flag                                     :0x1
11:20:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:06: File_Format                                   :0x0
11:20:06: CRC                                           :0x0
11:20:06: ####CSD Registe Values####  

11:20:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:06: [GetSCRRegisterEntry] Passed
11:20:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:06: Data_Status_After Erases          : 0
11:20:06: CPRM Security Support             : No Security
11:20:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:06: Spec. Version                     : Version 3.0X
11:20:06: Extended Security Support         : Extended_Security_Not_Supported
11:20:06: Command Support                   : COMMAND_SUPPORT
11:20:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 1291 ] 
11:20:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 1292 ] 
11:20:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:06: [ SetBusWidth(0x4) , Command count = 1293 ] 
11:20:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1294 ] 
11:20:06: Protected Area Size 0x28000
11:20:06: Bus Width           2
11:20:06: Secure Mode         0
11:20:06: Speed  Class        4
11:20:06: Perf Move           0
11:20:06: Au Size             9
11:20:06: Erase Size          15
11:20:06: Erase Timeout       1
11:20:06: Erase offset        1
11:20:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1295 ] 
11:20:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:07: Host Frequency set to 100000 KHz
11:20:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:07: ####CSD Registe 2.0 Values####
11:20:07: CSD_STRUCTURE                                 :0x1
11:20:07: Reserv1                                       :0x0
11:20:07: Time Access 1 TAAC                            :0xe
11:20:07: Time Access 2 NSAC*100                        :0x0
11:20:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:07: Card Command Classess CCC                     :0x5b5
11:20:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:07: DSR(driver stage register)  DSR_IMP           :0x0
11:20:07: Reserv2                                       :0x0
11:20:07: Device Size C_SIZE                            :0xedc8
11:20:07: Reserv3                                       :0x0
11:20:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:07: Reserv4                                       :0x0
11:20:07: Write Speed Factor R2W_FACTOR                 :0x2
11:20:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:07: FILE_FORMAT_GRP                               :0x0
11:20:07: COPY flag                                     :0x1
11:20:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:07: File_Format                                   :0x0
11:20:07: CRC                                           :0x0
11:20:07: ####CSD Registe Values####  

11:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 1296 ] 
11:20:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D360>, <py_sfcl.CommandDataDefinition object at 0x0627AB40>) , Command count = 1297 ] 
11:20:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627AF30>, <None>, <py_sfcl.Command23 object at 0x0627A4E0>) , Command count = 1298 ] 
11:20:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:10: Host Frequency set to 25000 KHz
11:20:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x053977E0>, 0x0, True) , Command count = 1299 ] 
11:20:10: [GO18_globalSetVolt]### Host voltage value is set.
11:20:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C90>, 0x0, False) , Command count = 1300 ] 
11:20:10: [GO18_globalSetVolt]### Host voltage value is set.
11:20:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1301 ] 
11:20:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1302 ] 
11:20:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1303 ] 
11:20:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 1304 ] 
11:20:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x0627D0F0>) , Command count = 1305 ] 
11:20:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1306 ] 
11:20:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:10: Host Frequency set to 25000 KHz
11:20:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:10: ####CSD Registe 2.0 Values####
11:20:10: CSD_STRUCTURE                                 :0x1
11:20:10: Reserv1                                       :0x0
11:20:10: Time Access 1 TAAC                            :0xe
11:20:10: Time Access 2 NSAC*100                        :0x0
11:20:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:10: Card Command Classess CCC                     :0x5b5
11:20:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:10: DSR(driver stage register)  DSR_IMP           :0x0
11:20:10: Reserv2                                       :0x0
11:20:10: Device Size C_SIZE                            :0xedc8
11:20:10: Reserv3                                       :0x0
11:20:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:10: Reserv4                                       :0x0
11:20:10: Write Speed Factor R2W_FACTOR                 :0x2
11:20:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:10: FILE_FORMAT_GRP                               :0x0
11:20:10: COPY flag                                     :0x1
11:20:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:10: File_Format                                   :0x0
11:20:10: CRC                                           :0x0
11:20:10: ####CSD Registe Values####  

11:20:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:10: [GetSCRRegisterEntry] Passed
11:20:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:10: Data_Status_After Erases          : 0
11:20:10: CPRM Security Support             : No Security
11:20:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:10: Spec. Version                     : Version 3.0X
11:20:10: Extended Security Support         : Extended_Security_Not_Supported
11:20:10: Command Support                   : COMMAND_SUPPORT
11:20:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA80>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 1307 ] 
11:20:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x0626DAE0>) , Command count = 1308 ] 
11:20:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:10: [ SetBusWidth(0x4) , Command count = 1309 ] 
11:20:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1310 ] 
11:20:10: Protected Area Size 0x28000
11:20:10: Bus Width           2
11:20:11: Secure Mode         0
11:20:11: Speed  Class        4
11:20:11: Perf Move           0
11:20:11: Au Size             9
11:20:11: Erase Size          15
11:20:11: Erase Timeout       1
11:20:11: Erase offset        1
11:20:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1311 ] 
11:20:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:11: Host Frequency set to 100000 KHz
11:20:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:11: ####CSD Registe 2.0 Values####
11:20:11: CSD_STRUCTURE                                 :0x1
11:20:11: Reserv1                                       :0x0
11:20:11: Time Access 1 TAAC                            :0xe
11:20:11: Time Access 2 NSAC*100                        :0x0
11:20:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:11: Card Command Classess CCC                     :0x5b5
11:20:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:11: DSR(driver stage register)  DSR_IMP           :0x0
11:20:11: Reserv2                                       :0x0
11:20:11: Device Size C_SIZE                            :0xedc8
11:20:11: Reserv3                                       :0x0
11:20:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:11: Reserv4                                       :0x0
11:20:11: Write Speed Factor R2W_FACTOR                 :0x2
11:20:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:11: FILE_FORMAT_GRP                               :0x0
11:20:11: COPY flag                                     :0x1
11:20:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:11: File_Format                                   :0x0
11:20:11: CRC                                           :0x0
11:20:11: ####CSD Registe Values####  

11:20:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF2D0>, <py_sfcl.CommandDataDefinition object at 0x0627DF30>) , Command count = 1312 ] 
11:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 1313 ] 
11:20:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A300>, <py_sfcl.PySEnhancedCmdData object at 0x06273780>, <None>, <py_sfcl.Command23 object at 0x0627AD20>) , Command count = 1314 ] 
11:20:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:14: Host Frequency set to 25000 KHz
11:20:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:14: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D900>, 0x0, True) , Command count = 1315 ] 
11:20:14: [GO18_globalSetVolt]### Host voltage value is set.
11:20:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D210>, 0x0, False) , Command count = 1316 ] 
11:20:14: [GO18_globalSetVolt]### Host voltage value is set.
11:20:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1317 ] 
11:20:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1318 ] 
11:20:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1319 ] 
11:20:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DEA0>, <py_sfcl.CommandDataDefinition object at 0x0627D4E0>) , Command count = 1320 ] 
11:20:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F60>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 1321 ] 
11:20:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1322 ] 
11:20:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:15: Host Frequency set to 25000 KHz
11:20:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:15: ####CSD Registe 2.0 Values####
11:20:15: CSD_STRUCTURE                                 :0x1
11:20:15: Reserv1                                       :0x0
11:20:15: Time Access 1 TAAC                            :0xe
11:20:15: Time Access 2 NSAC*100                        :0x0
11:20:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:15: Card Command Classess CCC                     :0x5b5
11:20:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:15: DSR(driver stage register)  DSR_IMP           :0x0
11:20:15: Reserv2                                       :0x0
11:20:15: Device Size C_SIZE                            :0xedc8
11:20:15: Reserv3                                       :0x0
11:20:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:15: Reserv4                                       :0x0
11:20:15: Write Speed Factor R2W_FACTOR                 :0x2
11:20:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:15: FILE_FORMAT_GRP                               :0x0
11:20:15: COPY flag                                     :0x1
11:20:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:15: File_Format                                   :0x0
11:20:15: CRC                                           :0x0
11:20:15: ####CSD Registe Values####  

11:20:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:15: [GetSCRRegisterEntry] Passed
11:20:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:15: Data_Status_After Erases          : 0
11:20:15: CPRM Security Support             : No Security
11:20:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:15: Spec. Version                     : Version 3.0X
11:20:15: Extended Security Support         : Extended_Security_Not_Supported
11:20:15: Command Support                   : COMMAND_SUPPORT
11:20:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169F0>, <py_sfcl.CommandDataDefinition object at 0x06216EA0>) , Command count = 1323 ] 
11:20:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216600>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 1324 ] 
11:20:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:15: [ SetBusWidth(0x4) , Command count = 1325 ] 
11:20:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1326 ] 
11:20:15: Protected Area Size 0x28000
11:20:15: Bus Width           2
11:20:15: Secure Mode         0
11:20:15: Speed  Class        4
11:20:15: Perf Move           0
11:20:15: Au Size             9
11:20:15: Erase Size          15
11:20:15: Erase Timeout       1
11:20:15: Erase offset        1
11:20:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1327 ] 
11:20:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:15: Host Frequency set to 100000 KHz
11:20:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:15: ####CSD Registe 2.0 Values####
11:20:15: CSD_STRUCTURE                                 :0x1
11:20:15: Reserv1                                       :0x0
11:20:15: Time Access 1 TAAC                            :0xe
11:20:15: Time Access 2 NSAC*100                        :0x0
11:20:15: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:15: Card Command Classess CCC                     :0x5b5
11:20:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:15: DSR(driver stage register)  DSR_IMP           :0x0
11:20:15: Reserv2                                       :0x0
11:20:15: Device Size C_SIZE                            :0xedc8
11:20:15: Reserv3                                       :0x0
11:20:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:16: Reserv4                                       :0x0
11:20:16: Write Speed Factor R2W_FACTOR                 :0x2
11:20:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:16: FILE_FORMAT_GRP                               :0x0
11:20:16: COPY flag                                     :0x1
11:20:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:16: File_Format                                   :0x0
11:20:16: CRC                                           :0x0
11:20:16: ####CSD Registe Values####  

11:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216B40>, <py_sfcl.CommandDataDefinition object at 0x06268090>) , Command count = 1328 ] 
11:20:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x0627AB10>) , Command count = 1329 ] 
11:20:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AE70>, <py_sfcl.PySEnhancedCmdData object at 0x062734E0>, <None>, <py_sfcl.Command23 object at 0x06273F00>) , Command count = 1330 ] 
11:20:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:16: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:19: Host Frequency set to 25000 KHz
11:20:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F90>, 0x0, True) , Command count = 1331 ] 
11:20:19: [GO18_globalSetVolt]### Host voltage value is set.
11:20:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF660>, 0x0, False) , Command count = 1332 ] 
11:20:19: [GO18_globalSetVolt]### Host voltage value is set.
11:20:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1333 ] 
11:20:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1334 ] 
11:20:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1335 ] 
11:20:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D6C0>, <py_sfcl.CommandDataDefinition object at 0x0627D060>) , Command count = 1336 ] 
11:20:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216C00>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 1337 ] 
11:20:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1338 ] 
11:20:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:19: Host Frequency set to 25000 KHz
11:20:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:19: ####CSD Registe 2.0 Values####
11:20:19: CSD_STRUCTURE                                 :0x1
11:20:19: Reserv1                                       :0x0
11:20:19: Time Access 1 TAAC                            :0xe
11:20:19: Time Access 2 NSAC*100                        :0x0
11:20:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:19: Card Command Classess CCC                     :0x5b5
11:20:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:19: DSR(driver stage register)  DSR_IMP           :0x0
11:20:19: Reserv2                                       :0x0
11:20:19: Device Size C_SIZE                            :0xedc8
11:20:19: Reserv3                                       :0x0
11:20:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:19: Reserv4                                       :0x0
11:20:19: Write Speed Factor R2W_FACTOR                 :0x2
11:20:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:19: FILE_FORMAT_GRP                               :0x0
11:20:19: COPY flag                                     :0x1
11:20:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:19: File_Format                                   :0x0
11:20:19: CRC                                           :0x0
11:20:19: ####CSD Registe Values####  

11:20:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:19: [GetSCRRegisterEntry] Passed
11:20:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:19: Data_Status_After Erases          : 0
11:20:19: CPRM Security Support             : No Security
11:20:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:19: Spec. Version                     : Version 3.0X
11:20:19: Extended Security Support         : Extended_Security_Not_Supported
11:20:19: Command Support                   : COMMAND_SUPPORT
11:20:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF90>, <py_sfcl.CommandDataDefinition object at 0x06268C90>) , Command count = 1339 ] 
11:20:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E10>, <py_sfcl.CommandDataDefinition object at 0x062680F0>) , Command count = 1340 ] 
11:20:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:19: [ SetBusWidth(0x4) , Command count = 1341 ] 
11:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1342 ] 
11:20:19: Protected Area Size 0x28000
11:20:19: Bus Width           2
11:20:19: Secure Mode         0
11:20:19: Speed  Class        4
11:20:19: Perf Move           0
11:20:19: Au Size             9
11:20:19: Erase Size          15
11:20:19: Erase Timeout       1
11:20:19: Erase offset        1
11:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1343 ] 
11:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:19: Host Frequency set to 100000 KHz
11:20:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:20: ####CSD Registe 2.0 Values####
11:20:20: CSD_STRUCTURE                                 :0x1
11:20:20: Reserv1                                       :0x0
11:20:20: Time Access 1 TAAC                            :0xe
11:20:20: Time Access 2 NSAC*100                        :0x0
11:20:20: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:20: Card Command Classess CCC                     :0x5b5
11:20:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:20: DSR(driver stage register)  DSR_IMP           :0x0
11:20:20: Reserv2                                       :0x0
11:20:20: Device Size C_SIZE                            :0xedc8
11:20:20: Reserv3                                       :0x0
11:20:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:20: Reserv4                                       :0x0
11:20:20: Write Speed Factor R2W_FACTOR                 :0x2
11:20:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:20: FILE_FORMAT_GRP                               :0x0
11:20:20: COPY flag                                     :0x1
11:20:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:20: File_Format                                   :0x0
11:20:20: CRC                                           :0x0
11:20:20: ####CSD Registe Values####  

11:20:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC30>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 1344 ] 
11:20:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 1345 ] 
11:20:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268B70>, <py_sfcl.PySEnhancedCmdData object at 0x06268DE0>, <None>, <py_sfcl.Command23 object at 0x06268750>) , Command count = 1346 ] 
11:20:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:21: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:23: Host Frequency set to 25000 KHz
11:20:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:23: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216990>, 0x0, True) , Command count = 1347 ] 
11:20:23: [GO18_globalSetVolt]### Host voltage value is set.
11:20:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x062690C0>, 0x0, False) , Command count = 1348 ] 
11:20:23: [GO18_globalSetVolt]### Host voltage value is set.
11:20:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1349 ] 
11:20:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1350 ] 
11:20:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1351 ] 
11:20:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D330>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 1352 ] 
11:20:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3C0>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 1353 ] 
11:20:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1354 ] 
11:20:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:23: Host Frequency set to 25000 KHz
11:20:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:23: ####CSD Registe 2.0 Values####
11:20:23: CSD_STRUCTURE                                 :0x1
11:20:23: Reserv1                                       :0x0
11:20:23: Time Access 1 TAAC                            :0xe
11:20:23: Time Access 2 NSAC*100                        :0x0
11:20:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:23: Card Command Classess CCC                     :0x5b5
11:20:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:23: DSR(driver stage register)  DSR_IMP           :0x0
11:20:23: Reserv2                                       :0x0
11:20:23: Device Size C_SIZE                            :0xedc8
11:20:23: Reserv3                                       :0x0
11:20:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:23: Reserv4                                       :0x0
11:20:23: Write Speed Factor R2W_FACTOR                 :0x2
11:20:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:23: FILE_FORMAT_GRP                               :0x0
11:20:23: COPY flag                                     :0x1
11:20:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:23: File_Format                                   :0x0
11:20:23: CRC                                           :0x0
11:20:23: ####CSD Registe Values####  

11:20:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:23: [GetSCRRegisterEntry] Passed
11:20:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:23: Data_Status_After Erases          : 0
11:20:23: CPRM Security Support             : No Security
11:20:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:23: Spec. Version                     : Version 3.0X
11:20:23: Extended Security Support         : Extended_Security_Not_Supported
11:20:23: Command Support                   : COMMAND_SUPPORT
11:20:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 1355 ] 
11:20:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269210>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 1356 ] 
11:20:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:23: [ SetBusWidth(0x4) , Command count = 1357 ] 
11:20:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1358 ] 
11:20:23: Protected Area Size 0x28000
11:20:23: Bus Width           2
11:20:24: Secure Mode         0
11:20:24: Speed  Class        4
11:20:24: Perf Move           0
11:20:24: Au Size             9
11:20:24: Erase Size          15
11:20:24: Erase Timeout       1
11:20:24: Erase offset        1
11:20:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1359 ] 
11:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:24: Host Frequency set to 100000 KHz
11:20:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:24: ####CSD Registe 2.0 Values####
11:20:24: CSD_STRUCTURE                                 :0x1
11:20:24: Reserv1                                       :0x0
11:20:24: Time Access 1 TAAC                            :0xe
11:20:24: Time Access 2 NSAC*100                        :0x0
11:20:24: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:24: Card Command Classess CCC                     :0x5b5
11:20:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:24: DSR(driver stage register)  DSR_IMP           :0x0
11:20:24: Reserv2                                       :0x0
11:20:24: Device Size C_SIZE                            :0xedc8
11:20:24: Reserv3                                       :0x0
11:20:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:24: Reserv4                                       :0x0
11:20:24: Write Speed Factor R2W_FACTOR                 :0x2
11:20:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:24: FILE_FORMAT_GRP                               :0x0
11:20:24: COPY flag                                     :0x1
11:20:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:24: File_Format                                   :0x0
11:20:24: CRC                                           :0x0
11:20:24: ####CSD Registe Values####  

11:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062166C0>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 1360 ] 
11:20:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D120>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 1361 ] 
11:20:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216510>, <py_sfcl.PySEnhancedCmdData object at 0x062687B0>, <None>, <py_sfcl.Command23 object at 0x06268450>) , Command count = 1362 ] 
11:20:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:27: Host Frequency set to 25000 KHz
11:20:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:27: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D540>, 0x0, True) , Command count = 1363 ] 
11:20:27: [GO18_globalSetVolt]### Host voltage value is set.
11:20:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D600>, 0x0, False) , Command count = 1364 ] 
11:20:27: [GO18_globalSetVolt]### Host voltage value is set.
11:20:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1365 ] 
11:20:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1366 ] 
11:20:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1367 ] 
11:20:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062693C0>, <py_sfcl.CommandDataDefinition object at 0x06269900>) , Command count = 1368 ] 
11:20:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x06269090>) , Command count = 1369 ] 
11:20:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1370 ] 
11:20:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:28: Host Frequency set to 25000 KHz
11:20:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:28: ####CSD Registe 2.0 Values####
11:20:28: CSD_STRUCTURE                                 :0x1
11:20:28: Reserv1                                       :0x0
11:20:28: Time Access 1 TAAC                            :0xe
11:20:28: Time Access 2 NSAC*100                        :0x0
11:20:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:28: Card Command Classess CCC                     :0x5b5
11:20:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:28: DSR(driver stage register)  DSR_IMP           :0x0
11:20:28: Reserv2                                       :0x0
11:20:28: Device Size C_SIZE                            :0xedc8
11:20:28: Reserv3                                       :0x0
11:20:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:28: Reserv4                                       :0x0
11:20:28: Write Speed Factor R2W_FACTOR                 :0x2
11:20:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:28: FILE_FORMAT_GRP                               :0x0
11:20:28: COPY flag                                     :0x1
11:20:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:28: File_Format                                   :0x0
11:20:28: CRC                                           :0x0
11:20:28: ####CSD Registe Values####  

11:20:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:28: [GetSCRRegisterEntry] Passed
11:20:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:28: Data_Status_After Erases          : 0
11:20:28: CPRM Security Support             : No Security
11:20:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:28: Spec. Version                     : Version 3.0X
11:20:28: Extended Security Support         : Extended_Security_Not_Supported
11:20:28: Command Support                   : COMMAND_SUPPORT
11:20:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C00>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 1371 ] 
11:20:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276660>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 1372 ] 
11:20:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:28: [ SetBusWidth(0x4) , Command count = 1373 ] 
11:20:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1374 ] 
11:20:28: Protected Area Size 0x28000
11:20:28: Bus Width           2
11:20:28: Secure Mode         0
11:20:28: Speed  Class        4
11:20:28: Perf Move           0
11:20:28: Au Size             9
11:20:28: Erase Size          15
11:20:28: Erase Timeout       1
11:20:28: Erase offset        1
11:20:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1375 ] 
11:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:28: Host Frequency set to 100000 KHz
11:20:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:28: ####CSD Registe 2.0 Values####
11:20:28: CSD_STRUCTURE                                 :0x1
11:20:28: Reserv1                                       :0x0
11:20:28: Time Access 1 TAAC                            :0xe
11:20:28: Time Access 2 NSAC*100                        :0x0
11:20:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:28: Card Command Classess CCC                     :0x5b5
11:20:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:28: DSR(driver stage register)  DSR_IMP           :0x0
11:20:28: Reserv2                                       :0x0
11:20:28: Device Size C_SIZE                            :0xedc8
11:20:28: Reserv3                                       :0x0
11:20:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:29: Reserv4                                       :0x0
11:20:29: Write Speed Factor R2W_FACTOR                 :0x2
11:20:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:29: FILE_FORMAT_GRP                               :0x0
11:20:29: COPY flag                                     :0x1
11:20:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:29: File_Format                                   :0x0
11:20:29: CRC                                           :0x0
11:20:29: ####CSD Registe Values####  

11:20:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697E0>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 1376 ] 
11:20:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268900>) , Command count = 1377 ] 
11:20:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062695D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062689C0>, <py_sfcl.PySEnhancedCmdData object at 0x06268CF0>, <None>, <py_sfcl.Command23 object at 0x06268060>) , Command count = 1378 ] 
11:20:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:32: Host Frequency set to 25000 KHz
11:20:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276480>, 0x0, True) , Command count = 1379 ] 
11:20:32: [GO18_globalSetVolt]### Host voltage value is set.
11:20:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x062698D0>, 0x0, False) , Command count = 1380 ] 
11:20:32: [GO18_globalSetVolt]### Host voltage value is set.
11:20:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1381 ] 
11:20:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1382 ] 
11:20:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1383 ] 
11:20:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D780>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 1384 ] 
11:20:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 1385 ] 
11:20:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1386 ] 
11:20:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:32: Host Frequency set to 25000 KHz
11:20:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:32: ####CSD Registe 2.0 Values####
11:20:32: CSD_STRUCTURE                                 :0x1
11:20:32: Reserv1                                       :0x0
11:20:32: Time Access 1 TAAC                            :0xe
11:20:32: Time Access 2 NSAC*100                        :0x0
11:20:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:32: Card Command Classess CCC                     :0x5b5
11:20:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:32: DSR(driver stage register)  DSR_IMP           :0x0
11:20:32: Reserv2                                       :0x0
11:20:32: Device Size C_SIZE                            :0xedc8
11:20:32: Reserv3                                       :0x0
11:20:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:32: Reserv4                                       :0x0
11:20:32: Write Speed Factor R2W_FACTOR                 :0x2
11:20:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:32: FILE_FORMAT_GRP                               :0x0
11:20:32: COPY flag                                     :0x1
11:20:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:32: File_Format                                   :0x0
11:20:32: CRC                                           :0x0
11:20:32: ####CSD Registe Values####  

11:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:32: [GetSCRRegisterEntry] Passed
11:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:32: Data_Status_After Erases          : 0
11:20:32: CPRM Security Support             : No Security
11:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:32: Spec. Version                     : Version 3.0X
11:20:32: Extended Security Support         : Extended_Security_Not_Supported
11:20:32: Command Support                   : COMMAND_SUPPORT
11:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 1387 ] 
11:20:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D360>, <py_sfcl.CommandDataDefinition object at 0x06269F00>) , Command count = 1388 ] 
11:20:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:32: [ SetBusWidth(0x4) , Command count = 1389 ] 
11:20:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1390 ] 
11:20:32: Protected Area Size 0x28000
11:20:32: Bus Width           2
11:20:32: Secure Mode         0
11:20:32: Speed  Class        4
11:20:32: Perf Move           0
11:20:32: Au Size             9
11:20:32: Erase Size          15
11:20:32: Erase Timeout       1
11:20:32: Erase offset        1
11:20:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1391 ] 
11:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:32: Host Frequency set to 100000 KHz
11:20:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:33: ####CSD Registe 2.0 Values####
11:20:33: CSD_STRUCTURE                                 :0x1
11:20:33: Reserv1                                       :0x0
11:20:33: Time Access 1 TAAC                            :0xe
11:20:33: Time Access 2 NSAC*100                        :0x0
11:20:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:33: Card Command Classess CCC                     :0x5b5
11:20:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:33: DSR(driver stage register)  DSR_IMP           :0x0
11:20:33: Reserv2                                       :0x0
11:20:33: Device Size C_SIZE                            :0xedc8
11:20:33: Reserv3                                       :0x0
11:20:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:33: Reserv4                                       :0x0
11:20:33: Write Speed Factor R2W_FACTOR                 :0x2
11:20:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:33: FILE_FORMAT_GRP                               :0x0
11:20:33: COPY flag                                     :0x1
11:20:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:33: File_Format                                   :0x0
11:20:33: CRC                                           :0x0
11:20:33: ####CSD Registe Values####  

11:20:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D630>, <py_sfcl.CommandDataDefinition object at 0x0626D5D0>) , Command count = 1392 ] 
11:20:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627A900>) , Command count = 1393 ] 
11:20:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268E10>, <py_sfcl.PySEnhancedCmdData object at 0x06269B10>, <None>, <py_sfcl.Command23 object at 0x06268FC0>) , Command count = 1394 ] 
11:20:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:36: Host Frequency set to 25000 KHz
11:20:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D6C0>, 0x0, True) , Command count = 1395 ] 
11:20:36: [GO18_globalSetVolt]### Host voltage value is set.
11:20:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D480>, 0x0, False) , Command count = 1396 ] 
11:20:36: [GO18_globalSetVolt]### Host voltage value is set.
11:20:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1397 ] 
11:20:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1398 ] 
11:20:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1399 ] 
11:20:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D4B0>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 1400 ] 
11:20:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 1401 ] 
11:20:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1402 ] 
11:20:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:36: Host Frequency set to 25000 KHz
11:20:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:36: ####CSD Registe 2.0 Values####
11:20:36: CSD_STRUCTURE                                 :0x1
11:20:36: Reserv1                                       :0x0
11:20:36: Time Access 1 TAAC                            :0xe
11:20:36: Time Access 2 NSAC*100                        :0x0
11:20:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:36: Card Command Classess CCC                     :0x5b5
11:20:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:36: DSR(driver stage register)  DSR_IMP           :0x0
11:20:36: Reserv2                                       :0x0
11:20:36: Device Size C_SIZE                            :0xedc8
11:20:36: Reserv3                                       :0x0
11:20:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:36: Reserv4                                       :0x0
11:20:36: Write Speed Factor R2W_FACTOR                 :0x2
11:20:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:36: FILE_FORMAT_GRP                               :0x0
11:20:36: COPY flag                                     :0x1
11:20:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:36: File_Format                                   :0x0
11:20:36: CRC                                           :0x0
11:20:36: ####CSD Registe Values####  

11:20:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:36: [GetSCRRegisterEntry] Passed
11:20:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:36: Data_Status_After Erases          : 0
11:20:36: CPRM Security Support             : No Security
11:20:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:36: Spec. Version                     : Version 3.0X
11:20:36: Extended Security Support         : Extended_Security_Not_Supported
11:20:36: Command Support                   : COMMAND_SUPPORT
11:20:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626D120>) , Command count = 1403 ] 
11:20:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x0626D870>) , Command count = 1404 ] 
11:20:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:36: [ SetBusWidth(0x4) , Command count = 1405 ] 
11:20:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1406 ] 
11:20:36: Protected Area Size 0x28000
11:20:36: Bus Width           2
11:20:37: Secure Mode         0
11:20:37: Speed  Class        4
11:20:37: Perf Move           0
11:20:37: Au Size             9
11:20:37: Erase Size          15
11:20:37: Erase Timeout       1
11:20:37: Erase offset        1
11:20:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1407 ] 
11:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:37: Host Frequency set to 100000 KHz
11:20:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:37: ####CSD Registe 2.0 Values####
11:20:37: CSD_STRUCTURE                                 :0x1
11:20:37: Reserv1                                       :0x0
11:20:37: Time Access 1 TAAC                            :0xe
11:20:37: Time Access 2 NSAC*100                        :0x0
11:20:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:37: Card Command Classess CCC                     :0x5b5
11:20:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:37: DSR(driver stage register)  DSR_IMP           :0x0
11:20:37: Reserv2                                       :0x0
11:20:37: Device Size C_SIZE                            :0xedc8
11:20:37: Reserv3                                       :0x0
11:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:38: Reserv4                                       :0x0
11:20:38: Write Speed Factor R2W_FACTOR                 :0x2
11:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:38: FILE_FORMAT_GRP                               :0x0
11:20:38: COPY flag                                     :0x1
11:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:38: File_Format                                   :0x0
11:20:38: CRC                                           :0x0
11:20:38: ####CSD Registe Values####  

11:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAB0>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 1408 ] 
11:20:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D930>, <py_sfcl.CommandDataDefinition object at 0x06269A50>) , Command count = 1409 ] 
11:20:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269600>, <py_sfcl.PySEnhancedCmdData object at 0x06269BD0>, <None>, <py_sfcl.Command23 object at 0x062691E0>) , Command count = 1410 ] 
11:20:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:40: Host Frequency set to 25000 KHz
11:20:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DEA0>, 0x0, True) , Command count = 1411 ] 
11:20:40: [GO18_globalSetVolt]### Host voltage value is set.
11:20:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D780>, 0x0, False) , Command count = 1412 ] 
11:20:40: [GO18_globalSetVolt]### Host voltage value is set.
11:20:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1413 ] 
11:20:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1414 ] 
11:20:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1415 ] 
11:20:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB70>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 1416 ] 
11:20:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0C0>, <py_sfcl.CommandDataDefinition object at 0x0626D090>) , Command count = 1417 ] 
11:20:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1418 ] 
11:20:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:41: Host Frequency set to 25000 KHz
11:20:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:41: ####CSD Registe 2.0 Values####
11:20:41: CSD_STRUCTURE                                 :0x1
11:20:41: Reserv1                                       :0x0
11:20:41: Time Access 1 TAAC                            :0xe
11:20:41: Time Access 2 NSAC*100                        :0x0
11:20:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:41: Card Command Classess CCC                     :0x5b5
11:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:41: DSR(driver stage register)  DSR_IMP           :0x0
11:20:41: Reserv2                                       :0x0
11:20:41: Device Size C_SIZE                            :0xedc8
11:20:41: Reserv3                                       :0x0
11:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:41: Reserv4                                       :0x0
11:20:41: Write Speed Factor R2W_FACTOR                 :0x2
11:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:41: FILE_FORMAT_GRP                               :0x0
11:20:41: COPY flag                                     :0x1
11:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:41: File_Format                                   :0x0
11:20:41: CRC                                           :0x0
11:20:41: ####CSD Registe Values####  

11:20:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:41: [GetSCRRegisterEntry] Passed
11:20:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:41: Data_Status_After Erases          : 0
11:20:41: CPRM Security Support             : No Security
11:20:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:41: Spec. Version                     : Version 3.0X
11:20:41: Extended Security Support         : Extended_Security_Not_Supported
11:20:41: Command Support                   : COMMAND_SUPPORT
11:20:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D690>, <py_sfcl.CommandDataDefinition object at 0x0626D1B0>) , Command count = 1419 ] 
11:20:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D810>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 1420 ] 
11:20:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:41: [ SetBusWidth(0x4) , Command count = 1421 ] 
11:20:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1422 ] 
11:20:41: Protected Area Size 0x28000
11:20:41: Bus Width           2
11:20:41: Secure Mode         0
11:20:41: Speed  Class        4
11:20:41: Perf Move           0
11:20:41: Au Size             9
11:20:41: Erase Size          15
11:20:41: Erase Timeout       1
11:20:41: Erase offset        1
11:20:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1423 ] 
11:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:42: Host Frequency set to 100000 KHz
11:20:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:42: ####CSD Registe 2.0 Values####
11:20:42: CSD_STRUCTURE                                 :0x1
11:20:42: Reserv1                                       :0x0
11:20:42: Time Access 1 TAAC                            :0xe
11:20:42: Time Access 2 NSAC*100                        :0x0
11:20:42: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:42: Card Command Classess CCC                     :0x5b5
11:20:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:42: DSR(driver stage register)  DSR_IMP           :0x0
11:20:42: Reserv2                                       :0x0
11:20:42: Device Size C_SIZE                            :0xedc8
11:20:42: Reserv3                                       :0x0
11:20:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:42: Reserv4                                       :0x0
11:20:42: Write Speed Factor R2W_FACTOR                 :0x2
11:20:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:42: FILE_FORMAT_GRP                               :0x0
11:20:42: COPY flag                                     :0x1
11:20:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:42: File_Format                                   :0x0
11:20:42: CRC                                           :0x0
11:20:42: ####CSD Registe Values####  

11:20:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 1424 ] 
11:20:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 1425 ] 
11:20:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06269F60>, <None>, <py_sfcl.Command23 object at 0x062691B0>) , Command count = 1426 ] 
11:20:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:43: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:45: Host Frequency set to 25000 KHz
11:20:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:45: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AEA0>, 0x0, True) , Command count = 1427 ] 
11:20:45: [GO18_globalSetVolt]### Host voltage value is set.
11:20:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DE10>, 0x0, False) , Command count = 1428 ] 
11:20:45: [GO18_globalSetVolt]### Host voltage value is set.
11:20:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1429 ] 
11:20:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1430 ] 
11:20:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1431 ] 
11:20:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DA50>, <py_sfcl.CommandDataDefinition object at 0x0626D510>) , Command count = 1432 ] 
11:20:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB40>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 1433 ] 
11:20:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1434 ] 
11:20:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:45: Host Frequency set to 25000 KHz
11:20:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:45: ####CSD Registe 2.0 Values####
11:20:45: CSD_STRUCTURE                                 :0x1
11:20:45: Reserv1                                       :0x0
11:20:45: Time Access 1 TAAC                            :0xe
11:20:45: Time Access 2 NSAC*100                        :0x0
11:20:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:45: Card Command Classess CCC                     :0x5b5
11:20:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:45: DSR(driver stage register)  DSR_IMP           :0x0
11:20:45: Reserv2                                       :0x0
11:20:45: Device Size C_SIZE                            :0xedc8
11:20:45: Reserv3                                       :0x0
11:20:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:45: Reserv4                                       :0x0
11:20:45: Write Speed Factor R2W_FACTOR                 :0x2
11:20:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:45: FILE_FORMAT_GRP                               :0x0
11:20:45: COPY flag                                     :0x1
11:20:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:45: File_Format                                   :0x0
11:20:45: CRC                                           :0x0
11:20:45: ####CSD Registe Values####  

11:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:45: [GetSCRRegisterEntry] Passed
11:20:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:45: Data_Status_After Erases          : 0
11:20:45: CPRM Security Support             : No Security
11:20:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:45: Spec. Version                     : Version 3.0X
11:20:45: Extended Security Support         : Extended_Security_Not_Supported
11:20:45: Command Support                   : COMMAND_SUPPORT
11:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D3C0>, <py_sfcl.CommandDataDefinition object at 0x0627A0F0>) , Command count = 1435 ] 
11:20:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCC0>, <py_sfcl.CommandDataDefinition object at 0x06269CC0>) , Command count = 1436 ] 
11:20:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:45: [ SetBusWidth(0x4) , Command count = 1437 ] 
11:20:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1438 ] 
11:20:45: Protected Area Size 0x28000
11:20:45: Bus Width           2
11:20:45: Secure Mode         0
11:20:45: Speed  Class        4
11:20:45: Perf Move           0
11:20:45: Au Size             9
11:20:45: Erase Size          15
11:20:45: Erase Timeout       1
11:20:45: Erase offset        1
11:20:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1439 ] 
11:20:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:46: Host Frequency set to 100000 KHz
11:20:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:46: ####CSD Registe 2.0 Values####
11:20:46: CSD_STRUCTURE                                 :0x1
11:20:46: Reserv1                                       :0x0
11:20:46: Time Access 1 TAAC                            :0xe
11:20:46: Time Access 2 NSAC*100                        :0x0
11:20:46: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:46: Card Command Classess CCC                     :0x5b5
11:20:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:46: DSR(driver stage register)  DSR_IMP           :0x0
11:20:46: Reserv2                                       :0x0
11:20:46: Device Size C_SIZE                            :0xedc8
11:20:46: Reserv3                                       :0x0
11:20:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:46: Reserv4                                       :0x0
11:20:46: Write Speed Factor R2W_FACTOR                 :0x2
11:20:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:46: FILE_FORMAT_GRP                               :0x0
11:20:46: COPY flag                                     :0x1
11:20:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:46: File_Format                                   :0x0
11:20:46: CRC                                           :0x0
11:20:46: ####CSD Registe Values####  

11:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DA80>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 1440 ] 
11:20:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 1441 ] 
11:20:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D7B0>, <py_sfcl.PySEnhancedCmdData object at 0x06273570>, <None>, <py_sfcl.Command23 object at 0x06269E40>) , Command count = 1442 ] 
11:20:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:49: Host Frequency set to 25000 KHz
11:20:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C90>, 0x0, True) , Command count = 1443 ] 
11:20:49: [GO18_globalSetVolt]### Host voltage value is set.
11:20:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268180>, 0x0, False) , Command count = 1444 ] 
11:20:49: [GO18_globalSetVolt]### Host voltage value is set.
11:20:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1445 ] 
11:20:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1446 ] 
11:20:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1447 ] 
11:20:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DFC0>, <py_sfcl.CommandDataDefinition object at 0x0627DA20>) , Command count = 1448 ] 
11:20:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 1449 ] 
11:20:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1450 ] 
11:20:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:50: Host Frequency set to 25000 KHz
11:20:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:50: ####CSD Registe 2.0 Values####
11:20:50: CSD_STRUCTURE                                 :0x1
11:20:50: Reserv1                                       :0x0
11:20:50: Time Access 1 TAAC                            :0xe
11:20:50: Time Access 2 NSAC*100                        :0x0
11:20:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:50: Card Command Classess CCC                     :0x5b5
11:20:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:50: DSR(driver stage register)  DSR_IMP           :0x0
11:20:50: Reserv2                                       :0x0
11:20:50: Device Size C_SIZE                            :0xedc8
11:20:50: Reserv3                                       :0x0
11:20:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:50: Reserv4                                       :0x0
11:20:50: Write Speed Factor R2W_FACTOR                 :0x2
11:20:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:50: FILE_FORMAT_GRP                               :0x0
11:20:50: COPY flag                                     :0x1
11:20:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:50: File_Format                                   :0x0
11:20:50: CRC                                           :0x0
11:20:50: ####CSD Registe Values####  

11:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:50: [GetSCRRegisterEntry] Passed
11:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:50: Data_Status_After Erases          : 0
11:20:50: CPRM Security Support             : No Security
11:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:50: Spec. Version                     : Version 3.0X
11:20:50: Extended Security Support         : Extended_Security_Not_Supported
11:20:50: Command Support                   : COMMAND_SUPPORT
11:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273270>, <py_sfcl.CommandDataDefinition object at 0x06273D20>) , Command count = 1451 ] 
11:20:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 1452 ] 
11:20:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:50: [ SetBusWidth(0x4) , Command count = 1453 ] 
11:20:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062737E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1454 ] 
11:20:50: Protected Area Size 0x28000
11:20:50: Bus Width           2
11:20:50: Secure Mode         0
11:20:50: Speed  Class        4
11:20:50: Perf Move           0
11:20:50: Au Size             9
11:20:50: Erase Size          15
11:20:50: Erase Timeout       1
11:20:50: Erase offset        1
11:20:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1455 ] 
11:20:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:50: Host Frequency set to 100000 KHz
11:20:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:50: ####CSD Registe 2.0 Values####
11:20:50: CSD_STRUCTURE                                 :0x1
11:20:50: Reserv1                                       :0x0
11:20:50: Time Access 1 TAAC                            :0xe
11:20:50: Time Access 2 NSAC*100                        :0x0
11:20:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:50: Card Command Classess CCC                     :0x5b5
11:20:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:50: DSR(driver stage register)  DSR_IMP           :0x0
11:20:50: Reserv2                                       :0x0
11:20:50: Device Size C_SIZE                            :0xedc8
11:20:50: Reserv3                                       :0x0
11:20:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:51: Reserv4                                       :0x0
11:20:51: Write Speed Factor R2W_FACTOR                 :0x2
11:20:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:51: FILE_FORMAT_GRP                               :0x0
11:20:51: COPY flag                                     :0x1
11:20:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:51: File_Format                                   :0x0
11:20:51: CRC                                           :0x0
11:20:51: ####CSD Registe Values####  

11:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C60>, <py_sfcl.CommandDataDefinition object at 0x06273F30>) , Command count = 1456 ] 
11:20:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273360>, <py_sfcl.CommandDataDefinition object at 0x06273330>) , Command count = 1457 ] 
11:20:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273390>, <py_sfcl.PySEnhancedCmdData object at 0x06273A50>, <None>, <py_sfcl.Command23 object at 0x06273870>) , Command count = 1458 ] 
11:20:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:54: Host Frequency set to 25000 KHz
11:20:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DCF0>, 0x0, True) , Command count = 1459 ] 
11:20:54: [GO18_globalSetVolt]### Host voltage value is set.
11:20:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DB70>, 0x0, False) , Command count = 1460 ] 
11:20:54: [GO18_globalSetVolt]### Host voltage value is set.
11:20:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1461 ] 
11:20:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1462 ] 
11:20:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1463 ] 
11:20:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276030>, <py_sfcl.CommandDataDefinition object at 0x06273FC0>) , Command count = 1464 ] 
11:20:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DED0>, <py_sfcl.CommandDataDefinition object at 0x06273720>) , Command count = 1465 ] 
11:20:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1466 ] 
11:20:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:54: Host Frequency set to 25000 KHz
11:20:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:54: ####CSD Registe 2.0 Values####
11:20:54: CSD_STRUCTURE                                 :0x1
11:20:54: Reserv1                                       :0x0
11:20:54: Time Access 1 TAAC                            :0xe
11:20:54: Time Access 2 NSAC*100                        :0x0
11:20:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:54: Card Command Classess CCC                     :0x5b5
11:20:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:54: DSR(driver stage register)  DSR_IMP           :0x0
11:20:54: Reserv2                                       :0x0
11:20:54: Device Size C_SIZE                            :0xedc8
11:20:54: Reserv3                                       :0x0
11:20:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:54: Reserv4                                       :0x0
11:20:54: Write Speed Factor R2W_FACTOR                 :0x2
11:20:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:54: FILE_FORMAT_GRP                               :0x0
11:20:54: COPY flag                                     :0x1
11:20:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:54: File_Format                                   :0x0
11:20:54: CRC                                           :0x0
11:20:54: ####CSD Registe Values####  

11:20:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:54: [GetSCRRegisterEntry] Passed
11:20:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:54: Data_Status_After Erases          : 0
11:20:54: CPRM Security Support             : No Security
11:20:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:54: Spec. Version                     : Version 3.0X
11:20:54: Extended Security Support         : Extended_Security_Not_Supported
11:20:54: Command Support                   : COMMAND_SUPPORT
11:20:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 1467 ] 
11:20:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276330>, <py_sfcl.CommandDataDefinition object at 0x062733F0>) , Command count = 1468 ] 
11:20:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:54: [ SetBusWidth(0x4) , Command count = 1469 ] 
11:20:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062760C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1470 ] 
11:20:54: Protected Area Size 0x28000
11:20:54: Bus Width           2
11:20:54: Secure Mode         0
11:20:54: Speed  Class        4
11:20:54: Perf Move           0
11:20:54: Au Size             9
11:20:54: Erase Size          15
11:20:54: Erase Timeout       1
11:20:54: Erase offset        1
11:20:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1471 ] 
11:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:54: Host Frequency set to 100000 KHz
11:20:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:55: ####CSD Registe 2.0 Values####
11:20:55: CSD_STRUCTURE                                 :0x1
11:20:55: Reserv1                                       :0x0
11:20:55: Time Access 1 TAAC                            :0xe
11:20:55: Time Access 2 NSAC*100                        :0x0
11:20:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:55: Card Command Classess CCC                     :0x5b5
11:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:55: DSR(driver stage register)  DSR_IMP           :0x0
11:20:55: Reserv2                                       :0x0
11:20:55: Device Size C_SIZE                            :0xedc8
11:20:55: Reserv3                                       :0x0
11:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:55: Reserv4                                       :0x0
11:20:55: Write Speed Factor R2W_FACTOR                 :0x2
11:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:55: FILE_FORMAT_GRP                               :0x0
11:20:55: COPY flag                                     :0x1
11:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:55: File_Format                                   :0x0
11:20:55: CRC                                           :0x0
11:20:55: ####CSD Registe Values####  

11:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062762A0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 1472 ] 
11:20:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:20:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276B40>, <py_sfcl.CommandDataDefinition object at 0x06276B70>) , Command count = 1473 ] 
11:20:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:20:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:20:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:20:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:20:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x062737E0>, <None>, <py_sfcl.Command23 object at 0x06273BD0>) , Command count = 1474 ] 
11:20:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:20:56: [GO4_globalInitCard]### Switch to Specify Card Type
11:20:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:58: Host Frequency set to 25000 KHz
11:20:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:58: [GO18_globalSetVolt]### Set Host Voltage value.
11:20:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:20:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x062768A0>, 0x0, True) , Command count = 1475 ] 
11:20:58: [GO18_globalSetVolt]### Host voltage value is set.
11:20:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:20:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x062764E0>, 0x0, False) , Command count = 1476 ] 
11:20:58: [GO18_globalSetVolt]### Host voltage value is set.
11:20:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1477 ] 
11:20:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:20:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1478 ] 
11:20:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:20:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:20:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:20:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:20:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:20:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1479 ] 
11:20:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:20:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062766F0>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 1480 ] 
11:20:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x062765D0>) , Command count = 1481 ] 
11:20:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:20:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1482 ] 
11:20:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:20:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:20:58: Host Frequency set to 25000 KHz
11:20:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:20:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:59: ####CSD Registe 2.0 Values####
11:20:59: CSD_STRUCTURE                                 :0x1
11:20:59: Reserv1                                       :0x0
11:20:59: Time Access 1 TAAC                            :0xe
11:20:59: Time Access 2 NSAC*100                        :0x0
11:20:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:20:59: Card Command Classess CCC                     :0x5b5
11:20:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:59: DSR(driver stage register)  DSR_IMP           :0x0
11:20:59: Reserv2                                       :0x0
11:20:59: Device Size C_SIZE                            :0xedc8
11:20:59: Reserv3                                       :0x0
11:20:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:59: Reserv4                                       :0x0
11:20:59: Write Speed Factor R2W_FACTOR                 :0x2
11:20:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:59: FILE_FORMAT_GRP                               :0x0
11:20:59: COPY flag                                     :0x1
11:20:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:59: File_Format                                   :0x0
11:20:59: CRC                                           :0x0
11:20:59: ####CSD Registe Values####  

11:20:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:20:59: [GetSCRRegisterEntry] Passed
11:20:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:20:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:20:59: Data_Status_After Erases          : 0
11:20:59: CPRM Security Support             : No Security
11:20:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:20:59: Spec. Version                     : Version 3.0X
11:20:59: Extended Security Support         : Extended_Security_Not_Supported
11:20:59: Command Support                   : COMMAND_SUPPORT
11:20:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:20:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276AE0>, <py_sfcl.CommandDataDefinition object at 0x06276B10>) , Command count = 1483 ] 
11:20:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:20:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062769F0>, <py_sfcl.CommandDataDefinition object at 0x06276AB0>) , Command count = 1484 ] 
11:20:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:20:59: [ SetBusWidth(0x4) , Command count = 1485 ] 
11:20:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:20:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1486 ] 
11:20:59: Protected Area Size 0x28000
11:20:59: Bus Width           2
11:20:59: Secure Mode         0
11:20:59: Speed  Class        4
11:20:59: Perf Move           0
11:20:59: Au Size             9
11:20:59: Erase Size          15
11:20:59: Erase Timeout       1
11:20:59: Erase offset        1
11:20:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:20:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:20:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:20:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1487 ] 
11:20:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:20:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:20:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:20:59: Host Frequency set to 100000 KHz
11:20:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:20:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:20:59: ####CSD Registe 2.0 Values####
11:20:59: CSD_STRUCTURE                                 :0x1
11:20:59: Reserv1                                       :0x0
11:20:59: Time Access 1 TAAC                            :0xe
11:20:59: Time Access 2 NSAC*100                        :0x0
11:20:59: Data Transfer Rate TRAN_SPEED                 :0xb
11:20:59: Card Command Classess CCC                     :0x5b5
11:20:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:20:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:20:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:20:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:20:59: DSR(driver stage register)  DSR_IMP           :0x0
11:20:59: Reserv2                                       :0x0
11:20:59: Device Size C_SIZE                            :0xedc8
11:20:59: Reserv3                                       :0x0
11:20:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:20:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:20:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:20:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:20:59: Reserv4                                       :0x0
11:20:59: Write Speed Factor R2W_FACTOR                 :0x2
11:20:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:20:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:20:59: FILE_FORMAT_GRP                               :0x0
11:20:59: COPY flag                                     :0x1
11:20:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:20:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:20:59: File_Format                                   :0x0
11:20:59: CRC                                           :0x0
11:20:59: ####CSD Registe Values####  

11:20:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x062760C0>) , Command count = 1488 ] 
11:21:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F30>, <py_sfcl.CommandDataDefinition object at 0x0627D0C0>) , Command count = 1489 ] 
11:21:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276150>, <py_sfcl.PySEnhancedCmdData object at 0x06273C00>, <None>, <py_sfcl.Command23 object at 0x06273240>) , Command count = 1490 ] 
11:21:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:03: Host Frequency set to 25000 KHz
11:21:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276060>, 0x0, True) , Command count = 1491 ] 
11:21:03: [GO18_globalSetVolt]### Host voltage value is set.
11:21:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276BA0>, 0x0, False) , Command count = 1492 ] 
11:21:03: [GO18_globalSetVolt]### Host voltage value is set.
11:21:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1493 ] 
11:21:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1494 ] 
11:21:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1495 ] 
11:21:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC30>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 1496 ] 
11:21:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062765A0>, <py_sfcl.CommandDataDefinition object at 0x06276DB0>) , Command count = 1497 ] 
11:21:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1498 ] 
11:21:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:03: Host Frequency set to 25000 KHz
11:21:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:03: ####CSD Registe 2.0 Values####
11:21:03: CSD_STRUCTURE                                 :0x1
11:21:03: Reserv1                                       :0x0
11:21:03: Time Access 1 TAAC                            :0xe
11:21:03: Time Access 2 NSAC*100                        :0x0
11:21:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:03: Card Command Classess CCC                     :0x5b5
11:21:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:03: DSR(driver stage register)  DSR_IMP           :0x0
11:21:03: Reserv2                                       :0x0
11:21:03: Device Size C_SIZE                            :0xedc8
11:21:03: Reserv3                                       :0x0
11:21:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:03: Reserv4                                       :0x0
11:21:03: Write Speed Factor R2W_FACTOR                 :0x2
11:21:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:03: FILE_FORMAT_GRP                               :0x0
11:21:03: COPY flag                                     :0x1
11:21:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:03: File_Format                                   :0x0
11:21:03: CRC                                           :0x0
11:21:03: ####CSD Registe Values####  

11:21:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:03: [GetSCRRegisterEntry] Passed
11:21:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:03: Data_Status_After Erases          : 0
11:21:03: CPRM Security Support             : No Security
11:21:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:03: Spec. Version                     : Version 3.0X
11:21:03: Extended Security Support         : Extended_Security_Not_Supported
11:21:03: Command Support                   : COMMAND_SUPPORT
11:21:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F00>, <py_sfcl.CommandDataDefinition object at 0x06276510>) , Command count = 1499 ] 
11:21:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276840>, <py_sfcl.CommandDataDefinition object at 0x062766C0>) , Command count = 1500 ] 
11:21:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:03: [ SetBusWidth(0x4) , Command count = 1501 ] 
11:21:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062763F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1502 ] 
11:21:03: Protected Area Size 0x28000
11:21:03: Bus Width           2
11:21:03: Secure Mode         0
11:21:03: Speed  Class        4
11:21:03: Perf Move           0
11:21:03: Au Size             9
11:21:03: Erase Size          15
11:21:03: Erase Timeout       1
11:21:03: Erase offset        1
11:21:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1503 ] 
11:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:03: Host Frequency set to 100000 KHz
11:21:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:04: ####CSD Registe 2.0 Values####
11:21:04: CSD_STRUCTURE                                 :0x1
11:21:04: Reserv1                                       :0x0
11:21:04: Time Access 1 TAAC                            :0xe
11:21:04: Time Access 2 NSAC*100                        :0x0
11:21:04: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:04: Card Command Classess CCC                     :0x5b5
11:21:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:04: DSR(driver stage register)  DSR_IMP           :0x0
11:21:04: Reserv2                                       :0x0
11:21:04: Device Size C_SIZE                            :0xedc8
11:21:04: Reserv3                                       :0x0
11:21:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:04: Reserv4                                       :0x0
11:21:04: Write Speed Factor R2W_FACTOR                 :0x2
11:21:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:04: FILE_FORMAT_GRP                               :0x0
11:21:04: COPY flag                                     :0x1
11:21:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:04: File_Format                                   :0x0
11:21:04: CRC                                           :0x0
11:21:04: ####CSD Registe Values####  

11:21:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC90>, <py_sfcl.CommandDataDefinition object at 0x06276C60>) , Command count = 1504 ] 
11:21:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D240>, <py_sfcl.CommandDataDefinition object at 0x0626D270>) , Command count = 1505 ] 
11:21:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062767B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DB40>, <py_sfcl.PySEnhancedCmdData object at 0x06273600>, <None>, <py_sfcl.Command23 object at 0x06273DE0>) , Command count = 1506 ] 
11:21:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:07: Host Frequency set to 25000 KHz
11:21:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x062763C0>, 0x0, True) , Command count = 1507 ] 
11:21:07: [GO18_globalSetVolt]### Host voltage value is set.
11:21:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x062767E0>, 0x0, False) , Command count = 1508 ] 
11:21:07: [GO18_globalSetVolt]### Host voltage value is set.
11:21:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1509 ] 
11:21:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1510 ] 
11:21:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1511 ] 
11:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276990>, <py_sfcl.CommandDataDefinition object at 0x0627A2D0>) , Command count = 1512 ] 
11:21:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276720>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 1513 ] 
11:21:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1514 ] 
11:21:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:08: Host Frequency set to 25000 KHz
11:21:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:08: ####CSD Registe 2.0 Values####
11:21:08: CSD_STRUCTURE                                 :0x1
11:21:08: Reserv1                                       :0x0
11:21:08: Time Access 1 TAAC                            :0xe
11:21:08: Time Access 2 NSAC*100                        :0x0
11:21:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:08: Card Command Classess CCC                     :0x5b5
11:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:08: DSR(driver stage register)  DSR_IMP           :0x0
11:21:08: Reserv2                                       :0x0
11:21:08: Device Size C_SIZE                            :0xedc8
11:21:08: Reserv3                                       :0x0
11:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:08: Reserv4                                       :0x0
11:21:08: Write Speed Factor R2W_FACTOR                 :0x2
11:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:08: FILE_FORMAT_GRP                               :0x0
11:21:08: COPY flag                                     :0x1
11:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:08: File_Format                                   :0x0
11:21:08: CRC                                           :0x0
11:21:08: ####CSD Registe Values####  

11:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:08: [GetSCRRegisterEntry] Passed
11:21:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:08: Data_Status_After Erases          : 0
11:21:08: CPRM Security Support             : No Security
11:21:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:08: Spec. Version                     : Version 3.0X
11:21:08: Extended Security Support         : Extended_Security_Not_Supported
11:21:08: Command Support                   : COMMAND_SUPPORT
11:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5D0>, <py_sfcl.CommandDataDefinition object at 0x0627A6C0>) , Command count = 1515 ] 
11:21:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F30>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 1516 ] 
11:21:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:08: [ SetBusWidth(0x4) , Command count = 1517 ] 
11:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1518 ] 
11:21:08: Protected Area Size 0x28000
11:21:08: Bus Width           2
11:21:08: Secure Mode         0
11:21:08: Speed  Class        4
11:21:08: Perf Move           0
11:21:08: Au Size             9
11:21:08: Erase Size          15
11:21:08: Erase Timeout       1
11:21:08: Erase offset        1
11:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1519 ] 
11:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:08: Host Frequency set to 100000 KHz
11:21:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:08: ####CSD Registe 2.0 Values####
11:21:08: CSD_STRUCTURE                                 :0x1
11:21:08: Reserv1                                       :0x0
11:21:08: Time Access 1 TAAC                            :0xe
11:21:08: Time Access 2 NSAC*100                        :0x0
11:21:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:08: Card Command Classess CCC                     :0x5b5
11:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:08: DSR(driver stage register)  DSR_IMP           :0x0
11:21:08: Reserv2                                       :0x0
11:21:08: Device Size C_SIZE                            :0xedc8
11:21:08: Reserv3                                       :0x0
11:21:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:09: Reserv4                                       :0x0
11:21:09: Write Speed Factor R2W_FACTOR                 :0x2
11:21:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:09: FILE_FORMAT_GRP                               :0x0
11:21:09: COPY flag                                     :0x1
11:21:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:09: File_Format                                   :0x0
11:21:09: CRC                                           :0x0
11:21:09: ####CSD Registe Values####  

11:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD20>, <py_sfcl.CommandDataDefinition object at 0x06276C00>) , Command count = 1520 ] 
11:21:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 1521 ] 
11:21:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBD0>, <py_sfcl.PySEnhancedCmdData object at 0x06273C30>, <None>, <py_sfcl.Command23 object at 0x06273A20>) , Command count = 1522 ] 
11:21:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:12: Host Frequency set to 25000 KHz
11:21:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276870>, 0x0, True) , Command count = 1523 ] 
11:21:12: [GO18_globalSetVolt]### Host voltage value is set.
11:21:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276540>, 0x0, False) , Command count = 1524 ] 
11:21:12: [GO18_globalSetVolt]### Host voltage value is set.
11:21:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1525 ] 
11:21:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1526 ] 
11:21:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1527 ] 
11:21:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627AA20>) , Command count = 1528 ] 
11:21:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x0627A420>) , Command count = 1529 ] 
11:21:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1530 ] 
11:21:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:12: Host Frequency set to 25000 KHz
11:21:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:12: ####CSD Registe 2.0 Values####
11:21:12: CSD_STRUCTURE                                 :0x1
11:21:12: Reserv1                                       :0x0
11:21:12: Time Access 1 TAAC                            :0xe
11:21:12: Time Access 2 NSAC*100                        :0x0
11:21:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:12: Card Command Classess CCC                     :0x5b5
11:21:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:12: DSR(driver stage register)  DSR_IMP           :0x0
11:21:12: Reserv2                                       :0x0
11:21:12: Device Size C_SIZE                            :0xedc8
11:21:12: Reserv3                                       :0x0
11:21:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:12: Reserv4                                       :0x0
11:21:12: Write Speed Factor R2W_FACTOR                 :0x2
11:21:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:12: FILE_FORMAT_GRP                               :0x0
11:21:12: COPY flag                                     :0x1
11:21:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:12: File_Format                                   :0x0
11:21:12: CRC                                           :0x0
11:21:12: ####CSD Registe Values####  

11:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:12: [GetSCRRegisterEntry] Passed
11:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:12: Data_Status_After Erases          : 0
11:21:12: CPRM Security Support             : No Security
11:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:12: Spec. Version                     : Version 3.0X
11:21:12: Extended Security Support         : Extended_Security_Not_Supported
11:21:12: Command Support                   : COMMAND_SUPPORT
11:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE40>, <py_sfcl.CommandDataDefinition object at 0x0627A690>) , Command count = 1531 ] 
11:21:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 1532 ] 
11:21:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:12: [ SetBusWidth(0x4) , Command count = 1533 ] 
11:21:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1534 ] 
11:21:12: Protected Area Size 0x28000
11:21:12: Bus Width           2
11:21:12: Secure Mode         0
11:21:12: Speed  Class        4
11:21:12: Perf Move           0
11:21:12: Au Size             9
11:21:12: Erase Size          15
11:21:12: Erase Timeout       1
11:21:12: Erase offset        1
11:21:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1535 ] 
11:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:12: Host Frequency set to 100000 KHz
11:21:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:13: ####CSD Registe 2.0 Values####
11:21:13: CSD_STRUCTURE                                 :0x1
11:21:13: Reserv1                                       :0x0
11:21:13: Time Access 1 TAAC                            :0xe
11:21:13: Time Access 2 NSAC*100                        :0x0
11:21:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:13: Card Command Classess CCC                     :0x5b5
11:21:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:13: DSR(driver stage register)  DSR_IMP           :0x0
11:21:13: Reserv2                                       :0x0
11:21:13: Device Size C_SIZE                            :0xedc8
11:21:13: Reserv3                                       :0x0
11:21:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:13: Reserv4                                       :0x0
11:21:13: Write Speed Factor R2W_FACTOR                 :0x2
11:21:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:13: FILE_FORMAT_GRP                               :0x0
11:21:13: COPY flag                                     :0x1
11:21:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:13: File_Format                                   :0x0
11:21:13: CRC                                           :0x0
11:21:13: ####CSD Registe Values####  

11:21:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC60>, <py_sfcl.CommandDataDefinition object at 0x0627A9C0>) , Command count = 1536 ] 
11:21:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627ACC0>) , Command count = 1537 ] 
11:21:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A780>, <py_sfcl.PySEnhancedCmdData object at 0x06273960>, <None>, <py_sfcl.Command23 object at 0x06273900>) , Command count = 1538 ] 
11:21:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:14: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:16: Host Frequency set to 25000 KHz
11:21:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:16: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276F60>, 0x0, True) , Command count = 1539 ] 
11:21:16: [GO18_globalSetVolt]### Host voltage value is set.
11:21:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFCF0>, 0x0, False) , Command count = 1540 ] 
11:21:16: [GO18_globalSetVolt]### Host voltage value is set.
11:21:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1541 ] 
11:21:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1542 ] 
11:21:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1543 ] 
11:21:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DE40>, <py_sfcl.CommandDataDefinition object at 0x0627ADE0>) , Command count = 1544 ] 
11:21:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 1545 ] 
11:21:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1546 ] 
11:21:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:16: Host Frequency set to 25000 KHz
11:21:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:16: ####CSD Registe 2.0 Values####
11:21:16: CSD_STRUCTURE                                 :0x1
11:21:16: Reserv1                                       :0x0
11:21:16: Time Access 1 TAAC                            :0xe
11:21:16: Time Access 2 NSAC*100                        :0x0
11:21:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:16: Card Command Classess CCC                     :0x5b5
11:21:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:16: DSR(driver stage register)  DSR_IMP           :0x0
11:21:16: Reserv2                                       :0x0
11:21:16: Device Size C_SIZE                            :0xedc8
11:21:16: Reserv3                                       :0x0
11:21:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:16: Reserv4                                       :0x0
11:21:16: Write Speed Factor R2W_FACTOR                 :0x2
11:21:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:16: FILE_FORMAT_GRP                               :0x0
11:21:16: COPY flag                                     :0x1
11:21:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:16: File_Format                                   :0x0
11:21:16: CRC                                           :0x0
11:21:16: ####CSD Registe Values####  

11:21:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:16: [GetSCRRegisterEntry] Passed
11:21:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:16: Data_Status_After Erases          : 0
11:21:16: CPRM Security Support             : No Security
11:21:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:16: Spec. Version                     : Version 3.0X
11:21:16: Extended Security Support         : Extended_Security_Not_Supported
11:21:16: Command Support                   : COMMAND_SUPPORT
11:21:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 1547 ] 
11:21:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 1548 ] 
11:21:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:16: [ SetBusWidth(0x4) , Command count = 1549 ] 
11:21:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1550 ] 
11:21:16: Protected Area Size 0x28000
11:21:16: Bus Width           2
11:21:17: Secure Mode         0
11:21:17: Speed  Class        4
11:21:17: Perf Move           0
11:21:17: Au Size             9
11:21:17: Erase Size          15
11:21:17: Erase Timeout       1
11:21:17: Erase offset        1
11:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1551 ] 
11:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:17: Host Frequency set to 100000 KHz
11:21:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:17: ####CSD Registe 2.0 Values####
11:21:17: CSD_STRUCTURE                                 :0x1
11:21:17: Reserv1                                       :0x0
11:21:17: Time Access 1 TAAC                            :0xe
11:21:17: Time Access 2 NSAC*100                        :0x0
11:21:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:17: Card Command Classess CCC                     :0x5b5
11:21:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:17: DSR(driver stage register)  DSR_IMP           :0x0
11:21:17: Reserv2                                       :0x0
11:21:17: Device Size C_SIZE                            :0xedc8
11:21:17: Reserv3                                       :0x0
11:21:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:18: Reserv4                                       :0x0
11:21:18: Write Speed Factor R2W_FACTOR                 :0x2
11:21:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:18: FILE_FORMAT_GRP                               :0x0
11:21:18: COPY flag                                     :0x1
11:21:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:18: File_Format                                   :0x0
11:21:18: CRC                                           :0x0
11:21:18: ####CSD Registe Values####  

11:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x0627D300>) , Command count = 1552 ] 
11:21:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AB70>) , Command count = 1553 ] 
11:21:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF60>, <py_sfcl.PySEnhancedCmdData object at 0x0627A660>, <None>, <py_sfcl.Command23 object at 0x0627ADB0>) , Command count = 1554 ] 
11:21:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:20: Host Frequency set to 25000 KHz
11:21:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D360>, 0x0, True) , Command count = 1555 ] 
11:21:20: [GO18_globalSetVolt]### Host voltage value is set.
11:21:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F00>, 0x0, False) , Command count = 1556 ] 
11:21:20: [GO18_globalSetVolt]### Host voltage value is set.
11:21:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1557 ] 
11:21:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1558 ] 
11:21:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1559 ] 
11:21:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AF00>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 1560 ] 
11:21:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627A990>) , Command count = 1561 ] 
11:21:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1562 ] 
11:21:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:21: Host Frequency set to 25000 KHz
11:21:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:21: ####CSD Registe 2.0 Values####
11:21:21: CSD_STRUCTURE                                 :0x1
11:21:21: Reserv1                                       :0x0
11:21:21: Time Access 1 TAAC                            :0xe
11:21:21: Time Access 2 NSAC*100                        :0x0
11:21:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:21: Card Command Classess CCC                     :0x5b5
11:21:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:21: DSR(driver stage register)  DSR_IMP           :0x0
11:21:21: Reserv2                                       :0x0
11:21:21: Device Size C_SIZE                            :0xedc8
11:21:21: Reserv3                                       :0x0
11:21:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:21: Reserv4                                       :0x0
11:21:21: Write Speed Factor R2W_FACTOR                 :0x2
11:21:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:21: FILE_FORMAT_GRP                               :0x0
11:21:21: COPY flag                                     :0x1
11:21:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:21: File_Format                                   :0x0
11:21:21: CRC                                           :0x0
11:21:21: ####CSD Registe Values####  

11:21:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:21: [GetSCRRegisterEntry] Passed
11:21:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:21: Data_Status_After Erases          : 0
11:21:21: CPRM Security Support             : No Security
11:21:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:21: Spec. Version                     : Version 3.0X
11:21:21: Extended Security Support         : Extended_Security_Not_Supported
11:21:21: Command Support                   : COMMAND_SUPPORT
11:21:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAE0>, <py_sfcl.CommandDataDefinition object at 0x0627D420>) , Command count = 1563 ] 
11:21:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF2D0>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 1564 ] 
11:21:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:21: [ SetBusWidth(0x4) , Command count = 1565 ] 
11:21:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1566 ] 
11:21:21: Protected Area Size 0x28000
11:21:21: Bus Width           2
11:21:21: Secure Mode         0
11:21:21: Speed  Class        4
11:21:21: Perf Move           0
11:21:21: Au Size             9
11:21:21: Erase Size          15
11:21:21: Erase Timeout       1
11:21:21: Erase offset        1
11:21:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1567 ] 
11:21:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:21: Host Frequency set to 100000 KHz
11:21:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:21: ####CSD Registe 2.0 Values####
11:21:21: CSD_STRUCTURE                                 :0x1
11:21:21: Reserv1                                       :0x0
11:21:21: Time Access 1 TAAC                            :0xe
11:21:21: Time Access 2 NSAC*100                        :0x0
11:21:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:21: Card Command Classess CCC                     :0x5b5
11:21:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:21: DSR(driver stage register)  DSR_IMP           :0x0
11:21:21: Reserv2                                       :0x0
11:21:21: Device Size C_SIZE                            :0xedc8
11:21:21: Reserv3                                       :0x0
11:21:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:22: Reserv4                                       :0x0
11:21:22: Write Speed Factor R2W_FACTOR                 :0x2
11:21:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:22: FILE_FORMAT_GRP                               :0x0
11:21:22: COPY flag                                     :0x1
11:21:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:22: File_Format                                   :0x0
11:21:22: CRC                                           :0x0
11:21:22: ####CSD Registe Values####  

11:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401FC0>, <py_sfcl.CommandDataDefinition object at 0x06216480>) , Command count = 1568 ] 
11:21:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 1569 ] 
11:21:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC30>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0F0>, <None>, <py_sfcl.Command23 object at 0x0627A960>) , Command count = 1570 ] 
11:21:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:25: Host Frequency set to 25000 KHz
11:21:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1B0>, 0x0, True) , Command count = 1571 ] 
11:21:25: [GO18_globalSetVolt]### Host voltage value is set.
11:21:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DEA0>, 0x0, False) , Command count = 1572 ] 
11:21:25: [GO18_globalSetVolt]### Host voltage value is set.
11:21:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1573 ] 
11:21:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1574 ] 
11:21:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1575 ] 
11:21:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D660>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 1576 ] 
11:21:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627ACF0>) , Command count = 1577 ] 
11:21:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1578 ] 
11:21:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:25: Host Frequency set to 25000 KHz
11:21:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:25: ####CSD Registe 2.0 Values####
11:21:25: CSD_STRUCTURE                                 :0x1
11:21:25: Reserv1                                       :0x0
11:21:25: Time Access 1 TAAC                            :0xe
11:21:25: Time Access 2 NSAC*100                        :0x0
11:21:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:25: Card Command Classess CCC                     :0x5b5
11:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:25: DSR(driver stage register)  DSR_IMP           :0x0
11:21:25: Reserv2                                       :0x0
11:21:25: Device Size C_SIZE                            :0xedc8
11:21:25: Reserv3                                       :0x0
11:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:25: Reserv4                                       :0x0
11:21:25: Write Speed Factor R2W_FACTOR                 :0x2
11:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:25: FILE_FORMAT_GRP                               :0x0
11:21:25: COPY flag                                     :0x1
11:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:25: File_Format                                   :0x0
11:21:25: CRC                                           :0x0
11:21:25: ####CSD Registe Values####  

11:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:25: [GetSCRRegisterEntry] Passed
11:21:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:25: Data_Status_After Erases          : 0
11:21:25: CPRM Security Support             : No Security
11:21:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:25: Spec. Version                     : Version 3.0X
11:21:25: Extended Security Support         : Extended_Security_Not_Supported
11:21:25: Command Support                   : COMMAND_SUPPORT
11:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062683F0>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 1579 ] 
11:21:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x0627A630>) , Command count = 1580 ] 
11:21:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:25: [ SetBusWidth(0x4) , Command count = 1581 ] 
11:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1582 ] 
11:21:25: Protected Area Size 0x28000
11:21:25: Bus Width           2
11:21:25: Secure Mode         0
11:21:25: Speed  Class        4
11:21:25: Perf Move           0
11:21:25: Au Size             9
11:21:25: Erase Size          15
11:21:25: Erase Timeout       1
11:21:25: Erase offset        1
11:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1583 ] 
11:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:26: Host Frequency set to 100000 KHz
11:21:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:26: ####CSD Registe 2.0 Values####
11:21:26: CSD_STRUCTURE                                 :0x1
11:21:26: Reserv1                                       :0x0
11:21:26: Time Access 1 TAAC                            :0xe
11:21:26: Time Access 2 NSAC*100                        :0x0
11:21:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:26: Card Command Classess CCC                     :0x5b5
11:21:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:26: DSR(driver stage register)  DSR_IMP           :0x0
11:21:26: Reserv2                                       :0x0
11:21:26: Device Size C_SIZE                            :0xedc8
11:21:26: Reserv3                                       :0x0
11:21:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:26: Reserv4                                       :0x0
11:21:26: Write Speed Factor R2W_FACTOR                 :0x2
11:21:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:26: FILE_FORMAT_GRP                               :0x0
11:21:26: COPY flag                                     :0x1
11:21:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:26: File_Format                                   :0x0
11:21:26: CRC                                           :0x0
11:21:26: ####CSD Registe Values####  

11:21:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268930>, <py_sfcl.CommandDataDefinition object at 0x05401F90>) , Command count = 1584 ] 
11:21:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x06216AB0>) , Command count = 1585 ] 
11:21:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216810>, <py_sfcl.PySEnhancedCmdData object at 0x06216570>, <None>, <py_sfcl.Command23 object at 0x0627DE10>) , Command count = 1586 ] 
11:21:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:29: Host Frequency set to 25000 KHz
11:21:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x053FB930>, 0x0, True) , Command count = 1587 ] 
11:21:29: [GO18_globalSetVolt]### Host voltage value is set.
11:21:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D6C0>, 0x0, False) , Command count = 1588 ] 
11:21:29: [GO18_globalSetVolt]### Host voltage value is set.
11:21:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1589 ] 
11:21:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1590 ] 
11:21:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1591 ] 
11:21:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF00>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 1592 ] 
11:21:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 1593 ] 
11:21:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1594 ] 
11:21:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:30: Host Frequency set to 25000 KHz
11:21:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:30: ####CSD Registe 2.0 Values####
11:21:30: CSD_STRUCTURE                                 :0x1
11:21:30: Reserv1                                       :0x0
11:21:30: Time Access 1 TAAC                            :0xe
11:21:30: Time Access 2 NSAC*100                        :0x0
11:21:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:30: Card Command Classess CCC                     :0x5b5
11:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:30: DSR(driver stage register)  DSR_IMP           :0x0
11:21:30: Reserv2                                       :0x0
11:21:30: Device Size C_SIZE                            :0xedc8
11:21:30: Reserv3                                       :0x0
11:21:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:30: Reserv4                                       :0x0
11:21:30: Write Speed Factor R2W_FACTOR                 :0x2
11:21:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:30: FILE_FORMAT_GRP                               :0x0
11:21:30: COPY flag                                     :0x1
11:21:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:30: File_Format                                   :0x0
11:21:30: CRC                                           :0x0
11:21:30: ####CSD Registe Values####  

11:21:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:30: [GetSCRRegisterEntry] Passed
11:21:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:30: Data_Status_After Erases          : 0
11:21:30: CPRM Security Support             : No Security
11:21:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:30: Spec. Version                     : Version 3.0X
11:21:30: Extended Security Support         : Extended_Security_Not_Supported
11:21:30: Command Support                   : COMMAND_SUPPORT
11:21:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E10>, <py_sfcl.CommandDataDefinition object at 0x062680F0>) , Command count = 1595 ] 
11:21:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC30>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 1596 ] 
11:21:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:30: [ SetBusWidth(0x4) , Command count = 1597 ] 
11:21:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1598 ] 
11:21:30: Protected Area Size 0x28000
11:21:30: Bus Width           2
11:21:30: Secure Mode         0
11:21:30: Speed  Class        4
11:21:30: Perf Move           0
11:21:30: Au Size             9
11:21:30: Erase Size          15
11:21:30: Erase Timeout       1
11:21:30: Erase offset        1
11:21:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1599 ] 
11:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:30: Host Frequency set to 100000 KHz
11:21:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:30: ####CSD Registe 2.0 Values####
11:21:30: CSD_STRUCTURE                                 :0x1
11:21:30: Reserv1                                       :0x0
11:21:30: Time Access 1 TAAC                            :0xe
11:21:30: Time Access 2 NSAC*100                        :0x0
11:21:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:30: Card Command Classess CCC                     :0x5b5
11:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:30: DSR(driver stage register)  DSR_IMP           :0x0
11:21:30: Reserv2                                       :0x0
11:21:30: Device Size C_SIZE                            :0xedc8
11:21:30: Reserv3                                       :0x0
11:21:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:31: Reserv4                                       :0x0
11:21:31: Write Speed Factor R2W_FACTOR                 :0x2
11:21:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:31: FILE_FORMAT_GRP                               :0x0
11:21:31: COPY flag                                     :0x1
11:21:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:31: File_Format                                   :0x0
11:21:31: CRC                                           :0x0
11:21:31: ####CSD Registe Values####  

11:21:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062165D0>, <py_sfcl.CommandDataDefinition object at 0x0627D030>) , Command count = 1600 ] 
11:21:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x06268C30>) , Command count = 1601 ] 
11:21:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062683C0>, <py_sfcl.PySEnhancedCmdData object at 0x06273F60>, <None>, <py_sfcl.Command23 object at 0x062739F0>) , Command count = 1602 ] 
11:21:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:34: Host Frequency set to 25000 KHz
11:21:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF4E0>, 0x0, True) , Command count = 1603 ] 
11:21:34: [GO18_globalSetVolt]### Host voltage value is set.
11:21:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D330>, 0x0, False) , Command count = 1604 ] 
11:21:34: [GO18_globalSetVolt]### Host voltage value is set.
11:21:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1605 ] 
11:21:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1606 ] 
11:21:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1607 ] 
11:21:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7E0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 1608 ] 
11:21:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216FC0>, <py_sfcl.CommandDataDefinition object at 0x0627ABD0>) , Command count = 1609 ] 
11:21:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1610 ] 
11:21:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:34: Host Frequency set to 25000 KHz
11:21:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:34: ####CSD Registe 2.0 Values####
11:21:34: CSD_STRUCTURE                                 :0x1
11:21:34: Reserv1                                       :0x0
11:21:34: Time Access 1 TAAC                            :0xe
11:21:34: Time Access 2 NSAC*100                        :0x0
11:21:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:34: Card Command Classess CCC                     :0x5b5
11:21:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:34: DSR(driver stage register)  DSR_IMP           :0x0
11:21:34: Reserv2                                       :0x0
11:21:34: Device Size C_SIZE                            :0xedc8
11:21:34: Reserv3                                       :0x0
11:21:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:34: Reserv4                                       :0x0
11:21:34: Write Speed Factor R2W_FACTOR                 :0x2
11:21:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:34: FILE_FORMAT_GRP                               :0x0
11:21:34: COPY flag                                     :0x1
11:21:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:34: File_Format                                   :0x0
11:21:34: CRC                                           :0x0
11:21:34: ####CSD Registe Values####  

11:21:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:34: [GetSCRRegisterEntry] Passed
11:21:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:34: Data_Status_After Erases          : 0
11:21:34: CPRM Security Support             : No Security
11:21:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:34: Spec. Version                     : Version 3.0X
11:21:34: Extended Security Support         : Extended_Security_Not_Supported
11:21:34: Command Support                   : COMMAND_SUPPORT
11:21:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268F30>, <py_sfcl.CommandDataDefinition object at 0x062688D0>) , Command count = 1611 ] 
11:21:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x062166C0>) , Command count = 1612 ] 
11:21:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:34: [ SetBusWidth(0x4) , Command count = 1613 ] 
11:21:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062690F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1614 ] 
11:21:34: Protected Area Size 0x28000
11:21:34: Bus Width           2
11:21:34: Secure Mode         0
11:21:34: Speed  Class        4
11:21:34: Perf Move           0
11:21:34: Au Size             9
11:21:34: Erase Size          15
11:21:34: Erase Timeout       1
11:21:34: Erase offset        1
11:21:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1615 ] 
11:21:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:34: Host Frequency set to 100000 KHz
11:21:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:35: ####CSD Registe 2.0 Values####
11:21:35: CSD_STRUCTURE                                 :0x1
11:21:35: Reserv1                                       :0x0
11:21:35: Time Access 1 TAAC                            :0xe
11:21:35: Time Access 2 NSAC*100                        :0x0
11:21:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:35: Card Command Classess CCC                     :0x5b5
11:21:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:35: DSR(driver stage register)  DSR_IMP           :0x0
11:21:35: Reserv2                                       :0x0
11:21:35: Device Size C_SIZE                            :0xedc8
11:21:35: Reserv3                                       :0x0
11:21:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:35: Reserv4                                       :0x0
11:21:35: Write Speed Factor R2W_FACTOR                 :0x2
11:21:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:35: FILE_FORMAT_GRP                               :0x0
11:21:35: COPY flag                                     :0x1
11:21:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:35: File_Format                                   :0x0
11:21:35: CRC                                           :0x0
11:21:35: ####CSD Registe Values####  

11:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x0627D540>) , Command count = 1616 ] 
11:21:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x06268DE0>) , Command count = 1617 ] 
11:21:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C60>, <py_sfcl.PySEnhancedCmdData object at 0x06273E10>, <None>, <py_sfcl.Command23 object at 0x062734E0>) , Command count = 1618 ] 
11:21:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:38: Host Frequency set to 25000 KHz
11:21:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D120>, 0x0, True) , Command count = 1619 ] 
11:21:38: [GO18_globalSetVolt]### Host voltage value is set.
11:21:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x062693C0>, 0x0, False) , Command count = 1620 ] 
11:21:38: [GO18_globalSetVolt]### Host voltage value is set.
11:21:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1621 ] 
11:21:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1622 ] 
11:21:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1623 ] 
11:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D870>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 1624 ] 
11:21:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x06269750>) , Command count = 1625 ] 
11:21:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1626 ] 
11:21:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:39: Host Frequency set to 25000 KHz
11:21:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:39: ####CSD Registe 2.0 Values####
11:21:39: CSD_STRUCTURE                                 :0x1
11:21:39: Reserv1                                       :0x0
11:21:39: Time Access 1 TAAC                            :0xe
11:21:39: Time Access 2 NSAC*100                        :0x0
11:21:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:39: Card Command Classess CCC                     :0x5b5
11:21:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:39: DSR(driver stage register)  DSR_IMP           :0x0
11:21:39: Reserv2                                       :0x0
11:21:39: Device Size C_SIZE                            :0xedc8
11:21:39: Reserv3                                       :0x0
11:21:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:39: Reserv4                                       :0x0
11:21:39: Write Speed Factor R2W_FACTOR                 :0x2
11:21:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:39: FILE_FORMAT_GRP                               :0x0
11:21:39: COPY flag                                     :0x1
11:21:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:39: File_Format                                   :0x0
11:21:39: CRC                                           :0x0
11:21:39: ####CSD Registe Values####  

11:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:39: [GetSCRRegisterEntry] Passed
11:21:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:39: Data_Status_After Erases          : 0
11:21:39: CPRM Security Support             : No Security
11:21:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:39: Spec. Version                     : Version 3.0X
11:21:39: Extended Security Support         : Extended_Security_Not_Supported
11:21:39: Command Support                   : COMMAND_SUPPORT
11:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276660>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 1627 ] 
11:21:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A50>, <py_sfcl.CommandDataDefinition object at 0x06268540>) , Command count = 1628 ] 
11:21:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:39: [ SetBusWidth(0x4) , Command count = 1629 ] 
11:21:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062764B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1630 ] 
11:21:39: Protected Area Size 0x28000
11:21:39: Bus Width           2
11:21:39: Secure Mode         0
11:21:39: Speed  Class        4
11:21:39: Perf Move           0
11:21:39: Au Size             9
11:21:39: Erase Size          15
11:21:39: Erase Timeout       1
11:21:39: Erase offset        1
11:21:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1631 ] 
11:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:39: Host Frequency set to 100000 KHz
11:21:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:39: ####CSD Registe 2.0 Values####
11:21:39: CSD_STRUCTURE                                 :0x1
11:21:39: Reserv1                                       :0x0
11:21:39: Time Access 1 TAAC                            :0xe
11:21:39: Time Access 2 NSAC*100                        :0x0
11:21:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:39: Card Command Classess CCC                     :0x5b5
11:21:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:39: DSR(driver stage register)  DSR_IMP           :0x0
11:21:39: Reserv2                                       :0x0
11:21:39: Device Size C_SIZE                            :0xedc8
11:21:39: Reserv3                                       :0x0
11:21:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:40: Reserv4                                       :0x0
11:21:40: Write Speed Factor R2W_FACTOR                 :0x2
11:21:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:40: FILE_FORMAT_GRP                               :0x0
11:21:40: COPY flag                                     :0x1
11:21:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:40: File_Format                                   :0x0
11:21:40: CRC                                           :0x0
11:21:40: ####CSD Registe Values####  

11:21:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D690>, <py_sfcl.CommandDataDefinition object at 0x06268450>) , Command count = 1632 ] 
11:21:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062681B0>, <py_sfcl.CommandDataDefinition object at 0x062684E0>) , Command count = 1633 ] 
11:21:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269210>, <py_sfcl.PySEnhancedCmdData object at 0x062690F0>, <None>, <py_sfcl.Command23 object at 0x062690C0>) , Command count = 1634 ] 
11:21:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:43: Host Frequency set to 25000 KHz
11:21:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268A80>, 0x0, True) , Command count = 1635 ] 
11:21:43: [GO18_globalSetVolt]### Host voltage value is set.
11:21:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D780>, 0x0, False) , Command count = 1636 ] 
11:21:43: [GO18_globalSetVolt]### Host voltage value is set.
11:21:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1637 ] 
11:21:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1638 ] 
11:21:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1639 ] 
11:21:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D50>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 1640 ] 
11:21:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269AB0>, <py_sfcl.CommandDataDefinition object at 0x06269810>) , Command count = 1641 ] 
11:21:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1642 ] 
11:21:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:43: Host Frequency set to 25000 KHz
11:21:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:43: ####CSD Registe 2.0 Values####
11:21:43: CSD_STRUCTURE                                 :0x1
11:21:43: Reserv1                                       :0x0
11:21:43: Time Access 1 TAAC                            :0xe
11:21:43: Time Access 2 NSAC*100                        :0x0
11:21:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:43: Card Command Classess CCC                     :0x5b5
11:21:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:43: DSR(driver stage register)  DSR_IMP           :0x0
11:21:43: Reserv2                                       :0x0
11:21:43: Device Size C_SIZE                            :0xedc8
11:21:43: Reserv3                                       :0x0
11:21:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:43: Reserv4                                       :0x0
11:21:43: Write Speed Factor R2W_FACTOR                 :0x2
11:21:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:43: FILE_FORMAT_GRP                               :0x0
11:21:43: COPY flag                                     :0x1
11:21:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:43: File_Format                                   :0x0
11:21:43: CRC                                           :0x0
11:21:43: ####CSD Registe Values####  

11:21:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:43: [GetSCRRegisterEntry] Passed
11:21:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:43: Data_Status_After Erases          : 0
11:21:43: CPRM Security Support             : No Security
11:21:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:43: Spec. Version                     : Version 3.0X
11:21:43: Extended Security Support         : Extended_Security_Not_Supported
11:21:43: Command Support                   : COMMAND_SUPPORT
11:21:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D360>, <py_sfcl.CommandDataDefinition object at 0x06269F00>) , Command count = 1643 ] 
11:21:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D630>, <py_sfcl.CommandDataDefinition object at 0x0626D5D0>) , Command count = 1644 ] 
11:21:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:43: [ SetBusWidth(0x4) , Command count = 1645 ] 
11:21:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1646 ] 
11:21:43: Protected Area Size 0x28000
11:21:43: Bus Width           2
11:21:43: Secure Mode         0
11:21:43: Speed  Class        4
11:21:43: Perf Move           0
11:21:43: Au Size             9
11:21:43: Erase Size          15
11:21:43: Erase Timeout       1
11:21:43: Erase offset        1
11:21:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1647 ] 
11:21:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:43: Host Frequency set to 100000 KHz
11:21:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:44: ####CSD Registe 2.0 Values####
11:21:44: CSD_STRUCTURE                                 :0x1
11:21:44: Reserv1                                       :0x0
11:21:44: Time Access 1 TAAC                            :0xe
11:21:44: Time Access 2 NSAC*100                        :0x0
11:21:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:44: Card Command Classess CCC                     :0x5b5
11:21:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:44: DSR(driver stage register)  DSR_IMP           :0x0
11:21:44: Reserv2                                       :0x0
11:21:44: Device Size C_SIZE                            :0xedc8
11:21:44: Reserv3                                       :0x0
11:21:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:44: Reserv4                                       :0x0
11:21:44: Write Speed Factor R2W_FACTOR                 :0x2
11:21:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:44: FILE_FORMAT_GRP                               :0x0
11:21:44: COPY flag                                     :0x1
11:21:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:44: File_Format                                   :0x0
11:21:44: CRC                                           :0x0
11:21:44: ####CSD Registe Values####  

11:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DE70>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 1648 ] 
11:21:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x06268F90>) , Command count = 1649 ] 
11:21:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DFC0>, <py_sfcl.PySEnhancedCmdData object at 0x06269CF0>, <None>, <py_sfcl.Command23 object at 0x062696F0>) , Command count = 1650 ] 
11:21:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:47: Host Frequency set to 25000 KHz
11:21:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C4030>, 0x0, True) , Command count = 1651 ] 
11:21:47: [GO18_globalSetVolt]### Host voltage value is set.
11:21:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D4B0>, 0x0, False) , Command count = 1652 ] 
11:21:47: [GO18_globalSetVolt]### Host voltage value is set.
11:21:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1653 ] 
11:21:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1654 ] 
11:21:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1655 ] 
11:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 1656 ] 
11:21:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268660>, <py_sfcl.CommandDataDefinition object at 0x06269E10>) , Command count = 1657 ] 
11:21:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1658 ] 
11:21:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:47: Host Frequency set to 25000 KHz
11:21:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:47: ####CSD Registe 2.0 Values####
11:21:47: CSD_STRUCTURE                                 :0x1
11:21:47: Reserv1                                       :0x0
11:21:47: Time Access 1 TAAC                            :0xe
11:21:47: Time Access 2 NSAC*100                        :0x0
11:21:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:47: Card Command Classess CCC                     :0x5b5
11:21:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:47: DSR(driver stage register)  DSR_IMP           :0x0
11:21:47: Reserv2                                       :0x0
11:21:47: Device Size C_SIZE                            :0xedc8
11:21:47: Reserv3                                       :0x0
11:21:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:47: Reserv4                                       :0x0
11:21:47: Write Speed Factor R2W_FACTOR                 :0x2
11:21:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:47: FILE_FORMAT_GRP                               :0x0
11:21:47: COPY flag                                     :0x1
11:21:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:47: File_Format                                   :0x0
11:21:47: CRC                                           :0x0
11:21:47: ####CSD Registe Values####  

11:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:47: [GetSCRRegisterEntry] Passed
11:21:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:47: Data_Status_After Erases          : 0
11:21:47: CPRM Security Support             : No Security
11:21:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:47: Spec. Version                     : Version 3.0X
11:21:47: Extended Security Support         : Extended_Security_Not_Supported
11:21:47: Command Support                   : COMMAND_SUPPORT
11:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269AE0>, <py_sfcl.CommandDataDefinition object at 0x06269ED0>) , Command count = 1659 ] 
11:21:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAB0>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 1660 ] 
11:21:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:47: [ SetBusWidth(0x4) , Command count = 1661 ] 
11:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1662 ] 
11:21:47: Protected Area Size 0x28000
11:21:47: Bus Width           2
11:21:48: Secure Mode         0
11:21:48: Speed  Class        4
11:21:48: Perf Move           0
11:21:48: Au Size             9
11:21:48: Erase Size          15
11:21:48: Erase Timeout       1
11:21:48: Erase offset        1
11:21:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1663 ] 
11:21:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:48: Host Frequency set to 100000 KHz
11:21:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:48: ####CSD Registe 2.0 Values####
11:21:48: CSD_STRUCTURE                                 :0x1
11:21:48: Reserv1                                       :0x0
11:21:48: Time Access 1 TAAC                            :0xe
11:21:48: Time Access 2 NSAC*100                        :0x0
11:21:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:48: Card Command Classess CCC                     :0x5b5
11:21:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:48: DSR(driver stage register)  DSR_IMP           :0x0
11:21:48: Reserv2                                       :0x0
11:21:48: Device Size C_SIZE                            :0xedc8
11:21:48: Reserv3                                       :0x0
11:21:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:49: Reserv4                                       :0x0
11:21:49: Write Speed Factor R2W_FACTOR                 :0x2
11:21:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:49: FILE_FORMAT_GRP                               :0x0
11:21:49: COPY flag                                     :0x1
11:21:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:49: File_Format                                   :0x0
11:21:49: CRC                                           :0x0
11:21:49: ####CSD Registe Values####  

11:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD80>, <py_sfcl.CommandDataDefinition object at 0x06268060>) , Command count = 1664 ] 
11:21:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x06269990>) , Command count = 1665 ] 
11:21:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062693F0>, <py_sfcl.PySEnhancedCmdData object at 0x06269C60>, <None>, <py_sfcl.Command23 object at 0x062695D0>) , Command count = 1666 ] 
11:21:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:52: Host Frequency set to 25000 KHz
11:21:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:52: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D930>, 0x0, True) , Command count = 1667 ] 
11:21:52: [GO18_globalSetVolt]### Host voltage value is set.
11:21:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DB70>, 0x0, False) , Command count = 1668 ] 
11:21:52: [GO18_globalSetVolt]### Host voltage value is set.
11:21:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1669 ] 
11:21:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1670 ] 
11:21:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1671 ] 
11:21:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D540>, <py_sfcl.CommandDataDefinition object at 0x0626D1B0>) , Command count = 1672 ] 
11:21:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D3F0>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 1673 ] 
11:21:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1674 ] 
11:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:52: Host Frequency set to 25000 KHz
11:21:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:52: ####CSD Registe 2.0 Values####
11:21:52: CSD_STRUCTURE                                 :0x1
11:21:52: Reserv1                                       :0x0
11:21:52: Time Access 1 TAAC                            :0xe
11:21:52: Time Access 2 NSAC*100                        :0x0
11:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:52: Card Command Classess CCC                     :0x5b5
11:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:52: DSR(driver stage register)  DSR_IMP           :0x0
11:21:52: Reserv2                                       :0x0
11:21:52: Device Size C_SIZE                            :0xedc8
11:21:52: Reserv3                                       :0x0
11:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:52: Reserv4                                       :0x0
11:21:52: Write Speed Factor R2W_FACTOR                 :0x2
11:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:52: FILE_FORMAT_GRP                               :0x0
11:21:52: COPY flag                                     :0x1
11:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:52: File_Format                                   :0x0
11:21:52: CRC                                           :0x0
11:21:52: ####CSD Registe Values####  

11:21:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:52: [GetSCRRegisterEntry] Passed
11:21:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:52: Data_Status_After Erases          : 0
11:21:52: CPRM Security Support             : No Security
11:21:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:52: Spec. Version                     : Version 3.0X
11:21:52: Extended Security Support         : Extended_Security_Not_Supported
11:21:52: Command Support                   : COMMAND_SUPPORT
11:21:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D810>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 1675 ] 
11:21:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 1676 ] 
11:21:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:52: [ SetBusWidth(0x4) , Command count = 1677 ] 
11:21:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062697B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1678 ] 
11:21:52: Protected Area Size 0x28000
11:21:52: Bus Width           2
11:21:52: Secure Mode         0
11:21:52: Speed  Class        4
11:21:52: Perf Move           0
11:21:52: Au Size             9
11:21:52: Erase Size          15
11:21:52: Erase Timeout       1
11:21:52: Erase offset        1
11:21:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1679 ] 
11:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:52: Host Frequency set to 100000 KHz
11:21:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:53: ####CSD Registe 2.0 Values####
11:21:53: CSD_STRUCTURE                                 :0x1
11:21:53: Reserv1                                       :0x0
11:21:53: Time Access 1 TAAC                            :0xe
11:21:53: Time Access 2 NSAC*100                        :0x0
11:21:53: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:53: Card Command Classess CCC                     :0x5b5
11:21:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:53: DSR(driver stage register)  DSR_IMP           :0x0
11:21:53: Reserv2                                       :0x0
11:21:53: Device Size C_SIZE                            :0xedc8
11:21:53: Reserv3                                       :0x0
11:21:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:53: Reserv4                                       :0x0
11:21:53: Write Speed Factor R2W_FACTOR                 :0x2
11:21:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:53: FILE_FORMAT_GRP                               :0x0
11:21:53: COPY flag                                     :0x1
11:21:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:53: File_Format                                   :0x0
11:21:53: CRC                                           :0x0
11:21:53: ####CSD Registe Values####  

11:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D570>, <py_sfcl.CommandDataDefinition object at 0x0627AA50>) , Command count = 1680 ] 
11:21:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 1681 ] 
11:21:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269930>, <py_sfcl.PySEnhancedCmdData object at 0x06269A50>, <None>, <py_sfcl.Command23 object at 0x06269510>) , Command count = 1682 ] 
11:21:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:21:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:56: Host Frequency set to 25000 KHz
11:21:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:21:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:21:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D750>, 0x0, True) , Command count = 1683 ] 
11:21:56: [GO18_globalSetVolt]### Host voltage value is set.
11:21:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:21:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C90>, 0x0, False) , Command count = 1684 ] 
11:21:56: [GO18_globalSetVolt]### Host voltage value is set.
11:21:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1685 ] 
11:21:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:21:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1686 ] 
11:21:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:21:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:21:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:21:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:21:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:21:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1687 ] 
11:21:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:21:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269960>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 1688 ] 
11:21:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 1689 ] 
11:21:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:21:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1690 ] 
11:21:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:21:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:21:56: Host Frequency set to 25000 KHz
11:21:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:21:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:56: ####CSD Registe 2.0 Values####
11:21:56: CSD_STRUCTURE                                 :0x1
11:21:56: Reserv1                                       :0x0
11:21:56: Time Access 1 TAAC                            :0xe
11:21:56: Time Access 2 NSAC*100                        :0x0
11:21:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:21:56: Card Command Classess CCC                     :0x5b5
11:21:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:56: DSR(driver stage register)  DSR_IMP           :0x0
11:21:56: Reserv2                                       :0x0
11:21:56: Device Size C_SIZE                            :0xedc8
11:21:56: Reserv3                                       :0x0
11:21:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:56: Reserv4                                       :0x0
11:21:56: Write Speed Factor R2W_FACTOR                 :0x2
11:21:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:56: FILE_FORMAT_GRP                               :0x0
11:21:56: COPY flag                                     :0x1
11:21:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:56: File_Format                                   :0x0
11:21:56: CRC                                           :0x0
11:21:56: ####CSD Registe Values####  

11:21:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:21:56: [GetSCRRegisterEntry] Passed
11:21:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:21:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:21:56: Data_Status_After Erases          : 0
11:21:56: CPRM Security Support             : No Security
11:21:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:21:56: Spec. Version                     : Version 3.0X
11:21:56: Extended Security Support         : Extended_Security_Not_Supported
11:21:56: Command Support                   : COMMAND_SUPPORT
11:21:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D9C0>, <py_sfcl.CommandDataDefinition object at 0x0626DB40>) , Command count = 1691 ] 
11:21:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DA80>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 1692 ] 
11:21:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:21:56: [ SetBusWidth(0x4) , Command count = 1693 ] 
11:21:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:21:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1694 ] 
11:21:56: Protected Area Size 0x28000
11:21:56: Bus Width           2
11:21:56: Secure Mode         0
11:21:56: Speed  Class        4
11:21:56: Perf Move           0
11:21:56: Au Size             9
11:21:56: Erase Size          15
11:21:56: Erase Timeout       1
11:21:56: Erase offset        1
11:21:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:21:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:21:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:21:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1695 ] 
11:21:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:21:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:21:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:21:56: Host Frequency set to 100000 KHz
11:21:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:21:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:21:57: ####CSD Registe 2.0 Values####
11:21:57: CSD_STRUCTURE                                 :0x1
11:21:57: Reserv1                                       :0x0
11:21:57: Time Access 1 TAAC                            :0xe
11:21:57: Time Access 2 NSAC*100                        :0x0
11:21:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:21:57: Card Command Classess CCC                     :0x5b5
11:21:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:21:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:21:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:21:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:21:57: DSR(driver stage register)  DSR_IMP           :0x0
11:21:57: Reserv2                                       :0x0
11:21:57: Device Size C_SIZE                            :0xedc8
11:21:57: Reserv3                                       :0x0
11:21:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:21:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:21:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:21:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:21:57: Reserv4                                       :0x0
11:21:57: Write Speed Factor R2W_FACTOR                 :0x2
11:21:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:21:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:21:57: FILE_FORMAT_GRP                               :0x0
11:21:57: COPY flag                                     :0x1
11:21:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:21:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:21:57: File_Format                                   :0x0
11:21:57: CRC                                           :0x0
11:21:57: ####CSD Registe Values####  

11:21:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691B0>, <py_sfcl.CommandDataDefinition object at 0x062739C0>) , Command count = 1696 ] 
11:21:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D990>, <py_sfcl.CommandDataDefinition object at 0x06273C90>) , Command count = 1697 ] 
11:21:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:21:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:21:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:21:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:21:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062735A0>, <py_sfcl.PySEnhancedCmdData object at 0x062732A0>, <None>, <py_sfcl.Command23 object at 0x06269B40>) , Command count = 1698 ] 
11:21:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:21:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:00: Host Frequency set to 25000 KHz
11:22:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216540>, 0x0, True) , Command count = 1699 ] 
11:22:00: [GO18_globalSetVolt]### Host voltage value is set.
11:22:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DFC0>, 0x0, False) , Command count = 1700 ] 
11:22:00: [GO18_globalSetVolt]### Host voltage value is set.
11:22:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1701 ] 
11:22:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1702 ] 
11:22:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1703 ] 
11:22:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 1704 ] 
11:22:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x06273300>) , Command count = 1705 ] 
11:22:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1706 ] 
11:22:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:01: Host Frequency set to 25000 KHz
11:22:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:01: ####CSD Registe 2.0 Values####
11:22:01: CSD_STRUCTURE                                 :0x1
11:22:01: Reserv1                                       :0x0
11:22:01: Time Access 1 TAAC                            :0xe
11:22:01: Time Access 2 NSAC*100                        :0x0
11:22:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:01: Card Command Classess CCC                     :0x5b5
11:22:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:01: DSR(driver stage register)  DSR_IMP           :0x0
11:22:01: Reserv2                                       :0x0
11:22:01: Device Size C_SIZE                            :0xedc8
11:22:01: Reserv3                                       :0x0
11:22:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:01: Reserv4                                       :0x0
11:22:01: Write Speed Factor R2W_FACTOR                 :0x2
11:22:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:01: FILE_FORMAT_GRP                               :0x0
11:22:01: COPY flag                                     :0x1
11:22:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:01: File_Format                                   :0x0
11:22:01: CRC                                           :0x0
11:22:01: ####CSD Registe Values####  

11:22:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:01: [GetSCRRegisterEntry] Passed
11:22:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:01: Data_Status_After Erases          : 0
11:22:01: CPRM Security Support             : No Security
11:22:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:01: Spec. Version                     : Version 3.0X
11:22:01: Extended Security Support         : Extended_Security_Not_Supported
11:22:01: Command Support                   : COMMAND_SUPPORT
11:22:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 1707 ] 
11:22:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C60>, <py_sfcl.CommandDataDefinition object at 0x06273F30>) , Command count = 1708 ] 
11:22:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:01: [ SetBusWidth(0x4) , Command count = 1709 ] 
11:22:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1710 ] 
11:22:01: Protected Area Size 0x28000
11:22:01: Bus Width           2
11:22:01: Secure Mode         0
11:22:01: Speed  Class        4
11:22:01: Perf Move           0
11:22:01: Au Size             9
11:22:01: Erase Size          15
11:22:01: Erase Timeout       1
11:22:01: Erase offset        1
11:22:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1711 ] 
11:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:01: Host Frequency set to 100000 KHz
11:22:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:01: ####CSD Registe 2.0 Values####
11:22:01: CSD_STRUCTURE                                 :0x1
11:22:01: Reserv1                                       :0x0
11:22:01: Time Access 1 TAAC                            :0xe
11:22:01: Time Access 2 NSAC*100                        :0x0
11:22:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:01: Card Command Classess CCC                     :0x5b5
11:22:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:01: DSR(driver stage register)  DSR_IMP           :0x0
11:22:01: Reserv2                                       :0x0
11:22:01: Device Size C_SIZE                            :0xedc8
11:22:01: Reserv3                                       :0x0
11:22:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:02: Reserv4                                       :0x0
11:22:02: Write Speed Factor R2W_FACTOR                 :0x2
11:22:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:02: FILE_FORMAT_GRP                               :0x0
11:22:02: COPY flag                                     :0x1
11:22:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:02: File_Format                                   :0x0
11:22:02: CRC                                           :0x0
11:22:02: ####CSD Registe Values####  

11:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D300>, <py_sfcl.CommandDataDefinition object at 0x0626DCF0>) , Command count = 1712 ] 
11:22:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x0627A120>) , Command count = 1713 ] 
11:22:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DF30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD50>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x06273F90>) , Command count = 1714 ] 
11:22:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:05: Host Frequency set to 25000 KHz
11:22:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x062734E0>, 0x0, True) , Command count = 1715 ] 
11:22:05: [GO18_globalSetVolt]### Host voltage value is set.
11:22:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276030>, 0x0, False) , Command count = 1716 ] 
11:22:05: [GO18_globalSetVolt]### Host voltage value is set.
11:22:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1717 ] 
11:22:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1718 ] 
11:22:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1719 ] 
11:22:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276360>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 1720 ] 
11:22:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062734B0>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 1721 ] 
11:22:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1722 ] 
11:22:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:05: Host Frequency set to 25000 KHz
11:22:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:05: ####CSD Registe 2.0 Values####
11:22:05: CSD_STRUCTURE                                 :0x1
11:22:05: Reserv1                                       :0x0
11:22:05: Time Access 1 TAAC                            :0xe
11:22:05: Time Access 2 NSAC*100                        :0x0
11:22:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:05: Card Command Classess CCC                     :0x5b5
11:22:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:05: DSR(driver stage register)  DSR_IMP           :0x0
11:22:05: Reserv2                                       :0x0
11:22:05: Device Size C_SIZE                            :0xedc8
11:22:05: Reserv3                                       :0x0
11:22:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:05: Reserv4                                       :0x0
11:22:05: Write Speed Factor R2W_FACTOR                 :0x2
11:22:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:05: FILE_FORMAT_GRP                               :0x0
11:22:05: COPY flag                                     :0x1
11:22:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:05: File_Format                                   :0x0
11:22:05: CRC                                           :0x0
11:22:05: ####CSD Registe Values####  

11:22:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:05: [GetSCRRegisterEntry] Passed
11:22:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:05: Data_Status_After Erases          : 0
11:22:05: CPRM Security Support             : No Security
11:22:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:05: Spec. Version                     : Version 3.0X
11:22:05: Extended Security Support         : Extended_Security_Not_Supported
11:22:05: Command Support                   : COMMAND_SUPPORT
11:22:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273420>, <py_sfcl.CommandDataDefinition object at 0x06273480>) , Command count = 1723 ] 
11:22:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062762A0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 1724 ] 
11:22:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:05: [ SetBusWidth(0x4) , Command count = 1725 ] 
11:22:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1726 ] 
11:22:05: Protected Area Size 0x28000
11:22:05: Bus Width           2
11:22:05: Secure Mode         0
11:22:05: Speed  Class        4
11:22:05: Perf Move           0
11:22:05: Au Size             9
11:22:05: Erase Size          15
11:22:05: Erase Timeout       1
11:22:05: Erase offset        1
11:22:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1727 ] 
11:22:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:05: Host Frequency set to 100000 KHz
11:22:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:06: ####CSD Registe 2.0 Values####
11:22:06: CSD_STRUCTURE                                 :0x1
11:22:06: Reserv1                                       :0x0
11:22:06: Time Access 1 TAAC                            :0xe
11:22:06: Time Access 2 NSAC*100                        :0x0
11:22:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:06: Card Command Classess CCC                     :0x5b5
11:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:06: DSR(driver stage register)  DSR_IMP           :0x0
11:22:06: Reserv2                                       :0x0
11:22:06: Device Size C_SIZE                            :0xedc8
11:22:06: Reserv3                                       :0x0
11:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:06: Reserv4                                       :0x0
11:22:06: Write Speed Factor R2W_FACTOR                 :0x2
11:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:06: FILE_FORMAT_GRP                               :0x0
11:22:06: COPY flag                                     :0x1
11:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:06: File_Format                                   :0x0
11:22:06: CRC                                           :0x0
11:22:06: ####CSD Registe Values####  

11:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276960>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 1728 ] 
11:22:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC60>, <py_sfcl.CommandDataDefinition object at 0x06273450>) , Command count = 1729 ] 
11:22:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273870>, <py_sfcl.PySEnhancedCmdData object at 0x06273060>, <None>, <py_sfcl.Command23 object at 0x06273810>) , Command count = 1730 ] 
11:22:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:09: Host Frequency set to 25000 KHz
11:22:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276B40>, 0x0, True) , Command count = 1731 ] 
11:22:09: [GO18_globalSetVolt]### Host voltage value is set.
11:22:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x062766F0>, 0x0, False) , Command count = 1732 ] 
11:22:09: [GO18_globalSetVolt]### Host voltage value is set.
11:22:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1733 ] 
11:22:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1734 ] 
11:22:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1735 ] 
11:22:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x062761E0>) , Command count = 1736 ] 
11:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x06276A80>) , Command count = 1737 ] 
11:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1738 ] 
11:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:09: Host Frequency set to 25000 KHz
11:22:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:09: ####CSD Registe 2.0 Values####
11:22:09: CSD_STRUCTURE                                 :0x1
11:22:09: Reserv1                                       :0x0
11:22:09: Time Access 1 TAAC                            :0xe
11:22:09: Time Access 2 NSAC*100                        :0x0
11:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:09: Card Command Classess CCC                     :0x5b5
11:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:09: DSR(driver stage register)  DSR_IMP           :0x0
11:22:09: Reserv2                                       :0x0
11:22:09: Device Size C_SIZE                            :0xedc8
11:22:09: Reserv3                                       :0x0
11:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:09: Reserv4                                       :0x0
11:22:09: Write Speed Factor R2W_FACTOR                 :0x2
11:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:09: FILE_FORMAT_GRP                               :0x0
11:22:09: COPY flag                                     :0x1
11:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:09: File_Format                                   :0x0
11:22:09: CRC                                           :0x0
11:22:09: ####CSD Registe Values####  

11:22:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:09: [GetSCRRegisterEntry] Passed
11:22:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:09: Data_Status_After Erases          : 0
11:22:09: CPRM Security Support             : No Security
11:22:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:09: Spec. Version                     : Version 3.0X
11:22:09: Extended Security Support         : Extended_Security_Not_Supported
11:22:09: Command Support                   : COMMAND_SUPPORT
11:22:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x06273510>) , Command count = 1739 ] 
11:22:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627D180>) , Command count = 1740 ] 
11:22:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:09: [ SetBusWidth(0x4) , Command count = 1741 ] 
11:22:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1742 ] 
11:22:09: Protected Area Size 0x28000
11:22:09: Bus Width           2
11:22:10: Secure Mode         0
11:22:10: Speed  Class        4
11:22:10: Perf Move           0
11:22:10: Au Size             9
11:22:10: Erase Size          15
11:22:10: Erase Timeout       1
11:22:10: Erase offset        1
11:22:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1743 ] 
11:22:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:10: Host Frequency set to 100000 KHz
11:22:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:10: ####CSD Registe 2.0 Values####
11:22:10: CSD_STRUCTURE                                 :0x1
11:22:10: Reserv1                                       :0x0
11:22:10: Time Access 1 TAAC                            :0xe
11:22:10: Time Access 2 NSAC*100                        :0x0
11:22:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:10: Card Command Classess CCC                     :0x5b5
11:22:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:10: DSR(driver stage register)  DSR_IMP           :0x0
11:22:10: Reserv2                                       :0x0
11:22:10: Device Size C_SIZE                            :0xedc8
11:22:10: Reserv3                                       :0x0
11:22:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:10: Reserv4                                       :0x0
11:22:10: Write Speed Factor R2W_FACTOR                 :0x2
11:22:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:10: FILE_FORMAT_GRP                               :0x0
11:22:10: COPY flag                                     :0x1
11:22:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:10: File_Format                                   :0x0
11:22:10: CRC                                           :0x0
11:22:10: ####CSD Registe Values####  

11:22:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D50>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 1744 ] 
11:22:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x06273630>) , Command count = 1745 ] 
11:22:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06273BA0>, <None>, <py_sfcl.Command23 object at 0x06273990>) , Command count = 1746 ] 
11:22:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:13: Host Frequency set to 25000 KHz
11:22:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F30>, 0x0, True) , Command count = 1747 ] 
11:22:13: [GO18_globalSetVolt]### Host voltage value is set.
11:22:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DC30>, 0x0, False) , Command count = 1748 ] 
11:22:13: [GO18_globalSetVolt]### Host voltage value is set.
11:22:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1749 ] 
11:22:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1750 ] 
11:22:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1751 ] 
11:22:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062760F0>, <py_sfcl.CommandDataDefinition object at 0x06276210>) , Command count = 1752 ] 
11:22:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 1753 ] 
11:22:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1754 ] 
11:22:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:14: Host Frequency set to 25000 KHz
11:22:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:14: ####CSD Registe 2.0 Values####
11:22:14: CSD_STRUCTURE                                 :0x1
11:22:14: Reserv1                                       :0x0
11:22:14: Time Access 1 TAAC                            :0xe
11:22:14: Time Access 2 NSAC*100                        :0x0
11:22:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:14: Card Command Classess CCC                     :0x5b5
11:22:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:14: DSR(driver stage register)  DSR_IMP           :0x0
11:22:14: Reserv2                                       :0x0
11:22:14: Device Size C_SIZE                            :0xedc8
11:22:14: Reserv3                                       :0x0
11:22:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:14: Reserv4                                       :0x0
11:22:14: Write Speed Factor R2W_FACTOR                 :0x2
11:22:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:14: FILE_FORMAT_GRP                               :0x0
11:22:14: COPY flag                                     :0x1
11:22:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:14: File_Format                                   :0x0
11:22:14: CRC                                           :0x0
11:22:14: ####CSD Registe Values####  

11:22:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:14: [GetSCRRegisterEntry] Passed
11:22:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:14: Data_Status_After Erases          : 0
11:22:14: CPRM Security Support             : No Security
11:22:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:14: Spec. Version                     : Version 3.0X
11:22:14: Extended Security Support         : Extended_Security_Not_Supported
11:22:14: Command Support                   : COMMAND_SUPPORT
11:22:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276390>, <py_sfcl.CommandDataDefinition object at 0x06273E40>) , Command count = 1755 ] 
11:22:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C60>, <py_sfcl.CommandDataDefinition object at 0x0626D420>) , Command count = 1756 ] 
11:22:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:14: [ SetBusWidth(0x4) , Command count = 1757 ] 
11:22:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1758 ] 
11:22:14: Protected Area Size 0x28000
11:22:14: Bus Width           2
11:22:14: Secure Mode         0
11:22:14: Speed  Class        4
11:22:14: Perf Move           0
11:22:14: Au Size             9
11:22:14: Erase Size          15
11:22:14: Erase Timeout       1
11:22:14: Erase offset        1
11:22:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1759 ] 
11:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:14: Host Frequency set to 100000 KHz
11:22:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:14: ####CSD Registe 2.0 Values####
11:22:14: CSD_STRUCTURE                                 :0x1
11:22:14: Reserv1                                       :0x0
11:22:14: Time Access 1 TAAC                            :0xe
11:22:14: Time Access 2 NSAC*100                        :0x0
11:22:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:14: Card Command Classess CCC                     :0x5b5
11:22:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:14: DSR(driver stage register)  DSR_IMP           :0x0
11:22:14: Reserv2                                       :0x0
11:22:14: Device Size C_SIZE                            :0xedc8
11:22:14: Reserv3                                       :0x0
11:22:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:15: Reserv4                                       :0x0
11:22:15: Write Speed Factor R2W_FACTOR                 :0x2
11:22:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:15: FILE_FORMAT_GRP                               :0x0
11:22:15: COPY flag                                     :0x1
11:22:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:15: File_Format                                   :0x0
11:22:15: CRC                                           :0x0
11:22:15: ####CSD Registe Values####  

11:22:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A480>, <py_sfcl.CommandDataDefinition object at 0x062763C0>) , Command count = 1760 ] 
11:22:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x06269870>) , Command count = 1761 ] 
11:22:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276120>, <py_sfcl.PySEnhancedCmdData object at 0x06273090>, <None>, <py_sfcl.Command23 object at 0x06273B10>) , Command count = 1762 ] 
11:22:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:16: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:18: Host Frequency set to 25000 KHz
11:22:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:18: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D240>, 0x0, True) , Command count = 1763 ] 
11:22:18: [GO18_globalSetVolt]### Host voltage value is set.
11:22:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276990>, 0x0, False) , Command count = 1764 ] 
11:22:18: [GO18_globalSetVolt]### Host voltage value is set.
11:22:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1765 ] 
11:22:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1766 ] 
11:22:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1767 ] 
11:22:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E40>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 1768 ] 
11:22:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA80>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 1769 ] 
11:22:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1770 ] 
11:22:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:18: Host Frequency set to 25000 KHz
11:22:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:18: ####CSD Registe 2.0 Values####
11:22:18: CSD_STRUCTURE                                 :0x1
11:22:18: Reserv1                                       :0x0
11:22:18: Time Access 1 TAAC                            :0xe
11:22:18: Time Access 2 NSAC*100                        :0x0
11:22:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:18: Card Command Classess CCC                     :0x5b5
11:22:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:18: DSR(driver stage register)  DSR_IMP           :0x0
11:22:18: Reserv2                                       :0x0
11:22:18: Device Size C_SIZE                            :0xedc8
11:22:18: Reserv3                                       :0x0
11:22:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:18: Reserv4                                       :0x0
11:22:18: Write Speed Factor R2W_FACTOR                 :0x2
11:22:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:18: FILE_FORMAT_GRP                               :0x0
11:22:18: COPY flag                                     :0x1
11:22:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:18: File_Format                                   :0x0
11:22:18: CRC                                           :0x0
11:22:18: ####CSD Registe Values####  

11:22:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:18: [GetSCRRegisterEntry] Passed
11:22:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:18: Data_Status_After Erases          : 0
11:22:18: CPRM Security Support             : No Security
11:22:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:18: Spec. Version                     : Version 3.0X
11:22:18: Extended Security Support         : Extended_Security_Not_Supported
11:22:18: Command Support                   : COMMAND_SUPPORT
11:22:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F30>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 1771 ] 
11:22:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 1772 ] 
11:22:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:18: [ SetBusWidth(0x4) , Command count = 1773 ] 
11:22:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1774 ] 
11:22:18: Protected Area Size 0x28000
11:22:18: Bus Width           2
11:22:18: Secure Mode         0
11:22:18: Speed  Class        4
11:22:18: Perf Move           0
11:22:18: Au Size             9
11:22:18: Erase Size          15
11:22:18: Erase Timeout       1
11:22:18: Erase offset        1
11:22:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1775 ] 
11:22:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:18: Host Frequency set to 100000 KHz
11:22:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:19: ####CSD Registe 2.0 Values####
11:22:19: CSD_STRUCTURE                                 :0x1
11:22:19: Reserv1                                       :0x0
11:22:19: Time Access 1 TAAC                            :0xe
11:22:19: Time Access 2 NSAC*100                        :0x0
11:22:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:19: Card Command Classess CCC                     :0x5b5
11:22:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:19: DSR(driver stage register)  DSR_IMP           :0x0
11:22:19: Reserv2                                       :0x0
11:22:19: Device Size C_SIZE                            :0xedc8
11:22:19: Reserv3                                       :0x0
11:22:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:19: Reserv4                                       :0x0
11:22:19: Write Speed Factor R2W_FACTOR                 :0x2
11:22:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:19: FILE_FORMAT_GRP                               :0x0
11:22:19: COPY flag                                     :0x1
11:22:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:19: File_Format                                   :0x0
11:22:19: CRC                                           :0x0
11:22:19: ####CSD Registe Values####  

11:22:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06276870>) , Command count = 1776 ] 
11:22:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BD0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 1777 ] 
11:22:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052CAE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A360>, <py_sfcl.PySEnhancedCmdData object at 0x062731B0>, <None>, <py_sfcl.Command23 object at 0x06273C00>) , Command count = 1778 ] 
11:22:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:22: Host Frequency set to 25000 KHz
11:22:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269330>, 0x0, True) , Command count = 1779 ] 
11:22:22: [GO18_globalSetVolt]### Host voltage value is set.
11:22:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x053E2420>, 0x0, False) , Command count = 1780 ] 
11:22:22: [GO18_globalSetVolt]### Host voltage value is set.
11:22:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1781 ] 
11:22:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1782 ] 
11:22:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1783 ] 
11:22:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x0627A420>) , Command count = 1784 ] 
11:22:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A240>, <py_sfcl.CommandDataDefinition object at 0x0627A7E0>) , Command count = 1785 ] 
11:22:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1786 ] 
11:22:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:23: Host Frequency set to 25000 KHz
11:22:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:23: ####CSD Registe 2.0 Values####
11:22:23: CSD_STRUCTURE                                 :0x1
11:22:23: Reserv1                                       :0x0
11:22:23: Time Access 1 TAAC                            :0xe
11:22:23: Time Access 2 NSAC*100                        :0x0
11:22:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:23: Card Command Classess CCC                     :0x5b5
11:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:23: DSR(driver stage register)  DSR_IMP           :0x0
11:22:23: Reserv2                                       :0x0
11:22:23: Device Size C_SIZE                            :0xedc8
11:22:23: Reserv3                                       :0x0
11:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:23: Reserv4                                       :0x0
11:22:23: Write Speed Factor R2W_FACTOR                 :0x2
11:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:23: FILE_FORMAT_GRP                               :0x0
11:22:23: COPY flag                                     :0x1
11:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:23: File_Format                                   :0x0
11:22:23: CRC                                           :0x0
11:22:23: ####CSD Registe Values####  

11:22:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:23: [GetSCRRegisterEntry] Passed
11:22:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:23: Data_Status_After Erases          : 0
11:22:23: CPRM Security Support             : No Security
11:22:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:23: Spec. Version                     : Version 3.0X
11:22:23: Extended Security Support         : Extended_Security_Not_Supported
11:22:23: Command Support                   : COMMAND_SUPPORT
11:22:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 1787 ] 
11:22:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC60>, <py_sfcl.CommandDataDefinition object at 0x0627A9C0>) , Command count = 1788 ] 
11:22:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:23: [ SetBusWidth(0x4) , Command count = 1789 ] 
11:22:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1790 ] 
11:22:23: Protected Area Size 0x28000
11:22:23: Bus Width           2
11:22:23: Secure Mode         0
11:22:23: Speed  Class        4
11:22:23: Perf Move           0
11:22:23: Au Size             9
11:22:23: Erase Size          15
11:22:23: Erase Timeout       1
11:22:23: Erase offset        1
11:22:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1791 ] 
11:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:23: Host Frequency set to 100000 KHz
11:22:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:23: ####CSD Registe 2.0 Values####
11:22:23: CSD_STRUCTURE                                 :0x1
11:22:23: Reserv1                                       :0x0
11:22:23: Time Access 1 TAAC                            :0xe
11:22:23: Time Access 2 NSAC*100                        :0x0
11:22:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:23: Card Command Classess CCC                     :0x5b5
11:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:23: DSR(driver stage register)  DSR_IMP           :0x0
11:22:23: Reserv2                                       :0x0
11:22:23: Device Size C_SIZE                            :0xedc8
11:22:23: Reserv3                                       :0x0
11:22:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:24: Reserv4                                       :0x0
11:22:24: Write Speed Factor R2W_FACTOR                 :0x2
11:22:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:24: FILE_FORMAT_GRP                               :0x0
11:22:24: COPY flag                                     :0x1
11:22:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:24: File_Format                                   :0x0
11:22:24: CRC                                           :0x0
11:22:24: ####CSD Registe Values####  

11:22:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x0627DB40>) , Command count = 1792 ] 
11:22:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B40>, <py_sfcl.CommandDataDefinition object at 0x06268720>) , Command count = 1793 ] 
11:22:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276CC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AD50>, <None>, <py_sfcl.Command23 object at 0x0627A930>) , Command count = 1794 ] 
11:22:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:27: Host Frequency set to 25000 KHz
11:22:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:27: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DB10>, 0x0, True) , Command count = 1795 ] 
11:22:27: [GO18_globalSetVolt]### Host voltage value is set.
11:22:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DE40>, 0x0, False) , Command count = 1796 ] 
11:22:27: [GO18_globalSetVolt]### Host voltage value is set.
11:22:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1797 ] 
11:22:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1798 ] 
11:22:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1799 ] 
11:22:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 1800 ] 
11:22:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627A7B0>) , Command count = 1801 ] 
11:22:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1802 ] 
11:22:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:27: Host Frequency set to 25000 KHz
11:22:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:27: ####CSD Registe 2.0 Values####
11:22:27: CSD_STRUCTURE                                 :0x1
11:22:27: Reserv1                                       :0x0
11:22:27: Time Access 1 TAAC                            :0xe
11:22:27: Time Access 2 NSAC*100                        :0x0
11:22:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:27: Card Command Classess CCC                     :0x5b5
11:22:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:27: DSR(driver stage register)  DSR_IMP           :0x0
11:22:27: Reserv2                                       :0x0
11:22:27: Device Size C_SIZE                            :0xedc8
11:22:27: Reserv3                                       :0x0
11:22:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:27: Reserv4                                       :0x0
11:22:27: Write Speed Factor R2W_FACTOR                 :0x2
11:22:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:27: FILE_FORMAT_GRP                               :0x0
11:22:27: COPY flag                                     :0x1
11:22:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:27: File_Format                                   :0x0
11:22:27: CRC                                           :0x0
11:22:27: ####CSD Registe Values####  

11:22:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:27: [GetSCRRegisterEntry] Passed
11:22:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:27: Data_Status_After Erases          : 0
11:22:27: CPRM Security Support             : No Security
11:22:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:27: Spec. Version                     : Version 3.0X
11:22:27: Extended Security Support         : Extended_Security_Not_Supported
11:22:27: Command Support                   : COMMAND_SUPPORT
11:22:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 1803 ] 
11:22:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x0627D300>) , Command count = 1804 ] 
11:22:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:27: [ SetBusWidth(0x4) , Command count = 1805 ] 
11:22:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1806 ] 
11:22:27: Protected Area Size 0x28000
11:22:27: Bus Width           2
11:22:27: Secure Mode         0
11:22:27: Speed  Class        4
11:22:27: Perf Move           0
11:22:27: Au Size             9
11:22:27: Erase Size          15
11:22:27: Erase Timeout       1
11:22:27: Erase offset        1
11:22:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1807 ] 
11:22:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:27: Host Frequency set to 100000 KHz
11:22:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:28: ####CSD Registe 2.0 Values####
11:22:28: CSD_STRUCTURE                                 :0x1
11:22:28: Reserv1                                       :0x0
11:22:28: Time Access 1 TAAC                            :0xe
11:22:28: Time Access 2 NSAC*100                        :0x0
11:22:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:28: Card Command Classess CCC                     :0x5b5
11:22:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:28: DSR(driver stage register)  DSR_IMP           :0x0
11:22:28: Reserv2                                       :0x0
11:22:28: Device Size C_SIZE                            :0xedc8
11:22:28: Reserv3                                       :0x0
11:22:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:28: Reserv4                                       :0x0
11:22:28: Write Speed Factor R2W_FACTOR                 :0x2
11:22:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:28: FILE_FORMAT_GRP                               :0x0
11:22:28: COPY flag                                     :0x1
11:22:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:28: File_Format                                   :0x0
11:22:28: CRC                                           :0x0
11:22:28: ####CSD Registe Values####  

11:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 1808 ] 
11:22:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x0626D870>) , Command count = 1809 ] 
11:22:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EFEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A9F0>, <None>, <py_sfcl.Command23 object at 0x0627A1B0>) , Command count = 1810 ] 
11:22:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:29: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:31: Host Frequency set to 25000 KHz
11:22:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:31: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AB70>, 0x0, True) , Command count = 1811 ] 
11:22:31: [GO18_globalSetVolt]### Host voltage value is set.
11:22:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AF00>, 0x0, False) , Command count = 1812 ] 
11:22:31: [GO18_globalSetVolt]### Host voltage value is set.
11:22:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1813 ] 
11:22:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1814 ] 
11:22:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1815 ] 
11:22:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627A990>) , Command count = 1816 ] 
11:22:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x0627AC00>) , Command count = 1817 ] 
11:22:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1818 ] 
11:22:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:31: Host Frequency set to 25000 KHz
11:22:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:31: ####CSD Registe 2.0 Values####
11:22:31: CSD_STRUCTURE                                 :0x1
11:22:31: Reserv1                                       :0x0
11:22:31: Time Access 1 TAAC                            :0xe
11:22:31: Time Access 2 NSAC*100                        :0x0
11:22:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:31: Card Command Classess CCC                     :0x5b5
11:22:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:31: DSR(driver stage register)  DSR_IMP           :0x0
11:22:31: Reserv2                                       :0x0
11:22:31: Device Size C_SIZE                            :0xedc8
11:22:31: Reserv3                                       :0x0
11:22:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:31: Reserv4                                       :0x0
11:22:31: Write Speed Factor R2W_FACTOR                 :0x2
11:22:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:31: FILE_FORMAT_GRP                               :0x0
11:22:31: COPY flag                                     :0x1
11:22:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:31: File_Format                                   :0x0
11:22:31: CRC                                           :0x0
11:22:31: ####CSD Registe Values####  

11:22:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:31: [GetSCRRegisterEntry] Passed
11:22:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:31: Data_Status_After Erases          : 0
11:22:31: CPRM Security Support             : No Security
11:22:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:31: Spec. Version                     : Version 3.0X
11:22:31: Extended Security Support         : Extended_Security_Not_Supported
11:22:31: Command Support                   : COMMAND_SUPPORT
11:22:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF2D0>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 1819 ] 
11:22:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401FC0>, <py_sfcl.CommandDataDefinition object at 0x06216480>) , Command count = 1820 ] 
11:22:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:31: [ SetBusWidth(0x4) , Command count = 1821 ] 
11:22:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1822 ] 
11:22:31: Protected Area Size 0x28000
11:22:31: Bus Width           2
11:22:32: Secure Mode         0
11:22:32: Speed  Class        4
11:22:32: Perf Move           0
11:22:32: Au Size             9
11:22:32: Erase Size          15
11:22:32: Erase Timeout       1
11:22:32: Erase offset        1
11:22:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1823 ] 
11:22:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:32: Host Frequency set to 100000 KHz
11:22:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:32: ####CSD Registe 2.0 Values####
11:22:32: CSD_STRUCTURE                                 :0x1
11:22:32: Reserv1                                       :0x0
11:22:32: Time Access 1 TAAC                            :0xe
11:22:32: Time Access 2 NSAC*100                        :0x0
11:22:32: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:32: Card Command Classess CCC                     :0x5b5
11:22:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:32: DSR(driver stage register)  DSR_IMP           :0x0
11:22:32: Reserv2                                       :0x0
11:22:32: Device Size C_SIZE                            :0xedc8
11:22:32: Reserv3                                       :0x0
11:22:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:32: Reserv4                                       :0x0
11:22:32: Write Speed Factor R2W_FACTOR                 :0x2
11:22:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:32: FILE_FORMAT_GRP                               :0x0
11:22:32: COPY flag                                     :0x1
11:22:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:32: File_Format                                   :0x0
11:22:32: CRC                                           :0x0
11:22:32: ####CSD Registe Values####  

11:22:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 1824 ] 
11:22:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCC0>, <py_sfcl.CommandDataDefinition object at 0x06269CC0>) , Command count = 1825 ] 
11:22:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EFF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D5D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D1B0>, <None>, <py_sfcl.Command23 object at 0x0627A3C0>) , Command count = 1826 ] 
11:22:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:33: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:35: Host Frequency set to 25000 KHz
11:22:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:35: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFC30>, 0x0, True) , Command count = 1827 ] 
11:22:35: [GO18_globalSetVolt]### Host voltage value is set.
11:22:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216EA0>, 0x0, False) , Command count = 1828 ] 
11:22:35: [GO18_globalSetVolt]### Host voltage value is set.
11:22:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1829 ] 
11:22:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1830 ] 
11:22:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1831 ] 
11:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062685D0>, <py_sfcl.CommandDataDefinition object at 0x0627A300>) , Command count = 1832 ] 
11:22:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 1833 ] 
11:22:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1834 ] 
11:22:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:36: Host Frequency set to 25000 KHz
11:22:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:36: ####CSD Registe 2.0 Values####
11:22:36: CSD_STRUCTURE                                 :0x1
11:22:36: Reserv1                                       :0x0
11:22:36: Time Access 1 TAAC                            :0xe
11:22:36: Time Access 2 NSAC*100                        :0x0
11:22:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:36: Card Command Classess CCC                     :0x5b5
11:22:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:36: DSR(driver stage register)  DSR_IMP           :0x0
11:22:36: Reserv2                                       :0x0
11:22:36: Device Size C_SIZE                            :0xedc8
11:22:36: Reserv3                                       :0x0
11:22:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:36: Reserv4                                       :0x0
11:22:36: Write Speed Factor R2W_FACTOR                 :0x2
11:22:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:36: FILE_FORMAT_GRP                               :0x0
11:22:36: COPY flag                                     :0x1
11:22:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:36: File_Format                                   :0x0
11:22:36: CRC                                           :0x0
11:22:36: ####CSD Registe Values####  

11:22:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:36: [GetSCRRegisterEntry] Passed
11:22:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:36: Data_Status_After Erases          : 0
11:22:36: CPRM Security Support             : No Security
11:22:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:36: Spec. Version                     : Version 3.0X
11:22:36: Extended Security Support         : Extended_Security_Not_Supported
11:22:36: Command Support                   : COMMAND_SUPPORT
11:22:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x0627A630>) , Command count = 1835 ] 
11:22:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268930>, <py_sfcl.CommandDataDefinition object at 0x05401F90>) , Command count = 1836 ] 
11:22:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:36: [ SetBusWidth(0x4) , Command count = 1837 ] 
11:22:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1838 ] 
11:22:36: Protected Area Size 0x28000
11:22:36: Bus Width           2
11:22:36: Secure Mode         0
11:22:36: Speed  Class        4
11:22:36: Perf Move           0
11:22:36: Au Size             9
11:22:36: Erase Size          15
11:22:36: Erase Timeout       1
11:22:36: Erase offset        1
11:22:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1839 ] 
11:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:36: Host Frequency set to 100000 KHz
11:22:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:36: ####CSD Registe 2.0 Values####
11:22:36: CSD_STRUCTURE                                 :0x1
11:22:36: Reserv1                                       :0x0
11:22:36: Time Access 1 TAAC                            :0xe
11:22:36: Time Access 2 NSAC*100                        :0x0
11:22:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:36: Card Command Classess CCC                     :0x5b5
11:22:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:36: DSR(driver stage register)  DSR_IMP           :0x0
11:22:36: Reserv2                                       :0x0
11:22:36: Device Size C_SIZE                            :0xedc8
11:22:36: Reserv3                                       :0x0
11:22:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:37: Reserv4                                       :0x0
11:22:37: Write Speed Factor R2W_FACTOR                 :0x2
11:22:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:37: FILE_FORMAT_GRP                               :0x0
11:22:37: COPY flag                                     :0x1
11:22:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:37: File_Format                                   :0x0
11:22:37: CRC                                           :0x0
11:22:37: ####CSD Registe Values####  

11:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x053FB930>) , Command count = 1840 ] 
11:22:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F60>, <py_sfcl.CommandDataDefinition object at 0x0627DEA0>) , Command count = 1841 ] 
11:22:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DF90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DF60>, <None>, <py_sfcl.Command23 object at 0x0627D4E0>) , Command count = 1842 ] 
11:22:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:40: Host Frequency set to 25000 KHz
11:22:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401CC0>, 0x0, True) , Command count = 1843 ] 
11:22:40: [GO18_globalSetVolt]### Host voltage value is set.
11:22:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x062684B0>, 0x0, False) , Command count = 1844 ] 
11:22:40: [GO18_globalSetVolt]### Host voltage value is set.
11:22:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1845 ] 
11:22:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1846 ] 
11:22:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1847 ] 
11:22:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E70>, <py_sfcl.CommandDataDefinition object at 0x06268990>) , Command count = 1848 ] 
11:22:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE70>, <py_sfcl.CommandDataDefinition object at 0x0627D210>) , Command count = 1849 ] 
11:22:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1850 ] 
11:22:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:40: Host Frequency set to 25000 KHz
11:22:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:40: ####CSD Registe 2.0 Values####
11:22:40: CSD_STRUCTURE                                 :0x1
11:22:40: Reserv1                                       :0x0
11:22:40: Time Access 1 TAAC                            :0xe
11:22:40: Time Access 2 NSAC*100                        :0x0
11:22:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:40: Card Command Classess CCC                     :0x5b5
11:22:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:40: DSR(driver stage register)  DSR_IMP           :0x0
11:22:40: Reserv2                                       :0x0
11:22:40: Device Size C_SIZE                            :0xedc8
11:22:40: Reserv3                                       :0x0
11:22:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:40: Reserv4                                       :0x0
11:22:40: Write Speed Factor R2W_FACTOR                 :0x2
11:22:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:40: FILE_FORMAT_GRP                               :0x0
11:22:40: COPY flag                                     :0x1
11:22:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:40: File_Format                                   :0x0
11:22:40: CRC                                           :0x0
11:22:40: ####CSD Registe Values####  

11:22:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:40: [GetSCRRegisterEntry] Passed
11:22:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:40: Data_Status_After Erases          : 0
11:22:40: CPRM Security Support             : No Security
11:22:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:40: Spec. Version                     : Version 3.0X
11:22:40: Extended Security Support         : Extended_Security_Not_Supported
11:22:40: Command Support                   : COMMAND_SUPPORT
11:22:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC30>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 1851 ] 
11:22:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062165D0>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 1852 ] 
11:22:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:40: [ SetBusWidth(0x4) , Command count = 1853 ] 
11:22:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1854 ] 
11:22:40: Protected Area Size 0x28000
11:22:40: Bus Width           2
11:22:40: Secure Mode         0
11:22:40: Speed  Class        4
11:22:40: Perf Move           0
11:22:40: Au Size             9
11:22:40: Erase Size          15
11:22:40: Erase Timeout       1
11:22:40: Erase offset        1
11:22:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1855 ] 
11:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:41: Host Frequency set to 100000 KHz
11:22:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:41: ####CSD Registe 2.0 Values####
11:22:41: CSD_STRUCTURE                                 :0x1
11:22:41: Reserv1                                       :0x0
11:22:41: Time Access 1 TAAC                            :0xe
11:22:41: Time Access 2 NSAC*100                        :0x0
11:22:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:41: Card Command Classess CCC                     :0x5b5
11:22:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:41: DSR(driver stage register)  DSR_IMP           :0x0
11:22:41: Reserv2                                       :0x0
11:22:41: Device Size C_SIZE                            :0xedc8
11:22:41: Reserv3                                       :0x0
11:22:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:41: Reserv4                                       :0x0
11:22:41: Write Speed Factor R2W_FACTOR                 :0x2
11:22:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:41: FILE_FORMAT_GRP                               :0x0
11:22:41: COPY flag                                     :0x1
11:22:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:41: File_Format                                   :0x0
11:22:41: CRC                                           :0x0
11:22:41: ####CSD Registe Values####  

11:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 1856 ] 
11:22:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216C00>, <py_sfcl.CommandDataDefinition object at 0x0627D2A0>) , Command count = 1857 ] 
11:22:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062692D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DF00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D720>, <None>, <py_sfcl.Command23 object at 0x0627D660>) , Command count = 1858 ] 
11:22:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:44: Host Frequency set to 25000 KHz
11:22:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 1859 ] 
11:22:44: [GO18_globalSetVolt]### Host voltage value is set.
11:22:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D7E0>, 0x0, False) , Command count = 1860 ] 
11:22:44: [GO18_globalSetVolt]### Host voltage value is set.
11:22:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1861 ] 
11:22:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1862 ] 
11:22:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1863 ] 
11:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0627ABD0>) , Command count = 1864 ] 
11:22:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 1865 ] 
11:22:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1866 ] 
11:22:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:45: Host Frequency set to 25000 KHz
11:22:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:45: ####CSD Registe 2.0 Values####
11:22:45: CSD_STRUCTURE                                 :0x1
11:22:45: Reserv1                                       :0x0
11:22:45: Time Access 1 TAAC                            :0xe
11:22:45: Time Access 2 NSAC*100                        :0x0
11:22:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:45: Card Command Classess CCC                     :0x5b5
11:22:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:45: DSR(driver stage register)  DSR_IMP           :0x0
11:22:45: Reserv2                                       :0x0
11:22:45: Device Size C_SIZE                            :0xedc8
11:22:45: Reserv3                                       :0x0
11:22:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:45: Reserv4                                       :0x0
11:22:45: Write Speed Factor R2W_FACTOR                 :0x2
11:22:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:45: FILE_FORMAT_GRP                               :0x0
11:22:45: COPY flag                                     :0x1
11:22:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:45: File_Format                                   :0x0
11:22:45: CRC                                           :0x0
11:22:45: ####CSD Registe Values####  

11:22:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:45: [GetSCRRegisterEntry] Passed
11:22:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:45: Data_Status_After Erases          : 0
11:22:45: CPRM Security Support             : No Security
11:22:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:45: Spec. Version                     : Version 3.0X
11:22:45: Extended Security Support         : Extended_Security_Not_Supported
11:22:45: Command Support                   : COMMAND_SUPPORT
11:22:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268480>, <py_sfcl.CommandDataDefinition object at 0x06268840>) , Command count = 1867 ] 
11:22:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x0627D540>) , Command count = 1868 ] 
11:22:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:45: [ SetBusWidth(0x4) , Command count = 1869 ] 
11:22:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062169C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1870 ] 
11:22:45: Protected Area Size 0x28000
11:22:45: Bus Width           2
11:22:45: Secure Mode         0
11:22:45: Speed  Class        4
11:22:45: Perf Move           0
11:22:45: Au Size             9
11:22:45: Erase Size          15
11:22:45: Erase Timeout       1
11:22:45: Erase offset        1
11:22:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1871 ] 
11:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:45: Host Frequency set to 100000 KHz
11:22:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:45: ####CSD Registe 2.0 Values####
11:22:45: CSD_STRUCTURE                                 :0x1
11:22:45: Reserv1                                       :0x0
11:22:45: Time Access 1 TAAC                            :0xe
11:22:45: Time Access 2 NSAC*100                        :0x0
11:22:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:45: Card Command Classess CCC                     :0x5b5
11:22:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:45: DSR(driver stage register)  DSR_IMP           :0x0
11:22:45: Reserv2                                       :0x0
11:22:45: Device Size C_SIZE                            :0xedc8
11:22:45: Reserv3                                       :0x0
11:22:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:46: Reserv4                                       :0x0
11:22:46: Write Speed Factor R2W_FACTOR                 :0x2
11:22:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:46: FILE_FORMAT_GRP                               :0x0
11:22:46: COPY flag                                     :0x1
11:22:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:46: File_Format                                   :0x0
11:22:46: CRC                                           :0x0
11:22:46: ####CSD Registe Values####  

11:22:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D240>, <py_sfcl.CommandDataDefinition object at 0x0627D120>) , Command count = 1872 ] 
11:22:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3C0>, <py_sfcl.CommandDataDefinition object at 0x06273960>) , Command count = 1873 ] 
11:22:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062739F0>, <py_sfcl.PySEnhancedCmdData object at 0x062733C0>, <None>, <py_sfcl.Command23 object at 0x0627DCC0>) , Command count = 1874 ] 
11:22:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:49: Host Frequency set to 25000 KHz
11:22:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D270>, 0x0, True) , Command count = 1875 ] 
11:22:49: [GO18_globalSetVolt]### Host voltage value is set.
11:22:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D870>, 0x0, False) , Command count = 1876 ] 
11:22:49: [GO18_globalSetVolt]### Host voltage value is set.
11:22:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1877 ] 
11:22:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1878 ] 
11:22:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1879 ] 
11:22:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x06269750>) , Command count = 1880 ] 
11:22:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x062687B0>) , Command count = 1881 ] 
11:22:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1882 ] 
11:22:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:49: Host Frequency set to 25000 KHz
11:22:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:49: ####CSD Registe 2.0 Values####
11:22:49: CSD_STRUCTURE                                 :0x1
11:22:49: Reserv1                                       :0x0
11:22:49: Time Access 1 TAAC                            :0xe
11:22:49: Time Access 2 NSAC*100                        :0x0
11:22:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:49: Card Command Classess CCC                     :0x5b5
11:22:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:49: DSR(driver stage register)  DSR_IMP           :0x0
11:22:49: Reserv2                                       :0x0
11:22:49: Device Size C_SIZE                            :0xedc8
11:22:49: Reserv3                                       :0x0
11:22:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:49: Reserv4                                       :0x0
11:22:49: Write Speed Factor R2W_FACTOR                 :0x2
11:22:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:49: FILE_FORMAT_GRP                               :0x0
11:22:49: COPY flag                                     :0x1
11:22:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:49: File_Format                                   :0x0
11:22:49: CRC                                           :0x0
11:22:49: ####CSD Registe Values####  

11:22:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:49: [GetSCRRegisterEntry] Passed
11:22:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:49: Data_Status_After Erases          : 0
11:22:49: CPRM Security Support             : No Security
11:22:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:49: Spec. Version                     : Version 3.0X
11:22:49: Extended Security Support         : Extended_Security_Not_Supported
11:22:49: Command Support                   : COMMAND_SUPPORT
11:22:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268BA0>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 1883 ] 
11:22:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x0627D690>) , Command count = 1884 ] 
11:22:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:49: [ SetBusWidth(0x4) , Command count = 1885 ] 
11:22:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062693C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1886 ] 
11:22:49: Protected Area Size 0x28000
11:22:49: Bus Width           2
11:22:49: Secure Mode         0
11:22:49: Speed  Class        4
11:22:49: Perf Move           0
11:22:49: Au Size             9
11:22:49: Erase Size          15
11:22:49: Erase Timeout       1
11:22:49: Erase offset        1
11:22:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1887 ] 
11:22:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:49: Host Frequency set to 100000 KHz
11:22:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:50: ####CSD Registe 2.0 Values####
11:22:50: CSD_STRUCTURE                                 :0x1
11:22:50: Reserv1                                       :0x0
11:22:50: Time Access 1 TAAC                            :0xe
11:22:50: Time Access 2 NSAC*100                        :0x0
11:22:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:50: Card Command Classess CCC                     :0x5b5
11:22:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:50: DSR(driver stage register)  DSR_IMP           :0x0
11:22:50: Reserv2                                       :0x0
11:22:50: Device Size C_SIZE                            :0xedc8
11:22:50: Reserv3                                       :0x0
11:22:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:50: Reserv4                                       :0x0
11:22:50: Write Speed Factor R2W_FACTOR                 :0x2
11:22:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:50: FILE_FORMAT_GRP                               :0x0
11:22:50: COPY flag                                     :0x1
11:22:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:50: File_Format                                   :0x0
11:22:50: CRC                                           :0x0
11:22:50: ####CSD Registe Values####  

11:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062686F0>, <py_sfcl.CommandDataDefinition object at 0x06268A80>) , Command count = 1888 ] 
11:22:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 1889 ] 
11:22:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06273780>, <None>, <py_sfcl.Command23 object at 0x06273ED0>) , Command count = 1890 ] 
11:22:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:53: Host Frequency set to 25000 KHz
11:22:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x062681B0>, 0x0, True) , Command count = 1891 ] 
11:22:53: [GO18_globalSetVolt]### Host voltage value is set.
11:22:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268D50>, 0x0, False) , Command count = 1892 ] 
11:22:53: [GO18_globalSetVolt]### Host voltage value is set.
11:22:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1893 ] 
11:22:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1894 ] 
11:22:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1895 ] 
11:22:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x0627A330>) , Command count = 1896 ] 
11:22:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D600>, <py_sfcl.CommandDataDefinition object at 0x062698D0>) , Command count = 1897 ] 
11:22:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1898 ] 
11:22:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:53: Host Frequency set to 25000 KHz
11:22:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:53: ####CSD Registe 2.0 Values####
11:22:53: CSD_STRUCTURE                                 :0x1
11:22:53: Reserv1                                       :0x0
11:22:53: Time Access 1 TAAC                            :0xe
11:22:53: Time Access 2 NSAC*100                        :0x0
11:22:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:53: Card Command Classess CCC                     :0x5b5
11:22:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:53: DSR(driver stage register)  DSR_IMP           :0x0
11:22:53: Reserv2                                       :0x0
11:22:53: Device Size C_SIZE                            :0xedc8
11:22:53: Reserv3                                       :0x0
11:22:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:53: Reserv4                                       :0x0
11:22:53: Write Speed Factor R2W_FACTOR                 :0x2
11:22:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:53: FILE_FORMAT_GRP                               :0x0
11:22:53: COPY flag                                     :0x1
11:22:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:53: File_Format                                   :0x0
11:22:53: CRC                                           :0x0
11:22:53: ####CSD Registe Values####  

11:22:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:53: [GetSCRRegisterEntry] Passed
11:22:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:53: Data_Status_After Erases          : 0
11:22:53: CPRM Security Support             : No Security
11:22:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:53: Spec. Version                     : Version 3.0X
11:22:53: Extended Security Support         : Extended_Security_Not_Supported
11:22:53: Command Support                   : COMMAND_SUPPORT
11:22:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269060>, <py_sfcl.CommandDataDefinition object at 0x06269AB0>) , Command count = 1899 ] 
11:22:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6C0>, <py_sfcl.CommandDataDefinition object at 0x0627DE70>) , Command count = 1900 ] 
11:22:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:53: [ SetBusWidth(0x4) , Command count = 1901 ] 
11:22:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1902 ] 
11:22:53: Protected Area Size 0x28000
11:22:53: Bus Width           2
11:22:54: Secure Mode         0
11:22:54: Speed  Class        4
11:22:54: Perf Move           0
11:22:54: Au Size             9
11:22:54: Erase Size          15
11:22:54: Erase Timeout       1
11:22:54: Erase offset        1
11:22:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1903 ] 
11:22:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:54: Host Frequency set to 100000 KHz
11:22:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:54: ####CSD Registe 2.0 Values####
11:22:54: CSD_STRUCTURE                                 :0x1
11:22:54: Reserv1                                       :0x0
11:22:54: Time Access 1 TAAC                            :0xe
11:22:54: Time Access 2 NSAC*100                        :0x0
11:22:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:54: Card Command Classess CCC                     :0x5b5
11:22:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:54: DSR(driver stage register)  DSR_IMP           :0x0
11:22:54: Reserv2                                       :0x0
11:22:54: Device Size C_SIZE                            :0xedc8
11:22:54: Reserv3                                       :0x0
11:22:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:54: Reserv4                                       :0x0
11:22:54: Write Speed Factor R2W_FACTOR                 :0x2
11:22:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:54: FILE_FORMAT_GRP                               :0x0
11:22:54: COPY flag                                     :0x1
11:22:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:54: File_Format                                   :0x0
11:22:54: CRC                                           :0x0
11:22:54: ####CSD Registe Values####  

11:22:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268210>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 1904 ] 
11:22:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 1905 ] 
11:22:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269D80>, <py_sfcl.PySEnhancedCmdData object at 0x062735D0>, <None>, <py_sfcl.Command23 object at 0x06273960>) , Command count = 1906 ] 
11:22:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:22:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:22:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:57: Host Frequency set to 25000 KHz
11:22:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:22:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:22:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216A80>, 0x0, True) , Command count = 1907 ] 
11:22:57: [GO18_globalSetVolt]### Host voltage value is set.
11:22:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:22:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269780>, 0x0, False) , Command count = 1908 ] 
11:22:57: [GO18_globalSetVolt]### Host voltage value is set.
11:22:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1909 ] 
11:22:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:22:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1910 ] 
11:22:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:22:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:22:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:22:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:22:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:22:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1911 ] 
11:22:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:22:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9C0>, <py_sfcl.CommandDataDefinition object at 0x06269E10>) , Command count = 1912 ] 
11:22:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CF0>, <py_sfcl.CommandDataDefinition object at 0x06268E10>) , Command count = 1913 ] 
11:22:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:22:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1914 ] 
11:22:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:22:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:22:58: Host Frequency set to 25000 KHz
11:22:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:22:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:58: ####CSD Registe 2.0 Values####
11:22:58: CSD_STRUCTURE                                 :0x1
11:22:58: Reserv1                                       :0x0
11:22:58: Time Access 1 TAAC                            :0xe
11:22:58: Time Access 2 NSAC*100                        :0x0
11:22:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:22:58: Card Command Classess CCC                     :0x5b5
11:22:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:58: DSR(driver stage register)  DSR_IMP           :0x0
11:22:58: Reserv2                                       :0x0
11:22:58: Device Size C_SIZE                            :0xedc8
11:22:58: Reserv3                                       :0x0
11:22:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:58: Reserv4                                       :0x0
11:22:58: Write Speed Factor R2W_FACTOR                 :0x2
11:22:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:58: FILE_FORMAT_GRP                               :0x0
11:22:58: COPY flag                                     :0x1
11:22:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:58: File_Format                                   :0x0
11:22:58: CRC                                           :0x0
11:22:58: ####CSD Registe Values####  

11:22:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:22:58: [GetSCRRegisterEntry] Passed
11:22:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:22:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:22:58: Data_Status_After Erases          : 0
11:22:58: CPRM Security Support             : No Security
11:22:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:22:58: Spec. Version                     : Version 3.0X
11:22:58: Extended Security Support         : Extended_Security_Not_Supported
11:22:58: Command Support                   : COMMAND_SUPPORT
11:22:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268FC0>, <py_sfcl.CommandDataDefinition object at 0x06269E70>) , Command count = 1915 ] 
11:22:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268060>, <py_sfcl.CommandDataDefinition object at 0x06269B10>) , Command count = 1916 ] 
11:22:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:22:58: [ SetBusWidth(0x4) , Command count = 1917 ] 
11:22:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:22:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062696F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1918 ] 
11:22:58: Protected Area Size 0x28000
11:22:58: Bus Width           2
11:22:58: Secure Mode         0
11:22:58: Speed  Class        4
11:22:58: Perf Move           0
11:22:58: Au Size             9
11:22:58: Erase Size          15
11:22:58: Erase Timeout       1
11:22:58: Erase offset        1
11:22:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:22:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:22:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1919 ] 
11:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:22:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:22:58: Host Frequency set to 100000 KHz
11:22:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:22:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:22:58: ####CSD Registe 2.0 Values####
11:22:58: CSD_STRUCTURE                                 :0x1
11:22:58: Reserv1                                       :0x0
11:22:58: Time Access 1 TAAC                            :0xe
11:22:58: Time Access 2 NSAC*100                        :0x0
11:22:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:22:58: Card Command Classess CCC                     :0x5b5
11:22:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:22:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:22:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:22:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:22:58: DSR(driver stage register)  DSR_IMP           :0x0
11:22:58: Reserv2                                       :0x0
11:22:58: Device Size C_SIZE                            :0xedc8
11:22:58: Reserv3                                       :0x0
11:22:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:22:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:22:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:22:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:22:59: Reserv4                                       :0x0
11:22:59: Write Speed Factor R2W_FACTOR                 :0x2
11:22:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:22:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:22:59: FILE_FORMAT_GRP                               :0x0
11:22:59: COPY flag                                     :0x1
11:22:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:22:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:22:59: File_Format                                   :0x0
11:22:59: CRC                                           :0x0
11:22:59: ####CSD Registe Values####  

11:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268510>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 1920 ] 
11:22:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x0626D4B0>) , Command count = 1921 ] 
11:22:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:22:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:22:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:22:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:22:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D2A0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D4E0>, <None>, <py_sfcl.Command23 object at 0x0626D600>) , Command count = 1922 ] 
11:22:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:02: Host Frequency set to 25000 KHz
11:23:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 1923 ] 
11:23:02: [GO18_globalSetVolt]### Host voltage value is set.
11:23:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D540>, 0x0, False) , Command count = 1924 ] 
11:23:02: [GO18_globalSetVolt]### Host voltage value is set.
11:23:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1925 ] 
11:23:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1926 ] 
11:23:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1927 ] 
11:23:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626D630>) , Command count = 1928 ] 
11:23:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D480>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 1929 ] 
11:23:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1930 ] 
11:23:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:02: Host Frequency set to 25000 KHz
11:23:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:02: ####CSD Registe 2.0 Values####
11:23:02: CSD_STRUCTURE                                 :0x1
11:23:02: Reserv1                                       :0x0
11:23:02: Time Access 1 TAAC                            :0xe
11:23:02: Time Access 2 NSAC*100                        :0x0
11:23:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:02: Card Command Classess CCC                     :0x5b5
11:23:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:02: DSR(driver stage register)  DSR_IMP           :0x0
11:23:02: Reserv2                                       :0x0
11:23:02: Device Size C_SIZE                            :0xedc8
11:23:02: Reserv3                                       :0x0
11:23:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:02: Reserv4                                       :0x0
11:23:02: Write Speed Factor R2W_FACTOR                 :0x2
11:23:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:02: FILE_FORMAT_GRP                               :0x0
11:23:02: COPY flag                                     :0x1
11:23:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:02: File_Format                                   :0x0
11:23:02: CRC                                           :0x0
11:23:02: ####CSD Registe Values####  

11:23:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:02: [GetSCRRegisterEntry] Passed
11:23:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:02: Data_Status_After Erases          : 0
11:23:02: CPRM Security Support             : No Security
11:23:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:02: Spec. Version                     : Version 3.0X
11:23:02: Extended Security Support         : Extended_Security_Not_Supported
11:23:02: Command Support                   : COMMAND_SUPPORT
11:23:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 1931 ] 
11:23:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D570>, <py_sfcl.CommandDataDefinition object at 0x0627AA50>) , Command count = 1932 ] 
11:23:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:02: [ SetBusWidth(0x4) , Command count = 1933 ] 
11:23:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1934 ] 
11:23:02: Protected Area Size 0x28000
11:23:02: Bus Width           2
11:23:02: Secure Mode         0
11:23:02: Speed  Class        4
11:23:02: Perf Move           0
11:23:02: Au Size             9
11:23:02: Erase Size          15
11:23:02: Erase Timeout       1
11:23:02: Erase offset        1
11:23:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1935 ] 
11:23:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:02: Host Frequency set to 100000 KHz
11:23:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:03: ####CSD Registe 2.0 Values####
11:23:03: CSD_STRUCTURE                                 :0x1
11:23:03: Reserv1                                       :0x0
11:23:03: Time Access 1 TAAC                            :0xe
11:23:03: Time Access 2 NSAC*100                        :0x0
11:23:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:03: Card Command Classess CCC                     :0x5b5
11:23:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:03: DSR(driver stage register)  DSR_IMP           :0x0
11:23:03: Reserv2                                       :0x0
11:23:03: Device Size C_SIZE                            :0xedc8
11:23:03: Reserv3                                       :0x0
11:23:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:03: Reserv4                                       :0x0
11:23:03: Write Speed Factor R2W_FACTOR                 :0x2
11:23:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:03: FILE_FORMAT_GRP                               :0x0
11:23:03: COPY flag                                     :0x1
11:23:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:03: File_Format                                   :0x0
11:23:03: CRC                                           :0x0
11:23:03: ####CSD Registe Values####  

11:23:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D510>, <py_sfcl.CommandDataDefinition object at 0x0626DA50>) , Command count = 1936 ] 
11:23:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x06269C60>) , Command count = 1937 ] 
11:23:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269A20>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x0626D120>) , Command count = 1938 ] 
11:23:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:06: Host Frequency set to 25000 KHz
11:23:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269BD0>, 0x0, True) , Command count = 1939 ] 
11:23:06: [GO18_globalSetVolt]### Host voltage value is set.
11:23:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269960>, 0x0, False) , Command count = 1940 ] 
11:23:06: [GO18_globalSetVolt]### Host voltage value is set.
11:23:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1941 ] 
11:23:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1942 ] 
11:23:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1943 ] 
11:23:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 1944 ] 
11:23:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F60>, <py_sfcl.CommandDataDefinition object at 0x0626D780>) , Command count = 1945 ] 
11:23:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1946 ] 
11:23:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:07: Host Frequency set to 25000 KHz
11:23:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:07: ####CSD Registe 2.0 Values####
11:23:07: CSD_STRUCTURE                                 :0x1
11:23:07: Reserv1                                       :0x0
11:23:07: Time Access 1 TAAC                            :0xe
11:23:07: Time Access 2 NSAC*100                        :0x0
11:23:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:07: Card Command Classess CCC                     :0x5b5
11:23:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:07: DSR(driver stage register)  DSR_IMP           :0x0
11:23:07: Reserv2                                       :0x0
11:23:07: Device Size C_SIZE                            :0xedc8
11:23:07: Reserv3                                       :0x0
11:23:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:07: Reserv4                                       :0x0
11:23:07: Write Speed Factor R2W_FACTOR                 :0x2
11:23:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:07: FILE_FORMAT_GRP                               :0x0
11:23:07: COPY flag                                     :0x1
11:23:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:07: File_Format                                   :0x0
11:23:07: CRC                                           :0x0
11:23:07: ####CSD Registe Values####  

11:23:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:07: [GetSCRRegisterEntry] Passed
11:23:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:07: Data_Status_After Erases          : 0
11:23:07: CPRM Security Support             : No Security
11:23:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:07: Spec. Version                     : Version 3.0X
11:23:07: Extended Security Support         : Extended_Security_Not_Supported
11:23:07: Command Support                   : COMMAND_SUPPORT
11:23:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692A0>, <py_sfcl.CommandDataDefinition object at 0x0626DA80>) , Command count = 1947 ] 
11:23:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691B0>, <py_sfcl.CommandDataDefinition object at 0x0626D0F0>) , Command count = 1948 ] 
11:23:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:07: [ SetBusWidth(0x4) , Command count = 1949 ] 
11:23:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1950 ] 
11:23:07: Protected Area Size 0x28000
11:23:07: Bus Width           2
11:23:07: Secure Mode         0
11:23:07: Speed  Class        4
11:23:07: Perf Move           0
11:23:07: Au Size             9
11:23:07: Erase Size          15
11:23:07: Erase Timeout       1
11:23:07: Erase offset        1
11:23:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1951 ] 
11:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:07: Host Frequency set to 100000 KHz
11:23:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:07: ####CSD Registe 2.0 Values####
11:23:07: CSD_STRUCTURE                                 :0x1
11:23:07: Reserv1                                       :0x0
11:23:07: Time Access 1 TAAC                            :0xe
11:23:07: Time Access 2 NSAC*100                        :0x0
11:23:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:07: Card Command Classess CCC                     :0x5b5
11:23:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:07: DSR(driver stage register)  DSR_IMP           :0x0
11:23:07: Reserv2                                       :0x0
11:23:07: Device Size C_SIZE                            :0xedc8
11:23:07: Reserv3                                       :0x0
11:23:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:08: Reserv4                                       :0x0
11:23:08: Write Speed Factor R2W_FACTOR                 :0x2
11:23:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:08: FILE_FORMAT_GRP                               :0x0
11:23:08: COPY flag                                     :0x1
11:23:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:08: File_Format                                   :0x0
11:23:08: CRC                                           :0x0
11:23:08: ####CSD Registe Values####  

11:23:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D390>, <py_sfcl.CommandDataDefinition object at 0x0627D750>) , Command count = 1952 ] 
11:23:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698A0>, <py_sfcl.CommandDataDefinition object at 0x06269A50>) , Command count = 1953 ] 
11:23:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273660>, <py_sfcl.PySEnhancedCmdData object at 0x06273CF0>, <None>, <py_sfcl.Command23 object at 0x06269990>) , Command count = 1954 ] 
11:23:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:11: Host Frequency set to 25000 KHz
11:23:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D990>, 0x0, True) , Command count = 1955 ] 
11:23:11: [GO18_globalSetVolt]### Host voltage value is set.
11:23:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AE10>, 0x0, False) , Command count = 1956 ] 
11:23:11: [GO18_globalSetVolt]### Host voltage value is set.
11:23:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1957 ] 
11:23:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1958 ] 
11:23:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1959 ] 
11:23:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 1960 ] 
11:23:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE10>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 1961 ] 
11:23:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1962 ] 
11:23:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:11: Host Frequency set to 25000 KHz
11:23:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:11: ####CSD Registe 2.0 Values####
11:23:11: CSD_STRUCTURE                                 :0x1
11:23:11: Reserv1                                       :0x0
11:23:11: Time Access 1 TAAC                            :0xe
11:23:11: Time Access 2 NSAC*100                        :0x0
11:23:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:11: Card Command Classess CCC                     :0x5b5
11:23:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:11: DSR(driver stage register)  DSR_IMP           :0x0
11:23:11: Reserv2                                       :0x0
11:23:11: Device Size C_SIZE                            :0xedc8
11:23:11: Reserv3                                       :0x0
11:23:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:11: Reserv4                                       :0x0
11:23:11: Write Speed Factor R2W_FACTOR                 :0x2
11:23:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:11: FILE_FORMAT_GRP                               :0x0
11:23:11: COPY flag                                     :0x1
11:23:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:11: File_Format                                   :0x0
11:23:11: CRC                                           :0x0
11:23:11: ####CSD Registe Values####  

11:23:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:11: [GetSCRRegisterEntry] Passed
11:23:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:11: Data_Status_After Erases          : 0
11:23:11: CPRM Security Support             : No Security
11:23:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:11: Spec. Version                     : Version 3.0X
11:23:11: Extended Security Support         : Extended_Security_Not_Supported
11:23:11: Command Support                   : COMMAND_SUPPORT
11:23:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A20>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 1963 ] 
11:23:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x0626D300>) , Command count = 1964 ] 
11:23:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:11: [ SetBusWidth(0x4) , Command count = 1965 ] 
11:23:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1966 ] 
11:23:11: Protected Area Size 0x28000
11:23:11: Bus Width           2
11:23:11: Secure Mode         0
11:23:11: Speed  Class        4
11:23:11: Perf Move           0
11:23:11: Au Size             9
11:23:11: Erase Size          15
11:23:11: Erase Timeout       1
11:23:11: Erase offset        1
11:23:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1967 ] 
11:23:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:11: Host Frequency set to 100000 KHz
11:23:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:12: ####CSD Registe 2.0 Values####
11:23:12: CSD_STRUCTURE                                 :0x1
11:23:12: Reserv1                                       :0x0
11:23:12: Time Access 1 TAAC                            :0xe
11:23:12: Time Access 2 NSAC*100                        :0x0
11:23:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:12: Card Command Classess CCC                     :0x5b5
11:23:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:12: DSR(driver stage register)  DSR_IMP           :0x0
11:23:12: Reserv2                                       :0x0
11:23:12: Device Size C_SIZE                            :0xedc8
11:23:12: Reserv3                                       :0x0
11:23:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:12: Reserv4                                       :0x0
11:23:12: Write Speed Factor R2W_FACTOR                 :0x2
11:23:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:12: FILE_FORMAT_GRP                               :0x0
11:23:12: COPY flag                                     :0x1
11:23:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:12: File_Format                                   :0x0
11:23:12: CRC                                           :0x0
11:23:12: ####CSD Registe Values####  

11:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7E0>, <py_sfcl.CommandDataDefinition object at 0x06273AB0>) , Command count = 1968 ] 
11:23:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x06273FC0>) , Command count = 1969 ] 
11:23:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062732A0>, <py_sfcl.PySEnhancedCmdData object at 0x06273570>, <None>, <py_sfcl.Command23 object at 0x062739C0>) , Command count = 1970 ] 
11:23:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:15: Host Frequency set to 25000 KHz
11:23:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0539E180>, 0x0, True) , Command count = 1971 ] 
11:23:15: [GO18_globalSetVolt]### Host voltage value is set.
11:23:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276360>, 0x0, False) , Command count = 1972 ] 
11:23:15: [GO18_globalSetVolt]### Host voltage value is set.
11:23:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1973 ] 
11:23:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1974 ] 
11:23:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1975 ] 
11:23:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06273480>) , Command count = 1976 ] 
11:23:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x06273390>) , Command count = 1977 ] 
11:23:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1978 ] 
11:23:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:16: Host Frequency set to 25000 KHz
11:23:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:16: ####CSD Registe 2.0 Values####
11:23:16: CSD_STRUCTURE                                 :0x1
11:23:16: Reserv1                                       :0x0
11:23:16: Time Access 1 TAAC                            :0xe
11:23:16: Time Access 2 NSAC*100                        :0x0
11:23:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:16: Card Command Classess CCC                     :0x5b5
11:23:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:16: DSR(driver stage register)  DSR_IMP           :0x0
11:23:16: Reserv2                                       :0x0
11:23:16: Device Size C_SIZE                            :0xedc8
11:23:16: Reserv3                                       :0x0
11:23:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:16: Reserv4                                       :0x0
11:23:16: Write Speed Factor R2W_FACTOR                 :0x2
11:23:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:16: FILE_FORMAT_GRP                               :0x0
11:23:16: COPY flag                                     :0x1
11:23:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:16: File_Format                                   :0x0
11:23:16: CRC                                           :0x0
11:23:16: ####CSD Registe Values####  

11:23:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:16: [GetSCRRegisterEntry] Passed
11:23:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:16: Data_Status_After Erases          : 0
11:23:16: CPRM Security Support             : No Security
11:23:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:16: Spec. Version                     : Version 3.0X
11:23:16: Extended Security Support         : Extended_Security_Not_Supported
11:23:16: Command Support                   : COMMAND_SUPPORT
11:23:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062762A0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 1979 ] 
11:23:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276960>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 1980 ] 
11:23:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:16: [ SetBusWidth(0x4) , Command count = 1981 ] 
11:23:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1982 ] 
11:23:16: Protected Area Size 0x28000
11:23:16: Bus Width           2
11:23:16: Secure Mode         0
11:23:16: Speed  Class        4
11:23:16: Perf Move           0
11:23:16: Au Size             9
11:23:16: Erase Size          15
11:23:16: Erase Timeout       1
11:23:16: Erase offset        1
11:23:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1983 ] 
11:23:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:16: Host Frequency set to 100000 KHz
11:23:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:16: ####CSD Registe 2.0 Values####
11:23:16: CSD_STRUCTURE                                 :0x1
11:23:16: Reserv1                                       :0x0
11:23:16: Time Access 1 TAAC                            :0xe
11:23:16: Time Access 2 NSAC*100                        :0x0
11:23:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:16: Card Command Classess CCC                     :0x5b5
11:23:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:16: DSR(driver stage register)  DSR_IMP           :0x0
11:23:16: Reserv2                                       :0x0
11:23:16: Device Size C_SIZE                            :0xedc8
11:23:16: Reserv3                                       :0x0
11:23:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:17: Reserv4                                       :0x0
11:23:17: Write Speed Factor R2W_FACTOR                 :0x2
11:23:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:17: FILE_FORMAT_GRP                               :0x0
11:23:17: COPY flag                                     :0x1
11:23:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:17: File_Format                                   :0x0
11:23:17: CRC                                           :0x0
11:23:17: ####CSD Registe Values####  

11:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A20>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 1984 ] 
11:23:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DED0>, <py_sfcl.CommandDataDefinition object at 0x06273840>) , Command count = 1985 ] 
11:23:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273F90>, <py_sfcl.PySEnhancedCmdData object at 0x06273210>, <None>, <py_sfcl.Command23 object at 0x06273D20>) , Command count = 1986 ] 
11:23:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:20: Host Frequency set to 25000 KHz
11:23:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DC60>, 0x0, True) , Command count = 1987 ] 
11:23:20: [GO18_globalSetVolt]### Host voltage value is set.
11:23:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276810>, 0x0, False) , Command count = 1988 ] 
11:23:20: [GO18_globalSetVolt]### Host voltage value is set.
11:23:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1989 ] 
11:23:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1990 ] 
11:23:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1991 ] 
11:23:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276270>, <py_sfcl.CommandDataDefinition object at 0x06276B10>) , Command count = 1992 ] 
11:23:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB70>, <py_sfcl.CommandDataDefinition object at 0x0627DC00>) , Command count = 1993 ] 
11:23:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1994 ] 
11:23:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:20: Host Frequency set to 25000 KHz
11:23:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:20: ####CSD Registe 2.0 Values####
11:23:20: CSD_STRUCTURE                                 :0x1
11:23:20: Reserv1                                       :0x0
11:23:20: Time Access 1 TAAC                            :0xe
11:23:20: Time Access 2 NSAC*100                        :0x0
11:23:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:20: Card Command Classess CCC                     :0x5b5
11:23:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:20: DSR(driver stage register)  DSR_IMP           :0x0
11:23:20: Reserv2                                       :0x0
11:23:20: Device Size C_SIZE                            :0xedc8
11:23:20: Reserv3                                       :0x0
11:23:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:20: Reserv4                                       :0x0
11:23:20: Write Speed Factor R2W_FACTOR                 :0x2
11:23:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:20: FILE_FORMAT_GRP                               :0x0
11:23:20: COPY flag                                     :0x1
11:23:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:20: File_Format                                   :0x0
11:23:20: CRC                                           :0x0
11:23:20: ####CSD Registe Values####  

11:23:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:20: [GetSCRRegisterEntry] Passed
11:23:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:20: Data_Status_After Erases          : 0
11:23:20: CPRM Security Support             : No Security
11:23:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:20: Spec. Version                     : Version 3.0X
11:23:20: Extended Security Support         : Extended_Security_Not_Supported
11:23:20: Command Support                   : COMMAND_SUPPORT
11:23:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627D180>) , Command count = 1995 ] 
11:23:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D50>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 1996 ] 
11:23:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:20: [ SetBusWidth(0x4) , Command count = 1997 ] 
11:23:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062766F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1998 ] 
11:23:20: Protected Area Size 0x28000
11:23:20: Bus Width           2
11:23:20: Secure Mode         0
11:23:20: Speed  Class        4
11:23:20: Perf Move           0
11:23:20: Au Size             9
11:23:20: Erase Size          15
11:23:20: Erase Timeout       1
11:23:20: Erase offset        1
11:23:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1999 ] 
11:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:20: Host Frequency set to 100000 KHz
11:23:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:21: ####CSD Registe 2.0 Values####
11:23:21: CSD_STRUCTURE                                 :0x1
11:23:21: Reserv1                                       :0x0
11:23:21: Time Access 1 TAAC                            :0xe
11:23:21: Time Access 2 NSAC*100                        :0x0
11:23:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:21: Card Command Classess CCC                     :0x5b5
11:23:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:21: DSR(driver stage register)  DSR_IMP           :0x0
11:23:21: Reserv2                                       :0x0
11:23:21: Device Size C_SIZE                            :0xedc8
11:23:21: Reserv3                                       :0x0
11:23:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:21: Reserv4                                       :0x0
11:23:21: Write Speed Factor R2W_FACTOR                 :0x2
11:23:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:21: FILE_FORMAT_GRP                               :0x0
11:23:21: COPY flag                                     :0x1
11:23:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:21: File_Format                                   :0x0
11:23:21: CRC                                           :0x0
11:23:21: ####CSD Registe Values####  

11:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062768D0>, <py_sfcl.CommandDataDefinition object at 0x05401F30>) , Command count = 2000 ] 
11:23:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062765D0>, <py_sfcl.CommandDataDefinition object at 0x062734B0>) , Command count = 2001 ] 
11:23:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273810>, <py_sfcl.PySEnhancedCmdData object at 0x06273540>, <None>, <py_sfcl.Command23 object at 0x06273900>) , Command count = 2002 ] 
11:23:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:24: Host Frequency set to 25000 KHz
11:23:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DE40>, 0x0, True) , Command count = 2003 ] 
11:23:24: [GO18_globalSetVolt]### Host voltage value is set.
11:23:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x062760F0>, 0x0, False) , Command count = 2004 ] 
11:23:24: [GO18_globalSetVolt]### Host voltage value is set.
11:23:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2005 ] 
11:23:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2006 ] 
11:23:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2007 ] 
11:23:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276930>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 2008 ] 
11:23:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764E0>, <py_sfcl.CommandDataDefinition object at 0x06276150>) , Command count = 2009 ] 
11:23:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2010 ] 
11:23:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:24: Host Frequency set to 25000 KHz
11:23:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:24: ####CSD Registe 2.0 Values####
11:23:24: CSD_STRUCTURE                                 :0x1
11:23:24: Reserv1                                       :0x0
11:23:24: Time Access 1 TAAC                            :0xe
11:23:24: Time Access 2 NSAC*100                        :0x0
11:23:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:24: Card Command Classess CCC                     :0x5b5
11:23:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:24: DSR(driver stage register)  DSR_IMP           :0x0
11:23:24: Reserv2                                       :0x0
11:23:24: Device Size C_SIZE                            :0xedc8
11:23:24: Reserv3                                       :0x0
11:23:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:24: Reserv4                                       :0x0
11:23:24: Write Speed Factor R2W_FACTOR                 :0x2
11:23:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:24: FILE_FORMAT_GRP                               :0x0
11:23:24: COPY flag                                     :0x1
11:23:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:24: File_Format                                   :0x0
11:23:24: CRC                                           :0x0
11:23:24: ####CSD Registe Values####  

11:23:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:24: [GetSCRRegisterEntry] Passed
11:23:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:24: Data_Status_After Erases          : 0
11:23:24: CPRM Security Support             : No Security
11:23:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:24: Spec. Version                     : Version 3.0X
11:23:24: Extended Security Support         : Extended_Security_Not_Supported
11:23:24: Command Support                   : COMMAND_SUPPORT
11:23:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062734B0>, <py_sfcl.CommandDataDefinition object at 0x06273E40>) , Command count = 2011 ] 
11:23:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A480>, <py_sfcl.CommandDataDefinition object at 0x06269EA0>) , Command count = 2012 ] 
11:23:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:24: [ SetBusWidth(0x4) , Command count = 2013 ] 
11:23:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2014 ] 
11:23:24: Protected Area Size 0x28000
11:23:24: Bus Width           2
11:23:24: Secure Mode         0
11:23:24: Speed  Class        4
11:23:24: Perf Move           0
11:23:24: Au Size             9
11:23:24: Erase Size          15
11:23:24: Erase Timeout       1
11:23:24: Erase offset        1
11:23:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2015 ] 
11:23:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:25: Host Frequency set to 100000 KHz
11:23:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:25: ####CSD Registe 2.0 Values####
11:23:25: CSD_STRUCTURE                                 :0x1
11:23:25: Reserv1                                       :0x0
11:23:25: Time Access 1 TAAC                            :0xe
11:23:25: Time Access 2 NSAC*100                        :0x0
11:23:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:25: Card Command Classess CCC                     :0x5b5
11:23:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:25: DSR(driver stage register)  DSR_IMP           :0x0
11:23:25: Reserv2                                       :0x0
11:23:25: Device Size C_SIZE                            :0xedc8
11:23:25: Reserv3                                       :0x0
11:23:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:25: Reserv4                                       :0x0
11:23:25: Write Speed Factor R2W_FACTOR                 :0x2
11:23:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:25: FILE_FORMAT_GRP                               :0x0
11:23:25: COPY flag                                     :0x1
11:23:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:25: File_Format                                   :0x0
11:23:25: CRC                                           :0x0
11:23:25: ####CSD Registe Values####  

11:23:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D240>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 2016 ] 
11:23:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DB0>, <py_sfcl.CommandDataDefinition object at 0x06273F00>) , Command count = 2017 ] 
11:23:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273990>, <py_sfcl.PySEnhancedCmdData object at 0x06273240>, <None>, <py_sfcl.Command23 object at 0x06273A80>) , Command count = 2018 ] 
11:23:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:28: Host Frequency set to 25000 KHz
11:23:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x062699F0>, 0x0, True) , Command count = 2019 ] 
11:23:28: [GO18_globalSetVolt]### Host voltage value is set.
11:23:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E40>, 0x0, False) , Command count = 2020 ] 
11:23:28: [GO18_globalSetVolt]### Host voltage value is set.
11:23:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2021 ] 
11:23:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2022 ] 
11:23:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2023 ] 
11:23:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767B0>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 2024 ] 
11:23:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BA0>, <py_sfcl.CommandDataDefinition object at 0x0627A4B0>) , Command count = 2025 ] 
11:23:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2026 ] 
11:23:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:29: Host Frequency set to 25000 KHz
11:23:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:29: ####CSD Registe 2.0 Values####
11:23:29: CSD_STRUCTURE                                 :0x1
11:23:29: Reserv1                                       :0x0
11:23:29: Time Access 1 TAAC                            :0xe
11:23:29: Time Access 2 NSAC*100                        :0x0
11:23:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:29: Card Command Classess CCC                     :0x5b5
11:23:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:29: DSR(driver stage register)  DSR_IMP           :0x0
11:23:29: Reserv2                                       :0x0
11:23:29: Device Size C_SIZE                            :0xedc8
11:23:29: Reserv3                                       :0x0
11:23:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:29: Reserv4                                       :0x0
11:23:29: Write Speed Factor R2W_FACTOR                 :0x2
11:23:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:29: FILE_FORMAT_GRP                               :0x0
11:23:29: COPY flag                                     :0x1
11:23:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:29: File_Format                                   :0x0
11:23:29: CRC                                           :0x0
11:23:29: ####CSD Registe Values####  

11:23:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:29: [GetSCRRegisterEntry] Passed
11:23:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:29: Data_Status_After Erases          : 0
11:23:29: CPRM Security Support             : No Security
11:23:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:29: Spec. Version                     : Version 3.0X
11:23:29: Extended Security Support         : Extended_Security_Not_Supported
11:23:29: Command Support                   : COMMAND_SUPPORT
11:23:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 2027 ] 
11:23:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06276870>) , Command count = 2028 ] 
11:23:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:29: [ SetBusWidth(0x4) , Command count = 2029 ] 
11:23:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2030 ] 
11:23:29: Protected Area Size 0x28000
11:23:29: Bus Width           2
11:23:29: Secure Mode         0
11:23:29: Speed  Class        4
11:23:29: Perf Move           0
11:23:29: Au Size             9
11:23:29: Erase Size          15
11:23:29: Erase Timeout       1
11:23:29: Erase offset        1
11:23:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2031 ] 
11:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:29: Host Frequency set to 100000 KHz
11:23:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:29: ####CSD Registe 2.0 Values####
11:23:29: CSD_STRUCTURE                                 :0x1
11:23:29: Reserv1                                       :0x0
11:23:29: Time Access 1 TAAC                            :0xe
11:23:29: Time Access 2 NSAC*100                        :0x0
11:23:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:29: Card Command Classess CCC                     :0x5b5
11:23:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:29: DSR(driver stage register)  DSR_IMP           :0x0
11:23:29: Reserv2                                       :0x0
11:23:29: Device Size C_SIZE                            :0xedc8
11:23:29: Reserv3                                       :0x0
11:23:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:30: Reserv4                                       :0x0
11:23:30: Write Speed Factor R2W_FACTOR                 :0x2
11:23:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:30: FILE_FORMAT_GRP                               :0x0
11:23:30: COPY flag                                     :0x1
11:23:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:30: File_Format                                   :0x0
11:23:30: CRC                                           :0x0
11:23:30: ####CSD Registe Values####  

11:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D80>, <py_sfcl.CommandDataDefinition object at 0x06269330>) , Command count = 2032 ] 
11:23:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276720>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 2033 ] 
11:23:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273B40>, <py_sfcl.PySEnhancedCmdData object at 0x06273090>, <None>, <py_sfcl.Command23 object at 0x06273120>) , Command count = 2034 ] 
11:23:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:33: Host Frequency set to 25000 KHz
11:23:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276BD0>, 0x0, True) , Command count = 2035 ] 
11:23:33: [GO18_globalSetVolt]### Host voltage value is set.
11:23:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x053DEE40>, 0x0, False) , Command count = 2036 ] 
11:23:33: [GO18_globalSetVolt]### Host voltage value is set.
11:23:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2037 ] 
11:23:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2038 ] 
11:23:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2039 ] 
11:23:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x0627A6F0>) , Command count = 2040 ] 
11:23:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767E0>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 2041 ] 
11:23:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2042 ] 
11:23:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:33: Host Frequency set to 25000 KHz
11:23:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:33: ####CSD Registe 2.0 Values####
11:23:33: CSD_STRUCTURE                                 :0x1
11:23:33: Reserv1                                       :0x0
11:23:33: Time Access 1 TAAC                            :0xe
11:23:33: Time Access 2 NSAC*100                        :0x0
11:23:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:33: Card Command Classess CCC                     :0x5b5
11:23:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:33: DSR(driver stage register)  DSR_IMP           :0x0
11:23:33: Reserv2                                       :0x0
11:23:33: Device Size C_SIZE                            :0xedc8
11:23:33: Reserv3                                       :0x0
11:23:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:33: Reserv4                                       :0x0
11:23:33: Write Speed Factor R2W_FACTOR                 :0x2
11:23:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:33: FILE_FORMAT_GRP                               :0x0
11:23:33: COPY flag                                     :0x1
11:23:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:33: File_Format                                   :0x0
11:23:33: CRC                                           :0x0
11:23:33: ####CSD Registe Values####  

11:23:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:33: [GetSCRRegisterEntry] Passed
11:23:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:33: Data_Status_After Erases          : 0
11:23:33: CPRM Security Support             : No Security
11:23:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:33: Spec. Version                     : Version 3.0X
11:23:33: Extended Security Support         : Extended_Security_Not_Supported
11:23:33: Command Support                   : COMMAND_SUPPORT
11:23:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC60>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 2043 ] 
11:23:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB40>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 2044 ] 
11:23:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:33: [ SetBusWidth(0x4) , Command count = 2045 ] 
11:23:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ACC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2046 ] 
11:23:33: Protected Area Size 0x28000
11:23:33: Bus Width           2
11:23:33: Secure Mode         0
11:23:33: Speed  Class        4
11:23:33: Perf Move           0
11:23:33: Au Size             9
11:23:33: Erase Size          15
11:23:33: Erase Timeout       1
11:23:33: Erase offset        1
11:23:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2047 ] 
11:23:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:33: Host Frequency set to 100000 KHz
11:23:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:33: ####CSD Registe 2.0 Values####
11:23:33: CSD_STRUCTURE                                 :0x1
11:23:33: Reserv1                                       :0x0
11:23:33: Time Access 1 TAAC                            :0xe
11:23:33: Time Access 2 NSAC*100                        :0x0
11:23:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:33: Card Command Classess CCC                     :0x5b5
11:23:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:33: DSR(driver stage register)  DSR_IMP           :0x0
11:23:33: Reserv2                                       :0x0
11:23:33: Device Size C_SIZE                            :0xedc8
11:23:33: Reserv3                                       :0x0
11:23:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:34: Reserv4                                       :0x0
11:23:34: Write Speed Factor R2W_FACTOR                 :0x2
11:23:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:34: FILE_FORMAT_GRP                               :0x0
11:23:34: COPY flag                                     :0x1
11:23:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:34: File_Format                                   :0x0
11:23:34: CRC                                           :0x0
11:23:34: ####CSD Registe Values####  

11:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x0627DB10>) , Command count = 2048 ] 
11:23:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 2049 ] 
11:23:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DB4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A690>, <py_sfcl.PySEnhancedCmdData object at 0x06273720>, <None>, <py_sfcl.Command23 object at 0x06273B10>) , Command count = 2050 ] 
11:23:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:36: Host Frequency set to 25000 KHz
11:23:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268B40>, 0x0, True) , Command count = 2051 ] 
11:23:36: [GO18_globalSetVolt]### Host voltage value is set.
11:23:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x054019C0>, 0x0, False) , Command count = 2052 ] 
11:23:36: [GO18_globalSetVolt]### Host voltage value is set.
11:23:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2053 ] 
11:23:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2054 ] 
11:23:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2055 ] 
11:23:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 2056 ] 
11:23:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276540>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 2057 ] 
11:23:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2058 ] 
11:23:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:37: Host Frequency set to 25000 KHz
11:23:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:37: ####CSD Registe 2.0 Values####
11:23:37: CSD_STRUCTURE                                 :0x1
11:23:37: Reserv1                                       :0x0
11:23:37: Time Access 1 TAAC                            :0xe
11:23:37: Time Access 2 NSAC*100                        :0x0
11:23:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:37: Card Command Classess CCC                     :0x5b5
11:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:37: DSR(driver stage register)  DSR_IMP           :0x0
11:23:37: Reserv2                                       :0x0
11:23:37: Device Size C_SIZE                            :0xedc8
11:23:37: Reserv3                                       :0x0
11:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:37: Reserv4                                       :0x0
11:23:37: Write Speed Factor R2W_FACTOR                 :0x2
11:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:37: FILE_FORMAT_GRP                               :0x0
11:23:37: COPY flag                                     :0x1
11:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:37: File_Format                                   :0x0
11:23:37: CRC                                           :0x0
11:23:37: ####CSD Registe Values####  

11:23:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:37: [GetSCRRegisterEntry] Passed
11:23:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:37: Data_Status_After Erases          : 0
11:23:37: CPRM Security Support             : No Security
11:23:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:37: Spec. Version                     : Version 3.0X
11:23:37: Extended Security Support         : Extended_Security_Not_Supported
11:23:37: Command Support                   : COMMAND_SUPPORT
11:23:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A030>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 2059 ] 
11:23:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 2060 ] 
11:23:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:37: [ SetBusWidth(0x4) , Command count = 2061 ] 
11:23:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2062 ] 
11:23:37: Protected Area Size 0x28000
11:23:37: Bus Width           2
11:23:37: Secure Mode         0
11:23:37: Speed  Class        4
11:23:37: Perf Move           0
11:23:37: Au Size             9
11:23:37: Erase Size          15
11:23:37: Erase Timeout       1
11:23:37: Erase offset        1
11:23:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2063 ] 
11:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:37: Host Frequency set to 100000 KHz
11:23:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:37: ####CSD Registe 2.0 Values####
11:23:37: CSD_STRUCTURE                                 :0x1
11:23:37: Reserv1                                       :0x0
11:23:37: Time Access 1 TAAC                            :0xe
11:23:37: Time Access 2 NSAC*100                        :0x0
11:23:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:37: Card Command Classess CCC                     :0x5b5
11:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:37: DSR(driver stage register)  DSR_IMP           :0x0
11:23:37: Reserv2                                       :0x0
11:23:37: Device Size C_SIZE                            :0xedc8
11:23:37: Reserv3                                       :0x0
11:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:37: Reserv4                                       :0x0
11:23:37: Write Speed Factor R2W_FACTOR                 :0x2
11:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:37: FILE_FORMAT_GRP                               :0x0
11:23:37: COPY flag                                     :0x1
11:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:37: File_Format                                   :0x0
11:23:37: CRC                                           :0x0
11:23:37: ####CSD Registe Values####  

11:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627AB70>) , Command count = 2064 ] 
11:23:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627AD50>) , Command count = 2065 ] 
11:23:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF90>, <py_sfcl.PySEnhancedCmdData object at 0x06273600>, <None>, <py_sfcl.Command23 object at 0x062731B0>) , Command count = 2066 ] 
11:23:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:40: Host Frequency set to 25000 KHz
11:23:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D150>, 0x0, True) , Command count = 2067 ] 
11:23:40: [GO18_globalSetVolt]### Host voltage value is set.
11:23:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF060>, 0x0, False) , Command count = 2068 ] 
11:23:40: [GO18_globalSetVolt]### Host voltage value is set.
11:23:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2069 ] 
11:23:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2070 ] 
11:23:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2071 ] 
11:23:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 2072 ] 
11:23:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 2073 ] 
11:23:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2074 ] 
11:23:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:40: Host Frequency set to 25000 KHz
11:23:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:40: ####CSD Registe 2.0 Values####
11:23:40: CSD_STRUCTURE                                 :0x1
11:23:40: Reserv1                                       :0x0
11:23:40: Time Access 1 TAAC                            :0xe
11:23:40: Time Access 2 NSAC*100                        :0x0
11:23:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:40: Card Command Classess CCC                     :0x5b5
11:23:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:40: DSR(driver stage register)  DSR_IMP           :0x0
11:23:40: Reserv2                                       :0x0
11:23:40: Device Size C_SIZE                            :0xedc8
11:23:40: Reserv3                                       :0x0
11:23:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:40: Reserv4                                       :0x0
11:23:40: Write Speed Factor R2W_FACTOR                 :0x2
11:23:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:40: FILE_FORMAT_GRP                               :0x0
11:23:40: COPY flag                                     :0x1
11:23:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:40: File_Format                                   :0x0
11:23:40: CRC                                           :0x0
11:23:40: ####CSD Registe Values####  

11:23:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:40: [GetSCRRegisterEntry] Passed
11:23:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:40: Data_Status_After Erases          : 0
11:23:40: CPRM Security Support             : No Security
11:23:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:40: Spec. Version                     : Version 3.0X
11:23:40: Extended Security Support         : Extended_Security_Not_Supported
11:23:40: Command Support                   : COMMAND_SUPPORT
11:23:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627D420>) , Command count = 2075 ] 
11:23:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 2076 ] 
11:23:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:40: [ SetBusWidth(0x4) , Command count = 2077 ] 
11:23:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2078 ] 
11:23:40: Protected Area Size 0x28000
11:23:40: Bus Width           2
11:23:40: Secure Mode         0
11:23:40: Speed  Class        4
11:23:40: Perf Move           0
11:23:40: Au Size             9
11:23:40: Erase Size          15
11:23:40: Erase Timeout       1
11:23:40: Erase offset        1
11:23:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2079 ] 
11:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:40: Host Frequency set to 100000 KHz
11:23:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:40: ####CSD Registe 2.0 Values####
11:23:40: CSD_STRUCTURE                                 :0x1
11:23:41: Reserv1                                       :0x0
11:23:41: Time Access 1 TAAC                            :0xe
11:23:41: Time Access 2 NSAC*100                        :0x0
11:23:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:41: Card Command Classess CCC                     :0x5b5
11:23:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:41: DSR(driver stage register)  DSR_IMP           :0x0
11:23:41: Reserv2                                       :0x0
11:23:41: Device Size C_SIZE                            :0xedc8
11:23:41: Reserv3                                       :0x0
11:23:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:41: Reserv4                                       :0x0
11:23:41: Write Speed Factor R2W_FACTOR                 :0x2
11:23:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:41: FILE_FORMAT_GRP                               :0x0
11:23:41: COPY flag                                     :0x1
11:23:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:41: File_Format                                   :0x0
11:23:41: CRC                                           :0x0
11:23:41: ####CSD Registe Values####  

11:23:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 2080 ] 
11:23:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627A1B0>) , Command count = 2081 ] 
11:23:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062683F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DCF0>, <py_sfcl.PySEnhancedCmdData object at 0x06280060>, <None>, <py_sfcl.Command23 object at 0x06273F00>) , Command count = 2082 ] 
11:23:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:43: Host Frequency set to 25000 KHz
11:23:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DCC0>, 0x0, True) , Command count = 2083 ] 
11:23:43: [GO18_globalSetVolt]### Host voltage value is set.
11:23:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x062685D0>, 0x0, False) , Command count = 2084 ] 
11:23:43: [GO18_globalSetVolt]### Host voltage value is set.
11:23:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2085 ] 
11:23:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2086 ] 
11:23:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2087 ] 
11:23:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268030>, <py_sfcl.CommandDataDefinition object at 0x062168D0>) , Command count = 2088 ] 
11:23:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x06216600>) , Command count = 2089 ] 
11:23:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2090 ] 
11:23:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:44: Host Frequency set to 25000 KHz
11:23:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:44: ####CSD Registe 2.0 Values####
11:23:44: CSD_STRUCTURE                                 :0x1
11:23:44: Reserv1                                       :0x0
11:23:44: Time Access 1 TAAC                            :0xe
11:23:44: Time Access 2 NSAC*100                        :0x0
11:23:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:44: Card Command Classess CCC                     :0x5b5
11:23:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:44: DSR(driver stage register)  DSR_IMP           :0x0
11:23:44: Reserv2                                       :0x0
11:23:44: Device Size C_SIZE                            :0xedc8
11:23:44: Reserv3                                       :0x0
11:23:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:44: Reserv4                                       :0x0
11:23:44: Write Speed Factor R2W_FACTOR                 :0x2
11:23:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:44: FILE_FORMAT_GRP                               :0x0
11:23:44: COPY flag                                     :0x1
11:23:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:44: File_Format                                   :0x0
11:23:44: CRC                                           :0x0
11:23:44: ####CSD Registe Values####  

11:23:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:44: [GetSCRRegisterEntry] Passed
11:23:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:44: Data_Status_After Erases          : 0
11:23:44: CPRM Security Support             : No Security
11:23:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:44: Spec. Version                     : Version 3.0X
11:23:44: Extended Security Support         : Extended_Security_Not_Supported
11:23:44: Command Support                   : COMMAND_SUPPORT
11:23:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627ACF0>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 2091 ] 
11:23:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x053FB930>) , Command count = 2092 ] 
11:23:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:44: [ SetBusWidth(0x4) , Command count = 2093 ] 
11:23:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2094 ] 
11:23:44: Protected Area Size 0x28000
11:23:44: Bus Width           2
11:23:44: Secure Mode         0
11:23:44: Speed  Class        4
11:23:44: Perf Move           0
11:23:44: Au Size             9
11:23:44: Erase Size          15
11:23:44: Erase Timeout       1
11:23:44: Erase offset        1
11:23:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2095 ] 
11:23:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:44: Host Frequency set to 100000 KHz
11:23:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:44: ####CSD Registe 2.0 Values####
11:23:44: CSD_STRUCTURE                                 :0x1
11:23:44: Reserv1                                       :0x0
11:23:44: Time Access 1 TAAC                            :0xe
11:23:44: Time Access 2 NSAC*100                        :0x0
11:23:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:44: Card Command Classess CCC                     :0x5b5
11:23:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:44: DSR(driver stage register)  DSR_IMP           :0x0
11:23:44: Reserv2                                       :0x0
11:23:44: Device Size C_SIZE                            :0xedc8
11:23:44: Reserv3                                       :0x0
11:23:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:44: Reserv4                                       :0x0
11:23:44: Write Speed Factor R2W_FACTOR                 :0x2
11:23:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:44: FILE_FORMAT_GRP                               :0x0
11:23:44: COPY flag                                     :0x1
11:23:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:44: File_Format                                   :0x0
11:23:44: CRC                                           :0x0
11:23:44: ####CSD Registe Values####  

11:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 2096 ] 
11:23:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 2097 ] 
11:23:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D450>, <py_sfcl.PySEnhancedCmdData object at 0x06280090>, <None>, <py_sfcl.Command23 object at 0x06280180>) , Command count = 2098 ] 
11:23:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:47: Host Frequency set to 25000 KHz
11:23:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F60>, 0x0, True) , Command count = 2099 ] 
11:23:47: [GO18_globalSetVolt]### Host voltage value is set.
11:23:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216E70>, 0x0, False) , Command count = 2100 ] 
11:23:47: [GO18_globalSetVolt]### Host voltage value is set.
11:23:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2101 ] 
11:23:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2102 ] 
11:23:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2103 ] 
11:23:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216810>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 2104 ] 
11:23:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AB10>, <py_sfcl.CommandDataDefinition object at 0x0627D6C0>) , Command count = 2105 ] 
11:23:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2106 ] 
11:23:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:47: Host Frequency set to 25000 KHz
11:23:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:47: ####CSD Registe 2.0 Values####
11:23:47: CSD_STRUCTURE                                 :0x1
11:23:47: Reserv1                                       :0x0
11:23:47: Time Access 1 TAAC                            :0xe
11:23:47: Time Access 2 NSAC*100                        :0x0
11:23:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:47: Card Command Classess CCC                     :0x5b5
11:23:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:47: DSR(driver stage register)  DSR_IMP           :0x0
11:23:47: Reserv2                                       :0x0
11:23:47: Device Size C_SIZE                            :0xedc8
11:23:47: Reserv3                                       :0x0
11:23:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:47: Reserv4                                       :0x0
11:23:47: Write Speed Factor R2W_FACTOR                 :0x2
11:23:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:47: FILE_FORMAT_GRP                               :0x0
11:23:47: COPY flag                                     :0x1
11:23:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:47: File_Format                                   :0x0
11:23:47: CRC                                           :0x0
11:23:47: ####CSD Registe Values####  

11:23:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:47: [GetSCRRegisterEntry] Passed
11:23:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:47: Data_Status_After Erases          : 0
11:23:47: CPRM Security Support             : No Security
11:23:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:47: Spec. Version                     : Version 3.0X
11:23:47: Extended Security Support         : Extended_Security_Not_Supported
11:23:47: Command Support                   : COMMAND_SUPPORT
11:23:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062165D0>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 2107 ] 
11:23:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 2108 ] 
11:23:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:47: [ SetBusWidth(0x4) , Command count = 2109 ] 
11:23:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2110 ] 
11:23:47: Protected Area Size 0x28000
11:23:47: Bus Width           2
11:23:47: Secure Mode         0
11:23:47: Speed  Class        4
11:23:47: Perf Move           0
11:23:47: Au Size             9
11:23:47: Erase Size          15
11:23:47: Erase Timeout       1
11:23:47: Erase offset        1
11:23:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2111 ] 
11:23:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:47: Host Frequency set to 100000 KHz
11:23:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:47: ####CSD Registe 2.0 Values####
11:23:47: CSD_STRUCTURE                                 :0x1
11:23:47: Reserv1                                       :0x0
11:23:47: Time Access 1 TAAC                            :0xe
11:23:47: Time Access 2 NSAC*100                        :0x0
11:23:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:47: Card Command Classess CCC                     :0x5b5
11:23:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:47: DSR(driver stage register)  DSR_IMP           :0x0
11:23:47: Reserv2                                       :0x0
11:23:47: Device Size C_SIZE                            :0xedc8
11:23:47: Reserv3                                       :0x0
11:23:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:48: Reserv4                                       :0x0
11:23:48: Write Speed Factor R2W_FACTOR                 :0x2
11:23:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:48: FILE_FORMAT_GRP                               :0x0
11:23:48: COPY flag                                     :0x1
11:23:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:48: File_Format                                   :0x0
11:23:48: CRC                                           :0x0
11:23:48: ####CSD Registe Values####  

11:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 2112 ] 
11:23:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x0627D1E0>) , Command count = 2113 ] 
11:23:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062167E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C30>, <py_sfcl.PySEnhancedCmdData object at 0x06268B10>, <None>, <py_sfcl.Command23 object at 0x06268990>) , Command count = 2114 ] 
11:23:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:48: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:50: Host Frequency set to 25000 KHz
11:23:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:50: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216C00>, 0x0, True) , Command count = 2115 ] 
11:23:50: [GO18_globalSetVolt]### Host voltage value is set.
11:23:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269120>, 0x0, False) , Command count = 2116 ] 
11:23:50: [GO18_globalSetVolt]### Host voltage value is set.
11:23:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2117 ] 
11:23:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2118 ] 
11:23:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2119 ] 
11:23:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 2120 ] 
11:23:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680C0>, <py_sfcl.CommandDataDefinition object at 0x062683C0>) , Command count = 2121 ] 
11:23:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:50: [ SetCardRCA(0x1, 0xD555) , Command count = 2122 ] 
11:23:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:51: Host Frequency set to 25000 KHz
11:23:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:51: ####CSD Registe 2.0 Values####
11:23:51: CSD_STRUCTURE                                 :0x1
11:23:51: Reserv1                                       :0x0
11:23:51: Time Access 1 TAAC                            :0xe
11:23:51: Time Access 2 NSAC*100                        :0x0
11:23:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:51: Card Command Classess CCC                     :0x5b5
11:23:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:51: DSR(driver stage register)  DSR_IMP           :0x0
11:23:51: Reserv2                                       :0x0
11:23:51: Device Size C_SIZE                            :0xedc8
11:23:51: Reserv3                                       :0x0
11:23:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:51: Reserv4                                       :0x0
11:23:51: Write Speed Factor R2W_FACTOR                 :0x2
11:23:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:51: FILE_FORMAT_GRP                               :0x0
11:23:51: COPY flag                                     :0x1
11:23:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:51: File_Format                                   :0x0
11:23:51: CRC                                           :0x0
11:23:51: ####CSD Registe Values####  

11:23:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:51: [GetSCRRegisterEntry] Passed
11:23:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:51: Data_Status_After Erases          : 0
11:23:51: CPRM Security Support             : No Security
11:23:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:51: Spec. Version                     : Version 3.0X
11:23:51: Extended Security Support         : Extended_Security_Not_Supported
11:23:51: Command Support                   : COMMAND_SUPPORT
11:23:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x0627D540>) , Command count = 2123 ] 
11:23:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D240>, <py_sfcl.CommandDataDefinition object at 0x0627D120>) , Command count = 2124 ] 
11:23:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:51: [ SetBusWidth(0x4) , Command count = 2125 ] 
11:23:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2126 ] 
11:23:51: Protected Area Size 0x28000
11:23:51: Bus Width           2
11:23:51: Secure Mode         0
11:23:51: Speed  Class        4
11:23:51: Perf Move           0
11:23:51: Au Size             9
11:23:51: Erase Size          15
11:23:51: Erase Timeout       1
11:23:51: Erase offset        1
11:23:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2127 ] 
11:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:51: Host Frequency set to 100000 KHz
11:23:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:51: ####CSD Registe 2.0 Values####
11:23:51: CSD_STRUCTURE                                 :0x1
11:23:51: Reserv1                                       :0x0
11:23:51: Time Access 1 TAAC                            :0xe
11:23:51: Time Access 2 NSAC*100                        :0x0
11:23:51: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:51: Card Command Classess CCC                     :0x5b5
11:23:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:51: DSR(driver stage register)  DSR_IMP           :0x0
11:23:51: Reserv2                                       :0x0
11:23:51: Device Size C_SIZE                            :0xedc8
11:23:51: Reserv3                                       :0x0
11:23:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:51: Reserv4                                       :0x0
11:23:51: Write Speed Factor R2W_FACTOR                 :0x2
11:23:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:51: FILE_FORMAT_GRP                               :0x0
11:23:51: COPY flag                                     :0x1
11:23:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:51: File_Format                                   :0x0
11:23:51: CRC                                           :0x0
11:23:51: ####CSD Registe Values####  

11:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3F0>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 2128 ] 
11:23:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216FC0>, <py_sfcl.CommandDataDefinition object at 0x0627D660>) , Command count = 2129 ] 
11:23:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268DE0>, <py_sfcl.PySEnhancedCmdData object at 0x06268CC0>, <None>, <py_sfcl.Command23 object at 0x062680F0>) , Command count = 2130 ] 
11:23:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:54: Host Frequency set to 25000 KHz
11:23:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D3C0>, 0x0, True) , Command count = 2131 ] 
11:23:54: [GO18_globalSetVolt]### Host voltage value is set.
11:23:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D840>, 0x0, False) , Command count = 2132 ] 
11:23:54: [GO18_globalSetVolt]### Host voltage value is set.
11:23:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2133 ] 
11:23:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2134 ] 
11:23:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2135 ] 
11:23:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C60>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 2136 ] 
11:23:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D330>, <py_sfcl.CommandDataDefinition object at 0x06268BA0>) , Command count = 2137 ] 
11:23:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2138 ] 
11:23:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:54: Host Frequency set to 25000 KHz
11:23:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:54: ####CSD Registe 2.0 Values####
11:23:54: CSD_STRUCTURE                                 :0x1
11:23:54: Reserv1                                       :0x0
11:23:54: Time Access 1 TAAC                            :0xe
11:23:54: Time Access 2 NSAC*100                        :0x0
11:23:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:54: Card Command Classess CCC                     :0x5b5
11:23:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:54: DSR(driver stage register)  DSR_IMP           :0x0
11:23:54: Reserv2                                       :0x0
11:23:54: Device Size C_SIZE                            :0xedc8
11:23:54: Reserv3                                       :0x0
11:23:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:54: Reserv4                                       :0x0
11:23:54: Write Speed Factor R2W_FACTOR                 :0x2
11:23:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:54: FILE_FORMAT_GRP                               :0x0
11:23:54: COPY flag                                     :0x1
11:23:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:54: File_Format                                   :0x0
11:23:54: CRC                                           :0x0
11:23:54: ####CSD Registe Values####  

11:23:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:54: [GetSCRRegisterEntry] Passed
11:23:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:54: Data_Status_After Erases          : 0
11:23:54: CPRM Security Support             : No Security
11:23:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:54: Spec. Version                     : Version 3.0X
11:23:54: Extended Security Support         : Extended_Security_Not_Supported
11:23:54: Command Support                   : COMMAND_SUPPORT
11:23:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x0627D690>) , Command count = 2139 ] 
11:23:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062686F0>, <py_sfcl.CommandDataDefinition object at 0x06268A80>) , Command count = 2140 ] 
11:23:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:54: [ SetBusWidth(0x4) , Command count = 2141 ] 
11:23:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2142 ] 
11:23:54: Protected Area Size 0x28000
11:23:54: Bus Width           2
11:23:54: Secure Mode         0
11:23:54: Speed  Class        4
11:23:54: Perf Move           0
11:23:54: Au Size             9
11:23:54: Erase Size          15
11:23:54: Erase Timeout       1
11:23:54: Erase offset        1
11:23:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2143 ] 
11:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:54: Host Frequency set to 100000 KHz
11:23:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:54: ####CSD Registe 2.0 Values####
11:23:54: CSD_STRUCTURE                                 :0x1
11:23:54: Reserv1                                       :0x0
11:23:54: Time Access 1 TAAC                            :0xe
11:23:54: Time Access 2 NSAC*100                        :0x0
11:23:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:54: Card Command Classess CCC                     :0x5b5
11:23:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:54: DSR(driver stage register)  DSR_IMP           :0x0
11:23:54: Reserv2                                       :0x0
11:23:54: Device Size C_SIZE                            :0xedc8
11:23:54: Reserv3                                       :0x0
11:23:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:55: Reserv4                                       :0x0
11:23:55: Write Speed Factor R2W_FACTOR                 :0x2
11:23:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:55: FILE_FORMAT_GRP                               :0x0
11:23:55: COPY flag                                     :0x1
11:23:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:55: File_Format                                   :0x0
11:23:55: CRC                                           :0x0
11:23:55: ####CSD Registe Values####  

11:23:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D390>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 2144 ] 
11:23:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x062733C0>) , Command count = 2145 ] 
11:23:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269C00>, <py_sfcl.PySEnhancedCmdData object at 0x06269390>, <None>, <py_sfcl.Command23 object at 0x06268F30>) , Command count = 2146 ] 
11:23:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:23:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:57: Host Frequency set to 25000 KHz
11:23:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:23:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:23:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DF60>, 0x0, True) , Command count = 2147 ] 
11:23:57: [GO18_globalSetVolt]### Host voltage value is set.
11:23:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:23:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x062689C0>, 0x0, False) , Command count = 2148 ] 
11:23:57: [GO18_globalSetVolt]### Host voltage value is set.
11:23:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2149 ] 
11:23:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:23:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2150 ] 
11:23:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:23:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:23:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:23:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:23:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:23:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2151 ] 
11:23:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:23:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:23:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x06269AB0>) , Command count = 2152 ] 
11:23:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:23:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268900>, <py_sfcl.CommandDataDefinition object at 0x06269210>) , Command count = 2153 ] 
11:23:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:23:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2154 ] 
11:23:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:23:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:23:58: Host Frequency set to 25000 KHz
11:23:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:23:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:58: ####CSD Registe 2.0 Values####
11:23:58: CSD_STRUCTURE                                 :0x1
11:23:58: Reserv1                                       :0x0
11:23:58: Time Access 1 TAAC                            :0xe
11:23:58: Time Access 2 NSAC*100                        :0x0
11:23:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:23:58: Card Command Classess CCC                     :0x5b5
11:23:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:58: DSR(driver stage register)  DSR_IMP           :0x0
11:23:58: Reserv2                                       :0x0
11:23:58: Device Size C_SIZE                            :0xedc8
11:23:58: Reserv3                                       :0x0
11:23:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:58: Reserv4                                       :0x0
11:23:58: Write Speed Factor R2W_FACTOR                 :0x2
11:23:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:58: FILE_FORMAT_GRP                               :0x0
11:23:58: COPY flag                                     :0x1
11:23:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:58: File_Format                                   :0x0
11:23:58: CRC                                           :0x0
11:23:58: ####CSD Registe Values####  

11:23:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:23:58: [GetSCRRegisterEntry] Passed
11:23:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:23:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:23:58: Data_Status_After Erases          : 0
11:23:58: CPRM Security Support             : No Security
11:23:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:23:58: Spec. Version                     : Version 3.0X
11:23:58: Extended Security Support         : Extended_Security_Not_Supported
11:23:58: Command Support                   : COMMAND_SUPPORT
11:23:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6C0>, <py_sfcl.CommandDataDefinition object at 0x0627DE70>) , Command count = 2155 ] 
11:23:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268210>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 2156 ] 
11:23:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:23:58: [ SetBusWidth(0x4) , Command count = 2157 ] 
11:23:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:23:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2158 ] 
11:23:58: Protected Area Size 0x28000
11:23:58: Bus Width           2
11:23:58: Secure Mode         0
11:23:58: Speed  Class        4
11:23:58: Perf Move           0
11:23:58: Au Size             9
11:23:58: Erase Size          15
11:23:58: Erase Timeout       1
11:23:58: Erase offset        1
11:23:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:23:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:23:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:23:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2159 ] 
11:23:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:23:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:23:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:23:58: Host Frequency set to 100000 KHz
11:23:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:23:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:23:58: ####CSD Registe 2.0 Values####
11:23:58: CSD_STRUCTURE                                 :0x1
11:23:58: Reserv1                                       :0x0
11:23:58: Time Access 1 TAAC                            :0xe
11:23:58: Time Access 2 NSAC*100                        :0x0
11:23:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:23:58: Card Command Classess CCC                     :0x5b5
11:23:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:23:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:23:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:23:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:23:58: DSR(driver stage register)  DSR_IMP           :0x0
11:23:58: Reserv2                                       :0x0
11:23:58: Device Size C_SIZE                            :0xedc8
11:23:58: Reserv3                                       :0x0
11:23:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:23:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:23:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:23:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:23:58: Reserv4                                       :0x0
11:23:58: Write Speed Factor R2W_FACTOR                 :0x2
11:23:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:23:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:23:58: FILE_FORMAT_GRP                               :0x0
11:23:58: COPY flag                                     :0x1
11:23:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:23:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:23:58: File_Format                                   :0x0
11:23:58: CRC                                           :0x0
11:23:58: ####CSD Registe Values####  

11:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 2160 ] 
11:23:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273ED0>, <py_sfcl.CommandDataDefinition object at 0x06273150>) , Command count = 2161 ] 
11:23:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:23:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:23:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:23:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:23:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x062695A0>, <None>, <py_sfcl.Command23 object at 0x062697E0>) , Command count = 2162 ] 
11:23:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:23:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:01: Host Frequency set to 25000 KHz
11:24:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:01: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x062689F0>, 0x0, True) , Command count = 2163 ] 
11:24:01: [GO18_globalSetVolt]### Host voltage value is set.
11:24:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D9C0>, 0x0, False) , Command count = 2164 ] 
11:24:01: [GO18_globalSetVolt]### Host voltage value is set.
11:24:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2165 ] 
11:24:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2166 ] 
11:24:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2167 ] 
11:24:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DFC0>, <py_sfcl.CommandDataDefinition object at 0x06268E10>) , Command count = 2168 ] 
11:24:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D780>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 2169 ] 
11:24:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:01: [ SetCardRCA(0x1, 0xD555) , Command count = 2170 ] 
11:24:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:01: Host Frequency set to 25000 KHz
11:24:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:01: ####CSD Registe 2.0 Values####
11:24:01: CSD_STRUCTURE                                 :0x1
11:24:01: Reserv1                                       :0x0
11:24:01: Time Access 1 TAAC                            :0xe
11:24:01: Time Access 2 NSAC*100                        :0x0
11:24:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:01: Card Command Classess CCC                     :0x5b5
11:24:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:01: DSR(driver stage register)  DSR_IMP           :0x0
11:24:01: Reserv2                                       :0x0
11:24:01: Device Size C_SIZE                            :0xedc8
11:24:01: Reserv3                                       :0x0
11:24:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:01: Reserv4                                       :0x0
11:24:01: Write Speed Factor R2W_FACTOR                 :0x2
11:24:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:01: FILE_FORMAT_GRP                               :0x0
11:24:01: COPY flag                                     :0x1
11:24:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:01: File_Format                                   :0x0
11:24:01: CRC                                           :0x0
11:24:01: ####CSD Registe Values####  

11:24:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:01: [GetSCRRegisterEntry] Passed
11:24:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:01: Data_Status_After Erases          : 0
11:24:01: CPRM Security Support             : No Security
11:24:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:01: Spec. Version                     : Version 3.0X
11:24:01: Extended Security Support         : Extended_Security_Not_Supported
11:24:01: Command Support                   : COMMAND_SUPPORT
11:24:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268060>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 2171 ] 
11:24:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268510>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 2172 ] 
11:24:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:01: [ SetBusWidth(0x4) , Command count = 2173 ] 
11:24:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062735D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2174 ] 
11:24:01: Protected Area Size 0x28000
11:24:01: Bus Width           2
11:24:01: Secure Mode         0
11:24:01: Speed  Class        4
11:24:01: Perf Move           0
11:24:01: Au Size             9
11:24:01: Erase Size          15
11:24:01: Erase Timeout       1
11:24:01: Erase offset        1
11:24:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2175 ] 
11:24:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:01: Host Frequency set to 100000 KHz
11:24:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:01: ####CSD Registe 2.0 Values####
11:24:01: CSD_STRUCTURE                                 :0x1
11:24:01: Reserv1                                       :0x0
11:24:01: Time Access 1 TAAC                            :0xe
11:24:01: Time Access 2 NSAC*100                        :0x0
11:24:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:01: Card Command Classess CCC                     :0x5b5
11:24:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:01: DSR(driver stage register)  DSR_IMP           :0x0
11:24:01: Reserv2                                       :0x0
11:24:01: Device Size C_SIZE                            :0xedc8
11:24:01: Reserv3                                       :0x0
11:24:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:02: Reserv4                                       :0x0
11:24:02: Write Speed Factor R2W_FACTOR                 :0x2
11:24:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:02: FILE_FORMAT_GRP                               :0x0
11:24:02: COPY flag                                     :0x1
11:24:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:02: File_Format                                   :0x0
11:24:02: CRC                                           :0x0
11:24:02: ####CSD Registe Values####  

11:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D660>, <py_sfcl.CommandDataDefinition object at 0x0626D2D0>) , Command count = 2176 ] 
11:24:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268660>, <py_sfcl.CommandDataDefinition object at 0x06273DB0>) , Command count = 2177 ] 
11:24:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D3F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269D80>, <py_sfcl.PySEnhancedCmdData object at 0x06269E70>, <None>, <py_sfcl.Command23 object at 0x06269F00>) , Command count = 2178 ] 
11:24:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:04: Host Frequency set to 25000 KHz
11:24:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268AB0>, 0x0, True) , Command count = 2179 ] 
11:24:04: [GO18_globalSetVolt]### Host voltage value is set.
11:24:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269600>, 0x0, False) , Command count = 2180 ] 
11:24:04: [GO18_globalSetVolt]### Host voltage value is set.
11:24:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2181 ] 
11:24:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2182 ] 
11:24:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2183 ] 
11:24:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691E0>, <py_sfcl.CommandDataDefinition object at 0x0626DD20>) , Command count = 2184 ] 
11:24:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CF0>, <py_sfcl.CommandDataDefinition object at 0x062693F0>) , Command count = 2185 ] 
11:24:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2186 ] 
11:24:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:05: Host Frequency set to 25000 KHz
11:24:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:05: ####CSD Registe 2.0 Values####
11:24:05: CSD_STRUCTURE                                 :0x1
11:24:05: Reserv1                                       :0x0
11:24:05: Time Access 1 TAAC                            :0xe
11:24:05: Time Access 2 NSAC*100                        :0x0
11:24:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:05: Card Command Classess CCC                     :0x5b5
11:24:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:05: DSR(driver stage register)  DSR_IMP           :0x0
11:24:05: Reserv2                                       :0x0
11:24:05: Device Size C_SIZE                            :0xedc8
11:24:05: Reserv3                                       :0x0
11:24:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:05: Reserv4                                       :0x0
11:24:05: Write Speed Factor R2W_FACTOR                 :0x2
11:24:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:05: FILE_FORMAT_GRP                               :0x0
11:24:05: COPY flag                                     :0x1
11:24:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:05: File_Format                                   :0x0
11:24:05: CRC                                           :0x0
11:24:05: ####CSD Registe Values####  

11:24:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:05: [GetSCRRegisterEntry] Passed
11:24:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:05: Data_Status_After Erases          : 0
11:24:05: CPRM Security Support             : No Security
11:24:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:05: Spec. Version                     : Version 3.0X
11:24:05: Extended Security Support         : Extended_Security_Not_Supported
11:24:05: Command Support                   : COMMAND_SUPPORT
11:24:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA50>, <py_sfcl.CommandDataDefinition object at 0x062696F0>) , Command count = 2187 ] 
11:24:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695D0>, <py_sfcl.CommandDataDefinition object at 0x0626D510>) , Command count = 2188 ] 
11:24:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:05: [ SetBusWidth(0x4) , Command count = 2189 ] 
11:24:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2190 ] 
11:24:05: Protected Area Size 0x28000
11:24:05: Bus Width           2
11:24:05: Secure Mode         0
11:24:05: Speed  Class        4
11:24:05: Perf Move           0
11:24:05: Au Size             9
11:24:05: Erase Size          15
11:24:05: Erase Timeout       1
11:24:05: Erase offset        1
11:24:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2191 ] 
11:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:05: Host Frequency set to 100000 KHz
11:24:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:05: ####CSD Registe 2.0 Values####
11:24:05: CSD_STRUCTURE                                 :0x1
11:24:05: Reserv1                                       :0x0
11:24:05: Time Access 1 TAAC                            :0xe
11:24:05: Time Access 2 NSAC*100                        :0x0
11:24:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:05: Card Command Classess CCC                     :0x5b5
11:24:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:05: DSR(driver stage register)  DSR_IMP           :0x0
11:24:05: Reserv2                                       :0x0
11:24:05: Device Size C_SIZE                            :0xedc8
11:24:05: Reserv3                                       :0x0
11:24:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:05: Reserv4                                       :0x0
11:24:05: Write Speed Factor R2W_FACTOR                 :0x2
11:24:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:05: FILE_FORMAT_GRP                               :0x0
11:24:05: COPY flag                                     :0x1
11:24:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:05: File_Format                                   :0x0
11:24:05: CRC                                           :0x0
11:24:05: ####CSD Registe Values####  

11:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BD0>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 2192 ] 
11:24:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AFC0>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 2193 ] 
11:24:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D600>, <py_sfcl.PySEnhancedCmdData object at 0x0626DE70>, <None>, <py_sfcl.Command23 object at 0x06269AE0>) , Command count = 2194 ] 
11:24:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:08: Host Frequency set to 25000 KHz
11:24:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x062694B0>, 0x0, True) , Command count = 2195 ] 
11:24:08: [GO18_globalSetVolt]### Host voltage value is set.
11:24:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DAE0>, 0x0, False) , Command count = 2196 ] 
11:24:08: [GO18_globalSetVolt]### Host voltage value is set.
11:24:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2197 ] 
11:24:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2198 ] 
11:24:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2199 ] 
11:24:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x0626DC90>) , Command count = 2200 ] 
11:24:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269930>, <py_sfcl.CommandDataDefinition object at 0x0626DB70>) , Command count = 2201 ] 
11:24:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2202 ] 
11:24:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:08: Host Frequency set to 25000 KHz
11:24:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:08: ####CSD Registe 2.0 Values####
11:24:08: CSD_STRUCTURE                                 :0x1
11:24:08: Reserv1                                       :0x0
11:24:08: Time Access 1 TAAC                            :0xe
11:24:08: Time Access 2 NSAC*100                        :0x0
11:24:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:08: Card Command Classess CCC                     :0x5b5
11:24:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:08: DSR(driver stage register)  DSR_IMP           :0x0
11:24:08: Reserv2                                       :0x0
11:24:08: Device Size C_SIZE                            :0xedc8
11:24:08: Reserv3                                       :0x0
11:24:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:08: Reserv4                                       :0x0
11:24:08: Write Speed Factor R2W_FACTOR                 :0x2
11:24:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:08: FILE_FORMAT_GRP                               :0x0
11:24:08: COPY flag                                     :0x1
11:24:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:08: File_Format                                   :0x0
11:24:08: CRC                                           :0x0
11:24:08: ####CSD Registe Values####  

11:24:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:08: [GetSCRRegisterEntry] Passed
11:24:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:08: Data_Status_After Erases          : 0
11:24:08: CPRM Security Support             : No Security
11:24:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:08: Spec. Version                     : Version 3.0X
11:24:08: Extended Security Support         : Extended_Security_Not_Supported
11:24:08: Command Support                   : COMMAND_SUPPORT
11:24:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA20>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 2203 ] 
11:24:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 2204 ] 
11:24:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:08: [ SetBusWidth(0x4) , Command count = 2205 ] 
11:24:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2206 ] 
11:24:08: Protected Area Size 0x28000
11:24:08: Bus Width           2
11:24:08: Secure Mode         0
11:24:08: Speed  Class        4
11:24:08: Perf Move           0
11:24:08: Au Size             9
11:24:08: Erase Size          15
11:24:08: Erase Timeout       1
11:24:08: Erase offset        1
11:24:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2207 ] 
11:24:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:08: Host Frequency set to 100000 KHz
11:24:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:08: ####CSD Registe 2.0 Values####
11:24:08: CSD_STRUCTURE                                 :0x1
11:24:08: Reserv1                                       :0x0
11:24:08: Time Access 1 TAAC                            :0xe
11:24:08: Time Access 2 NSAC*100                        :0x0
11:24:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:08: Card Command Classess CCC                     :0x5b5
11:24:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:08: DSR(driver stage register)  DSR_IMP           :0x0
11:24:08: Reserv2                                       :0x0
11:24:08: Device Size C_SIZE                            :0xedc8
11:24:08: Reserv3                                       :0x0
11:24:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:09: Reserv4                                       :0x0
11:24:09: Write Speed Factor R2W_FACTOR                 :0x2
11:24:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:09: FILE_FORMAT_GRP                               :0x0
11:24:09: COPY flag                                     :0x1
11:24:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:09: File_Format                                   :0x0
11:24:09: CRC                                           :0x0
11:24:09: ####CSD Registe Values####  

11:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 2208 ] 
11:24:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626D990>) , Command count = 2209 ] 
11:24:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D120>, <py_sfcl.PySEnhancedCmdData object at 0x0626D3C0>, <None>, <py_sfcl.Command23 object at 0x0626D810>) , Command count = 2210 ] 
11:24:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:11: Host Frequency set to 25000 KHz
11:24:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x062698A0>, 0x0, True) , Command count = 2211 ] 
11:24:11: [GO18_globalSetVolt]### Host voltage value is set.
11:24:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D990>, 0x0, False) , Command count = 2212 ] 
11:24:11: [GO18_globalSetVolt]### Host voltage value is set.
11:24:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2213 ] 
11:24:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2214 ] 
11:24:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2215 ] 
11:24:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA50>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 2216 ] 
11:24:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268420>, <py_sfcl.CommandDataDefinition object at 0x06273360>) , Command count = 2217 ] 
11:24:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2218 ] 
11:24:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:12: Host Frequency set to 25000 KHz
11:24:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:12: ####CSD Registe 2.0 Values####
11:24:12: CSD_STRUCTURE                                 :0x1
11:24:12: Reserv1                                       :0x0
11:24:12: Time Access 1 TAAC                            :0xe
11:24:12: Time Access 2 NSAC*100                        :0x0
11:24:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:12: Card Command Classess CCC                     :0x5b5
11:24:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:12: DSR(driver stage register)  DSR_IMP           :0x0
11:24:12: Reserv2                                       :0x0
11:24:12: Device Size C_SIZE                            :0xedc8
11:24:12: Reserv3                                       :0x0
11:24:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:12: Reserv4                                       :0x0
11:24:12: Write Speed Factor R2W_FACTOR                 :0x2
11:24:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:12: FILE_FORMAT_GRP                               :0x0
11:24:12: COPY flag                                     :0x1
11:24:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:12: File_Format                                   :0x0
11:24:12: CRC                                           :0x0
11:24:12: ####CSD Registe Values####  

11:24:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:12: [GetSCRRegisterEntry] Passed
11:24:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:12: Data_Status_After Erases          : 0
11:24:12: CPRM Security Support             : No Security
11:24:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:12: Spec. Version                     : Version 3.0X
11:24:12: Extended Security Support         : Extended_Security_Not_Supported
11:24:12: Command Support                   : COMMAND_SUPPORT
11:24:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x0626D300>) , Command count = 2219 ] 
11:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7E0>, <py_sfcl.CommandDataDefinition object at 0x06273AB0>) , Command count = 2220 ] 
11:24:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:12: [ SetBusWidth(0x4) , Command count = 2221 ] 
11:24:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2222 ] 
11:24:12: Protected Area Size 0x28000
11:24:12: Bus Width           2
11:24:12: Secure Mode         0
11:24:12: Speed  Class        4
11:24:12: Perf Move           0
11:24:12: Au Size             9
11:24:12: Erase Size          15
11:24:12: Erase Timeout       1
11:24:12: Erase offset        1
11:24:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2223 ] 
11:24:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:12: Host Frequency set to 100000 KHz
11:24:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:12: ####CSD Registe 2.0 Values####
11:24:12: CSD_STRUCTURE                                 :0x1
11:24:12: Reserv1                                       :0x0
11:24:12: Time Access 1 TAAC                            :0xe
11:24:12: Time Access 2 NSAC*100                        :0x0
11:24:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:12: Card Command Classess CCC                     :0x5b5
11:24:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:12: DSR(driver stage register)  DSR_IMP           :0x0
11:24:12: Reserv2                                       :0x0
11:24:12: Device Size C_SIZE                            :0xedc8
11:24:12: Reserv3                                       :0x0
11:24:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:12: Reserv4                                       :0x0
11:24:12: Write Speed Factor R2W_FACTOR                 :0x2
11:24:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:12: FILE_FORMAT_GRP                               :0x0
11:24:12: COPY flag                                     :0x1
11:24:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:12: File_Format                                   :0x0
11:24:12: CRC                                           :0x0
11:24:12: ####CSD Registe Values####  

11:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DE0>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 2224 ] 
11:24:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 2225 ] 
11:24:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273270>, <py_sfcl.PySEnhancedCmdData object at 0x06273300>, <None>, <py_sfcl.Command23 object at 0x0626D9C0>) , Command count = 2226 ] 
11:24:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:15: Host Frequency set to 25000 KHz
11:24:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DBA0>, 0x0, True) , Command count = 2227 ] 
11:24:15: [GO18_globalSetVolt]### Host voltage value is set.
11:24:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276240>, 0x0, False) , Command count = 2228 ] 
11:24:15: [GO18_globalSetVolt]### Host voltage value is set.
11:24:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2229 ] 
11:24:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2230 ] 
11:24:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2231 ] 
11:24:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF30>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 2232 ] 
11:24:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DFC0>, <py_sfcl.CommandDataDefinition object at 0x0626DD50>) , Command count = 2233 ] 
11:24:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2234 ] 
11:24:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:15: Host Frequency set to 25000 KHz
11:24:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:15: ####CSD Registe 2.0 Values####
11:24:15: CSD_STRUCTURE                                 :0x1
11:24:15: Reserv1                                       :0x0
11:24:15: Time Access 1 TAAC                            :0xe
11:24:15: Time Access 2 NSAC*100                        :0x0
11:24:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:15: Card Command Classess CCC                     :0x5b5
11:24:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:15: DSR(driver stage register)  DSR_IMP           :0x0
11:24:15: Reserv2                                       :0x0
11:24:15: Device Size C_SIZE                            :0xedc8
11:24:15: Reserv3                                       :0x0
11:24:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:15: Reserv4                                       :0x0
11:24:15: Write Speed Factor R2W_FACTOR                 :0x2
11:24:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:15: FILE_FORMAT_GRP                               :0x0
11:24:15: COPY flag                                     :0x1
11:24:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:15: File_Format                                   :0x0
11:24:15: CRC                                           :0x0
11:24:15: ####CSD Registe Values####  

11:24:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:15: [GetSCRRegisterEntry] Passed
11:24:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:15: Data_Status_After Erases          : 0
11:24:15: CPRM Security Support             : No Security
11:24:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:15: Spec. Version                     : Version 3.0X
11:24:15: Extended Security Support         : Extended_Security_Not_Supported
11:24:15: Command Support                   : COMMAND_SUPPORT
11:24:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276960>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 2235 ] 
11:24:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A20>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 2236 ] 
11:24:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:15: [ SetBusWidth(0x4) , Command count = 2237 ] 
11:24:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2238 ] 
11:24:15: Protected Area Size 0x28000
11:24:15: Bus Width           2
11:24:15: Secure Mode         0
11:24:15: Speed  Class        4
11:24:15: Perf Move           0
11:24:15: Au Size             9
11:24:15: Erase Size          15
11:24:15: Erase Timeout       1
11:24:15: Erase offset        1
11:24:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2239 ] 
11:24:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:15: Host Frequency set to 100000 KHz
11:24:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:15: ####CSD Registe 2.0 Values####
11:24:15: CSD_STRUCTURE                                 :0x1
11:24:15: Reserv1                                       :0x0
11:24:15: Time Access 1 TAAC                            :0xe
11:24:15: Time Access 2 NSAC*100                        :0x0
11:24:15: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:15: Card Command Classess CCC                     :0x5b5
11:24:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:15: DSR(driver stage register)  DSR_IMP           :0x0
11:24:15: Reserv2                                       :0x0
11:24:15: Device Size C_SIZE                            :0xedc8
11:24:15: Reserv3                                       :0x0
11:24:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:15: Reserv4                                       :0x0
11:24:15: Write Speed Factor R2W_FACTOR                 :0x2
11:24:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:15: FILE_FORMAT_GRP                               :0x0
11:24:15: COPY flag                                     :0x1
11:24:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:16: File_Format                                   :0x0
11:24:16: CRC                                           :0x0
11:24:16: ####CSD Registe Values####  

11:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 2240 ] 
11:24:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x06273570>) , Command count = 2241 ] 
11:24:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062760C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273AE0>, <py_sfcl.PySEnhancedCmdData object at 0x06273330>, <None>, <py_sfcl.Command23 object at 0x06273C90>) , Command count = 2242 ] 
11:24:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:16: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:18: Host Frequency set to 25000 KHz
11:24:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:18: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DED0>, 0x0, True) , Command count = 2243 ] 
11:24:18: [GO18_globalSetVolt]### Host voltage value is set.
11:24:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276270>, 0x0, False) , Command count = 2244 ] 
11:24:18: [GO18_globalSetVolt]### Host voltage value is set.
11:24:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2245 ] 
11:24:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2246 ] 
11:24:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2247 ] 
11:24:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6F0>, <py_sfcl.CommandDataDefinition object at 0x0627DC00>) , Command count = 2248 ] 
11:24:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276030>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 2249 ] 
11:24:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2250 ] 
11:24:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:18: Host Frequency set to 25000 KHz
11:24:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:19: ####CSD Registe 2.0 Values####
11:24:19: CSD_STRUCTURE                                 :0x1
11:24:19: Reserv1                                       :0x0
11:24:19: Time Access 1 TAAC                            :0xe
11:24:19: Time Access 2 NSAC*100                        :0x0
11:24:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:19: Card Command Classess CCC                     :0x5b5
11:24:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:19: DSR(driver stage register)  DSR_IMP           :0x0
11:24:19: Reserv2                                       :0x0
11:24:19: Device Size C_SIZE                            :0xedc8
11:24:19: Reserv3                                       :0x0
11:24:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:19: Reserv4                                       :0x0
11:24:19: Write Speed Factor R2W_FACTOR                 :0x2
11:24:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:19: FILE_FORMAT_GRP                               :0x0
11:24:19: COPY flag                                     :0x1
11:24:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:19: File_Format                                   :0x0
11:24:19: CRC                                           :0x0
11:24:19: ####CSD Registe Values####  

11:24:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:19: [GetSCRRegisterEntry] Passed
11:24:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:19: Data_Status_After Erases          : 0
11:24:19: CPRM Security Support             : No Security
11:24:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:19: Spec. Version                     : Version 3.0X
11:24:19: Extended Security Support         : Extended_Security_Not_Supported
11:24:19: Command Support                   : COMMAND_SUPPORT
11:24:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D50>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 2251 ] 
11:24:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062768D0>, <py_sfcl.CommandDataDefinition object at 0x05401F30>) , Command count = 2252 ] 
11:24:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:19: [ SetBusWidth(0x4) , Command count = 2253 ] 
11:24:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2254 ] 
11:24:19: Protected Area Size 0x28000
11:24:19: Bus Width           2
11:24:19: Secure Mode         0
11:24:19: Speed  Class        4
11:24:19: Perf Move           0
11:24:19: Au Size             9
11:24:19: Erase Size          15
11:24:19: Erase Timeout       1
11:24:19: Erase offset        1
11:24:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2255 ] 
11:24:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:19: Host Frequency set to 100000 KHz
11:24:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:19: ####CSD Registe 2.0 Values####
11:24:19: CSD_STRUCTURE                                 :0x1
11:24:19: Reserv1                                       :0x0
11:24:19: Time Access 1 TAAC                            :0xe
11:24:19: Time Access 2 NSAC*100                        :0x0
11:24:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:19: Card Command Classess CCC                     :0x5b5
11:24:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:19: DSR(driver stage register)  DSR_IMP           :0x0
11:24:19: Reserv2                                       :0x0
11:24:19: Device Size C_SIZE                            :0xedc8
11:24:19: Reserv3                                       :0x0
11:24:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:19: Reserv4                                       :0x0
11:24:19: Write Speed Factor R2W_FACTOR                 :0x2
11:24:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:19: FILE_FORMAT_GRP                               :0x0
11:24:19: COPY flag                                     :0x1
11:24:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:19: File_Format                                   :0x0
11:24:19: CRC                                           :0x0
11:24:19: ####CSD Registe Values####  

11:24:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x06276AE0>) , Command count = 2256 ] 
11:24:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x06273210>) , Command count = 2257 ] 
11:24:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DC90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273510>, <py_sfcl.PySEnhancedCmdData object at 0x062737E0>, <None>, <py_sfcl.Command23 object at 0x06273390>) , Command count = 2258 ] 
11:24:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:19: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:21: Host Frequency set to 25000 KHz
11:24:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x062765D0>, 0x0, True) , Command count = 2259 ] 
11:24:21: [GO18_globalSetVolt]### Host voltage value is set.
11:24:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276930>, 0x0, False) , Command count = 2260 ] 
11:24:22: [GO18_globalSetVolt]### Host voltage value is set.
11:24:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2261 ] 
11:24:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2262 ] 
11:24:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2263 ] 
11:24:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A180>, <py_sfcl.CommandDataDefinition object at 0x06273E40>) , Command count = 2264 ] 
11:24:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D0C0>, <py_sfcl.CommandDataDefinition object at 0x06273BD0>) , Command count = 2265 ] 
11:24:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2266 ] 
11:24:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:22: Host Frequency set to 25000 KHz
11:24:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:22: ####CSD Registe 2.0 Values####
11:24:22: CSD_STRUCTURE                                 :0x1
11:24:22: Reserv1                                       :0x0
11:24:22: Time Access 1 TAAC                            :0xe
11:24:22: Time Access 2 NSAC*100                        :0x0
11:24:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:22: Card Command Classess CCC                     :0x5b5
11:24:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:22: DSR(driver stage register)  DSR_IMP           :0x0
11:24:22: Reserv2                                       :0x0
11:24:22: Device Size C_SIZE                            :0xedc8
11:24:22: Reserv3                                       :0x0
11:24:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:22: Reserv4                                       :0x0
11:24:22: Write Speed Factor R2W_FACTOR                 :0x2
11:24:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:22: FILE_FORMAT_GRP                               :0x0
11:24:22: COPY flag                                     :0x1
11:24:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:22: File_Format                                   :0x0
11:24:22: CRC                                           :0x0
11:24:22: ####CSD Registe Values####  

11:24:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:22: [GetSCRRegisterEntry] Passed
11:24:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:22: Data_Status_After Erases          : 0
11:24:22: CPRM Security Support             : No Security
11:24:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:22: Spec. Version                     : Version 3.0X
11:24:22: Extended Security Support         : Extended_Security_Not_Supported
11:24:22: Command Support                   : COMMAND_SUPPORT
11:24:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269EA0>, <py_sfcl.CommandDataDefinition object at 0x0627A480>) , Command count = 2267 ] 
11:24:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D240>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 2268 ] 
11:24:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:22: [ SetBusWidth(0x4) , Command count = 2269 ] 
11:24:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2270 ] 
11:24:22: Protected Area Size 0x28000
11:24:22: Bus Width           2
11:24:22: Secure Mode         0
11:24:22: Speed  Class        4
11:24:22: Perf Move           0
11:24:22: Au Size             9
11:24:22: Erase Size          15
11:24:22: Erase Timeout       1
11:24:22: Erase offset        1
11:24:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2271 ] 
11:24:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:22: Host Frequency set to 100000 KHz
11:24:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:22: ####CSD Registe 2.0 Values####
11:24:22: CSD_STRUCTURE                                 :0x1
11:24:22: Reserv1                                       :0x0
11:24:22: Time Access 1 TAAC                            :0xe
11:24:22: Time Access 2 NSAC*100                        :0x0
11:24:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:22: Card Command Classess CCC                     :0x5b5
11:24:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:22: DSR(driver stage register)  DSR_IMP           :0x0
11:24:22: Reserv2                                       :0x0
11:24:22: Device Size C_SIZE                            :0xedc8
11:24:22: Reserv3                                       :0x0
11:24:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:22: Reserv4                                       :0x0
11:24:22: Write Speed Factor R2W_FACTOR                 :0x2
11:24:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:22: FILE_FORMAT_GRP                               :0x0
11:24:22: COPY flag                                     :0x1
11:24:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:22: File_Format                                   :0x0
11:24:22: CRC                                           :0x0
11:24:22: ####CSD Registe Values####  

11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB10>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 2272 ] 
11:24:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06276810>) , Command count = 2273 ] 
11:24:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DD20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06276150>, <None>, <py_sfcl.Command23 object at 0x06273840>) , Command count = 2274 ] 
11:24:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:25: Host Frequency set to 25000 KHz
11:24:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276DB0>, 0x0, True) , Command count = 2275 ] 
11:24:25: [GO18_globalSetVolt]### Host voltage value is set.
11:24:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x062767B0>, 0x0, False) , Command count = 2276 ] 
11:24:25: [GO18_globalSetVolt]### Host voltage value is set.
11:24:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2277 ] 
11:24:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2278 ] 
11:24:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2279 ] 
11:24:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276120>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 2280 ] 
11:24:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC30>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 2281 ] 
11:24:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:25: [ SetCardRCA(0x1, 0xD555) , Command count = 2282 ] 
11:24:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:25: Host Frequency set to 25000 KHz
11:24:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:25: ####CSD Registe 2.0 Values####
11:24:25: CSD_STRUCTURE                                 :0x1
11:24:25: Reserv1                                       :0x0
11:24:25: Time Access 1 TAAC                            :0xe
11:24:25: Time Access 2 NSAC*100                        :0x0
11:24:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:25: Card Command Classess CCC                     :0x5b5
11:24:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:25: DSR(driver stage register)  DSR_IMP           :0x0
11:24:25: Reserv2                                       :0x0
11:24:25: Device Size C_SIZE                            :0xedc8
11:24:25: Reserv3                                       :0x0
11:24:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:25: Reserv4                                       :0x0
11:24:25: Write Speed Factor R2W_FACTOR                 :0x2
11:24:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:25: FILE_FORMAT_GRP                               :0x0
11:24:25: COPY flag                                     :0x1
11:24:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:25: File_Format                                   :0x0
11:24:25: CRC                                           :0x0
11:24:25: ####CSD Registe Values####  

11:24:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:25: [GetSCRRegisterEntry] Passed
11:24:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:25: Data_Status_After Erases          : 0
11:24:25: CPRM Security Support             : No Security
11:24:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:25: Spec. Version                     : Version 3.0X
11:24:25: Extended Security Support         : Extended_Security_Not_Supported
11:24:25: Command Support                   : COMMAND_SUPPORT
11:24:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06276870>) , Command count = 2283 ] 
11:24:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D80>, <py_sfcl.CommandDataDefinition object at 0x06269330>) , Command count = 2284 ] 
11:24:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:25: [ SetBusWidth(0x4) , Command count = 2285 ] 
11:24:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2286 ] 
11:24:25: Protected Area Size 0x28000
11:24:25: Bus Width           2
11:24:25: Secure Mode         0
11:24:25: Speed  Class        4
11:24:25: Perf Move           0
11:24:25: Au Size             9
11:24:25: Erase Size          15
11:24:25: Erase Timeout       1
11:24:25: Erase offset        1
11:24:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2287 ] 
11:24:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:25: Host Frequency set to 100000 KHz
11:24:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:25: ####CSD Registe 2.0 Values####
11:24:25: CSD_STRUCTURE                                 :0x1
11:24:26: Reserv1                                       :0x0
11:24:26: Time Access 1 TAAC                            :0xe
11:24:26: Time Access 2 NSAC*100                        :0x0
11:24:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:26: Card Command Classess CCC                     :0x5b5
11:24:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:26: DSR(driver stage register)  DSR_IMP           :0x0
11:24:26: Reserv2                                       :0x0
11:24:26: Device Size C_SIZE                            :0xedc8
11:24:26: Reserv3                                       :0x0
11:24:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:26: Reserv4                                       :0x0
11:24:26: Write Speed Factor R2W_FACTOR                 :0x2
11:24:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:26: FILE_FORMAT_GRP                               :0x0
11:24:26: COPY flag                                     :0x1
11:24:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:26: File_Format                                   :0x0
11:24:26: CRC                                           :0x0
11:24:26: ####CSD Registe Values####  

11:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062763F0>, <py_sfcl.CommandDataDefinition object at 0x06273540>) , Command count = 2288 ] 
11:24:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA80>, <py_sfcl.CommandDataDefinition object at 0x0627A420>) , Command count = 2289 ] 
11:24:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A090>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x06276390>) , Command count = 2290 ] 
11:24:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:28: Host Frequency set to 25000 KHz
11:24:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276720>, 0x0, True) , Command count = 2291 ] 
11:24:28: [GO18_globalSetVolt]### Host voltage value is set.
11:24:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1E0>, 0x0, False) , Command count = 2292 ] 
11:24:28: [GO18_globalSetVolt]### Host voltage value is set.
11:24:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2293 ] 
11:24:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2294 ] 
11:24:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2295 ] 
11:24:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CAE70>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 2296 ] 
11:24:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276990>, <py_sfcl.CommandDataDefinition object at 0x0627A360>) , Command count = 2297 ] 
11:24:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2298 ] 
11:24:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:29: Host Frequency set to 25000 KHz
11:24:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:29: ####CSD Registe 2.0 Values####
11:24:29: CSD_STRUCTURE                                 :0x1
11:24:29: Reserv1                                       :0x0
11:24:29: Time Access 1 TAAC                            :0xe
11:24:29: Time Access 2 NSAC*100                        :0x0
11:24:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:29: Card Command Classess CCC                     :0x5b5
11:24:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:29: DSR(driver stage register)  DSR_IMP           :0x0
11:24:29: Reserv2                                       :0x0
11:24:29: Device Size C_SIZE                            :0xedc8
11:24:29: Reserv3                                       :0x0
11:24:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:29: Reserv4                                       :0x0
11:24:29: Write Speed Factor R2W_FACTOR                 :0x2
11:24:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:29: FILE_FORMAT_GRP                               :0x0
11:24:29: COPY flag                                     :0x1
11:24:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:29: File_Format                                   :0x0
11:24:29: CRC                                           :0x0
11:24:29: ####CSD Registe Values####  

11:24:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:29: [GetSCRRegisterEntry] Passed
11:24:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:29: Data_Status_After Erases          : 0
11:24:29: CPRM Security Support             : No Security
11:24:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:29: Spec. Version                     : Version 3.0X
11:24:29: Extended Security Support         : Extended_Security_Not_Supported
11:24:29: Command Support                   : COMMAND_SUPPORT
11:24:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB40>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 2299 ] 
11:24:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x0627DB10>) , Command count = 2300 ] 
11:24:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:29: [ SetBusWidth(0x4) , Command count = 2301 ] 
11:24:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2302 ] 
11:24:29: Protected Area Size 0x28000
11:24:29: Bus Width           2
11:24:29: Secure Mode         0
11:24:29: Speed  Class        4
11:24:29: Perf Move           0
11:24:29: Au Size             9
11:24:29: Erase Size          15
11:24:29: Erase Timeout       1
11:24:29: Erase offset        1
11:24:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2303 ] 
11:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:29: Host Frequency set to 100000 KHz
11:24:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:29: ####CSD Registe 2.0 Values####
11:24:29: CSD_STRUCTURE                                 :0x1
11:24:29: Reserv1                                       :0x0
11:24:29: Time Access 1 TAAC                            :0xe
11:24:29: Time Access 2 NSAC*100                        :0x0
11:24:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:29: Card Command Classess CCC                     :0x5b5
11:24:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:29: DSR(driver stage register)  DSR_IMP           :0x0
11:24:29: Reserv2                                       :0x0
11:24:29: Device Size C_SIZE                            :0xedc8
11:24:29: Reserv3                                       :0x0
11:24:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:29: Reserv4                                       :0x0
11:24:29: Write Speed Factor R2W_FACTOR                 :0x2
11:24:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:29: FILE_FORMAT_GRP                               :0x0
11:24:29: COPY flag                                     :0x1
11:24:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:29: File_Format                                   :0x0
11:24:29: CRC                                           :0x0
11:24:29: ####CSD Registe Values####  

11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276EA0>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 2304 ] 
11:24:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C00>, <py_sfcl.CommandDataDefinition object at 0x0627A7E0>) , Command count = 2305 ] 
11:24:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A390>, <py_sfcl.PySEnhancedCmdData object at 0x0627A570>, <None>, <py_sfcl.Command23 object at 0x0627A4B0>) , Command count = 2306 ] 
11:24:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:32: Host Frequency set to 25000 KHz
11:24:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276DE0>, 0x0, True) , Command count = 2307 ] 
11:24:32: [GO18_globalSetVolt]### Host voltage value is set.
11:24:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C30>, 0x0, False) , Command count = 2308 ] 
11:24:32: [GO18_globalSetVolt]### Host voltage value is set.
11:24:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2309 ] 
11:24:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2310 ] 
11:24:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2311 ] 
11:24:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 2312 ] 
11:24:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 2313 ] 
11:24:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2314 ] 
11:24:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:32: Host Frequency set to 25000 KHz
11:24:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:32: ####CSD Registe 2.0 Values####
11:24:32: CSD_STRUCTURE                                 :0x1
11:24:32: Reserv1                                       :0x0
11:24:32: Time Access 1 TAAC                            :0xe
11:24:32: Time Access 2 NSAC*100                        :0x0
11:24:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:32: Card Command Classess CCC                     :0x5b5
11:24:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:32: DSR(driver stage register)  DSR_IMP           :0x0
11:24:32: Reserv2                                       :0x0
11:24:32: Device Size C_SIZE                            :0xedc8
11:24:32: Reserv3                                       :0x0
11:24:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:32: Reserv4                                       :0x0
11:24:32: Write Speed Factor R2W_FACTOR                 :0x2
11:24:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:32: FILE_FORMAT_GRP                               :0x0
11:24:32: COPY flag                                     :0x1
11:24:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:32: File_Format                                   :0x0
11:24:32: CRC                                           :0x0
11:24:32: ####CSD Registe Values####  

11:24:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:32: [GetSCRRegisterEntry] Passed
11:24:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:32: Data_Status_After Erases          : 0
11:24:32: CPRM Security Support             : No Security
11:24:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:32: Spec. Version                     : Version 3.0X
11:24:32: Extended Security Support         : Extended_Security_Not_Supported
11:24:32: Command Support                   : COMMAND_SUPPORT
11:24:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 2315 ] 
11:24:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627AB70>) , Command count = 2316 ] 
11:24:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:32: [ SetBusWidth(0x4) , Command count = 2317 ] 
11:24:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2318 ] 
11:24:32: Protected Area Size 0x28000
11:24:32: Bus Width           2
11:24:32: Secure Mode         0
11:24:32: Speed  Class        4
11:24:32: Perf Move           0
11:24:32: Au Size             9
11:24:32: Erase Size          15
11:24:32: Erase Timeout       1
11:24:32: Erase offset        1
11:24:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2319 ] 
11:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:32: Host Frequency set to 100000 KHz
11:24:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:32: ####CSD Registe 2.0 Values####
11:24:32: CSD_STRUCTURE                                 :0x1
11:24:33: Reserv1                                       :0x0
11:24:33: Time Access 1 TAAC                            :0xe
11:24:33: Time Access 2 NSAC*100                        :0x0
11:24:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:33: Card Command Classess CCC                     :0x5b5
11:24:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:33: DSR(driver stage register)  DSR_IMP           :0x0
11:24:33: Reserv2                                       :0x0
11:24:33: Device Size C_SIZE                            :0xedc8
11:24:33: Reserv3                                       :0x0
11:24:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:33: Reserv4                                       :0x0
11:24:33: Write Speed Factor R2W_FACTOR                 :0x2
11:24:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:33: FILE_FORMAT_GRP                               :0x0
11:24:33: COPY flag                                     :0x1
11:24:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:33: File_Format                                   :0x0
11:24:33: CRC                                           :0x0
11:24:33: ####CSD Registe Values####  

11:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 2320 ] 
11:24:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC00>, <py_sfcl.CommandDataDefinition object at 0x0627A990>) , Command count = 2321 ] 
11:24:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A510>, <py_sfcl.PySEnhancedCmdData object at 0x0627ABA0>, <None>, <py_sfcl.Command23 object at 0x0627A9C0>) , Command count = 2322 ] 
11:24:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:33: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:35: Host Frequency set to 25000 KHz
11:24:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:35: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E70>, 0x0, True) , Command count = 2323 ] 
11:24:35: [GO18_globalSetVolt]### Host voltage value is set.
11:24:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF7B0>, 0x0, False) , Command count = 2324 ] 
11:24:35: [GO18_globalSetVolt]### Host voltage value is set.
11:24:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2325 ] 
11:24:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2326 ] 
11:24:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2327 ] 
11:24:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627D420>) , Command count = 2328 ] 
11:24:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5A0>, <py_sfcl.CommandDataDefinition object at 0x0627A9F0>) , Command count = 2329 ] 
11:24:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2330 ] 
11:24:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:36: Host Frequency set to 25000 KHz
11:24:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:36: ####CSD Registe 2.0 Values####
11:24:36: CSD_STRUCTURE                                 :0x1
11:24:36: Reserv1                                       :0x0
11:24:36: Time Access 1 TAAC                            :0xe
11:24:36: Time Access 2 NSAC*100                        :0x0
11:24:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:36: Card Command Classess CCC                     :0x5b5
11:24:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:36: DSR(driver stage register)  DSR_IMP           :0x0
11:24:36: Reserv2                                       :0x0
11:24:36: Device Size C_SIZE                            :0xedc8
11:24:36: Reserv3                                       :0x0
11:24:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:36: Reserv4                                       :0x0
11:24:36: Write Speed Factor R2W_FACTOR                 :0x2
11:24:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:36: FILE_FORMAT_GRP                               :0x0
11:24:36: COPY flag                                     :0x1
11:24:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:36: File_Format                                   :0x0
11:24:36: CRC                                           :0x0
11:24:36: ####CSD Registe Values####  

11:24:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:36: [GetSCRRegisterEntry] Passed
11:24:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:36: Data_Status_After Erases          : 0
11:24:36: CPRM Security Support             : No Security
11:24:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:36: Spec. Version                     : Version 3.0X
11:24:36: Extended Security Support         : Extended_Security_Not_Supported
11:24:36: Command Support                   : COMMAND_SUPPORT
11:24:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 2331 ] 
11:24:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 2332 ] 
11:24:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:36: [ SetBusWidth(0x4) , Command count = 2333 ] 
11:24:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2334 ] 
11:24:36: Protected Area Size 0x28000
11:24:36: Bus Width           2
11:24:36: Secure Mode         0
11:24:36: Speed  Class        4
11:24:36: Perf Move           0
11:24:36: Au Size             9
11:24:36: Erase Size          15
11:24:36: Erase Timeout       1
11:24:36: Erase offset        1
11:24:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2335 ] 
11:24:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:36: Host Frequency set to 100000 KHz
11:24:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:36: ####CSD Registe 2.0 Values####
11:24:36: CSD_STRUCTURE                                 :0x1
11:24:36: Reserv1                                       :0x0
11:24:36: Time Access 1 TAAC                            :0xe
11:24:36: Time Access 2 NSAC*100                        :0x0
11:24:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:36: Card Command Classess CCC                     :0x5b5
11:24:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:36: DSR(driver stage register)  DSR_IMP           :0x0
11:24:36: Reserv2                                       :0x0
11:24:36: Device Size C_SIZE                            :0xedc8
11:24:36: Reserv3                                       :0x0
11:24:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:36: Reserv4                                       :0x0
11:24:36: Write Speed Factor R2W_FACTOR                 :0x2
11:24:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:36: FILE_FORMAT_GRP                               :0x0
11:24:36: COPY flag                                     :0x1
11:24:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:36: File_Format                                   :0x0
11:24:36: CRC                                           :0x0
11:24:36: ####CSD Registe Values####  

11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 2336 ] 
11:24:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 2337 ] 
11:24:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF30>, <py_sfcl.PySEnhancedCmdData object at 0x0627AF60>, <None>, <py_sfcl.Command23 object at 0x0627A7B0>) , Command count = 2338 ] 
11:24:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:39: Host Frequency set to 25000 KHz
11:24:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:39: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EDED0>, 0x0, True) , Command count = 2339 ] 
11:24:39: [GO18_globalSetVolt]### Host voltage value is set.
11:24:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268030>, 0x0, False) , Command count = 2340 ] 
11:24:39: [GO18_globalSetVolt]### Host voltage value is set.
11:24:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2341 ] 
11:24:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2342 ] 
11:24:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2343 ] 
11:24:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x06216600>) , Command count = 2344 ] 
11:24:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AF00>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 2345 ] 
11:24:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:39: [ SetCardRCA(0x1, 0xD555) , Command count = 2346 ] 
11:24:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:39: Host Frequency set to 25000 KHz
11:24:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:39: ####CSD Registe 2.0 Values####
11:24:39: CSD_STRUCTURE                                 :0x1
11:24:39: Reserv1                                       :0x0
11:24:39: Time Access 1 TAAC                            :0xe
11:24:39: Time Access 2 NSAC*100                        :0x0
11:24:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:39: Card Command Classess CCC                     :0x5b5
11:24:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:39: DSR(driver stage register)  DSR_IMP           :0x0
11:24:39: Reserv2                                       :0x0
11:24:39: Device Size C_SIZE                            :0xedc8
11:24:39: Reserv3                                       :0x0
11:24:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:39: Reserv4                                       :0x0
11:24:39: Write Speed Factor R2W_FACTOR                 :0x2
11:24:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:39: FILE_FORMAT_GRP                               :0x0
11:24:39: COPY flag                                     :0x1
11:24:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:39: File_Format                                   :0x0
11:24:39: CRC                                           :0x0
11:24:39: ####CSD Registe Values####  

11:24:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:39: [GetSCRRegisterEntry] Passed
11:24:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:39: Data_Status_After Erases          : 0
11:24:39: CPRM Security Support             : No Security
11:24:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:39: Spec. Version                     : Version 3.0X
11:24:39: Extended Security Support         : Extended_Security_Not_Supported
11:24:39: Command Support                   : COMMAND_SUPPORT
11:24:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x053FB930>) , Command count = 2347 ] 
11:24:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 2348 ] 
11:24:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:39: [ SetBusWidth(0x4) , Command count = 2349 ] 
11:24:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2350 ] 
11:24:39: Protected Area Size 0x28000
11:24:39: Bus Width           2
11:24:39: Secure Mode         0
11:24:39: Speed  Class        4
11:24:39: Perf Move           0
11:24:39: Au Size             9
11:24:39: Erase Size          15
11:24:39: Erase Timeout       1
11:24:39: Erase offset        1
11:24:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2351 ] 
11:24:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:39: Host Frequency set to 100000 KHz
11:24:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:39: ####CSD Registe 2.0 Values####
11:24:39: CSD_STRUCTURE                                 :0x1
11:24:39: Reserv1                                       :0x0
11:24:39: Time Access 1 TAAC                            :0xe
11:24:39: Time Access 2 NSAC*100                        :0x0
11:24:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:39: Card Command Classess CCC                     :0x5b5
11:24:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:39: DSR(driver stage register)  DSR_IMP           :0x0
11:24:39: Reserv2                                       :0x0
11:24:39: Device Size C_SIZE                            :0xedc8
11:24:39: Reserv3                                       :0x0
11:24:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:40: Reserv4                                       :0x0
11:24:40: Write Speed Factor R2W_FACTOR                 :0x2
11:24:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:40: FILE_FORMAT_GRP                               :0x0
11:24:40: COPY flag                                     :0x1
11:24:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:40: File_Format                                   :0x0
11:24:40: CRC                                           :0x0
11:24:40: ####CSD Registe Values####  

11:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D930>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 2352 ] 
11:24:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x06273F00>) , Command count = 2353 ] 
11:24:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A300>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x0627A660>) , Command count = 2354 ] 
11:24:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:42: Host Frequency set to 25000 KHz
11:24:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x054019F0>, 0x0, True) , Command count = 2355 ] 
11:24:42: [GO18_globalSetVolt]### Host voltage value is set.
11:24:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216810>, 0x0, False) , Command count = 2356 ] 
11:24:42: [GO18_globalSetVolt]### Host voltage value is set.
11:24:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2357 ] 
11:24:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2358 ] 
11:24:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2359 ] 
11:24:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 2360 ] 
11:24:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x0627D4E0>) , Command count = 2361 ] 
11:24:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:42: [ SetCardRCA(0x1, 0xD555) , Command count = 2362 ] 
11:24:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:43: Host Frequency set to 25000 KHz
11:24:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:43: ####CSD Registe 2.0 Values####
11:24:43: CSD_STRUCTURE                                 :0x1
11:24:43: Reserv1                                       :0x0
11:24:43: Time Access 1 TAAC                            :0xe
11:24:43: Time Access 2 NSAC*100                        :0x0
11:24:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:43: Card Command Classess CCC                     :0x5b5
11:24:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:43: DSR(driver stage register)  DSR_IMP           :0x0
11:24:43: Reserv2                                       :0x0
11:24:43: Device Size C_SIZE                            :0xedc8
11:24:43: Reserv3                                       :0x0
11:24:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:43: Reserv4                                       :0x0
11:24:43: Write Speed Factor R2W_FACTOR                 :0x2
11:24:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:43: FILE_FORMAT_GRP                               :0x0
11:24:43: COPY flag                                     :0x1
11:24:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:43: File_Format                                   :0x0
11:24:43: CRC                                           :0x0
11:24:43: ####CSD Registe Values####  

11:24:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:43: [GetSCRRegisterEntry] Passed
11:24:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:43: Data_Status_After Erases          : 0
11:24:43: CPRM Security Support             : No Security
11:24:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:43: Spec. Version                     : Version 3.0X
11:24:43: Extended Security Support         : Extended_Security_Not_Supported
11:24:43: Command Support                   : COMMAND_SUPPORT
11:24:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 2363 ] 
11:24:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 2364 ] 
11:24:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:43: [ SetBusWidth(0x4) , Command count = 2365 ] 
11:24:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2366 ] 
11:24:43: Protected Area Size 0x28000
11:24:43: Bus Width           2
11:24:43: Secure Mode         0
11:24:43: Speed  Class        4
11:24:43: Perf Move           0
11:24:43: Au Size             9
11:24:43: Erase Size          15
11:24:43: Erase Timeout       1
11:24:43: Erase offset        1
11:24:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2367 ] 
11:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:43: Host Frequency set to 100000 KHz
11:24:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:43: ####CSD Registe 2.0 Values####
11:24:43: CSD_STRUCTURE                                 :0x1
11:24:43: Reserv1                                       :0x0
11:24:43: Time Access 1 TAAC                            :0xe
11:24:43: Time Access 2 NSAC*100                        :0x0
11:24:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:43: Card Command Classess CCC                     :0x5b5
11:24:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:43: DSR(driver stage register)  DSR_IMP           :0x0
11:24:43: Reserv2                                       :0x0
11:24:43: Device Size C_SIZE                            :0xedc8
11:24:43: Reserv3                                       :0x0
11:24:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:43: Reserv4                                       :0x0
11:24:43: Write Speed Factor R2W_FACTOR                 :0x2
11:24:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:43: FILE_FORMAT_GRP                               :0x0
11:24:43: COPY flag                                     :0x1
11:24:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:43: File_Format                                   :0x0
11:24:43: CRC                                           :0x0
11:24:43: ####CSD Registe Values####  

11:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 2368 ] 
11:24:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE70>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 2369 ] 
11:24:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D210>, <py_sfcl.PySEnhancedCmdData object at 0x062800C0>, <None>, <py_sfcl.Command23 object at 0x062801E0>) , Command count = 2370 ] 
11:24:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:46: Host Frequency set to 25000 KHz
11:24:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:46: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF030>, 0x0, True) , Command count = 2371 ] 
11:24:46: [GO18_globalSetVolt]### Host voltage value is set.
11:24:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269270>, 0x0, False) , Command count = 2372 ] 
11:24:46: [GO18_globalSetVolt]### Host voltage value is set.
11:24:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2373 ] 
11:24:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2374 ] 
11:24:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2375 ] 
11:24:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x0627D540>) , Command count = 2376 ] 
11:24:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D0F0>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 2377 ] 
11:24:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2378 ] 
11:24:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:46: Host Frequency set to 25000 KHz
11:24:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:46: ####CSD Registe 2.0 Values####
11:24:46: CSD_STRUCTURE                                 :0x1
11:24:46: Reserv1                                       :0x0
11:24:46: Time Access 1 TAAC                            :0xe
11:24:46: Time Access 2 NSAC*100                        :0x0
11:24:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:46: Card Command Classess CCC                     :0x5b5
11:24:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:46: DSR(driver stage register)  DSR_IMP           :0x0
11:24:46: Reserv2                                       :0x0
11:24:46: Device Size C_SIZE                            :0xedc8
11:24:46: Reserv3                                       :0x0
11:24:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:46: Reserv4                                       :0x0
11:24:46: Write Speed Factor R2W_FACTOR                 :0x2
11:24:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:46: FILE_FORMAT_GRP                               :0x0
11:24:46: COPY flag                                     :0x1
11:24:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:46: File_Format                                   :0x0
11:24:46: CRC                                           :0x0
11:24:46: ####CSD Registe Values####  

11:24:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:46: [GetSCRRegisterEntry] Passed
11:24:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:46: Data_Status_After Erases          : 0
11:24:46: CPRM Security Support             : No Security
11:24:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:46: Spec. Version                     : Version 3.0X
11:24:46: Extended Security Support         : Extended_Security_Not_Supported
11:24:46: Command Support                   : COMMAND_SUPPORT
11:24:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D240>, <py_sfcl.CommandDataDefinition object at 0x0627D120>) , Command count = 2379 ] 
11:24:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3F0>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 2380 ] 
11:24:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:46: [ SetBusWidth(0x4) , Command count = 2381 ] 
11:24:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2382 ] 
11:24:46: Protected Area Size 0x28000
11:24:46: Bus Width           2
11:24:46: Secure Mode         0
11:24:46: Speed  Class        4
11:24:46: Perf Move           0
11:24:46: Au Size             9
11:24:46: Erase Size          15
11:24:46: Erase Timeout       1
11:24:46: Erase offset        1
11:24:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2383 ] 
11:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:46: Host Frequency set to 100000 KHz
11:24:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:46: ####CSD Registe 2.0 Values####
11:24:46: CSD_STRUCTURE                                 :0x1
11:24:46: Reserv1                                       :0x0
11:24:46: Time Access 1 TAAC                            :0xe
11:24:46: Time Access 2 NSAC*100                        :0x0
11:24:46: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:46: Card Command Classess CCC                     :0x5b5
11:24:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:46: DSR(driver stage register)  DSR_IMP           :0x0
11:24:46: Reserv2                                       :0x0
11:24:46: Device Size C_SIZE                            :0xedc8
11:24:46: Reserv3                                       :0x0
11:24:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:47: Reserv4                                       :0x0
11:24:47: Write Speed Factor R2W_FACTOR                 :0x2
11:24:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:47: FILE_FORMAT_GRP                               :0x0
11:24:47: COPY flag                                     :0x1
11:24:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:47: File_Format                                   :0x0
11:24:47: CRC                                           :0x0
11:24:47: ####CSD Registe Values####  

11:24:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D480>, <py_sfcl.CommandDataDefinition object at 0x06268A20>) , Command count = 2384 ] 
11:24:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 2385 ] 
11:24:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DDE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062688D0>, <py_sfcl.PySEnhancedCmdData object at 0x062683C0>, <None>, <py_sfcl.Command23 object at 0x06268840>) , Command count = 2386 ] 
11:24:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:49: Host Frequency set to 25000 KHz
11:24:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216FC0>, 0x0, True) , Command count = 2387 ] 
11:24:49: [GO18_globalSetVolt]### Host voltage value is set.
11:24:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273E10>, 0x0, False) , Command count = 2388 ] 
11:24:49: [GO18_globalSetVolt]### Host voltage value is set.
11:24:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2389 ] 
11:24:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2390 ] 
11:24:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2391 ] 
11:24:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x0626D060>) , Command count = 2392 ] 
11:24:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7E0>, <py_sfcl.CommandDataDefinition object at 0x0627DCC0>) , Command count = 2393 ] 
11:24:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2394 ] 
11:24:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:50: Host Frequency set to 25000 KHz
11:24:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:50: ####CSD Registe 2.0 Values####
11:24:50: CSD_STRUCTURE                                 :0x1
11:24:50: Reserv1                                       :0x0
11:24:50: Time Access 1 TAAC                            :0xe
11:24:50: Time Access 2 NSAC*100                        :0x0
11:24:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:50: Card Command Classess CCC                     :0x5b5
11:24:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:50: DSR(driver stage register)  DSR_IMP           :0x0
11:24:50: Reserv2                                       :0x0
11:24:50: Device Size C_SIZE                            :0xedc8
11:24:50: Reserv3                                       :0x0
11:24:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:50: Reserv4                                       :0x0
11:24:50: Write Speed Factor R2W_FACTOR                 :0x2
11:24:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:50: FILE_FORMAT_GRP                               :0x0
11:24:50: COPY flag                                     :0x1
11:24:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:50: File_Format                                   :0x0
11:24:50: CRC                                           :0x0
11:24:50: ####CSD Registe Values####  

11:24:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:50: [GetSCRRegisterEntry] Passed
11:24:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:50: Data_Status_After Erases          : 0
11:24:50: CPRM Security Support             : No Security
11:24:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:50: Spec. Version                     : Version 3.0X
11:24:50: Extended Security Support         : Extended_Security_Not_Supported
11:24:50: Command Support                   : COMMAND_SUPPORT
11:24:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x062686F0>) , Command count = 2395 ] 
11:24:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D390>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 2396 ] 
11:24:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:50: [ SetBusWidth(0x4) , Command count = 2397 ] 
11:24:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2398 ] 
11:24:50: Protected Area Size 0x28000
11:24:50: Bus Width           2
11:24:50: Secure Mode         0
11:24:50: Speed  Class        4
11:24:50: Perf Move           0
11:24:50: Au Size             9
11:24:50: Erase Size          15
11:24:50: Erase Timeout       1
11:24:50: Erase offset        1
11:24:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2399 ] 
11:24:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:50: Host Frequency set to 100000 KHz
11:24:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:50: ####CSD Registe 2.0 Values####
11:24:50: CSD_STRUCTURE                                 :0x1
11:24:50: Reserv1                                       :0x0
11:24:50: Time Access 1 TAAC                            :0xe
11:24:50: Time Access 2 NSAC*100                        :0x0
11:24:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:50: Card Command Classess CCC                     :0x5b5
11:24:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:50: DSR(driver stage register)  DSR_IMP           :0x0
11:24:50: Reserv2                                       :0x0
11:24:50: Device Size C_SIZE                            :0xedc8
11:24:50: Reserv3                                       :0x0
11:24:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:50: Reserv4                                       :0x0
11:24:50: Write Speed Factor R2W_FACTOR                 :0x2
11:24:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:50: FILE_FORMAT_GRP                               :0x0
11:24:50: COPY flag                                     :0x1
11:24:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:50: File_Format                                   :0x0
11:24:50: CRC                                           :0x0
11:24:50: ####CSD Registe Values####  

11:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x0626DF60>) , Command count = 2400 ] 
11:24:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x06268DE0>) , Command count = 2401 ] 
11:24:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x062687B0>, <None>, <py_sfcl.Command23 object at 0x06268480>) , Command count = 2402 ] 
11:24:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:50: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:53: Host Frequency set to 25000 KHz
11:24:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D810>, 0x0, True) , Command count = 2403 ] 
11:24:53: [GO18_globalSetVolt]### Host voltage value is set.
11:24:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D180>, 0x0, False) , Command count = 2404 ] 
11:24:53: [GO18_globalSetVolt]### Host voltage value is set.
11:24:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2405 ] 
11:24:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2406 ] 
11:24:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2407 ] 
11:24:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627DE70>) , Command count = 2408 ] 
11:24:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x06273780>) , Command count = 2409 ] 
11:24:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:53: [ SetCardRCA(0x1, 0xD555) , Command count = 2410 ] 
11:24:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:53: Host Frequency set to 25000 KHz
11:24:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:53: ####CSD Registe 2.0 Values####
11:24:53: CSD_STRUCTURE                                 :0x1
11:24:53: Reserv1                                       :0x0
11:24:53: Time Access 1 TAAC                            :0xe
11:24:53: Time Access 2 NSAC*100                        :0x0
11:24:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:53: Card Command Classess CCC                     :0x5b5
11:24:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:53: DSR(driver stage register)  DSR_IMP           :0x0
11:24:53: Reserv2                                       :0x0
11:24:53: Device Size C_SIZE                            :0xedc8
11:24:53: Reserv3                                       :0x0
11:24:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:53: Reserv4                                       :0x0
11:24:53: Write Speed Factor R2W_FACTOR                 :0x2
11:24:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:53: FILE_FORMAT_GRP                               :0x0
11:24:53: COPY flag                                     :0x1
11:24:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:53: File_Format                                   :0x0
11:24:53: CRC                                           :0x0
11:24:53: ####CSD Registe Values####  

11:24:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:53: [GetSCRRegisterEntry] Passed
11:24:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:53: Data_Status_After Erases          : 0
11:24:53: CPRM Security Support             : No Security
11:24:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:53: Spec. Version                     : Version 3.0X
11:24:53: Extended Security Support         : Extended_Security_Not_Supported
11:24:53: Command Support                   : COMMAND_SUPPORT
11:24:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268210>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 2411 ] 
11:24:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 2412 ] 
11:24:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:53: [ SetBusWidth(0x4) , Command count = 2413 ] 
11:24:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2414 ] 
11:24:53: Protected Area Size 0x28000
11:24:53: Bus Width           2
11:24:53: Secure Mode         0
11:24:53: Speed  Class        4
11:24:53: Perf Move           0
11:24:53: Au Size             9
11:24:53: Erase Size          15
11:24:53: Erase Timeout       1
11:24:53: Erase offset        1
11:24:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2415 ] 
11:24:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:53: Host Frequency set to 100000 KHz
11:24:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:53: ####CSD Registe 2.0 Values####
11:24:53: CSD_STRUCTURE                                 :0x1
11:24:53: Reserv1                                       :0x0
11:24:53: Time Access 1 TAAC                            :0xe
11:24:53: Time Access 2 NSAC*100                        :0x0
11:24:53: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:53: Card Command Classess CCC                     :0x5b5
11:24:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:53: DSR(driver stage register)  DSR_IMP           :0x0
11:24:53: Reserv2                                       :0x0
11:24:53: Device Size C_SIZE                            :0xedc8
11:24:53: Reserv3                                       :0x0
11:24:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:54: Reserv4                                       :0x0
11:24:54: Write Speed Factor R2W_FACTOR                 :0x2
11:24:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:54: FILE_FORMAT_GRP                               :0x0
11:24:54: COPY flag                                     :0x1
11:24:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:54: File_Format                                   :0x0
11:24:54: CRC                                           :0x0
11:24:54: ####CSD Registe Values####  

11:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764B0>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 2416 ] 
11:24:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D600>, <py_sfcl.CommandDataDefinition object at 0x06269C00>) , Command count = 2417 ] 
11:24:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269540>, <py_sfcl.PySEnhancedCmdData object at 0x062693C0>, <None>, <py_sfcl.Command23 object at 0x06268BA0>) , Command count = 2418 ] 
11:24:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:56: Host Frequency set to 25000 KHz
11:24:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273ED0>, 0x0, True) , Command count = 2419 ] 
11:24:56: [GO18_globalSetVolt]### Host voltage value is set.
11:24:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DFC0>, 0x0, False) , Command count = 2420 ] 
11:24:56: [GO18_globalSetVolt]### Host voltage value is set.
11:24:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2421 ] 
11:24:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:24:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2422 ] 
11:24:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:24:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:24:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:24:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:24:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:24:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2423 ] 
11:24:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:24:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:24:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B10>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 2424 ] 
11:24:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:24:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D50>, <py_sfcl.CommandDataDefinition object at 0x06273960>) , Command count = 2425 ] 
11:24:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:24:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2426 ] 
11:24:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:24:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:56: Host Frequency set to 25000 KHz
11:24:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:56: ####CSD Registe 2.0 Values####
11:24:56: CSD_STRUCTURE                                 :0x1
11:24:56: Reserv1                                       :0x0
11:24:56: Time Access 1 TAAC                            :0xe
11:24:56: Time Access 2 NSAC*100                        :0x0
11:24:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:24:56: Card Command Classess CCC                     :0x5b5
11:24:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:56: DSR(driver stage register)  DSR_IMP           :0x0
11:24:56: Reserv2                                       :0x0
11:24:56: Device Size C_SIZE                            :0xedc8
11:24:56: Reserv3                                       :0x0
11:24:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:56: Reserv4                                       :0x0
11:24:56: Write Speed Factor R2W_FACTOR                 :0x2
11:24:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:56: FILE_FORMAT_GRP                               :0x0
11:24:56: COPY flag                                     :0x1
11:24:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:56: File_Format                                   :0x0
11:24:56: CRC                                           :0x0
11:24:56: ####CSD Registe Values####  

11:24:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:24:56: [GetSCRRegisterEntry] Passed
11:24:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:24:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:24:56: Data_Status_After Erases          : 0
11:24:56: CPRM Security Support             : No Security
11:24:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:24:56: Spec. Version                     : Version 3.0X
11:24:56: Extended Security Support         : Extended_Security_Not_Supported
11:24:56: Command Support                   : COMMAND_SUPPORT
11:24:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:24:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268510>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 2427 ] 
11:24:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:24:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269780>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 2428 ] 
11:24:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:24:56: [ SetBusWidth(0x4) , Command count = 2429 ] 
11:24:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:24:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2430 ] 
11:24:56: Protected Area Size 0x28000
11:24:56: Bus Width           2
11:24:56: Secure Mode         0
11:24:56: Speed  Class        4
11:24:56: Perf Move           0
11:24:56: Au Size             9
11:24:56: Erase Size          15
11:24:56: Erase Timeout       1
11:24:56: Erase offset        1
11:24:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:24:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:24:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:24:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2431 ] 
11:24:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:24:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:24:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:24:57: Host Frequency set to 100000 KHz
11:24:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:24:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:24:57: ####CSD Registe 2.0 Values####
11:24:57: CSD_STRUCTURE                                 :0x1
11:24:57: Reserv1                                       :0x0
11:24:57: Time Access 1 TAAC                            :0xe
11:24:57: Time Access 2 NSAC*100                        :0x0
11:24:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:24:57: Card Command Classess CCC                     :0x5b5
11:24:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:24:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:24:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:24:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:24:57: DSR(driver stage register)  DSR_IMP           :0x0
11:24:57: Reserv2                                       :0x0
11:24:57: Device Size C_SIZE                            :0xedc8
11:24:57: Reserv3                                       :0x0
11:24:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:24:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:24:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:24:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:24:57: Reserv4                                       :0x0
11:24:57: Write Speed Factor R2W_FACTOR                 :0x2
11:24:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:24:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:24:57: FILE_FORMAT_GRP                               :0x0
11:24:57: COPY flag                                     :0x1
11:24:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:24:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:24:57: File_Format                                   :0x0
11:24:57: CRC                                           :0x0
11:24:57: ####CSD Registe Values####  

11:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 2432 ] 
11:24:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CF0>, <py_sfcl.CommandDataDefinition object at 0x0626D630>) , Command count = 2433 ] 
11:24:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:24:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:24:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:24:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:24:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD80>, <None>, <py_sfcl.Command23 object at 0x062698D0>) , Command count = 2434 ] 
11:24:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:24:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:24:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:24:59: Host Frequency set to 25000 KHz
11:24:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:24:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:24:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:24:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268660>, 0x0, True) , Command count = 2435 ] 
11:24:59: [GO18_globalSetVolt]### Host voltage value is set.
11:24:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:24:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x062691E0>, 0x0, False) , Command count = 2436 ] 
11:24:59: [GO18_globalSetVolt]### Host voltage value is set.
11:24:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2437 ] 
11:24:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2438 ] 
11:25:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2439 ] 
11:25:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x062696F0>) , Command count = 2440 ] 
11:25:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D090>, <py_sfcl.CommandDataDefinition object at 0x0626D690>) , Command count = 2441 ] 
11:25:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2442 ] 
11:25:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:00: Host Frequency set to 25000 KHz
11:25:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:00: ####CSD Registe 2.0 Values####
11:25:00: CSD_STRUCTURE                                 :0x1
11:25:00: Reserv1                                       :0x0
11:25:00: Time Access 1 TAAC                            :0xe
11:25:00: Time Access 2 NSAC*100                        :0x0
11:25:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:00: Card Command Classess CCC                     :0x5b5
11:25:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:00: DSR(driver stage register)  DSR_IMP           :0x0
11:25:00: Reserv2                                       :0x0
11:25:00: Device Size C_SIZE                            :0xedc8
11:25:00: Reserv3                                       :0x0
11:25:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:00: Reserv4                                       :0x0
11:25:00: Write Speed Factor R2W_FACTOR                 :0x2
11:25:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:00: FILE_FORMAT_GRP                               :0x0
11:25:00: COPY flag                                     :0x1
11:25:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:00: File_Format                                   :0x0
11:25:00: CRC                                           :0x0
11:25:00: ####CSD Registe Values####  

11:25:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:00: [GetSCRRegisterEntry] Passed
11:25:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:00: Data_Status_After Erases          : 0
11:25:00: CPRM Security Support             : No Security
11:25:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:00: Spec. Version                     : Version 3.0X
11:25:00: Extended Security Support         : Extended_Security_Not_Supported
11:25:00: Command Support                   : COMMAND_SUPPORT
11:25:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695D0>, <py_sfcl.CommandDataDefinition object at 0x0626D510>) , Command count = 2443 ] 
11:25:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BD0>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 2444 ] 
11:25:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:00: [ SetBusWidth(0x4) , Command count = 2445 ] 
11:25:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2446 ] 
11:25:00: Protected Area Size 0x28000
11:25:00: Bus Width           2
11:25:00: Secure Mode         0
11:25:00: Speed  Class        4
11:25:00: Perf Move           0
11:25:00: Au Size             9
11:25:00: Erase Size          15
11:25:00: Erase Timeout       1
11:25:00: Erase offset        1
11:25:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2447 ] 
11:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:00: Host Frequency set to 100000 KHz
11:25:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:00: ####CSD Registe 2.0 Values####
11:25:00: CSD_STRUCTURE                                 :0x1
11:25:00: Reserv1                                       :0x0
11:25:00: Time Access 1 TAAC                            :0xe
11:25:00: Time Access 2 NSAC*100                        :0x0
11:25:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:00: Card Command Classess CCC                     :0x5b5
11:25:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:00: DSR(driver stage register)  DSR_IMP           :0x0
11:25:00: Reserv2                                       :0x0
11:25:00: Device Size C_SIZE                            :0xedc8
11:25:00: Reserv3                                       :0x0
11:25:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:00: Reserv4                                       :0x0
11:25:00: Write Speed Factor R2W_FACTOR                 :0x2
11:25:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:00: FILE_FORMAT_GRP                               :0x0
11:25:00: COPY flag                                     :0x1
11:25:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:00: File_Format                                   :0x0
11:25:00: CRC                                           :0x0
11:25:00: ####CSD Registe Values####  

11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 2448 ] 
11:25:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x0626DB40>) , Command count = 2449 ] 
11:25:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062692A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DA20>, <None>, <py_sfcl.Command23 object at 0x0626DAB0>) , Command count = 2450 ] 
11:25:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:01: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:03: Host Frequency set to 25000 KHz
11:25:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AFC0>, 0x0, True) , Command count = 2451 ] 
11:25:03: [GO18_globalSetVolt]### Host voltage value is set.
11:25:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D5A0>, 0x0, False) , Command count = 2452 ] 
11:25:03: [GO18_globalSetVolt]### Host voltage value is set.
11:25:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2453 ] 
11:25:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2454 ] 
11:25:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2455 ] 
11:25:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A0F0>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 2456 ] 
11:25:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269030>, <py_sfcl.CommandDataDefinition object at 0x06273630>) , Command count = 2457 ] 
11:25:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2458 ] 
11:25:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:03: Host Frequency set to 25000 KHz
11:25:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:03: ####CSD Registe 2.0 Values####
11:25:03: CSD_STRUCTURE                                 :0x1
11:25:03: Reserv1                                       :0x0
11:25:03: Time Access 1 TAAC                            :0xe
11:25:03: Time Access 2 NSAC*100                        :0x0
11:25:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:03: Card Command Classess CCC                     :0x5b5
11:25:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:03: DSR(driver stage register)  DSR_IMP           :0x0
11:25:03: Reserv2                                       :0x0
11:25:03: Device Size C_SIZE                            :0xedc8
11:25:03: Reserv3                                       :0x0
11:25:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:03: Reserv4                                       :0x0
11:25:03: Write Speed Factor R2W_FACTOR                 :0x2
11:25:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:03: FILE_FORMAT_GRP                               :0x0
11:25:03: COPY flag                                     :0x1
11:25:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:03: File_Format                                   :0x0
11:25:03: CRC                                           :0x0
11:25:03: ####CSD Registe Values####  

11:25:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:03: [GetSCRRegisterEntry] Passed
11:25:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:03: Data_Status_After Erases          : 0
11:25:03: CPRM Security Support             : No Security
11:25:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:03: Spec. Version                     : Version 3.0X
11:25:03: Extended Security Support         : Extended_Security_Not_Supported
11:25:03: Command Support                   : COMMAND_SUPPORT
11:25:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 2459 ] 
11:25:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 2460 ] 
11:25:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:03: [ SetBusWidth(0x4) , Command count = 2461 ] 
11:25:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2462 ] 
11:25:03: Protected Area Size 0x28000
11:25:03: Bus Width           2
11:25:03: Secure Mode         0
11:25:03: Speed  Class        4
11:25:03: Perf Move           0
11:25:03: Au Size             9
11:25:03: Erase Size          15
11:25:03: Erase Timeout       1
11:25:03: Erase offset        1
11:25:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2463 ] 
11:25:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:03: Host Frequency set to 100000 KHz
11:25:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:04: ####CSD Registe 2.0 Values####
11:25:04: CSD_STRUCTURE                                 :0x1
11:25:04: Reserv1                                       :0x0
11:25:04: Time Access 1 TAAC                            :0xe
11:25:04: Time Access 2 NSAC*100                        :0x0
11:25:04: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:04: Card Command Classess CCC                     :0x5b5
11:25:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:04: DSR(driver stage register)  DSR_IMP           :0x0
11:25:04: Reserv2                                       :0x0
11:25:04: Device Size C_SIZE                            :0xedc8
11:25:04: Reserv3                                       :0x0
11:25:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:04: Reserv4                                       :0x0
11:25:04: Write Speed Factor R2W_FACTOR                 :0x2
11:25:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:04: FILE_FORMAT_GRP                               :0x0
11:25:04: COPY flag                                     :0x1
11:25:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:04: File_Format                                   :0x0
11:25:04: CRC                                           :0x0
11:25:04: ####CSD Registe Values####  

11:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 2464 ] 
11:25:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F60>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 2465 ] 
11:25:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D0F0>, <None>, <py_sfcl.Command23 object at 0x0626D570>) , Command count = 2466 ] 
11:25:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:06: Host Frequency set to 25000 KHz
11:25:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8A0>, 0x0, True) , Command count = 2467 ] 
11:25:06: [GO18_globalSetVolt]### Host voltage value is set.
11:25:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA50>, 0x0, False) , Command count = 2468 ] 
11:25:06: [GO18_globalSetVolt]### Host voltage value is set.
11:25:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2469 ] 
11:25:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2470 ] 
11:25:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2471 ] 
11:25:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269990>, <py_sfcl.CommandDataDefinition object at 0x0626D300>) , Command count = 2472 ] 
11:25:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269960>, <py_sfcl.CommandDataDefinition object at 0x06273D50>) , Command count = 2473 ] 
11:25:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2474 ] 
11:25:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:07: Host Frequency set to 25000 KHz
11:25:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:07: ####CSD Registe 2.0 Values####
11:25:07: CSD_STRUCTURE                                 :0x1
11:25:07: Reserv1                                       :0x0
11:25:07: Time Access 1 TAAC                            :0xe
11:25:07: Time Access 2 NSAC*100                        :0x0
11:25:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:07: Card Command Classess CCC                     :0x5b5
11:25:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:07: DSR(driver stage register)  DSR_IMP           :0x0
11:25:07: Reserv2                                       :0x0
11:25:07: Device Size C_SIZE                            :0xedc8
11:25:07: Reserv3                                       :0x0
11:25:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:07: Reserv4                                       :0x0
11:25:07: Write Speed Factor R2W_FACTOR                 :0x2
11:25:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:07: FILE_FORMAT_GRP                               :0x0
11:25:07: COPY flag                                     :0x1
11:25:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:07: File_Format                                   :0x0
11:25:07: CRC                                           :0x0
11:25:07: ####CSD Registe Values####  

11:25:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:07: [GetSCRRegisterEntry] Passed
11:25:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:07: Data_Status_After Erases          : 0
11:25:07: CPRM Security Support             : No Security
11:25:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:07: Spec. Version                     : Version 3.0X
11:25:07: Extended Security Support         : Extended_Security_Not_Supported
11:25:07: Command Support                   : COMMAND_SUPPORT
11:25:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7E0>, <py_sfcl.CommandDataDefinition object at 0x06273AB0>) , Command count = 2475 ] 
11:25:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DE0>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 2476 ] 
11:25:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:07: [ SetBusWidth(0x4) , Command count = 2477 ] 
11:25:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2478 ] 
11:25:07: Protected Area Size 0x28000
11:25:07: Bus Width           2
11:25:07: Secure Mode         0
11:25:07: Speed  Class        4
11:25:07: Perf Move           0
11:25:07: Au Size             9
11:25:07: Erase Size          15
11:25:07: Erase Timeout       1
11:25:07: Erase offset        1
11:25:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2479 ] 
11:25:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:07: Host Frequency set to 100000 KHz
11:25:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:07: ####CSD Registe 2.0 Values####
11:25:07: CSD_STRUCTURE                                 :0x1
11:25:07: Reserv1                                       :0x0
11:25:07: Time Access 1 TAAC                            :0xe
11:25:07: Time Access 2 NSAC*100                        :0x0
11:25:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:07: Card Command Classess CCC                     :0x5b5
11:25:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:07: DSR(driver stage register)  DSR_IMP           :0x0
11:25:07: Reserv2                                       :0x0
11:25:07: Device Size C_SIZE                            :0xedc8
11:25:07: Reserv3                                       :0x0
11:25:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:07: Reserv4                                       :0x0
11:25:07: Write Speed Factor R2W_FACTOR                 :0x2
11:25:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:07: FILE_FORMAT_GRP                               :0x0
11:25:07: COPY flag                                     :0x1
11:25:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:07: File_Format                                   :0x0
11:25:07: CRC                                           :0x0
11:25:07: ####CSD Registe Values####  

11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626DBA0>) , Command count = 2480 ] 
11:25:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE10>, <py_sfcl.CommandDataDefinition object at 0x06273480>) , Command count = 2481 ] 
11:25:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062762A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273EA0>, <py_sfcl.PySEnhancedCmdData object at 0x062734E0>, <None>, <py_sfcl.Command23 object at 0x0626D780>) , Command count = 2482 ] 
11:25:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:10: Host Frequency set to 25000 KHz
11:25:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8D0>, 0x0, True) , Command count = 2483 ] 
11:25:10: [GO18_globalSetVolt]### Host voltage value is set.
11:25:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DF30>, 0x0, False) , Command count = 2484 ] 
11:25:10: [GO18_globalSetVolt]### Host voltage value is set.
11:25:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2485 ] 
11:25:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2486 ] 
11:25:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2487 ] 
11:25:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 2488 ] 
11:25:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x062732A0>) , Command count = 2489 ] 
11:25:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2490 ] 
11:25:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:10: Host Frequency set to 25000 KHz
11:25:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:10: ####CSD Registe 2.0 Values####
11:25:10: CSD_STRUCTURE                                 :0x1
11:25:10: Reserv1                                       :0x0
11:25:10: Time Access 1 TAAC                            :0xe
11:25:10: Time Access 2 NSAC*100                        :0x0
11:25:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:10: Card Command Classess CCC                     :0x5b5
11:25:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:10: DSR(driver stage register)  DSR_IMP           :0x0
11:25:10: Reserv2                                       :0x0
11:25:10: Device Size C_SIZE                            :0xedc8
11:25:10: Reserv3                                       :0x0
11:25:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:10: Reserv4                                       :0x0
11:25:10: Write Speed Factor R2W_FACTOR                 :0x2
11:25:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:10: FILE_FORMAT_GRP                               :0x0
11:25:10: COPY flag                                     :0x1
11:25:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:10: File_Format                                   :0x0
11:25:10: CRC                                           :0x0
11:25:10: ####CSD Registe Values####  

11:25:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:10: [GetSCRRegisterEntry] Passed
11:25:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:10: Data_Status_After Erases          : 0
11:25:10: CPRM Security Support             : No Security
11:25:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:10: Spec. Version                     : Version 3.0X
11:25:10: Extended Security Support         : Extended_Security_Not_Supported
11:25:10: Command Support                   : COMMAND_SUPPORT
11:25:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A20>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 2491 ] 
11:25:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 2492 ] 
11:25:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:10: [ SetBusWidth(0x4) , Command count = 2493 ] 
11:25:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062762D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2494 ] 
11:25:10: Protected Area Size 0x28000
11:25:10: Bus Width           2
11:25:10: Secure Mode         0
11:25:10: Speed  Class        4
11:25:10: Perf Move           0
11:25:10: Au Size             9
11:25:10: Erase Size          15
11:25:10: Erase Timeout       1
11:25:10: Erase offset        1
11:25:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2495 ] 
11:25:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:10: Host Frequency set to 100000 KHz
11:25:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:10: ####CSD Registe 2.0 Values####
11:25:10: CSD_STRUCTURE                                 :0x1
11:25:10: Reserv1                                       :0x0
11:25:10: Time Access 1 TAAC                            :0xe
11:25:10: Time Access 2 NSAC*100                        :0x0
11:25:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:10: Card Command Classess CCC                     :0x5b5
11:25:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:11: DSR(driver stage register)  DSR_IMP           :0x0
11:25:11: Reserv2                                       :0x0
11:25:11: Device Size C_SIZE                            :0xedc8
11:25:11: Reserv3                                       :0x0
11:25:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:11: Reserv4                                       :0x0
11:25:11: Write Speed Factor R2W_FACTOR                 :0x2
11:25:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:11: FILE_FORMAT_GRP                               :0x0
11:25:11: COPY flag                                     :0x1
11:25:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:11: File_Format                                   :0x0
11:25:11: CRC                                           :0x0
11:25:11: ####CSD Registe Values####  

11:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626DED0>) , Command count = 2496 ] 
11:25:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 2497 ] 
11:25:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062769C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273420>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x06273A20>) , Command count = 2498 ] 
11:25:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:13: Host Frequency set to 25000 KHz
11:25:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276A80>, 0x0, True) , Command count = 2499 ] 
11:25:13: [GO18_globalSetVolt]### Host voltage value is set.
11:25:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D6F0>, 0x0, False) , Command count = 2500 ] 
11:25:13: [GO18_globalSetVolt]### Host voltage value is set.
11:25:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2501 ] 
11:25:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2502 ] 
11:25:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2503 ] 
11:25:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276450>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 2504 ] 
11:25:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276360>, <py_sfcl.CommandDataDefinition object at 0x06273F90>) , Command count = 2505 ] 
11:25:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2506 ] 
11:25:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:14: Host Frequency set to 25000 KHz
11:25:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:14: ####CSD Registe 2.0 Values####
11:25:14: CSD_STRUCTURE                                 :0x1
11:25:14: Reserv1                                       :0x0
11:25:14: Time Access 1 TAAC                            :0xe
11:25:14: Time Access 2 NSAC*100                        :0x0
11:25:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:14: Card Command Classess CCC                     :0x5b5
11:25:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:14: DSR(driver stage register)  DSR_IMP           :0x0
11:25:14: Reserv2                                       :0x0
11:25:14: Device Size C_SIZE                            :0xedc8
11:25:14: Reserv3                                       :0x0
11:25:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:14: Reserv4                                       :0x0
11:25:14: Write Speed Factor R2W_FACTOR                 :0x2
11:25:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:14: FILE_FORMAT_GRP                               :0x0
11:25:14: COPY flag                                     :0x1
11:25:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:14: File_Format                                   :0x0
11:25:14: CRC                                           :0x0
11:25:14: ####CSD Registe Values####  

11:25:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:14: [GetSCRRegisterEntry] Passed
11:25:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:14: Data_Status_After Erases          : 0
11:25:14: CPRM Security Support             : No Security
11:25:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:14: Spec. Version                     : Version 3.0X
11:25:14: Extended Security Support         : Extended_Security_Not_Supported
11:25:14: Command Support                   : COMMAND_SUPPORT
11:25:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F30>, <py_sfcl.CommandDataDefinition object at 0x062768D0>) , Command count = 2507 ] 
11:25:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x06276AE0>) , Command count = 2508 ] 
11:25:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:14: [ SetBusWidth(0x4) , Command count = 2509 ] 
11:25:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2510 ] 
11:25:14: Protected Area Size 0x28000
11:25:14: Bus Width           2
11:25:14: Secure Mode         0
11:25:14: Speed  Class        4
11:25:14: Perf Move           0
11:25:14: Au Size             9
11:25:14: Erase Size          15
11:25:14: Erase Timeout       1
11:25:14: Erase offset        1
11:25:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2511 ] 
11:25:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:14: Host Frequency set to 100000 KHz
11:25:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:14: ####CSD Registe 2.0 Values####
11:25:14: CSD_STRUCTURE                                 :0x1
11:25:14: Reserv1                                       :0x0
11:25:14: Time Access 1 TAAC                            :0xe
11:25:14: Time Access 2 NSAC*100                        :0x0
11:25:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:14: Card Command Classess CCC                     :0x5b5
11:25:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:14: DSR(driver stage register)  DSR_IMP           :0x0
11:25:14: Reserv2                                       :0x0
11:25:14: Device Size C_SIZE                            :0xedc8
11:25:14: Reserv3                                       :0x0
11:25:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:14: Reserv4                                       :0x0
11:25:14: Write Speed Factor R2W_FACTOR                 :0x2
11:25:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:14: FILE_FORMAT_GRP                               :0x0
11:25:14: COPY flag                                     :0x1
11:25:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:14: File_Format                                   :0x0
11:25:14: CRC                                           :0x0
11:25:14: ####CSD Registe Values####  

11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062765A0>, <py_sfcl.CommandDataDefinition object at 0x062765D0>) , Command count = 2512 ] 
11:25:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273330>, <py_sfcl.CommandDataDefinition object at 0x06273C90>) , Command count = 2513 ] 
11:25:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062734B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273870>, <py_sfcl.PySEnhancedCmdData object at 0x0627DB70>, <None>, <py_sfcl.Command23 object at 0x06273660>) , Command count = 2514 ] 
11:25:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:17: Host Frequency set to 25000 KHz
11:25:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D960>, 0x0, True) , Command count = 2515 ] 
11:25:17: [GO18_globalSetVolt]### Host voltage value is set.
11:25:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A180>, 0x0, False) , Command count = 2516 ] 
11:25:17: [GO18_globalSetVolt]### Host voltage value is set.
11:25:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2517 ] 
11:25:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2518 ] 
11:25:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2519 ] 
11:25:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273810>, <py_sfcl.CommandDataDefinition object at 0x06273BA0>) , Command count = 2520 ] 
11:25:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273900>, <py_sfcl.CommandDataDefinition object at 0x06273450>) , Command count = 2521 ] 
11:25:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:17: [ SetCardRCA(0x1, 0xD555) , Command count = 2522 ] 
11:25:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:17: Host Frequency set to 25000 KHz
11:25:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:17: ####CSD Registe 2.0 Values####
11:25:17: CSD_STRUCTURE                                 :0x1
11:25:17: Reserv1                                       :0x0
11:25:17: Time Access 1 TAAC                            :0xe
11:25:17: Time Access 2 NSAC*100                        :0x0
11:25:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:17: Card Command Classess CCC                     :0x5b5
11:25:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:17: DSR(driver stage register)  DSR_IMP           :0x0
11:25:17: Reserv2                                       :0x0
11:25:17: Device Size C_SIZE                            :0xedc8
11:25:17: Reserv3                                       :0x0
11:25:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:17: Reserv4                                       :0x0
11:25:17: Write Speed Factor R2W_FACTOR                 :0x2
11:25:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:17: FILE_FORMAT_GRP                               :0x0
11:25:17: COPY flag                                     :0x1
11:25:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:17: File_Format                                   :0x0
11:25:17: CRC                                           :0x0
11:25:17: ####CSD Registe Values####  

11:25:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:17: [GetSCRRegisterEntry] Passed
11:25:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:17: Data_Status_After Erases          : 0
11:25:17: CPRM Security Support             : No Security
11:25:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:17: Spec. Version                     : Version 3.0X
11:25:17: Extended Security Support         : Extended_Security_Not_Supported
11:25:17: Command Support                   : COMMAND_SUPPORT
11:25:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D240>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 2523 ] 
11:25:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB10>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 2524 ] 
11:25:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:17: [ SetBusWidth(0x4) , Command count = 2525 ] 
11:25:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062737E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2526 ] 
11:25:17: Protected Area Size 0x28000
11:25:17: Bus Width           2
11:25:17: Secure Mode         0
11:25:17: Speed  Class        4
11:25:17: Perf Move           0
11:25:17: Au Size             9
11:25:17: Erase Size          15
11:25:17: Erase Timeout       1
11:25:17: Erase offset        1
11:25:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2527 ] 
11:25:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:17: Host Frequency set to 100000 KHz
11:25:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:17: ####CSD Registe 2.0 Values####
11:25:17: CSD_STRUCTURE                                 :0x1
11:25:17: Reserv1                                       :0x0
11:25:17: Time Access 1 TAAC                            :0xe
11:25:17: Time Access 2 NSAC*100                        :0x0
11:25:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:17: Card Command Classess CCC                     :0x5b5
11:25:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:17: DSR(driver stage register)  DSR_IMP           :0x0
11:25:17: Reserv2                                       :0x0
11:25:17: Device Size C_SIZE                            :0xedc8
11:25:17: Reserv3                                       :0x0
11:25:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:18: Reserv4                                       :0x0
11:25:18: Write Speed Factor R2W_FACTOR                 :0x2
11:25:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:18: FILE_FORMAT_GRP                               :0x0
11:25:18: COPY flag                                     :0x1
11:25:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:18: File_Format                                   :0x0
11:25:18: CRC                                           :0x0
11:25:18: ####CSD Registe Values####  

11:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276DB0>) , Command count = 2528 ] 
11:25:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062730C0>, <py_sfcl.CommandDataDefinition object at 0x06276930>) , Command count = 2529 ] 
11:25:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276900>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x0627D180>) , Command count = 2530 ] 
11:25:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:20: Host Frequency set to 25000 KHz
11:25:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D9F0>, 0x0, True) , Command count = 2531 ] 
11:25:20: [GO18_globalSetVolt]### Host voltage value is set.
11:25:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276120>, 0x0, False) , Command count = 2532 ] 
11:25:20: [GO18_globalSetVolt]### Host voltage value is set.
11:25:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2533 ] 
11:25:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2534 ] 
11:25:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2535 ] 
11:25:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273990>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 2536 ] 
11:25:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269870>, <py_sfcl.CommandDataDefinition object at 0x06273A80>) , Command count = 2537 ] 
11:25:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:20: [ SetCardRCA(0x1, 0xD555) , Command count = 2538 ] 
11:25:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:21: Host Frequency set to 25000 KHz
11:25:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:21: ####CSD Registe 2.0 Values####
11:25:21: CSD_STRUCTURE                                 :0x1
11:25:21: Reserv1                                       :0x0
11:25:21: Time Access 1 TAAC                            :0xe
11:25:21: Time Access 2 NSAC*100                        :0x0
11:25:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:21: Card Command Classess CCC                     :0x5b5
11:25:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:21: DSR(driver stage register)  DSR_IMP           :0x0
11:25:21: Reserv2                                       :0x0
11:25:21: Device Size C_SIZE                            :0xedc8
11:25:21: Reserv3                                       :0x0
11:25:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:21: Reserv4                                       :0x0
11:25:21: Write Speed Factor R2W_FACTOR                 :0x2
11:25:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:21: FILE_FORMAT_GRP                               :0x0
11:25:21: COPY flag                                     :0x1
11:25:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:21: File_Format                                   :0x0
11:25:21: CRC                                           :0x0
11:25:21: ####CSD Registe Values####  

11:25:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:21: [GetSCRRegisterEntry] Passed
11:25:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:21: Data_Status_After Erases          : 0
11:25:21: CPRM Security Support             : No Security
11:25:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:21: Spec. Version                     : Version 3.0X
11:25:21: Extended Security Support         : Extended_Security_Not_Supported
11:25:21: Command Support                   : COMMAND_SUPPORT
11:25:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x06273DE0>) , Command count = 2539 ] 
11:25:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273540>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 2540 ] 
11:25:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:21: [ SetBusWidth(0x4) , Command count = 2541 ] 
11:25:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2542 ] 
11:25:21: Protected Area Size 0x28000
11:25:21: Bus Width           2
11:25:21: Secure Mode         0
11:25:21: Speed  Class        4
11:25:21: Perf Move           0
11:25:21: Au Size             9
11:25:21: Erase Size          15
11:25:21: Erase Timeout       1
11:25:21: Erase offset        1
11:25:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2543 ] 
11:25:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:21: Host Frequency set to 100000 KHz
11:25:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:21: ####CSD Registe 2.0 Values####
11:25:21: CSD_STRUCTURE                                 :0x1
11:25:21: Reserv1                                       :0x0
11:25:21: Time Access 1 TAAC                            :0xe
11:25:21: Time Access 2 NSAC*100                        :0x0
11:25:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:21: Card Command Classess CCC                     :0x5b5
11:25:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:21: DSR(driver stage register)  DSR_IMP           :0x0
11:25:21: Reserv2                                       :0x0
11:25:21: Device Size C_SIZE                            :0xedc8
11:25:21: Reserv3                                       :0x0
11:25:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:21: Reserv4                                       :0x0
11:25:21: Write Speed Factor R2W_FACTOR                 :0x2
11:25:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:21: FILE_FORMAT_GRP                               :0x0
11:25:21: COPY flag                                     :0x1
11:25:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:21: File_Format                                   :0x0
11:25:21: CRC                                           :0x0
11:25:21: ####CSD Registe Values####  

11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276750>, <py_sfcl.CommandDataDefinition object at 0x06276510>) , Command count = 2544 ] 
11:25:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276BA0>, <py_sfcl.CommandDataDefinition object at 0x062767B0>) , Command count = 2545 ] 
11:25:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276150>, <py_sfcl.PySEnhancedCmdData object at 0x06276780>, <None>, <py_sfcl.Command23 object at 0x062763C0>) , Command count = 2546 ] 
11:25:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:21: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:24: Host Frequency set to 25000 KHz
11:25:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA80>, 0x0, True) , Command count = 2547 ] 
11:25:24: [GO18_globalSetVolt]### Host voltage value is set.
11:25:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, False) , Command count = 2548 ] 
11:25:24: [GO18_globalSetVolt]### Host voltage value is set.
11:25:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2549 ] 
11:25:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2550 ] 
11:25:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2551 ] 
11:25:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B40>, <py_sfcl.CommandDataDefinition object at 0x0627A360>) , Command count = 2552 ] 
11:25:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E40>, <py_sfcl.CommandDataDefinition object at 0x06273090>) , Command count = 2553 ] 
11:25:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2554 ] 
11:25:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:24: Host Frequency set to 25000 KHz
11:25:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:24: ####CSD Registe 2.0 Values####
11:25:24: CSD_STRUCTURE                                 :0x1
11:25:24: Reserv1                                       :0x0
11:25:24: Time Access 1 TAAC                            :0xe
11:25:24: Time Access 2 NSAC*100                        :0x0
11:25:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:24: Card Command Classess CCC                     :0x5b5
11:25:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:24: DSR(driver stage register)  DSR_IMP           :0x0
11:25:24: Reserv2                                       :0x0
11:25:24: Device Size C_SIZE                            :0xedc8
11:25:24: Reserv3                                       :0x0
11:25:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:24: Reserv4                                       :0x0
11:25:24: Write Speed Factor R2W_FACTOR                 :0x2
11:25:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:24: FILE_FORMAT_GRP                               :0x0
11:25:24: COPY flag                                     :0x1
11:25:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:24: File_Format                                   :0x0
11:25:24: CRC                                           :0x0
11:25:24: ####CSD Registe Values####  

11:25:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:24: [GetSCRRegisterEntry] Passed
11:25:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:24: Data_Status_After Erases          : 0
11:25:24: CPRM Security Support             : No Security
11:25:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:24: Spec. Version                     : Version 3.0X
11:25:24: Extended Security Support         : Extended_Security_Not_Supported
11:25:24: Command Support                   : COMMAND_SUPPORT
11:25:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 2555 ] 
11:25:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276EA0>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 2556 ] 
11:25:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:24: [ SetBusWidth(0x4) , Command count = 2557 ] 
11:25:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2558 ] 
11:25:24: Protected Area Size 0x28000
11:25:24: Bus Width           2
11:25:24: Secure Mode         0
11:25:24: Speed  Class        4
11:25:24: Perf Move           0
11:25:24: Au Size             9
11:25:24: Erase Size          15
11:25:24: Erase Timeout       1
11:25:24: Erase offset        1
11:25:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2559 ] 
11:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:24: Host Frequency set to 100000 KHz
11:25:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:24: ####CSD Registe 2.0 Values####
11:25:24: CSD_STRUCTURE                                 :0x1
11:25:24: Reserv1                                       :0x0
11:25:24: Time Access 1 TAAC                            :0xe
11:25:24: Time Access 2 NSAC*100                        :0x0
11:25:24: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:24: Card Command Classess CCC                     :0x5b5
11:25:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:24: DSR(driver stage register)  DSR_IMP           :0x0
11:25:24: Reserv2                                       :0x0
11:25:24: Device Size C_SIZE                            :0xedc8
11:25:24: Reserv3                                       :0x0
11:25:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:24: Reserv4                                       :0x0
11:25:24: Write Speed Factor R2W_FACTOR                 :0x2
11:25:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:25: FILE_FORMAT_GRP                               :0x0
11:25:25: COPY flag                                     :0x1
11:25:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:25: File_Format                                   :0x0
11:25:25: CRC                                           :0x0
11:25:25: ####CSD Registe Values####  

11:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 2560 ] 
11:25:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767E0>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 2561 ] 
11:25:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D150>, <py_sfcl.PySEnhancedCmdData object at 0x0627DB40>, <None>, <py_sfcl.Command23 object at 0x06276870>) , Command count = 2562 ] 
11:25:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:27: Host Frequency set to 25000 KHz
11:25:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:27: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C00>, 0x0, True) , Command count = 2563 ] 
11:25:27: [GO18_globalSetVolt]### Host voltage value is set.
11:25:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401E70>, 0x0, False) , Command count = 2564 ] 
11:25:27: [GO18_globalSetVolt]### Host voltage value is set.
11:25:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2565 ] 
11:25:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2566 ] 
11:25:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2567 ] 
11:25:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 2568 ] 
11:25:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x06273720>) , Command count = 2569 ] 
11:25:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2570 ] 
11:25:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:27: Host Frequency set to 25000 KHz
11:25:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:27: ####CSD Registe 2.0 Values####
11:25:27: CSD_STRUCTURE                                 :0x1
11:25:27: Reserv1                                       :0x0
11:25:27: Time Access 1 TAAC                            :0xe
11:25:27: Time Access 2 NSAC*100                        :0x0
11:25:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:27: Card Command Classess CCC                     :0x5b5
11:25:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:27: DSR(driver stage register)  DSR_IMP           :0x0
11:25:27: Reserv2                                       :0x0
11:25:27: Device Size C_SIZE                            :0xedc8
11:25:27: Reserv3                                       :0x0
11:25:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:27: Reserv4                                       :0x0
11:25:27: Write Speed Factor R2W_FACTOR                 :0x2
11:25:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:27: FILE_FORMAT_GRP                               :0x0
11:25:27: COPY flag                                     :0x1
11:25:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:27: File_Format                                   :0x0
11:25:27: CRC                                           :0x0
11:25:27: ####CSD Registe Values####  

11:25:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:27: [GetSCRRegisterEntry] Passed
11:25:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:27: Data_Status_After Erases          : 0
11:25:27: CPRM Security Support             : No Security
11:25:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:27: Spec. Version                     : Version 3.0X
11:25:27: Extended Security Support         : Extended_Security_Not_Supported
11:25:27: Command Support                   : COMMAND_SUPPORT
11:25:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 2571 ] 
11:25:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 2572 ] 
11:25:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:27: [ SetBusWidth(0x4) , Command count = 2573 ] 
11:25:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2574 ] 
11:25:27: Protected Area Size 0x28000
11:25:27: Bus Width           2
11:25:27: Secure Mode         0
11:25:27: Speed  Class        4
11:25:27: Perf Move           0
11:25:27: Au Size             9
11:25:27: Erase Size          15
11:25:27: Erase Timeout       1
11:25:27: Erase offset        1
11:25:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2575 ] 
11:25:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:28: Host Frequency set to 100000 KHz
11:25:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:28: ####CSD Registe 2.0 Values####
11:25:28: CSD_STRUCTURE                                 :0x1
11:25:28: Reserv1                                       :0x0
11:25:28: Time Access 1 TAAC                            :0xe
11:25:28: Time Access 2 NSAC*100                        :0x0
11:25:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:28: Card Command Classess CCC                     :0x5b5
11:25:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:28: DSR(driver stage register)  DSR_IMP           :0x0
11:25:28: Reserv2                                       :0x0
11:25:28: Device Size C_SIZE                            :0xedc8
11:25:28: Reserv3                                       :0x0
11:25:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:28: Reserv4                                       :0x0
11:25:28: Write Speed Factor R2W_FACTOR                 :0x2
11:25:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:28: FILE_FORMAT_GRP                               :0x0
11:25:28: COPY flag                                     :0x1
11:25:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:28: File_Format                                   :0x0
11:25:28: CRC                                           :0x0
11:25:28: ####CSD Registe Values####  

11:25:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627D090>) , Command count = 2576 ] 
11:25:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276540>, <py_sfcl.CommandDataDefinition object at 0x0627A570>) , Command count = 2577 ] 
11:25:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:28: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A780>, <None>, <py_sfcl.Command23 object at 0x0627DC60>) , Command count = 2578 ] 
11:25:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:28: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:30: Host Frequency set to 25000 KHz
11:25:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:30: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DF30>, 0x0, True) , Command count = 2579 ] 
11:25:30: [GO18_globalSetVolt]### Host voltage value is set.
11:25:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFEA0>, 0x0, False) , Command count = 2580 ] 
11:25:31: [GO18_globalSetVolt]### Host voltage value is set.
11:25:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2581 ] 
11:25:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2582 ] 
11:25:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2583 ] 
11:25:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAE0>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 2584 ] 
11:25:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x06273600>) , Command count = 2585 ] 
11:25:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:31: [ SetCardRCA(0x1, 0xD555) , Command count = 2586 ] 
11:25:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:31: Host Frequency set to 25000 KHz
11:25:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:31: ####CSD Registe 2.0 Values####
11:25:31: CSD_STRUCTURE                                 :0x1
11:25:31: Reserv1                                       :0x0
11:25:31: Time Access 1 TAAC                            :0xe
11:25:31: Time Access 2 NSAC*100                        :0x0
11:25:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:31: Card Command Classess CCC                     :0x5b5
11:25:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:31: DSR(driver stage register)  DSR_IMP           :0x0
11:25:31: Reserv2                                       :0x0
11:25:31: Device Size C_SIZE                            :0xedc8
11:25:31: Reserv3                                       :0x0
11:25:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:31: Reserv4                                       :0x0
11:25:31: Write Speed Factor R2W_FACTOR                 :0x2
11:25:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:31: FILE_FORMAT_GRP                               :0x0
11:25:31: COPY flag                                     :0x1
11:25:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:31: File_Format                                   :0x0
11:25:31: CRC                                           :0x0
11:25:31: ####CSD Registe Values####  

11:25:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:31: [GetSCRRegisterEntry] Passed
11:25:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:31: Data_Status_After Erases          : 0
11:25:31: CPRM Security Support             : No Security
11:25:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:31: Spec. Version                     : Version 3.0X
11:25:31: Extended Security Support         : Extended_Security_Not_Supported
11:25:31: Command Support                   : COMMAND_SUPPORT
11:25:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 2587 ] 
11:25:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 2588 ] 
11:25:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:31: [ SetBusWidth(0x4) , Command count = 2589 ] 
11:25:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2590 ] 
11:25:31: Protected Area Size 0x28000
11:25:31: Bus Width           2
11:25:31: Secure Mode         0
11:25:31: Speed  Class        4
11:25:31: Perf Move           0
11:25:31: Au Size             9
11:25:31: Erase Size          15
11:25:31: Erase Timeout       1
11:25:31: Erase offset        1
11:25:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2591 ] 
11:25:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:31: Host Frequency set to 100000 KHz
11:25:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:31: ####CSD Registe 2.0 Values####
11:25:31: CSD_STRUCTURE                                 :0x1
11:25:31: Reserv1                                       :0x0
11:25:31: Time Access 1 TAAC                            :0xe
11:25:31: Time Access 2 NSAC*100                        :0x0
11:25:31: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:31: Card Command Classess CCC                     :0x5b5
11:25:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:31: DSR(driver stage register)  DSR_IMP           :0x0
11:25:31: Reserv2                                       :0x0
11:25:31: Device Size C_SIZE                            :0xedc8
11:25:31: Reserv3                                       :0x0
11:25:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:31: Reserv4                                       :0x0
11:25:31: Write Speed Factor R2W_FACTOR                 :0x2
11:25:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:31: FILE_FORMAT_GRP                               :0x0
11:25:31: COPY flag                                     :0x1
11:25:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:31: File_Format                                   :0x0
11:25:31: CRC                                           :0x0
11:25:31: ####CSD Registe Values####  

11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x062168D0>) , Command count = 2592 ] 
11:25:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 2593 ] 
11:25:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627A5A0>, <None>, <py_sfcl.Command23 object at 0x0627A030>) , Command count = 2594 ] 
11:25:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:34: Host Frequency set to 25000 KHz
11:25:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF420>, 0x0, True) , Command count = 2595 ] 
11:25:34: [GO18_globalSetVolt]### Host voltage value is set.
11:25:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFF60>, 0x0, False) , Command count = 2596 ] 
11:25:34: [GO18_globalSetVolt]### Host voltage value is set.
11:25:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2597 ] 
11:25:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2598 ] 
11:25:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2599 ] 
11:25:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062683F0>, <py_sfcl.CommandDataDefinition object at 0x053FB930>) , Command count = 2600 ] 
11:25:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627DCF0>) , Command count = 2601 ] 
11:25:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:34: [ SetCardRCA(0x1, 0xD555) , Command count = 2602 ] 
11:25:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:34: Host Frequency set to 25000 KHz
11:25:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:34: ####CSD Registe 2.0 Values####
11:25:34: CSD_STRUCTURE                                 :0x1
11:25:34: Reserv1                                       :0x0
11:25:34: Time Access 1 TAAC                            :0xe
11:25:34: Time Access 2 NSAC*100                        :0x0
11:25:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:34: Card Command Classess CCC                     :0x5b5
11:25:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:34: DSR(driver stage register)  DSR_IMP           :0x0
11:25:34: Reserv2                                       :0x0
11:25:34: Device Size C_SIZE                            :0xedc8
11:25:34: Reserv3                                       :0x0
11:25:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:34: Reserv4                                       :0x0
11:25:34: Write Speed Factor R2W_FACTOR                 :0x2
11:25:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:34: FILE_FORMAT_GRP                               :0x0
11:25:34: COPY flag                                     :0x1
11:25:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:34: File_Format                                   :0x0
11:25:34: CRC                                           :0x0
11:25:34: ####CSD Registe Values####  

11:25:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:34: [GetSCRRegisterEntry] Passed
11:25:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:34: Data_Status_After Erases          : 0
11:25:34: CPRM Security Support             : No Security
11:25:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:34: Spec. Version                     : Version 3.0X
11:25:34: Extended Security Support         : Extended_Security_Not_Supported
11:25:34: Command Support                   : COMMAND_SUPPORT
11:25:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 2603 ] 
11:25:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D930>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 2604 ] 
11:25:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:34: [ SetBusWidth(0x4) , Command count = 2605 ] 
11:25:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2606 ] 
11:25:34: Protected Area Size 0x28000
11:25:34: Bus Width           2
11:25:34: Secure Mode         0
11:25:34: Speed  Class        4
11:25:34: Perf Move           0
11:25:34: Au Size             9
11:25:34: Erase Size          15
11:25:34: Erase Timeout       1
11:25:34: Erase offset        1
11:25:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2607 ] 
11:25:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:34: Host Frequency set to 100000 KHz
11:25:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:34: ####CSD Registe 2.0 Values####
11:25:34: CSD_STRUCTURE                                 :0x1
11:25:35: Reserv1                                       :0x0
11:25:35: Time Access 1 TAAC                            :0xe
11:25:35: Time Access 2 NSAC*100                        :0x0
11:25:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:35: Card Command Classess CCC                     :0x5b5
11:25:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:35: DSR(driver stage register)  DSR_IMP           :0x0
11:25:35: Reserv2                                       :0x0
11:25:35: Device Size C_SIZE                            :0xedc8
11:25:35: Reserv3                                       :0x0
11:25:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:35: Reserv4                                       :0x0
11:25:35: Write Speed Factor R2W_FACTOR                 :0x2
11:25:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:35: FILE_FORMAT_GRP                               :0x0
11:25:35: COPY flag                                     :0x1
11:25:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:35: File_Format                                   :0x0
11:25:35: CRC                                           :0x0
11:25:35: ####CSD Registe Values####  

11:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 2608 ] 
11:25:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 2609 ] 
11:25:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A3C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627ACF0>, <None>, <py_sfcl.Command23 object at 0x0627A990>) , Command count = 2610 ] 
11:25:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:35: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:37: Host Frequency set to 25000 KHz
11:25:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:37: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C90>, 0x0, True) , Command count = 2611 ] 
11:25:37: [GO18_globalSetVolt]### Host voltage value is set.
11:25:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269180>, 0x0, False) , Command count = 2612 ] 
11:25:37: [GO18_globalSetVolt]### Host voltage value is set.
11:25:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2613 ] 
11:25:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2614 ] 
11:25:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2615 ] 
11:25:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E10>, <py_sfcl.CommandDataDefinition object at 0x06269450>) , Command count = 2616 ] 
11:25:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062685D0>, <py_sfcl.CommandDataDefinition object at 0x0627D450>) , Command count = 2617 ] 
11:25:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2618 ] 
11:25:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:38: Host Frequency set to 25000 KHz
11:25:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:38: ####CSD Registe 2.0 Values####
11:25:38: CSD_STRUCTURE                                 :0x1
11:25:38: Reserv1                                       :0x0
11:25:38: Time Access 1 TAAC                            :0xe
11:25:38: Time Access 2 NSAC*100                        :0x0
11:25:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:38: Card Command Classess CCC                     :0x5b5
11:25:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:38: DSR(driver stage register)  DSR_IMP           :0x0
11:25:38: Reserv2                                       :0x0
11:25:38: Device Size C_SIZE                            :0xedc8
11:25:38: Reserv3                                       :0x0
11:25:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:38: Reserv4                                       :0x0
11:25:38: Write Speed Factor R2W_FACTOR                 :0x2
11:25:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:38: FILE_FORMAT_GRP                               :0x0
11:25:38: COPY flag                                     :0x1
11:25:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:38: File_Format                                   :0x0
11:25:38: CRC                                           :0x0
11:25:38: ####CSD Registe Values####  

11:25:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:38: [GetSCRRegisterEntry] Passed
11:25:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:38: Data_Status_After Erases          : 0
11:25:38: CPRM Security Support             : No Security
11:25:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:38: Spec. Version                     : Version 3.0X
11:25:38: Extended Security Support         : Extended_Security_Not_Supported
11:25:38: Command Support                   : COMMAND_SUPPORT
11:25:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 2619 ] 
11:25:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 2620 ] 
11:25:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:38: [ SetBusWidth(0x4) , Command count = 2621 ] 
11:25:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2622 ] 
11:25:38: Protected Area Size 0x28000
11:25:38: Bus Width           2
11:25:38: Secure Mode         0
11:25:38: Speed  Class        4
11:25:38: Perf Move           0
11:25:38: Au Size             9
11:25:38: Erase Size          15
11:25:38: Erase Timeout       1
11:25:38: Erase offset        1
11:25:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2623 ] 
11:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:38: Host Frequency set to 100000 KHz
11:25:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:38: ####CSD Registe 2.0 Values####
11:25:38: CSD_STRUCTURE                                 :0x1
11:25:38: Reserv1                                       :0x0
11:25:38: Time Access 1 TAAC                            :0xe
11:25:38: Time Access 2 NSAC*100                        :0x0
11:25:38: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:38: Card Command Classess CCC                     :0x5b5
11:25:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:38: DSR(driver stage register)  DSR_IMP           :0x0
11:25:38: Reserv2                                       :0x0
11:25:38: Device Size C_SIZE                            :0xedc8
11:25:38: Reserv3                                       :0x0
11:25:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:38: Reserv4                                       :0x0
11:25:38: Write Speed Factor R2W_FACTOR                 :0x2
11:25:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:38: FILE_FORMAT_GRP                               :0x0
11:25:38: COPY flag                                     :0x1
11:25:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:38: File_Format                                   :0x0
11:25:38: CRC                                           :0x0
11:25:38: ####CSD Registe Values####  

11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B70>, <py_sfcl.CommandDataDefinition object at 0x0627A960>) , Command count = 2624 ] 
11:25:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AB10>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 2625 ] 
11:25:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DE10>, <None>, <py_sfcl.Command23 object at 0x0627AD20>) , Command count = 2626 ] 
11:25:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:39: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:41: Host Frequency set to 25000 KHz
11:25:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:41: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AE70>, 0x0, True) , Command count = 2627 ] 
11:25:41: [GO18_globalSetVolt]### Host voltage value is set.
11:25:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x062692D0>, 0x0, False) , Command count = 2628 ] 
11:25:41: [GO18_globalSetVolt]### Host voltage value is set.
11:25:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2629 ] 
11:25:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2630 ] 
11:25:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2631 ] 
11:25:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D120>, <py_sfcl.CommandDataDefinition object at 0x0627D270>) , Command count = 2632 ] 
11:25:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x0627D0F0>) , Command count = 2633 ] 
11:25:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:41: [ SetCardRCA(0x1, 0xD555) , Command count = 2634 ] 
11:25:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:41: Host Frequency set to 25000 KHz
11:25:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:41: ####CSD Registe 2.0 Values####
11:25:41: CSD_STRUCTURE                                 :0x1
11:25:41: Reserv1                                       :0x0
11:25:41: Time Access 1 TAAC                            :0xe
11:25:41: Time Access 2 NSAC*100                        :0x0
11:25:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:41: Card Command Classess CCC                     :0x5b5
11:25:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:41: DSR(driver stage register)  DSR_IMP           :0x0
11:25:41: Reserv2                                       :0x0
11:25:41: Device Size C_SIZE                            :0xedc8
11:25:41: Reserv3                                       :0x0
11:25:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:41: Reserv4                                       :0x0
11:25:41: Write Speed Factor R2W_FACTOR                 :0x2
11:25:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:41: FILE_FORMAT_GRP                               :0x0
11:25:41: COPY flag                                     :0x1
11:25:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:41: File_Format                                   :0x0
11:25:41: CRC                                           :0x0
11:25:41: ####CSD Registe Values####  

11:25:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:41: [GetSCRRegisterEntry] Passed
11:25:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:41: Data_Status_After Erases          : 0
11:25:41: CPRM Security Support             : No Security
11:25:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:41: Spec. Version                     : Version 3.0X
11:25:41: Extended Security Support         : Extended_Security_Not_Supported
11:25:41: Command Support                   : COMMAND_SUPPORT
11:25:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3F0>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 2635 ] 
11:25:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D480>, <py_sfcl.CommandDataDefinition object at 0x06268A20>) , Command count = 2636 ] 
11:25:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:41: [ SetBusWidth(0x4) , Command count = 2637 ] 
11:25:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2638 ] 
11:25:41: Protected Area Size 0x28000
11:25:41: Bus Width           2
11:25:41: Secure Mode         0
11:25:41: Speed  Class        4
11:25:41: Perf Move           0
11:25:41: Au Size             9
11:25:41: Erase Size          15
11:25:41: Erase Timeout       1
11:25:41: Erase offset        1
11:25:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2639 ] 
11:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:41: Host Frequency set to 100000 KHz
11:25:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:41: ####CSD Registe 2.0 Values####
11:25:41: CSD_STRUCTURE                                 :0x1
11:25:41: Reserv1                                       :0x0
11:25:41: Time Access 1 TAAC                            :0xe
11:25:41: Time Access 2 NSAC*100                        :0x0
11:25:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:41: Card Command Classess CCC                     :0x5b5
11:25:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:41: DSR(driver stage register)  DSR_IMP           :0x0
11:25:41: Reserv2                                       :0x0
11:25:41: Device Size C_SIZE                            :0xedc8
11:25:41: Reserv3                                       :0x0
11:25:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:42: Reserv4                                       :0x0
11:25:42: Write Speed Factor R2W_FACTOR                 :0x2
11:25:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:42: FILE_FORMAT_GRP                               :0x0
11:25:42: COPY flag                                     :0x1
11:25:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:42: File_Format                                   :0x0
11:25:42: CRC                                           :0x0
11:25:42: ####CSD Registe Values####  

11:25:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C60>, <py_sfcl.CommandDataDefinition object at 0x06216570>) , Command count = 2640 ] 
11:25:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 2641 ] 
11:25:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06280240>, <None>, <py_sfcl.Command23 object at 0x0627D6C0>) , Command count = 2642 ] 
11:25:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:44: Host Frequency set to 25000 KHz
11:25:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF660>, 0x0, True) , Command count = 2643 ] 
11:25:44: [GO18_globalSetVolt]### Host voltage value is set.
11:25:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269090>, 0x0, False) , Command count = 2644 ] 
11:25:44: [GO18_globalSetVolt]### Host voltage value is set.
11:25:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2645 ] 
11:25:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2646 ] 
11:25:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2647 ] 
11:25:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276660>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 2648 ] 
11:25:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x06269750>) , Command count = 2649 ] 
11:25:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2650 ] 
11:25:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:45: Host Frequency set to 25000 KHz
11:25:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:45: ####CSD Registe 2.0 Values####
11:25:45: CSD_STRUCTURE                                 :0x1
11:25:45: Reserv1                                       :0x0
11:25:45: Time Access 1 TAAC                            :0xe
11:25:45: Time Access 2 NSAC*100                        :0x0
11:25:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:45: Card Command Classess CCC                     :0x5b5
11:25:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:45: DSR(driver stage register)  DSR_IMP           :0x0
11:25:45: Reserv2                                       :0x0
11:25:45: Device Size C_SIZE                            :0xedc8
11:25:45: Reserv3                                       :0x0
11:25:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:45: Reserv4                                       :0x0
11:25:45: Write Speed Factor R2W_FACTOR                 :0x2
11:25:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:45: FILE_FORMAT_GRP                               :0x0
11:25:45: COPY flag                                     :0x1
11:25:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:45: File_Format                                   :0x0
11:25:45: CRC                                           :0x0
11:25:45: ####CSD Registe Values####  

11:25:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:45: [GetSCRRegisterEntry] Passed
11:25:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:45: Data_Status_After Erases          : 0
11:25:45: CPRM Security Support             : No Security
11:25:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:45: Spec. Version                     : Version 3.0X
11:25:45: Extended Security Support         : Extended_Security_Not_Supported
11:25:45: Command Support                   : COMMAND_SUPPORT
11:25:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D390>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 2651 ] 
11:25:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x0626DF60>) , Command count = 2652 ] 
11:25:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:45: [ SetBusWidth(0x4) , Command count = 2653 ] 
11:25:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062733C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2654 ] 
11:25:45: Protected Area Size 0x28000
11:25:45: Bus Width           2
11:25:45: Secure Mode         0
11:25:45: Speed  Class        4
11:25:45: Perf Move           0
11:25:45: Au Size             9
11:25:45: Erase Size          15
11:25:45: Erase Timeout       1
11:25:45: Erase offset        1
11:25:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2655 ] 
11:25:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:45: Host Frequency set to 100000 KHz
11:25:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:45: ####CSD Registe 2.0 Values####
11:25:45: CSD_STRUCTURE                                 :0x1
11:25:45: Reserv1                                       :0x0
11:25:45: Time Access 1 TAAC                            :0xe
11:25:45: Time Access 2 NSAC*100                        :0x0
11:25:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:45: Card Command Classess CCC                     :0x5b5
11:25:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:45: DSR(driver stage register)  DSR_IMP           :0x0
11:25:45: Reserv2                                       :0x0
11:25:45: Device Size C_SIZE                            :0xedc8
11:25:45: Reserv3                                       :0x0
11:25:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:45: Reserv4                                       :0x0
11:25:45: Write Speed Factor R2W_FACTOR                 :0x2
11:25:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:45: FILE_FORMAT_GRP                               :0x0
11:25:45: COPY flag                                     :0x1
11:25:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:45: File_Format                                   :0x0
11:25:45: CRC                                           :0x0
11:25:45: ####CSD Registe Values####  

11:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x0627D810>) , Command count = 2656 ] 
11:25:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D330>, <py_sfcl.CommandDataDefinition object at 0x062683C0>) , Command count = 2657 ] 
11:25:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268E70>, <py_sfcl.PySEnhancedCmdData object at 0x06268C00>, <None>, <py_sfcl.Command23 object at 0x062681B0>) , Command count = 2658 ] 
11:25:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:48: Host Frequency set to 25000 KHz
11:25:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:48: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216510>, 0x0, True) , Command count = 2659 ] 
11:25:48: [GO18_globalSetVolt]### Host voltage value is set.
11:25:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D1E0>, 0x0, False) , Command count = 2660 ] 
11:25:48: [GO18_globalSetVolt]### Host voltage value is set.
11:25:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2661 ] 
11:25:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2662 ] 
11:25:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2663 ] 
11:25:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273780>, <py_sfcl.CommandDataDefinition object at 0x0626D360>) , Command count = 2664 ] 
11:25:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x0626D840>) , Command count = 2665 ] 
11:25:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2666 ] 
11:25:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:48: Host Frequency set to 25000 KHz
11:25:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:48: ####CSD Registe 2.0 Values####
11:25:48: CSD_STRUCTURE                                 :0x1
11:25:48: Reserv1                                       :0x0
11:25:48: Time Access 1 TAAC                            :0xe
11:25:48: Time Access 2 NSAC*100                        :0x0
11:25:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:48: Card Command Classess CCC                     :0x5b5
11:25:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:48: DSR(driver stage register)  DSR_IMP           :0x0
11:25:48: Reserv2                                       :0x0
11:25:48: Device Size C_SIZE                            :0xedc8
11:25:48: Reserv3                                       :0x0
11:25:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:48: Reserv4                                       :0x0
11:25:48: Write Speed Factor R2W_FACTOR                 :0x2
11:25:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:48: FILE_FORMAT_GRP                               :0x0
11:25:48: COPY flag                                     :0x1
11:25:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:48: File_Format                                   :0x0
11:25:48: CRC                                           :0x0
11:25:48: ####CSD Registe Values####  

11:25:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:48: [GetSCRRegisterEntry] Passed
11:25:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:48: Data_Status_After Erases          : 0
11:25:48: CPRM Security Support             : No Security
11:25:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:48: Spec. Version                     : Version 3.0X
11:25:48: Extended Security Support         : Extended_Security_Not_Supported
11:25:48: Command Support                   : COMMAND_SUPPORT
11:25:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 2667 ] 
11:25:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764B0>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 2668 ] 
11:25:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:48: [ SetBusWidth(0x4) , Command count = 2669 ] 
11:25:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2670 ] 
11:25:48: Protected Area Size 0x28000
11:25:48: Bus Width           2
11:25:48: Secure Mode         0
11:25:48: Speed  Class        4
11:25:48: Perf Move           0
11:25:48: Au Size             9
11:25:48: Erase Size          15
11:25:48: Erase Timeout       1
11:25:48: Erase offset        1
11:25:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2671 ] 
11:25:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:48: Host Frequency set to 100000 KHz
11:25:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:48: ####CSD Registe 2.0 Values####
11:25:48: CSD_STRUCTURE                                 :0x1
11:25:48: Reserv1                                       :0x0
11:25:48: Time Access 1 TAAC                            :0xe
11:25:48: Time Access 2 NSAC*100                        :0x0
11:25:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:48: Card Command Classess CCC                     :0x5b5
11:25:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:48: DSR(driver stage register)  DSR_IMP           :0x0
11:25:48: Reserv2                                       :0x0
11:25:48: Device Size C_SIZE                            :0xedc8
11:25:48: Reserv3                                       :0x0
11:25:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:48: Reserv4                                       :0x0
11:25:48: Write Speed Factor R2W_FACTOR                 :0x2
11:25:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:49: FILE_FORMAT_GRP                               :0x0
11:25:49: COPY flag                                     :0x1
11:25:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:49: File_Format                                   :0x0
11:25:49: CRC                                           :0x0
11:25:49: ####CSD Registe Values####  

11:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273ED0>, <py_sfcl.CommandDataDefinition object at 0x06268E10>) , Command count = 2672 ] 
11:25:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268900>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 2673 ] 
11:25:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269060>, <py_sfcl.PySEnhancedCmdData object at 0x06269810>, <None>, <py_sfcl.Command23 object at 0x06268A80>) , Command count = 2674 ] 
11:25:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:51: Host Frequency set to 25000 KHz
11:25:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D600>, 0x0, True) , Command count = 2675 ] 
11:25:51: [GO18_globalSetVolt]### Host voltage value is set.
11:25:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269B10>, 0x0, False) , Command count = 2676 ] 
11:25:51: [GO18_globalSetVolt]### Host voltage value is set.
11:25:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2677 ] 
11:25:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2678 ] 
11:25:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2679 ] 
11:25:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 2680 ] 
11:25:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 2681 ] 
11:25:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2682 ] 
11:25:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:51: Host Frequency set to 25000 KHz
11:25:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:51: ####CSD Registe 2.0 Values####
11:25:51: CSD_STRUCTURE                                 :0x1
11:25:51: Reserv1                                       :0x0
11:25:51: Time Access 1 TAAC                            :0xe
11:25:51: Time Access 2 NSAC*100                        :0x0
11:25:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:51: Card Command Classess CCC                     :0x5b5
11:25:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:51: DSR(driver stage register)  DSR_IMP           :0x0
11:25:51: Reserv2                                       :0x0
11:25:51: Device Size C_SIZE                            :0xedc8
11:25:51: Reserv3                                       :0x0
11:25:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:51: Reserv4                                       :0x0
11:25:51: Write Speed Factor R2W_FACTOR                 :0x2
11:25:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:51: FILE_FORMAT_GRP                               :0x0
11:25:51: COPY flag                                     :0x1
11:25:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:51: File_Format                                   :0x0
11:25:51: CRC                                           :0x0
11:25:51: ####CSD Registe Values####  

11:25:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:51: [GetSCRRegisterEntry] Passed
11:25:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:51: Data_Status_After Erases          : 0
11:25:51: CPRM Security Support             : No Security
11:25:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:51: Spec. Version                     : Version 3.0X
11:25:51: Extended Security Support         : Extended_Security_Not_Supported
11:25:51: Command Support                   : COMMAND_SUPPORT
11:25:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269780>, <py_sfcl.CommandDataDefinition object at 0x06269ED0>) , Command count = 2683 ] 
11:25:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 2684 ] 
11:25:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:51: [ SetBusWidth(0x4) , Command count = 2685 ] 
11:25:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2686 ] 
11:25:51: Protected Area Size 0x28000
11:25:51: Bus Width           2
11:25:51: Secure Mode         0
11:25:51: Speed  Class        4
11:25:51: Perf Move           0
11:25:51: Au Size             9
11:25:51: Erase Size          15
11:25:51: Erase Timeout       1
11:25:51: Erase offset        1
11:25:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2687 ] 
11:25:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:52: Host Frequency set to 100000 KHz
11:25:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:52: ####CSD Registe 2.0 Values####
11:25:52: CSD_STRUCTURE                                 :0x1
11:25:52: Reserv1                                       :0x0
11:25:52: Time Access 1 TAAC                            :0xe
11:25:52: Time Access 2 NSAC*100                        :0x0
11:25:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:52: Card Command Classess CCC                     :0x5b5
11:25:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:52: DSR(driver stage register)  DSR_IMP           :0x0
11:25:52: Reserv2                                       :0x0
11:25:52: Device Size C_SIZE                            :0xedc8
11:25:52: Reserv3                                       :0x0
11:25:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:52: Reserv4                                       :0x0
11:25:52: Write Speed Factor R2W_FACTOR                 :0x2
11:25:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:52: FILE_FORMAT_GRP                               :0x0
11:25:52: COPY flag                                     :0x1
11:25:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:52: File_Format                                   :0x0
11:25:52: CRC                                           :0x0
11:25:52: ####CSD Registe Values####  

11:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x06268FC0>) , Command count = 2688 ] 
11:25:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D780>, <py_sfcl.CommandDataDefinition object at 0x052C4030>) , Command count = 2689 ] 
11:25:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x0626D750>, <None>, <py_sfcl.Command23 object at 0x062690C0>) , Command count = 2690 ] 
11:25:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:54: Host Frequency set to 25000 KHz
11:25:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268CF0>, 0x0, True) , Command count = 2691 ] 
11:25:54: [GO18_globalSetVolt]### Host voltage value is set.
11:25:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269840>, 0x0, False) , Command count = 2692 ] 
11:25:54: [GO18_globalSetVolt]### Host voltage value is set.
11:25:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2693 ] 
11:25:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2694 ] 
11:25:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2695 ] 
11:25:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D80>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 2696 ] 
11:25:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9C0>, <py_sfcl.CommandDataDefinition object at 0x06269E70>) , Command count = 2697 ] 
11:25:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2698 ] 
11:25:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:55: Host Frequency set to 25000 KHz
11:25:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:55: ####CSD Registe 2.0 Values####
11:25:55: CSD_STRUCTURE                                 :0x1
11:25:55: Reserv1                                       :0x0
11:25:55: Time Access 1 TAAC                            :0xe
11:25:55: Time Access 2 NSAC*100                        :0x0
11:25:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:55: Card Command Classess CCC                     :0x5b5
11:25:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:55: DSR(driver stage register)  DSR_IMP           :0x0
11:25:55: Reserv2                                       :0x0
11:25:55: Device Size C_SIZE                            :0xedc8
11:25:55: Reserv3                                       :0x0
11:25:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:55: Reserv4                                       :0x0
11:25:55: Write Speed Factor R2W_FACTOR                 :0x2
11:25:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:55: FILE_FORMAT_GRP                               :0x0
11:25:55: COPY flag                                     :0x1
11:25:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:55: File_Format                                   :0x0
11:25:55: CRC                                           :0x0
11:25:55: ####CSD Registe Values####  

11:25:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:55: [GetSCRRegisterEntry] Passed
11:25:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:55: Data_Status_After Erases          : 0
11:25:55: CPRM Security Support             : No Security
11:25:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:55: Spec. Version                     : Version 3.0X
11:25:55: Extended Security Support         : Extended_Security_Not_Supported
11:25:55: Command Support                   : COMMAND_SUPPORT
11:25:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BD0>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 2699 ] 
11:25:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 2700 ] 
11:25:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:55: [ SetBusWidth(0x4) , Command count = 2701 ] 
11:25:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062698D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2702 ] 
11:25:55: Protected Area Size 0x28000
11:25:55: Bus Width           2
11:25:55: Secure Mode         0
11:25:55: Speed  Class        4
11:25:55: Perf Move           0
11:25:55: Au Size             9
11:25:55: Erase Size          15
11:25:55: Erase Timeout       1
11:25:55: Erase offset        1
11:25:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2703 ] 
11:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:55: Host Frequency set to 100000 KHz
11:25:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:55: ####CSD Registe 2.0 Values####
11:25:55: CSD_STRUCTURE                                 :0x1
11:25:55: Reserv1                                       :0x0
11:25:55: Time Access 1 TAAC                            :0xe
11:25:55: Time Access 2 NSAC*100                        :0x0
11:25:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:55: Card Command Classess CCC                     :0x5b5
11:25:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:55: DSR(driver stage register)  DSR_IMP           :0x0
11:25:55: Reserv2                                       :0x0
11:25:55: Device Size C_SIZE                            :0xedc8
11:25:55: Reserv3                                       :0x0
11:25:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:55: Reserv4                                       :0x0
11:25:55: Write Speed Factor R2W_FACTOR                 :0x2
11:25:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:55: FILE_FORMAT_GRP                               :0x0
11:25:55: COPY flag                                     :0x1
11:25:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:55: File_Format                                   :0x0
11:25:55: CRC                                           :0x0
11:25:55: ####CSD Registe Values####  

11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 2704 ] 
11:25:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CF0>, <py_sfcl.CommandDataDefinition object at 0x0626D4B0>) , Command count = 2705 ] 
11:25:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D480>, <py_sfcl.PySEnhancedCmdData object at 0x0626D630>, <None>, <py_sfcl.Command23 object at 0x0626D1B0>) , Command count = 2706 ] 
11:25:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:56: [GO4_globalInitCard]### Switch to Specify Card Type
11:25:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:58: Host Frequency set to 25000 KHz
11:25:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:58: [GO18_globalSetVolt]### Set Host Voltage value.
11:25:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:25:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AEA0>, 0x0, True) , Command count = 2707 ] 
11:25:58: [GO18_globalSetVolt]### Host voltage value is set.
11:25:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:25:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A0F0>, 0x0, False) , Command count = 2708 ] 
11:25:58: [GO18_globalSetVolt]### Host voltage value is set.
11:25:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2709 ] 
11:25:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:25:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2710 ] 
11:25:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:25:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:25:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:25:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:25:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:25:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2711 ] 
11:25:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:25:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD50>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 2712 ] 
11:25:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269600>, <py_sfcl.CommandDataDefinition object at 0x06269AE0>) , Command count = 2713 ] 
11:25:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:25:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2714 ] 
11:25:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:25:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:25:58: Host Frequency set to 25000 KHz
11:25:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:25:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:58: ####CSD Registe 2.0 Values####
11:25:58: CSD_STRUCTURE                                 :0x1
11:25:58: Reserv1                                       :0x0
11:25:58: Time Access 1 TAAC                            :0xe
11:25:58: Time Access 2 NSAC*100                        :0x0
11:25:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:25:58: Card Command Classess CCC                     :0x5b5
11:25:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:58: DSR(driver stage register)  DSR_IMP           :0x0
11:25:58: Reserv2                                       :0x0
11:25:58: Device Size C_SIZE                            :0xedc8
11:25:58: Reserv3                                       :0x0
11:25:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:58: Reserv4                                       :0x0
11:25:58: Write Speed Factor R2W_FACTOR                 :0x2
11:25:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:58: FILE_FORMAT_GRP                               :0x0
11:25:58: COPY flag                                     :0x1
11:25:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:58: File_Format                                   :0x0
11:25:58: CRC                                           :0x0
11:25:58: ####CSD Registe Values####  

11:25:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:25:58: [GetSCRRegisterEntry] Passed
11:25:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:25:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:25:58: Data_Status_After Erases          : 0
11:25:58: CPRM Security Support             : No Security
11:25:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:25:58: Spec. Version                     : Version 3.0X
11:25:58: Extended Security Support         : Extended_Security_Not_Supported
11:25:58: Command Support                   : COMMAND_SUPPORT
11:25:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 2715 ] 
11:25:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 2716 ] 
11:25:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:25:58: [ SetBusWidth(0x4) , Command count = 2717 ] 
11:25:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:25:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2718 ] 
11:25:58: Protected Area Size 0x28000
11:25:58: Bus Width           2
11:25:58: Secure Mode         0
11:25:58: Speed  Class        4
11:25:58: Perf Move           0
11:25:58: Au Size             9
11:25:58: Erase Size          15
11:25:58: Erase Timeout       1
11:25:58: Erase offset        1
11:25:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:25:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:25:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2719 ] 
11:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:25:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:25:59: Host Frequency set to 100000 KHz
11:25:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:25:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:25:59: ####CSD Registe 2.0 Values####
11:25:59: CSD_STRUCTURE                                 :0x1
11:25:59: Reserv1                                       :0x0
11:25:59: Time Access 1 TAAC                            :0xe
11:25:59: Time Access 2 NSAC*100                        :0x0
11:25:59: Data Transfer Rate TRAN_SPEED                 :0xb
11:25:59: Card Command Classess CCC                     :0x5b5
11:25:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:25:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:25:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:25:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:25:59: DSR(driver stage register)  DSR_IMP           :0x0
11:25:59: Reserv2                                       :0x0
11:25:59: Device Size C_SIZE                            :0xedc8
11:25:59: Reserv3                                       :0x0
11:25:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:25:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:25:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:25:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:25:59: Reserv4                                       :0x0
11:25:59: Write Speed Factor R2W_FACTOR                 :0x2
11:25:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:25:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:25:59: FILE_FORMAT_GRP                               :0x0
11:25:59: COPY flag                                     :0x1
11:25:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:25:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:25:59: File_Format                                   :0x0
11:25:59: CRC                                           :0x0
11:25:59: ####CSD Registe Values####  

11:25:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698D0>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 2720 ] 
11:25:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:25:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269930>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 2721 ] 
11:25:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:25:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:25:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:25:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:25:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA80>, <py_sfcl.PySEnhancedCmdData object at 0x0626D390>, <None>, <py_sfcl.Command23 object at 0x0626D090>) , Command count = 2722 ] 
11:25:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:25:59: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:01: Host Frequency set to 25000 KHz
11:26:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:01: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269F60>, 0x0, True) , Command count = 2723 ] 
11:26:01: [GO18_globalSetVolt]### Host voltage value is set.
11:26:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269990>, 0x0, False) , Command count = 2724 ] 
11:26:01: [GO18_globalSetVolt]### Host voltage value is set.
11:26:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2725 ] 
11:26:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2726 ] 
11:26:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2727 ] 
11:26:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x06273CF0>) , Command count = 2728 ] 
11:26:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x0626D3C0>) , Command count = 2729 ] 
11:26:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2730 ] 
11:26:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:02: Host Frequency set to 25000 KHz
11:26:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:02: ####CSD Registe 2.0 Values####
11:26:02: CSD_STRUCTURE                                 :0x1
11:26:02: Reserv1                                       :0x0
11:26:02: Time Access 1 TAAC                            :0xe
11:26:02: Time Access 2 NSAC*100                        :0x0
11:26:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:02: Card Command Classess CCC                     :0x5b5
11:26:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:02: DSR(driver stage register)  DSR_IMP           :0x0
11:26:02: Reserv2                                       :0x0
11:26:02: Device Size C_SIZE                            :0xedc8
11:26:02: Reserv3                                       :0x0
11:26:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:02: Reserv4                                       :0x0
11:26:02: Write Speed Factor R2W_FACTOR                 :0x2
11:26:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:02: FILE_FORMAT_GRP                               :0x0
11:26:02: COPY flag                                     :0x1
11:26:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:02: File_Format                                   :0x0
11:26:02: CRC                                           :0x0
11:26:02: ####CSD Registe Values####  

11:26:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:02: [GetSCRRegisterEntry] Passed
11:26:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:02: Data_Status_After Erases          : 0
11:26:02: CPRM Security Support             : No Security
11:26:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:02: Spec. Version                     : Version 3.0X
11:26:02: Extended Security Support         : Extended_Security_Not_Supported
11:26:02: Command Support                   : COMMAND_SUPPORT
11:26:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DE0>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 2731 ] 
11:26:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626DBA0>) , Command count = 2732 ] 
11:26:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:02: [ SetBusWidth(0x4) , Command count = 2733 ] 
11:26:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2734 ] 
11:26:02: Protected Area Size 0x28000
11:26:02: Bus Width           2
11:26:02: Secure Mode         0
11:26:02: Speed  Class        4
11:26:02: Perf Move           0
11:26:02: Au Size             9
11:26:02: Erase Size          15
11:26:02: Erase Timeout       1
11:26:02: Erase offset        1
11:26:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2735 ] 
11:26:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:02: Host Frequency set to 100000 KHz
11:26:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:02: ####CSD Registe 2.0 Values####
11:26:02: CSD_STRUCTURE                                 :0x1
11:26:02: Reserv1                                       :0x0
11:26:02: Time Access 1 TAAC                            :0xe
11:26:02: Time Access 2 NSAC*100                        :0x0
11:26:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:02: Card Command Classess CCC                     :0x5b5
11:26:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:02: DSR(driver stage register)  DSR_IMP           :0x0
11:26:02: Reserv2                                       :0x0
11:26:02: Device Size C_SIZE                            :0xedc8
11:26:02: Reserv3                                       :0x0
11:26:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:02: Reserv4                                       :0x0
11:26:02: Write Speed Factor R2W_FACTOR                 :0x2
11:26:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:02: FILE_FORMAT_GRP                               :0x0
11:26:02: COPY flag                                     :0x1
11:26:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:02: File_Format                                   :0x0
11:26:02: CRC                                           :0x0
11:26:02: ####CSD Registe Values####  

11:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 2736 ] 
11:26:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268420>, <py_sfcl.CommandDataDefinition object at 0x0626D0F0>) , Command count = 2737 ] 
11:26:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273D80>, <py_sfcl.PySEnhancedCmdData object at 0x06273930>, <None>, <py_sfcl.Command23 object at 0x0626D960>) , Command count = 2738 ] 
11:26:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:03: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:05: Host Frequency set to 25000 KHz
11:26:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DE10>, 0x0, True) , Command count = 2739 ] 
11:26:05: [GO18_globalSetVolt]### Host voltage value is set.
11:26:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273480>, 0x0, False) , Command count = 2740 ] 
11:26:05: [GO18_globalSetVolt]### Host voltage value is set.
11:26:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2741 ] 
11:26:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2742 ] 
11:26:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2743 ] 
11:26:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06276D20>) , Command count = 2744 ] 
11:26:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x0626D9C0>) , Command count = 2745 ] 
11:26:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2746 ] 
11:26:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:05: Host Frequency set to 25000 KHz
11:26:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:05: ####CSD Registe 2.0 Values####
11:26:05: CSD_STRUCTURE                                 :0x1
11:26:05: Reserv1                                       :0x0
11:26:05: Time Access 1 TAAC                            :0xe
11:26:05: Time Access 2 NSAC*100                        :0x0
11:26:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:05: Card Command Classess CCC                     :0x5b5
11:26:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:05: DSR(driver stage register)  DSR_IMP           :0x0
11:26:05: Reserv2                                       :0x0
11:26:05: Device Size C_SIZE                            :0xedc8
11:26:05: Reserv3                                       :0x0
11:26:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:05: Reserv4                                       :0x0
11:26:05: Write Speed Factor R2W_FACTOR                 :0x2
11:26:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:05: FILE_FORMAT_GRP                               :0x0
11:26:05: COPY flag                                     :0x1
11:26:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:05: File_Format                                   :0x0
11:26:05: CRC                                           :0x0
11:26:05: ####CSD Registe Values####  

11:26:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:05: [GetSCRRegisterEntry] Passed
11:26:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:05: Data_Status_After Erases          : 0
11:26:05: CPRM Security Support             : No Security
11:26:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:05: Spec. Version                     : Version 3.0X
11:26:05: Extended Security Support         : Extended_Security_Not_Supported
11:26:05: Command Support                   : COMMAND_SUPPORT
11:26:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 2747 ] 
11:26:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626DED0>) , Command count = 2748 ] 
11:26:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:05: [ SetBusWidth(0x4) , Command count = 2749 ] 
11:26:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2750 ] 
11:26:05: Protected Area Size 0x28000
11:26:05: Bus Width           2
11:26:05: Secure Mode         0
11:26:05: Speed  Class        4
11:26:05: Perf Move           0
11:26:05: Au Size             9
11:26:05: Erase Size          15
11:26:05: Erase Timeout       1
11:26:05: Erase offset        1
11:26:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2751 ] 
11:26:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:06: Host Frequency set to 100000 KHz
11:26:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:06: ####CSD Registe 2.0 Values####
11:26:06: CSD_STRUCTURE                                 :0x1
11:26:06: Reserv1                                       :0x0
11:26:06: Time Access 1 TAAC                            :0xe
11:26:06: Time Access 2 NSAC*100                        :0x0
11:26:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:06: Card Command Classess CCC                     :0x5b5
11:26:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:06: DSR(driver stage register)  DSR_IMP           :0x0
11:26:06: Reserv2                                       :0x0
11:26:06: Device Size C_SIZE                            :0xedc8
11:26:06: Reserv3                                       :0x0
11:26:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:06: Reserv4                                       :0x0
11:26:06: Write Speed Factor R2W_FACTOR                 :0x2
11:26:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:06: FILE_FORMAT_GRP                               :0x0
11:26:06: COPY flag                                     :0x1
11:26:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:06: File_Format                                   :0x0
11:26:06: CRC                                           :0x0
11:26:06: ####CSD Registe Values####  

11:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 2752 ] 
11:26:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DFC0>, <py_sfcl.CommandDataDefinition object at 0x06276300>) , Command count = 2753 ] 
11:26:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762A0>, <py_sfcl.PySEnhancedCmdData object at 0x06276960>, <None>, <py_sfcl.Command23 object at 0x062735A0>) , Command count = 2754 ] 
11:26:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:08: Host Frequency set to 25000 KHz
11:26:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268180>, 0x0, True) , Command count = 2755 ] 
11:26:08: [GO18_globalSetVolt]### Host voltage value is set.
11:26:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276450>, 0x0, False) , Command count = 2756 ] 
11:26:08: [GO18_globalSetVolt]### Host voltage value is set.
11:26:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2757 ] 
11:26:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2758 ] 
11:26:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2759 ] 
11:26:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062760C0>, <py_sfcl.CommandDataDefinition object at 0x062768D0>) , Command count = 2760 ] 
11:26:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06273AE0>) , Command count = 2761 ] 
11:26:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2762 ] 
11:26:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:09: Host Frequency set to 25000 KHz
11:26:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:09: ####CSD Registe 2.0 Values####
11:26:09: CSD_STRUCTURE                                 :0x1
11:26:09: Reserv1                                       :0x0
11:26:09: Time Access 1 TAAC                            :0xe
11:26:09: Time Access 2 NSAC*100                        :0x0
11:26:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:09: Card Command Classess CCC                     :0x5b5
11:26:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:09: DSR(driver stage register)  DSR_IMP           :0x0
11:26:09: Reserv2                                       :0x0
11:26:09: Device Size C_SIZE                            :0xedc8
11:26:09: Reserv3                                       :0x0
11:26:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:09: Reserv4                                       :0x0
11:26:09: Write Speed Factor R2W_FACTOR                 :0x2
11:26:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:09: FILE_FORMAT_GRP                               :0x0
11:26:09: COPY flag                                     :0x1
11:26:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:09: File_Format                                   :0x0
11:26:09: CRC                                           :0x0
11:26:09: ####CSD Registe Values####  

11:26:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:09: [GetSCRRegisterEntry] Passed
11:26:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:09: Data_Status_After Erases          : 0
11:26:09: CPRM Security Support             : No Security
11:26:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:09: Spec. Version                     : Version 3.0X
11:26:09: Extended Security Support         : Extended_Security_Not_Supported
11:26:09: Command Support                   : COMMAND_SUPPORT
11:26:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x06276AE0>) , Command count = 2763 ] 
11:26:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062765A0>, <py_sfcl.CommandDataDefinition object at 0x062765D0>) , Command count = 2764 ] 
11:26:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:09: [ SetBusWidth(0x4) , Command count = 2765 ] 
11:26:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2766 ] 
11:26:09: Protected Area Size 0x28000
11:26:09: Bus Width           2
11:26:09: Secure Mode         0
11:26:09: Speed  Class        4
11:26:09: Perf Move           0
11:26:09: Au Size             9
11:26:09: Erase Size          15
11:26:09: Erase Timeout       1
11:26:09: Erase offset        1
11:26:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2767 ] 
11:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:09: Host Frequency set to 100000 KHz
11:26:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:09: ####CSD Registe 2.0 Values####
11:26:09: CSD_STRUCTURE                                 :0x1
11:26:09: Reserv1                                       :0x0
11:26:09: Time Access 1 TAAC                            :0xe
11:26:09: Time Access 2 NSAC*100                        :0x0
11:26:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:09: Card Command Classess CCC                     :0x5b5
11:26:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:09: DSR(driver stage register)  DSR_IMP           :0x0
11:26:09: Reserv2                                       :0x0
11:26:09: Device Size C_SIZE                            :0xedc8
11:26:09: Reserv3                                       :0x0
11:26:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:09: Reserv4                                       :0x0
11:26:09: Write Speed Factor R2W_FACTOR                 :0x2
11:26:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:09: FILE_FORMAT_GRP                               :0x0
11:26:09: COPY flag                                     :0x1
11:26:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:09: File_Format                                   :0x0
11:26:09: CRC                                           :0x0
11:26:09: ####CSD Registe Values####  

11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764E0>, <py_sfcl.CommandDataDefinition object at 0x06273570>) , Command count = 2768 ] 
11:26:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BD0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 2769 ] 
11:26:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273A20>, <py_sfcl.PySEnhancedCmdData object at 0x06273270>, <None>, <py_sfcl.Command23 object at 0x062761E0>) , Command count = 2770 ] 
11:26:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:12: Host Frequency set to 25000 KHz
11:26:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273330>, 0x0, True) , Command count = 2771 ] 
11:26:12: [GO18_globalSetVolt]### Host voltage value is set.
11:26:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273810>, 0x0, False) , Command count = 2772 ] 
11:26:12: [GO18_globalSetVolt]### Host voltage value is set.
11:26:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2773 ] 
11:26:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2774 ] 
11:26:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2775 ] 
11:26:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC90>, <py_sfcl.CommandDataDefinition object at 0x06276360>) , Command count = 2776 ] 
11:26:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 2777 ] 
11:26:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2778 ] 
11:26:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:12: Host Frequency set to 25000 KHz
11:26:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:12: ####CSD Registe 2.0 Values####
11:26:12: CSD_STRUCTURE                                 :0x1
11:26:12: Reserv1                                       :0x0
11:26:12: Time Access 1 TAAC                            :0xe
11:26:12: Time Access 2 NSAC*100                        :0x0
11:26:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:12: Card Command Classess CCC                     :0x5b5
11:26:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:12: DSR(driver stage register)  DSR_IMP           :0x0
11:26:12: Reserv2                                       :0x0
11:26:12: Device Size C_SIZE                            :0xedc8
11:26:12: Reserv3                                       :0x0
11:26:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:12: Reserv4                                       :0x0
11:26:12: Write Speed Factor R2W_FACTOR                 :0x2
11:26:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:12: FILE_FORMAT_GRP                               :0x0
11:26:12: COPY flag                                     :0x1
11:26:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:12: File_Format                                   :0x0
11:26:12: CRC                                           :0x0
11:26:12: ####CSD Registe Values####  

11:26:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:12: [GetSCRRegisterEntry] Passed
11:26:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:12: Data_Status_After Erases          : 0
11:26:12: CPRM Security Support             : No Security
11:26:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:12: Spec. Version                     : Version 3.0X
11:26:12: Extended Security Support         : Extended_Security_Not_Supported
11:26:12: Command Support                   : COMMAND_SUPPORT
11:26:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB10>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 2779 ] 
11:26:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276DB0>) , Command count = 2780 ] 
11:26:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:12: [ SetBusWidth(0x4) , Command count = 2781 ] 
11:26:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2782 ] 
11:26:12: Protected Area Size 0x28000
11:26:12: Bus Width           2
11:26:12: Secure Mode         0
11:26:12: Speed  Class        4
11:26:12: Perf Move           0
11:26:12: Au Size             9
11:26:12: Erase Size          15
11:26:12: Erase Timeout       1
11:26:12: Erase offset        1
11:26:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2783 ] 
11:26:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:12: Host Frequency set to 100000 KHz
11:26:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:12: ####CSD Registe 2.0 Values####
11:26:12: CSD_STRUCTURE                                 :0x1
11:26:12: Reserv1                                       :0x0
11:26:12: Time Access 1 TAAC                            :0xe
11:26:12: Time Access 2 NSAC*100                        :0x0
11:26:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:12: Card Command Classess CCC                     :0x5b5
11:26:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:13: DSR(driver stage register)  DSR_IMP           :0x0
11:26:13: Reserv2                                       :0x0
11:26:13: Device Size C_SIZE                            :0xedc8
11:26:13: Reserv3                                       :0x0
11:26:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:13: Reserv4                                       :0x0
11:26:13: Write Speed Factor R2W_FACTOR                 :0x2
11:26:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:13: FILE_FORMAT_GRP                               :0x0
11:26:13: COPY flag                                     :0x1
11:26:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:13: File_Format                                   :0x0
11:26:13: CRC                                           :0x0
11:26:13: ####CSD Registe Values####  

11:26:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 2784 ] 
11:26:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D0C0>, <py_sfcl.CommandDataDefinition object at 0x06276B70>) , Command count = 2785 ] 
11:26:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A180>, <py_sfcl.PySEnhancedCmdData object at 0x0627A720>, <None>, <py_sfcl.Command23 object at 0x06273F90>) , Command count = 2786 ] 
11:26:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:15: Host Frequency set to 25000 KHz
11:26:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x062730C0>, 0x0, True) , Command count = 2787 ] 
11:26:15: [GO18_globalSetVolt]### Host voltage value is set.
11:26:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273990>, 0x0, False) , Command count = 2788 ] 
11:26:15: [GO18_globalSetVolt]### Host voltage value is set.
11:26:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2789 ] 
11:26:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2790 ] 
11:26:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2791 ] 
11:26:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD20>, <py_sfcl.CommandDataDefinition object at 0x06273DE0>) , Command count = 2792 ] 
11:26:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 2793 ] 
11:26:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2794 ] 
11:26:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:16: Host Frequency set to 25000 KHz
11:26:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:16: ####CSD Registe 2.0 Values####
11:26:16: CSD_STRUCTURE                                 :0x1
11:26:16: Reserv1                                       :0x0
11:26:16: Time Access 1 TAAC                            :0xe
11:26:16: Time Access 2 NSAC*100                        :0x0
11:26:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:16: Card Command Classess CCC                     :0x5b5
11:26:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:16: DSR(driver stage register)  DSR_IMP           :0x0
11:26:16: Reserv2                                       :0x0
11:26:16: Device Size C_SIZE                            :0xedc8
11:26:16: Reserv3                                       :0x0
11:26:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:16: Reserv4                                       :0x0
11:26:16: Write Speed Factor R2W_FACTOR                 :0x2
11:26:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:16: FILE_FORMAT_GRP                               :0x0
11:26:16: COPY flag                                     :0x1
11:26:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:16: File_Format                                   :0x0
11:26:16: CRC                                           :0x0
11:26:16: ####CSD Registe Values####  

11:26:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:16: [GetSCRRegisterEntry] Passed
11:26:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:16: Data_Status_After Erases          : 0
11:26:16: CPRM Security Support             : No Security
11:26:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:16: Spec. Version                     : Version 3.0X
11:26:16: Extended Security Support         : Extended_Security_Not_Supported
11:26:16: Command Support                   : COMMAND_SUPPORT
11:26:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273540>, <py_sfcl.CommandDataDefinition object at 0x06276720>) , Command count = 2795 ] 
11:26:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276750>, <py_sfcl.CommandDataDefinition object at 0x06276510>) , Command count = 2796 ] 
11:26:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:16: [ SetBusWidth(0x4) , Command count = 2797 ] 
11:26:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2798 ] 
11:26:16: Protected Area Size 0x28000
11:26:16: Bus Width           2
11:26:16: Secure Mode         0
11:26:16: Speed  Class        4
11:26:16: Perf Move           0
11:26:16: Au Size             9
11:26:16: Erase Size          15
11:26:16: Erase Timeout       1
11:26:16: Erase offset        1
11:26:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2799 ] 
11:26:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:16: Host Frequency set to 100000 KHz
11:26:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:16: ####CSD Registe 2.0 Values####
11:26:16: CSD_STRUCTURE                                 :0x1
11:26:16: Reserv1                                       :0x0
11:26:16: Time Access 1 TAAC                            :0xe
11:26:16: Time Access 2 NSAC*100                        :0x0
11:26:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:16: Card Command Classess CCC                     :0x5b5
11:26:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:16: DSR(driver stage register)  DSR_IMP           :0x0
11:26:16: Reserv2                                       :0x0
11:26:16: Device Size C_SIZE                            :0xedc8
11:26:16: Reserv3                                       :0x0
11:26:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:16: Reserv4                                       :0x0
11:26:16: Write Speed Factor R2W_FACTOR                 :0x2
11:26:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:16: FILE_FORMAT_GRP                               :0x0
11:26:16: COPY flag                                     :0x1
11:26:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:16: File_Format                                   :0x0
11:26:16: CRC                                           :0x0
11:26:16: ####CSD Registe Values####  

11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D270>, <py_sfcl.CommandDataDefinition object at 0x0627DA80>) , Command count = 2800 ] 
11:26:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF120>, <py_sfcl.CommandDataDefinition object at 0x06276030>) , Command count = 2801 ] 
11:26:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A420>, <py_sfcl.PySEnhancedCmdData object at 0x0627A5D0>, <None>, <py_sfcl.Command23 object at 0x0627A480>) , Command count = 2802 ] 
11:26:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:19: Host Frequency set to 25000 KHz
11:26:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276BA0>, 0x0, True) , Command count = 2803 ] 
11:26:19: [GO18_globalSetVolt]### Host voltage value is set.
11:26:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273B40>, 0x0, False) , Command count = 2804 ] 
11:26:19: [GO18_globalSetVolt]### Host voltage value is set.
11:26:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2805 ] 
11:26:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2806 ] 
11:26:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2807 ] 
11:26:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x062761B0>) , Command count = 2808 ] 
11:26:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 2809 ] 
11:26:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2810 ] 
11:26:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:19: Host Frequency set to 25000 KHz
11:26:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:19: ####CSD Registe 2.0 Values####
11:26:19: CSD_STRUCTURE                                 :0x1
11:26:19: Reserv1                                       :0x0
11:26:19: Time Access 1 TAAC                            :0xe
11:26:19: Time Access 2 NSAC*100                        :0x0
11:26:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:19: Card Command Classess CCC                     :0x5b5
11:26:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:19: DSR(driver stage register)  DSR_IMP           :0x0
11:26:19: Reserv2                                       :0x0
11:26:19: Device Size C_SIZE                            :0xedc8
11:26:19: Reserv3                                       :0x0
11:26:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:19: Reserv4                                       :0x0
11:26:19: Write Speed Factor R2W_FACTOR                 :0x2
11:26:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:19: FILE_FORMAT_GRP                               :0x0
11:26:19: COPY flag                                     :0x1
11:26:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:19: File_Format                                   :0x0
11:26:19: CRC                                           :0x0
11:26:19: ####CSD Registe Values####  

11:26:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:19: [GetSCRRegisterEntry] Passed
11:26:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:19: Data_Status_After Erases          : 0
11:26:19: CPRM Security Support             : No Security
11:26:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:19: Spec. Version                     : Version 3.0X
11:26:19: Extended Security Support         : Extended_Security_Not_Supported
11:26:19: Command Support                   : COMMAND_SUPPORT
11:26:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276EA0>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 2811 ] 
11:26:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 2812 ] 
11:26:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:19: [ SetBusWidth(0x4) , Command count = 2813 ] 
11:26:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2814 ] 
11:26:19: Protected Area Size 0x28000
11:26:19: Bus Width           2
11:26:19: Secure Mode         0
11:26:19: Speed  Class        4
11:26:19: Perf Move           0
11:26:19: Au Size             9
11:26:19: Erase Size          15
11:26:19: Erase Timeout       1
11:26:19: Erase offset        1
11:26:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2815 ] 
11:26:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:19: Host Frequency set to 100000 KHz
11:26:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:19: ####CSD Registe 2.0 Values####
11:26:19: CSD_STRUCTURE                                 :0x1
11:26:19: Reserv1                                       :0x0
11:26:19: Time Access 1 TAAC                            :0xe
11:26:19: Time Access 2 NSAC*100                        :0x0
11:26:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:19: Card Command Classess CCC                     :0x5b5
11:26:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:20: DSR(driver stage register)  DSR_IMP           :0x0
11:26:20: Reserv2                                       :0x0
11:26:20: Device Size C_SIZE                            :0xedc8
11:26:20: Reserv3                                       :0x0
11:26:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:20: Reserv4                                       :0x0
11:26:20: Write Speed Factor R2W_FACTOR                 :0x2
11:26:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:20: FILE_FORMAT_GRP                               :0x0
11:26:20: COPY flag                                     :0x1
11:26:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:20: File_Format                                   :0x0
11:26:20: CRC                                           :0x0
11:26:20: ####CSD Registe Values####  

11:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269360>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 2816 ] 
11:26:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276990>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 2817 ] 
11:26:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A7E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A2A0>, <None>, <py_sfcl.Command23 object at 0x0627A6C0>) , Command count = 2818 ] 
11:26:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:22: Host Frequency set to 25000 KHz
11:26:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x062767E0>, 0x0, True) , Command count = 2819 ] 
11:26:22: [GO18_globalSetVolt]### Host voltage value is set.
11:26:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x053DB4B0>, 0x0, False) , Command count = 2820 ] 
11:26:22: [GO18_globalSetVolt]### Host voltage value is set.
11:26:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2821 ] 
11:26:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2822 ] 
11:26:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2823 ] 
11:26:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 2824 ] 
11:26:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x0627A390>) , Command count = 2825 ] 
11:26:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2826 ] 
11:26:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:23: Host Frequency set to 25000 KHz
11:26:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:23: ####CSD Registe 2.0 Values####
11:26:23: CSD_STRUCTURE                                 :0x1
11:26:23: Reserv1                                       :0x0
11:26:23: Time Access 1 TAAC                            :0xe
11:26:23: Time Access 2 NSAC*100                        :0x0
11:26:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:23: Card Command Classess CCC                     :0x5b5
11:26:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:23: DSR(driver stage register)  DSR_IMP           :0x0
11:26:23: Reserv2                                       :0x0
11:26:23: Device Size C_SIZE                            :0xedc8
11:26:23: Reserv3                                       :0x0
11:26:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:23: Reserv4                                       :0x0
11:26:23: Write Speed Factor R2W_FACTOR                 :0x2
11:26:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:23: FILE_FORMAT_GRP                               :0x0
11:26:23: COPY flag                                     :0x1
11:26:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:23: File_Format                                   :0x0
11:26:23: CRC                                           :0x0
11:26:23: ####CSD Registe Values####  

11:26:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:23: [GetSCRRegisterEntry] Passed
11:26:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:23: Data_Status_After Erases          : 0
11:26:23: CPRM Security Support             : No Security
11:26:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:23: Spec. Version                     : Version 3.0X
11:26:23: Extended Security Support         : Extended_Security_Not_Supported
11:26:23: Command Support                   : COMMAND_SUPPORT
11:26:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 2827 ] 
11:26:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627D090>) , Command count = 2828 ] 
11:26:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:23: [ SetBusWidth(0x4) , Command count = 2829 ] 
11:26:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2830 ] 
11:26:23: Protected Area Size 0x28000
11:26:23: Bus Width           2
11:26:23: Secure Mode         0
11:26:23: Speed  Class        4
11:26:23: Perf Move           0
11:26:23: Au Size             9
11:26:23: Erase Size          15
11:26:23: Erase Timeout       1
11:26:23: Erase offset        1
11:26:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2831 ] 
11:26:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:23: Host Frequency set to 100000 KHz
11:26:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:23: ####CSD Registe 2.0 Values####
11:26:23: CSD_STRUCTURE                                 :0x1
11:26:23: Reserv1                                       :0x0
11:26:23: Time Access 1 TAAC                            :0xe
11:26:23: Time Access 2 NSAC*100                        :0x0
11:26:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:23: Card Command Classess CCC                     :0x5b5
11:26:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:23: DSR(driver stage register)  DSR_IMP           :0x0
11:26:23: Reserv2                                       :0x0
11:26:23: Device Size C_SIZE                            :0xedc8
11:26:23: Reserv3                                       :0x0
11:26:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:23: Reserv4                                       :0x0
11:26:23: Write Speed Factor R2W_FACTOR                 :0x2
11:26:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:23: FILE_FORMAT_GRP                               :0x0
11:26:23: COPY flag                                     :0x1
11:26:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:23: File_Format                                   :0x0
11:26:23: CRC                                           :0x0
11:26:23: ####CSD Registe Values####  

11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627DB40>) , Command count = 2832 ] 
11:26:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x06276150>) , Command count = 2833 ] 
11:26:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A930>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB70>, <None>, <py_sfcl.Command23 object at 0x0627ADE0>) , Command count = 2834 ] 
11:26:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:24: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:26: Host Frequency set to 25000 KHz
11:26:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:26: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276540>, 0x0, True) , Command count = 2835 ] 
11:26:26: [GO18_globalSetVolt]### Host voltage value is set.
11:26:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DAE0>, 0x0, False) , Command count = 2836 ] 
11:26:26: [GO18_globalSetVolt]### Host voltage value is set.
11:26:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2837 ] 
11:26:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2838 ] 
11:26:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2839 ] 
11:26:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF2D0>, <py_sfcl.CommandDataDefinition object at 0x06273600>) , Command count = 2840 ] 
11:26:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x06216B40>) , Command count = 2841 ] 
11:26:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2842 ] 
11:26:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:26: Host Frequency set to 25000 KHz
11:26:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:26: ####CSD Registe 2.0 Values####
11:26:26: CSD_STRUCTURE                                 :0x1
11:26:26: Reserv1                                       :0x0
11:26:26: Time Access 1 TAAC                            :0xe
11:26:26: Time Access 2 NSAC*100                        :0x0
11:26:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:26: Card Command Classess CCC                     :0x5b5
11:26:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:26: DSR(driver stage register)  DSR_IMP           :0x0
11:26:26: Reserv2                                       :0x0
11:26:26: Device Size C_SIZE                            :0xedc8
11:26:26: Reserv3                                       :0x0
11:26:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:26: Reserv4                                       :0x0
11:26:26: Write Speed Factor R2W_FACTOR                 :0x2
11:26:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:26: FILE_FORMAT_GRP                               :0x0
11:26:26: COPY flag                                     :0x1
11:26:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:26: File_Format                                   :0x0
11:26:26: CRC                                           :0x0
11:26:26: ####CSD Registe Values####  

11:26:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:26: [GetSCRRegisterEntry] Passed
11:26:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:26: Data_Status_After Erases          : 0
11:26:26: CPRM Security Support             : No Security
11:26:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:26: Spec. Version                     : Version 3.0X
11:26:26: Extended Security Support         : Extended_Security_Not_Supported
11:26:26: Command Support                   : COMMAND_SUPPORT
11:26:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 2843 ] 
11:26:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x062168D0>) , Command count = 2844 ] 
11:26:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:26: [ SetBusWidth(0x4) , Command count = 2845 ] 
11:26:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062731B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2846 ] 
11:26:26: Protected Area Size 0x28000
11:26:26: Bus Width           2
11:26:26: Secure Mode         0
11:26:26: Speed  Class        4
11:26:26: Perf Move           0
11:26:26: Au Size             9
11:26:26: Erase Size          15
11:26:26: Erase Timeout       1
11:26:26: Erase offset        1
11:26:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2847 ] 
11:26:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:26: Host Frequency set to 100000 KHz
11:26:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:26: ####CSD Registe 2.0 Values####
11:26:26: CSD_STRUCTURE                                 :0x1
11:26:26: Reserv1                                       :0x0
11:26:26: Time Access 1 TAAC                            :0xe
11:26:26: Time Access 2 NSAC*100                        :0x0
11:26:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:26: Card Command Classess CCC                     :0x5b5
11:26:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:26: DSR(driver stage register)  DSR_IMP           :0x0
11:26:26: Reserv2                                       :0x0
11:26:26: Device Size C_SIZE                            :0xedc8
11:26:26: Reserv3                                       :0x0
11:26:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:27: Reserv4                                       :0x0
11:26:27: Write Speed Factor R2W_FACTOR                 :0x2
11:26:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:27: FILE_FORMAT_GRP                               :0x0
11:26:27: COPY flag                                     :0x1
11:26:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:27: File_Format                                   :0x0
11:26:27: CRC                                           :0x0
11:26:27: ####CSD Registe Values####  

11:26:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276CC0>, <py_sfcl.CommandDataDefinition object at 0x053EF420>) , Command count = 2848 ] 
11:26:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A9F0>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 2849 ] 
11:26:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AFB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF90>, <py_sfcl.PySEnhancedCmdData object at 0x0627ADB0>, <None>, <py_sfcl.Command23 object at 0x0627AA80>) , Command count = 2850 ] 
11:26:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:29: Host Frequency set to 25000 KHz
11:26:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFCF0>, 0x0, True) , Command count = 2851 ] 
11:26:29: [GO18_globalSetVolt]### Host voltage value is set.
11:26:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x062683F0>, 0x0, False) , Command count = 2852 ] 
11:26:29: [GO18_globalSetVolt]### Host voltage value is set.
11:26:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2853 ] 
11:26:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2854 ] 
11:26:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2855 ] 
11:26:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268090>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 2856 ] 
11:26:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627AF30>) , Command count = 2857 ] 
11:26:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2858 ] 
11:26:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:29: Host Frequency set to 25000 KHz
11:26:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:29: ####CSD Registe 2.0 Values####
11:26:29: CSD_STRUCTURE                                 :0x1
11:26:29: Reserv1                                       :0x0
11:26:29: Time Access 1 TAAC                            :0xe
11:26:29: Time Access 2 NSAC*100                        :0x0
11:26:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:29: Card Command Classess CCC                     :0x5b5
11:26:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:29: DSR(driver stage register)  DSR_IMP           :0x0
11:26:29: Reserv2                                       :0x0
11:26:29: Device Size C_SIZE                            :0xedc8
11:26:29: Reserv3                                       :0x0
11:26:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:29: Reserv4                                       :0x0
11:26:29: Write Speed Factor R2W_FACTOR                 :0x2
11:26:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:29: FILE_FORMAT_GRP                               :0x0
11:26:29: COPY flag                                     :0x1
11:26:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:29: File_Format                                   :0x0
11:26:29: CRC                                           :0x0
11:26:29: ####CSD Registe Values####  

11:26:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:29: [GetSCRRegisterEntry] Passed
11:26:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:29: Data_Status_After Erases          : 0
11:26:29: CPRM Security Support             : No Security
11:26:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:29: Spec. Version                     : Version 3.0X
11:26:29: Extended Security Support         : Extended_Security_Not_Supported
11:26:29: Command Support                   : COMMAND_SUPPORT
11:26:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D930>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 2859 ] 
11:26:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 2860 ] 
11:26:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:29: [ SetBusWidth(0x4) , Command count = 2861 ] 
11:26:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2862 ] 
11:26:30: Protected Area Size 0x28000
11:26:30: Bus Width           2
11:26:30: Secure Mode         0
11:26:30: Speed  Class        4
11:26:30: Perf Move           0
11:26:30: Au Size             9
11:26:30: Erase Size          15
11:26:30: Erase Timeout       1
11:26:30: Erase offset        1
11:26:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2863 ] 
11:26:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:30: Host Frequency set to 100000 KHz
11:26:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:30: ####CSD Registe 2.0 Values####
11:26:30: CSD_STRUCTURE                                 :0x1
11:26:30: Reserv1                                       :0x0
11:26:30: Time Access 1 TAAC                            :0xe
11:26:30: Time Access 2 NSAC*100                        :0x0
11:26:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:30: Card Command Classess CCC                     :0x5b5
11:26:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:30: DSR(driver stage register)  DSR_IMP           :0x0
11:26:30: Reserv2                                       :0x0
11:26:30: Device Size C_SIZE                            :0xedc8
11:26:30: Reserv3                                       :0x0
11:26:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:30: Reserv4                                       :0x0
11:26:30: Write Speed Factor R2W_FACTOR                 :0x2
11:26:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:30: FILE_FORMAT_GRP                               :0x0
11:26:30: COPY flag                                     :0x1
11:26:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:30: File_Format                                   :0x0
11:26:30: CRC                                           :0x0
11:26:30: ####CSD Registe Values####  

11:26:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 2864 ] 
11:26:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C90>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 2865 ] 
11:26:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A1B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627ABA0>, <None>, <py_sfcl.Command23 object at 0x0627ACC0>) , Command count = 2866 ] 
11:26:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:33: Host Frequency set to 25000 KHz
11:26:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F00>, 0x0, True) , Command count = 2867 ] 
11:26:33: [GO18_globalSetVolt]### Host voltage value is set.
11:26:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216E10>, 0x0, False) , Command count = 2868 ] 
11:26:33: [GO18_globalSetVolt]### Host voltage value is set.
11:26:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2869 ] 
11:26:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2870 ] 
11:26:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2871 ] 
11:26:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC30>, <py_sfcl.CommandDataDefinition object at 0x0627D030>) , Command count = 2872 ] 
11:26:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A630>, <py_sfcl.CommandDataDefinition object at 0x06268030>) , Command count = 2873 ] 
11:26:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2874 ] 
11:26:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:33: Host Frequency set to 25000 KHz
11:26:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:33: ####CSD Registe 2.0 Values####
11:26:33: CSD_STRUCTURE                                 :0x1
11:26:33: Reserv1                                       :0x0
11:26:33: Time Access 1 TAAC                            :0xe
11:26:33: Time Access 2 NSAC*100                        :0x0
11:26:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:33: Card Command Classess CCC                     :0x5b5
11:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:33: DSR(driver stage register)  DSR_IMP           :0x0
11:26:33: Reserv2                                       :0x0
11:26:33: Device Size C_SIZE                            :0xedc8
11:26:33: Reserv3                                       :0x0
11:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:33: Reserv4                                       :0x0
11:26:33: Write Speed Factor R2W_FACTOR                 :0x2
11:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:33: FILE_FORMAT_GRP                               :0x0
11:26:33: COPY flag                                     :0x1
11:26:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:33: File_Format                                   :0x0
11:26:33: CRC                                           :0x0
11:26:33: ####CSD Registe Values####  

11:26:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:33: [GetSCRRegisterEntry] Passed
11:26:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:33: Data_Status_After Erases          : 0
11:26:33: CPRM Security Support             : No Security
11:26:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:33: Spec. Version                     : Version 3.0X
11:26:33: Extended Security Support         : Extended_Security_Not_Supported
11:26:33: Command Support                   : COMMAND_SUPPORT
11:26:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 2875 ] 
11:26:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627D1E0>) , Command count = 2876 ] 
11:26:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:33: [ SetBusWidth(0x4) , Command count = 2877 ] 
11:26:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2878 ] 
11:26:33: Protected Area Size 0x28000
11:26:33: Bus Width           2
11:26:33: Secure Mode         0
11:26:33: Speed  Class        4
11:26:33: Perf Move           0
11:26:33: Au Size             9
11:26:33: Erase Size          15
11:26:33: Erase Timeout       1
11:26:33: Erase offset        1
11:26:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2879 ] 
11:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:33: Host Frequency set to 100000 KHz
11:26:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:33: ####CSD Registe 2.0 Values####
11:26:33: CSD_STRUCTURE                                 :0x1
11:26:33: Reserv1                                       :0x0
11:26:33: Time Access 1 TAAC                            :0xe
11:26:33: Time Access 2 NSAC*100                        :0x0
11:26:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:33: Card Command Classess CCC                     :0x5b5
11:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:33: DSR(driver stage register)  DSR_IMP           :0x0
11:26:33: Reserv2                                       :0x0
11:26:33: Device Size C_SIZE                            :0xedc8
11:26:33: Reserv3                                       :0x0
11:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:33: Reserv4                                       :0x0
11:26:33: Write Speed Factor R2W_FACTOR                 :0x2
11:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:34: FILE_FORMAT_GRP                               :0x0
11:26:34: COPY flag                                     :0x1
11:26:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:34: File_Format                                   :0x0
11:26:34: CRC                                           :0x0
11:26:34: ####CSD Registe Values####  

11:26:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D540>, <py_sfcl.CommandDataDefinition object at 0x0627AE70>) , Command count = 2880 ] 
11:26:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D720>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 2881 ] 
11:26:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269180>, <py_sfcl.PySEnhancedCmdData object at 0x06269300>, <None>, <py_sfcl.Command23 object at 0x0627AF00>) , Command count = 2882 ] 
11:26:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:36: Host Frequency set to 25000 KHz
11:26:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AB10>, 0x0, True) , Command count = 2883 ] 
11:26:36: [GO18_globalSetVolt]### Host voltage value is set.
11:26:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216E70>, 0x0, False) , Command count = 2884 ] 
11:26:36: [GO18_globalSetVolt]### Host voltage value is set.
11:26:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2885 ] 
11:26:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2886 ] 
11:26:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2887 ] 
11:26:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268750>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 2888 ] 
11:26:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216810>, <py_sfcl.CommandDataDefinition object at 0x0627D210>) , Command count = 2889 ] 
11:26:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2890 ] 
11:26:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:37: Host Frequency set to 25000 KHz
11:26:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:37: ####CSD Registe 2.0 Values####
11:26:37: CSD_STRUCTURE                                 :0x1
11:26:37: Reserv1                                       :0x0
11:26:37: Time Access 1 TAAC                            :0xe
11:26:37: Time Access 2 NSAC*100                        :0x0
11:26:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:37: Card Command Classess CCC                     :0x5b5
11:26:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:37: DSR(driver stage register)  DSR_IMP           :0x0
11:26:37: Reserv2                                       :0x0
11:26:37: Device Size C_SIZE                            :0xedc8
11:26:37: Reserv3                                       :0x0
11:26:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:37: Reserv4                                       :0x0
11:26:37: Write Speed Factor R2W_FACTOR                 :0x2
11:26:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:37: FILE_FORMAT_GRP                               :0x0
11:26:37: COPY flag                                     :0x1
11:26:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:37: File_Format                                   :0x0
11:26:37: CRC                                           :0x0
11:26:37: ####CSD Registe Values####  

11:26:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:37: [GetSCRRegisterEntry] Passed
11:26:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:37: Data_Status_After Erases          : 0
11:26:37: CPRM Security Support             : No Security
11:26:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:37: Spec. Version                     : Version 3.0X
11:26:37: Extended Security Support         : Extended_Security_Not_Supported
11:26:37: Command Support                   : COMMAND_SUPPORT
11:26:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A20>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 2891 ] 
11:26:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C60>, <py_sfcl.CommandDataDefinition object at 0x06216570>) , Command count = 2892 ] 
11:26:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:37: [ SetBusWidth(0x4) , Command count = 2893 ] 
11:26:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2894 ] 
11:26:37: Protected Area Size 0x28000
11:26:37: Bus Width           2
11:26:37: Secure Mode         0
11:26:37: Speed  Class        4
11:26:37: Perf Move           0
11:26:37: Au Size             9
11:26:37: Erase Size          15
11:26:37: Erase Timeout       1
11:26:37: Erase offset        1
11:26:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2895 ] 
11:26:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:37: Host Frequency set to 100000 KHz
11:26:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:37: ####CSD Registe 2.0 Values####
11:26:37: CSD_STRUCTURE                                 :0x1
11:26:37: Reserv1                                       :0x0
11:26:37: Time Access 1 TAAC                            :0xe
11:26:37: Time Access 2 NSAC*100                        :0x0
11:26:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:37: Card Command Classess CCC                     :0x5b5
11:26:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:37: DSR(driver stage register)  DSR_IMP           :0x0
11:26:37: Reserv2                                       :0x0
11:26:37: Device Size C_SIZE                            :0xedc8
11:26:37: Reserv3                                       :0x0
11:26:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:37: Reserv4                                       :0x0
11:26:37: Write Speed Factor R2W_FACTOR                 :0x2
11:26:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:37: FILE_FORMAT_GRP                               :0x0
11:26:37: COPY flag                                     :0x1
11:26:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:37: File_Format                                   :0x0
11:26:37: CRC                                           :0x0
11:26:37: ####CSD Registe Values####  

11:26:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x061AF660>) , Command count = 2896 ] 
11:26:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F60>, <py_sfcl.CommandDataDefinition object at 0x0627D2D0>) , Command count = 2897 ] 
11:26:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062739F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D240>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0F0>, <None>, <py_sfcl.Command23 object at 0x06269CC0>) , Command count = 2898 ] 
11:26:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:37: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:40: Host Frequency set to 25000 KHz
11:26:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269900>, 0x0, True) , Command count = 2899 ] 
11:26:40: [GO18_globalSetVolt]### Host voltage value is set.
11:26:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276660>, 0x0, False) , Command count = 2900 ] 
11:26:40: [GO18_globalSetVolt]### Host voltage value is set.
11:26:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2901 ] 
11:26:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2902 ] 
11:26:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2903 ] 
11:26:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A330>, <py_sfcl.CommandDataDefinition object at 0x0626D210>) , Command count = 2904 ] 
11:26:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x062688D0>) , Command count = 2905 ] 
11:26:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2906 ] 
11:26:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:40: Host Frequency set to 25000 KHz
11:26:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:40: ####CSD Registe 2.0 Values####
11:26:40: CSD_STRUCTURE                                 :0x1
11:26:40: Reserv1                                       :0x0
11:26:40: Time Access 1 TAAC                            :0xe
11:26:40: Time Access 2 NSAC*100                        :0x0
11:26:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:40: Card Command Classess CCC                     :0x5b5
11:26:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:40: DSR(driver stage register)  DSR_IMP           :0x0
11:26:40: Reserv2                                       :0x0
11:26:40: Device Size C_SIZE                            :0xedc8
11:26:40: Reserv3                                       :0x0
11:26:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:40: Reserv4                                       :0x0
11:26:40: Write Speed Factor R2W_FACTOR                 :0x2
11:26:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:40: FILE_FORMAT_GRP                               :0x0
11:26:40: COPY flag                                     :0x1
11:26:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:40: File_Format                                   :0x0
11:26:40: CRC                                           :0x0
11:26:40: ####CSD Registe Values####  

11:26:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:40: [GetSCRRegisterEntry] Passed
11:26:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:40: Data_Status_After Erases          : 0
11:26:40: CPRM Security Support             : No Security
11:26:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:40: Spec. Version                     : Version 3.0X
11:26:40: Extended Security Support         : Extended_Security_Not_Supported
11:26:40: Command Support                   : COMMAND_SUPPORT
11:26:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x0626DF60>) , Command count = 2907 ] 
11:26:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x06268840>) , Command count = 2908 ] 
11:26:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:40: [ SetBusWidth(0x4) , Command count = 2909 ] 
11:26:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2910 ] 
11:26:40: Protected Area Size 0x28000
11:26:40: Bus Width           2
11:26:40: Secure Mode         0
11:26:40: Speed  Class        4
11:26:40: Perf Move           0
11:26:40: Au Size             9
11:26:40: Erase Size          15
11:26:40: Erase Timeout       1
11:26:40: Erase offset        1
11:26:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2911 ] 
11:26:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:40: Host Frequency set to 100000 KHz
11:26:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:40: ####CSD Registe 2.0 Values####
11:26:40: CSD_STRUCTURE                                 :0x1
11:26:40: Reserv1                                       :0x0
11:26:40: Time Access 1 TAAC                            :0xe
11:26:40: Time Access 2 NSAC*100                        :0x0
11:26:40: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:40: Card Command Classess CCC                     :0x5b5
11:26:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:40: DSR(driver stage register)  DSR_IMP           :0x0
11:26:40: Reserv2                                       :0x0
11:26:40: Device Size C_SIZE                            :0xedc8
11:26:40: Reserv3                                       :0x0
11:26:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:41: Reserv4                                       :0x0
11:26:41: Write Speed Factor R2W_FACTOR                 :0x2
11:26:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:41: FILE_FORMAT_GRP                               :0x0
11:26:41: COPY flag                                     :0x1
11:26:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:41: File_Format                                   :0x0
11:26:41: CRC                                           :0x0
11:26:41: ####CSD Registe Values####  

11:26:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 2912 ] 
11:26:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7E0>, <py_sfcl.CommandDataDefinition object at 0x0627D6C0>) , Command count = 2913 ] 
11:26:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DCC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D2A0>, <None>, <py_sfcl.Command23 object at 0x0627D3C0>) , Command count = 2914 ] 
11:26:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:43: Host Frequency set to 25000 KHz
11:26:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D330>, 0x0, True) , Command count = 2915 ] 
11:26:43: [GO18_globalSetVolt]### Host voltage value is set.
11:26:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, False) , Command count = 2916 ] 
11:26:43: [GO18_globalSetVolt]### Host voltage value is set.
11:26:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2917 ] 
11:26:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2918 ] 
11:26:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2919 ] 
11:26:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D6F0>, <py_sfcl.CommandDataDefinition object at 0x06269390>) , Command count = 2920 ] 
11:26:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E10>, <py_sfcl.CommandDataDefinition object at 0x062680F0>) , Command count = 2921 ] 
11:26:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2922 ] 
11:26:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:44: Host Frequency set to 25000 KHz
11:26:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:44: ####CSD Registe 2.0 Values####
11:26:44: CSD_STRUCTURE                                 :0x1
11:26:44: Reserv1                                       :0x0
11:26:44: Time Access 1 TAAC                            :0xe
11:26:44: Time Access 2 NSAC*100                        :0x0
11:26:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:44: Card Command Classess CCC                     :0x5b5
11:26:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:44: DSR(driver stage register)  DSR_IMP           :0x0
11:26:44: Reserv2                                       :0x0
11:26:44: Device Size C_SIZE                            :0xedc8
11:26:44: Reserv3                                       :0x0
11:26:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:44: Reserv4                                       :0x0
11:26:44: Write Speed Factor R2W_FACTOR                 :0x2
11:26:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:44: FILE_FORMAT_GRP                               :0x0
11:26:44: COPY flag                                     :0x1
11:26:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:44: File_Format                                   :0x0
11:26:44: CRC                                           :0x0
11:26:44: ####CSD Registe Values####  

11:26:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:44: [GetSCRRegisterEntry] Passed
11:26:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:44: Data_Status_After Erases          : 0
11:26:44: CPRM Security Support             : No Security
11:26:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:44: Spec. Version                     : Version 3.0X
11:26:44: Extended Security Support         : Extended_Security_Not_Supported
11:26:44: Command Support                   : COMMAND_SUPPORT
11:26:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764B0>, <py_sfcl.CommandDataDefinition object at 0x062687B0>) , Command count = 2923 ] 
11:26:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273ED0>, <py_sfcl.CommandDataDefinition object at 0x06268E10>) , Command count = 2924 ] 
11:26:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:44: [ SetBusWidth(0x4) , Command count = 2925 ] 
11:26:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062681B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2926 ] 
11:26:44: Protected Area Size 0x28000
11:26:44: Bus Width           2
11:26:44: Secure Mode         0
11:26:44: Speed  Class        4
11:26:44: Perf Move           0
11:26:44: Au Size             9
11:26:44: Erase Size          15
11:26:44: Erase Timeout       1
11:26:44: Erase offset        1
11:26:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2927 ] 
11:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:44: Host Frequency set to 100000 KHz
11:26:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:44: ####CSD Registe 2.0 Values####
11:26:44: CSD_STRUCTURE                                 :0x1
11:26:44: Reserv1                                       :0x0
11:26:44: Time Access 1 TAAC                            :0xe
11:26:44: Time Access 2 NSAC*100                        :0x0
11:26:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:44: Card Command Classess CCC                     :0x5b5
11:26:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:44: DSR(driver stage register)  DSR_IMP           :0x0
11:26:44: Reserv2                                       :0x0
11:26:44: Device Size C_SIZE                            :0xedc8
11:26:44: Reserv3                                       :0x0
11:26:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:44: Reserv4                                       :0x0
11:26:44: Write Speed Factor R2W_FACTOR                 :0x2
11:26:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:44: FILE_FORMAT_GRP                               :0x0
11:26:44: COPY flag                                     :0x1
11:26:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:44: File_Format                                   :0x0
11:26:44: CRC                                           :0x0
11:26:44: ####CSD Registe Values####  

11:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D870>, <py_sfcl.CommandDataDefinition object at 0x06269090>) , Command count = 2928 ] 
11:26:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x0626D450>) , Command count = 2929 ] 
11:26:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D6C0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D8D0>, <None>, <py_sfcl.Command23 object at 0x0626D360>) , Command count = 2930 ] 
11:26:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:47: Host Frequency set to 25000 KHz
11:26:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268900>, 0x0, True) , Command count = 2931 ] 
11:26:47: [GO18_globalSetVolt]### Host voltage value is set.
11:26:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269D50>, 0x0, False) , Command count = 2932 ] 
11:26:47: [GO18_globalSetVolt]### Host voltage value is set.
11:26:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2933 ] 
11:26:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2934 ] 
11:26:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2935 ] 
11:26:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269540>, <py_sfcl.CommandDataDefinition object at 0x06269ED0>) , Command count = 2936 ] 
11:26:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062693C0>, <py_sfcl.CommandDataDefinition object at 0x06273150>) , Command count = 2937 ] 
11:26:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2938 ] 
11:26:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:47: Host Frequency set to 25000 KHz
11:26:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:47: ####CSD Registe 2.0 Values####
11:26:47: CSD_STRUCTURE                                 :0x1
11:26:47: Reserv1                                       :0x0
11:26:47: Time Access 1 TAAC                            :0xe
11:26:47: Time Access 2 NSAC*100                        :0x0
11:26:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:47: Card Command Classess CCC                     :0x5b5
11:26:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:47: DSR(driver stage register)  DSR_IMP           :0x0
11:26:47: Reserv2                                       :0x0
11:26:47: Device Size C_SIZE                            :0xedc8
11:26:47: Reserv3                                       :0x0
11:26:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:47: Reserv4                                       :0x0
11:26:47: Write Speed Factor R2W_FACTOR                 :0x2
11:26:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:47: FILE_FORMAT_GRP                               :0x0
11:26:47: COPY flag                                     :0x1
11:26:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:47: File_Format                                   :0x0
11:26:47: CRC                                           :0x0
11:26:47: ####CSD Registe Values####  

11:26:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:47: [GetSCRRegisterEntry] Passed
11:26:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:47: Data_Status_After Erases          : 0
11:26:47: CPRM Security Support             : No Security
11:26:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:47: Spec. Version                     : Version 3.0X
11:26:47: Extended Security Support         : Extended_Security_Not_Supported
11:26:47: Command Support                   : COMMAND_SUPPORT
11:26:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697E0>, <py_sfcl.CommandDataDefinition object at 0x06268AB0>) , Command count = 2939 ] 
11:26:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x0626D180>) , Command count = 2940 ] 
11:26:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:47: [ SetBusWidth(0x4) , Command count = 2941 ] 
11:26:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062693F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2942 ] 
11:26:47: Protected Area Size 0x28000
11:26:47: Bus Width           2
11:26:47: Secure Mode         0
11:26:47: Speed  Class        4
11:26:47: Perf Move           0
11:26:47: Au Size             9
11:26:47: Erase Size          15
11:26:47: Erase Timeout       1
11:26:47: Erase offset        1
11:26:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2943 ] 
11:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:47: Host Frequency set to 100000 KHz
11:26:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:48: ####CSD Registe 2.0 Values####
11:26:48: CSD_STRUCTURE                                 :0x1
11:26:48: Reserv1                                       :0x0
11:26:48: Time Access 1 TAAC                            :0xe
11:26:48: Time Access 2 NSAC*100                        :0x0
11:26:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:48: Card Command Classess CCC                     :0x5b5
11:26:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:48: DSR(driver stage register)  DSR_IMP           :0x0
11:26:48: Reserv2                                       :0x0
11:26:48: Device Size C_SIZE                            :0xedc8
11:26:48: Reserv3                                       :0x0
11:26:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:48: Reserv4                                       :0x0
11:26:48: Write Speed Factor R2W_FACTOR                 :0x2
11:26:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:48: FILE_FORMAT_GRP                               :0x0
11:26:48: COPY flag                                     :0x1
11:26:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:48: File_Format                                   :0x0
11:26:48: CRC                                           :0x0
11:26:48: ####CSD Registe Values####  

11:26:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268F90>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 2944 ] 
11:26:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D50>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 2945 ] 
11:26:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062695D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268A80>, <py_sfcl.PySEnhancedCmdData object at 0x062684E0>, <None>, <py_sfcl.Command23 object at 0x0626D840>) , Command count = 2946 ] 
11:26:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:51: Host Frequency set to 25000 KHz
11:26:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D780>, 0x0, True) , Command count = 2947 ] 
11:26:51: [GO18_globalSetVolt]### Host voltage value is set.
11:26:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269D80>, 0x0, False) , Command count = 2948 ] 
11:26:51: [GO18_globalSetVolt]### Host voltage value is set.
11:26:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2949 ] 
11:26:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2950 ] 
11:26:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2951 ] 
11:26:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x06269F00>) , Command count = 2952 ] 
11:26:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DFC0>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 2953 ] 
11:26:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2954 ] 
11:26:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:51: Host Frequency set to 25000 KHz
11:26:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:51: ####CSD Registe 2.0 Values####
11:26:51: CSD_STRUCTURE                                 :0x1
11:26:51: Reserv1                                       :0x0
11:26:51: Time Access 1 TAAC                            :0xe
11:26:51: Time Access 2 NSAC*100                        :0x0
11:26:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:51: Card Command Classess CCC                     :0x5b5
11:26:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:51: DSR(driver stage register)  DSR_IMP           :0x0
11:26:51: Reserv2                                       :0x0
11:26:51: Device Size C_SIZE                            :0xedc8
11:26:51: Reserv3                                       :0x0
11:26:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:51: Reserv4                                       :0x0
11:26:51: Write Speed Factor R2W_FACTOR                 :0x2
11:26:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:51: FILE_FORMAT_GRP                               :0x0
11:26:51: COPY flag                                     :0x1
11:26:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:51: File_Format                                   :0x0
11:26:51: CRC                                           :0x0
11:26:51: ####CSD Registe Values####  

11:26:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:51: [GetSCRRegisterEntry] Passed
11:26:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:51: Data_Status_After Erases          : 0
11:26:51: CPRM Security Support             : No Security
11:26:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:51: Spec. Version                     : Version 3.0X
11:26:51: Extended Security Support         : Extended_Security_Not_Supported
11:26:51: Command Support                   : COMMAND_SUPPORT
11:26:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 2955 ] 
11:26:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 2956 ] 
11:26:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:51: [ SetBusWidth(0x4) , Command count = 2957 ] 
11:26:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062690C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2958 ] 
11:26:51: Protected Area Size 0x28000
11:26:51: Bus Width           2
11:26:51: Secure Mode         0
11:26:51: Speed  Class        4
11:26:51: Perf Move           0
11:26:51: Au Size             9
11:26:51: Erase Size          15
11:26:51: Erase Timeout       1
11:26:51: Erase offset        1
11:26:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2959 ] 
11:26:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:51: Host Frequency set to 100000 KHz
11:26:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:51: ####CSD Registe 2.0 Values####
11:26:51: CSD_STRUCTURE                                 :0x1
11:26:52: Reserv1                                       :0x0
11:26:52: Time Access 1 TAAC                            :0xe
11:26:52: Time Access 2 NSAC*100                        :0x0
11:26:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:52: Card Command Classess CCC                     :0x5b5
11:26:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:52: DSR(driver stage register)  DSR_IMP           :0x0
11:26:52: Reserv2                                       :0x0
11:26:52: Device Size C_SIZE                            :0xedc8
11:26:52: Reserv3                                       :0x0
11:26:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:52: Reserv4                                       :0x0
11:26:52: Write Speed Factor R2W_FACTOR                 :0x2
11:26:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:52: FILE_FORMAT_GRP                               :0x0
11:26:52: COPY flag                                     :0x1
11:26:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:52: File_Format                                   :0x0
11:26:52: CRC                                           :0x0
11:26:52: ####CSD Registe Values####  

11:26:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x062693F0>) , Command count = 2960 ] 
11:26:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273630>, <py_sfcl.CommandDataDefinition object at 0x0626DD20>) , Command count = 2961 ] 
11:26:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA50>, <py_sfcl.PySEnhancedCmdData object at 0x0626D3F0>, <None>, <py_sfcl.Command23 object at 0x062689C0>) , Command count = 2962 ] 
11:26:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:54: Host Frequency set to 25000 KHz
11:26:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269CF0>, 0x0, True) , Command count = 2963 ] 
11:26:54: [GO18_globalSetVolt]### Host voltage value is set.
11:26:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DD50>, 0x0, False) , Command count = 2964 ] 
11:26:54: [GO18_globalSetVolt]### Host voltage value is set.
11:26:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2965 ] 
11:26:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2966 ] 
11:26:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2967 ] 
11:26:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273690>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 2968 ] 
11:26:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062691E0>, <py_sfcl.CommandDataDefinition object at 0x0626DEA0>) , Command count = 2969 ] 
11:26:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2970 ] 
11:26:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:55: Host Frequency set to 25000 KHz
11:26:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:55: ####CSD Registe 2.0 Values####
11:26:55: CSD_STRUCTURE                                 :0x1
11:26:55: Reserv1                                       :0x0
11:26:55: Time Access 1 TAAC                            :0xe
11:26:55: Time Access 2 NSAC*100                        :0x0
11:26:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:55: Card Command Classess CCC                     :0x5b5
11:26:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:55: DSR(driver stage register)  DSR_IMP           :0x0
11:26:55: Reserv2                                       :0x0
11:26:55: Device Size C_SIZE                            :0xedc8
11:26:55: Reserv3                                       :0x0
11:26:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:55: Reserv4                                       :0x0
11:26:55: Write Speed Factor R2W_FACTOR                 :0x2
11:26:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:55: FILE_FORMAT_GRP                               :0x0
11:26:55: COPY flag                                     :0x1
11:26:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:55: File_Format                                   :0x0
11:26:55: CRC                                           :0x0
11:26:55: ####CSD Registe Values####  

11:26:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:55: [GetSCRRegisterEntry] Passed
11:26:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:55: Data_Status_After Erases          : 0
11:26:55: CPRM Security Support             : No Security
11:26:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:55: Spec. Version                     : Version 3.0X
11:26:55: Extended Security Support         : Extended_Security_Not_Supported
11:26:55: Command Support                   : COMMAND_SUPPORT
11:26:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 2971 ] 
11:26:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698D0>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 2972 ] 
11:26:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:55: [ SetBusWidth(0x4) , Command count = 2973 ] 
11:26:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2974 ] 
11:26:55: Protected Area Size 0x28000
11:26:55: Bus Width           2
11:26:55: Secure Mode         0
11:26:55: Speed  Class        4
11:26:55: Perf Move           0
11:26:55: Au Size             9
11:26:55: Erase Size          15
11:26:55: Erase Timeout       1
11:26:55: Erase offset        1
11:26:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2975 ] 
11:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:55: Host Frequency set to 100000 KHz
11:26:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:55: ####CSD Registe 2.0 Values####
11:26:55: CSD_STRUCTURE                                 :0x1
11:26:55: Reserv1                                       :0x0
11:26:55: Time Access 1 TAAC                            :0xe
11:26:55: Time Access 2 NSAC*100                        :0x0
11:26:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:55: Card Command Classess CCC                     :0x5b5
11:26:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:55: DSR(driver stage register)  DSR_IMP           :0x0
11:26:55: Reserv2                                       :0x0
11:26:55: Device Size C_SIZE                            :0xedc8
11:26:55: Reserv3                                       :0x0
11:26:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:55: Reserv4                                       :0x0
11:26:55: Write Speed Factor R2W_FACTOR                 :0x2
11:26:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:55: FILE_FORMAT_GRP                               :0x0
11:26:55: COPY flag                                     :0x1
11:26:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:55: File_Format                                   :0x0
11:26:55: CRC                                           :0x0
11:26:55: ####CSD Registe Values####  

11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 2976 ] 
11:26:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269030>, <py_sfcl.CommandDataDefinition object at 0x0626D630>) , Command count = 2977 ] 
11:26:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DB70>, <py_sfcl.PySEnhancedCmdData object at 0x0626D540>, <None>, <py_sfcl.Command23 object at 0x0626D0C0>) , Command count = 2978 ] 
11:26:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:56: [GO4_globalInitCard]### Switch to Specify Card Type
11:26:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:58: Host Frequency set to 25000 KHz
11:26:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:58: [GO18_globalSetVolt]### Set Host Voltage value.
11:26:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:26:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269930>, 0x0, True) , Command count = 2979 ] 
11:26:58: [GO18_globalSetVolt]### Host voltage value is set.
11:26:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:26:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D900>, 0x0, False) , Command count = 2980 ] 
11:26:58: [GO18_globalSetVolt]### Host voltage value is set.
11:26:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2981 ] 
11:26:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:26:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2982 ] 
11:26:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:26:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:26:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:26:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:26:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:26:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2983 ] 
11:26:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:26:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCF0>, <py_sfcl.CommandDataDefinition object at 0x0626D3C0>) , Command count = 2984 ] 
11:26:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x0626DDE0>) , Command count = 2985 ] 
11:26:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:26:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2986 ] 
11:26:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:26:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:26:58: Host Frequency set to 25000 KHz
11:26:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:26:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:58: ####CSD Registe 2.0 Values####
11:26:58: CSD_STRUCTURE                                 :0x1
11:26:58: Reserv1                                       :0x0
11:26:58: Time Access 1 TAAC                            :0xe
11:26:58: Time Access 2 NSAC*100                        :0x0
11:26:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:26:58: Card Command Classess CCC                     :0x5b5
11:26:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:58: DSR(driver stage register)  DSR_IMP           :0x0
11:26:58: Reserv2                                       :0x0
11:26:58: Device Size C_SIZE                            :0xedc8
11:26:58: Reserv3                                       :0x0
11:26:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:58: Reserv4                                       :0x0
11:26:58: Write Speed Factor R2W_FACTOR                 :0x2
11:26:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:58: FILE_FORMAT_GRP                               :0x0
11:26:58: COPY flag                                     :0x1
11:26:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:58: File_Format                                   :0x0
11:26:58: CRC                                           :0x0
11:26:58: ####CSD Registe Values####  

11:26:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:26:58: [GetSCRRegisterEntry] Passed
11:26:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:26:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:26:58: Data_Status_After Erases          : 0
11:26:58: CPRM Security Support             : No Security
11:26:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:26:58: Spec. Version                     : Version 3.0X
11:26:58: Extended Security Support         : Extended_Security_Not_Supported
11:26:58: Command Support                   : COMMAND_SUPPORT
11:26:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626DBA0>) , Command count = 2987 ] 
11:26:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 2988 ] 
11:26:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:26:58: [ SetBusWidth(0x4) , Command count = 2989 ] 
11:26:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:26:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2990 ] 
11:26:58: Protected Area Size 0x28000
11:26:58: Bus Width           2
11:26:58: Secure Mode         0
11:26:58: Speed  Class        4
11:26:58: Perf Move           0
11:26:58: Au Size             9
11:26:58: Erase Size          15
11:26:58: Erase Timeout       1
11:26:58: Erase offset        1
11:26:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:26:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:26:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2991 ] 
11:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:26:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:26:58: Host Frequency set to 100000 KHz
11:26:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:26:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:26:59: ####CSD Registe 2.0 Values####
11:26:59: CSD_STRUCTURE                                 :0x1
11:26:59: Reserv1                                       :0x0
11:26:59: Time Access 1 TAAC                            :0xe
11:26:59: Time Access 2 NSAC*100                        :0x0
11:26:59: Data Transfer Rate TRAN_SPEED                 :0xb
11:26:59: Card Command Classess CCC                     :0x5b5
11:26:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:26:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:26:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:26:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:26:59: DSR(driver stage register)  DSR_IMP           :0x0
11:26:59: Reserv2                                       :0x0
11:26:59: Device Size C_SIZE                            :0xedc8
11:26:59: Reserv3                                       :0x0
11:26:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:26:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:26:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:26:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:26:59: Reserv4                                       :0x0
11:26:59: Write Speed Factor R2W_FACTOR                 :0x2
11:26:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:26:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:26:59: FILE_FORMAT_GRP                               :0x0
11:26:59: COPY flag                                     :0x1
11:26:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:26:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:26:59: File_Format                                   :0x0
11:26:59: CRC                                           :0x0
11:26:59: ####CSD Registe Values####  

11:26:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A20>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 2992 ] 
11:26:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:26:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269960>, <py_sfcl.CommandDataDefinition object at 0x0626D390>) , Command count = 2993 ] 
11:26:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:26:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:26:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:26:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:26:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062739C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273360>, <py_sfcl.PySEnhancedCmdData object at 0x06273FC0>, <None>, <py_sfcl.Command23 object at 0x0626D030>) , Command count = 2994 ] 
11:26:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:26:59: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:01: Host Frequency set to 25000 KHz
11:27:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:01: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268420>, 0x0, True) , Command count = 2995 ] 
11:27:01: [GO18_globalSetVolt]### Host voltage value is set.
11:27:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x062732A0>, 0x0, False) , Command count = 2996 ] 
11:27:01: [GO18_globalSetVolt]### Host voltage value is set.
11:27:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2997 ] 
11:27:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2998 ] 
11:27:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2999 ] 
11:27:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D780>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 3000 ] 
11:27:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA50>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 3001 ] 
11:27:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3002 ] 
11:27:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:02: Host Frequency set to 25000 KHz
11:27:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:02: ####CSD Registe 2.0 Values####
11:27:02: CSD_STRUCTURE                                 :0x1
11:27:02: Reserv1                                       :0x0
11:27:02: Time Access 1 TAAC                            :0xe
11:27:02: Time Access 2 NSAC*100                        :0x0
11:27:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:02: Card Command Classess CCC                     :0x5b5
11:27:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:02: DSR(driver stage register)  DSR_IMP           :0x0
11:27:02: Reserv2                                       :0x0
11:27:02: Device Size C_SIZE                            :0xedc8
11:27:02: Reserv3                                       :0x0
11:27:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:02: Reserv4                                       :0x0
11:27:02: Write Speed Factor R2W_FACTOR                 :0x2
11:27:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:02: FILE_FORMAT_GRP                               :0x0
11:27:02: COPY flag                                     :0x1
11:27:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:02: File_Format                                   :0x0
11:27:02: CRC                                           :0x0
11:27:02: ####CSD Registe Values####  

11:27:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:02: [GetSCRRegisterEntry] Passed
11:27:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:02: Data_Status_After Erases          : 0
11:27:02: CPRM Security Support             : No Security
11:27:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:02: Spec. Version                     : Version 3.0X
11:27:02: Extended Security Support         : Extended_Security_Not_Supported
11:27:02: Command Support                   : COMMAND_SUPPORT
11:27:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626DED0>) , Command count = 3003 ] 
11:27:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 3004 ] 
11:27:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:02: [ SetBusWidth(0x4) , Command count = 3005 ] 
11:27:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3006 ] 
11:27:02: Protected Area Size 0x28000
11:27:02: Bus Width           2
11:27:02: Secure Mode         0
11:27:02: Speed  Class        4
11:27:02: Perf Move           0
11:27:02: Au Size             9
11:27:02: Erase Size          15
11:27:02: Erase Timeout       1
11:27:02: Erase offset        1
11:27:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3007 ] 
11:27:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:02: Host Frequency set to 100000 KHz
11:27:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:02: ####CSD Registe 2.0 Values####
11:27:02: CSD_STRUCTURE                                 :0x1
11:27:02: Reserv1                                       :0x0
11:27:02: Time Access 1 TAAC                            :0xe
11:27:02: Time Access 2 NSAC*100                        :0x0
11:27:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:02: Card Command Classess CCC                     :0x5b5
11:27:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:02: DSR(driver stage register)  DSR_IMP           :0x0
11:27:02: Reserv2                                       :0x0
11:27:02: Device Size C_SIZE                            :0xedc8
11:27:02: Reserv3                                       :0x0
11:27:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:03: Reserv4                                       :0x0
11:27:03: Write Speed Factor R2W_FACTOR                 :0x2
11:27:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:03: FILE_FORMAT_GRP                               :0x0
11:27:03: COPY flag                                     :0x1
11:27:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:03: File_Format                                   :0x0
11:27:03: CRC                                           :0x0
11:27:03: ####CSD Registe Values####  

11:27:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A120>, <py_sfcl.CommandDataDefinition object at 0x0626D960>) , Command count = 3008 ] 
11:27:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 3009 ] 
11:27:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062768A0>, <py_sfcl.PySEnhancedCmdData object at 0x06276A20>, <None>, <py_sfcl.Command23 object at 0x06273D50>) , Command count = 3010 ] 
11:27:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:03: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:05: Host Frequency set to 25000 KHz
11:27:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DFC0>, 0x0, True) , Command count = 3011 ] 
11:27:05: [GO18_globalSetVolt]### Host voltage value is set.
11:27:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D20>, 0x0, False) , Command count = 3012 ] 
11:27:05: [GO18_globalSetVolt]### Host voltage value is set.
11:27:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3013 ] 
11:27:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3014 ] 
11:27:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3015 ] 
11:27:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 3016 ] 
11:27:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF30>, <py_sfcl.CommandDataDefinition object at 0x06273210>) , Command count = 3017 ] 
11:27:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3018 ] 
11:27:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:05: Host Frequency set to 25000 KHz
11:27:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:05: ####CSD Registe 2.0 Values####
11:27:05: CSD_STRUCTURE                                 :0x1
11:27:05: Reserv1                                       :0x0
11:27:05: Time Access 1 TAAC                            :0xe
11:27:05: Time Access 2 NSAC*100                        :0x0
11:27:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:05: Card Command Classess CCC                     :0x5b5
11:27:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:05: DSR(driver stage register)  DSR_IMP           :0x0
11:27:05: Reserv2                                       :0x0
11:27:05: Device Size C_SIZE                            :0xedc8
11:27:05: Reserv3                                       :0x0
11:27:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:05: Reserv4                                       :0x0
11:27:05: Write Speed Factor R2W_FACTOR                 :0x2
11:27:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:05: FILE_FORMAT_GRP                               :0x0
11:27:05: COPY flag                                     :0x1
11:27:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:05: File_Format                                   :0x0
11:27:05: CRC                                           :0x0
11:27:05: ####CSD Registe Values####  

11:27:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:05: [GetSCRRegisterEntry] Passed
11:27:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:05: Data_Status_After Erases          : 0
11:27:05: CPRM Security Support             : No Security
11:27:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:05: Spec. Version                     : Version 3.0X
11:27:05: Extended Security Support         : Extended_Security_Not_Supported
11:27:05: Command Support                   : COMMAND_SUPPORT
11:27:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x062765A0>) , Command count = 3019 ] 
11:27:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273570>, <py_sfcl.CommandDataDefinition object at 0x062732D0>) , Command count = 3020 ] 
11:27:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:05: [ SetBusWidth(0x4) , Command count = 3021 ] 
11:27:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3022 ] 
11:27:05: Protected Area Size 0x28000
11:27:05: Bus Width           2
11:27:05: Secure Mode         0
11:27:05: Speed  Class        4
11:27:05: Perf Move           0
11:27:05: Au Size             9
11:27:05: Erase Size          15
11:27:05: Erase Timeout       1
11:27:05: Erase offset        1
11:27:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3023 ] 
11:27:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:05: Host Frequency set to 100000 KHz
11:27:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:05: ####CSD Registe 2.0 Values####
11:27:05: CSD_STRUCTURE                                 :0x1
11:27:06: Reserv1                                       :0x0
11:27:06: Time Access 1 TAAC                            :0xe
11:27:06: Time Access 2 NSAC*100                        :0x0
11:27:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:06: Card Command Classess CCC                     :0x5b5
11:27:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:06: DSR(driver stage register)  DSR_IMP           :0x0
11:27:06: Reserv2                                       :0x0
11:27:06: Device Size C_SIZE                            :0xedc8
11:27:06: Reserv3                                       :0x0
11:27:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:06: Reserv4                                       :0x0
11:27:06: Write Speed Factor R2W_FACTOR                 :0x2
11:27:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:06: FILE_FORMAT_GRP                               :0x0
11:27:06: COPY flag                                     :0x1
11:27:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:06: File_Format                                   :0x0
11:27:06: CRC                                           :0x0
11:27:06: ####CSD Registe Values####  

11:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x06273330>) , Command count = 3024 ] 
11:27:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06276D50>) , Command count = 3025 ] 
11:27:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276960>, <py_sfcl.PySEnhancedCmdData object at 0x06276C90>, <None>, <py_sfcl.Command23 object at 0x06276B10>) , Command count = 3026 ] 
11:27:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:08: Host Frequency set to 25000 KHz
11:27:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273BD0>, 0x0, True) , Command count = 3027 ] 
11:27:08: [GO18_globalSetVolt]### Host voltage value is set.
11:27:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DC90>, 0x0, False) , Command count = 3028 ] 
11:27:08: [GO18_globalSetVolt]### Host voltage value is set.
11:27:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3029 ] 
11:27:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3030 ] 
11:27:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3031 ] 
11:27:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB70>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 3032 ] 
11:27:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6F0>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 3033 ] 
11:27:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3034 ] 
11:27:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:09: Host Frequency set to 25000 KHz
11:27:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:09: ####CSD Registe 2.0 Values####
11:27:09: CSD_STRUCTURE                                 :0x1
11:27:09: Reserv1                                       :0x0
11:27:09: Time Access 1 TAAC                            :0xe
11:27:09: Time Access 2 NSAC*100                        :0x0
11:27:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:09: Card Command Classess CCC                     :0x5b5
11:27:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:09: DSR(driver stage register)  DSR_IMP           :0x0
11:27:09: Reserv2                                       :0x0
11:27:09: Device Size C_SIZE                            :0xedc8
11:27:09: Reserv3                                       :0x0
11:27:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:09: Reserv4                                       :0x0
11:27:09: Write Speed Factor R2W_FACTOR                 :0x2
11:27:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:09: FILE_FORMAT_GRP                               :0x0
11:27:09: COPY flag                                     :0x1
11:27:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:09: File_Format                                   :0x0
11:27:09: CRC                                           :0x0
11:27:09: ####CSD Registe Values####  

11:27:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:09: [GetSCRRegisterEntry] Passed
11:27:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:09: Data_Status_After Erases          : 0
11:27:09: CPRM Security Support             : No Security
11:27:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:09: Spec. Version                     : Version 3.0X
11:27:09: Extended Security Support         : Extended_Security_Not_Supported
11:27:09: Command Support                   : COMMAND_SUPPORT
11:27:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x06276DB0>) , Command count = 3035 ] 
11:27:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 3036 ] 
11:27:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:09: [ SetBusWidth(0x4) , Command count = 3037 ] 
11:27:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3038 ] 
11:27:09: Protected Area Size 0x28000
11:27:09: Bus Width           2
11:27:09: Secure Mode         0
11:27:09: Speed  Class        4
11:27:09: Perf Move           0
11:27:09: Au Size             9
11:27:09: Erase Size          15
11:27:09: Erase Timeout       1
11:27:09: Erase offset        1
11:27:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3039 ] 
11:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:09: Host Frequency set to 100000 KHz
11:27:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:09: ####CSD Registe 2.0 Values####
11:27:09: CSD_STRUCTURE                                 :0x1
11:27:09: Reserv1                                       :0x0
11:27:09: Time Access 1 TAAC                            :0xe
11:27:09: Time Access 2 NSAC*100                        :0x0
11:27:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:09: Card Command Classess CCC                     :0x5b5
11:27:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:09: DSR(driver stage register)  DSR_IMP           :0x0
11:27:09: Reserv2                                       :0x0
11:27:09: Device Size C_SIZE                            :0xedc8
11:27:09: Reserv3                                       :0x0
11:27:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:09: Reserv4                                       :0x0
11:27:09: Write Speed Factor R2W_FACTOR                 :0x2
11:27:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:09: FILE_FORMAT_GRP                               :0x0
11:27:09: COPY flag                                     :0x1
11:27:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:09: File_Format                                   :0x0
11:27:09: CRC                                           :0x0
11:27:09: ####CSD Registe Values####  

11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x062730C0>) , Command count = 3040 ] 
11:27:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273900>, <py_sfcl.CommandDataDefinition object at 0x0627A2D0>) , Command count = 3041 ] 
11:27:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062761E0>, <py_sfcl.PySEnhancedCmdData object at 0x06276F00>, <None>, <py_sfcl.Command23 object at 0x06276210>) , Command count = 3042 ] 
11:27:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:12: Host Frequency set to 25000 KHz
11:27:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D0C0>, 0x0, True) , Command count = 3043 ] 
11:27:12: [GO18_globalSetVolt]### Host voltage value is set.
11:27:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DD20>, 0x0, False) , Command count = 3044 ] 
11:27:12: [GO18_globalSetVolt]### Host voltage value is set.
11:27:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3045 ] 
11:27:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3046 ] 
11:27:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3047 ] 
11:27:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D180>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 3048 ] 
11:27:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062734B0>, <py_sfcl.CommandDataDefinition object at 0x06276C00>) , Command count = 3049 ] 
11:27:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3050 ] 
11:27:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:12: Host Frequency set to 25000 KHz
11:27:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:12: ####CSD Registe 2.0 Values####
11:27:12: CSD_STRUCTURE                                 :0x1
11:27:12: Reserv1                                       :0x0
11:27:12: Time Access 1 TAAC                            :0xe
11:27:12: Time Access 2 NSAC*100                        :0x0
11:27:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:12: Card Command Classess CCC                     :0x5b5
11:27:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:12: DSR(driver stage register)  DSR_IMP           :0x0
11:27:12: Reserv2                                       :0x0
11:27:12: Device Size C_SIZE                            :0xedc8
11:27:12: Reserv3                                       :0x0
11:27:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:12: Reserv4                                       :0x0
11:27:12: Write Speed Factor R2W_FACTOR                 :0x2
11:27:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:12: FILE_FORMAT_GRP                               :0x0
11:27:12: COPY flag                                     :0x1
11:27:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:12: File_Format                                   :0x0
11:27:12: CRC                                           :0x0
11:27:12: ####CSD Registe Values####  

11:27:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:12: [GetSCRRegisterEntry] Passed
11:27:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:12: Data_Status_After Erases          : 0
11:27:12: CPRM Security Support             : No Security
11:27:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:12: Spec. Version                     : Version 3.0X
11:27:12: Extended Security Support         : Extended_Security_Not_Supported
11:27:12: Command Support                   : COMMAND_SUPPORT
11:27:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276750>, <py_sfcl.CommandDataDefinition object at 0x06276510>) , Command count = 3051 ] 
11:27:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D270>, <py_sfcl.CommandDataDefinition object at 0x0627DA80>) , Command count = 3052 ] 
11:27:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:12: [ SetBusWidth(0x4) , Command count = 3053 ] 
11:27:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3054 ] 
11:27:12: Protected Area Size 0x28000
11:27:12: Bus Width           2
11:27:12: Secure Mode         0
11:27:12: Speed  Class        4
11:27:12: Perf Move           0
11:27:12: Au Size             9
11:27:12: Erase Size          15
11:27:12: Erase Timeout       1
11:27:12: Erase offset        1
11:27:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3055 ] 
11:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:12: Host Frequency set to 100000 KHz
11:27:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:12: ####CSD Registe 2.0 Values####
11:27:12: CSD_STRUCTURE                                 :0x1
11:27:12: Reserv1                                       :0x0
11:27:12: Time Access 1 TAAC                            :0xe
11:27:12: Time Access 2 NSAC*100                        :0x0
11:27:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:12: Card Command Classess CCC                     :0x5b5
11:27:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:12: DSR(driver stage register)  DSR_IMP           :0x0
11:27:12: Reserv2                                       :0x0
11:27:12: Device Size C_SIZE                            :0xedc8
11:27:12: Reserv3                                       :0x0
11:27:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:12: Reserv4                                       :0x0
11:27:12: Write Speed Factor R2W_FACTOR                 :0x2
11:27:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:13: FILE_FORMAT_GRP                               :0x0
11:27:13: COPY flag                                     :0x1
11:27:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:13: File_Format                                   :0x0
11:27:13: CRC                                           :0x0
11:27:13: ####CSD Registe Values####  

11:27:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A360>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 3056 ] 
11:27:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269870>, <py_sfcl.CommandDataDefinition object at 0x06276BD0>) , Command count = 3057 ] 
11:27:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x06276B70>, <None>, <py_sfcl.Command23 object at 0x06276270>) , Command count = 3058 ] 
11:27:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:15: Host Frequency set to 25000 KHz
11:27:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF120>, 0x0, True) , Command count = 3059 ] 
11:27:15: [GO18_globalSetVolt]### Host voltage value is set.
11:27:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E10>, 0x0, False) , Command count = 3060 ] 
11:27:15: [GO18_globalSetVolt]### Host voltage value is set.
11:27:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3061 ] 
11:27:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3062 ] 
11:27:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3063 ] 
11:27:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 3064 ] 
11:27:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x062763C0>) , Command count = 3065 ] 
11:27:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3066 ] 
11:27:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:16: Host Frequency set to 25000 KHz
11:27:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:16: ####CSD Registe 2.0 Values####
11:27:16: CSD_STRUCTURE                                 :0x1
11:27:16: Reserv1                                       :0x0
11:27:16: Time Access 1 TAAC                            :0xe
11:27:16: Time Access 2 NSAC*100                        :0x0
11:27:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:16: Card Command Classess CCC                     :0x5b5
11:27:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:16: DSR(driver stage register)  DSR_IMP           :0x0
11:27:16: Reserv2                                       :0x0
11:27:16: Device Size C_SIZE                            :0xedc8
11:27:16: Reserv3                                       :0x0
11:27:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:16: Reserv4                                       :0x0
11:27:16: Write Speed Factor R2W_FACTOR                 :0x2
11:27:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:16: FILE_FORMAT_GRP                               :0x0
11:27:16: COPY flag                                     :0x1
11:27:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:16: File_Format                                   :0x0
11:27:16: CRC                                           :0x0
11:27:16: ####CSD Registe Values####  

11:27:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:16: [GetSCRRegisterEntry] Passed
11:27:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:16: Data_Status_After Erases          : 0
11:27:16: CPRM Security Support             : No Security
11:27:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:16: Spec. Version                     : Version 3.0X
11:27:16: Extended Security Support         : Extended_Security_Not_Supported
11:27:16: Command Support                   : COMMAND_SUPPORT
11:27:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 3067 ] 
11:27:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269360>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 3068 ] 
11:27:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:16: [ SetBusWidth(0x4) , Command count = 3069 ] 
11:27:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3070 ] 
11:27:16: Protected Area Size 0x28000
11:27:16: Bus Width           2
11:27:16: Secure Mode         0
11:27:16: Speed  Class        4
11:27:16: Perf Move           0
11:27:16: Au Size             9
11:27:16: Erase Size          15
11:27:16: Erase Timeout       1
11:27:16: Erase offset        1
11:27:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3071 ] 
11:27:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:16: Host Frequency set to 100000 KHz
11:27:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:16: ####CSD Registe 2.0 Values####
11:27:16: CSD_STRUCTURE                                 :0x1
11:27:16: Reserv1                                       :0x0
11:27:16: Time Access 1 TAAC                            :0xe
11:27:16: Time Access 2 NSAC*100                        :0x0
11:27:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:16: Card Command Classess CCC                     :0x5b5
11:27:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:16: DSR(driver stage register)  DSR_IMP           :0x0
11:27:16: Reserv2                                       :0x0
11:27:16: Device Size C_SIZE                            :0xedc8
11:27:16: Reserv3                                       :0x0
11:27:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:16: Reserv4                                       :0x0
11:27:16: Write Speed Factor R2W_FACTOR                 :0x2
11:27:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:16: FILE_FORMAT_GRP                               :0x0
11:27:16: COPY flag                                     :0x1
11:27:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:16: File_Format                                   :0x0
11:27:16: CRC                                           :0x0
11:27:16: ####CSD Registe Values####  

11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B40>, <py_sfcl.CommandDataDefinition object at 0x0627A240>) , Command count = 3072 ] 
11:27:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E40>, <py_sfcl.CommandDataDefinition object at 0x06273F90>) , Command count = 3073 ] 
11:27:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273B40>, <py_sfcl.PySEnhancedCmdData object at 0x06273120>, <None>, <py_sfcl.Command23 object at 0x062763F0>) , Command count = 3074 ] 
11:27:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:19: Host Frequency set to 25000 KHz
11:27:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276990>, 0x0, True) , Command count = 3075 ] 
11:27:19: [GO18_globalSetVolt]### Host voltage value is set.
11:27:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x053FB4E0>, 0x0, False) , Command count = 3076 ] 
11:27:19: [GO18_globalSetVolt]### Host voltage value is set.
11:27:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3077 ] 
11:27:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3078 ] 
11:27:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3079 ] 
11:27:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269FC0>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 3080 ] 
11:27:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CAE70>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 3081 ] 
11:27:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3082 ] 
11:27:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:19: Host Frequency set to 25000 KHz
11:27:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:19: ####CSD Registe 2.0 Values####
11:27:19: CSD_STRUCTURE                                 :0x1
11:27:19: Reserv1                                       :0x0
11:27:19: Time Access 1 TAAC                            :0xe
11:27:19: Time Access 2 NSAC*100                        :0x0
11:27:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:19: Card Command Classess CCC                     :0x5b5
11:27:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:19: DSR(driver stage register)  DSR_IMP           :0x0
11:27:19: Reserv2                                       :0x0
11:27:19: Device Size C_SIZE                            :0xedc8
11:27:19: Reserv3                                       :0x0
11:27:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:19: Reserv4                                       :0x0
11:27:19: Write Speed Factor R2W_FACTOR                 :0x2
11:27:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:19: FILE_FORMAT_GRP                               :0x0
11:27:19: COPY flag                                     :0x1
11:27:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:19: File_Format                                   :0x0
11:27:19: CRC                                           :0x0
11:27:19: ####CSD Registe Values####  

11:27:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:19: [GetSCRRegisterEntry] Passed
11:27:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:19: Data_Status_After Erases          : 0
11:27:19: CPRM Security Support             : No Security
11:27:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:19: Spec. Version                     : Version 3.0X
11:27:19: Extended Security Support         : Extended_Security_Not_Supported
11:27:19: Command Support                   : COMMAND_SUPPORT
11:27:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D090>, <py_sfcl.CommandDataDefinition object at 0x06276E70>) , Command count = 3083 ] 
11:27:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627DB40>) , Command count = 3084 ] 
11:27:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:19: [ SetBusWidth(0x4) , Command count = 3085 ] 
11:27:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3086 ] 
11:27:19: Protected Area Size 0x28000
11:27:19: Bus Width           2
11:27:19: Secure Mode         0
11:27:19: Speed  Class        4
11:27:19: Perf Move           0
11:27:19: Au Size             9
11:27:19: Erase Size          15
11:27:19: Erase Timeout       1
11:27:19: Erase offset        1
11:27:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3087 ] 
11:27:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:19: Host Frequency set to 100000 KHz
11:27:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:19: ####CSD Registe 2.0 Values####
11:27:19: CSD_STRUCTURE                                 :0x1
11:27:19: Reserv1                                       :0x0
11:27:19: Time Access 1 TAAC                            :0xe
11:27:19: Time Access 2 NSAC*100                        :0x0
11:27:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:19: Card Command Classess CCC                     :0x5b5
11:27:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:20: DSR(driver stage register)  DSR_IMP           :0x0
11:27:20: Reserv2                                       :0x0
11:27:20: Device Size C_SIZE                            :0xedc8
11:27:20: Reserv3                                       :0x0
11:27:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:20: Reserv4                                       :0x0
11:27:20: Write Speed Factor R2W_FACTOR                 :0x2
11:27:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:20: FILE_FORMAT_GRP                               :0x0
11:27:20: COPY flag                                     :0x1
11:27:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:20: File_Format                                   :0x0
11:27:20: CRC                                           :0x0
11:27:20: ####CSD Registe Values####  

11:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268720>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 3088 ] 
11:27:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DEE40>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 3089 ] 
11:27:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A750>, <py_sfcl.PySEnhancedCmdData object at 0x0627A540>, <None>, <py_sfcl.Command23 object at 0x06273090>) , Command count = 3090 ] 
11:27:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:22: Host Frequency set to 25000 KHz
11:27:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x053E2420>, 0x0, True) , Command count = 3091 ] 
11:27:22: [GO18_globalSetVolt]### Host voltage value is set.
11:27:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF2D0>, 0x0, False) , Command count = 3092 ] 
11:27:22: [GO18_globalSetVolt]### Host voltage value is set.
11:27:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3093 ] 
11:27:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3094 ] 
11:27:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3095 ] 
11:27:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F30>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 3096 ] 
11:27:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 3097 ] 
11:27:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3098 ] 
11:27:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:23: Host Frequency set to 25000 KHz
11:27:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:23: ####CSD Registe 2.0 Values####
11:27:23: CSD_STRUCTURE                                 :0x1
11:27:23: Reserv1                                       :0x0
11:27:23: Time Access 1 TAAC                            :0xe
11:27:23: Time Access 2 NSAC*100                        :0x0
11:27:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:23: Card Command Classess CCC                     :0x5b5
11:27:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:23: DSR(driver stage register)  DSR_IMP           :0x0
11:27:23: Reserv2                                       :0x0
11:27:23: Device Size C_SIZE                            :0xedc8
11:27:23: Reserv3                                       :0x0
11:27:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:23: Reserv4                                       :0x0
11:27:23: Write Speed Factor R2W_FACTOR                 :0x2
11:27:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:23: FILE_FORMAT_GRP                               :0x0
11:27:23: COPY flag                                     :0x1
11:27:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:23: File_Format                                   :0x0
11:27:23: CRC                                           :0x0
11:27:23: ####CSD Registe Values####  

11:27:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:23: [GetSCRRegisterEntry] Passed
11:27:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:23: Data_Status_After Erases          : 0
11:27:23: CPRM Security Support             : No Security
11:27:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:23: Spec. Version                     : Version 3.0X
11:27:23: Extended Security Support         : Extended_Security_Not_Supported
11:27:23: Command Support                   : COMMAND_SUPPORT
11:27:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x062168D0>) , Command count = 3099 ] 
11:27:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 3100 ] 
11:27:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:23: [ SetBusWidth(0x4) , Command count = 3101 ] 
11:27:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3102 ] 
11:27:23: Protected Area Size 0x28000
11:27:23: Bus Width           2
11:27:23: Secure Mode         0
11:27:23: Speed  Class        4
11:27:23: Perf Move           0
11:27:23: Au Size             9
11:27:23: Erase Size          15
11:27:23: Erase Timeout       1
11:27:23: Erase offset        1
11:27:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3103 ] 
11:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:23: Host Frequency set to 100000 KHz
11:27:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:23: ####CSD Registe 2.0 Values####
11:27:23: CSD_STRUCTURE                                 :0x1
11:27:23: Reserv1                                       :0x0
11:27:23: Time Access 1 TAAC                            :0xe
11:27:23: Time Access 2 NSAC*100                        :0x0
11:27:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:23: Card Command Classess CCC                     :0x5b5
11:27:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:23: DSR(driver stage register)  DSR_IMP           :0x0
11:27:23: Reserv2                                       :0x0
11:27:23: Device Size C_SIZE                            :0xedc8
11:27:23: Reserv3                                       :0x0
11:27:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:23: Reserv4                                       :0x0
11:27:23: Write Speed Factor R2W_FACTOR                 :0x2
11:27:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:23: FILE_FORMAT_GRP                               :0x0
11:27:23: COPY flag                                     :0x1
11:27:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:23: File_Format                                   :0x0
11:27:23: CRC                                           :0x0
11:27:23: ####CSD Registe Values####  

11:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D870>, <py_sfcl.CommandDataDefinition object at 0x0627A570>) , Command count = 3104 ] 
11:27:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019C0>, <py_sfcl.CommandDataDefinition object at 0x0627ADE0>) , Command count = 3105 ] 
11:27:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276540>, <py_sfcl.PySEnhancedCmdData object at 0x06276CC0>, <None>, <py_sfcl.Command23 object at 0x0627A690>) , Command count = 3106 ] 
11:27:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:24: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:26: Host Frequency set to 25000 KHz
11:27:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:26: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DCF0>, 0x0, True) , Command count = 3107 ] 
11:27:26: [GO18_globalSetVolt]### Host voltage value is set.
11:27:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268090>, 0x0, False) , Command count = 3108 ] 
11:27:26: [GO18_globalSetVolt]### Host voltage value is set.
11:27:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3109 ] 
11:27:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3110 ] 
11:27:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3111 ] 
11:27:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC30>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 3112 ] 
11:27:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627AC00>) , Command count = 3113 ] 
11:27:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3114 ] 
11:27:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:26: Host Frequency set to 25000 KHz
11:27:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:26: ####CSD Registe 2.0 Values####
11:27:26: CSD_STRUCTURE                                 :0x1
11:27:26: Reserv1                                       :0x0
11:27:26: Time Access 1 TAAC                            :0xe
11:27:26: Time Access 2 NSAC*100                        :0x0
11:27:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:26: Card Command Classess CCC                     :0x5b5
11:27:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:26: DSR(driver stage register)  DSR_IMP           :0x0
11:27:26: Reserv2                                       :0x0
11:27:26: Device Size C_SIZE                            :0xedc8
11:27:26: Reserv3                                       :0x0
11:27:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:26: Reserv4                                       :0x0
11:27:26: Write Speed Factor R2W_FACTOR                 :0x2
11:27:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:26: FILE_FORMAT_GRP                               :0x0
11:27:26: COPY flag                                     :0x1
11:27:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:26: File_Format                                   :0x0
11:27:26: CRC                                           :0x0
11:27:26: ####CSD Registe Values####  

11:27:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:26: [GetSCRRegisterEntry] Passed
11:27:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:26: Data_Status_After Erases          : 0
11:27:26: CPRM Security Support             : No Security
11:27:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:26: Spec. Version                     : Version 3.0X
11:27:26: Extended Security Support         : Extended_Security_Not_Supported
11:27:26: Command Support                   : COMMAND_SUPPORT
11:27:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 3115 ] 
11:27:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 3116 ] 
11:27:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:26: [ SetBusWidth(0x4) , Command count = 3117 ] 
11:27:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3118 ] 
11:27:26: Protected Area Size 0x28000
11:27:26: Bus Width           2
11:27:26: Secure Mode         0
11:27:26: Speed  Class        4
11:27:26: Perf Move           0
11:27:26: Au Size             9
11:27:26: Erase Size          15
11:27:26: Erase Timeout       1
11:27:26: Erase offset        1
11:27:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3119 ] 
11:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:26: Host Frequency set to 100000 KHz
11:27:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:26: ####CSD Registe 2.0 Values####
11:27:26: CSD_STRUCTURE                                 :0x1
11:27:26: Reserv1                                       :0x0
11:27:26: Time Access 1 TAAC                            :0xe
11:27:26: Time Access 2 NSAC*100                        :0x0
11:27:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:26: Card Command Classess CCC                     :0x5b5
11:27:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:26: DSR(driver stage register)  DSR_IMP           :0x0
11:27:26: Reserv2                                       :0x0
11:27:26: Device Size C_SIZE                            :0xedc8
11:27:26: Reserv3                                       :0x0
11:27:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:27: Reserv4                                       :0x0
11:27:27: Write Speed Factor R2W_FACTOR                 :0x2
11:27:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:27: FILE_FORMAT_GRP                               :0x0
11:27:27: COPY flag                                     :0x1
11:27:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:27: File_Format                                   :0x0
11:27:27: CRC                                           :0x0
11:27:27: ####CSD Registe Values####  

11:27:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x05401F00>) , Command count = 3120 ] 
11:27:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 3121 ] 
11:27:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AED0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A9F0>, <None>, <py_sfcl.Command23 object at 0x06276390>) , Command count = 3122 ] 
11:27:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:29: Host Frequency set to 25000 KHz
11:27:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A5A0>, 0x0, True) , Command count = 3123 ] 
11:27:29: [GO18_globalSetVolt]### Host voltage value is set.
11:27:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AC30>, 0x0, False) , Command count = 3124 ] 
11:27:29: [GO18_globalSetVolt]### Host voltage value is set.
11:27:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3125 ] 
11:27:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3126 ] 
11:27:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3127 ] 
11:27:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062165D0>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 3128 ] 
11:27:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x0627ACF0>) , Command count = 3129 ] 
11:27:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3130 ] 
11:27:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:30: Host Frequency set to 25000 KHz
11:27:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:30: ####CSD Registe 2.0 Values####
11:27:30: CSD_STRUCTURE                                 :0x1
11:27:30: Reserv1                                       :0x0
11:27:30: Time Access 1 TAAC                            :0xe
11:27:30: Time Access 2 NSAC*100                        :0x0
11:27:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:30: Card Command Classess CCC                     :0x5b5
11:27:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:30: DSR(driver stage register)  DSR_IMP           :0x0
11:27:30: Reserv2                                       :0x0
11:27:30: Device Size C_SIZE                            :0xedc8
11:27:30: Reserv3                                       :0x0
11:27:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:30: Reserv4                                       :0x0
11:27:30: Write Speed Factor R2W_FACTOR                 :0x2
11:27:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:30: FILE_FORMAT_GRP                               :0x0
11:27:30: COPY flag                                     :0x1
11:27:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:30: File_Format                                   :0x0
11:27:30: CRC                                           :0x0
11:27:30: ####CSD Registe Values####  

11:27:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:30: [GetSCRRegisterEntry] Passed
11:27:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:30: Data_Status_After Erases          : 0
11:27:30: CPRM Security Support             : No Security
11:27:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:30: Spec. Version                     : Version 3.0X
11:27:30: Extended Security Support         : Extended_Security_Not_Supported
11:27:30: Command Support                   : COMMAND_SUPPORT
11:27:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627A960>) , Command count = 3131 ] 
11:27:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D540>, <py_sfcl.CommandDataDefinition object at 0x0627AE70>) , Command count = 3132 ] 
11:27:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:30: [ SetBusWidth(0x4) , Command count = 3133 ] 
11:27:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3134 ] 
11:27:30: Protected Area Size 0x28000
11:27:30: Bus Width           2
11:27:30: Secure Mode         0
11:27:30: Speed  Class        4
11:27:30: Perf Move           0
11:27:30: Au Size             9
11:27:30: Erase Size          15
11:27:30: Erase Timeout       1
11:27:30: Erase offset        1
11:27:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3135 ] 
11:27:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:30: Host Frequency set to 100000 KHz
11:27:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:30: ####CSD Registe 2.0 Values####
11:27:30: CSD_STRUCTURE                                 :0x1
11:27:30: Reserv1                                       :0x0
11:27:30: Time Access 1 TAAC                            :0xe
11:27:30: Time Access 2 NSAC*100                        :0x0
11:27:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:30: Card Command Classess CCC                     :0x5b5
11:27:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:30: DSR(driver stage register)  DSR_IMP           :0x0
11:27:30: Reserv2                                       :0x0
11:27:30: Device Size C_SIZE                            :0xedc8
11:27:30: Reserv3                                       :0x0
11:27:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:30: Reserv4                                       :0x0
11:27:30: Write Speed Factor R2W_FACTOR                 :0x2
11:27:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:30: FILE_FORMAT_GRP                               :0x0
11:27:30: COPY flag                                     :0x1
11:27:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:30: File_Format                                   :0x0
11:27:30: CRC                                           :0x0
11:27:30: ####CSD Registe Values####  

11:27:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 3136 ] 
11:27:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627ABD0>, <py_sfcl.CommandDataDefinition object at 0x0627ACC0>) , Command count = 3137 ] 
11:27:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x06268030>, <None>, <py_sfcl.Command23 object at 0x0627AAE0>) , Command count = 3138 ] 
11:27:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:33: Host Frequency set to 25000 KHz
11:27:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x062680C0>, 0x0, True) , Command count = 3139 ] 
11:27:33: [GO18_globalSetVolt]### Host voltage value is set.
11:27:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268750>, 0x0, False) , Command count = 3140 ] 
11:27:33: [GO18_globalSetVolt]### Host voltage value is set.
11:27:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3141 ] 
11:27:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3142 ] 
11:27:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3143 ] 
11:27:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AD20>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 3144 ] 
11:27:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D510>, <py_sfcl.CommandDataDefinition object at 0x0627D4B0>) , Command count = 3145 ] 
11:27:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3146 ] 
11:27:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:33: Host Frequency set to 25000 KHz
11:27:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:33: ####CSD Registe 2.0 Values####
11:27:33: CSD_STRUCTURE                                 :0x1
11:27:33: Reserv1                                       :0x0
11:27:33: Time Access 1 TAAC                            :0xe
11:27:33: Time Access 2 NSAC*100                        :0x0
11:27:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:33: Card Command Classess CCC                     :0x5b5
11:27:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:33: DSR(driver stage register)  DSR_IMP           :0x0
11:27:33: Reserv2                                       :0x0
11:27:33: Device Size C_SIZE                            :0xedc8
11:27:33: Reserv3                                       :0x0
11:27:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:33: Reserv4                                       :0x0
11:27:33: Write Speed Factor R2W_FACTOR                 :0x2
11:27:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:33: FILE_FORMAT_GRP                               :0x0
11:27:33: COPY flag                                     :0x1
11:27:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:33: File_Format                                   :0x0
11:27:33: CRC                                           :0x0
11:27:33: ####CSD Registe Values####  

11:27:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:33: [GetSCRRegisterEntry] Passed
11:27:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:33: Data_Status_After Erases          : 0
11:27:33: CPRM Security Support             : No Security
11:27:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:33: Spec. Version                     : Version 3.0X
11:27:33: Extended Security Support         : Extended_Security_Not_Supported
11:27:33: Command Support                   : COMMAND_SUPPORT
11:27:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C60>, <py_sfcl.CommandDataDefinition object at 0x06216570>) , Command count = 3147 ] 
11:27:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x061AF660>) , Command count = 3148 ] 
11:27:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:33: [ SetBusWidth(0x4) , Command count = 3149 ] 
11:27:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062167E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3150 ] 
11:27:33: Protected Area Size 0x28000
11:27:33: Bus Width           2
11:27:33: Secure Mode         0
11:27:33: Speed  Class        4
11:27:33: Perf Move           0
11:27:33: Au Size             9
11:27:33: Erase Size          15
11:27:33: Erase Timeout       1
11:27:33: Erase offset        1
11:27:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3151 ] 
11:27:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:33: Host Frequency set to 100000 KHz
11:27:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:33: ####CSD Registe 2.0 Values####
11:27:33: CSD_STRUCTURE                                 :0x1
11:27:34: Reserv1                                       :0x0
11:27:34: Time Access 1 TAAC                            :0xe
11:27:34: Time Access 2 NSAC*100                        :0x0
11:27:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:34: Card Command Classess CCC                     :0x5b5
11:27:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:34: DSR(driver stage register)  DSR_IMP           :0x0
11:27:34: Reserv2                                       :0x0
11:27:34: Device Size C_SIZE                            :0xedc8
11:27:34: Reserv3                                       :0x0
11:27:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:34: Reserv4                                       :0x0
11:27:34: Write Speed Factor R2W_FACTOR                 :0x2
11:27:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:34: FILE_FORMAT_GRP                               :0x0
11:27:34: COPY flag                                     :0x1
11:27:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:34: File_Format                                   :0x0
11:27:34: CRC                                           :0x0
11:27:34: ####CSD Registe Values####  

11:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062686F0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 3152 ] 
11:27:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x0627D120>) , Command count = 3153 ] 
11:27:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D480>, <py_sfcl.PySEnhancedCmdData object at 0x0627D3F0>, <None>, <py_sfcl.Command23 object at 0x062684B0>) , Command count = 3154 ] 
11:27:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:36: Host Frequency set to 25000 KHz
11:27:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F60>, 0x0, True) , Command count = 3155 ] 
11:27:36: [GO18_globalSetVolt]### Host voltage value is set.
11:27:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A330>, 0x0, False) , Command count = 3156 ] 
11:27:36: [GO18_globalSetVolt]### Host voltage value is set.
11:27:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3157 ] 
11:27:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3158 ] 
11:27:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3159 ] 
11:27:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216AB0>, <py_sfcl.CommandDataDefinition object at 0x0626DF60>) , Command count = 3160 ] 
11:27:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x0627D690>) , Command count = 3161 ] 
11:27:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3162 ] 
11:27:37: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:37: Host Frequency set to 25000 KHz
11:27:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:37: ####CSD Registe 2.0 Values####
11:27:37: CSD_STRUCTURE                                 :0x1
11:27:37: Reserv1                                       :0x0
11:27:37: Time Access 1 TAAC                            :0xe
11:27:37: Time Access 2 NSAC*100                        :0x0
11:27:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:37: Card Command Classess CCC                     :0x5b5
11:27:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:37: DSR(driver stage register)  DSR_IMP           :0x0
11:27:37: Reserv2                                       :0x0
11:27:37: Device Size C_SIZE                            :0xedc8
11:27:37: Reserv3                                       :0x0
11:27:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:37: Reserv4                                       :0x0
11:27:37: Write Speed Factor R2W_FACTOR                 :0x2
11:27:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:37: FILE_FORMAT_GRP                               :0x0
11:27:37: COPY flag                                     :0x1
11:27:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:37: File_Format                                   :0x0
11:27:37: CRC                                           :0x0
11:27:37: ####CSD Registe Values####  

11:27:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:37: [GetSCRRegisterEntry] Passed
11:27:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:37: Data_Status_After Erases          : 0
11:27:37: CPRM Security Support             : No Security
11:27:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:37: Spec. Version                     : Version 3.0X
11:27:37: Extended Security Support         : Extended_Security_Not_Supported
11:27:37: Command Support                   : COMMAND_SUPPORT
11:27:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x06268840>) , Command count = 3163 ] 
11:27:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 3164 ] 
11:27:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:37: [ SetBusWidth(0x4) , Command count = 3165 ] 
11:27:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062683C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3166 ] 
11:27:37: Protected Area Size 0x28000
11:27:37: Bus Width           2
11:27:37: Secure Mode         0
11:27:37: Speed  Class        4
11:27:37: Perf Move           0
11:27:37: Au Size             9
11:27:37: Erase Size          15
11:27:37: Erase Timeout       1
11:27:37: Erase offset        1
11:27:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3167 ] 
11:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:37: Host Frequency set to 100000 KHz
11:27:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:37: ####CSD Registe 2.0 Values####
11:27:37: CSD_STRUCTURE                                 :0x1
11:27:37: Reserv1                                       :0x0
11:27:37: Time Access 1 TAAC                            :0xe
11:27:37: Time Access 2 NSAC*100                        :0x0
11:27:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:37: Card Command Classess CCC                     :0x5b5
11:27:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:37: DSR(driver stage register)  DSR_IMP           :0x0
11:27:37: Reserv2                                       :0x0
11:27:37: Device Size C_SIZE                            :0xedc8
11:27:37: Reserv3                                       :0x0
11:27:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:37: Reserv4                                       :0x0
11:27:37: Write Speed Factor R2W_FACTOR                 :0x2
11:27:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:37: FILE_FORMAT_GRP                               :0x0
11:27:37: COPY flag                                     :0x1
11:27:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:37: File_Format                                   :0x0
11:27:37: CRC                                           :0x0
11:27:37: ####CSD Registe Values####  

11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269240>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 3168 ] 
11:27:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0627D240>) , Command count = 3169 ] 
11:27:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D810>, <py_sfcl.PySEnhancedCmdData object at 0x0627D2D0>, <None>, <py_sfcl.Command23 object at 0x0627DF60>) , Command count = 3170 ] 
11:27:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:40: Host Frequency set to 25000 KHz
11:27:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D7E0>, 0x0, True) , Command count = 3171 ] 
11:27:40: [GO18_globalSetVolt]### Host voltage value is set.
11:27:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D6F0>, 0x0, False) , Command count = 3172 ] 
11:27:40: [GO18_globalSetVolt]### Host voltage value is set.
11:27:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3173 ] 
11:27:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3174 ] 
11:27:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3175 ] 
11:27:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268E70>, <py_sfcl.CommandDataDefinition object at 0x062680F0>) , Command count = 3176 ] 
11:27:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x06269C00>) , Command count = 3177 ] 
11:27:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3178 ] 
11:27:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:40: Host Frequency set to 25000 KHz
11:27:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:40: ####CSD Registe 2.0 Values####
11:27:40: CSD_STRUCTURE                                 :0x1
11:27:40: Reserv1                                       :0x0
11:27:40: Time Access 1 TAAC                            :0xe
11:27:40: Time Access 2 NSAC*100                        :0x0
11:27:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:40: Card Command Classess CCC                     :0x5b5
11:27:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:40: DSR(driver stage register)  DSR_IMP           :0x0
11:27:40: Reserv2                                       :0x0
11:27:40: Device Size C_SIZE                            :0xedc8
11:27:40: Reserv3                                       :0x0
11:27:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:40: Reserv4                                       :0x0
11:27:40: Write Speed Factor R2W_FACTOR                 :0x2
11:27:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:40: FILE_FORMAT_GRP                               :0x0
11:27:40: COPY flag                                     :0x1
11:27:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:40: File_Format                                   :0x0
11:27:40: CRC                                           :0x0
11:27:40: ####CSD Registe Values####  

11:27:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:40: [GetSCRRegisterEntry] Passed
11:27:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:40: Data_Status_After Erases          : 0
11:27:40: CPRM Security Support             : No Security
11:27:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:40: Spec. Version                     : Version 3.0X
11:27:40: Extended Security Support         : Extended_Security_Not_Supported
11:27:40: Command Support                   : COMMAND_SUPPORT
11:27:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273ED0>, <py_sfcl.CommandDataDefinition object at 0x06268E10>) , Command count = 3179 ] 
11:27:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D870>, <py_sfcl.CommandDataDefinition object at 0x0626D1E0>) , Command count = 3180 ] 
11:27:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:40: [ SetBusWidth(0x4) , Command count = 3181 ] 
11:27:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3182 ] 
11:27:40: Protected Area Size 0x28000
11:27:40: Bus Width           2
11:27:40: Secure Mode         0
11:27:40: Speed  Class        4
11:27:40: Perf Move           0
11:27:40: Au Size             9
11:27:40: Erase Size          15
11:27:40: Erase Timeout       1
11:27:40: Erase offset        1
11:27:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3183 ] 
11:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:40: Host Frequency set to 100000 KHz
11:27:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:40: ####CSD Registe 2.0 Values####
11:27:40: CSD_STRUCTURE                                 :0x1
11:27:40: Reserv1                                       :0x0
11:27:40: Time Access 1 TAAC                            :0xe
11:27:41: Time Access 2 NSAC*100                        :0x0
11:27:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:41: Card Command Classess CCC                     :0x5b5
11:27:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:41: DSR(driver stage register)  DSR_IMP           :0x0
11:27:41: Reserv2                                       :0x0
11:27:41: Device Size C_SIZE                            :0xedc8
11:27:41: Reserv3                                       :0x0
11:27:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:41: Reserv4                                       :0x0
11:27:41: Write Speed Factor R2W_FACTOR                 :0x2
11:27:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:41: FILE_FORMAT_GRP                               :0x0
11:27:41: COPY flag                                     :0x1
11:27:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:41: File_Format                                   :0x0
11:27:41: CRC                                           :0x0
11:27:41: ####CSD Registe Values####  

11:27:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x06268900>) , Command count = 3184 ] 
11:27:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x0627D3C0>) , Command count = 3185 ] 
11:27:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269150>, <py_sfcl.PySEnhancedCmdData object at 0x06269E10>, <None>, <py_sfcl.Command23 object at 0x0627DDE0>) , Command count = 3186 ] 
11:27:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:43: Host Frequency set to 25000 KHz
11:27:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D450>, 0x0, True) , Command count = 3187 ] 
11:27:43: [GO18_globalSetVolt]### Host voltage value is set.
11:27:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269540>, 0x0, False) , Command count = 3188 ] 
11:27:43: [GO18_globalSetVolt]### Host voltage value is set.
11:27:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3189 ] 
11:27:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3190 ] 
11:27:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3191 ] 
11:27:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269060>, <py_sfcl.CommandDataDefinition object at 0x06273150>) , Command count = 3192 ] 
11:27:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269810>, <py_sfcl.CommandDataDefinition object at 0x06268FC0>) , Command count = 3193 ] 
11:27:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3194 ] 
11:27:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:44: Host Frequency set to 25000 KHz
11:27:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:44: ####CSD Registe 2.0 Values####
11:27:44: CSD_STRUCTURE                                 :0x1
11:27:44: Reserv1                                       :0x0
11:27:44: Time Access 1 TAAC                            :0xe
11:27:44: Time Access 2 NSAC*100                        :0x0
11:27:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:44: Card Command Classess CCC                     :0x5b5
11:27:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:44: DSR(driver stage register)  DSR_IMP           :0x0
11:27:44: Reserv2                                       :0x0
11:27:44: Device Size C_SIZE                            :0xedc8
11:27:44: Reserv3                                       :0x0
11:27:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:44: Reserv4                                       :0x0
11:27:44: Write Speed Factor R2W_FACTOR                 :0x2
11:27:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:44: FILE_FORMAT_GRP                               :0x0
11:27:44: COPY flag                                     :0x1
11:27:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:44: File_Format                                   :0x0
11:27:44: CRC                                           :0x0
11:27:44: ####CSD Registe Values####  

11:27:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:44: [GetSCRRegisterEntry] Passed
11:27:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:44: Data_Status_After Erases          : 0
11:27:44: CPRM Security Support             : No Security
11:27:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:44: Spec. Version                     : Version 3.0X
11:27:44: Extended Security Support         : Extended_Security_Not_Supported
11:27:44: Command Support                   : COMMAND_SUPPORT
11:27:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 3195 ] 
11:27:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268F90>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 3196 ] 
11:27:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:44: [ SetBusWidth(0x4) , Command count = 3197 ] 
11:27:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052C4030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3198 ] 
11:27:44: Protected Area Size 0x28000
11:27:44: Bus Width           2
11:27:44: Secure Mode         0
11:27:44: Speed  Class        4
11:27:44: Perf Move           0
11:27:44: Au Size             9
11:27:44: Erase Size          15
11:27:44: Erase Timeout       1
11:27:44: Erase offset        1
11:27:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3199 ] 
11:27:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:44: Host Frequency set to 100000 KHz
11:27:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:44: ####CSD Registe 2.0 Values####
11:27:44: CSD_STRUCTURE                                 :0x1
11:27:44: Reserv1                                       :0x0
11:27:44: Time Access 1 TAAC                            :0xe
11:27:44: Time Access 2 NSAC*100                        :0x0
11:27:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:44: Card Command Classess CCC                     :0x5b5
11:27:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:44: DSR(driver stage register)  DSR_IMP           :0x0
11:27:44: Reserv2                                       :0x0
11:27:44: Device Size C_SIZE                            :0xedc8
11:27:44: Reserv3                                       :0x0
11:27:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:44: Reserv4                                       :0x0
11:27:44: Write Speed Factor R2W_FACTOR                 :0x2
11:27:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:44: FILE_FORMAT_GRP                               :0x0
11:27:44: COPY flag                                     :0x1
11:27:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:44: File_Format                                   :0x0
11:27:44: CRC                                           :0x0
11:27:44: ####CSD Registe Values####  

11:27:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268F30>, <py_sfcl.CommandDataDefinition object at 0x0627D780>) , Command count = 3200 ] 
11:27:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695A0>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 3201 ] 
11:27:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D360>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF90>, <None>, <py_sfcl.Command23 object at 0x06269390>) , Command count = 3202 ] 
11:27:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:47: Host Frequency set to 25000 KHz
11:27:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268D50>, 0x0, True) , Command count = 3203 ] 
11:27:47: [GO18_globalSetVolt]### Host voltage value is set.
11:27:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, False) , Command count = 3204 ] 
11:27:47: [GO18_globalSetVolt]### Host voltage value is set.
11:27:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3205 ] 
11:27:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3206 ] 
11:27:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3207 ] 
11:27:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA50>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 3208 ] 
11:27:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB40>, <py_sfcl.CommandDataDefinition object at 0x06269B10>) , Command count = 3209 ] 
11:27:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3210 ] 
11:27:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:47: Host Frequency set to 25000 KHz
11:27:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:47: ####CSD Registe 2.0 Values####
11:27:47: CSD_STRUCTURE                                 :0x1
11:27:47: Reserv1                                       :0x0
11:27:47: Time Access 1 TAAC                            :0xe
11:27:47: Time Access 2 NSAC*100                        :0x0
11:27:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:47: Card Command Classess CCC                     :0x5b5
11:27:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:47: DSR(driver stage register)  DSR_IMP           :0x0
11:27:47: Reserv2                                       :0x0
11:27:47: Device Size C_SIZE                            :0xedc8
11:27:47: Reserv3                                       :0x0
11:27:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:47: Reserv4                                       :0x0
11:27:47: Write Speed Factor R2W_FACTOR                 :0x2
11:27:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:47: FILE_FORMAT_GRP                               :0x0
11:27:47: COPY flag                                     :0x1
11:27:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:47: File_Format                                   :0x0
11:27:47: CRC                                           :0x0
11:27:47: ####CSD Registe Values####  

11:27:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:47: [GetSCRRegisterEntry] Passed
11:27:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:47: Data_Status_After Erases          : 0
11:27:47: CPRM Security Support             : No Security
11:27:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:47: Spec. Version                     : Version 3.0X
11:27:47: Extended Security Support         : Extended_Security_Not_Supported
11:27:47: Command Support                   : COMMAND_SUPPORT
11:27:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 3211 ] 
11:27:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 3212 ] 
11:27:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:47: [ SetBusWidth(0x4) , Command count = 3213 ] 
11:27:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3214 ] 
11:27:47: Protected Area Size 0x28000
11:27:47: Bus Width           2
11:27:47: Secure Mode         0
11:27:47: Speed  Class        4
11:27:47: Perf Move           0
11:27:47: Au Size             9
11:27:47: Erase Size          15
11:27:47: Erase Timeout       1
11:27:47: Erase offset        1
11:27:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3215 ] 
11:27:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:47: Host Frequency set to 100000 KHz
11:27:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:47: ####CSD Registe 2.0 Values####
11:27:47: CSD_STRUCTURE                                 :0x1
11:27:47: Reserv1                                       :0x0
11:27:47: Time Access 1 TAAC                            :0xe
11:27:47: Time Access 2 NSAC*100                        :0x0
11:27:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:47: Card Command Classess CCC                     :0x5b5
11:27:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:47: DSR(driver stage register)  DSR_IMP           :0x0
11:27:47: Reserv2                                       :0x0
11:27:47: Device Size C_SIZE                            :0xedc8
11:27:47: Reserv3                                       :0x0
11:27:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:48: Reserv4                                       :0x0
11:27:48: Write Speed Factor R2W_FACTOR                 :0x2
11:27:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:48: FILE_FORMAT_GRP                               :0x0
11:27:48: COPY flag                                     :0x1
11:27:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:48: File_Format                                   :0x0
11:27:48: CRC                                           :0x0
11:27:48: ####CSD Registe Values####  

11:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DB0>, <py_sfcl.CommandDataDefinition object at 0x06269CF0>) , Command count = 3216 ] 
11:27:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9C0>, <py_sfcl.CommandDataDefinition object at 0x06269D50>) , Command count = 3217 ] 
11:27:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062695D0>, <py_sfcl.PySEnhancedCmdData object at 0x06269BD0>, <None>, <py_sfcl.Command23 object at 0x0626D660>) , Command count = 3218 ] 
11:27:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:48: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:50: Host Frequency set to 25000 KHz
11:27:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:50: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273630>, 0x0, True) , Command count = 3219 ] 
11:27:50: [GO18_globalSetVolt]### Host voltage value is set.
11:27:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273690>, 0x0, False) , Command count = 3220 ] 
11:27:50: [GO18_globalSetVolt]### Host voltage value is set.
11:27:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3221 ] 
11:27:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3222 ] 
11:27:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3223 ] 
11:27:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA20>, <py_sfcl.CommandDataDefinition object at 0x062698A0>) , Command count = 3224 ] 
11:27:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x0626D480>) , Command count = 3225 ] 
11:27:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3226 ] 
11:27:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:51: Host Frequency set to 25000 KHz
11:27:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:51: ####CSD Registe 2.0 Values####
11:27:51: CSD_STRUCTURE                                 :0x1
11:27:51: Reserv1                                       :0x0
11:27:51: Time Access 1 TAAC                            :0xe
11:27:51: Time Access 2 NSAC*100                        :0x0
11:27:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:51: Card Command Classess CCC                     :0x5b5
11:27:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:51: DSR(driver stage register)  DSR_IMP           :0x0
11:27:51: Reserv2                                       :0x0
11:27:51: Device Size C_SIZE                            :0xedc8
11:27:51: Reserv3                                       :0x0
11:27:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:51: Reserv4                                       :0x0
11:27:51: Write Speed Factor R2W_FACTOR                 :0x2
11:27:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:51: FILE_FORMAT_GRP                               :0x0
11:27:51: COPY flag                                     :0x1
11:27:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:51: File_Format                                   :0x0
11:27:51: CRC                                           :0x0
11:27:51: ####CSD Registe Values####  

11:27:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:51: [GetSCRRegisterEntry] Passed
11:27:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:51: Data_Status_After Erases          : 0
11:27:51: CPRM Security Support             : No Security
11:27:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:51: Spec. Version                     : Version 3.0X
11:27:51: Extended Security Support         : Extended_Security_Not_Supported
11:27:51: Command Support                   : COMMAND_SUPPORT
11:27:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698D0>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 3227 ] 
11:27:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 3228 ] 
11:27:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:51: [ SetBusWidth(0x4) , Command count = 3229 ] 
11:27:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062689C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3230 ] 
11:27:51: Protected Area Size 0x28000
11:27:51: Bus Width           2
11:27:51: Secure Mode         0
11:27:51: Speed  Class        4
11:27:51: Perf Move           0
11:27:51: Au Size             9
11:27:51: Erase Size          15
11:27:51: Erase Timeout       1
11:27:51: Erase offset        1
11:27:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3231 ] 
11:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:51: Host Frequency set to 100000 KHz
11:27:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:51: ####CSD Registe 2.0 Values####
11:27:51: CSD_STRUCTURE                                 :0x1
11:27:51: Reserv1                                       :0x0
11:27:51: Time Access 1 TAAC                            :0xe
11:27:51: Time Access 2 NSAC*100                        :0x0
11:27:51: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:51: Card Command Classess CCC                     :0x5b5
11:27:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:51: DSR(driver stage register)  DSR_IMP           :0x0
11:27:51: Reserv2                                       :0x0
11:27:51: Device Size C_SIZE                            :0xedc8
11:27:51: Reserv3                                       :0x0
11:27:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:52: Reserv4                                       :0x0
11:27:52: Write Speed Factor R2W_FACTOR                 :0x2
11:27:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:52: FILE_FORMAT_GRP                               :0x0
11:27:52: COPY flag                                     :0x1
11:27:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:52: File_Format                                   :0x0
11:27:52: CRC                                           :0x0
11:27:52: ####CSD Registe Values####  

11:27:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C60>, <py_sfcl.CommandDataDefinition object at 0x06273CF0>) , Command count = 3232 ] 
11:27:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269600>, <py_sfcl.CommandDataDefinition object at 0x0626DA50>) , Command count = 3233 ] 
11:27:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D690>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC00>, <None>, <py_sfcl.Command23 object at 0x06269B70>) , Command count = 3234 ] 
11:27:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:54: Host Frequency set to 25000 KHz
11:27:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269030>, 0x0, True) , Command count = 3235 ] 
11:27:54: [GO18_globalSetVolt]### Host voltage value is set.
11:27:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DCF0>, 0x0, False) , Command count = 3236 ] 
11:27:55: [GO18_globalSetVolt]### Host voltage value is set.
11:27:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3237 ] 
11:27:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3238 ] 
11:27:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3239 ] 
11:27:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x0626D570>) , Command count = 3240 ] 
11:27:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A0F0>, <py_sfcl.CommandDataDefinition object at 0x0626DA80>) , Command count = 3241 ] 
11:27:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3242 ] 
11:27:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:55: Host Frequency set to 25000 KHz
11:27:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:55: ####CSD Registe 2.0 Values####
11:27:55: CSD_STRUCTURE                                 :0x1
11:27:55: Reserv1                                       :0x0
11:27:55: Time Access 1 TAAC                            :0xe
11:27:55: Time Access 2 NSAC*100                        :0x0
11:27:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:55: Card Command Classess CCC                     :0x5b5
11:27:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:55: DSR(driver stage register)  DSR_IMP           :0x0
11:27:55: Reserv2                                       :0x0
11:27:55: Device Size C_SIZE                            :0xedc8
11:27:55: Reserv3                                       :0x0
11:27:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:55: Reserv4                                       :0x0
11:27:55: Write Speed Factor R2W_FACTOR                 :0x2
11:27:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:55: FILE_FORMAT_GRP                               :0x0
11:27:55: COPY flag                                     :0x1
11:27:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:55: File_Format                                   :0x0
11:27:55: CRC                                           :0x0
11:27:55: ####CSD Registe Values####  

11:27:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:55: [GetSCRRegisterEntry] Passed
11:27:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:55: Data_Status_After Erases          : 0
11:27:55: CPRM Security Support             : No Security
11:27:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:55: Spec. Version                     : Version 3.0X
11:27:55: Extended Security Support         : Extended_Security_Not_Supported
11:27:55: Command Support                   : COMMAND_SUPPORT
11:27:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 3243 ] 
11:27:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A20>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 3244 ] 
11:27:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:55: [ SetBusWidth(0x4) , Command count = 3245 ] 
11:27:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3246 ] 
11:27:55: Protected Area Size 0x28000
11:27:55: Bus Width           2
11:27:55: Secure Mode         0
11:27:55: Speed  Class        4
11:27:55: Perf Move           0
11:27:55: Au Size             9
11:27:55: Erase Size          15
11:27:55: Erase Timeout       1
11:27:55: Erase offset        1
11:27:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:27:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:27:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3247 ] 
11:27:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:27:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:27:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:27:55: Host Frequency set to 100000 KHz
11:27:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:27:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:56: ####CSD Registe 2.0 Values####
11:27:56: CSD_STRUCTURE                                 :0x1
11:27:56: Reserv1                                       :0x0
11:27:56: Time Access 1 TAAC                            :0xe
11:27:56: Time Access 2 NSAC*100                        :0x0
11:27:56: Data Transfer Rate TRAN_SPEED                 :0xb
11:27:56: Card Command Classess CCC                     :0x5b5
11:27:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:56: DSR(driver stage register)  DSR_IMP           :0x0
11:27:56: Reserv2                                       :0x0
11:27:56: Device Size C_SIZE                            :0xedc8
11:27:56: Reserv3                                       :0x0
11:27:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:56: Reserv4                                       :0x0
11:27:56: Write Speed Factor R2W_FACTOR                 :0x2
11:27:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:56: FILE_FORMAT_GRP                               :0x0
11:27:56: COPY flag                                     :0x1
11:27:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:56: File_Format                                   :0x0
11:27:56: CRC                                           :0x0
11:27:56: ####CSD Registe Values####  

11:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 3248 ] 
11:27:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x0626DB70>) , Command count = 3249 ] 
11:27:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:27:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:27:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:27:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:27:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D0C0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D810>, <None>, <py_sfcl.Command23 object at 0x0626DD20>) , Command count = 3250 ] 
11:27:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:27:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:27:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:59: Host Frequency set to 25000 KHz
11:27:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:27:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:27:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269960>, 0x0, True) , Command count = 3251 ] 
11:27:59: [GO18_globalSetVolt]### Host voltage value is set.
11:27:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:27:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D780>, 0x0, False) , Command count = 3252 ] 
11:27:59: [GO18_globalSetVolt]### Host voltage value is set.
11:27:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3253 ] 
11:27:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:27:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3254 ] 
11:27:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:27:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:27:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:27:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:27:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3255 ] 
11:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:27:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A80>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 3256 ] 
11:27:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269990>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 3257 ] 
11:27:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:27:59: [ SetCardRCA(0x1, 0xD555) , Command count = 3258 ] 
11:27:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:27:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:27:59: Host Frequency set to 25000 KHz
11:27:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:27:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:27:59: ####CSD Registe 2.0 Values####
11:27:59: CSD_STRUCTURE                                 :0x1
11:27:59: Reserv1                                       :0x0
11:27:59: Time Access 1 TAAC                            :0xe
11:27:59: Time Access 2 NSAC*100                        :0x0
11:27:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:27:59: Card Command Classess CCC                     :0x5b5
11:27:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:27:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:27:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:27:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:27:59: DSR(driver stage register)  DSR_IMP           :0x0
11:27:59: Reserv2                                       :0x0
11:27:59: Device Size C_SIZE                            :0xedc8
11:27:59: Reserv3                                       :0x0
11:27:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:27:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:27:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:27:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:27:59: Reserv4                                       :0x0
11:27:59: Write Speed Factor R2W_FACTOR                 :0x2
11:27:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:27:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:27:59: FILE_FORMAT_GRP                               :0x0
11:27:59: COPY flag                                     :0x1
11:27:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:27:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:27:59: File_Format                                   :0x0
11:27:59: CRC                                           :0x0
11:27:59: ####CSD Registe Values####  

11:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:27:59: [GetSCRRegisterEntry] Passed
11:27:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:27:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:27:59: Data_Status_After Erases          : 0
11:27:59: CPRM Security Support             : No Security
11:27:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:27:59: Spec. Version                     : Version 3.0X
11:27:59: Extended Security Support         : Extended_Security_Not_Supported
11:27:59: Command Support                   : COMMAND_SUPPORT
11:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 3259 ] 
11:27:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A120>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 3260 ] 
11:27:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:27:59: [ SetBusWidth(0x4) , Command count = 3261 ] 
11:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:27:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3262 ] 
11:27:59: Protected Area Size 0x28000
11:27:59: Bus Width           2
11:27:59: Secure Mode         0
11:27:59: Speed  Class        4
11:27:59: Perf Move           0
11:27:59: Au Size             9
11:27:59: Erase Size          15
11:27:59: Erase Timeout       1
11:27:59: Erase offset        1
11:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:27:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3263 ] 
11:28:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:00: Host Frequency set to 100000 KHz
11:28:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:00: ####CSD Registe 2.0 Values####
11:28:00: CSD_STRUCTURE                                 :0x1
11:28:00: Reserv1                                       :0x0
11:28:00: Time Access 1 TAAC                            :0xe
11:28:00: Time Access 2 NSAC*100                        :0x0
11:28:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:00: Card Command Classess CCC                     :0x5b5
11:28:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:00: DSR(driver stage register)  DSR_IMP           :0x0
11:28:00: Reserv2                                       :0x0
11:28:00: Device Size C_SIZE                            :0xedc8
11:28:00: Reserv3                                       :0x0
11:28:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:00: Reserv4                                       :0x0
11:28:00: Write Speed Factor R2W_FACTOR                 :0x2
11:28:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:00: FILE_FORMAT_GRP                               :0x0
11:28:00: COPY flag                                     :0x1
11:28:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:00: File_Format                                   :0x0
11:28:00: CRC                                           :0x0
11:28:00: ####CSD Registe Values####  

11:28:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 3264 ] 
11:28:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x0626D0F0>) , Command count = 3265 ] 
11:28:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DF00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D030>, <py_sfcl.PySEnhancedCmdData object at 0x0626DDE0>, <None>, <py_sfcl.Command23 object at 0x0626D5A0>) , Command count = 3266 ] 
11:28:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:01: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:03: Host Frequency set to 25000 KHz
11:28:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AE10>, 0x0, True) , Command count = 3267 ] 
11:28:03: [GO18_globalSetVolt]### Host voltage value is set.
11:28:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273750>, 0x0, False) , Command count = 3268 ] 
11:28:03: [GO18_globalSetVolt]### Host voltage value is set.
11:28:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3269 ] 
11:28:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3270 ] 
11:28:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3271 ] 
11:28:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x06273210>) , Command count = 3272 ] 
11:28:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A060>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 3273 ] 
11:28:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3274 ] 
11:28:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:04: Host Frequency set to 25000 KHz
11:28:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:04: ####CSD Registe 2.0 Values####
11:28:04: CSD_STRUCTURE                                 :0x1
11:28:04: Reserv1                                       :0x0
11:28:04: Time Access 1 TAAC                            :0xe
11:28:04: Time Access 2 NSAC*100                        :0x0
11:28:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:04: Card Command Classess CCC                     :0x5b5
11:28:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:04: DSR(driver stage register)  DSR_IMP           :0x0
11:28:04: Reserv2                                       :0x0
11:28:04: Device Size C_SIZE                            :0xedc8
11:28:04: Reserv3                                       :0x0
11:28:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:04: Reserv4                                       :0x0
11:28:04: Write Speed Factor R2W_FACTOR                 :0x2
11:28:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:04: FILE_FORMAT_GRP                               :0x0
11:28:04: COPY flag                                     :0x1
11:28:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:04: File_Format                                   :0x0
11:28:04: CRC                                           :0x0
11:28:04: ####CSD Registe Values####  

11:28:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:04: [GetSCRRegisterEntry] Passed
11:28:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:04: Data_Status_After Erases          : 0
11:28:04: CPRM Security Support             : No Security
11:28:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:04: Spec. Version                     : Version 3.0X
11:28:04: Extended Security Support         : Extended_Security_Not_Supported
11:28:04: Command Support                   : COMMAND_SUPPORT
11:28:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273570>, <py_sfcl.CommandDataDefinition object at 0x062732D0>) , Command count = 3275 ] 
11:28:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x06273330>) , Command count = 3276 ] 
11:28:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:04: [ SetBusWidth(0x4) , Command count = 3277 ] 
11:28:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3278 ] 
11:28:04: Protected Area Size 0x28000
11:28:04: Bus Width           2
11:28:04: Secure Mode         0
11:28:04: Speed  Class        4
11:28:04: Perf Move           0
11:28:04: Au Size             9
11:28:04: Erase Size          15
11:28:04: Erase Timeout       1
11:28:04: Erase offset        1
11:28:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3279 ] 
11:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:04: Host Frequency set to 100000 KHz
11:28:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:04: ####CSD Registe 2.0 Values####
11:28:04: CSD_STRUCTURE                                 :0x1
11:28:04: Reserv1                                       :0x0
11:28:04: Time Access 1 TAAC                            :0xe
11:28:04: Time Access 2 NSAC*100                        :0x0
11:28:04: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:04: Card Command Classess CCC                     :0x5b5
11:28:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:04: DSR(driver stage register)  DSR_IMP           :0x0
11:28:04: Reserv2                                       :0x0
11:28:04: Device Size C_SIZE                            :0xedc8
11:28:04: Reserv3                                       :0x0
11:28:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:05: Reserv4                                       :0x0
11:28:05: Write Speed Factor R2W_FACTOR                 :0x2
11:28:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:05: FILE_FORMAT_GRP                               :0x0
11:28:05: COPY flag                                     :0x1
11:28:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:05: File_Format                                   :0x0
11:28:05: CRC                                           :0x0
11:28:05: ####CSD Registe Values####  

11:28:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062760F0>, <py_sfcl.CommandDataDefinition object at 0x062760C0>) , Command count = 3280 ] 
11:28:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AE0>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 3281 ] 
11:28:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062768D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276AE0>, <None>, <py_sfcl.Command23 object at 0x0626D9C0>) , Command count = 3282 ] 
11:28:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:08: Host Frequency set to 25000 KHz
11:28:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273450>, 0x0, True) , Command count = 3283 ] 
11:28:08: [GO18_globalSetVolt]### Host voltage value is set.
11:28:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DB70>, 0x0, False) , Command count = 3284 ] 
11:28:08: [GO18_globalSetVolt]### Host voltage value is set.
11:28:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3285 ] 
11:28:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3286 ] 
11:28:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3287 ] 
11:28:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269EA0>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 3288 ] 
11:28:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C90>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 3289 ] 
11:28:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3290 ] 
11:28:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:08: Host Frequency set to 25000 KHz
11:28:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:08: ####CSD Registe 2.0 Values####
11:28:08: CSD_STRUCTURE                                 :0x1
11:28:08: Reserv1                                       :0x0
11:28:08: Time Access 1 TAAC                            :0xe
11:28:08: Time Access 2 NSAC*100                        :0x0
11:28:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:08: Card Command Classess CCC                     :0x5b5
11:28:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:08: DSR(driver stage register)  DSR_IMP           :0x0
11:28:08: Reserv2                                       :0x0
11:28:08: Device Size C_SIZE                            :0xedc8
11:28:08: Reserv3                                       :0x0
11:28:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:08: Reserv4                                       :0x0
11:28:08: Write Speed Factor R2W_FACTOR                 :0x2
11:28:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:08: FILE_FORMAT_GRP                               :0x0
11:28:08: COPY flag                                     :0x1
11:28:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:08: File_Format                                   :0x0
11:28:08: CRC                                           :0x0
11:28:08: ####CSD Registe Values####  

11:28:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:08: [GetSCRRegisterEntry] Passed
11:28:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:08: Data_Status_After Erases          : 0
11:28:08: CPRM Security Support             : No Security
11:28:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:08: Spec. Version                     : Version 3.0X
11:28:08: Extended Security Support         : Extended_Security_Not_Supported
11:28:08: Command Support                   : COMMAND_SUPPORT
11:28:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x06269570>) , Command count = 3291 ] 
11:28:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x062730C0>) , Command count = 3292 ] 
11:28:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:08: [ SetBusWidth(0x4) , Command count = 3293 ] 
11:28:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3294 ] 
11:28:08: Protected Area Size 0x28000
11:28:08: Bus Width           2
11:28:08: Secure Mode         0
11:28:08: Speed  Class        4
11:28:08: Perf Move           0
11:28:08: Au Size             9
11:28:08: Erase Size          15
11:28:08: Erase Timeout       1
11:28:08: Erase offset        1
11:28:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3295 ] 
11:28:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:08: Host Frequency set to 100000 KHz
11:28:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:09: ####CSD Registe 2.0 Values####
11:28:09: CSD_STRUCTURE                                 :0x1
11:28:09: Reserv1                                       :0x0
11:28:09: Time Access 1 TAAC                            :0xe
11:28:09: Time Access 2 NSAC*100                        :0x0
11:28:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:09: Card Command Classess CCC                     :0x5b5
11:28:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:09: DSR(driver stage register)  DSR_IMP           :0x0
11:28:09: Reserv2                                       :0x0
11:28:09: Device Size C_SIZE                            :0xedc8
11:28:09: Reserv3                                       :0x0
11:28:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:09: Reserv4                                       :0x0
11:28:09: Write Speed Factor R2W_FACTOR                 :0x2
11:28:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:09: FILE_FORMAT_GRP                               :0x0
11:28:09: COPY flag                                     :0x1
11:28:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:09: File_Format                                   :0x0
11:28:09: CRC                                           :0x0
11:28:09: ####CSD Registe Values####  

11:28:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A6F0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 3296 ] 
11:28:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 3297 ] 
11:28:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276F30>, <None>, <py_sfcl.Command23 object at 0x062765D0>) , Command count = 3298 ] 
11:28:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:12: Host Frequency set to 25000 KHz
11:28:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273900>, 0x0, True) , Command count = 3299 ] 
11:28:12: [GO18_globalSetVolt]### Host voltage value is set.
11:28:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, False) , Command count = 3300 ] 
11:28:12: [GO18_globalSetVolt]### Host voltage value is set.
11:28:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3301 ] 
11:28:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3302 ] 
11:28:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3303 ] 
11:28:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC30>, <py_sfcl.CommandDataDefinition object at 0x06276C00>) , Command count = 3304 ] 
11:28:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273810>, <py_sfcl.CommandDataDefinition object at 0x0627A180>) , Command count = 3305 ] 
11:28:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3306 ] 
11:28:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:12: Host Frequency set to 25000 KHz
11:28:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:12: ####CSD Registe 2.0 Values####
11:28:12: CSD_STRUCTURE                                 :0x1
11:28:12: Reserv1                                       :0x0
11:28:12: Time Access 1 TAAC                            :0xe
11:28:12: Time Access 2 NSAC*100                        :0x0
11:28:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:12: Card Command Classess CCC                     :0x5b5
11:28:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:12: DSR(driver stage register)  DSR_IMP           :0x0
11:28:12: Reserv2                                       :0x0
11:28:12: Device Size C_SIZE                            :0xedc8
11:28:12: Reserv3                                       :0x0
11:28:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:12: Reserv4                                       :0x0
11:28:12: Write Speed Factor R2W_FACTOR                 :0x2
11:28:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:12: FILE_FORMAT_GRP                               :0x0
11:28:12: COPY flag                                     :0x1
11:28:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:12: File_Format                                   :0x0
11:28:12: CRC                                           :0x0
11:28:12: ####CSD Registe Values####  

11:28:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:12: [GetSCRRegisterEntry] Passed
11:28:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:12: Data_Status_After Erases          : 0
11:28:12: CPRM Security Support             : No Security
11:28:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:12: Spec. Version                     : Version 3.0X
11:28:12: Extended Security Support         : Extended_Security_Not_Supported
11:28:12: Command Support                   : COMMAND_SUPPORT
11:28:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D270>, <py_sfcl.CommandDataDefinition object at 0x0627DA80>) , Command count = 3307 ] 
11:28:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A360>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 3308 ] 
11:28:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:12: [ SetBusWidth(0x4) , Command count = 3309 ] 
11:28:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3310 ] 
11:28:12: Protected Area Size 0x28000
11:28:12: Bus Width           2
11:28:13: Secure Mode         0
11:28:13: Speed  Class        4
11:28:13: Perf Move           0
11:28:13: Au Size             9
11:28:13: Erase Size          15
11:28:13: Erase Timeout       1
11:28:13: Erase offset        1
11:28:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3311 ] 
11:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:13: Host Frequency set to 100000 KHz
11:28:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:13: ####CSD Registe 2.0 Values####
11:28:13: CSD_STRUCTURE                                 :0x1
11:28:13: Reserv1                                       :0x0
11:28:13: Time Access 1 TAAC                            :0xe
11:28:13: Time Access 2 NSAC*100                        :0x0
11:28:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:13: Card Command Classess CCC                     :0x5b5
11:28:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:13: DSR(driver stage register)  DSR_IMP           :0x0
11:28:13: Reserv2                                       :0x0
11:28:13: Device Size C_SIZE                            :0xedc8
11:28:13: Reserv3                                       :0x0
11:28:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:13: Reserv4                                       :0x0
11:28:13: Write Speed Factor R2W_FACTOR                 :0x2
11:28:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:13: FILE_FORMAT_GRP                               :0x0
11:28:13: COPY flag                                     :0x1
11:28:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:13: File_Format                                   :0x0
11:28:13: CRC                                           :0x0
11:28:13: ####CSD Registe Values####  

11:28:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE40>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 3312 ] 
11:28:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x06276F00>) , Command count = 3313 ] 
11:28:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276D80>, <py_sfcl.PySEnhancedCmdData object at 0x06276900>, <None>, <py_sfcl.Command23 object at 0x06276810>) , Command count = 3314 ] 
11:28:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:14: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:16: Host Frequency set to 25000 KHz
11:28:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:16: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269870>, 0x0, True) , Command count = 3315 ] 
11:28:16: [GO18_globalSetVolt]### Host voltage value is set.
11:28:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276600>, 0x0, False) , Command count = 3316 ] 
11:28:16: [GO18_globalSetVolt]### Host voltage value is set.
11:28:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3317 ] 
11:28:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3318 ] 
11:28:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3319 ] 
11:28:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268870>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 3320 ] 
11:28:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A5D0>, <py_sfcl.CommandDataDefinition object at 0x0627A480>) , Command count = 3321 ] 
11:28:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3322 ] 
11:28:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:17: Host Frequency set to 25000 KHz
11:28:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:17: ####CSD Registe 2.0 Values####
11:28:17: CSD_STRUCTURE                                 :0x1
11:28:17: Reserv1                                       :0x0
11:28:17: Time Access 1 TAAC                            :0xe
11:28:17: Time Access 2 NSAC*100                        :0x0
11:28:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:17: Card Command Classess CCC                     :0x5b5
11:28:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:17: DSR(driver stage register)  DSR_IMP           :0x0
11:28:17: Reserv2                                       :0x0
11:28:17: Device Size C_SIZE                            :0xedc8
11:28:17: Reserv3                                       :0x0
11:28:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:17: Reserv4                                       :0x0
11:28:17: Write Speed Factor R2W_FACTOR                 :0x2
11:28:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:17: FILE_FORMAT_GRP                               :0x0
11:28:17: COPY flag                                     :0x1
11:28:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:17: File_Format                                   :0x0
11:28:17: CRC                                           :0x0
11:28:17: ####CSD Registe Values####  

11:28:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:17: [GetSCRRegisterEntry] Passed
11:28:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:17: Data_Status_After Erases          : 0
11:28:17: CPRM Security Support             : No Security
11:28:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:17: Spec. Version                     : Version 3.0X
11:28:17: Extended Security Support         : Extended_Security_Not_Supported
11:28:17: Command Support                   : COMMAND_SUPPORT
11:28:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269360>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 3323 ] 
11:28:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B40>, <py_sfcl.CommandDataDefinition object at 0x0627A240>) , Command count = 3324 ] 
11:28:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:17: [ SetBusWidth(0x4) , Command count = 3325 ] 
11:28:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062767B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3326 ] 
11:28:17: Protected Area Size 0x28000
11:28:17: Bus Width           2
11:28:17: Secure Mode         0
11:28:17: Speed  Class        4
11:28:17: Perf Move           0
11:28:17: Au Size             9
11:28:17: Erase Size          15
11:28:17: Erase Timeout       1
11:28:17: Erase offset        1
11:28:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3327 ] 
11:28:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:17: Host Frequency set to 100000 KHz
11:28:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:17: ####CSD Registe 2.0 Values####
11:28:17: CSD_STRUCTURE                                 :0x1
11:28:17: Reserv1                                       :0x0
11:28:17: Time Access 1 TAAC                            :0xe
11:28:17: Time Access 2 NSAC*100                        :0x0
11:28:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:17: Card Command Classess CCC                     :0x5b5
11:28:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:17: DSR(driver stage register)  DSR_IMP           :0x0
11:28:17: Reserv2                                       :0x0
11:28:17: Device Size C_SIZE                            :0xedc8
11:28:17: Reserv3                                       :0x0
11:28:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:18: Reserv4                                       :0x0
11:28:18: Write Speed Factor R2W_FACTOR                 :0x2
11:28:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:18: FILE_FORMAT_GRP                               :0x0
11:28:18: COPY flag                                     :0x1
11:28:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:18: File_Format                                   :0x0
11:28:18: CRC                                           :0x0
11:28:18: ####CSD Registe Values####  

11:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 3328 ] 
11:28:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x062166C0>) , Command count = 3329 ] 
11:28:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053977E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A090>, <py_sfcl.PySEnhancedCmdData object at 0x06273B10>, <None>, <py_sfcl.Command23 object at 0x06276720>) , Command count = 3330 ] 
11:28:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:19: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:21: Host Frequency set to 25000 KHz
11:28:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E40>, 0x0, True) , Command count = 3331 ] 
11:28:21: [GO18_globalSetVolt]### Host voltage value is set.
11:28:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269FC0>, 0x0, False) , Command count = 3332 ] 
11:28:21: [GO18_globalSetVolt]### Host voltage value is set.
11:28:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3333 ] 
11:28:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3334 ] 
11:28:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3335 ] 
11:28:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x06276870>) , Command count = 3336 ] 
11:28:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 3337 ] 
11:28:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3338 ] 
11:28:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:21: Host Frequency set to 25000 KHz
11:28:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:21: ####CSD Registe 2.0 Values####
11:28:21: CSD_STRUCTURE                                 :0x1
11:28:21: Reserv1                                       :0x0
11:28:21: Time Access 1 TAAC                            :0xe
11:28:21: Time Access 2 NSAC*100                        :0x0
11:28:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:21: Card Command Classess CCC                     :0x5b5
11:28:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:21: DSR(driver stage register)  DSR_IMP           :0x0
11:28:21: Reserv2                                       :0x0
11:28:21: Device Size C_SIZE                            :0xedc8
11:28:21: Reserv3                                       :0x0
11:28:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:21: Reserv4                                       :0x0
11:28:21: Write Speed Factor R2W_FACTOR                 :0x2
11:28:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:21: FILE_FORMAT_GRP                               :0x0
11:28:21: COPY flag                                     :0x1
11:28:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:21: File_Format                                   :0x0
11:28:21: CRC                                           :0x0
11:28:21: ####CSD Registe Values####  

11:28:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:21: [GetSCRRegisterEntry] Passed
11:28:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:21: Data_Status_After Erases          : 0
11:28:21: CPRM Security Support             : No Security
11:28:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:21: Spec. Version                     : Version 3.0X
11:28:21: Extended Security Support         : Extended_Security_Not_Supported
11:28:21: Command Support                   : COMMAND_SUPPORT
11:28:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x0627DB40>) , Command count = 3339 ] 
11:28:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268720>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 3340 ] 
11:28:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:21: [ SetBusWidth(0x4) , Command count = 3341 ] 
11:28:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3342 ] 
11:28:21: Protected Area Size 0x28000
11:28:21: Bus Width           2
11:28:21: Secure Mode         0
11:28:21: Speed  Class        4
11:28:21: Perf Move           0
11:28:21: Au Size             9
11:28:21: Erase Size          15
11:28:21: Erase Timeout       1
11:28:21: Erase offset        1
11:28:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3343 ] 
11:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:21: Host Frequency set to 100000 KHz
11:28:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:22: ####CSD Registe 2.0 Values####
11:28:22: CSD_STRUCTURE                                 :0x1
11:28:22: Reserv1                                       :0x0
11:28:22: Time Access 1 TAAC                            :0xe
11:28:22: Time Access 2 NSAC*100                        :0x0
11:28:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:22: Card Command Classess CCC                     :0x5b5
11:28:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:22: DSR(driver stage register)  DSR_IMP           :0x0
11:28:22: Reserv2                                       :0x0
11:28:22: Device Size C_SIZE                            :0xedc8
11:28:22: Reserv3                                       :0x0
11:28:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:22: Reserv4                                       :0x0
11:28:22: Write Speed Factor R2W_FACTOR                 :0x2
11:28:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:22: FILE_FORMAT_GRP                               :0x0
11:28:22: COPY flag                                     :0x1
11:28:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:22: File_Format                                   :0x0
11:28:22: CRC                                           :0x0
11:28:22: ####CSD Registe Values####  

11:28:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 3344 ] 
11:28:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x052CAE70>) , Command count = 3345 ] 
11:28:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273600>, <py_sfcl.PySEnhancedCmdData object at 0x06273B40>, <None>, <py_sfcl.Command23 object at 0x06273720>) , Command count = 3346 ] 
11:28:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:25: Host Frequency set to 25000 KHz
11:28:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x053DEE40>, 0x0, True) , Command count = 3347 ] 
11:28:25: [GO18_globalSetVolt]### Host voltage value is set.
11:28:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269F30>, 0x0, False) , Command count = 3348 ] 
11:28:25: [GO18_globalSetVolt]### Host voltage value is set.
11:28:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3349 ] 
11:28:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3350 ] 
11:28:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3351 ] 
11:28:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 3352 ] 
11:28:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x062169F0>) , Command count = 3353 ] 
11:28:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3354 ] 
11:28:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:25: Host Frequency set to 25000 KHz
11:28:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:25: ####CSD Registe 2.0 Values####
11:28:25: CSD_STRUCTURE                                 :0x1
11:28:25: Reserv1                                       :0x0
11:28:25: Time Access 1 TAAC                            :0xe
11:28:25: Time Access 2 NSAC*100                        :0x0
11:28:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:25: Card Command Classess CCC                     :0x5b5
11:28:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:25: DSR(driver stage register)  DSR_IMP           :0x0
11:28:25: Reserv2                                       :0x0
11:28:25: Device Size C_SIZE                            :0xedc8
11:28:25: Reserv3                                       :0x0
11:28:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:25: Reserv4                                       :0x0
11:28:25: Write Speed Factor R2W_FACTOR                 :0x2
11:28:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:25: FILE_FORMAT_GRP                               :0x0
11:28:25: COPY flag                                     :0x1
11:28:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:25: File_Format                                   :0x0
11:28:25: CRC                                           :0x0
11:28:25: ####CSD Registe Values####  

11:28:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:25: [GetSCRRegisterEntry] Passed
11:28:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:25: Data_Status_After Erases          : 0
11:28:25: CPRM Security Support             : No Security
11:28:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:25: Spec. Version                     : Version 3.0X
11:28:25: Extended Security Support         : Extended_Security_Not_Supported
11:28:25: Command Support                   : COMMAND_SUPPORT
11:28:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 3355 ] 
11:28:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D870>, <py_sfcl.CommandDataDefinition object at 0x06216B40>) , Command count = 3356 ] 
11:28:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:25: [ SetBusWidth(0x4) , Command count = 3357 ] 
11:28:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3358 ] 
11:28:25: Protected Area Size 0x28000
11:28:25: Bus Width           2
11:28:26: Secure Mode         0
11:28:26: Speed  Class        4
11:28:26: Perf Move           0
11:28:26: Au Size             9
11:28:26: Erase Size          15
11:28:26: Erase Timeout       1
11:28:26: Erase offset        1
11:28:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3359 ] 
11:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:26: Host Frequency set to 100000 KHz
11:28:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:26: ####CSD Registe 2.0 Values####
11:28:26: CSD_STRUCTURE                                 :0x1
11:28:26: Reserv1                                       :0x0
11:28:26: Time Access 1 TAAC                            :0xe
11:28:26: Time Access 2 NSAC*100                        :0x0
11:28:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:26: Card Command Classess CCC                     :0x5b5
11:28:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:26: DSR(driver stage register)  DSR_IMP           :0x0
11:28:26: Reserv2                                       :0x0
11:28:26: Device Size C_SIZE                            :0xedc8
11:28:26: Reserv3                                       :0x0
11:28:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:26: Reserv4                                       :0x0
11:28:26: Write Speed Factor R2W_FACTOR                 :0x2
11:28:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:26: FILE_FORMAT_GRP                               :0x0
11:28:26: COPY flag                                     :0x1
11:28:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:26: File_Format                                   :0x0
11:28:26: CRC                                           :0x0
11:28:26: ####CSD Registe Values####  

11:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627DCF0>) , Command count = 3360 ] 
11:28:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C30>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 3361 ] 
11:28:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AD50>, <None>, <py_sfcl.Command23 object at 0x06273120>) , Command count = 3362 ] 
11:28:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:29: Host Frequency set to 25000 KHz
11:28:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x054019C0>, 0x0, True) , Command count = 3363 ] 
11:28:29: [GO18_globalSetVolt]### Host voltage value is set.
11:28:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DC30>, 0x0, False) , Command count = 3364 ] 
11:28:29: [GO18_globalSetVolt]### Host voltage value is set.
11:28:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3365 ] 
11:28:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3366 ] 
11:28:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3367 ] 
11:28:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x0627A030>) , Command count = 3368 ] 
11:28:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAE0>, <py_sfcl.CommandDataDefinition object at 0x0627AF90>) , Command count = 3369 ] 
11:28:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3370 ] 
11:28:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:30: Host Frequency set to 25000 KHz
11:28:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:30: ####CSD Registe 2.0 Values####
11:28:30: CSD_STRUCTURE                                 :0x1
11:28:30: Reserv1                                       :0x0
11:28:30: Time Access 1 TAAC                            :0xe
11:28:30: Time Access 2 NSAC*100                        :0x0
11:28:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:30: Card Command Classess CCC                     :0x5b5
11:28:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:30: DSR(driver stage register)  DSR_IMP           :0x0
11:28:30: Reserv2                                       :0x0
11:28:30: Device Size C_SIZE                            :0xedc8
11:28:30: Reserv3                                       :0x0
11:28:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:30: Reserv4                                       :0x0
11:28:30: Write Speed Factor R2W_FACTOR                 :0x2
11:28:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:30: FILE_FORMAT_GRP                               :0x0
11:28:30: COPY flag                                     :0x1
11:28:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:30: File_Format                                   :0x0
11:28:30: CRC                                           :0x0
11:28:30: ####CSD Registe Values####  

11:28:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:30: [GetSCRRegisterEntry] Passed
11:28:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:30: Data_Status_After Erases          : 0
11:28:30: CPRM Security Support             : No Security
11:28:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:30: Spec. Version                     : Version 3.0X
11:28:30: Extended Security Support         : Extended_Security_Not_Supported
11:28:30: Command Support                   : COMMAND_SUPPORT
11:28:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DBA0>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 3371 ] 
11:28:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x05401F00>) , Command count = 3372 ] 
11:28:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:30: [ SetBusWidth(0x4) , Command count = 3373 ] 
11:28:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3374 ] 
11:28:30: Protected Area Size 0x28000
11:28:30: Bus Width           2
11:28:30: Secure Mode         0
11:28:30: Speed  Class        4
11:28:30: Perf Move           0
11:28:30: Au Size             9
11:28:30: Erase Size          15
11:28:30: Erase Timeout       1
11:28:30: Erase offset        1
11:28:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3375 ] 
11:28:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:30: Host Frequency set to 100000 KHz
11:28:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:30: ####CSD Registe 2.0 Values####
11:28:30: CSD_STRUCTURE                                 :0x1
11:28:30: Reserv1                                       :0x0
11:28:30: Time Access 1 TAAC                            :0xe
11:28:30: Time Access 2 NSAC*100                        :0x0
11:28:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:30: Card Command Classess CCC                     :0x5b5
11:28:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:30: DSR(driver stage register)  DSR_IMP           :0x0
11:28:30: Reserv2                                       :0x0
11:28:30: Device Size C_SIZE                            :0xedc8
11:28:30: Reserv3                                       :0x0
11:28:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:31: Reserv4                                       :0x0
11:28:31: Write Speed Factor R2W_FACTOR                 :0x2
11:28:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:31: FILE_FORMAT_GRP                               :0x0
11:28:31: COPY flag                                     :0x1
11:28:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:31: File_Format                                   :0x0
11:28:31: CRC                                           :0x0
11:28:31: ####CSD Registe Values####  

11:28:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A20>, <py_sfcl.CommandDataDefinition object at 0x06276150>) , Command count = 3376 ] 
11:28:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF7B0>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 3377 ] 
11:28:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A7B0>, <None>, <py_sfcl.Command23 object at 0x06273090>) , Command count = 3378 ] 
11:28:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:34: Host Frequency set to 25000 KHz
11:28:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF060>, 0x0, True) , Command count = 3379 ] 
11:28:34: [GO18_globalSetVolt]### Host voltage value is set.
11:28:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x062165D0>, 0x0, False) , Command count = 3380 ] 
11:28:34: [GO18_globalSetVolt]### Host voltage value is set.
11:28:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3381 ] 
11:28:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3382 ] 
11:28:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3383 ] 
11:28:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 3384 ] 
11:28:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A1B0>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 3385 ] 
11:28:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3386 ] 
11:28:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:34: Host Frequency set to 25000 KHz
11:28:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:34: ####CSD Registe 2.0 Values####
11:28:34: CSD_STRUCTURE                                 :0x1
11:28:34: Reserv1                                       :0x0
11:28:34: Time Access 1 TAAC                            :0xe
11:28:34: Time Access 2 NSAC*100                        :0x0
11:28:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:34: Card Command Classess CCC                     :0x5b5
11:28:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:34: DSR(driver stage register)  DSR_IMP           :0x0
11:28:34: Reserv2                                       :0x0
11:28:34: Device Size C_SIZE                            :0xedc8
11:28:34: Reserv3                                       :0x0
11:28:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:34: Reserv4                                       :0x0
11:28:34: Write Speed Factor R2W_FACTOR                 :0x2
11:28:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:34: FILE_FORMAT_GRP                               :0x0
11:28:34: COPY flag                                     :0x1
11:28:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:34: File_Format                                   :0x0
11:28:34: CRC                                           :0x0
11:28:34: ####CSD Registe Values####  

11:28:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:34: [GetSCRRegisterEntry] Passed
11:28:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:34: Data_Status_After Erases          : 0
11:28:34: CPRM Security Support             : No Security
11:28:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:34: Spec. Version                     : Version 3.0X
11:28:34: Extended Security Support         : Extended_Security_Not_Supported
11:28:34: Command Support                   : COMMAND_SUPPORT
11:28:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D540>, <py_sfcl.CommandDataDefinition object at 0x0627AE70>) , Command count = 3387 ] 
11:28:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 3388 ] 
11:28:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:34: [ SetBusWidth(0x4) , Command count = 3389 ] 
11:28:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3390 ] 
11:28:34: Protected Area Size 0x28000
11:28:34: Bus Width           2
11:28:34: Secure Mode         0
11:28:34: Speed  Class        4
11:28:34: Perf Move           0
11:28:34: Au Size             9
11:28:34: Erase Size          15
11:28:34: Erase Timeout       1
11:28:34: Erase offset        1
11:28:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3391 ] 
11:28:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:34: Host Frequency set to 100000 KHz
11:28:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:35: ####CSD Registe 2.0 Values####
11:28:35: CSD_STRUCTURE                                 :0x1
11:28:35: Reserv1                                       :0x0
11:28:35: Time Access 1 TAAC                            :0xe
11:28:35: Time Access 2 NSAC*100                        :0x0
11:28:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:35: Card Command Classess CCC                     :0x5b5
11:28:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:35: DSR(driver stage register)  DSR_IMP           :0x0
11:28:35: Reserv2                                       :0x0
11:28:35: Device Size C_SIZE                            :0xedc8
11:28:35: Reserv3                                       :0x0
11:28:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:35: Reserv4                                       :0x0
11:28:35: Write Speed Factor R2W_FACTOR                 :0x2
11:28:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:35: FILE_FORMAT_GRP                               :0x0
11:28:35: COPY flag                                     :0x1
11:28:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:35: File_Format                                   :0x0
11:28:35: CRC                                           :0x0
11:28:35: ####CSD Registe Values####  

11:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 3392 ] 
11:28:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A630>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 3393 ] 
11:28:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A990>, <py_sfcl.PySEnhancedCmdData object at 0x0627A660>, <None>, <py_sfcl.Command23 object at 0x0627AF30>) , Command count = 3394 ] 
11:28:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:38: Host Frequency set to 25000 KHz
11:28:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627ABD0>, 0x0, True) , Command count = 3395 ] 
11:28:38: [GO18_globalSetVolt]### Host voltage value is set.
11:28:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AD20>, 0x0, False) , Command count = 3396 ] 
11:28:38: [GO18_globalSetVolt]### Host voltage value is set.
11:28:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3397 ] 
11:28:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3398 ] 
11:28:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3399 ] 
11:28:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738D0>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 3400 ] 
11:28:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 3401 ] 
11:28:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3402 ] 
11:28:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:38: Host Frequency set to 25000 KHz
11:28:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:38: ####CSD Registe 2.0 Values####
11:28:38: CSD_STRUCTURE                                 :0x1
11:28:38: Reserv1                                       :0x0
11:28:38: Time Access 1 TAAC                            :0xe
11:28:38: Time Access 2 NSAC*100                        :0x0
11:28:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:38: Card Command Classess CCC                     :0x5b5
11:28:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:38: DSR(driver stage register)  DSR_IMP           :0x0
11:28:38: Reserv2                                       :0x0
11:28:38: Device Size C_SIZE                            :0xedc8
11:28:38: Reserv3                                       :0x0
11:28:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:38: Reserv4                                       :0x0
11:28:38: Write Speed Factor R2W_FACTOR                 :0x2
11:28:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:38: FILE_FORMAT_GRP                               :0x0
11:28:38: COPY flag                                     :0x1
11:28:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:38: File_Format                                   :0x0
11:28:38: CRC                                           :0x0
11:28:38: ####CSD Registe Values####  

11:28:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:38: [GetSCRRegisterEntry] Passed
11:28:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:38: Data_Status_After Erases          : 0
11:28:38: CPRM Security Support             : No Security
11:28:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:38: Spec. Version                     : Version 3.0X
11:28:38: Extended Security Support         : Extended_Security_Not_Supported
11:28:38: Command Support                   : COMMAND_SUPPORT
11:28:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x061AF660>) , Command count = 3403 ] 
11:28:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062686F0>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 3404 ] 
11:28:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:38: [ SetBusWidth(0x4) , Command count = 3405 ] 
11:28:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3406 ] 
11:28:38: Protected Area Size 0x28000
11:28:38: Bus Width           2
11:28:39: Secure Mode         0
11:28:39: Speed  Class        4
11:28:39: Perf Move           0
11:28:39: Au Size             9
11:28:39: Erase Size          15
11:28:39: Erase Timeout       1
11:28:39: Erase offset        1
11:28:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3407 ] 
11:28:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:39: Host Frequency set to 100000 KHz
11:28:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:39: ####CSD Registe 2.0 Values####
11:28:39: CSD_STRUCTURE                                 :0x1
11:28:39: Reserv1                                       :0x0
11:28:39: Time Access 1 TAAC                            :0xe
11:28:39: Time Access 2 NSAC*100                        :0x0
11:28:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:39: Card Command Classess CCC                     :0x5b5
11:28:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:39: DSR(driver stage register)  DSR_IMP           :0x0
11:28:39: Reserv2                                       :0x0
11:28:39: Device Size C_SIZE                            :0xedc8
11:28:39: Reserv3                                       :0x0
11:28:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:39: Reserv4                                       :0x0
11:28:39: Write Speed Factor R2W_FACTOR                 :0x2
11:28:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:39: FILE_FORMAT_GRP                               :0x0
11:28:39: COPY flag                                     :0x1
11:28:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:39: File_Format                                   :0x0
11:28:39: CRC                                           :0x0
11:28:39: ####CSD Registe Values####  

11:28:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D210>, <py_sfcl.CommandDataDefinition object at 0x06268090>) , Command count = 3408 ] 
11:28:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x0627D300>) , Command count = 3409 ] 
11:28:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A300>, <py_sfcl.PySEnhancedCmdData object at 0x0627AAE0>, <None>, <py_sfcl.Command23 object at 0x062731B0>) , Command count = 3410 ] 
11:28:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:42: Host Frequency set to 25000 KHz
11:28:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268C30>, 0x0, True) , Command count = 3411 ] 
11:28:42: [GO18_globalSetVolt]### Host voltage value is set.
11:28:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DF60>, 0x0, False) , Command count = 3412 ] 
11:28:42: [GO18_globalSetVolt]### Host voltage value is set.
11:28:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3413 ] 
11:28:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3414 ] 
11:28:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3415 ] 
11:28:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x0627D390>) , Command count = 3416 ] 
11:28:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CC0>, <py_sfcl.CommandDataDefinition object at 0x06269AB0>) , Command count = 3417 ] 
11:28:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3418 ] 
11:28:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:43: Host Frequency set to 25000 KHz
11:28:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:43: ####CSD Registe 2.0 Values####
11:28:43: CSD_STRUCTURE                                 :0x1
11:28:43: Reserv1                                       :0x0
11:28:43: Time Access 1 TAAC                            :0xe
11:28:43: Time Access 2 NSAC*100                        :0x0
11:28:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:43: Card Command Classess CCC                     :0x5b5
11:28:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:43: DSR(driver stage register)  DSR_IMP           :0x0
11:28:43: Reserv2                                       :0x0
11:28:43: Device Size C_SIZE                            :0xedc8
11:28:43: Reserv3                                       :0x0
11:28:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:43: Reserv4                                       :0x0
11:28:43: Write Speed Factor R2W_FACTOR                 :0x2
11:28:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:43: FILE_FORMAT_GRP                               :0x0
11:28:43: COPY flag                                     :0x1
11:28:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:43: File_Format                                   :0x0
11:28:43: CRC                                           :0x0
11:28:43: ####CSD Registe Values####  

11:28:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:43: [GetSCRRegisterEntry] Passed
11:28:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:43: Data_Status_After Erases          : 0
11:28:43: CPRM Security Support             : No Security
11:28:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:43: Spec. Version                     : Version 3.0X
11:28:43: Extended Security Support         : Extended_Security_Not_Supported
11:28:43: Command Support                   : COMMAND_SUPPORT
11:28:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF00>, <py_sfcl.CommandDataDefinition object at 0x0627D330>) , Command count = 3419 ] 
11:28:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269240>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 3420 ] 
11:28:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:43: [ SetBusWidth(0x4) , Command count = 3421 ] 
11:28:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3422 ] 
11:28:43: Protected Area Size 0x28000
11:28:43: Bus Width           2
11:28:43: Secure Mode         0
11:28:43: Speed  Class        4
11:28:43: Perf Move           0
11:28:43: Au Size             9
11:28:43: Erase Size          15
11:28:43: Erase Timeout       1
11:28:43: Erase offset        1
11:28:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3423 ] 
11:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:43: Host Frequency set to 100000 KHz
11:28:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:43: ####CSD Registe 2.0 Values####
11:28:43: CSD_STRUCTURE                                 :0x1
11:28:43: Reserv1                                       :0x0
11:28:43: Time Access 1 TAAC                            :0xe
11:28:43: Time Access 2 NSAC*100                        :0x0
11:28:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:43: Card Command Classess CCC                     :0x5b5
11:28:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:43: DSR(driver stage register)  DSR_IMP           :0x0
11:28:43: Reserv2                                       :0x0
11:28:43: Device Size C_SIZE                            :0xedc8
11:28:43: Reserv3                                       :0x0
11:28:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:44: Reserv4                                       :0x0
11:28:44: Write Speed Factor R2W_FACTOR                 :0x2
11:28:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:44: FILE_FORMAT_GRP                               :0x0
11:28:44: COPY flag                                     :0x1
11:28:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:44: File_Format                                   :0x0
11:28:44: CRC                                           :0x0
11:28:44: ####CSD Registe Values####  

11:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D660>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 3424 ] 
11:28:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062688D0>, <py_sfcl.CommandDataDefinition object at 0x06268750>) , Command count = 3425 ] 
11:28:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062764B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216E70>, <py_sfcl.PySEnhancedCmdData object at 0x062169C0>, <None>, <py_sfcl.Command23 object at 0x06216810>) , Command count = 3426 ] 
11:28:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:47: Host Frequency set to 25000 KHz
11:28:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D240>, 0x0, True) , Command count = 3427 ] 
11:28:47: [GO18_globalSetVolt]### Host voltage value is set.
11:28:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269120>, 0x0, False) , Command count = 3428 ] 
11:28:47: [GO18_globalSetVolt]### Host voltage value is set.
11:28:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3429 ] 
11:28:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3430 ] 
11:28:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3431 ] 
11:28:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x06269210>) , Command count = 3432 ] 
11:28:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276660>, <py_sfcl.CommandDataDefinition object at 0x0627D2A0>) , Command count = 3433 ] 
11:28:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3434 ] 
11:28:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:47: Host Frequency set to 25000 KHz
11:28:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:47: ####CSD Registe 2.0 Values####
11:28:47: CSD_STRUCTURE                                 :0x1
11:28:47: Reserv1                                       :0x0
11:28:47: Time Access 1 TAAC                            :0xe
11:28:47: Time Access 2 NSAC*100                        :0x0
11:28:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:47: Card Command Classess CCC                     :0x5b5
11:28:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:47: DSR(driver stage register)  DSR_IMP           :0x0
11:28:47: Reserv2                                       :0x0
11:28:47: Device Size C_SIZE                            :0xedc8
11:28:47: Reserv3                                       :0x0
11:28:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:47: Reserv4                                       :0x0
11:28:47: Write Speed Factor R2W_FACTOR                 :0x2
11:28:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:47: FILE_FORMAT_GRP                               :0x0
11:28:47: COPY flag                                     :0x1
11:28:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:47: File_Format                                   :0x0
11:28:47: CRC                                           :0x0
11:28:47: ####CSD Registe Values####  

11:28:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:47: [GetSCRRegisterEntry] Passed
11:28:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:47: Data_Status_After Erases          : 0
11:28:47: CPRM Security Support             : No Security
11:28:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:47: Spec. Version                     : Version 3.0X
11:28:47: Extended Security Support         : Extended_Security_Not_Supported
11:28:47: Command Support                   : COMMAND_SUPPORT
11:28:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627D870>) , Command count = 3435 ] 
11:28:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 3436 ] 
11:28:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:47: [ SetBusWidth(0x4) , Command count = 3437 ] 
11:28:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3438 ] 
11:28:47: Protected Area Size 0x28000
11:28:47: Bus Width           2
11:28:47: Secure Mode         0
11:28:47: Speed  Class        4
11:28:47: Perf Move           0
11:28:47: Au Size             9
11:28:47: Erase Size          15
11:28:47: Erase Timeout       1
11:28:47: Erase offset        1
11:28:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3439 ] 
11:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:47: Host Frequency set to 100000 KHz
11:28:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:48: ####CSD Registe 2.0 Values####
11:28:48: CSD_STRUCTURE                                 :0x1
11:28:48: Reserv1                                       :0x0
11:28:48: Time Access 1 TAAC                            :0xe
11:28:48: Time Access 2 NSAC*100                        :0x0
11:28:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:48: Card Command Classess CCC                     :0x5b5
11:28:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:48: DSR(driver stage register)  DSR_IMP           :0x0
11:28:48: Reserv2                                       :0x0
11:28:48: Device Size C_SIZE                            :0xedc8
11:28:48: Reserv3                                       :0x0
11:28:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:48: Reserv4                                       :0x0
11:28:48: Write Speed Factor R2W_FACTOR                 :0x2
11:28:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:48: FILE_FORMAT_GRP                               :0x0
11:28:48: COPY flag                                     :0x1
11:28:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:48: File_Format                                   :0x0
11:28:48: CRC                                           :0x0
11:28:48: ####CSD Registe Values####  

11:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062733C0>, <py_sfcl.CommandDataDefinition object at 0x0627D7E0>) , Command count = 3440 ] 
11:28:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E10>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 3441 ] 
11:28:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062697E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268B10>, <py_sfcl.PySEnhancedCmdData object at 0x06216A80>, <None>, <py_sfcl.Command23 object at 0x06216AB0>) , Command count = 3442 ] 
11:28:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:51: Host Frequency set to 25000 KHz
11:28:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D840>, 0x0, True) , Command count = 3443 ] 
11:28:51: [GO18_globalSetVolt]### Host voltage value is set.
11:28:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269060>, 0x0, False) , Command count = 3444 ] 
11:28:51: [GO18_globalSetVolt]### Host voltage value is set.
11:28:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3445 ] 
11:28:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3446 ] 
11:28:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3447 ] 
11:28:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x06268510>) , Command count = 3448 ] 
11:28:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273780>, <py_sfcl.CommandDataDefinition object at 0x062689F0>) , Command count = 3449 ] 
11:28:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:51: [ SetCardRCA(0x1, 0xD555) , Command count = 3450 ] 
11:28:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:51: Host Frequency set to 25000 KHz
11:28:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:51: ####CSD Registe 2.0 Values####
11:28:51: CSD_STRUCTURE                                 :0x1
11:28:51: Reserv1                                       :0x0
11:28:51: Time Access 1 TAAC                            :0xe
11:28:51: Time Access 2 NSAC*100                        :0x0
11:28:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:51: Card Command Classess CCC                     :0x5b5
11:28:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:51: DSR(driver stage register)  DSR_IMP           :0x0
11:28:51: Reserv2                                       :0x0
11:28:51: Device Size C_SIZE                            :0xedc8
11:28:51: Reserv3                                       :0x0
11:28:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:51: Reserv4                                       :0x0
11:28:51: Write Speed Factor R2W_FACTOR                 :0x2
11:28:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:51: FILE_FORMAT_GRP                               :0x0
11:28:51: COPY flag                                     :0x1
11:28:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:51: File_Format                                   :0x0
11:28:51: CRC                                           :0x0
11:28:51: ####CSD Registe Values####  

11:28:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:51: [GetSCRRegisterEntry] Passed
11:28:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:51: Data_Status_After Erases          : 0
11:28:51: CPRM Security Support             : No Security
11:28:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:51: Spec. Version                     : Version 3.0X
11:28:51: Extended Security Support         : Extended_Security_Not_Supported
11:28:51: Command Support                   : COMMAND_SUPPORT
11:28:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D4E0>, <py_sfcl.CommandDataDefinition object at 0x06268F90>) , Command count = 3451 ] 
11:28:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D780>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 3452 ] 
11:28:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:51: [ SetBusWidth(0x4) , Command count = 3453 ] 
11:28:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3454 ] 
11:28:51: Protected Area Size 0x28000
11:28:51: Bus Width           2
11:28:51: Secure Mode         0
11:28:51: Speed  Class        4
11:28:51: Perf Move           0
11:28:51: Au Size             9
11:28:51: Erase Size          15
11:28:51: Erase Timeout       1
11:28:51: Erase offset        1
11:28:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3455 ] 
11:28:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:52: Host Frequency set to 100000 KHz
11:28:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:52: ####CSD Registe 2.0 Values####
11:28:52: CSD_STRUCTURE                                 :0x1
11:28:52: Reserv1                                       :0x0
11:28:52: Time Access 1 TAAC                            :0xe
11:28:52: Time Access 2 NSAC*100                        :0x0
11:28:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:52: Card Command Classess CCC                     :0x5b5
11:28:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:52: DSR(driver stage register)  DSR_IMP           :0x0
11:28:52: Reserv2                                       :0x0
11:28:52: Device Size C_SIZE                            :0xedc8
11:28:52: Reserv3                                       :0x0
11:28:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:52: Reserv4                                       :0x0
11:28:52: Write Speed Factor R2W_FACTOR                 :0x2
11:28:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:52: FILE_FORMAT_GRP                               :0x0
11:28:52: COPY flag                                     :0x1
11:28:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:52: File_Format                                   :0x0
11:28:52: CRC                                           :0x0
11:28:52: ####CSD Registe Values####  

11:28:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2A0>, <py_sfcl.CommandDataDefinition object at 0x0626D7B0>) , Command count = 3456 ] 
11:28:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x06268660>) , Command count = 3457 ] 
11:28:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C00>, <py_sfcl.PySEnhancedCmdData object at 0x06268AB0>, <None>, <py_sfcl.Command23 object at 0x062167E0>) , Command count = 3458 ] 
11:28:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:53: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:55: Host Frequency set to 25000 KHz
11:28:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:55: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:28:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D6C0>, 0x0, True) , Command count = 3459 ] 
11:28:55: [GO18_globalSetVolt]### Host voltage value is set.
11:28:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:28:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AA50>, 0x0, False) , Command count = 3460 ] 
11:28:55: [GO18_globalSetVolt]### Host voltage value is set.
11:28:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3461 ] 
11:28:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:28:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3462 ] 
11:28:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:28:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:28:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:28:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:28:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:28:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3463 ] 
11:28:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:28:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 3464 ] 
11:28:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x0626D510>) , Command count = 3465 ] 
11:28:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:28:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3466 ] 
11:28:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:28:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:56: Host Frequency set to 25000 KHz
11:28:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:56: ####CSD Registe 2.0 Values####
11:28:56: CSD_STRUCTURE                                 :0x1
11:28:56: Reserv1                                       :0x0
11:28:56: Time Access 1 TAAC                            :0xe
11:28:56: Time Access 2 NSAC*100                        :0x0
11:28:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:28:56: Card Command Classess CCC                     :0x5b5
11:28:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:56: DSR(driver stage register)  DSR_IMP           :0x0
11:28:56: Reserv2                                       :0x0
11:28:56: Device Size C_SIZE                            :0xedc8
11:28:56: Reserv3                                       :0x0
11:28:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:56: Reserv4                                       :0x0
11:28:56: Write Speed Factor R2W_FACTOR                 :0x2
11:28:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:56: FILE_FORMAT_GRP                               :0x0
11:28:56: COPY flag                                     :0x1
11:28:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:56: File_Format                                   :0x0
11:28:56: CRC                                           :0x0
11:28:56: ####CSD Registe Values####  

11:28:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:28:56: [GetSCRRegisterEntry] Passed
11:28:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:28:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:28:56: Data_Status_After Erases          : 0
11:28:56: CPRM Security Support             : No Security
11:28:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:28:56: Spec. Version                     : Version 3.0X
11:28:56: Extended Security Support         : Extended_Security_Not_Supported
11:28:56: Command Support                   : COMMAND_SUPPORT
11:28:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:28:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 3467 ] 
11:28:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:28:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DB0>, <py_sfcl.CommandDataDefinition object at 0x06269CF0>) , Command count = 3468 ] 
11:28:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:28:56: [ SetBusWidth(0x4) , Command count = 3469 ] 
11:28:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:28:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3470 ] 
11:28:56: Protected Area Size 0x28000
11:28:56: Bus Width           2
11:28:56: Secure Mode         0
11:28:56: Speed  Class        4
11:28:56: Perf Move           0
11:28:56: Au Size             9
11:28:56: Erase Size          15
11:28:56: Erase Timeout       1
11:28:56: Erase offset        1
11:28:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:28:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:28:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:28:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3471 ] 
11:28:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:28:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:28:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:28:56: Host Frequency set to 100000 KHz
11:28:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:28:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:28:56: ####CSD Registe 2.0 Values####
11:28:56: CSD_STRUCTURE                                 :0x1
11:28:56: Reserv1                                       :0x0
11:28:56: Time Access 1 TAAC                            :0xe
11:28:56: Time Access 2 NSAC*100                        :0x0
11:28:56: Data Transfer Rate TRAN_SPEED                 :0xb
11:28:56: Card Command Classess CCC                     :0x5b5
11:28:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:28:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:28:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:28:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:28:56: DSR(driver stage register)  DSR_IMP           :0x0
11:28:56: Reserv2                                       :0x0
11:28:56: Device Size C_SIZE                            :0xedc8
11:28:56: Reserv3                                       :0x0
11:28:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:28:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:28:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:28:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:28:57: Reserv4                                       :0x0
11:28:57: Write Speed Factor R2W_FACTOR                 :0x2
11:28:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:28:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:28:57: FILE_FORMAT_GRP                               :0x0
11:28:57: COPY flag                                     :0x1
11:28:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:28:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:28:57: File_Format                                   :0x0
11:28:57: CRC                                           :0x0
11:28:57: ####CSD Registe Values####  

11:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273DB0>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 3472 ] 
11:28:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DFC0>, <py_sfcl.CommandDataDefinition object at 0x06269E70>) , Command count = 3473 ] 
11:28:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:28:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:28:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:28:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:28:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062697B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269F00>, <py_sfcl.PySEnhancedCmdData object at 0x062691B0>, <None>, <py_sfcl.Command23 object at 0x06268FC0>) , Command count = 3474 ] 
11:28:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:28:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:28:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:28:59: Host Frequency set to 25000 KHz
11:28:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:28:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:28:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D9C0>, 0x0, True) , Command count = 3475 ] 
11:29:00: [GO18_globalSetVolt]### Host voltage value is set.
11:29:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA20>, 0x0, False) , Command count = 3476 ] 
11:29:00: [GO18_globalSetVolt]### Host voltage value is set.
11:29:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3477 ] 
11:29:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3478 ] 
11:29:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3479 ] 
11:29:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 3480 ] 
11:29:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 3481 ] 
11:29:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3482 ] 
11:29:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:00: Host Frequency set to 25000 KHz
11:29:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:00: ####CSD Registe 2.0 Values####
11:29:00: CSD_STRUCTURE                                 :0x1
11:29:00: Reserv1                                       :0x0
11:29:00: Time Access 1 TAAC                            :0xe
11:29:00: Time Access 2 NSAC*100                        :0x0
11:29:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:00: Card Command Classess CCC                     :0x5b5
11:29:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:00: DSR(driver stage register)  DSR_IMP           :0x0
11:29:00: Reserv2                                       :0x0
11:29:00: Device Size C_SIZE                            :0xedc8
11:29:00: Reserv3                                       :0x0
11:29:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:00: Reserv4                                       :0x0
11:29:00: Write Speed Factor R2W_FACTOR                 :0x2
11:29:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:00: FILE_FORMAT_GRP                               :0x0
11:29:00: COPY flag                                     :0x1
11:29:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:00: File_Format                                   :0x0
11:29:00: CRC                                           :0x0
11:29:00: ####CSD Registe Values####  

11:29:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:00: [GetSCRRegisterEntry] Passed
11:29:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:00: Data_Status_After Erases          : 0
11:29:00: CPRM Security Support             : No Security
11:29:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:00: Spec. Version                     : Version 3.0X
11:29:00: Extended Security Support         : Extended_Security_Not_Supported
11:29:00: Command Support                   : COMMAND_SUPPORT
11:29:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 3483 ] 
11:29:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C60>, <py_sfcl.CommandDataDefinition object at 0x06273CF0>) , Command count = 3484 ] 
11:29:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:00: [ SetBusWidth(0x4) , Command count = 3485 ] 
11:29:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062695D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3486 ] 
11:29:00: Protected Area Size 0x28000
11:29:00: Bus Width           2
11:29:00: Secure Mode         0
11:29:00: Speed  Class        4
11:29:00: Perf Move           0
11:29:00: Au Size             9
11:29:00: Erase Size          15
11:29:00: Erase Timeout       1
11:29:00: Erase offset        1
11:29:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3487 ] 
11:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:00: Host Frequency set to 100000 KHz
11:29:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:00: ####CSD Registe 2.0 Values####
11:29:00: CSD_STRUCTURE                                 :0x1
11:29:00: Reserv1                                       :0x0
11:29:00: Time Access 1 TAAC                            :0xe
11:29:00: Time Access 2 NSAC*100                        :0x0
11:29:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:00: Card Command Classess CCC                     :0x5b5
11:29:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:00: DSR(driver stage register)  DSR_IMP           :0x0
11:29:00: Reserv2                                       :0x0
11:29:00: Device Size C_SIZE                            :0xedc8
11:29:00: Reserv3                                       :0x0
11:29:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:01: Reserv4                                       :0x0
11:29:01: Write Speed Factor R2W_FACTOR                 :0x2
11:29:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:01: FILE_FORMAT_GRP                               :0x0
11:29:01: COPY flag                                     :0x1
11:29:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:01: File_Format                                   :0x0
11:29:01: CRC                                           :0x0
11:29:01: ####CSD Registe Values####  

11:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 3488 ] 
11:29:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A50>, <py_sfcl.CommandDataDefinition object at 0x06268540>) , Command count = 3489 ] 
11:29:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DF90>, <py_sfcl.PySEnhancedCmdData object at 0x0626D630>, <None>, <py_sfcl.Command23 object at 0x062693C0>) , Command count = 3490 ] 
11:29:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:04: Host Frequency set to 25000 KHz
11:29:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269600>, 0x0, True) , Command count = 3491 ] 
11:29:04: [GO18_globalSetVolt]### Host voltage value is set.
11:29:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A870>, 0x0, False) , Command count = 3492 ] 
11:29:04: [GO18_globalSetVolt]### Host voltage value is set.
11:29:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3493 ] 
11:29:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3494 ] 
11:29:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3495 ] 
11:29:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AB0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 3496 ] 
11:29:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD50>, <py_sfcl.CommandDataDefinition object at 0x0626D7E0>) , Command count = 3497 ] 
11:29:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3498 ] 
11:29:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:04: Host Frequency set to 25000 KHz
11:29:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:04: ####CSD Registe 2.0 Values####
11:29:04: CSD_STRUCTURE                                 :0x1
11:29:04: Reserv1                                       :0x0
11:29:04: Time Access 1 TAAC                            :0xe
11:29:04: Time Access 2 NSAC*100                        :0x0
11:29:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:04: Card Command Classess CCC                     :0x5b5
11:29:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:04: DSR(driver stage register)  DSR_IMP           :0x0
11:29:04: Reserv2                                       :0x0
11:29:04: Device Size C_SIZE                            :0xedc8
11:29:04: Reserv3                                       :0x0
11:29:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:04: Reserv4                                       :0x0
11:29:04: Write Speed Factor R2W_FACTOR                 :0x2
11:29:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:04: FILE_FORMAT_GRP                               :0x0
11:29:04: COPY flag                                     :0x1
11:29:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:04: File_Format                                   :0x0
11:29:04: CRC                                           :0x0
11:29:04: ####CSD Registe Values####  

11:29:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:04: [GetSCRRegisterEntry] Passed
11:29:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:04: Data_Status_After Erases          : 0
11:29:04: CPRM Security Support             : No Security
11:29:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:04: Spec. Version                     : Version 3.0X
11:29:04: Extended Security Support         : Extended_Security_Not_Supported
11:29:04: Command Support                   : COMMAND_SUPPORT
11:29:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A20>, <py_sfcl.CommandDataDefinition object at 0x06276D20>) , Command count = 3499 ] 
11:29:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 3500 ] 
11:29:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:04: [ SetBusWidth(0x4) , Command count = 3501 ] 
11:29:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3502 ] 
11:29:04: Protected Area Size 0x28000
11:29:04: Bus Width           2
11:29:04: Secure Mode         0
11:29:04: Speed  Class        4
11:29:04: Perf Move           0
11:29:04: Au Size             9
11:29:04: Erase Size          15
11:29:04: Erase Timeout       1
11:29:04: Erase offset        1
11:29:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3503 ] 
11:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:05: Host Frequency set to 100000 KHz
11:29:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:05: ####CSD Registe 2.0 Values####
11:29:05: CSD_STRUCTURE                                 :0x1
11:29:05: Reserv1                                       :0x0
11:29:05: Time Access 1 TAAC                            :0xe
11:29:05: Time Access 2 NSAC*100                        :0x0
11:29:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:05: Card Command Classess CCC                     :0x5b5
11:29:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:05: DSR(driver stage register)  DSR_IMP           :0x0
11:29:05: Reserv2                                       :0x0
11:29:05: Device Size C_SIZE                            :0xedc8
11:29:05: Reserv3                                       :0x0
11:29:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:05: Reserv4                                       :0x0
11:29:05: Write Speed Factor R2W_FACTOR                 :0x2
11:29:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:05: FILE_FORMAT_GRP                               :0x0
11:29:05: COPY flag                                     :0x1
11:29:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:05: File_Format                                   :0x0
11:29:05: CRC                                           :0x0
11:29:05: ####CSD Registe Values####  

11:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x06269960>) , Command count = 3504 ] 
11:29:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273EA0>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 3505 ] 
11:29:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBD0>, <None>, <py_sfcl.Command23 object at 0x0626D660>) , Command count = 3506 ] 
11:29:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:08: Host Frequency set to 25000 KHz
11:29:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DAE0>, 0x0, True) , Command count = 3507 ] 
11:29:08: [GO18_globalSetVolt]### Host voltage value is set.
11:29:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276A80>, 0x0, False) , Command count = 3508 ] 
11:29:08: [GO18_globalSetVolt]### Host voltage value is set.
11:29:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3509 ] 
11:29:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3510 ] 
11:29:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3511 ] 
11:29:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062739C0>) , Command count = 3512 ] 
11:29:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x06273FC0>) , Command count = 3513 ] 
11:29:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3514 ] 
11:29:08: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:09: Host Frequency set to 25000 KHz
11:29:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:09: ####CSD Registe 2.0 Values####
11:29:09: CSD_STRUCTURE                                 :0x1
11:29:09: Reserv1                                       :0x0
11:29:09: Time Access 1 TAAC                            :0xe
11:29:09: Time Access 2 NSAC*100                        :0x0
11:29:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:09: Card Command Classess CCC                     :0x5b5
11:29:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:09: DSR(driver stage register)  DSR_IMP           :0x0
11:29:09: Reserv2                                       :0x0
11:29:09: Device Size C_SIZE                            :0xedc8
11:29:09: Reserv3                                       :0x0
11:29:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:09: Reserv4                                       :0x0
11:29:09: Write Speed Factor R2W_FACTOR                 :0x2
11:29:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:09: FILE_FORMAT_GRP                               :0x0
11:29:09: COPY flag                                     :0x1
11:29:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:09: File_Format                                   :0x0
11:29:09: CRC                                           :0x0
11:29:09: ####CSD Registe Values####  

11:29:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:09: [GetSCRRegisterEntry] Passed
11:29:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:09: Data_Status_After Erases          : 0
11:29:09: CPRM Security Support             : No Security
11:29:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:09: Spec. Version                     : Version 3.0X
11:29:09: Extended Security Support         : Extended_Security_Not_Supported
11:29:09: Command Support                   : COMMAND_SUPPORT
11:29:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A120>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 3515 ] 
11:29:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 3516 ] 
11:29:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:09: [ SetBusWidth(0x4) , Command count = 3517 ] 
11:29:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3518 ] 
11:29:09: Protected Area Size 0x28000
11:29:09: Bus Width           2
11:29:09: Secure Mode         0
11:29:09: Speed  Class        4
11:29:09: Perf Move           0
11:29:09: Au Size             9
11:29:09: Erase Size          15
11:29:09: Erase Timeout       1
11:29:09: Erase offset        1
11:29:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3519 ] 
11:29:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:09: Host Frequency set to 100000 KHz
11:29:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:09: ####CSD Registe 2.0 Values####
11:29:09: CSD_STRUCTURE                                 :0x1
11:29:09: Reserv1                                       :0x0
11:29:09: Time Access 1 TAAC                            :0xe
11:29:09: Time Access 2 NSAC*100                        :0x0
11:29:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:09: Card Command Classess CCC                     :0x5b5
11:29:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:09: DSR(driver stage register)  DSR_IMP           :0x0
11:29:09: Reserv2                                       :0x0
11:29:09: Device Size C_SIZE                            :0xedc8
11:29:09: Reserv3                                       :0x0
11:29:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:10: Reserv4                                       :0x0
11:29:10: Write Speed Factor R2W_FACTOR                 :0x2
11:29:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:10: FILE_FORMAT_GRP                               :0x0
11:29:10: COPY flag                                     :0x1
11:29:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:10: File_Format                                   :0x0
11:29:10: CRC                                           :0x0
11:29:10: ####CSD Registe Values####  

11:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 3520 ] 
11:29:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA50>, <py_sfcl.CommandDataDefinition object at 0x0626DCF0>) , Command count = 3521 ] 
11:29:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273E40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x0626DDB0>, <None>, <py_sfcl.Command23 object at 0x0626DE10>) , Command count = 3522 ] 
11:29:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:12: Host Frequency set to 25000 KHz
11:29:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D990>, 0x0, True) , Command count = 3523 ] 
11:29:12: [GO18_globalSetVolt]### Host voltage value is set.
11:29:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x062735A0>, 0x0, False) , Command count = 3524 ] 
11:29:12: [GO18_globalSetVolt]### Host voltage value is set.
11:29:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3525 ] 
11:29:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3526 ] 
11:29:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3527 ] 
11:29:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F30>, <py_sfcl.CommandDataDefinition object at 0x062732D0>) , Command count = 3528 ] 
11:29:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273D50>) , Command count = 3529 ] 
11:29:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:13: [ SetCardRCA(0x1, 0xD555) , Command count = 3530 ] 
11:29:13: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:13: Host Frequency set to 25000 KHz
11:29:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:13: ####CSD Registe 2.0 Values####
11:29:13: CSD_STRUCTURE                                 :0x1
11:29:13: Reserv1                                       :0x0
11:29:13: Time Access 1 TAAC                            :0xe
11:29:13: Time Access 2 NSAC*100                        :0x0
11:29:13: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:13: Card Command Classess CCC                     :0x5b5
11:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:13: DSR(driver stage register)  DSR_IMP           :0x0
11:29:13: Reserv2                                       :0x0
11:29:13: Device Size C_SIZE                            :0xedc8
11:29:13: Reserv3                                       :0x0
11:29:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:13: Reserv4                                       :0x0
11:29:13: Write Speed Factor R2W_FACTOR                 :0x2
11:29:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:13: FILE_FORMAT_GRP                               :0x0
11:29:13: COPY flag                                     :0x1
11:29:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:13: File_Format                                   :0x0
11:29:13: CRC                                           :0x0
11:29:13: ####CSD Registe Values####  

11:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:13: [GetSCRRegisterEntry] Passed
11:29:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:13: Data_Status_After Erases          : 0
11:29:13: CPRM Security Support             : No Security
11:29:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:13: Spec. Version                     : Version 3.0X
11:29:13: Extended Security Support         : Extended_Security_Not_Supported
11:29:13: Command Support                   : COMMAND_SUPPORT
11:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273330>, <py_sfcl.CommandDataDefinition object at 0x06276360>) , Command count = 3531 ] 
11:29:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062760F0>, <py_sfcl.CommandDataDefinition object at 0x062760C0>) , Command count = 3532 ] 
11:29:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:13: [ SetBusWidth(0x4) , Command count = 3533 ] 
11:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3534 ] 
11:29:13: Protected Area Size 0x28000
11:29:13: Bus Width           2
11:29:13: Secure Mode         0
11:29:13: Speed  Class        4
11:29:13: Perf Move           0
11:29:13: Au Size             9
11:29:13: Erase Size          15
11:29:13: Erase Timeout       1
11:29:13: Erase offset        1
11:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3535 ] 
11:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:13: Host Frequency set to 100000 KHz
11:29:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:13: ####CSD Registe 2.0 Values####
11:29:13: CSD_STRUCTURE                                 :0x1
11:29:13: Reserv1                                       :0x0
11:29:13: Time Access 1 TAAC                            :0xe
11:29:13: Time Access 2 NSAC*100                        :0x0
11:29:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:13: Card Command Classess CCC                     :0x5b5
11:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:13: DSR(driver stage register)  DSR_IMP           :0x0
11:29:13: Reserv2                                       :0x0
11:29:13: Device Size C_SIZE                            :0xedc8
11:29:13: Reserv3                                       :0x0
11:29:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:14: Reserv4                                       :0x0
11:29:14: Write Speed Factor R2W_FACTOR                 :0x2
11:29:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:14: FILE_FORMAT_GRP                               :0x0
11:29:14: COPY flag                                     :0x1
11:29:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:14: File_Format                                   :0x0
11:29:14: CRC                                           :0x0
11:29:14: ####CSD Registe Values####  

11:29:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 3536 ] 
11:29:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF30>, <py_sfcl.CommandDataDefinition object at 0x0626D780>) , Command count = 3537 ] 
11:29:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D5A0>, <None>, <py_sfcl.Command23 object at 0x0626D960>) , Command count = 3538 ] 
11:29:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:14: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:17: Host Frequency set to 25000 KHz
11:29:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AE0>, 0x0, True) , Command count = 3539 ] 
11:29:17: [GO18_globalSetVolt]### Host voltage value is set.
11:29:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269EA0>, 0x0, False) , Command count = 3540 ] 
11:29:17: [GO18_globalSetVolt]### Host voltage value is set.
11:29:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3541 ] 
11:29:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3542 ] 
11:29:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3543 ] 
11:29:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627A060>) , Command count = 3544 ] 
11:29:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 3545 ] 
11:29:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3546 ] 
11:29:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:17: Host Frequency set to 25000 KHz
11:29:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:17: ####CSD Registe 2.0 Values####
11:29:17: CSD_STRUCTURE                                 :0x1
11:29:17: Reserv1                                       :0x0
11:29:17: Time Access 1 TAAC                            :0xe
11:29:17: Time Access 2 NSAC*100                        :0x0
11:29:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:17: Card Command Classess CCC                     :0x5b5
11:29:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:17: DSR(driver stage register)  DSR_IMP           :0x0
11:29:17: Reserv2                                       :0x0
11:29:17: Device Size C_SIZE                            :0xedc8
11:29:17: Reserv3                                       :0x0
11:29:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:17: Reserv4                                       :0x0
11:29:17: Write Speed Factor R2W_FACTOR                 :0x2
11:29:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:17: FILE_FORMAT_GRP                               :0x0
11:29:17: COPY flag                                     :0x1
11:29:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:17: File_Format                                   :0x0
11:29:17: CRC                                           :0x0
11:29:17: ####CSD Registe Values####  

11:29:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:17: [GetSCRRegisterEntry] Passed
11:29:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:17: Data_Status_After Erases          : 0
11:29:17: CPRM Security Support             : No Security
11:29:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:17: Spec. Version                     : Version 3.0X
11:29:17: Extended Security Support         : Extended_Security_Not_Supported
11:29:17: Command Support                   : COMMAND_SUPPORT
11:29:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x062730C0>) , Command count = 3547 ] 
11:29:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A6F0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 3548 ] 
11:29:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:17: [ SetBusWidth(0x4) , Command count = 3549 ] 
11:29:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3550 ] 
11:29:17: Protected Area Size 0x28000
11:29:17: Bus Width           2
11:29:17: Secure Mode         0
11:29:17: Speed  Class        4
11:29:17: Perf Move           0
11:29:17: Au Size             9
11:29:17: Erase Size          15
11:29:17: Erase Timeout       1
11:29:17: Erase offset        1
11:29:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3551 ] 
11:29:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:17: Host Frequency set to 100000 KHz
11:29:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:18: ####CSD Registe 2.0 Values####
11:29:18: CSD_STRUCTURE                                 :0x1
11:29:18: Reserv1                                       :0x0
11:29:18: Time Access 1 TAAC                            :0xe
11:29:18: Time Access 2 NSAC*100                        :0x0
11:29:18: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:18: Card Command Classess CCC                     :0x5b5
11:29:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:18: DSR(driver stage register)  DSR_IMP           :0x0
11:29:18: Reserv2                                       :0x0
11:29:18: Device Size C_SIZE                            :0xedc8
11:29:18: Reserv3                                       :0x0
11:29:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:18: Reserv4                                       :0x0
11:29:18: Write Speed Factor R2W_FACTOR                 :0x2
11:29:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:18: FILE_FORMAT_GRP                               :0x0
11:29:18: COPY flag                                     :0x1
11:29:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:18: File_Format                                   :0x0
11:29:18: CRC                                           :0x0
11:29:18: ####CSD Registe Values####  

11:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC00>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 3552 ] 
11:29:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276CF0>, <py_sfcl.CommandDataDefinition object at 0x0626D6F0>) , Command count = 3553 ] 
11:29:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062766F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DB10>, <py_sfcl.PySEnhancedCmdData object at 0x0626D9C0>, <None>, <py_sfcl.Command23 object at 0x0626DE40>) , Command count = 3554 ] 
11:29:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:19: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:21: Host Frequency set to 25000 KHz
11:29:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273390>, 0x0, True) , Command count = 3555 ] 
11:29:21: [GO18_globalSetVolt]### Host voltage value is set.
11:29:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276C00>, 0x0, False) , Command count = 3556 ] 
11:29:21: [GO18_globalSetVolt]### Host voltage value is set.
11:29:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3557 ] 
11:29:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3558 ] 
11:29:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3559 ] 
11:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x06276BA0>) , Command count = 3560 ] 
11:29:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC90>, <py_sfcl.CommandDataDefinition object at 0x062761E0>) , Command count = 3561 ] 
11:29:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3562 ] 
11:29:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:21: Host Frequency set to 25000 KHz
11:29:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:21: ####CSD Registe 2.0 Values####
11:29:21: CSD_STRUCTURE                                 :0x1
11:29:21: Reserv1                                       :0x0
11:29:21: Time Access 1 TAAC                            :0xe
11:29:21: Time Access 2 NSAC*100                        :0x0
11:29:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:21: Card Command Classess CCC                     :0x5b5
11:29:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:21: DSR(driver stage register)  DSR_IMP           :0x0
11:29:21: Reserv2                                       :0x0
11:29:21: Device Size C_SIZE                            :0xedc8
11:29:21: Reserv3                                       :0x0
11:29:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:21: Reserv4                                       :0x0
11:29:21: Write Speed Factor R2W_FACTOR                 :0x2
11:29:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:21: FILE_FORMAT_GRP                               :0x0
11:29:21: COPY flag                                     :0x1
11:29:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:21: File_Format                                   :0x0
11:29:21: CRC                                           :0x0
11:29:21: ####CSD Registe Values####  

11:29:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:21: [GetSCRRegisterEntry] Passed
11:29:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:21: Data_Status_After Erases          : 0
11:29:21: CPRM Security Support             : No Security
11:29:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:21: Spec. Version                     : Version 3.0X
11:29:21: Extended Security Support         : Extended_Security_Not_Supported
11:29:21: Command Support                   : COMMAND_SUPPORT
11:29:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A360>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 3563 ] 
11:29:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE40>, <py_sfcl.CommandDataDefinition object at 0x053EF120>) , Command count = 3564 ] 
11:29:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:21: [ SetBusWidth(0x4) , Command count = 3565 ] 
11:29:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3566 ] 
11:29:21: Protected Area Size 0x28000
11:29:21: Bus Width           2
11:29:21: Secure Mode         0
11:29:21: Speed  Class        4
11:29:21: Perf Move           0
11:29:21: Au Size             9
11:29:21: Erase Size          15
11:29:21: Erase Timeout       1
11:29:21: Erase offset        1
11:29:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3567 ] 
11:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:22: Host Frequency set to 100000 KHz
11:29:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:22: ####CSD Registe 2.0 Values####
11:29:22: CSD_STRUCTURE                                 :0x1
11:29:22: Reserv1                                       :0x0
11:29:22: Time Access 1 TAAC                            :0xe
11:29:22: Time Access 2 NSAC*100                        :0x0
11:29:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:22: Card Command Classess CCC                     :0x5b5
11:29:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:22: DSR(driver stage register)  DSR_IMP           :0x0
11:29:22: Reserv2                                       :0x0
11:29:22: Device Size C_SIZE                            :0xedc8
11:29:22: Reserv3                                       :0x0
11:29:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:22: Reserv4                                       :0x0
11:29:22: Write Speed Factor R2W_FACTOR                 :0x2
11:29:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:22: FILE_FORMAT_GRP                               :0x0
11:29:22: COPY flag                                     :0x1
11:29:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:22: File_Format                                   :0x0
11:29:22: CRC                                           :0x0
11:29:22: ####CSD Registe Values####  

11:29:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x0627A2D0>) , Command count = 3568 ] 
11:29:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062763C0>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 3569 ] 
11:29:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276ED0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D0F0>, <None>, <py_sfcl.Command23 object at 0x0626DF30>) , Command count = 3570 ] 
11:29:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:25: Host Frequency set to 25000 KHz
11:29:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276F00>, 0x0, True) , Command count = 3571 ] 
11:29:25: [GO18_globalSetVolt]### Host voltage value is set.
11:29:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268870>, 0x0, False) , Command count = 3572 ] 
11:29:25: [GO18_globalSetVolt]### Host voltage value is set.
11:29:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3573 ] 
11:29:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3574 ] 
11:29:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3575 ] 
11:29:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627A8A0>) , Command count = 3576 ] 
11:29:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD20>, <py_sfcl.CommandDataDefinition object at 0x06276B70>) , Command count = 3577 ] 
11:29:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3578 ] 
11:29:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:26: Host Frequency set to 25000 KHz
11:29:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:26: ####CSD Registe 2.0 Values####
11:29:26: CSD_STRUCTURE                                 :0x1
11:29:26: Reserv1                                       :0x0
11:29:26: Time Access 1 TAAC                            :0xe
11:29:26: Time Access 2 NSAC*100                        :0x0
11:29:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:26: Card Command Classess CCC                     :0x5b5
11:29:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:26: DSR(driver stage register)  DSR_IMP           :0x0
11:29:26: Reserv2                                       :0x0
11:29:26: Device Size C_SIZE                            :0xedc8
11:29:26: Reserv3                                       :0x0
11:29:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:26: Reserv4                                       :0x0
11:29:26: Write Speed Factor R2W_FACTOR                 :0x2
11:29:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:26: FILE_FORMAT_GRP                               :0x0
11:29:26: COPY flag                                     :0x1
11:29:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:26: File_Format                                   :0x0
11:29:26: CRC                                           :0x0
11:29:26: ####CSD Registe Values####  

11:29:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:26: [GetSCRRegisterEntry] Passed
11:29:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:26: Data_Status_After Erases          : 0
11:29:26: CPRM Security Support             : No Security
11:29:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:26: Spec. Version                     : Version 3.0X
11:29:26: Extended Security Support         : Extended_Security_Not_Supported
11:29:26: Command Support                   : COMMAND_SUPPORT
11:29:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x06273A20>) , Command count = 3579 ] 
11:29:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 3580 ] 
11:29:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:26: [ SetBusWidth(0x4) , Command count = 3581 ] 
11:29:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3582 ] 
11:29:26: Protected Area Size 0x28000
11:29:26: Bus Width           2
11:29:26: Secure Mode         0
11:29:26: Speed  Class        4
11:29:26: Perf Move           0
11:29:26: Au Size             9
11:29:26: Erase Size          15
11:29:26: Erase Timeout       1
11:29:26: Erase offset        1
11:29:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3583 ] 
11:29:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:26: Host Frequency set to 100000 KHz
11:29:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:26: ####CSD Registe 2.0 Values####
11:29:26: CSD_STRUCTURE                                 :0x1
11:29:26: Reserv1                                       :0x0
11:29:26: Time Access 1 TAAC                            :0xe
11:29:26: Time Access 2 NSAC*100                        :0x0
11:29:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:26: Card Command Classess CCC                     :0x5b5
11:29:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:26: DSR(driver stage register)  DSR_IMP           :0x0
11:29:26: Reserv2                                       :0x0
11:29:26: Device Size C_SIZE                            :0xedc8
11:29:26: Reserv3                                       :0x0
11:29:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:26: Reserv4                                       :0x0
11:29:26: Write Speed Factor R2W_FACTOR                 :0x2
11:29:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:26: FILE_FORMAT_GRP                               :0x0
11:29:26: COPY flag                                     :0x1
11:29:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:26: File_Format                                   :0x0
11:29:26: CRC                                           :0x0
11:29:26: ####CSD Registe Values####  

11:29:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06276E40>) , Command count = 3584 ] 
11:29:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06276810>) , Command count = 3585 ] 
11:29:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D150>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC30>, <None>, <py_sfcl.Command23 object at 0x0626D6F0>) , Command count = 3586 ] 
11:29:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:29: Host Frequency set to 25000 KHz
11:29:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269F90>, 0x0, True) , Command count = 3587 ] 
11:29:29: [GO18_globalSetVolt]### Host voltage value is set.
11:29:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF240>, 0x0, False) , Command count = 3588 ] 
11:29:29: [GO18_globalSetVolt]### Host voltage value is set.
11:29:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3589 ] 
11:29:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3590 ] 
11:29:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3591 ] 
11:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627DB40>) , Command count = 3592 ] 
11:29:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 3593 ] 
11:29:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3594 ] 
11:29:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:30: Host Frequency set to 25000 KHz
11:29:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:30: ####CSD Registe 2.0 Values####
11:29:30: CSD_STRUCTURE                                 :0x1
11:29:30: Reserv1                                       :0x0
11:29:30: Time Access 1 TAAC                            :0xe
11:29:30: Time Access 2 NSAC*100                        :0x0
11:29:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:30: Card Command Classess CCC                     :0x5b5
11:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:30: DSR(driver stage register)  DSR_IMP           :0x0
11:29:30: Reserv2                                       :0x0
11:29:30: Device Size C_SIZE                            :0xedc8
11:29:30: Reserv3                                       :0x0
11:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:30: Reserv4                                       :0x0
11:29:30: Write Speed Factor R2W_FACTOR                 :0x2
11:29:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:30: FILE_FORMAT_GRP                               :0x0
11:29:30: COPY flag                                     :0x1
11:29:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:30: File_Format                                   :0x0
11:29:30: CRC                                           :0x0
11:29:30: ####CSD Registe Values####  

11:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:30: [GetSCRRegisterEntry] Passed
11:29:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:30: Data_Status_After Erases          : 0
11:29:30: CPRM Security Support             : No Security
11:29:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:30: Spec. Version                     : Version 3.0X
11:29:30: Extended Security Support         : Extended_Security_Not_Supported
11:29:30: Command Support                   : COMMAND_SUPPORT
11:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268720>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 3595 ] 
11:29:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 3596 ] 
11:29:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:30: [ SetBusWidth(0x4) , Command count = 3597 ] 
11:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3598 ] 
11:29:30: Protected Area Size 0x28000
11:29:30: Bus Width           2
11:29:30: Secure Mode         0
11:29:30: Speed  Class        4
11:29:30: Perf Move           0
11:29:30: Au Size             9
11:29:30: Erase Size          15
11:29:30: Erase Timeout       1
11:29:30: Erase offset        1
11:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3599 ] 
11:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:30: Host Frequency set to 100000 KHz
11:29:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:30: ####CSD Registe 2.0 Values####
11:29:30: CSD_STRUCTURE                                 :0x1
11:29:30: Reserv1                                       :0x0
11:29:30: Time Access 1 TAAC                            :0xe
11:29:30: Time Access 2 NSAC*100                        :0x0
11:29:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:30: Card Command Classess CCC                     :0x5b5
11:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:30: DSR(driver stage register)  DSR_IMP           :0x0
11:29:30: Reserv2                                       :0x0
11:29:30: Device Size C_SIZE                            :0xedc8
11:29:30: Reserv3                                       :0x0
11:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:30: Reserv4                                       :0x0
11:29:30: Write Speed Factor R2W_FACTOR                 :0x2
11:29:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:31: FILE_FORMAT_GRP                               :0x0
11:29:31: COPY flag                                     :0x1
11:29:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:31: File_Format                                   :0x0
11:29:31: CRC                                           :0x0
11:29:31: ####CSD Registe Values####  

11:29:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 3600 ] 
11:29:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D150>, <py_sfcl.CommandDataDefinition object at 0x06276BD0>) , Command count = 3601 ] 
11:29:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276120>, <None>, <py_sfcl.Command23 object at 0x0626D240>) , Command count = 3602 ] 
11:29:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:33: Host Frequency set to 25000 KHz
11:29:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1E0>, 0x0, True) , Command count = 3603 ] 
11:29:33: [GO18_globalSetVolt]### Host voltage value is set.
11:29:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C60>, 0x0, False) , Command count = 3604 ] 
11:29:33: [GO18_globalSetVolt]### Host voltage value is set.
11:29:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3605 ] 
11:29:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3606 ] 
11:29:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3607 ] 
11:29:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x0627A570>) , Command count = 3608 ] 
11:29:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 3609 ] 
11:29:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3610 ] 
11:29:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:34: Host Frequency set to 25000 KHz
11:29:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:34: ####CSD Registe 2.0 Values####
11:29:34: CSD_STRUCTURE                                 :0x1
11:29:34: Reserv1                                       :0x0
11:29:34: Time Access 1 TAAC                            :0xe
11:29:34: Time Access 2 NSAC*100                        :0x0
11:29:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:34: Card Command Classess CCC                     :0x5b5
11:29:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:34: DSR(driver stage register)  DSR_IMP           :0x0
11:29:34: Reserv2                                       :0x0
11:29:34: Device Size C_SIZE                            :0xedc8
11:29:34: Reserv3                                       :0x0
11:29:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:34: Reserv4                                       :0x0
11:29:34: Write Speed Factor R2W_FACTOR                 :0x2
11:29:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:34: FILE_FORMAT_GRP                               :0x0
11:29:34: COPY flag                                     :0x1
11:29:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:34: File_Format                                   :0x0
11:29:34: CRC                                           :0x0
11:29:34: ####CSD Registe Values####  

11:29:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:34: [GetSCRRegisterEntry] Passed
11:29:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:34: Data_Status_After Erases          : 0
11:29:34: CPRM Security Support             : No Security
11:29:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:34: Spec. Version                     : Version 3.0X
11:29:34: Extended Security Support         : Extended_Security_Not_Supported
11:29:34: Command Support                   : COMMAND_SUPPORT
11:29:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D870>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 3611 ] 
11:29:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627DCF0>) , Command count = 3612 ] 
11:29:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:34: [ SetBusWidth(0x4) , Command count = 3613 ] 
11:29:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ADE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3614 ] 
11:29:34: Protected Area Size 0x28000
11:29:34: Bus Width           2
11:29:34: Secure Mode         0
11:29:34: Speed  Class        4
11:29:34: Perf Move           0
11:29:34: Au Size             9
11:29:34: Erase Size          15
11:29:34: Erase Timeout       1
11:29:34: Erase offset        1
11:29:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3615 ] 
11:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:34: Host Frequency set to 100000 KHz
11:29:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:34: ####CSD Registe 2.0 Values####
11:29:34: CSD_STRUCTURE                                 :0x1
11:29:34: Reserv1                                       :0x0
11:29:34: Time Access 1 TAAC                            :0xe
11:29:34: Time Access 2 NSAC*100                        :0x0
11:29:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:34: Card Command Classess CCC                     :0x5b5
11:29:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:34: DSR(driver stage register)  DSR_IMP           :0x0
11:29:34: Reserv2                                       :0x0
11:29:34: Device Size C_SIZE                            :0xedc8
11:29:34: Reserv3                                       :0x0
11:29:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:35: Reserv4                                       :0x0
11:29:35: Write Speed Factor R2W_FACTOR                 :0x2
11:29:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:35: FILE_FORMAT_GRP                               :0x0
11:29:35: COPY flag                                     :0x1
11:29:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:35: File_Format                                   :0x0
11:29:35: CRC                                           :0x0
11:29:35: ####CSD Registe Values####  

11:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x054019C0>) , Command count = 3616 ] 
11:29:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x06273B40>) , Command count = 3617 ] 
11:29:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x054019F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062734B0>, <py_sfcl.PySEnhancedCmdData object at 0x062168D0>, <None>, <py_sfcl.Command23 object at 0x06276E70>) , Command count = 3618 ] 
11:29:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:35: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:38: Host Frequency set to 25000 KHz
11:29:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C30>, 0x0, True) , Command count = 3619 ] 
11:29:38: [GO18_globalSetVolt]### Host voltage value is set.
11:29:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AFB10>, 0x0, False) , Command count = 3620 ] 
11:29:38: [GO18_globalSetVolt]### Host voltage value is set.
11:29:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3621 ] 
11:29:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3622 ] 
11:29:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3623 ] 
11:29:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 3624 ] 
11:29:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF2D0>, <py_sfcl.CommandDataDefinition object at 0x06276540>) , Command count = 3625 ] 
11:29:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:39: [ SetCardRCA(0x1, 0xD555) , Command count = 3626 ] 
11:29:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:39: Host Frequency set to 25000 KHz
11:29:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:39: ####CSD Registe 2.0 Values####
11:29:39: CSD_STRUCTURE                                 :0x1
11:29:39: Reserv1                                       :0x0
11:29:39: Time Access 1 TAAC                            :0xe
11:29:40: Time Access 2 NSAC*100                        :0x0
11:29:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:40: Card Command Classess CCC                     :0x5b5
11:29:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:40: DSR(driver stage register)  DSR_IMP           :0x0
11:29:40: Reserv2                                       :0x0
11:29:40: Device Size C_SIZE                            :0xedc8
11:29:40: Reserv3                                       :0x0
11:29:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:40: Reserv4                                       :0x0
11:29:40: Write Speed Factor R2W_FACTOR                 :0x2
11:29:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:40: FILE_FORMAT_GRP                               :0x0
11:29:40: COPY flag                                     :0x1
11:29:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:40: File_Format                                   :0x0
11:29:40: CRC                                           :0x0
11:29:40: ####CSD Registe Values####  

11:29:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:40: [GetSCRRegisterEntry] Passed
11:29:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:40: Data_Status_After Erases          : 0
11:29:40: CPRM Security Support             : No Security
11:29:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:40: Spec. Version                     : Version 3.0X
11:29:40: Extended Security Support         : Extended_Security_Not_Supported
11:29:40: Command Support                   : COMMAND_SUPPORT
11:29:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x05401F00>) , Command count = 3627 ] 
11:29:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A20>, <py_sfcl.CommandDataDefinition object at 0x06276150>) , Command count = 3628 ] 
11:29:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:40: [ SetBusWidth(0x4) , Command count = 3629 ] 
11:29:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3630 ] 
11:29:40: Protected Area Size 0x28000
11:29:40: Bus Width           2
11:29:40: Secure Mode         0
11:29:40: Speed  Class        4
11:29:40: Perf Move           0
11:29:40: Au Size             9
11:29:40: Erase Size          15
11:29:40: Erase Timeout       1
11:29:40: Erase offset        1
11:29:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3631 ] 
11:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:40: Host Frequency set to 100000 KHz
11:29:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:41: ####CSD Registe 2.0 Values####
11:29:41: CSD_STRUCTURE                                 :0x1
11:29:41: Reserv1                                       :0x0
11:29:41: Time Access 1 TAAC                            :0xe
11:29:41: Time Access 2 NSAC*100                        :0x0
11:29:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:41: Card Command Classess CCC                     :0x5b5
11:29:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:41: DSR(driver stage register)  DSR_IMP           :0x0
11:29:41: Reserv2                                       :0x0
11:29:41: Device Size C_SIZE                            :0xedc8
11:29:41: Reserv3                                       :0x0
11:29:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:41: Reserv4                                       :0x0
11:29:41: Write Speed Factor R2W_FACTOR                 :0x2
11:29:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:41: FILE_FORMAT_GRP                               :0x0
11:29:41: COPY flag                                     :0x1
11:29:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:41: File_Format                                   :0x0
11:29:41: CRC                                           :0x0
11:29:41: ####CSD Registe Values####  

11:29:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B70>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 3632 ] 
11:29:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627ADB0>) , Command count = 3633 ] 
11:29:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AD50>, <py_sfcl.PySEnhancedCmdData object at 0x0627AC00>, <None>, <py_sfcl.Command23 object at 0x062169F0>) , Command count = 3634 ] 
11:29:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:44: Host Frequency set to 25000 KHz
11:29:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF7B0>, 0x0, True) , Command count = 3635 ] 
11:29:44: [GO18_globalSetVolt]### Host voltage value is set.
11:29:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF4E0>, 0x0, False) , Command count = 3636 ] 
11:29:44: [GO18_globalSetVolt]### Host voltage value is set.
11:29:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3637 ] 
11:29:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3638 ] 
11:29:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3639 ] 
11:29:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216450>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 3640 ] 
11:29:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D450>, <py_sfcl.CommandDataDefinition object at 0x0627AC30>) , Command count = 3641 ] 
11:29:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:44: [ SetCardRCA(0x1, 0xD555) , Command count = 3642 ] 
11:29:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:44: Host Frequency set to 25000 KHz
11:29:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:44: ####CSD Registe 2.0 Values####
11:29:44: CSD_STRUCTURE                                 :0x1
11:29:44: Reserv1                                       :0x0
11:29:44: Time Access 1 TAAC                            :0xe
11:29:44: Time Access 2 NSAC*100                        :0x0
11:29:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:44: Card Command Classess CCC                     :0x5b5
11:29:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:44: DSR(driver stage register)  DSR_IMP           :0x0
11:29:44: Reserv2                                       :0x0
11:29:44: Device Size C_SIZE                            :0xedc8
11:29:44: Reserv3                                       :0x0
11:29:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:44: Reserv4                                       :0x0
11:29:44: Write Speed Factor R2W_FACTOR                 :0x2
11:29:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:44: FILE_FORMAT_GRP                               :0x0
11:29:44: COPY flag                                     :0x1
11:29:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:44: File_Format                                   :0x0
11:29:44: CRC                                           :0x0
11:29:44: ####CSD Registe Values####  

11:29:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:44: [GetSCRRegisterEntry] Passed
11:29:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:44: Data_Status_After Erases          : 0
11:29:44: CPRM Security Support             : No Security
11:29:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:44: Spec. Version                     : Version 3.0X
11:29:44: Extended Security Support         : Extended_Security_Not_Supported
11:29:44: Command Support                   : COMMAND_SUPPORT
11:29:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 3643 ] 
11:29:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 3644 ] 
11:29:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:44: [ SetBusWidth(0x4) , Command count = 3645 ] 
11:29:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3646 ] 
11:29:44: Protected Area Size 0x28000
11:29:44: Bus Width           2
11:29:45: Secure Mode         0
11:29:45: Speed  Class        4
11:29:45: Perf Move           0
11:29:45: Au Size             9
11:29:45: Erase Size          15
11:29:45: Erase Timeout       1
11:29:45: Erase offset        1
11:29:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3647 ] 
11:29:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:45: Host Frequency set to 100000 KHz
11:29:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:45: ####CSD Registe 2.0 Values####
11:29:45: CSD_STRUCTURE                                 :0x1
11:29:45: Reserv1                                       :0x0
11:29:45: Time Access 1 TAAC                            :0xe
11:29:45: Time Access 2 NSAC*100                        :0x0
11:29:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:45: Card Command Classess CCC                     :0x5b5
11:29:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:45: DSR(driver stage register)  DSR_IMP           :0x0
11:29:45: Reserv2                                       :0x0
11:29:45: Device Size C_SIZE                            :0xedc8
11:29:45: Reserv3                                       :0x0
11:29:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:45: Reserv4                                       :0x0
11:29:45: Write Speed Factor R2W_FACTOR                 :0x2
11:29:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:45: FILE_FORMAT_GRP                               :0x0
11:29:45: COPY flag                                     :0x1
11:29:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:45: File_Format                                   :0x0
11:29:45: CRC                                           :0x0
11:29:45: ####CSD Registe Values####  

11:29:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F00>, <py_sfcl.CommandDataDefinition object at 0x0627D210>) , Command count = 3648 ] 
11:29:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 3649 ] 
11:29:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A960>, <py_sfcl.PySEnhancedCmdData object at 0x0627A1B0>, <None>, <py_sfcl.Command23 object at 0x0627AF90>) , Command count = 3650 ] 
11:29:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:46: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:48: Host Frequency set to 25000 KHz
11:29:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:48: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A630>, 0x0, True) , Command count = 3651 ] 
11:29:48: [GO18_globalSetVolt]### Host voltage value is set.
11:29:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x062738D0>, 0x0, False) , Command count = 3652 ] 
11:29:48: [GO18_globalSetVolt]### Host voltage value is set.
11:29:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3653 ] 
11:29:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3654 ] 
11:29:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3655 ] 
11:29:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268990>, <py_sfcl.CommandDataDefinition object at 0x061AF660>) , Command count = 3656 ] 
11:29:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C90>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 3657 ] 
11:29:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3658 ] 
11:29:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:49: Host Frequency set to 25000 KHz
11:29:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:49: ####CSD Registe 2.0 Values####
11:29:49: CSD_STRUCTURE                                 :0x1
11:29:49: Reserv1                                       :0x0
11:29:49: Time Access 1 TAAC                            :0xe
11:29:49: Time Access 2 NSAC*100                        :0x0
11:29:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:49: Card Command Classess CCC                     :0x5b5
11:29:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:49: DSR(driver stage register)  DSR_IMP           :0x0
11:29:49: Reserv2                                       :0x0
11:29:49: Device Size C_SIZE                            :0xedc8
11:29:49: Reserv3                                       :0x0
11:29:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:49: Reserv4                                       :0x0
11:29:49: Write Speed Factor R2W_FACTOR                 :0x2
11:29:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:49: FILE_FORMAT_GRP                               :0x0
11:29:49: COPY flag                                     :0x1
11:29:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:49: File_Format                                   :0x0
11:29:49: CRC                                           :0x0
11:29:49: ####CSD Registe Values####  

11:29:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:49: [GetSCRRegisterEntry] Passed
11:29:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:49: Data_Status_After Erases          : 0
11:29:49: CPRM Security Support             : No Security
11:29:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:49: Spec. Version                     : Version 3.0X
11:29:49: Extended Security Support         : Extended_Security_Not_Supported
11:29:49: Command Support                   : COMMAND_SUPPORT
11:29:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 3659 ] 
11:29:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D210>, <py_sfcl.CommandDataDefinition object at 0x06268090>) , Command count = 3660 ] 
11:29:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:49: [ SetBusWidth(0x4) , Command count = 3661 ] 
11:29:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3662 ] 
11:29:49: Protected Area Size 0x28000
11:29:49: Bus Width           2
11:29:49: Secure Mode         0
11:29:49: Speed  Class        4
11:29:49: Perf Move           0
11:29:49: Au Size             9
11:29:49: Erase Size          15
11:29:49: Erase Timeout       1
11:29:49: Erase offset        1
11:29:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3663 ] 
11:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:49: Host Frequency set to 100000 KHz
11:29:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:49: ####CSD Registe 2.0 Values####
11:29:49: CSD_STRUCTURE                                 :0x1
11:29:49: Reserv1                                       :0x0
11:29:49: Time Access 1 TAAC                            :0xe
11:29:49: Time Access 2 NSAC*100                        :0x0
11:29:49: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:49: Card Command Classess CCC                     :0x5b5
11:29:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:49: DSR(driver stage register)  DSR_IMP           :0x0
11:29:49: Reserv2                                       :0x0
11:29:49: Device Size C_SIZE                            :0xedc8
11:29:50: Reserv3                                       :0x0
11:29:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:50: Reserv4                                       :0x0
11:29:50: Write Speed Factor R2W_FACTOR                 :0x2
11:29:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:50: FILE_FORMAT_GRP                               :0x0
11:29:50: COPY flag                                     :0x1
11:29:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:50: File_Format                                   :0x0
11:29:50: CRC                                           :0x0
11:29:50: ####CSD Registe Values####  

11:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x0627D120>) , Command count = 3664 ] 
11:29:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D060>, <py_sfcl.CommandDataDefinition object at 0x0627AF30>) , Command count = 3665 ] 
11:29:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216570>, <py_sfcl.PySEnhancedCmdData object at 0x06280120>, <None>, <py_sfcl.Command23 object at 0x0627ACF0>) , Command count = 3666 ] 
11:29:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:53: Host Frequency set to 25000 KHz
11:29:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401A50>, 0x0, True) , Command count = 3667 ] 
11:29:53: [GO18_globalSetVolt]### Host voltage value is set.
11:29:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x062739F0>, 0x0, False) , Command count = 3668 ] 
11:29:53: [GO18_globalSetVolt]### Host voltage value is set.
11:29:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3669 ] 
11:29:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3670 ] 
11:29:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3671 ] 
11:29:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269750>, <py_sfcl.CommandDataDefinition object at 0x06216510>) , Command count = 3672 ] 
11:29:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D480>, <py_sfcl.CommandDataDefinition object at 0x0627D3F0>) , Command count = 3673 ] 
11:29:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:53: [ SetCardRCA(0x1, 0xD555) , Command count = 3674 ] 
11:29:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:53: Host Frequency set to 25000 KHz
11:29:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:53: ####CSD Registe 2.0 Values####
11:29:53: CSD_STRUCTURE                                 :0x1
11:29:53: Reserv1                                       :0x0
11:29:53: Time Access 1 TAAC                            :0xe
11:29:53: Time Access 2 NSAC*100                        :0x0
11:29:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:53: Card Command Classess CCC                     :0x5b5
11:29:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:53: DSR(driver stage register)  DSR_IMP           :0x0
11:29:53: Reserv2                                       :0x0
11:29:53: Device Size C_SIZE                            :0xedc8
11:29:53: Reserv3                                       :0x0
11:29:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:53: Reserv4                                       :0x0
11:29:53: Write Speed Factor R2W_FACTOR                 :0x2
11:29:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:53: FILE_FORMAT_GRP                               :0x0
11:29:53: COPY flag                                     :0x1
11:29:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:53: File_Format                                   :0x0
11:29:53: CRC                                           :0x0
11:29:53: ####CSD Registe Values####  

11:29:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:53: [GetSCRRegisterEntry] Passed
11:29:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:53: Data_Status_After Erases          : 0
11:29:53: CPRM Security Support             : No Security
11:29:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:53: Spec. Version                     : Version 3.0X
11:29:53: Extended Security Support         : Extended_Security_Not_Supported
11:29:53: Command Support                   : COMMAND_SUPPORT
11:29:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269240>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 3675 ] 
11:29:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 3676 ] 
11:29:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:53: [ SetBusWidth(0x4) , Command count = 3677 ] 
11:29:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3678 ] 
11:29:53: Protected Area Size 0x28000
11:29:53: Bus Width           2
11:29:53: Secure Mode         0
11:29:53: Speed  Class        4
11:29:53: Perf Move           0
11:29:53: Au Size             9
11:29:53: Erase Size          15
11:29:53: Erase Timeout       1
11:29:53: Erase offset        1
11:29:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3679 ] 
11:29:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:53: Host Frequency set to 100000 KHz
11:29:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:54: ####CSD Registe 2.0 Values####
11:29:54: CSD_STRUCTURE                                 :0x1
11:29:54: Reserv1                                       :0x0
11:29:54: Time Access 1 TAAC                            :0xe
11:29:54: Time Access 2 NSAC*100                        :0x0
11:29:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:54: Card Command Classess CCC                     :0x5b5
11:29:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:54: DSR(driver stage register)  DSR_IMP           :0x0
11:29:54: Reserv2                                       :0x0
11:29:54: Device Size C_SIZE                            :0xedc8
11:29:54: Reserv3                                       :0x0
11:29:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:54: Reserv4                                       :0x0
11:29:54: Write Speed Factor R2W_FACTOR                 :0x2
11:29:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:54: FILE_FORMAT_GRP                               :0x0
11:29:54: COPY flag                                     :0x1
11:29:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:54: File_Format                                   :0x0
11:29:54: CRC                                           :0x0
11:29:54: ####CSD Registe Values####  

11:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680F0>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 3680 ] 
11:29:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062731B0>, <py_sfcl.CommandDataDefinition object at 0x06216EA0>) , Command count = 3681 ] 
11:29:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D240>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0F0>, <None>, <py_sfcl.Command23 object at 0x0627D390>) , Command count = 3682 ] 
11:29:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:29:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:57: Host Frequency set to 25000 KHz
11:29:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:29:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:29:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x062688D0>, 0x0, True) , Command count = 3683 ] 
11:29:57: [GO18_globalSetVolt]### Host voltage value is set.
11:29:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:29:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269090>, 0x0, False) , Command count = 3684 ] 
11:29:57: [GO18_globalSetVolt]### Host voltage value is set.
11:29:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3685 ] 
11:29:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:29:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3686 ] 
11:29:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:29:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:29:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:29:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:29:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:29:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3687 ] 
11:29:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:29:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x0627D2A0>) , Command count = 3688 ] 
11:29:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A330>, <py_sfcl.CommandDataDefinition object at 0x0627D2D0>) , Command count = 3689 ] 
11:29:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:29:57: [ SetCardRCA(0x1, 0xD555) , Command count = 3690 ] 
11:29:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:29:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:29:57: Host Frequency set to 25000 KHz
11:29:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:29:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:57: ####CSD Registe 2.0 Values####
11:29:57: CSD_STRUCTURE                                 :0x1
11:29:57: Reserv1                                       :0x0
11:29:57: Time Access 1 TAAC                            :0xe
11:29:57: Time Access 2 NSAC*100                        :0x0
11:29:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:29:57: Card Command Classess CCC                     :0x5b5
11:29:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:57: DSR(driver stage register)  DSR_IMP           :0x0
11:29:57: Reserv2                                       :0x0
11:29:57: Device Size C_SIZE                            :0xedc8
11:29:57: Reserv3                                       :0x0
11:29:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:57: Reserv4                                       :0x0
11:29:57: Write Speed Factor R2W_FACTOR                 :0x2
11:29:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:57: FILE_FORMAT_GRP                               :0x0
11:29:57: COPY flag                                     :0x1
11:29:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:57: File_Format                                   :0x0
11:29:57: CRC                                           :0x0
11:29:57: ####CSD Registe Values####  

11:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:29:57: [GetSCRRegisterEntry] Passed
11:29:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:29:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:29:57: Data_Status_After Erases          : 0
11:29:57: CPRM Security Support             : No Security
11:29:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:29:57: Spec. Version                     : Version 3.0X
11:29:57: Extended Security Support         : Extended_Security_Not_Supported
11:29:57: Command Support                   : COMMAND_SUPPORT
11:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2D0>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 3691 ] 
11:29:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062733C0>, <py_sfcl.CommandDataDefinition object at 0x0627D7E0>) , Command count = 3692 ] 
11:29:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:29:57: [ SetBusWidth(0x4) , Command count = 3693 ] 
11:29:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:29:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3694 ] 
11:29:57: Protected Area Size 0x28000
11:29:57: Bus Width           2
11:29:58: Secure Mode         0
11:29:58: Speed  Class        4
11:29:58: Perf Move           0
11:29:58: Au Size             9
11:29:58: Erase Size          15
11:29:58: Erase Timeout       1
11:29:58: Erase offset        1
11:29:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:29:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:29:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:29:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3695 ] 
11:29:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:29:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:29:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:29:58: Host Frequency set to 100000 KHz
11:29:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:29:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:29:58: ####CSD Registe 2.0 Values####
11:29:58: CSD_STRUCTURE                                 :0x1
11:29:58: Reserv1                                       :0x0
11:29:58: Time Access 1 TAAC                            :0xe
11:29:58: Time Access 2 NSAC*100                        :0x0
11:29:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:29:58: Card Command Classess CCC                     :0x5b5
11:29:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:29:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:29:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:29:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:29:58: DSR(driver stage register)  DSR_IMP           :0x0
11:29:58: Reserv2                                       :0x0
11:29:58: Device Size C_SIZE                            :0xedc8
11:29:58: Reserv3                                       :0x0
11:29:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:29:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:29:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:29:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:29:58: Reserv4                                       :0x0
11:29:58: Write Speed Factor R2W_FACTOR                 :0x2
11:29:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:29:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:29:58: FILE_FORMAT_GRP                               :0x0
11:29:58: COPY flag                                     :0x1
11:29:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:29:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:29:58: File_Format                                   :0x0
11:29:58: CRC                                           :0x0
11:29:58: ####CSD Registe Values####  

11:29:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D600>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 3696 ] 
11:29:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:29:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C00>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 3697 ] 
11:29:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:29:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:29:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:29:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:29:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268480>, <py_sfcl.PySEnhancedCmdData object at 0x06268900>, <None>, <py_sfcl.Command23 object at 0x0627DE70>) , Command count = 3698 ] 
11:29:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:29:59: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:01: Host Frequency set to 25000 KHz
11:30:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:01: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273E10>, 0x0, True) , Command count = 3699 ] 
11:30:01: [GO18_globalSetVolt]### Host voltage value is set.
11:30:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D180>, 0x0, False) , Command count = 3700 ] 
11:30:01: [GO18_globalSetVolt]### Host voltage value is set.
11:30:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3701 ] 
11:30:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3702 ] 
11:30:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3703 ] 
11:30:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269780>, <py_sfcl.CommandDataDefinition object at 0x06268F30>) , Command count = 3704 ] 
11:30:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E10>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 3705 ] 
11:30:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3706 ] 
11:30:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:02: Host Frequency set to 25000 KHz
11:30:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:02: ####CSD Registe 2.0 Values####
11:30:02: CSD_STRUCTURE                                 :0x1
11:30:02: Reserv1                                       :0x0
11:30:02: Time Access 1 TAAC                            :0xe
11:30:02: Time Access 2 NSAC*100                        :0x0
11:30:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:02: Card Command Classess CCC                     :0x5b5
11:30:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:02: DSR(driver stage register)  DSR_IMP           :0x0
11:30:02: Reserv2                                       :0x0
11:30:02: Device Size C_SIZE                            :0xedc8
11:30:02: Reserv3                                       :0x0
11:30:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:02: Reserv4                                       :0x0
11:30:02: Write Speed Factor R2W_FACTOR                 :0x2
11:30:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:02: FILE_FORMAT_GRP                               :0x0
11:30:02: COPY flag                                     :0x1
11:30:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:02: File_Format                                   :0x0
11:30:02: CRC                                           :0x0
11:30:02: ####CSD Registe Values####  

11:30:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:02: [GetSCRRegisterEntry] Passed
11:30:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:02: Data_Status_After Erases          : 0
11:30:02: CPRM Security Support             : No Security
11:30:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:02: Spec. Version                     : Version 3.0X
11:30:02: Extended Security Support         : Extended_Security_Not_Supported
11:30:02: Command Support                   : COMMAND_SUPPORT
11:30:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D780>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 3707 ] 
11:30:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2A0>, <py_sfcl.CommandDataDefinition object at 0x0626D7B0>) , Command count = 3708 ] 
11:30:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:02: [ SetBusWidth(0x4) , Command count = 3709 ] 
11:30:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062695A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3710 ] 
11:30:02: Protected Area Size 0x28000
11:30:02: Bus Width           2
11:30:02: Secure Mode         0
11:30:02: Speed  Class        4
11:30:02: Perf Move           0
11:30:02: Au Size             9
11:30:02: Erase Size          15
11:30:02: Erase Timeout       1
11:30:02: Erase offset        1
11:30:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3711 ] 
11:30:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:02: Host Frequency set to 100000 KHz
11:30:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:02: ####CSD Registe 2.0 Values####
11:30:02: CSD_STRUCTURE                                 :0x1
11:30:02: Reserv1                                       :0x0
11:30:02: Time Access 1 TAAC                            :0xe
11:30:02: Time Access 2 NSAC*100                        :0x0
11:30:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:02: Card Command Classess CCC                     :0x5b5
11:30:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:02: DSR(driver stage register)  DSR_IMP           :0x0
11:30:02: Reserv2                                       :0x0
11:30:02: Device Size C_SIZE                            :0xedc8
11:30:02: Reserv3                                       :0x0
11:30:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:03: Reserv4                                       :0x0
11:30:03: Write Speed Factor R2W_FACTOR                 :0x2
11:30:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:03: FILE_FORMAT_GRP                               :0x0
11:30:03: COPY flag                                     :0x1
11:30:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:03: File_Format                                   :0x0
11:30:03: CRC                                           :0x0
11:30:03: ####CSD Registe Values####  

11:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6C0>, <py_sfcl.CommandDataDefinition object at 0x062694B0>) , Command count = 3712 ] 
11:30:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269810>, <py_sfcl.CommandDataDefinition object at 0x06216AB0>) , Command count = 3713 ] 
11:30:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268BA0>, <py_sfcl.PySEnhancedCmdData object at 0x062681B0>, <None>, <py_sfcl.Command23 object at 0x06268210>) , Command count = 3714 ] 
11:30:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:06: Host Frequency set to 25000 KHz
11:30:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DC90>, 0x0, True) , Command count = 3715 ] 
11:30:06: [GO18_globalSetVolt]### Host voltage value is set.
11:30:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268A80>, 0x0, False) , Command count = 3716 ] 
11:30:06: [GO18_globalSetVolt]### Host voltage value is set.
11:30:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3717 ] 
11:30:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3718 ] 
11:30:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3719 ] 
11:30:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D360>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 3720 ] 
11:30:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269540>, <py_sfcl.CommandDataDefinition object at 0x06269AE0>) , Command count = 3721 ] 
11:30:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3722 ] 
11:30:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:06: Host Frequency set to 25000 KHz
11:30:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:06: ####CSD Registe 2.0 Values####
11:30:06: CSD_STRUCTURE                                 :0x1
11:30:06: Reserv1                                       :0x0
11:30:06: Time Access 1 TAAC                            :0xe
11:30:06: Time Access 2 NSAC*100                        :0x0
11:30:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:06: Card Command Classess CCC                     :0x5b5
11:30:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:06: DSR(driver stage register)  DSR_IMP           :0x0
11:30:06: Reserv2                                       :0x0
11:30:06: Device Size C_SIZE                            :0xedc8
11:30:06: Reserv3                                       :0x0
11:30:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:06: Reserv4                                       :0x0
11:30:06: Write Speed Factor R2W_FACTOR                 :0x2
11:30:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:06: FILE_FORMAT_GRP                               :0x0
11:30:06: COPY flag                                     :0x1
11:30:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:06: File_Format                                   :0x0
11:30:06: CRC                                           :0x0
11:30:06: ####CSD Registe Values####  

11:30:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:06: [GetSCRRegisterEntry] Passed
11:30:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:06: Data_Status_After Erases          : 0
11:30:06: CPRM Security Support             : No Security
11:30:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:06: Spec. Version                     : Version 3.0X
11:30:06: Extended Security Support         : Extended_Security_Not_Supported
11:30:06: Command Support                   : COMMAND_SUPPORT
11:30:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DB0>, <py_sfcl.CommandDataDefinition object at 0x06269CF0>) , Command count = 3723 ] 
11:30:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273DB0>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 3724 ] 
11:30:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:06: [ SetBusWidth(0x4) , Command count = 3725 ] 
11:30:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3726 ] 
11:30:06: Protected Area Size 0x28000
11:30:06: Bus Width           2
11:30:06: Secure Mode         0
11:30:06: Speed  Class        4
11:30:06: Perf Move           0
11:30:06: Au Size             9
11:30:06: Erase Size          15
11:30:06: Erase Timeout       1
11:30:06: Erase offset        1
11:30:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3727 ] 
11:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:06: Host Frequency set to 100000 KHz
11:30:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:07: ####CSD Registe 2.0 Values####
11:30:07: CSD_STRUCTURE                                 :0x1
11:30:07: Reserv1                                       :0x0
11:30:07: Time Access 1 TAAC                            :0xe
11:30:07: Time Access 2 NSAC*100                        :0x0
11:30:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:07: Card Command Classess CCC                     :0x5b5
11:30:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:07: DSR(driver stage register)  DSR_IMP           :0x0
11:30:07: Reserv2                                       :0x0
11:30:07: Device Size C_SIZE                            :0xedc8
11:30:07: Reserv3                                       :0x0
11:30:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:07: Reserv4                                       :0x0
11:30:07: Write Speed Factor R2W_FACTOR                 :0x2
11:30:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:07: FILE_FORMAT_GRP                               :0x0
11:30:07: COPY flag                                     :0x1
11:30:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:07: File_Format                                   :0x0
11:30:07: CRC                                           :0x0
11:30:07: ####CSD Registe Values####  

11:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 3728 ] 
11:30:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB40>, <py_sfcl.CommandDataDefinition object at 0x06269060>) , Command count = 3729 ] 
11:30:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062698D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062696F0>, <py_sfcl.PySEnhancedCmdData object at 0x062693F0>, <None>, <py_sfcl.Command23 object at 0x06268CF0>) , Command count = 3730 ] 
11:30:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:10: Host Frequency set to 25000 KHz
11:30:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DFC0>, 0x0, True) , Command count = 3731 ] 
11:30:10: [GO18_globalSetVolt]### Host voltage value is set.
11:30:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D750>, 0x0, False) , Command count = 3732 ] 
11:30:10: [GO18_globalSetVolt]### Host voltage value is set.
11:30:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3733 ] 
11:30:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3734 ] 
11:30:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3735 ] 
11:30:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 3736 ] 
11:30:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 3737 ] 
11:30:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:10: [ SetCardRCA(0x1, 0xD555) , Command count = 3738 ] 
11:30:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:10: Host Frequency set to 25000 KHz
11:30:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:10: ####CSD Registe 2.0 Values####
11:30:10: CSD_STRUCTURE                                 :0x1
11:30:10: Reserv1                                       :0x0
11:30:10: Time Access 1 TAAC                            :0xe
11:30:10: Time Access 2 NSAC*100                        :0x0
11:30:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:10: Card Command Classess CCC                     :0x5b5
11:30:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:10: DSR(driver stage register)  DSR_IMP           :0x0
11:30:10: Reserv2                                       :0x0
11:30:10: Device Size C_SIZE                            :0xedc8
11:30:10: Reserv3                                       :0x0
11:30:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:10: Reserv4                                       :0x0
11:30:10: Write Speed Factor R2W_FACTOR                 :0x2
11:30:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:10: FILE_FORMAT_GRP                               :0x0
11:30:10: COPY flag                                     :0x1
11:30:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:10: File_Format                                   :0x0
11:30:10: CRC                                           :0x0
11:30:10: ####CSD Registe Values####  

11:30:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:10: [GetSCRRegisterEntry] Passed
11:30:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:10: Data_Status_After Erases          : 0
11:30:10: CPRM Security Support             : No Security
11:30:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:10: Spec. Version                     : Version 3.0X
11:30:10: Extended Security Support         : Extended_Security_Not_Supported
11:30:10: Command Support                   : COMMAND_SUPPORT
11:30:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D4B0>, <py_sfcl.CommandDataDefinition object at 0x0626D1B0>) , Command count = 3739 ] 
11:30:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x06268EA0>) , Command count = 3740 ] 
11:30:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:10: [ SetBusWidth(0x4) , Command count = 3741 ] 
11:30:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3742 ] 
11:30:10: Protected Area Size 0x28000
11:30:10: Bus Width           2
11:30:11: Secure Mode         0
11:30:11: Speed  Class        4
11:30:11: Perf Move           0
11:30:11: Au Size             9
11:30:11: Erase Size          15
11:30:11: Erase Timeout       1
11:30:11: Erase offset        1
11:30:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3743 ] 
11:30:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:11: Host Frequency set to 100000 KHz
11:30:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:11: ####CSD Registe 2.0 Values####
11:30:11: CSD_STRUCTURE                                 :0x1
11:30:11: Reserv1                                       :0x0
11:30:11: Time Access 1 TAAC                            :0xe
11:30:11: Time Access 2 NSAC*100                        :0x0
11:30:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:11: Card Command Classess CCC                     :0x5b5
11:30:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:11: DSR(driver stage register)  DSR_IMP           :0x0
11:30:11: Reserv2                                       :0x0
11:30:11: Device Size C_SIZE                            :0xedc8
11:30:11: Reserv3                                       :0x0
11:30:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:12: Reserv4                                       :0x0
11:30:12: Write Speed Factor R2W_FACTOR                 :0x2
11:30:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:12: FILE_FORMAT_GRP                               :0x0
11:30:12: COPY flag                                     :0x1
11:30:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:12: File_Format                                   :0x0
11:30:12: CRC                                           :0x0
11:30:12: ####CSD Registe Values####  

11:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690C0>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 3744 ] 
11:30:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x0626D570>) , Command count = 3745 ] 
11:30:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DE70>, <py_sfcl.PySEnhancedCmdData object at 0x062802A0>, <None>, <py_sfcl.Command23 object at 0x06269510>) , Command count = 3746 ] 
11:30:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:15: Host Frequency set to 25000 KHz
11:30:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268A50>, 0x0, True) , Command count = 3747 ] 
11:30:15: [GO18_globalSetVolt]### Host voltage value is set.
11:30:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AB0>, 0x0, False) , Command count = 3748 ] 
11:30:15: [GO18_globalSetVolt]### Host voltage value is set.
11:30:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3749 ] 
11:30:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3750 ] 
11:30:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3751 ] 
11:30:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DE0>, <py_sfcl.CommandDataDefinition object at 0x06276D20>) , Command count = 3752 ] 
11:30:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273690>, <py_sfcl.CommandDataDefinition object at 0x0626D390>) , Command count = 3753 ] 
11:30:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3754 ] 
11:30:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:15: Host Frequency set to 25000 KHz
11:30:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:15: ####CSD Registe 2.0 Values####
11:30:15: CSD_STRUCTURE                                 :0x1
11:30:15: Reserv1                                       :0x0
11:30:15: Time Access 1 TAAC                            :0xe
11:30:15: Time Access 2 NSAC*100                        :0x0
11:30:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:15: Card Command Classess CCC                     :0x5b5
11:30:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:15: DSR(driver stage register)  DSR_IMP           :0x0
11:30:15: Reserv2                                       :0x0
11:30:15: Device Size C_SIZE                            :0xedc8
11:30:15: Reserv3                                       :0x0
11:30:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:15: Reserv4                                       :0x0
11:30:15: Write Speed Factor R2W_FACTOR                 :0x2
11:30:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:15: FILE_FORMAT_GRP                               :0x0
11:30:15: COPY flag                                     :0x1
11:30:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:15: File_Format                                   :0x0
11:30:15: CRC                                           :0x0
11:30:15: ####CSD Registe Values####  

11:30:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:15: [GetSCRRegisterEntry] Passed
11:30:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:15: Data_Status_After Erases          : 0
11:30:15: CPRM Security Support             : No Security
11:30:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:15: Spec. Version                     : Version 3.0X
11:30:15: Extended Security Support         : Extended_Security_Not_Supported
11:30:15: Command Support                   : COMMAND_SUPPORT
11:30:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 3755 ] 
11:30:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x06269960>) , Command count = 3756 ] 
11:30:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:15: [ SetBusWidth(0x4) , Command count = 3757 ] 
11:30:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3758 ] 
11:30:15: Protected Area Size 0x28000
11:30:15: Bus Width           2
11:30:15: Secure Mode         0
11:30:15: Speed  Class        4
11:30:15: Perf Move           0
11:30:15: Au Size             9
11:30:15: Erase Size          15
11:30:15: Erase Timeout       1
11:30:15: Erase offset        1
11:30:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3759 ] 
11:30:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:15: Host Frequency set to 100000 KHz
11:30:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:16: ####CSD Registe 2.0 Values####
11:30:16: CSD_STRUCTURE                                 :0x1
11:30:16: Reserv1                                       :0x0
11:30:16: Time Access 1 TAAC                            :0xe
11:30:16: Time Access 2 NSAC*100                        :0x0
11:30:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:16: Card Command Classess CCC                     :0x5b5
11:30:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:16: DSR(driver stage register)  DSR_IMP           :0x0
11:30:16: Reserv2                                       :0x0
11:30:16: Device Size C_SIZE                            :0xedc8
11:30:16: Reserv3                                       :0x0
11:30:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:16: Reserv4                                       :0x0
11:30:16: Write Speed Factor R2W_FACTOR                 :0x2
11:30:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:16: FILE_FORMAT_GRP                               :0x0
11:30:16: COPY flag                                     :0x1
11:30:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:16: File_Format                                   :0x0
11:30:16: CRC                                           :0x0
11:30:16: ####CSD Registe Values####  

11:30:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 3760 ] 
11:30:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A0F0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 3761 ] 
11:30:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D990>, <py_sfcl.PySEnhancedCmdData object at 0x0626D600>, <None>, <py_sfcl.Command23 object at 0x0626DA80>) , Command count = 3762 ] 
11:30:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:19: Host Frequency set to 25000 KHz
11:30:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273EA0>, 0x0, True) , Command count = 3763 ] 
11:30:19: [GO18_globalSetVolt]### Host voltage value is set.
11:30:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269B40>, 0x0, False) , Command count = 3764 ] 
11:30:19: [GO18_globalSetVolt]### Host voltage value is set.
11:30:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3765 ] 
11:30:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3766 ] 
11:30:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3767 ] 
11:30:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276060>, <py_sfcl.CommandDataDefinition object at 0x0626DFC0>) , Command count = 3768 ] 
11:30:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B70>, <py_sfcl.CommandDataDefinition object at 0x0626D0C0>) , Command count = 3769 ] 
11:30:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3770 ] 
11:30:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:19: Host Frequency set to 25000 KHz
11:30:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:19: ####CSD Registe 2.0 Values####
11:30:19: CSD_STRUCTURE                                 :0x1
11:30:19: Reserv1                                       :0x0
11:30:19: Time Access 1 TAAC                            :0xe
11:30:19: Time Access 2 NSAC*100                        :0x0
11:30:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:19: Card Command Classess CCC                     :0x5b5
11:30:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:19: DSR(driver stage register)  DSR_IMP           :0x0
11:30:19: Reserv2                                       :0x0
11:30:19: Device Size C_SIZE                            :0xedc8
11:30:19: Reserv3                                       :0x0
11:30:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:19: Reserv4                                       :0x0
11:30:19: Write Speed Factor R2W_FACTOR                 :0x2
11:30:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:19: FILE_FORMAT_GRP                               :0x0
11:30:19: COPY flag                                     :0x1
11:30:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:19: File_Format                                   :0x0
11:30:19: CRC                                           :0x0
11:30:19: ####CSD Registe Values####  

11:30:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:19: [GetSCRRegisterEntry] Passed
11:30:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:19: Data_Status_After Erases          : 0
11:30:19: CPRM Security Support             : No Security
11:30:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:19: Spec. Version                     : Version 3.0X
11:30:19: Extended Security Support         : Extended_Security_Not_Supported
11:30:19: Command Support                   : COMMAND_SUPPORT
11:30:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 3771 ] 
11:30:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 3772 ] 
11:30:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:19: [ SetBusWidth(0x4) , Command count = 3773 ] 
11:30:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062765A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3774 ] 
11:30:19: Protected Area Size 0x28000
11:30:19: Bus Width           2
11:30:20: Secure Mode         0
11:30:20: Speed  Class        4
11:30:20: Perf Move           0
11:30:20: Au Size             9
11:30:20: Erase Size          15
11:30:20: Erase Timeout       1
11:30:20: Erase offset        1
11:30:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3775 ] 
11:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:20: Host Frequency set to 100000 KHz
11:30:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:20: ####CSD Registe 2.0 Values####
11:30:20: CSD_STRUCTURE                                 :0x1
11:30:20: Reserv1                                       :0x0
11:30:20: Time Access 1 TAAC                            :0xe
11:30:20: Time Access 2 NSAC*100                        :0x0
11:30:20: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:20: Card Command Classess CCC                     :0x5b5
11:30:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:20: DSR(driver stage register)  DSR_IMP           :0x0
11:30:20: Reserv2                                       :0x0
11:30:20: Device Size C_SIZE                            :0xedc8
11:30:20: Reserv3                                       :0x0
11:30:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:20: Reserv4                                       :0x0
11:30:20: Write Speed Factor R2W_FACTOR                 :0x2
11:30:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:20: FILE_FORMAT_GRP                               :0x0
11:30:20: COPY flag                                     :0x1
11:30:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:20: File_Format                                   :0x0
11:30:20: CRC                                           :0x0
11:30:20: ####CSD Registe Values####  

11:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x0626DBD0>) , Command count = 3776 ] 
11:30:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269990>, <py_sfcl.CommandDataDefinition object at 0x0626DB70>) , Command count = 3777 ] 
11:30:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273210>, <py_sfcl.PySEnhancedCmdData object at 0x062734E0>, <None>, <py_sfcl.Command23 object at 0x0626D090>) , Command count = 3778 ] 
11:30:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:21: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:23: Host Frequency set to 25000 KHz
11:30:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:23: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA50>, 0x0, True) , Command count = 3779 ] 
11:30:23: [GO18_globalSetVolt]### Host voltage value is set.
11:30:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401F30>, 0x0, False) , Command count = 3780 ] 
11:30:23: [GO18_globalSetVolt]### Host voltage value is set.
11:30:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3781 ] 
11:30:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3782 ] 
11:30:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3783 ] 
11:30:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D50>, <py_sfcl.CommandDataDefinition object at 0x06276240>) , Command count = 3784 ] 
11:30:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF00>, <py_sfcl.CommandDataDefinition object at 0x06276690>) , Command count = 3785 ] 
11:30:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3786 ] 
11:30:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:24: Host Frequency set to 25000 KHz
11:30:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:24: ####CSD Registe 2.0 Values####
11:30:24: CSD_STRUCTURE                                 :0x1
11:30:24: Reserv1                                       :0x0
11:30:24: Time Access 1 TAAC                            :0xe
11:30:24: Time Access 2 NSAC*100                        :0x0
11:30:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:24: Card Command Classess CCC                     :0x5b5
11:30:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:24: DSR(driver stage register)  DSR_IMP           :0x0
11:30:24: Reserv2                                       :0x0
11:30:24: Device Size C_SIZE                            :0xedc8
11:30:24: Reserv3                                       :0x0
11:30:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:24: Reserv4                                       :0x0
11:30:24: Write Speed Factor R2W_FACTOR                 :0x2
11:30:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:24: FILE_FORMAT_GRP                               :0x0
11:30:24: COPY flag                                     :0x1
11:30:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:24: File_Format                                   :0x0
11:30:24: CRC                                           :0x0
11:30:24: ####CSD Registe Values####  

11:30:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:24: [GetSCRRegisterEntry] Passed
11:30:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:24: Data_Status_After Erases          : 0
11:30:24: CPRM Security Support             : No Security
11:30:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:24: Spec. Version                     : Version 3.0X
11:30:24: Extended Security Support         : Extended_Security_Not_Supported
11:30:24: Command Support                   : COMMAND_SUPPORT
11:30:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x062760F0>) , Command count = 3787 ] 
11:30:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 3788 ] 
11:30:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:24: [ SetBusWidth(0x4) , Command count = 3789 ] 
11:30:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3790 ] 
11:30:24: Protected Area Size 0x28000
11:30:24: Bus Width           2
11:30:24: Secure Mode         0
11:30:24: Speed  Class        4
11:30:24: Perf Move           0
11:30:24: Au Size             9
11:30:24: Erase Size          15
11:30:24: Erase Timeout       1
11:30:24: Erase offset        1
11:30:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3791 ] 
11:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:24: Host Frequency set to 100000 KHz
11:30:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:24: ####CSD Registe 2.0 Values####
11:30:24: CSD_STRUCTURE                                 :0x1
11:30:24: Reserv1                                       :0x0
11:30:24: Time Access 1 TAAC                            :0xe
11:30:24: Time Access 2 NSAC*100                        :0x0
11:30:24: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:24: Card Command Classess CCC                     :0x5b5
11:30:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:24: DSR(driver stage register)  DSR_IMP           :0x0
11:30:24: Reserv2                                       :0x0
11:30:24: Device Size C_SIZE                            :0xedc8
11:30:24: Reserv3                                       :0x0
11:30:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:25: Reserv4                                       :0x0
11:30:25: Write Speed Factor R2W_FACTOR                 :0x2
11:30:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:25: FILE_FORMAT_GRP                               :0x0
11:30:25: COPY flag                                     :0x1
11:30:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:25: File_Format                                   :0x0
11:30:25: CRC                                           :0x0
11:30:25: ####CSD Registe Values####  

11:30:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273480>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 3792 ] 
11:30:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273270>, <py_sfcl.CommandDataDefinition object at 0x062765A0>) , Command count = 3793 ] 
11:30:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062768A0>, <py_sfcl.PySEnhancedCmdData object at 0x062762A0>, <None>, <py_sfcl.Command23 object at 0x06273FC0>) , Command count = 3794 ] 
11:30:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:28: Host Frequency set to 25000 KHz
11:30:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AA20>, 0x0, True) , Command count = 3795 ] 
11:30:28: [GO18_globalSetVolt]### Host voltage value is set.
11:30:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269570>, 0x0, False) , Command count = 3796 ] 
11:30:28: [GO18_globalSetVolt]### Host voltage value is set.
11:30:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3797 ] 
11:30:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3798 ] 
11:30:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3799 ] 
11:30:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062730C0>, <py_sfcl.CommandDataDefinition object at 0x06273DE0>) , Command count = 3800 ] 
11:30:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x06276AE0>) , Command count = 3801 ] 
11:30:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3802 ] 
11:30:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:28: Host Frequency set to 25000 KHz
11:30:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:28: ####CSD Registe 2.0 Values####
11:30:28: CSD_STRUCTURE                                 :0x1
11:30:28: Reserv1                                       :0x0
11:30:28: Time Access 1 TAAC                            :0xe
11:30:28: Time Access 2 NSAC*100                        :0x0
11:30:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:28: Card Command Classess CCC                     :0x5b5
11:30:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:28: DSR(driver stage register)  DSR_IMP           :0x0
11:30:28: Reserv2                                       :0x0
11:30:28: Device Size C_SIZE                            :0xedc8
11:30:28: Reserv3                                       :0x0
11:30:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:28: Reserv4                                       :0x0
11:30:28: Write Speed Factor R2W_FACTOR                 :0x2
11:30:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:28: FILE_FORMAT_GRP                               :0x0
11:30:28: COPY flag                                     :0x1
11:30:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:28: File_Format                                   :0x0
11:30:28: CRC                                           :0x0
11:30:28: ####CSD Registe Values####  

11:30:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:28: [GetSCRRegisterEntry] Passed
11:30:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:28: Data_Status_After Erases          : 0
11:30:28: CPRM Security Support             : No Security
11:30:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:28: Spec. Version                     : Version 3.0X
11:30:28: Extended Security Support         : Extended_Security_Not_Supported
11:30:28: Command Support                   : COMMAND_SUPPORT
11:30:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A6F0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 3803 ] 
11:30:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC00>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 3804 ] 
11:30:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:28: [ SetBusWidth(0x4) , Command count = 3805 ] 
11:30:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3806 ] 
11:30:28: Protected Area Size 0x28000
11:30:28: Bus Width           2
11:30:28: Secure Mode         0
11:30:28: Speed  Class        4
11:30:28: Perf Move           0
11:30:28: Au Size             9
11:30:28: Erase Size          15
11:30:28: Erase Timeout       1
11:30:28: Erase offset        1
11:30:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3807 ] 
11:30:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:28: Host Frequency set to 100000 KHz
11:30:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:29: ####CSD Registe 2.0 Values####
11:30:29: CSD_STRUCTURE                                 :0x1
11:30:29: Reserv1                                       :0x0
11:30:29: Time Access 1 TAAC                            :0xe
11:30:29: Time Access 2 NSAC*100                        :0x0
11:30:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:29: Card Command Classess CCC                     :0x5b5
11:30:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:29: DSR(driver stage register)  DSR_IMP           :0x0
11:30:29: Reserv2                                       :0x0
11:30:29: Device Size C_SIZE                            :0xedc8
11:30:29: Reserv3                                       :0x0
11:30:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:29: Reserv4                                       :0x0
11:30:29: Write Speed Factor R2W_FACTOR                 :0x2
11:30:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:29: FILE_FORMAT_GRP                               :0x0
11:30:29: COPY flag                                     :0x1
11:30:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:29: File_Format                                   :0x0
11:30:29: CRC                                           :0x0
11:30:29: ####CSD Registe Values####  

11:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273060>, <py_sfcl.CommandDataDefinition object at 0x0626DD20>) , Command count = 3808 ] 
11:30:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C90>, <py_sfcl.CommandDataDefinition object at 0x0626D780>) , Command count = 3809 ] 
11:30:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276C90>, <py_sfcl.PySEnhancedCmdData object at 0x06276FC0>, <None>, <py_sfcl.Command23 object at 0x06276450>) , Command count = 3810 ] 
11:30:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:32: Host Frequency set to 25000 KHz
11:30:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276CF0>, 0x0, True) , Command count = 3811 ] 
11:30:32: [GO18_globalSetVolt]### Host voltage value is set.
11:30:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269330>, 0x0, False) , Command count = 3812 ] 
11:30:32: [GO18_globalSetVolt]### Host voltage value is set.
11:30:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3813 ] 
11:30:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3814 ] 
11:30:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3815 ] 
11:30:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273540>, <py_sfcl.CommandDataDefinition object at 0x062761E0>) , Command count = 3816 ] 
11:30:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB70>, <py_sfcl.CommandDataDefinition object at 0x062762D0>) , Command count = 3817 ] 
11:30:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3818 ] 
11:30:32: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:32: Host Frequency set to 25000 KHz
11:30:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:32: ####CSD Registe 2.0 Values####
11:30:32: CSD_STRUCTURE                                 :0x1
11:30:32: Reserv1                                       :0x0
11:30:32: Time Access 1 TAAC                            :0xe
11:30:32: Time Access 2 NSAC*100                        :0x0
11:30:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:32: Card Command Classess CCC                     :0x5b5
11:30:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:32: DSR(driver stage register)  DSR_IMP           :0x0
11:30:32: Reserv2                                       :0x0
11:30:32: Device Size C_SIZE                            :0xedc8
11:30:32: Reserv3                                       :0x0
11:30:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:32: Reserv4                                       :0x0
11:30:32: Write Speed Factor R2W_FACTOR                 :0x2
11:30:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:32: FILE_FORMAT_GRP                               :0x0
11:30:32: COPY flag                                     :0x1
11:30:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:32: File_Format                                   :0x0
11:30:32: CRC                                           :0x0
11:30:32: ####CSD Registe Values####  

11:30:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:32: [GetSCRRegisterEntry] Passed
11:30:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:32: Data_Status_After Erases          : 0
11:30:32: CPRM Security Support             : No Security
11:30:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:32: Spec. Version                     : Version 3.0X
11:30:32: Extended Security Support         : Extended_Security_Not_Supported
11:30:32: Command Support                   : COMMAND_SUPPORT
11:30:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF120>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 3819 ] 
11:30:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x062765D0>) , Command count = 3820 ] 
11:30:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:32: [ SetBusWidth(0x4) , Command count = 3821 ] 
11:30:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3822 ] 
11:30:32: Protected Area Size 0x28000
11:30:32: Bus Width           2
11:30:32: Secure Mode         0
11:30:32: Speed  Class        4
11:30:32: Perf Move           0
11:30:32: Au Size             9
11:30:32: Erase Size          15
11:30:32: Erase Timeout       1
11:30:32: Erase offset        1
11:30:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3823 ] 
11:30:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:33: Host Frequency set to 100000 KHz
11:30:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:33: ####CSD Registe 2.0 Values####
11:30:33: CSD_STRUCTURE                                 :0x1
11:30:33: Reserv1                                       :0x0
11:30:33: Time Access 1 TAAC                            :0xe
11:30:33: Time Access 2 NSAC*100                        :0x0
11:30:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:33: Card Command Classess CCC                     :0x5b5
11:30:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:33: DSR(driver stage register)  DSR_IMP           :0x0
11:30:33: Reserv2                                       :0x0
11:30:33: Device Size C_SIZE                            :0xedc8
11:30:33: Reserv3                                       :0x0
11:30:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:33: Reserv4                                       :0x0
11:30:33: Write Speed Factor R2W_FACTOR                 :0x2
11:30:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:33: FILE_FORMAT_GRP                               :0x0
11:30:33: COPY flag                                     :0x1
11:30:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:33: File_Format                                   :0x0
11:30:33: CRC                                           :0x0
11:30:33: ####CSD Registe Values####  

11:30:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D360>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 3824 ] 
11:30:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276750>, <py_sfcl.CommandDataDefinition object at 0x0626D9C0>) , Command count = 3825 ] 
11:30:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D270>, <py_sfcl.PySEnhancedCmdData object at 0x0627A720>, <None>, <py_sfcl.Command23 object at 0x06276960>) , Command count = 3826 ] 
11:30:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:36: Host Frequency set to 25000 KHz
11:30:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x062763C0>, 0x0, True) , Command count = 3827 ] 
11:30:36: [GO18_globalSetVolt]### Host voltage value is set.
11:30:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DB10>, 0x0, False) , Command count = 3828 ] 
11:30:36: [GO18_globalSetVolt]### Host voltage value is set.
11:30:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3829 ] 
11:30:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3830 ] 
11:30:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3831 ] 
11:30:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276EA0>, <py_sfcl.CommandDataDefinition object at 0x06276B70>) , Command count = 3832 ] 
11:30:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D180>, <py_sfcl.CommandDataDefinition object at 0x06276D80>) , Command count = 3833 ] 
11:30:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3834 ] 
11:30:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:37: Host Frequency set to 25000 KHz
11:30:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:37: ####CSD Registe 2.0 Values####
11:30:37: CSD_STRUCTURE                                 :0x1
11:30:37: Reserv1                                       :0x0
11:30:37: Time Access 1 TAAC                            :0xe
11:30:37: Time Access 2 NSAC*100                        :0x0
11:30:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:37: Card Command Classess CCC                     :0x5b5
11:30:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:37: DSR(driver stage register)  DSR_IMP           :0x0
11:30:37: Reserv2                                       :0x0
11:30:37: Device Size C_SIZE                            :0xedc8
11:30:37: Reserv3                                       :0x0
11:30:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:37: Reserv4                                       :0x0
11:30:37: Write Speed Factor R2W_FACTOR                 :0x2
11:30:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:37: FILE_FORMAT_GRP                               :0x0
11:30:37: COPY flag                                     :0x1
11:30:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:37: File_Format                                   :0x0
11:30:37: CRC                                           :0x0
11:30:37: ####CSD Registe Values####  

11:30:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:37: [GetSCRRegisterEntry] Passed
11:30:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:37: Data_Status_After Erases          : 0
11:30:37: CPRM Security Support             : No Security
11:30:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:37: Spec. Version                     : Version 3.0X
11:30:37: Extended Security Support         : Extended_Security_Not_Supported
11:30:37: Command Support                   : COMMAND_SUPPORT
11:30:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276DE0>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 3835 ] 
11:30:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06276E40>) , Command count = 3836 ] 
11:30:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:37: [ SetBusWidth(0x4) , Command count = 3837 ] 
11:30:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062166C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3838 ] 
11:30:37: Protected Area Size 0x28000
11:30:37: Bus Width           2
11:30:37: Secure Mode         0
11:30:37: Speed  Class        4
11:30:37: Perf Move           0
11:30:37: Au Size             9
11:30:37: Erase Size          15
11:30:37: Erase Timeout       1
11:30:37: Erase offset        1
11:30:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3839 ] 
11:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:37: Host Frequency set to 100000 KHz
11:30:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:37: ####CSD Registe 2.0 Values####
11:30:37: CSD_STRUCTURE                                 :0x1
11:30:37: Reserv1                                       :0x0
11:30:37: Time Access 1 TAAC                            :0xe
11:30:37: Time Access 2 NSAC*100                        :0x0
11:30:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:37: Card Command Classess CCC                     :0x5b5
11:30:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:37: DSR(driver stage register)  DSR_IMP           :0x0
11:30:37: Reserv2                                       :0x0
11:30:37: Device Size C_SIZE                            :0xedc8
11:30:37: Reserv3                                       :0x0
11:30:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:38: Reserv4                                       :0x0
11:30:38: Write Speed Factor R2W_FACTOR                 :0x2
11:30:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:38: FILE_FORMAT_GRP                               :0x0
11:30:38: COPY flag                                     :0x1
11:30:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:38: File_Format                                   :0x0
11:30:38: CRC                                           :0x0
11:30:38: ####CSD Registe Values####  

11:30:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 3840 ] 
11:30:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF30>, <py_sfcl.CommandDataDefinition object at 0x0626DEA0>) , Command count = 3841 ] 
11:30:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EFC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A5D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A7E0>, <None>, <py_sfcl.Command23 object at 0x0627A180>) , Command count = 3842 ] 
11:30:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:40: Host Frequency set to 25000 KHz
11:30:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A6C0>, 0x0, True) , Command count = 3843 ] 
11:30:40: [GO18_globalSetVolt]### Host voltage value is set.
11:30:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF270>, 0x0, False) , Command count = 3844 ] 
11:30:40: [GO18_globalSetVolt]### Host voltage value is set.
11:30:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3845 ] 
11:30:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3846 ] 
11:30:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3847 ] 
11:30:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 3848 ] 
11:30:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A4B0>, <py_sfcl.CommandDataDefinition object at 0x0627A090>) , Command count = 3849 ] 
11:30:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:41: [ SetCardRCA(0x1, 0xD555) , Command count = 3850 ] 
11:30:41: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:41: Host Frequency set to 25000 KHz
11:30:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:41: ####CSD Registe 2.0 Values####
11:30:41: CSD_STRUCTURE                                 :0x1
11:30:41: Reserv1                                       :0x0
11:30:41: Time Access 1 TAAC                            :0xe
11:30:41: Time Access 2 NSAC*100                        :0x0
11:30:41: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:41: Card Command Classess CCC                     :0x5b5
11:30:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:41: DSR(driver stage register)  DSR_IMP           :0x0
11:30:41: Reserv2                                       :0x0
11:30:41: Device Size C_SIZE                            :0xedc8
11:30:41: Reserv3                                       :0x0
11:30:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:41: Reserv4                                       :0x0
11:30:41: Write Speed Factor R2W_FACTOR                 :0x2
11:30:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:41: FILE_FORMAT_GRP                               :0x0
11:30:41: COPY flag                                     :0x1
11:30:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:41: File_Format                                   :0x0
11:30:41: CRC                                           :0x0
11:30:41: ####CSD Registe Values####  

11:30:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:41: [GetSCRRegisterEntry] Passed
11:30:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:41: Data_Status_After Erases          : 0
11:30:41: CPRM Security Support             : No Security
11:30:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:41: Spec. Version                     : Version 3.0X
11:30:41: Extended Security Support         : Extended_Security_Not_Supported
11:30:41: Command Support                   : COMMAND_SUPPORT
11:30:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 3851 ] 
11:30:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 3852 ] 
11:30:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:41: [ SetBusWidth(0x4) , Command count = 3853 ] 
11:30:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CAE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3854 ] 
11:30:41: Protected Area Size 0x28000
11:30:41: Bus Width           2
11:30:41: Secure Mode         0
11:30:41: Speed  Class        4
11:30:41: Perf Move           0
11:30:41: Au Size             9
11:30:41: Erase Size          15
11:30:41: Erase Timeout       1
11:30:41: Erase offset        1
11:30:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3855 ] 
11:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:41: Host Frequency set to 100000 KHz
11:30:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:41: ####CSD Registe 2.0 Values####
11:30:41: CSD_STRUCTURE                                 :0x1
11:30:41: Reserv1                                       :0x0
11:30:41: Time Access 1 TAAC                            :0xe
11:30:41: Time Access 2 NSAC*100                        :0x0
11:30:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:41: Card Command Classess CCC                     :0x5b5
11:30:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:41: DSR(driver stage register)  DSR_IMP           :0x0
11:30:41: Reserv2                                       :0x0
11:30:41: Device Size C_SIZE                            :0xedc8
11:30:41: Reserv3                                       :0x0
11:30:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:42: Reserv4                                       :0x0
11:30:42: Write Speed Factor R2W_FACTOR                 :0x2
11:30:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:42: FILE_FORMAT_GRP                               :0x0
11:30:42: COPY flag                                     :0x1
11:30:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:42: File_Format                                   :0x0
11:30:42: CRC                                           :0x0
11:30:42: ####CSD Registe Values####  

11:30:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 3856 ] 
11:30:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A150>, <py_sfcl.CommandDataDefinition object at 0x0626DC30>) , Command count = 3857 ] 
11:30:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767E0>, <py_sfcl.PySEnhancedCmdData object at 0x062763F0>, <None>, <py_sfcl.Command23 object at 0x0627A480>) , Command count = 3858 ] 
11:30:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:43: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:45: Host Frequency set to 25000 KHz
11:30:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:45: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D150>, 0x0, True) , Command count = 3859 ] 
11:30:45: [GO18_globalSetVolt]### Host voltage value is set.
11:30:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401DE0>, 0x0, False) , Command count = 3860 ] 
11:30:45: [GO18_globalSetVolt]### Host voltage value is set.
11:30:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3861 ] 
11:30:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3862 ] 
11:30:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3863 ] 
11:30:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x06268810>) , Command count = 3864 ] 
11:30:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269FC0>, <py_sfcl.CommandDataDefinition object at 0x06273600>) , Command count = 3865 ] 
11:30:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3866 ] 
11:30:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:45: Host Frequency set to 25000 KHz
11:30:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:45: ####CSD Registe 2.0 Values####
11:30:45: CSD_STRUCTURE                                 :0x1
11:30:45: Reserv1                                       :0x0
11:30:45: Time Access 1 TAAC                            :0xe
11:30:45: Time Access 2 NSAC*100                        :0x0
11:30:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:45: Card Command Classess CCC                     :0x5b5
11:30:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:45: DSR(driver stage register)  DSR_IMP           :0x0
11:30:45: Reserv2                                       :0x0
11:30:45: Device Size C_SIZE                            :0xedc8
11:30:45: Reserv3                                       :0x0
11:30:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:45: Reserv4                                       :0x0
11:30:45: Write Speed Factor R2W_FACTOR                 :0x2
11:30:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:45: FILE_FORMAT_GRP                               :0x0
11:30:45: COPY flag                                     :0x1
11:30:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:45: File_Format                                   :0x0
11:30:45: CRC                                           :0x0
11:30:45: ####CSD Registe Values####  

11:30:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:45: [GetSCRRegisterEntry] Passed
11:30:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:45: Data_Status_After Erases          : 0
11:30:45: CPRM Security Support             : No Security
11:30:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:45: Spec. Version                     : Version 3.0X
11:30:45: Extended Security Support         : Extended_Security_Not_Supported
11:30:45: Command Support                   : COMMAND_SUPPORT
11:30:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0627DCF0>) , Command count = 3867 ] 
11:30:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x054019C0>) , Command count = 3868 ] 
11:30:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:45: [ SetBusWidth(0x4) , Command count = 3869 ] 
11:30:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3870 ] 
11:30:45: Protected Area Size 0x28000
11:30:45: Bus Width           2
11:30:45: Secure Mode         0
11:30:45: Speed  Class        4
11:30:45: Perf Move           0
11:30:45: Au Size             9
11:30:45: Erase Size          15
11:30:45: Erase Timeout       1
11:30:45: Erase offset        1
11:30:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3871 ] 
11:30:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:45: Host Frequency set to 100000 KHz
11:30:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:46: ####CSD Registe 2.0 Values####
11:30:46: CSD_STRUCTURE                                 :0x1
11:30:46: Reserv1                                       :0x0
11:30:46: Time Access 1 TAAC                            :0xe
11:30:46: Time Access 2 NSAC*100                        :0x0
11:30:46: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:46: Card Command Classess CCC                     :0x5b5
11:30:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:46: DSR(driver stage register)  DSR_IMP           :0x0
11:30:46: Reserv2                                       :0x0
11:30:46: Device Size C_SIZE                            :0xedc8
11:30:46: Reserv3                                       :0x0
11:30:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:46: Reserv4                                       :0x0
11:30:46: Write Speed Factor R2W_FACTOR                 :0x2
11:30:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:46: FILE_FORMAT_GRP                               :0x0
11:30:46: COPY flag                                     :0x1
11:30:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:46: File_Format                                   :0x0
11:30:46: CRC                                           :0x0
11:30:46: ####CSD Registe Values####  

11:30:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0626D240>) , Command count = 3872 ] 
11:30:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x06216600>) , Command count = 3873 ] 
11:30:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A540>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB70>, <None>, <py_sfcl.Command23 object at 0x06276780>) , Command count = 3874 ] 
11:30:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:49: Host Frequency set to 25000 KHz
11:30:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401E70>, 0x0, True) , Command count = 3875 ] 
11:30:49: [GO18_globalSetVolt]### Host voltage value is set.
11:30:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401CC0>, 0x0, False) , Command count = 3876 ] 
11:30:49: [GO18_globalSetVolt]### Host voltage value is set.
11:30:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3877 ] 
11:30:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3878 ] 
11:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3879 ] 
11:30:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D930>, <py_sfcl.CommandDataDefinition object at 0x0627A690>) , Command count = 3880 ] 
11:30:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F30>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 3881 ] 
11:30:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:49: [ SetCardRCA(0x1, 0xD555) , Command count = 3882 ] 
11:30:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:49: Host Frequency set to 25000 KHz
11:30:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:49: ####CSD Registe 2.0 Values####
11:30:49: CSD_STRUCTURE                                 :0x1
11:30:49: Reserv1                                       :0x0
11:30:49: Time Access 1 TAAC                            :0xe
11:30:49: Time Access 2 NSAC*100                        :0x0
11:30:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:49: Card Command Classess CCC                     :0x5b5
11:30:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:49: DSR(driver stage register)  DSR_IMP           :0x0
11:30:49: Reserv2                                       :0x0
11:30:49: Device Size C_SIZE                            :0xedc8
11:30:49: Reserv3                                       :0x0
11:30:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:49: Reserv4                                       :0x0
11:30:49: Write Speed Factor R2W_FACTOR                 :0x2
11:30:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:49: FILE_FORMAT_GRP                               :0x0
11:30:49: COPY flag                                     :0x1
11:30:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:49: File_Format                                   :0x0
11:30:49: CRC                                           :0x0
11:30:49: ####CSD Registe Values####  

11:30:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:49: [GetSCRRegisterEntry] Passed
11:30:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:49: Data_Status_After Erases          : 0
11:30:49: CPRM Security Support             : No Security
11:30:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:49: Spec. Version                     : Version 3.0X
11:30:49: Extended Security Support         : Extended_Security_Not_Supported
11:30:49: Command Support                   : COMMAND_SUPPORT
11:30:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A20>, <py_sfcl.CommandDataDefinition object at 0x0627ADE0>) , Command count = 3883 ] 
11:30:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B70>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 3884 ] 
11:30:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:50: [ SetBusWidth(0x4) , Command count = 3885 ] 
11:30:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062734B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3886 ] 
11:30:50: Protected Area Size 0x28000
11:30:50: Bus Width           2
11:30:50: Secure Mode         0
11:30:50: Speed  Class        4
11:30:50: Perf Move           0
11:30:50: Au Size             9
11:30:50: Erase Size          15
11:30:50: Erase Timeout       1
11:30:50: Erase offset        1
11:30:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3887 ] 
11:30:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:50: Host Frequency set to 100000 KHz
11:30:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:50: ####CSD Registe 2.0 Values####
11:30:50: CSD_STRUCTURE                                 :0x1
11:30:50: Reserv1                                       :0x0
11:30:50: Time Access 1 TAAC                            :0xe
11:30:50: Time Access 2 NSAC*100                        :0x0
11:30:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:50: Card Command Classess CCC                     :0x5b5
11:30:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:50: DSR(driver stage register)  DSR_IMP           :0x0
11:30:50: Reserv2                                       :0x0
11:30:50: Device Size C_SIZE                            :0xedc8
11:30:50: Reserv3                                       :0x0
11:30:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:50: Reserv4                                       :0x0
11:30:50: Write Speed Factor R2W_FACTOR                 :0x2
11:30:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:50: FILE_FORMAT_GRP                               :0x0
11:30:50: COPY flag                                     :0x1
11:30:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:50: File_Format                                   :0x0
11:30:50: CRC                                           :0x0
11:30:50: ####CSD Registe Values####  

11:30:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062685D0>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 3888 ] 
11:30:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAE0>, <py_sfcl.CommandDataDefinition object at 0x06276720>) , Command count = 3889 ] 
11:30:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D540>, <py_sfcl.PySEnhancedCmdData object at 0x0627D1B0>, <None>, <py_sfcl.Command23 object at 0x0627A750>) , Command count = 3890 ] 
11:30:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:53: Host Frequency set to 25000 KHz
11:30:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFEA0>, 0x0, True) , Command count = 3891 ] 
11:30:53: [GO18_globalSetVolt]### Host voltage value is set.
11:30:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, False) , Command count = 3892 ] 
11:30:53: [GO18_globalSetVolt]### Host voltage value is set.
11:30:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3893 ] 
11:30:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3894 ] 
11:30:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3895 ] 
11:30:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 3896 ] 
11:30:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC30>, <py_sfcl.CommandDataDefinition object at 0x0627ACC0>) , Command count = 3897 ] 
11:30:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3898 ] 
11:30:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:54: Host Frequency set to 25000 KHz
11:30:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:54: ####CSD Registe 2.0 Values####
11:30:54: CSD_STRUCTURE                                 :0x1
11:30:54: Reserv1                                       :0x0
11:30:54: Time Access 1 TAAC                            :0xe
11:30:54: Time Access 2 NSAC*100                        :0x0
11:30:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:54: Card Command Classess CCC                     :0x5b5
11:30:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:54: DSR(driver stage register)  DSR_IMP           :0x0
11:30:54: Reserv2                                       :0x0
11:30:54: Device Size C_SIZE                            :0xedc8
11:30:54: Reserv3                                       :0x0
11:30:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:54: Reserv4                                       :0x0
11:30:54: Write Speed Factor R2W_FACTOR                 :0x2
11:30:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:54: FILE_FORMAT_GRP                               :0x0
11:30:54: COPY flag                                     :0x1
11:30:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:54: File_Format                                   :0x0
11:30:54: CRC                                           :0x0
11:30:54: ####CSD Registe Values####  

11:30:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:54: [GetSCRRegisterEntry] Passed
11:30:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:54: Data_Status_After Erases          : 0
11:30:54: CPRM Security Support             : No Security
11:30:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:54: Spec. Version                     : Version 3.0X
11:30:54: Extended Security Support         : Extended_Security_Not_Supported
11:30:54: Command Support                   : COMMAND_SUPPORT
11:30:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x062680C0>) , Command count = 3899 ] 
11:30:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F00>, <py_sfcl.CommandDataDefinition object at 0x0627D210>) , Command count = 3900 ] 
11:30:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:54: [ SetBusWidth(0x4) , Command count = 3901 ] 
11:30:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062169F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3902 ] 
11:30:54: Protected Area Size 0x28000
11:30:54: Bus Width           2
11:30:54: Secure Mode         0
11:30:54: Speed  Class        4
11:30:54: Perf Move           0
11:30:54: Au Size             9
11:30:54: Erase Size          15
11:30:54: Erase Timeout       1
11:30:54: Erase offset        1
11:30:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3903 ] 
11:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:54: Host Frequency set to 100000 KHz
11:30:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:54: ####CSD Registe 2.0 Values####
11:30:54: CSD_STRUCTURE                                 :0x1
11:30:54: Reserv1                                       :0x0
11:30:54: Time Access 1 TAAC                            :0xe
11:30:54: Time Access 2 NSAC*100                        :0x0
11:30:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:54: Card Command Classess CCC                     :0x5b5
11:30:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:54: DSR(driver stage register)  DSR_IMP           :0x0
11:30:54: Reserv2                                       :0x0
11:30:54: Device Size C_SIZE                            :0xedc8
11:30:54: Reserv3                                       :0x0
11:30:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:55: Reserv4                                       :0x0
11:30:55: Write Speed Factor R2W_FACTOR                 :0x2
11:30:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:55: FILE_FORMAT_GRP                               :0x0
11:30:55: COPY flag                                     :0x1
11:30:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:55: File_Format                                   :0x0
11:30:55: CRC                                           :0x0
11:30:55: ####CSD Registe Values####  

11:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x06216E10>) , Command count = 3904 ] 
11:30:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627ABA0>, <py_sfcl.CommandDataDefinition object at 0x0627AD50>) , Command count = 3905 ] 
11:30:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:30:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:30:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:30:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:30:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x0627AC30>, <None>, <py_sfcl.Command23 object at 0x0627D4E0>) , Command count = 3906 ] 
11:30:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:30:56: [GO4_globalInitCard]### Switch to Specify Card Type
11:30:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:58: Host Frequency set to 25000 KHz
11:30:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:58: [GO18_globalSetVolt]### Set Host Voltage value.
11:30:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:30:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFF60>, 0x0, True) , Command count = 3907 ] 
11:30:58: [GO18_globalSetVolt]### Host voltage value is set.
11:30:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:30:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268990>, 0x0, False) , Command count = 3908 ] 
11:30:58: [GO18_globalSetVolt]### Host voltage value is set.
11:30:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3909 ] 
11:30:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:30:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3910 ] 
11:30:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:30:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:30:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:30:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:30:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:30:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3911 ] 
11:30:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:30:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A20>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 3912 ] 
11:30:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A990>, <py_sfcl.CommandDataDefinition object at 0x0627A660>) , Command count = 3913 ] 
11:30:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:30:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3914 ] 
11:30:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:30:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:30:58: Host Frequency set to 25000 KHz
11:30:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:30:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:58: ####CSD Registe 2.0 Values####
11:30:58: CSD_STRUCTURE                                 :0x1
11:30:58: Reserv1                                       :0x0
11:30:58: Time Access 1 TAAC                            :0xe
11:30:58: Time Access 2 NSAC*100                        :0x0
11:30:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:30:58: Card Command Classess CCC                     :0x5b5
11:30:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:58: DSR(driver stage register)  DSR_IMP           :0x0
11:30:58: Reserv2                                       :0x0
11:30:58: Device Size C_SIZE                            :0xedc8
11:30:58: Reserv3                                       :0x0
11:30:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:58: Reserv4                                       :0x0
11:30:58: Write Speed Factor R2W_FACTOR                 :0x2
11:30:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:58: FILE_FORMAT_GRP                               :0x0
11:30:58: COPY flag                                     :0x1
11:30:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:58: File_Format                                   :0x0
11:30:58: CRC                                           :0x0
11:30:58: ####CSD Registe Values####  

11:30:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:30:58: [GetSCRRegisterEntry] Passed
11:30:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:30:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:30:58: Data_Status_After Erases          : 0
11:30:58: CPRM Security Support             : No Security
11:30:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:30:58: Spec. Version                     : Version 3.0X
11:30:58: Extended Security Support         : Extended_Security_Not_Supported
11:30:58: Command Support                   : COMMAND_SUPPORT
11:30:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D210>, <py_sfcl.CommandDataDefinition object at 0x06268090>) , Command count = 3915 ] 
11:30:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x062165D0>) , Command count = 3916 ] 
11:30:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:30:58: [ SetBusWidth(0x4) , Command count = 3917 ] 
11:30:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:30:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3918 ] 
11:30:58: Protected Area Size 0x28000
11:30:58: Bus Width           2
11:30:58: Secure Mode         0
11:30:58: Speed  Class        4
11:30:58: Perf Move           0
11:30:58: Au Size             9
11:30:58: Erase Size          15
11:30:58: Erase Timeout       1
11:30:58: Erase offset        1
11:30:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:30:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:30:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:30:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3919 ] 
11:30:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:30:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:30:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:30:58: Host Frequency set to 100000 KHz
11:30:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:30:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:30:59: ####CSD Registe 2.0 Values####
11:30:59: CSD_STRUCTURE                                 :0x1
11:30:59: Reserv1                                       :0x0
11:30:59: Time Access 1 TAAC                            :0xe
11:30:59: Time Access 2 NSAC*100                        :0x0
11:30:59: Data Transfer Rate TRAN_SPEED                 :0xb
11:30:59: Card Command Classess CCC                     :0x5b5
11:30:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:30:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:30:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:30:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:30:59: DSR(driver stage register)  DSR_IMP           :0x0
11:30:59: Reserv2                                       :0x0
11:30:59: Device Size C_SIZE                            :0xedc8
11:30:59: Reserv3                                       :0x0
11:30:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:30:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:30:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:30:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:30:59: Reserv4                                       :0x0
11:30:59: Write Speed Factor R2W_FACTOR                 :0x2
11:30:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:30:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:30:59: FILE_FORMAT_GRP                               :0x0
11:30:59: COPY flag                                     :0x1
11:30:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:30:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:30:59: File_Format                                   :0x0
11:30:59: CRC                                           :0x0
11:30:59: ####CSD Registe Values####  

11:30:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x0627D300>) , Command count = 3920 ] 
11:31:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 3921 ] 
11:31:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062738D0>, <py_sfcl.PySEnhancedCmdData object at 0x06273120>, <None>, <py_sfcl.Command23 object at 0x0627AE70>) , Command count = 3922 ] 
11:31:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:02: Host Frequency set to 25000 KHz
11:31:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D060>, 0x0, True) , Command count = 3923 ] 
11:31:02: [GO18_globalSetVolt]### Host voltage value is set.
11:31:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269750>, 0x0, False) , Command count = 3924 ] 
11:31:02: [GO18_globalSetVolt]### Host voltage value is set.
11:31:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3925 ] 
11:31:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3926 ] 
11:31:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3927 ] 
11:31:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x062690F0>) , Command count = 3928 ] 
11:31:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x0627A300>) , Command count = 3929 ] 
11:31:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3930 ] 
11:31:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:03: Host Frequency set to 25000 KHz
11:31:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:03: ####CSD Registe 2.0 Values####
11:31:03: CSD_STRUCTURE                                 :0x1
11:31:03: Reserv1                                       :0x0
11:31:03: Time Access 1 TAAC                            :0xe
11:31:03: Time Access 2 NSAC*100                        :0x0
11:31:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:03: Card Command Classess CCC                     :0x5b5
11:31:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:03: DSR(driver stage register)  DSR_IMP           :0x0
11:31:03: Reserv2                                       :0x0
11:31:03: Device Size C_SIZE                            :0xedc8
11:31:03: Reserv3                                       :0x0
11:31:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:03: Reserv4                                       :0x0
11:31:03: Write Speed Factor R2W_FACTOR                 :0x2
11:31:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:03: FILE_FORMAT_GRP                               :0x0
11:31:03: COPY flag                                     :0x1
11:31:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:03: File_Format                                   :0x0
11:31:03: CRC                                           :0x0
11:31:03: ####CSD Registe Values####  

11:31:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:03: [GetSCRRegisterEntry] Passed
11:31:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:03: Data_Status_After Erases          : 0
11:31:03: CPRM Security Support             : No Security
11:31:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:03: Spec. Version                     : Version 3.0X
11:31:03: Extended Security Support         : Extended_Security_Not_Supported
11:31:03: Command Support                   : COMMAND_SUPPORT
11:31:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 3931 ] 
11:31:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680F0>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 3932 ] 
11:31:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:03: [ SetBusWidth(0x4) , Command count = 3933 ] 
11:31:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3934 ] 
11:31:03: Protected Area Size 0x28000
11:31:03: Bus Width           2
11:31:03: Secure Mode         0
11:31:03: Speed  Class        4
11:31:03: Perf Move           0
11:31:03: Au Size             9
11:31:03: Erase Size          15
11:31:03: Erase Timeout       1
11:31:03: Erase offset        1
11:31:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3935 ] 
11:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:03: Host Frequency set to 100000 KHz
11:31:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:03: ####CSD Registe 2.0 Values####
11:31:03: CSD_STRUCTURE                                 :0x1
11:31:03: Reserv1                                       :0x0
11:31:03: Time Access 1 TAAC                            :0xe
11:31:03: Time Access 2 NSAC*100                        :0x0
11:31:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:03: Card Command Classess CCC                     :0x5b5
11:31:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:03: DSR(driver stage register)  DSR_IMP           :0x0
11:31:03: Reserv2                                       :0x0
11:31:03: Device Size C_SIZE                            :0xedc8
11:31:03: Reserv3                                       :0x0
11:31:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:04: Reserv4                                       :0x0
11:31:04: Write Speed Factor R2W_FACTOR                 :0x2
11:31:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:04: FILE_FORMAT_GRP                               :0x0
11:31:04: COPY flag                                     :0x1
11:31:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:04: File_Format                                   :0x0
11:31:04: CRC                                           :0x0
11:31:04: ####CSD Registe Values####  

11:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268E10>, <py_sfcl.CommandDataDefinition object at 0x062688D0>) , Command count = 3936 ] 
11:31:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CC0>, <py_sfcl.CommandDataDefinition object at 0x0627ACF0>) , Command count = 3937 ] 
11:31:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DF00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D330>, <None>, <py_sfcl.Command23 object at 0x06273F60>) , Command count = 3938 ] 
11:31:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:07: Host Frequency set to 25000 KHz
11:31:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x062731B0>, 0x0, True) , Command count = 3939 ] 
11:31:07: [GO18_globalSetVolt]### Host voltage value is set.
11:31:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D810>, 0x0, False) , Command count = 3940 ] 
11:31:07: [GO18_globalSetVolt]### Host voltage value is set.
11:31:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3941 ] 
11:31:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3942 ] 
11:31:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3943 ] 
11:31:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764B0>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 3944 ] 
11:31:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x06216E70>) , Command count = 3945 ] 
11:31:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:07: [ SetCardRCA(0x1, 0xD555) , Command count = 3946 ] 
11:31:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:07: Host Frequency set to 25000 KHz
11:31:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:07: ####CSD Registe 2.0 Values####
11:31:07: CSD_STRUCTURE                                 :0x1
11:31:07: Reserv1                                       :0x0
11:31:07: Time Access 1 TAAC                            :0xe
11:31:07: Time Access 2 NSAC*100                        :0x0
11:31:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:07: Card Command Classess CCC                     :0x5b5
11:31:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:07: DSR(driver stage register)  DSR_IMP           :0x0
11:31:07: Reserv2                                       :0x0
11:31:07: Device Size C_SIZE                            :0xedc8
11:31:07: Reserv3                                       :0x0
11:31:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:07: Reserv4                                       :0x0
11:31:07: Write Speed Factor R2W_FACTOR                 :0x2
11:31:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:07: FILE_FORMAT_GRP                               :0x0
11:31:07: COPY flag                                     :0x1
11:31:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:07: File_Format                                   :0x0
11:31:07: CRC                                           :0x0
11:31:07: ####CSD Registe Values####  

11:31:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:07: [GetSCRRegisterEntry] Passed
11:31:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:07: Data_Status_After Erases          : 0
11:31:07: CPRM Security Support             : No Security
11:31:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:07: Spec. Version                     : Version 3.0X
11:31:07: Extended Security Support         : Extended_Security_Not_Supported
11:31:07: Command Support                   : COMMAND_SUPPORT
11:31:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062733C0>, <py_sfcl.CommandDataDefinition object at 0x06216810>) , Command count = 3947 ] 
11:31:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 3948 ] 
11:31:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:07: [ SetBusWidth(0x4) , Command count = 3949 ] 
11:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062687B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3950 ] 
11:31:07: Protected Area Size 0x28000
11:31:07: Bus Width           2
11:31:07: Secure Mode         0
11:31:07: Speed  Class        4
11:31:07: Perf Move           0
11:31:07: Au Size             9
11:31:07: Erase Size          15
11:31:07: Erase Timeout       1
11:31:07: Erase offset        1
11:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3951 ] 
11:31:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:07: Host Frequency set to 100000 KHz
11:31:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:08: ####CSD Registe 2.0 Values####
11:31:08: CSD_STRUCTURE                                 :0x1
11:31:08: Reserv1                                       :0x0
11:31:08: Time Access 1 TAAC                            :0xe
11:31:08: Time Access 2 NSAC*100                        :0x0
11:31:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:08: Card Command Classess CCC                     :0x5b5
11:31:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:08: DSR(driver stage register)  DSR_IMP           :0x0
11:31:08: Reserv2                                       :0x0
11:31:08: Device Size C_SIZE                            :0xedc8
11:31:08: Reserv3                                       :0x0
11:31:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:08: Reserv4                                       :0x0
11:31:08: Write Speed Factor R2W_FACTOR                 :0x2
11:31:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:08: FILE_FORMAT_GRP                               :0x0
11:31:08: COPY flag                                     :0x1
11:31:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:08: File_Format                                   :0x0
11:31:08: CRC                                           :0x0
11:31:08: ####CSD Registe Values####  

11:31:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268060>, <py_sfcl.CommandDataDefinition object at 0x06268750>) , Command count = 3952 ] 
11:31:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276660>, <py_sfcl.CommandDataDefinition object at 0x0627D240>) , Command count = 3953 ] 
11:31:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D390>, <py_sfcl.PySEnhancedCmdData object at 0x0627D6C0>, <None>, <py_sfcl.Command23 object at 0x0627D870>) , Command count = 3954 ] 
11:31:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:11: Host Frequency set to 25000 KHz
11:31:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C00>, 0x0, True) , Command count = 3955 ] 
11:31:11: [GO18_globalSetVolt]### Host voltage value is set.
11:31:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269780>, 0x0, False) , Command count = 3956 ] 
11:31:11: [GO18_globalSetVolt]### Host voltage value is set.
11:31:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3957 ] 
11:31:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3958 ] 
11:31:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3959 ] 
11:31:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697E0>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 3960 ] 
11:31:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x06216A80>) , Command count = 3961 ] 
11:31:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3962 ] 
11:31:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:11: Host Frequency set to 25000 KHz
11:31:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:11: ####CSD Registe 2.0 Values####
11:31:11: CSD_STRUCTURE                                 :0x1
11:31:11: Reserv1                                       :0x0
11:31:11: Time Access 1 TAAC                            :0xe
11:31:11: Time Access 2 NSAC*100                        :0x0
11:31:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:11: Card Command Classess CCC                     :0x5b5
11:31:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:11: DSR(driver stage register)  DSR_IMP           :0x0
11:31:11: Reserv2                                       :0x0
11:31:11: Device Size C_SIZE                            :0xedc8
11:31:11: Reserv3                                       :0x0
11:31:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:11: Reserv4                                       :0x0
11:31:11: Write Speed Factor R2W_FACTOR                 :0x2
11:31:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:11: FILE_FORMAT_GRP                               :0x0
11:31:11: COPY flag                                     :0x1
11:31:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:11: File_Format                                   :0x0
11:31:11: CRC                                           :0x0
11:31:11: ####CSD Registe Values####  

11:31:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:11: [GetSCRRegisterEntry] Passed
11:31:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:11: Data_Status_After Erases          : 0
11:31:11: CPRM Security Support             : No Security
11:31:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:11: Spec. Version                     : Version 3.0X
11:31:11: Extended Security Support         : Extended_Security_Not_Supported
11:31:11: Command Support                   : COMMAND_SUPPORT
11:31:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D2A0>, <py_sfcl.CommandDataDefinition object at 0x0626D7B0>) , Command count = 3963 ] 
11:31:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6C0>, <py_sfcl.CommandDataDefinition object at 0x062694B0>) , Command count = 3964 ] 
11:31:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:11: [ SetBusWidth(0x4) , Command count = 3965 ] 
11:31:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3966 ] 
11:31:11: Protected Area Size 0x28000
11:31:11: Bus Width           2
11:31:12: Secure Mode         0
11:31:12: Speed  Class        4
11:31:12: Perf Move           0
11:31:12: Au Size             9
11:31:12: Erase Size          15
11:31:12: Erase Timeout       1
11:31:12: Erase offset        1
11:31:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3967 ] 
11:31:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:12: Host Frequency set to 100000 KHz
11:31:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:12: ####CSD Registe 2.0 Values####
11:31:12: CSD_STRUCTURE                                 :0x1
11:31:12: Reserv1                                       :0x0
11:31:12: Time Access 1 TAAC                            :0xe
11:31:12: Time Access 2 NSAC*100                        :0x0
11:31:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:12: Card Command Classess CCC                     :0x5b5
11:31:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:12: DSR(driver stage register)  DSR_IMP           :0x0
11:31:12: Reserv2                                       :0x0
11:31:12: Device Size C_SIZE                            :0xedc8
11:31:12: Reserv3                                       :0x0
11:31:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:12: Reserv4                                       :0x0
11:31:12: Write Speed Factor R2W_FACTOR                 :0x2
11:31:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:12: FILE_FORMAT_GRP                               :0x0
11:31:12: COPY flag                                     :0x1
11:31:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:12: File_Format                                   :0x0
11:31:12: CRC                                           :0x0
11:31:12: ####CSD Registe Values####  

11:31:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DCC0>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 3968 ] 
11:31:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273780>, <py_sfcl.CommandDataDefinition object at 0x06268480>) , Command count = 3969 ] 
11:31:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062735D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062683C0>, <py_sfcl.PySEnhancedCmdData object at 0x06268D50>, <None>, <py_sfcl.Command23 object at 0x0627D930>) , Command count = 3970 ] 
11:31:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:15: Host Frequency set to 25000 KHz
11:31:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216AB0>, 0x0, True) , Command count = 3971 ] 
11:31:15: [GO18_globalSetVolt]### Host voltage value is set.
11:31:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D360>, 0x0, False) , Command count = 3972 ] 
11:31:15: [GO18_globalSetVolt]### Host voltage value is set.
11:31:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3973 ] 
11:31:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3974 ] 
11:31:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3975 ] 
11:31:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DD80>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 3976 ] 
11:31:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 3977 ] 
11:31:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3978 ] 
11:31:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:16: Host Frequency set to 25000 KHz
11:31:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:16: ####CSD Registe 2.0 Values####
11:31:16: CSD_STRUCTURE                                 :0x1
11:31:16: Reserv1                                       :0x0
11:31:16: Time Access 1 TAAC                            :0xe
11:31:16: Time Access 2 NSAC*100                        :0x0
11:31:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:16: Card Command Classess CCC                     :0x5b5
11:31:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:16: DSR(driver stage register)  DSR_IMP           :0x0
11:31:16: Reserv2                                       :0x0
11:31:16: Device Size C_SIZE                            :0xedc8
11:31:16: Reserv3                                       :0x0
11:31:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:16: Reserv4                                       :0x0
11:31:16: Write Speed Factor R2W_FACTOR                 :0x2
11:31:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:16: FILE_FORMAT_GRP                               :0x0
11:31:16: COPY flag                                     :0x1
11:31:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:16: File_Format                                   :0x0
11:31:16: CRC                                           :0x0
11:31:16: ####CSD Registe Values####  

11:31:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:16: [GetSCRRegisterEntry] Passed
11:31:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:16: Data_Status_After Erases          : 0
11:31:16: CPRM Security Support             : No Security
11:31:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:16: Spec. Version                     : Version 3.0X
11:31:16: Extended Security Support         : Extended_Security_Not_Supported
11:31:16: Command Support                   : COMMAND_SUPPORT
11:31:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273DB0>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 3979 ] 
11:31:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 3980 ] 
11:31:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:16: [ SetBusWidth(0x4) , Command count = 3981 ] 
11:31:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3982 ] 
11:31:16: Protected Area Size 0x28000
11:31:16: Bus Width           2
11:31:16: Secure Mode         0
11:31:16: Speed  Class        4
11:31:16: Perf Move           0
11:31:16: Au Size             9
11:31:16: Erase Size          15
11:31:16: Erase Timeout       1
11:31:16: Erase offset        1
11:31:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3983 ] 
11:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:16: Host Frequency set to 100000 KHz
11:31:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:16: ####CSD Registe 2.0 Values####
11:31:16: CSD_STRUCTURE                                 :0x1
11:31:16: Reserv1                                       :0x0
11:31:16: Time Access 1 TAAC                            :0xe
11:31:16: Time Access 2 NSAC*100                        :0x0
11:31:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:16: Card Command Classess CCC                     :0x5b5
11:31:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:16: DSR(driver stage register)  DSR_IMP           :0x0
11:31:16: Reserv2                                       :0x0
11:31:16: Device Size C_SIZE                            :0xedc8
11:31:16: Reserv3                                       :0x0
11:31:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:17: Reserv4                                       :0x0
11:31:17: Write Speed Factor R2W_FACTOR                 :0x2
11:31:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:17: FILE_FORMAT_GRP                               :0x0
11:31:17: COPY flag                                     :0x1
11:31:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:17: File_Format                                   :0x0
11:31:17: CRC                                           :0x0
11:31:17: ####CSD Registe Values####  

11:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DFC0>) , Command count = 3984 ] 
11:31:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 3985 ] 
11:31:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0539E180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269B10>, <py_sfcl.PySEnhancedCmdData object at 0x06269810>, <None>, <py_sfcl.Command23 object at 0x062689F0>) , Command count = 3986 ] 
11:31:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:20: Host Frequency set to 25000 KHz
11:31:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269060>, 0x0, True) , Command count = 3987 ] 
11:31:20: [GO18_globalSetVolt]### Host voltage value is set.
11:31:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273CC0>, 0x0, False) , Command count = 3988 ] 
11:31:20: [GO18_globalSetVolt]### Host voltage value is set.
11:31:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3989 ] 
11:31:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3990 ] 
11:31:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3991 ] 
11:31:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697B0>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 3992 ] 
11:31:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA50>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 3993 ] 
11:31:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:20: [ SetCardRCA(0x1, 0xD555) , Command count = 3994 ] 
11:31:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:20: Host Frequency set to 25000 KHz
11:31:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:20: ####CSD Registe 2.0 Values####
11:31:20: CSD_STRUCTURE                                 :0x1
11:31:20: Reserv1                                       :0x0
11:31:20: Time Access 1 TAAC                            :0xe
11:31:20: Time Access 2 NSAC*100                        :0x0
11:31:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:20: Card Command Classess CCC                     :0x5b5
11:31:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:20: DSR(driver stage register)  DSR_IMP           :0x0
11:31:20: Reserv2                                       :0x0
11:31:20: Device Size C_SIZE                            :0xedc8
11:31:20: Reserv3                                       :0x0
11:31:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:20: Reserv4                                       :0x0
11:31:20: Write Speed Factor R2W_FACTOR                 :0x2
11:31:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:20: FILE_FORMAT_GRP                               :0x0
11:31:20: COPY flag                                     :0x1
11:31:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:20: File_Format                                   :0x0
11:31:20: CRC                                           :0x0
11:31:20: ####CSD Registe Values####  

11:31:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:20: [GetSCRRegisterEntry] Passed
11:31:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:20: Data_Status_After Erases          : 0
11:31:20: CPRM Security Support             : No Security
11:31:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:20: Spec. Version                     : Version 3.0X
11:31:20: Extended Security Support         : Extended_Security_Not_Supported
11:31:20: Command Support                   : COMMAND_SUPPORT
11:31:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x06268EA0>) , Command count = 3995 ] 
11:31:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690C0>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 3996 ] 
11:31:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:20: [ SetBusWidth(0x4) , Command count = 3997 ] 
11:31:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062696F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3998 ] 
11:31:20: Protected Area Size 0x28000
11:31:20: Bus Width           2
11:31:20: Secure Mode         0
11:31:20: Speed  Class        4
11:31:20: Perf Move           0
11:31:20: Au Size             9
11:31:20: Erase Size          15
11:31:20: Erase Timeout       1
11:31:20: Erase offset        1
11:31:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3999 ] 
11:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:20: Host Frequency set to 100000 KHz
11:31:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:21: ####CSD Registe 2.0 Values####
11:31:21: CSD_STRUCTURE                                 :0x1
11:31:21: Reserv1                                       :0x0
11:31:21: Time Access 1 TAAC                            :0xe
11:31:21: Time Access 2 NSAC*100                        :0x0
11:31:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:21: Card Command Classess CCC                     :0x5b5
11:31:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:21: DSR(driver stage register)  DSR_IMP           :0x0
11:31:21: Reserv2                                       :0x0
11:31:21: Device Size C_SIZE                            :0xedc8
11:31:21: Reserv3                                       :0x0
11:31:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:21: Reserv4                                       :0x0
11:31:21: Write Speed Factor R2W_FACTOR                 :0x2
11:31:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:21: FILE_FORMAT_GRP                               :0x0
11:31:21: COPY flag                                     :0x1
11:31:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:21: File_Format                                   :0x0
11:31:21: CRC                                           :0x0
11:31:21: ####CSD Registe Values####  

11:31:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269930>, <py_sfcl.CommandDataDefinition object at 0x06268BA0>) , Command count = 4000 ] 
11:31:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x06268540>) , Command count = 4001 ] 
11:31:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D480>, <None>, <py_sfcl.Command23 object at 0x06269540>) , Command count = 4002 ] 
11:31:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:24: Host Frequency set to 25000 KHz
11:31:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269840>, 0x0, True) , Command count = 4003 ] 
11:31:24: [GO18_globalSetVolt]### Host voltage value is set.
11:31:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269DE0>, 0x0, False) , Command count = 4004 ] 
11:31:24: [GO18_globalSetVolt]### Host voltage value is set.
11:31:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4005 ] 
11:31:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4006 ] 
11:31:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4007 ] 
11:31:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 4008 ] 
11:31:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA20>, <py_sfcl.CommandDataDefinition object at 0x062693C0>) , Command count = 4009 ] 
11:31:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:24: [ SetCardRCA(0x1, 0xD555) , Command count = 4010 ] 
11:31:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:25: Host Frequency set to 25000 KHz
11:31:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:25: ####CSD Registe 2.0 Values####
11:31:25: CSD_STRUCTURE                                 :0x1
11:31:25: Reserv1                                       :0x0
11:31:25: Time Access 1 TAAC                            :0xe
11:31:25: Time Access 2 NSAC*100                        :0x0
11:31:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:25: Card Command Classess CCC                     :0x5b5
11:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:25: DSR(driver stage register)  DSR_IMP           :0x0
11:31:25: Reserv2                                       :0x0
11:31:25: Device Size C_SIZE                            :0xedc8
11:31:25: Reserv3                                       :0x0
11:31:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:25: Reserv4                                       :0x0
11:31:25: Write Speed Factor R2W_FACTOR                 :0x2
11:31:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:25: FILE_FORMAT_GRP                               :0x0
11:31:25: COPY flag                                     :0x1
11:31:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:25: File_Format                                   :0x0
11:31:25: CRC                                           :0x0
11:31:25: ####CSD Registe Values####  

11:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:25: [GetSCRRegisterEntry] Passed
11:31:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:25: Data_Status_After Erases          : 0
11:31:25: CPRM Security Support             : No Security
11:31:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:25: Spec. Version                     : Version 3.0X
11:31:25: Extended Security Support         : Extended_Security_Not_Supported
11:31:25: Command Support                   : COMMAND_SUPPORT
11:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x06269960>) , Command count = 4011 ] 
11:31:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 4012 ] 
11:31:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:25: [ SetBusWidth(0x4) , Command count = 4013 ] 
11:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4014 ] 
11:31:25: Protected Area Size 0x28000
11:31:25: Bus Width           2
11:31:25: Secure Mode         0
11:31:25: Speed  Class        4
11:31:25: Perf Move           0
11:31:25: Au Size             9
11:31:25: Erase Size          15
11:31:25: Erase Timeout       1
11:31:25: Erase offset        1
11:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4015 ] 
11:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:25: Host Frequency set to 100000 KHz
11:31:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:25: ####CSD Registe 2.0 Values####
11:31:25: CSD_STRUCTURE                                 :0x1
11:31:25: Reserv1                                       :0x0
11:31:25: Time Access 1 TAAC                            :0xe
11:31:25: Time Access 2 NSAC*100                        :0x0
11:31:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:25: Card Command Classess CCC                     :0x5b5
11:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:25: DSR(driver stage register)  DSR_IMP           :0x0
11:31:25: Reserv2                                       :0x0
11:31:25: Device Size C_SIZE                            :0xedc8
11:31:25: Reserv3                                       :0x0
11:31:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:26: Reserv4                                       :0x0
11:31:26: Write Speed Factor R2W_FACTOR                 :0x2
11:31:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:26: FILE_FORMAT_GRP                               :0x0
11:31:26: COPY flag                                     :0x1
11:31:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:26: File_Format                                   :0x0
11:31:26: CRC                                           :0x0
11:31:26: ####CSD Registe Values####  

11:31:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 4016 ] 
11:31:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD50>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 4017 ] 
11:31:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D540>, <py_sfcl.PySEnhancedCmdData object at 0x0626D7E0>, <None>, <py_sfcl.Command23 object at 0x0626DA20>) , Command count = 4018 ] 
11:31:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:28: Host Frequency set to 25000 KHz
11:31:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A0F0>, 0x0, True) , Command count = 4019 ] 
11:31:28: [GO18_globalSetVolt]### Host voltage value is set.
11:31:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276060>, 0x0, False) , Command count = 4020 ] 
11:31:28: [GO18_globalSetVolt]### Host voltage value is set.
11:31:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4021 ] 
11:31:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4022 ] 
11:31:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4023 ] 
11:31:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 4024 ] 
11:31:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x0626DC00>) , Command count = 4025 ] 
11:31:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:29: [ SetCardRCA(0x1, 0xD555) , Command count = 4026 ] 
11:31:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:29: Host Frequency set to 25000 KHz
11:31:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:29: ####CSD Registe 2.0 Values####
11:31:29: CSD_STRUCTURE                                 :0x1
11:31:29: Reserv1                                       :0x0
11:31:29: Time Access 1 TAAC                            :0xe
11:31:29: Time Access 2 NSAC*100                        :0x0
11:31:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:29: Card Command Classess CCC                     :0x5b5
11:31:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:29: DSR(driver stage register)  DSR_IMP           :0x0
11:31:29: Reserv2                                       :0x0
11:31:29: Device Size C_SIZE                            :0xedc8
11:31:29: Reserv3                                       :0x0
11:31:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:29: Reserv4                                       :0x0
11:31:29: Write Speed Factor R2W_FACTOR                 :0x2
11:31:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:29: FILE_FORMAT_GRP                               :0x0
11:31:29: COPY flag                                     :0x1
11:31:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:29: File_Format                                   :0x0
11:31:29: CRC                                           :0x0
11:31:29: ####CSD Registe Values####  

11:31:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:29: [GetSCRRegisterEntry] Passed
11:31:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:29: Data_Status_After Erases          : 0
11:31:29: CPRM Security Support             : No Security
11:31:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:29: Spec. Version                     : Version 3.0X
11:31:29: Extended Security Support         : Extended_Security_Not_Supported
11:31:29: Command Support                   : COMMAND_SUPPORT
11:31:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D960>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 4027 ] 
11:31:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 4028 ] 
11:31:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:29: [ SetBusWidth(0x4) , Command count = 4029 ] 
11:31:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4030 ] 
11:31:29: Protected Area Size 0x28000
11:31:29: Bus Width           2
11:31:29: Secure Mode         0
11:31:29: Speed  Class        4
11:31:29: Perf Move           0
11:31:29: Au Size             9
11:31:29: Erase Size          15
11:31:29: Erase Timeout       1
11:31:29: Erase offset        1
11:31:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4031 ] 
11:31:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:29: Host Frequency set to 100000 KHz
11:31:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:29: ####CSD Registe 2.0 Values####
11:31:29: CSD_STRUCTURE                                 :0x1
11:31:29: Reserv1                                       :0x0
11:31:29: Time Access 1 TAAC                            :0xe
11:31:29: Time Access 2 NSAC*100                        :0x0
11:31:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:29: Card Command Classess CCC                     :0x5b5
11:31:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:29: DSR(driver stage register)  DSR_IMP           :0x0
11:31:29: Reserv2                                       :0x0
11:31:29: Device Size C_SIZE                            :0xedc8
11:31:29: Reserv3                                       :0x0
11:31:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:30: Reserv4                                       :0x0
11:31:30: Write Speed Factor R2W_FACTOR                 :0x2
11:31:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:30: FILE_FORMAT_GRP                               :0x0
11:31:30: COPY flag                                     :0x1
11:31:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:30: File_Format                                   :0x0
11:31:30: CRC                                           :0x0
11:31:30: ####CSD Registe Values####  

11:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BD0>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 4032 ] 
11:31:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x0626D990>) , Command count = 4033 ] 
11:31:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA80>, <py_sfcl.PySEnhancedCmdData object at 0x0626D300>, <None>, <py_sfcl.Command23 object at 0x0626DFC0>) , Command count = 4034 ] 
11:31:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:33: Host Frequency set to 25000 KHz
11:31:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269990>, 0x0, True) , Command count = 4035 ] 
11:31:33: [GO18_globalSetVolt]### Host voltage value is set.
11:31:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, False) , Command count = 4036 ] 
11:31:33: [GO18_globalSetVolt]### Host voltage value is set.
11:31:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4037 ] 
11:31:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4038 ] 
11:31:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4039 ] 
11:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 4040 ] 
11:31:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x0626DE10>) , Command count = 4041 ] 
11:31:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:33: [ SetCardRCA(0x1, 0xD555) , Command count = 4042 ] 
11:31:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:33: Host Frequency set to 25000 KHz
11:31:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:33: ####CSD Registe 2.0 Values####
11:31:33: CSD_STRUCTURE                                 :0x1
11:31:33: Reserv1                                       :0x0
11:31:33: Time Access 1 TAAC                            :0xe
11:31:33: Time Access 2 NSAC*100                        :0x0
11:31:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:33: Card Command Classess CCC                     :0x5b5
11:31:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:33: DSR(driver stage register)  DSR_IMP           :0x0
11:31:33: Reserv2                                       :0x0
11:31:33: Device Size C_SIZE                            :0xedc8
11:31:33: Reserv3                                       :0x0
11:31:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:33: Reserv4                                       :0x0
11:31:33: Write Speed Factor R2W_FACTOR                 :0x2
11:31:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:33: FILE_FORMAT_GRP                               :0x0
11:31:33: COPY flag                                     :0x1
11:31:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:33: File_Format                                   :0x0
11:31:33: CRC                                           :0x0
11:31:33: ####CSD Registe Values####  

11:31:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:33: [GetSCRRegisterEntry] Passed
11:31:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:33: Data_Status_After Erases          : 0
11:31:33: CPRM Security Support             : No Security
11:31:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:33: Spec. Version                     : Version 3.0X
11:31:33: Extended Security Support         : Extended_Security_Not_Supported
11:31:33: Command Support                   : COMMAND_SUPPORT
11:31:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 4043 ] 
11:31:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273480>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 4044 ] 
11:31:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:33: [ SetBusWidth(0x4) , Command count = 4045 ] 
11:31:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4046 ] 
11:31:33: Protected Area Size 0x28000
11:31:33: Bus Width           2
11:31:33: Secure Mode         0
11:31:33: Speed  Class        4
11:31:33: Perf Move           0
11:31:33: Au Size             9
11:31:33: Erase Size          15
11:31:33: Erase Timeout       1
11:31:33: Erase offset        1
11:31:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4047 ] 
11:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:33: Host Frequency set to 100000 KHz
11:31:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:34: ####CSD Registe 2.0 Values####
11:31:34: CSD_STRUCTURE                                 :0x1
11:31:34: Reserv1                                       :0x0
11:31:34: Time Access 1 TAAC                            :0xe
11:31:34: Time Access 2 NSAC*100                        :0x0
11:31:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:34: Card Command Classess CCC                     :0x5b5
11:31:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:34: DSR(driver stage register)  DSR_IMP           :0x0
11:31:34: Reserv2                                       :0x0
11:31:34: Device Size C_SIZE                            :0xedc8
11:31:34: Reserv3                                       :0x0
11:31:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:34: Reserv4                                       :0x0
11:31:34: Write Speed Factor R2W_FACTOR                 :0x2
11:31:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:34: FILE_FORMAT_GRP                               :0x0
11:31:34: COPY flag                                     :0x1
11:31:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:34: File_Format                                   :0x0
11:31:34: CRC                                           :0x0
11:31:34: ####CSD Registe Values####  

11:31:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273360>, <py_sfcl.CommandDataDefinition object at 0x0627AA20>) , Command count = 4048 ] 
11:31:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x0626D090>) , Command count = 4049 ] 
11:31:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062699F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062764E0>, <py_sfcl.PySEnhancedCmdData object at 0x062760C0>, <None>, <py_sfcl.Command23 object at 0x0626D120>) , Command count = 4050 ] 
11:31:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:35: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:37: Host Frequency set to 25000 KHz
11:31:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:37: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273270>, 0x0, True) , Command count = 4051 ] 
11:31:37: [GO18_globalSetVolt]### Host voltage value is set.
11:31:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x062730C0>, 0x0, False) , Command count = 4052 ] 
11:31:37: [GO18_globalSetVolt]### Host voltage value is set.
11:31:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4053 ] 
11:31:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4054 ] 
11:31:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4055 ] 
11:31:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A600>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 4056 ] 
11:31:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x0626D5A0>) , Command count = 4057 ] 
11:31:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:37: [ SetCardRCA(0x1, 0xD555) , Command count = 4058 ] 
11:31:37: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:37: Host Frequency set to 25000 KHz
11:31:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:37: ####CSD Registe 2.0 Values####
11:31:37: CSD_STRUCTURE                                 :0x1
11:31:37: Reserv1                                       :0x0
11:31:37: Time Access 1 TAAC                            :0xe
11:31:37: Time Access 2 NSAC*100                        :0x0
11:31:37: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:37: Card Command Classess CCC                     :0x5b5
11:31:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:37: DSR(driver stage register)  DSR_IMP           :0x0
11:31:37: Reserv2                                       :0x0
11:31:37: Device Size C_SIZE                            :0xedc8
11:31:37: Reserv3                                       :0x0
11:31:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:37: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:37: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:37: Reserv4                                       :0x0
11:31:37: Write Speed Factor R2W_FACTOR                 :0x2
11:31:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:37: FILE_FORMAT_GRP                               :0x0
11:31:37: COPY flag                                     :0x1
11:31:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:37: File_Format                                   :0x0
11:31:37: CRC                                           :0x0
11:31:37: ####CSD Registe Values####  

11:31:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:37: [GetSCRRegisterEntry] Passed
11:31:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:37: Data_Status_After Erases          : 0
11:31:37: CPRM Security Support             : No Security
11:31:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:37: Spec. Version                     : Version 3.0X
11:31:37: Extended Security Support         : Extended_Security_Not_Supported
11:31:37: Command Support                   : COMMAND_SUPPORT
11:31:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC00>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 4059 ] 
11:31:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273060>, <py_sfcl.CommandDataDefinition object at 0x0626DD20>) , Command count = 4060 ] 
11:31:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:37: [ SetBusWidth(0x4) , Command count = 4061 ] 
11:31:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4062 ] 
11:31:37: Protected Area Size 0x28000
11:31:37: Bus Width           2
11:31:38: Secure Mode         0
11:31:38: Speed  Class        4
11:31:38: Perf Move           0
11:31:38: Au Size             9
11:31:38: Erase Size          15
11:31:38: Erase Timeout       1
11:31:38: Erase offset        1
11:31:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4063 ] 
11:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:38: Host Frequency set to 100000 KHz
11:31:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:38: ####CSD Registe 2.0 Values####
11:31:38: CSD_STRUCTURE                                 :0x1
11:31:38: Reserv1                                       :0x0
11:31:38: Time Access 1 TAAC                            :0xe
11:31:38: Time Access 2 NSAC*100                        :0x0
11:31:38: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:38: Card Command Classess CCC                     :0x5b5
11:31:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:38: DSR(driver stage register)  DSR_IMP           :0x0
11:31:38: Reserv2                                       :0x0
11:31:38: Device Size C_SIZE                            :0xedc8
11:31:38: Reserv3                                       :0x0
11:31:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:38: Reserv4                                       :0x0
11:31:38: Write Speed Factor R2W_FACTOR                 :0x2
11:31:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:38: FILE_FORMAT_GRP                               :0x0
11:31:38: COPY flag                                     :0x1
11:31:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:38: File_Format                                   :0x0
11:31:38: CRC                                           :0x0
11:31:38: ####CSD Registe Values####  

11:31:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D0C0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 4064 ] 
11:31:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x062768A0>) , Command count = 4065 ] 
11:31:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06276D50>, <None>, <py_sfcl.Command23 object at 0x06276360>) , Command count = 4066 ] 
11:31:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:39: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:41: Host Frequency set to 25000 KHz
11:31:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:41: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C90>, 0x0, True) , Command count = 4067 ] 
11:31:41: [GO18_globalSetVolt]### Host voltage value is set.
11:31:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273540>, 0x0, False) , Command count = 4068 ] 
11:31:41: [GO18_globalSetVolt]### Host voltage value is set.
11:31:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4069 ] 
11:31:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4070 ] 
11:31:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4071 ] 
11:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A2D0>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 4072 ] 
11:31:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269EA0>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 4073 ] 
11:31:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:42: [ SetCardRCA(0x1, 0xD555) , Command count = 4074 ] 
11:31:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:42: Host Frequency set to 25000 KHz
11:31:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:42: ####CSD Registe 2.0 Values####
11:31:42: CSD_STRUCTURE                                 :0x1
11:31:42: Reserv1                                       :0x0
11:31:42: Time Access 1 TAAC                            :0xe
11:31:42: Time Access 2 NSAC*100                        :0x0
11:31:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:42: Card Command Classess CCC                     :0x5b5
11:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:42: DSR(driver stage register)  DSR_IMP           :0x0
11:31:42: Reserv2                                       :0x0
11:31:42: Device Size C_SIZE                            :0xedc8
11:31:42: Reserv3                                       :0x0
11:31:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:42: Reserv4                                       :0x0
11:31:42: Write Speed Factor R2W_FACTOR                 :0x2
11:31:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:42: FILE_FORMAT_GRP                               :0x0
11:31:42: COPY flag                                     :0x1
11:31:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:42: File_Format                                   :0x0
11:31:42: CRC                                           :0x0
11:31:42: ####CSD Registe Values####  

11:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:42: [GetSCRRegisterEntry] Passed
11:31:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:42: Data_Status_After Erases          : 0
11:31:42: CPRM Security Support             : No Security
11:31:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:42: Spec. Version                     : Version 3.0X
11:31:42: Extended Security Support         : Extended_Security_Not_Supported
11:31:42: Command Support                   : COMMAND_SUPPORT
11:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x0626DDE0>) , Command count = 4075 ] 
11:31:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D360>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 4076 ] 
11:31:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:42: [ SetBusWidth(0x4) , Command count = 4077 ] 
11:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4078 ] 
11:31:42: Protected Area Size 0x28000
11:31:42: Bus Width           2
11:31:42: Secure Mode         0
11:31:42: Speed  Class        4
11:31:42: Perf Move           0
11:31:42: Au Size             9
11:31:42: Erase Size          15
11:31:42: Erase Timeout       1
11:31:42: Erase offset        1
11:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4079 ] 
11:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:42: Host Frequency set to 100000 KHz
11:31:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:42: ####CSD Registe 2.0 Values####
11:31:42: CSD_STRUCTURE                                 :0x1
11:31:42: Reserv1                                       :0x0
11:31:42: Time Access 1 TAAC                            :0xe
11:31:42: Time Access 2 NSAC*100                        :0x0
11:31:42: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:42: Card Command Classess CCC                     :0x5b5
11:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:42: DSR(driver stage register)  DSR_IMP           :0x0
11:31:42: Reserv2                                       :0x0
11:31:42: Device Size C_SIZE                            :0xedc8
11:31:42: Reserv3                                       :0x0
11:31:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:43: Reserv4                                       :0x0
11:31:43: Write Speed Factor R2W_FACTOR                 :0x2
11:31:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:43: FILE_FORMAT_GRP                               :0x0
11:31:43: COPY flag                                     :0x1
11:31:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:43: File_Format                                   :0x0
11:31:43: CRC                                           :0x0
11:31:43: ####CSD Registe Values####  

11:31:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273990>, <py_sfcl.CommandDataDefinition object at 0x06276990>) , Command count = 4080 ] 
11:31:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DC90>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 4081 ] 
11:31:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276450>, <py_sfcl.PySEnhancedCmdData object at 0x062761B0>, <None>, <py_sfcl.Command23 object at 0x062768D0>) , Command count = 4082 ] 
11:31:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:43: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:46: Host Frequency set to 25000 KHz
11:31:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:46: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276750>, 0x0, True) , Command count = 4083 ] 
11:31:46: [GO18_globalSetVolt]### Host voltage value is set.
11:31:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276EA0>, 0x0, False) , Command count = 4084 ] 
11:31:46: [GO18_globalSetVolt]### Host voltage value is set.
11:31:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4085 ] 
11:31:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4086 ] 
11:31:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4087 ] 
11:31:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x06276900>) , Command count = 4088 ] 
11:31:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x06276ED0>) , Command count = 4089 ] 
11:31:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:46: [ SetCardRCA(0x1, 0xD555) , Command count = 4090 ] 
11:31:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:46: Host Frequency set to 25000 KHz
11:31:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:46: ####CSD Registe 2.0 Values####
11:31:46: CSD_STRUCTURE                                 :0x1
11:31:46: Reserv1                                       :0x0
11:31:46: Time Access 1 TAAC                            :0xe
11:31:46: Time Access 2 NSAC*100                        :0x0
11:31:46: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:46: Card Command Classess CCC                     :0x5b5
11:31:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:46: DSR(driver stage register)  DSR_IMP           :0x0
11:31:46: Reserv2                                       :0x0
11:31:46: Device Size C_SIZE                            :0xedc8
11:31:46: Reserv3                                       :0x0
11:31:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:46: Reserv4                                       :0x0
11:31:46: Write Speed Factor R2W_FACTOR                 :0x2
11:31:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:46: FILE_FORMAT_GRP                               :0x0
11:31:46: COPY flag                                     :0x1
11:31:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:46: File_Format                                   :0x0
11:31:46: CRC                                           :0x0
11:31:46: ####CSD Registe Values####  

11:31:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:46: [GetSCRRegisterEntry] Passed
11:31:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:46: Data_Status_After Erases          : 0
11:31:46: CPRM Security Support             : No Security
11:31:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:46: Spec. Version                     : Version 3.0X
11:31:46: Extended Security Support         : Extended_Security_Not_Supported
11:31:46: Command Support                   : COMMAND_SUPPORT
11:31:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06276E40>) , Command count = 4091 ] 
11:31:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 4092 ] 
11:31:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:46: [ SetBusWidth(0x4) , Command count = 4093 ] 
11:31:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4094 ] 
11:31:46: Protected Area Size 0x28000
11:31:46: Bus Width           2
11:31:46: Secure Mode         0
11:31:46: Speed  Class        4
11:31:46: Perf Move           0
11:31:46: Au Size             9
11:31:46: Erase Size          15
11:31:46: Erase Timeout       1
11:31:46: Erase offset        1
11:31:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4095 ] 
11:31:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:46: Host Frequency set to 100000 KHz
11:31:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:47: ####CSD Registe 2.0 Values####
11:31:47: CSD_STRUCTURE                                 :0x1
11:31:47: Reserv1                                       :0x0
11:31:47: Time Access 1 TAAC                            :0xe
11:31:47: Time Access 2 NSAC*100                        :0x0
11:31:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:47: Card Command Classess CCC                     :0x5b5
11:31:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:47: DSR(driver stage register)  DSR_IMP           :0x0
11:31:47: Reserv2                                       :0x0
11:31:47: Device Size C_SIZE                            :0xedc8
11:31:47: Reserv3                                       :0x0
11:31:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:47: Reserv4                                       :0x0
11:31:47: Write Speed Factor R2W_FACTOR                 :0x2
11:31:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:47: FILE_FORMAT_GRP                               :0x0
11:31:47: COPY flag                                     :0x1
11:31:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:47: File_Format                                   :0x0
11:31:47: CRC                                           :0x0
11:31:47: ####CSD Registe Values####  

11:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x0627A6C0>) , Command count = 4096 ] 
11:31:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD20>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 4097 ] 
11:31:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273810>, <py_sfcl.PySEnhancedCmdData object at 0x062737E0>, <None>, <py_sfcl.Command23 object at 0x062762D0>) , Command count = 4098 ] 
11:31:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:48: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:50: Host Frequency set to 25000 KHz
11:31:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:50: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DF30>, 0x0, True) , Command count = 4099 ] 
11:31:50: [GO18_globalSetVolt]### Host voltage value is set.
11:31:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x053977E0>, 0x0, False) , Command count = 4100 ] 
11:31:50: [GO18_globalSetVolt]### Host voltage value is set.
11:31:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4101 ] 
11:31:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4102 ] 
11:31:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4103 ] 
11:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D090>, <py_sfcl.CommandDataDefinition object at 0x06276600>) , Command count = 4104 ] 
11:31:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268870>, <py_sfcl.CommandDataDefinition object at 0x0627A090>) , Command count = 4105 ] 
11:31:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:50: [ SetCardRCA(0x1, 0xD555) , Command count = 4106 ] 
11:31:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:50: Host Frequency set to 25000 KHz
11:31:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:50: ####CSD Registe 2.0 Values####
11:31:50: CSD_STRUCTURE                                 :0x1
11:31:50: Reserv1                                       :0x0
11:31:50: Time Access 1 TAAC                            :0xe
11:31:50: Time Access 2 NSAC*100                        :0x0
11:31:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:50: Card Command Classess CCC                     :0x5b5
11:31:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:50: DSR(driver stage register)  DSR_IMP           :0x0
11:31:50: Reserv2                                       :0x0
11:31:50: Device Size C_SIZE                            :0xedc8
11:31:50: Reserv3                                       :0x0
11:31:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:50: Reserv4                                       :0x0
11:31:50: Write Speed Factor R2W_FACTOR                 :0x2
11:31:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:50: FILE_FORMAT_GRP                               :0x0
11:31:50: COPY flag                                     :0x1
11:31:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:50: File_Format                                   :0x0
11:31:50: CRC                                           :0x0
11:31:50: ####CSD Registe Values####  

11:31:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:50: [GetSCRRegisterEntry] Passed
11:31:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:50: Data_Status_After Erases          : 0
11:31:50: CPRM Security Support             : No Security
11:31:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:50: Spec. Version                     : Version 3.0X
11:31:50: Extended Security Support         : Extended_Security_Not_Supported
11:31:50: Command Support                   : COMMAND_SUPPORT
11:31:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 4107 ] 
11:31:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x0627DED0>) , Command count = 4108 ] 
11:31:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:50: [ SetBusWidth(0x4) , Command count = 4109 ] 
11:31:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4110 ] 
11:31:50: Protected Area Size 0x28000
11:31:50: Bus Width           2
11:31:50: Secure Mode         0
11:31:50: Speed  Class        4
11:31:50: Perf Move           0
11:31:50: Au Size             9
11:31:50: Erase Size          15
11:31:50: Erase Timeout       1
11:31:50: Erase offset        1
11:31:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4111 ] 
11:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:51: Host Frequency set to 100000 KHz
11:31:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:51: ####CSD Registe 2.0 Values####
11:31:51: CSD_STRUCTURE                                 :0x1
11:31:51: Reserv1                                       :0x0
11:31:51: Time Access 1 TAAC                            :0xe
11:31:51: Time Access 2 NSAC*100                        :0x0
11:31:51: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:51: Card Command Classess CCC                     :0x5b5
11:31:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:51: DSR(driver stage register)  DSR_IMP           :0x0
11:31:51: Reserv2                                       :0x0
11:31:51: Device Size C_SIZE                            :0xedc8
11:31:51: Reserv3                                       :0x0
11:31:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:51: Reserv4                                       :0x0
11:31:51: Write Speed Factor R2W_FACTOR                 :0x2
11:31:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:51: FILE_FORMAT_GRP                               :0x0
11:31:51: COPY flag                                     :0x1
11:31:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:51: File_Format                                   :0x0
11:31:51: CRC                                           :0x0
11:31:51: ####CSD Registe Values####  

11:31:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A570>, <py_sfcl.CommandDataDefinition object at 0x0627A180>) , Command count = 4112 ] 
11:31:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216B40>, <py_sfcl.CommandDataDefinition object at 0x06276BD0>) , Command count = 4113 ] 
11:31:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D270>, <py_sfcl.PySEnhancedCmdData object at 0x0626D6F0>, <None>, <py_sfcl.Command23 object at 0x06273510>) , Command count = 4114 ] 
11:31:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:54: Host Frequency set to 25000 KHz
11:31:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DC30>, 0x0, True) , Command count = 4115 ] 
11:31:54: [GO18_globalSetVolt]### Host voltage value is set.
11:31:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D900>, 0x0, False) , Command count = 4116 ] 
11:31:54: [GO18_globalSetVolt]### Host voltage value is set.
11:31:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4117 ] 
11:31:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4118 ] 
11:31:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4119 ] 
11:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 4120 ] 
11:31:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF240>, <py_sfcl.CommandDataDefinition object at 0x06276120>) , Command count = 4121 ] 
11:31:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4122 ] 
11:31:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:55: Host Frequency set to 25000 KHz
11:31:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:55: ####CSD Registe 2.0 Values####
11:31:55: CSD_STRUCTURE                                 :0x1
11:31:55: Reserv1                                       :0x0
11:31:55: Time Access 1 TAAC                            :0xe
11:31:55: Time Access 2 NSAC*100                        :0x0
11:31:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:55: Card Command Classess CCC                     :0x5b5
11:31:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:55: DSR(driver stage register)  DSR_IMP           :0x0
11:31:55: Reserv2                                       :0x0
11:31:55: Device Size C_SIZE                            :0xedc8
11:31:55: Reserv3                                       :0x0
11:31:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:55: Reserv4                                       :0x0
11:31:55: Write Speed Factor R2W_FACTOR                 :0x2
11:31:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:55: FILE_FORMAT_GRP                               :0x0
11:31:55: COPY flag                                     :0x1
11:31:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:55: File_Format                                   :0x0
11:31:55: CRC                                           :0x0
11:31:55: ####CSD Registe Values####  

11:31:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:55: [GetSCRRegisterEntry] Passed
11:31:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:55: Data_Status_After Erases          : 0
11:31:55: CPRM Security Support             : No Security
11:31:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:55: Spec. Version                     : Version 3.0X
11:31:55: Extended Security Support         : Extended_Security_Not_Supported
11:31:55: Command Support                   : COMMAND_SUPPORT
11:31:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C90>, <py_sfcl.CommandDataDefinition object at 0x054019C0>) , Command count = 4123 ] 
11:31:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0626D240>) , Command count = 4124 ] 
11:31:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:55: [ SetBusWidth(0x4) , Command count = 4125 ] 
11:31:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4126 ] 
11:31:55: Protected Area Size 0x28000
11:31:55: Bus Width           2
11:31:55: Secure Mode         0
11:31:55: Speed  Class        4
11:31:55: Perf Move           0
11:31:55: Au Size             9
11:31:55: Erase Size          15
11:31:55: Erase Timeout       1
11:31:55: Erase offset        1
11:31:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4127 ] 
11:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:55: Host Frequency set to 100000 KHz
11:31:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:55: ####CSD Registe 2.0 Values####
11:31:55: CSD_STRUCTURE                                 :0x1
11:31:55: Reserv1                                       :0x0
11:31:55: Time Access 1 TAAC                            :0xe
11:31:55: Time Access 2 NSAC*100                        :0x0
11:31:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:31:55: Card Command Classess CCC                     :0x5b5
11:31:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:55: DSR(driver stage register)  DSR_IMP           :0x0
11:31:55: Reserv2                                       :0x0
11:31:55: Device Size C_SIZE                            :0xedc8
11:31:55: Reserv3                                       :0x0
11:31:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:56: Reserv4                                       :0x0
11:31:56: Write Speed Factor R2W_FACTOR                 :0x2
11:31:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:56: FILE_FORMAT_GRP                               :0x0
11:31:56: COPY flag                                     :0x1
11:31:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:56: File_Format                                   :0x0
11:31:56: CRC                                           :0x0
11:31:56: ####CSD Registe Values####  

11:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF90>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 4128 ] 
11:31:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB4E0>, <py_sfcl.CommandDataDefinition object at 0x0627A5D0>) , Command count = 4129 ] 
11:31:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:31:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:31:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:31:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:31:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A780>, <py_sfcl.PySEnhancedCmdData object at 0x0627A4B0>, <None>, <py_sfcl.Command23 object at 0x0626D150>) , Command count = 4130 ] 
11:31:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:31:56: [GO4_globalInitCard]### Switch to Specify Card Type
11:31:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:59: Host Frequency set to 25000 KHz
11:31:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:31:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:31:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x053DB4B0>, 0x0, True) , Command count = 4131 ] 
11:31:59: [GO18_globalSetVolt]### Host voltage value is set.
11:31:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:31:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D930>, 0x0, False) , Command count = 4132 ] 
11:31:59: [GO18_globalSetVolt]### Host voltage value is set.
11:31:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4133 ] 
11:31:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:31:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4134 ] 
11:31:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:31:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:31:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:31:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:31:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:31:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4135 ] 
11:31:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:31:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x0627A9C0>) , Command count = 4136 ] 
11:31:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401C60>, <py_sfcl.CommandDataDefinition object at 0x06269FC0>) , Command count = 4137 ] 
11:31:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:31:59: [ SetCardRCA(0x1, 0xD555) , Command count = 4138 ] 
11:31:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:31:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:31:59: Host Frequency set to 25000 KHz
11:31:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:31:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:31:59: ####CSD Registe 2.0 Values####
11:31:59: CSD_STRUCTURE                                 :0x1
11:31:59: Reserv1                                       :0x0
11:31:59: Time Access 1 TAAC                            :0xe
11:31:59: Time Access 2 NSAC*100                        :0x0
11:31:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:31:59: Card Command Classess CCC                     :0x5b5
11:31:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:31:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:31:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:31:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:31:59: DSR(driver stage register)  DSR_IMP           :0x0
11:31:59: Reserv2                                       :0x0
11:31:59: Device Size C_SIZE                            :0xedc8
11:31:59: Reserv3                                       :0x0
11:31:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:31:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:31:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:31:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:31:59: Reserv4                                       :0x0
11:31:59: Write Speed Factor R2W_FACTOR                 :0x2
11:31:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:31:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:31:59: FILE_FORMAT_GRP                               :0x0
11:31:59: COPY flag                                     :0x1
11:31:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:31:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:31:59: File_Format                                   :0x0
11:31:59: CRC                                           :0x0
11:31:59: ####CSD Registe Values####  

11:31:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:31:59: [GetSCRRegisterEntry] Passed
11:31:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:31:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:31:59: Data_Status_After Erases          : 0
11:31:59: CPRM Security Support             : No Security
11:31:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:31:59: Spec. Version                     : Version 3.0X
11:31:59: Extended Security Support         : Extended_Security_Not_Supported
11:31:59: Command Support                   : COMMAND_SUPPORT
11:31:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B70>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 4139 ] 
11:31:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062685D0>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 4140 ] 
11:31:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:31:59: [ SetBusWidth(0x4) , Command count = 4141 ] 
11:31:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:31:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ADB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4142 ] 
11:31:59: Protected Area Size 0x28000
11:31:59: Bus Width           2
11:31:59: Secure Mode         0
11:31:59: Speed  Class        4
11:31:59: Perf Move           0
11:31:59: Au Size             9
11:31:59: Erase Size          15
11:31:59: Erase Timeout       1
11:31:59: Erase offset        1
11:31:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:31:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:31:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4143 ] 
11:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:31:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:31:59: Host Frequency set to 100000 KHz
11:31:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:31:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:00: ####CSD Registe 2.0 Values####
11:32:00: CSD_STRUCTURE                                 :0x1
11:32:00: Reserv1                                       :0x0
11:32:00: Time Access 1 TAAC                            :0xe
11:32:00: Time Access 2 NSAC*100                        :0x0
11:32:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:00: Card Command Classess CCC                     :0x5b5
11:32:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:00: DSR(driver stage register)  DSR_IMP           :0x0
11:32:00: Reserv2                                       :0x0
11:32:00: Device Size C_SIZE                            :0xedc8
11:32:00: Reserv3                                       :0x0
11:32:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:00: Reserv4                                       :0x0
11:32:00: Write Speed Factor R2W_FACTOR                 :0x2
11:32:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:00: FILE_FORMAT_GRP                               :0x0
11:32:00: COPY flag                                     :0x1
11:32:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:00: File_Format                                   :0x0
11:32:00: CRC                                           :0x0
11:32:00: ####CSD Registe Values####  

11:32:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627AF60>) , Command count = 4144 ] 
11:32:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269450>, <py_sfcl.CommandDataDefinition object at 0x0627DEA0>) , Command count = 4145 ] 
11:32:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D030>, <py_sfcl.PySEnhancedCmdData object at 0x062168D0>, <None>, <py_sfcl.Command23 object at 0x0627A930>) , Command count = 4146 ] 
11:32:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:01: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:03: Host Frequency set to 25000 KHz
11:32:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:03: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DAE0>, 0x0, True) , Command count = 4147 ] 
11:32:03: [GO18_globalSetVolt]### Host voltage value is set.
11:32:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216990>, 0x0, False) , Command count = 4148 ] 
11:32:03: [GO18_globalSetVolt]### Host voltage value is set.
11:32:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4149 ] 
11:32:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4150 ] 
11:32:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4151 ] 
11:32:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627ACC0>) , Command count = 4152 ] 
11:32:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x0627AED0>) , Command count = 4153 ] 
11:32:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4154 ] 
11:32:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:03: Host Frequency set to 25000 KHz
11:32:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:03: ####CSD Registe 2.0 Values####
11:32:03: CSD_STRUCTURE                                 :0x1
11:32:03: Reserv1                                       :0x0
11:32:03: Time Access 1 TAAC                            :0xe
11:32:03: Time Access 2 NSAC*100                        :0x0
11:32:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:03: Card Command Classess CCC                     :0x5b5
11:32:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:03: DSR(driver stage register)  DSR_IMP           :0x0
11:32:03: Reserv2                                       :0x0
11:32:03: Device Size C_SIZE                            :0xedc8
11:32:03: Reserv3                                       :0x0
11:32:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:03: Reserv4                                       :0x0
11:32:03: Write Speed Factor R2W_FACTOR                 :0x2
11:32:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:03: FILE_FORMAT_GRP                               :0x0
11:32:03: COPY flag                                     :0x1
11:32:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:03: File_Format                                   :0x0
11:32:03: CRC                                           :0x0
11:32:03: ####CSD Registe Values####  

11:32:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:03: [GetSCRRegisterEntry] Passed
11:32:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:03: Data_Status_After Erases          : 0
11:32:03: CPRM Security Support             : No Security
11:32:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:03: Spec. Version                     : Version 3.0X
11:32:03: Extended Security Support         : Extended_Security_Not_Supported
11:32:03: Command Support                   : COMMAND_SUPPORT
11:32:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F00>, <py_sfcl.CommandDataDefinition object at 0x0627D210>) , Command count = 4155 ] 
11:32:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x06216E10>) , Command count = 4156 ] 
11:32:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:03: [ SetBusWidth(0x4) , Command count = 4157 ] 
11:32:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4158 ] 
11:32:03: Protected Area Size 0x28000
11:32:03: Bus Width           2
11:32:03: Secure Mode         0
11:32:03: Speed  Class        4
11:32:03: Perf Move           0
11:32:03: Au Size             9
11:32:03: Erase Size          15
11:32:03: Erase Timeout       1
11:32:03: Erase offset        1
11:32:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4159 ] 
11:32:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:04: Host Frequency set to 100000 KHz
11:32:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:04: ####CSD Registe 2.0 Values####
11:32:04: CSD_STRUCTURE                                 :0x1
11:32:04: Reserv1                                       :0x0
11:32:04: Time Access 1 TAAC                            :0xe
11:32:04: Time Access 2 NSAC*100                        :0x0
11:32:04: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:04: Card Command Classess CCC                     :0x5b5
11:32:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:04: DSR(driver stage register)  DSR_IMP           :0x0
11:32:04: Reserv2                                       :0x0
11:32:04: Device Size C_SIZE                            :0xedc8
11:32:04: Reserv3                                       :0x0
11:32:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:04: Reserv4                                       :0x0
11:32:04: Write Speed Factor R2W_FACTOR                 :0x2
11:32:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:04: FILE_FORMAT_GRP                               :0x0
11:32:04: COPY flag                                     :0x1
11:32:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:04: File_Format                                   :0x0
11:32:04: CRC                                           :0x0
11:32:04: ####CSD Registe Values####  

11:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D5D0>, <py_sfcl.CommandDataDefinition object at 0x061AF660>) , Command count = 4160 ] 
11:32:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A4E0>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 4161 ] 
11:32:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680C0>, <py_sfcl.PySEnhancedCmdData object at 0x06268960>, <None>, <py_sfcl.Command23 object at 0x06216A20>) , Command count = 4162 ] 
11:32:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:07: Host Frequency set to 25000 KHz
11:32:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627ABA0>, 0x0, True) , Command count = 4163 ] 
11:32:07: [GO18_globalSetVolt]### Host voltage value is set.
11:32:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268A20>, 0x0, False) , Command count = 4164 ] 
11:32:07: [GO18_globalSetVolt]### Host voltage value is set.
11:32:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4165 ] 
11:32:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4166 ] 
11:32:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4167 ] 
11:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C60>, <py_sfcl.CommandDataDefinition object at 0x06268090>) , Command count = 4168 ] 
11:32:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF4E0>, <py_sfcl.CommandDataDefinition object at 0x0627AF90>) , Command count = 4169 ] 
11:32:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4170 ] 
11:32:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:08: Host Frequency set to 25000 KHz
11:32:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:08: ####CSD Registe 2.0 Values####
11:32:08: CSD_STRUCTURE                                 :0x1
11:32:08: Reserv1                                       :0x0
11:32:08: Time Access 1 TAAC                            :0xe
11:32:08: Time Access 2 NSAC*100                        :0x0
11:32:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:08: Card Command Classess CCC                     :0x5b5
11:32:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:08: DSR(driver stage register)  DSR_IMP           :0x0
11:32:08: Reserv2                                       :0x0
11:32:08: Device Size C_SIZE                            :0xedc8
11:32:08: Reserv3                                       :0x0
11:32:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:08: Reserv4                                       :0x0
11:32:08: Write Speed Factor R2W_FACTOR                 :0x2
11:32:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:08: FILE_FORMAT_GRP                               :0x0
11:32:08: COPY flag                                     :0x1
11:32:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:08: File_Format                                   :0x0
11:32:08: CRC                                           :0x0
11:32:08: ####CSD Registe Values####  

11:32:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:08: [GetSCRRegisterEntry] Passed
11:32:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:08: Data_Status_After Erases          : 0
11:32:08: CPRM Security Support             : No Security
11:32:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:08: Spec. Version                     : Version 3.0X
11:32:08: Extended Security Support         : Extended_Security_Not_Supported
11:32:08: Command Support                   : COMMAND_SUPPORT
11:32:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x062165D0>) , Command count = 4171 ] 
11:32:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x062734B0>) , Command count = 4172 ] 
11:32:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:08: [ SetBusWidth(0x4) , Command count = 4173 ] 
11:32:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4174 ] 
11:32:08: Protected Area Size 0x28000
11:32:08: Bus Width           2
11:32:08: Secure Mode         0
11:32:08: Speed  Class        4
11:32:08: Perf Move           0
11:32:08: Au Size             9
11:32:08: Erase Size          15
11:32:08: Erase Timeout       1
11:32:08: Erase offset        1
11:32:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4175 ] 
11:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:08: Host Frequency set to 100000 KHz
11:32:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:08: ####CSD Registe 2.0 Values####
11:32:08: CSD_STRUCTURE                                 :0x1
11:32:08: Reserv1                                       :0x0
11:32:08: Time Access 1 TAAC                            :0xe
11:32:08: Time Access 2 NSAC*100                        :0x0
11:32:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:08: Card Command Classess CCC                     :0x5b5
11:32:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:08: DSR(driver stage register)  DSR_IMP           :0x0
11:32:08: Reserv2                                       :0x0
11:32:08: Device Size C_SIZE                            :0xedc8
11:32:08: Reserv3                                       :0x0
11:32:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:09: Reserv4                                       :0x0
11:32:09: Write Speed Factor R2W_FACTOR                 :0x2
11:32:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:09: FILE_FORMAT_GRP                               :0x0
11:32:09: COPY flag                                     :0x1
11:32:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:09: File_Format                                   :0x0
11:32:09: CRC                                           :0x0
11:32:09: ####CSD Registe Values####  

11:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276390>, <py_sfcl.CommandDataDefinition object at 0x06216510>) , Command count = 4176 ] 
11:32:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AF00>, <py_sfcl.CommandDataDefinition object at 0x0627D540>) , Command count = 4177 ] 
11:32:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC30>, <py_sfcl.PySEnhancedCmdData object at 0x0627D450>, <None>, <py_sfcl.Command23 object at 0x062683F0>) , Command count = 4178 ] 
11:32:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:12: Host Frequency set to 25000 KHz
11:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269180>, 0x0, True) , Command count = 4179 ] 
11:32:12: [GO18_globalSetVolt]### Host voltage value is set.
11:32:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276480>, 0x0, False) , Command count = 4180 ] 
11:32:12: [GO18_globalSetVolt]### Host voltage value is set.
11:32:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4181 ] 
11:32:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4182 ] 
11:32:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4183 ] 
11:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273090>, <py_sfcl.CommandDataDefinition object at 0x0626D8A0>) , Command count = 4184 ] 
11:32:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216570>, <py_sfcl.CommandDataDefinition object at 0x0627A960>) , Command count = 4185 ] 
11:32:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:12: [ SetCardRCA(0x1, 0xD555) , Command count = 4186 ] 
11:32:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:12: Host Frequency set to 25000 KHz
11:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:12: ####CSD Registe 2.0 Values####
11:32:12: CSD_STRUCTURE                                 :0x1
11:32:12: Reserv1                                       :0x0
11:32:12: Time Access 1 TAAC                            :0xe
11:32:12: Time Access 2 NSAC*100                        :0x0
11:32:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:12: Card Command Classess CCC                     :0x5b5
11:32:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:12: DSR(driver stage register)  DSR_IMP           :0x0
11:32:12: Reserv2                                       :0x0
11:32:12: Device Size C_SIZE                            :0xedc8
11:32:12: Reserv3                                       :0x0
11:32:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:12: Reserv4                                       :0x0
11:32:12: Write Speed Factor R2W_FACTOR                 :0x2
11:32:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:12: FILE_FORMAT_GRP                               :0x0
11:32:12: COPY flag                                     :0x1
11:32:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:12: File_Format                                   :0x0
11:32:12: CRC                                           :0x0
11:32:12: ####CSD Registe Values####  

11:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:12: [GetSCRRegisterEntry] Passed
11:32:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:12: Data_Status_After Erases          : 0
11:32:12: CPRM Security Support             : No Security
11:32:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:12: Spec. Version                     : Version 3.0X
11:32:12: Extended Security Support         : Extended_Security_Not_Supported
11:32:12: Command Support                   : COMMAND_SUPPORT
11:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062680F0>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 4187 ] 
11:32:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268E10>, <py_sfcl.CommandDataDefinition object at 0x062688D0>) , Command count = 4188 ] 
11:32:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:12: [ SetBusWidth(0x4) , Command count = 4189 ] 
11:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4190 ] 
11:32:12: Protected Area Size 0x28000
11:32:12: Bus Width           2
11:32:12: Secure Mode         0
11:32:12: Speed  Class        4
11:32:12: Perf Move           0
11:32:12: Au Size             9
11:32:12: Erase Size          15
11:32:12: Erase Timeout       1
11:32:12: Erase offset        1
11:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4191 ] 
11:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:12: Host Frequency set to 100000 KHz
11:32:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:13: ####CSD Registe 2.0 Values####
11:32:13: CSD_STRUCTURE                                 :0x1
11:32:13: Reserv1                                       :0x0
11:32:13: Time Access 1 TAAC                            :0xe
11:32:13: Time Access 2 NSAC*100                        :0x0
11:32:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:13: Card Command Classess CCC                     :0x5b5
11:32:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:13: DSR(driver stage register)  DSR_IMP           :0x0
11:32:13: Reserv2                                       :0x0
11:32:13: Device Size C_SIZE                            :0xedc8
11:32:13: Reserv3                                       :0x0
11:32:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:13: Reserv4                                       :0x0
11:32:13: Write Speed Factor R2W_FACTOR                 :0x2
11:32:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:13: FILE_FORMAT_GRP                               :0x0
11:32:13: COPY flag                                     :0x1
11:32:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:13: File_Format                                   :0x0
11:32:13: CRC                                           :0x0
11:32:13: ####CSD Registe Values####  

11:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273960>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 4192 ] 
11:32:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CC0>, <py_sfcl.CommandDataDefinition object at 0x0627AE70>) , Command count = 4193 ] 
11:32:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D690>, <py_sfcl.PySEnhancedCmdData object at 0x0627D660>, <None>, <py_sfcl.Command23 object at 0x0627D720>) , Command count = 4194 ] 
11:32:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:14: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:16: Host Frequency set to 25000 KHz
11:32:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:16: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269CC0>, 0x0, True) , Command count = 4195 ] 
11:32:16: [GO18_globalSetVolt]### Host voltage value is set.
11:32:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x062764B0>, 0x0, False) , Command count = 4196 ] 
11:32:16: [GO18_globalSetVolt]### Host voltage value is set.
11:32:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4197 ] 
11:32:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4198 ] 
11:32:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4199 ] 
11:32:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216810>, <py_sfcl.CommandDataDefinition object at 0x0627D7E0>) , Command count = 4200 ] 
11:32:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF60>, <py_sfcl.CommandDataDefinition object at 0x0626DF60>) , Command count = 4201 ] 
11:32:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:16: [ SetCardRCA(0x1, 0xD555) , Command count = 4202 ] 
11:32:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:16: Host Frequency set to 25000 KHz
11:32:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:16: ####CSD Registe 2.0 Values####
11:32:16: CSD_STRUCTURE                                 :0x1
11:32:16: Reserv1                                       :0x0
11:32:16: Time Access 1 TAAC                            :0xe
11:32:16: Time Access 2 NSAC*100                        :0x0
11:32:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:16: Card Command Classess CCC                     :0x5b5
11:32:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:16: DSR(driver stage register)  DSR_IMP           :0x0
11:32:16: Reserv2                                       :0x0
11:32:16: Device Size C_SIZE                            :0xedc8
11:32:16: Reserv3                                       :0x0
11:32:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:16: Reserv4                                       :0x0
11:32:16: Write Speed Factor R2W_FACTOR                 :0x2
11:32:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:16: FILE_FORMAT_GRP                               :0x0
11:32:16: COPY flag                                     :0x1
11:32:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:16: File_Format                                   :0x0
11:32:16: CRC                                           :0x0
11:32:16: ####CSD Registe Values####  

11:32:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:16: [GetSCRRegisterEntry] Passed
11:32:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:16: Data_Status_After Erases          : 0
11:32:16: CPRM Security Support             : No Security
11:32:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:16: Spec. Version                     : Version 3.0X
11:32:16: Extended Security Support         : Extended_Security_Not_Supported
11:32:16: Command Support                   : COMMAND_SUPPORT
11:32:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062169C0>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 4203 ] 
11:32:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268060>, <py_sfcl.CommandDataDefinition object at 0x06268750>) , Command count = 4204 ] 
11:32:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:16: [ SetBusWidth(0x4) , Command count = 4205 ] 
11:32:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4206 ] 
11:32:17: Protected Area Size 0x28000
11:32:17: Bus Width           2
11:32:17: Secure Mode         0
11:32:17: Speed  Class        4
11:32:17: Perf Move           0
11:32:17: Au Size             9
11:32:17: Erase Size          15
11:32:17: Erase Timeout       1
11:32:17: Erase offset        1
11:32:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4207 ] 
11:32:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:17: Host Frequency set to 100000 KHz
11:32:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:17: ####CSD Registe 2.0 Values####
11:32:17: CSD_STRUCTURE                                 :0x1
11:32:17: Reserv1                                       :0x0
11:32:17: Time Access 1 TAAC                            :0xe
11:32:17: Time Access 2 NSAC*100                        :0x0
11:32:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:17: Card Command Classess CCC                     :0x5b5
11:32:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:17: DSR(driver stage register)  DSR_IMP           :0x0
11:32:17: Reserv2                                       :0x0
11:32:17: Device Size C_SIZE                            :0xedc8
11:32:17: Reserv3                                       :0x0
11:32:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:17: Reserv4                                       :0x0
11:32:17: Write Speed Factor R2W_FACTOR                 :0x2
11:32:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:17: FILE_FORMAT_GRP                               :0x0
11:32:17: COPY flag                                     :0x1
11:32:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:17: File_Format                                   :0x0
11:32:17: CRC                                           :0x0
11:32:17: ####CSD Registe Values####  

11:32:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269ED0>, <py_sfcl.CommandDataDefinition object at 0x06268F30>) , Command count = 4208 ] 
11:32:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A330>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 4209 ] 
11:32:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273ED0>, <py_sfcl.PySEnhancedCmdData object at 0x062733C0>, <None>, <py_sfcl.Command23 object at 0x0627D480>) , Command count = 4210 ] 
11:32:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:20: Host Frequency set to 25000 KHz
11:32:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276660>, 0x0, True) , Command count = 4211 ] 
11:32:20: [GO18_globalSetVolt]### Host voltage value is set.
11:32:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x062697E0>, 0x0, False) , Command count = 4212 ] 
11:32:20: [GO18_globalSetVolt]### Host voltage value is set.
11:32:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4213 ] 
11:32:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4214 ] 
11:32:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4215 ] 
11:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x06269120>) , Command count = 4216 ] 
11:32:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x06268660>) , Command count = 4217 ] 
11:32:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:21: [ SetCardRCA(0x1, 0xD555) , Command count = 4218 ] 
11:32:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:21: Host Frequency set to 25000 KHz
11:32:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:21: ####CSD Registe 2.0 Values####
11:32:21: CSD_STRUCTURE                                 :0x1
11:32:21: Reserv1                                       :0x0
11:32:21: Time Access 1 TAAC                            :0xe
11:32:21: Time Access 2 NSAC*100                        :0x0
11:32:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:21: Card Command Classess CCC                     :0x5b5
11:32:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:21: DSR(driver stage register)  DSR_IMP           :0x0
11:32:21: Reserv2                                       :0x0
11:32:21: Device Size C_SIZE                            :0xedc8
11:32:21: Reserv3                                       :0x0
11:32:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:21: Reserv4                                       :0x0
11:32:21: Write Speed Factor R2W_FACTOR                 :0x2
11:32:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:21: FILE_FORMAT_GRP                               :0x0
11:32:21: COPY flag                                     :0x1
11:32:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:21: File_Format                                   :0x0
11:32:21: CRC                                           :0x0
11:32:21: ####CSD Registe Values####  

11:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:21: [GetSCRRegisterEntry] Passed
11:32:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:21: Data_Status_After Erases          : 0
11:32:21: CPRM Security Support             : No Security
11:32:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:21: Spec. Version                     : Version 3.0X
11:32:21: Extended Security Support         : Extended_Security_Not_Supported
11:32:21: Command Support                   : COMMAND_SUPPORT
11:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x062687B0>) , Command count = 4219 ] 
11:32:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DCC0>, <py_sfcl.CommandDataDefinition object at 0x0627AFC0>) , Command count = 4220 ] 
11:32:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:21: [ SetBusWidth(0x4) , Command count = 4221 ] 
11:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4222 ] 
11:32:21: Protected Area Size 0x28000
11:32:21: Bus Width           2
11:32:21: Secure Mode         0
11:32:21: Speed  Class        4
11:32:21: Perf Move           0
11:32:21: Au Size             9
11:32:21: Erase Size          15
11:32:21: Erase Timeout       1
11:32:21: Erase offset        1
11:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4223 ] 
11:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:21: Host Frequency set to 100000 KHz
11:32:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:22: ####CSD Registe 2.0 Values####
11:32:22: CSD_STRUCTURE                                 :0x1
11:32:22: Reserv1                                       :0x0
11:32:22: Time Access 1 TAAC                            :0xe
11:32:22: Time Access 2 NSAC*100                        :0x0
11:32:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:22: Card Command Classess CCC                     :0x5b5
11:32:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:22: DSR(driver stage register)  DSR_IMP           :0x0
11:32:22: Reserv2                                       :0x0
11:32:22: Device Size C_SIZE                            :0xedc8
11:32:22: Reserv3                                       :0x0
11:32:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:22: Reserv4                                       :0x0
11:32:22: Write Speed Factor R2W_FACTOR                 :0x2
11:32:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:22: FILE_FORMAT_GRP                               :0x0
11:32:22: COPY flag                                     :0x1
11:32:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:22: File_Format                                   :0x0
11:32:22: CRC                                           :0x0
11:32:22: ####CSD Registe Values####  

11:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D6F0>, <py_sfcl.CommandDataDefinition object at 0x06216AB0>) , Command count = 4224 ] 
11:32:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269E10>, <py_sfcl.CommandDataDefinition object at 0x0626D750>) , Command count = 4225 ] 
11:32:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D7B0>, <None>, <py_sfcl.Command23 object at 0x06273150>) , Command count = 4226 ] 
11:32:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:25: Host Frequency set to 25000 KHz
11:32:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 4227 ] 
11:32:25: [GO18_globalSetVolt]### Host voltage value is set.
11:32:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DD80>, 0x0, False) , Command count = 4228 ] 
11:32:25: [GO18_globalSetVolt]### Host voltage value is set.
11:32:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4229 ] 
11:32:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4230 ] 
11:32:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4231 ] 
11:32:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 4232 ] 
11:32:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 4233 ] 
11:32:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4234 ] 
11:32:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:25: Host Frequency set to 25000 KHz
11:32:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:25: ####CSD Registe 2.0 Values####
11:32:25: CSD_STRUCTURE                                 :0x1
11:32:25: Reserv1                                       :0x0
11:32:25: Time Access 1 TAAC                            :0xe
11:32:25: Time Access 2 NSAC*100                        :0x0
11:32:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:25: Card Command Classess CCC                     :0x5b5
11:32:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:25: DSR(driver stage register)  DSR_IMP           :0x0
11:32:25: Reserv2                                       :0x0
11:32:25: Device Size C_SIZE                            :0xedc8
11:32:25: Reserv3                                       :0x0
11:32:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:25: Reserv4                                       :0x0
11:32:25: Write Speed Factor R2W_FACTOR                 :0x2
11:32:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:25: FILE_FORMAT_GRP                               :0x0
11:32:25: COPY flag                                     :0x1
11:32:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:25: File_Format                                   :0x0
11:32:25: CRC                                           :0x0
11:32:25: ####CSD Registe Values####  

11:32:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:25: [GetSCRRegisterEntry] Passed
11:32:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:25: Data_Status_After Erases          : 0
11:32:25: CPRM Security Support             : No Security
11:32:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:25: Spec. Version                     : Version 3.0X
11:32:25: Extended Security Support         : Extended_Security_Not_Supported
11:32:25: Command Support                   : COMMAND_SUPPORT
11:32:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 4235 ] 
11:32:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DFC0>) , Command count = 4236 ] 
11:32:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:25: [ SetBusWidth(0x4) , Command count = 4237 ] 
11:32:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4238 ] 
11:32:25: Protected Area Size 0x28000
11:32:25: Bus Width           2
11:32:26: Secure Mode         0
11:32:26: Speed  Class        4
11:32:26: Perf Move           0
11:32:26: Au Size             9
11:32:26: Erase Size          15
11:32:26: Erase Timeout       1
11:32:26: Erase offset        1
11:32:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4239 ] 
11:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:26: Host Frequency set to 100000 KHz
11:32:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:26: ####CSD Registe 2.0 Values####
11:32:26: CSD_STRUCTURE                                 :0x1
11:32:26: Reserv1                                       :0x0
11:32:26: Time Access 1 TAAC                            :0xe
11:32:26: Time Access 2 NSAC*100                        :0x0
11:32:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:26: Card Command Classess CCC                     :0x5b5
11:32:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:26: DSR(driver stage register)  DSR_IMP           :0x0
11:32:26: Reserv2                                       :0x0
11:32:26: Device Size C_SIZE                            :0xedc8
11:32:26: Reserv3                                       :0x0
11:32:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:26: Reserv4                                       :0x0
11:32:26: Write Speed Factor R2W_FACTOR                 :0x2
11:32:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:26: FILE_FORMAT_GRP                               :0x0
11:32:26: COPY flag                                     :0x1
11:32:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:26: File_Format                                   :0x0
11:32:26: CRC                                           :0x0
11:32:26: ####CSD Registe Values####  

11:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273630>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 4240 ] 
11:32:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269AE0>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 4241 ] 
11:32:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062691E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269D80>, <py_sfcl.PySEnhancedCmdData object at 0x06269DB0>, <None>, <py_sfcl.Command23 object at 0x0626D8D0>) , Command count = 4242 ] 
11:32:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:29: Host Frequency set to 25000 KHz
11:32:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269E40>, 0x0, True) , Command count = 4243 ] 
11:32:29: [GO18_globalSetVolt]### Host voltage value is set.
11:32:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x062697B0>, 0x0, False) , Command count = 4244 ] 
11:32:29: [GO18_globalSetVolt]### Host voltage value is set.
11:32:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4245 ] 
11:32:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4246 ] 
11:32:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4247 ] 
11:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698D0>, <py_sfcl.CommandDataDefinition object at 0x06268AB0>) , Command count = 4248 ] 
11:32:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062693F0>, <py_sfcl.CommandDataDefinition object at 0x06268A80>) , Command count = 4249 ] 
11:32:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:29: [ SetCardRCA(0x1, 0xD555) , Command count = 4250 ] 
11:32:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:30: Host Frequency set to 25000 KHz
11:32:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:30: ####CSD Registe 2.0 Values####
11:32:30: CSD_STRUCTURE                                 :0x1
11:32:30: Reserv1                                       :0x0
11:32:30: Time Access 1 TAAC                            :0xe
11:32:30: Time Access 2 NSAC*100                        :0x0
11:32:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:30: Card Command Classess CCC                     :0x5b5
11:32:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:30: DSR(driver stage register)  DSR_IMP           :0x0
11:32:30: Reserv2                                       :0x0
11:32:30: Device Size C_SIZE                            :0xedc8
11:32:30: Reserv3                                       :0x0
11:32:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:30: Reserv4                                       :0x0
11:32:30: Write Speed Factor R2W_FACTOR                 :0x2
11:32:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:30: FILE_FORMAT_GRP                               :0x0
11:32:30: COPY flag                                     :0x1
11:32:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:30: File_Format                                   :0x0
11:32:30: CRC                                           :0x0
11:32:30: ####CSD Registe Values####  

11:32:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:30: [GetSCRRegisterEntry] Passed
11:32:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:30: Data_Status_After Erases          : 0
11:32:30: CPRM Security Support             : No Security
11:32:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:30: Spec. Version                     : Version 3.0X
11:32:30: Extended Security Support         : Extended_Security_Not_Supported
11:32:30: Command Support                   : COMMAND_SUPPORT
11:32:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690C0>, <py_sfcl.CommandDataDefinition object at 0x06268C00>) , Command count = 4251 ] 
11:32:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269930>, <py_sfcl.CommandDataDefinition object at 0x06268BA0>) , Command count = 4252 ] 
11:32:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:30: [ SetBusWidth(0x4) , Command count = 4253 ] 
11:32:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4254 ] 
11:32:30: Protected Area Size 0x28000
11:32:30: Bus Width           2
11:32:30: Secure Mode         0
11:32:30: Speed  Class        4
11:32:30: Perf Move           0
11:32:30: Au Size             9
11:32:30: Erase Size          15
11:32:30: Erase Timeout       1
11:32:30: Erase offset        1
11:32:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4255 ] 
11:32:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:30: Host Frequency set to 100000 KHz
11:32:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:30: ####CSD Registe 2.0 Values####
11:32:30: CSD_STRUCTURE                                 :0x1
11:32:30: Reserv1                                       :0x0
11:32:30: Time Access 1 TAAC                            :0xe
11:32:30: Time Access 2 NSAC*100                        :0x0
11:32:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:30: Card Command Classess CCC                     :0x5b5
11:32:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:30: DSR(driver stage register)  DSR_IMP           :0x0
11:32:30: Reserv2                                       :0x0
11:32:30: Device Size C_SIZE                            :0xedc8
11:32:30: Reserv3                                       :0x0
11:32:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:31: Reserv4                                       :0x0
11:32:31: Write Speed Factor R2W_FACTOR                 :0x2
11:32:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:31: FILE_FORMAT_GRP                               :0x0
11:32:31: COPY flag                                     :0x1
11:32:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:31: File_Format                                   :0x0
11:32:31: CRC                                           :0x0
11:32:31: ####CSD Registe Values####  

11:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269030>, <py_sfcl.CommandDataDefinition object at 0x06276D20>) , Command count = 4256 ] 
11:32:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D570>, <py_sfcl.CommandDataDefinition object at 0x0626D360>) , Command count = 4257 ] 
11:32:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA50>, <py_sfcl.PySEnhancedCmdData object at 0x0626D4B0>, <None>, <py_sfcl.Command23 object at 0x062698A0>) , Command count = 4258 ] 
11:32:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:33: Host Frequency set to 25000 KHz
11:32:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x062684E0>, 0x0, True) , Command count = 4259 ] 
11:32:33: [GO18_globalSetVolt]### Host voltage value is set.
11:32:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269BA0>, 0x0, False) , Command count = 4260 ] 
11:32:33: [GO18_globalSetVolt]### Host voltage value is set.
11:32:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4261 ] 
11:32:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4262 ] 
11:32:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4263 ] 
11:32:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x06269960>) , Command count = 4264 ] 
11:32:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 4265 ] 
11:32:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:34: [ SetCardRCA(0x1, 0xD555) , Command count = 4266 ] 
11:32:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:34: Host Frequency set to 25000 KHz
11:32:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:34: ####CSD Registe 2.0 Values####
11:32:34: CSD_STRUCTURE                                 :0x1
11:32:34: Reserv1                                       :0x0
11:32:34: Time Access 1 TAAC                            :0xe
11:32:34: Time Access 2 NSAC*100                        :0x0
11:32:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:34: Card Command Classess CCC                     :0x5b5
11:32:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:34: DSR(driver stage register)  DSR_IMP           :0x0
11:32:34: Reserv2                                       :0x0
11:32:34: Device Size C_SIZE                            :0xedc8
11:32:34: Reserv3                                       :0x0
11:32:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:34: Reserv4                                       :0x0
11:32:34: Write Speed Factor R2W_FACTOR                 :0x2
11:32:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:34: FILE_FORMAT_GRP                               :0x0
11:32:34: COPY flag                                     :0x1
11:32:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:34: File_Format                                   :0x0
11:32:34: CRC                                           :0x0
11:32:34: ####CSD Registe Values####  

11:32:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:34: [GetSCRRegisterEntry] Passed
11:32:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:34: Data_Status_After Erases          : 0
11:32:34: CPRM Security Support             : No Security
11:32:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:34: Spec. Version                     : Version 3.0X
11:32:34: Extended Security Support         : Extended_Security_Not_Supported
11:32:34: Command Support                   : COMMAND_SUPPORT
11:32:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x06273D80>) , Command count = 4267 ] 
11:32:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 4268 ] 
11:32:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:34: [ SetBusWidth(0x4) , Command count = 4269 ] 
11:32:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4270 ] 
11:32:34: Protected Area Size 0x28000
11:32:34: Bus Width           2
11:32:34: Secure Mode         0
11:32:34: Speed  Class        4
11:32:34: Perf Move           0
11:32:34: Au Size             9
11:32:34: Erase Size          15
11:32:34: Erase Timeout       1
11:32:34: Erase offset        1
11:32:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4271 ] 
11:32:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:34: Host Frequency set to 100000 KHz
11:32:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:34: ####CSD Registe 2.0 Values####
11:32:34: CSD_STRUCTURE                                 :0x1
11:32:34: Reserv1                                       :0x0
11:32:34: Time Access 1 TAAC                            :0xe
11:32:34: Time Access 2 NSAC*100                        :0x0
11:32:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:34: Card Command Classess CCC                     :0x5b5
11:32:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:35: DSR(driver stage register)  DSR_IMP           :0x0
11:32:35: Reserv2                                       :0x0
11:32:35: Device Size C_SIZE                            :0xedc8
11:32:35: Reserv3                                       :0x0
11:32:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:35: Reserv4                                       :0x0
11:32:35: Write Speed Factor R2W_FACTOR                 :0x2
11:32:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:35: FILE_FORMAT_GRP                               :0x0
11:32:35: COPY flag                                     :0x1
11:32:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:35: File_Format                                   :0x0
11:32:35: CRC                                           :0x0
11:32:35: ####CSD Registe Values####  

11:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695D0>, <py_sfcl.CommandDataDefinition object at 0x0627A0F0>) , Command count = 4272 ] 
11:32:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273690>, <py_sfcl.CommandDataDefinition object at 0x0626D3F0>) , Command count = 4273 ] 
11:32:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D690>, <py_sfcl.PySEnhancedCmdData object at 0x0626DED0>, <None>, <py_sfcl.Command23 object at 0x0626D1B0>) , Command count = 4274 ] 
11:32:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:35: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:38: Host Frequency set to 25000 KHz
11:32:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DD50>, 0x0, True) , Command count = 4275 ] 
11:32:38: [GO18_globalSetVolt]### Host voltage value is set.
11:32:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D7B0>, 0x0, False) , Command count = 4276 ] 
11:32:38: [GO18_globalSetVolt]### Host voltage value is set.
11:32:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4277 ] 
11:32:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4278 ] 
11:32:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4279 ] 
11:32:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 4280 ] 
11:32:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AB0>, <py_sfcl.CommandDataDefinition object at 0x062739C0>) , Command count = 4281 ] 
11:32:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4282 ] 
11:32:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:38: Host Frequency set to 25000 KHz
11:32:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:38: ####CSD Registe 2.0 Values####
11:32:38: CSD_STRUCTURE                                 :0x1
11:32:38: Reserv1                                       :0x0
11:32:38: Time Access 1 TAAC                            :0xe
11:32:38: Time Access 2 NSAC*100                        :0x0
11:32:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:38: Card Command Classess CCC                     :0x5b5
11:32:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:38: DSR(driver stage register)  DSR_IMP           :0x0
11:32:38: Reserv2                                       :0x0
11:32:38: Device Size C_SIZE                            :0xedc8
11:32:38: Reserv3                                       :0x0
11:32:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:38: Reserv4                                       :0x0
11:32:38: Write Speed Factor R2W_FACTOR                 :0x2
11:32:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:38: FILE_FORMAT_GRP                               :0x0
11:32:38: COPY flag                                     :0x1
11:32:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:38: File_Format                                   :0x0
11:32:38: CRC                                           :0x0
11:32:38: ####CSD Registe Values####  

11:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:38: [GetSCRRegisterEntry] Passed
11:32:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:38: Data_Status_After Erases          : 0
11:32:38: CPRM Security Support             : No Security
11:32:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:38: Spec. Version                     : Version 3.0X
11:32:38: Extended Security Support         : Extended_Security_Not_Supported
11:32:38: Command Support                   : COMMAND_SUPPORT
11:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 4283 ] 
11:32:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BD0>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 4284 ] 
11:32:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:38: [ SetBusWidth(0x4) , Command count = 4285 ] 
11:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4286 ] 
11:32:38: Protected Area Size 0x28000
11:32:38: Bus Width           2
11:32:38: Secure Mode         0
11:32:38: Speed  Class        4
11:32:38: Perf Move           0
11:32:38: Au Size             9
11:32:38: Erase Size          15
11:32:38: Erase Timeout       1
11:32:38: Erase offset        1
11:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4287 ] 
11:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:38: Host Frequency set to 100000 KHz
11:32:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:39: ####CSD Registe 2.0 Values####
11:32:39: CSD_STRUCTURE                                 :0x1
11:32:39: Reserv1                                       :0x0
11:32:39: Time Access 1 TAAC                            :0xe
11:32:39: Time Access 2 NSAC*100                        :0x0
11:32:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:39: Card Command Classess CCC                     :0x5b5
11:32:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:39: DSR(driver stage register)  DSR_IMP           :0x0
11:32:39: Reserv2                                       :0x0
11:32:39: Device Size C_SIZE                            :0xedc8
11:32:39: Reserv3                                       :0x0
11:32:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:39: Reserv4                                       :0x0
11:32:39: Write Speed Factor R2W_FACTOR                 :0x2
11:32:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:39: FILE_FORMAT_GRP                               :0x0
11:32:39: COPY flag                                     :0x1
11:32:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:39: File_Format                                   :0x0
11:32:39: CRC                                           :0x0
11:32:39: ####CSD Registe Values####  

11:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x06269990>) , Command count = 4288 ] 
11:32:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B70>, <py_sfcl.CommandDataDefinition object at 0x0626D7E0>) , Command count = 4289 ] 
11:32:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DBA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D660>, <py_sfcl.PySEnhancedCmdData object at 0x0626D810>, <None>, <py_sfcl.Command23 object at 0x0626D390>) , Command count = 4290 ] 
11:32:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:42: Host Frequency set to 25000 KHz
11:32:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D900>, 0x0, True) , Command count = 4291 ] 
11:32:42: [GO18_globalSetVolt]### Host voltage value is set.
11:32:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273E40>, 0x0, False) , Command count = 4292 ] 
11:32:42: [GO18_globalSetVolt]### Host voltage value is set.
11:32:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4293 ] 
11:32:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4294 ] 
11:32:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4295 ] 
11:32:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273570>, <py_sfcl.CommandDataDefinition object at 0x0627A0C0>) , Command count = 4296 ] 
11:32:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 4297 ] 
11:32:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:42: [ SetCardRCA(0x1, 0xD555) , Command count = 4298 ] 
11:32:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:42: Host Frequency set to 25000 KHz
11:32:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:42: ####CSD Registe 2.0 Values####
11:32:42: CSD_STRUCTURE                                 :0x1
11:32:42: Reserv1                                       :0x0
11:32:42: Time Access 1 TAAC                            :0xe
11:32:42: Time Access 2 NSAC*100                        :0x0
11:32:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:42: Card Command Classess CCC                     :0x5b5
11:32:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:42: DSR(driver stage register)  DSR_IMP           :0x0
11:32:42: Reserv2                                       :0x0
11:32:42: Device Size C_SIZE                            :0xedc8
11:32:42: Reserv3                                       :0x0
11:32:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:42: Reserv4                                       :0x0
11:32:42: Write Speed Factor R2W_FACTOR                 :0x2
11:32:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:42: FILE_FORMAT_GRP                               :0x0
11:32:42: COPY flag                                     :0x1
11:32:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:42: File_Format                                   :0x0
11:32:42: CRC                                           :0x0
11:32:42: ####CSD Registe Values####  

11:32:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:42: [GetSCRRegisterEntry] Passed
11:32:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:42: Data_Status_After Erases          : 0
11:32:42: CPRM Security Support             : No Security
11:32:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:42: Spec. Version                     : Version 3.0X
11:32:42: Extended Security Support         : Extended_Security_Not_Supported
11:32:42: Command Support                   : COMMAND_SUPPORT
11:32:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273480>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 4299 ] 
11:32:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273360>, <py_sfcl.CommandDataDefinition object at 0x0627AA20>) , Command count = 4300 ] 
11:32:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:42: [ SetBusWidth(0x4) , Command count = 4301 ] 
11:32:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4302 ] 
11:32:42: Protected Area Size 0x28000
11:32:42: Bus Width           2
11:32:43: Secure Mode         0
11:32:43: Speed  Class        4
11:32:43: Perf Move           0
11:32:43: Au Size             9
11:32:43: Erase Size          15
11:32:43: Erase Timeout       1
11:32:43: Erase offset        1
11:32:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4303 ] 
11:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:43: Host Frequency set to 100000 KHz
11:32:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:43: ####CSD Registe 2.0 Values####
11:32:43: CSD_STRUCTURE                                 :0x1
11:32:43: Reserv1                                       :0x0
11:32:43: Time Access 1 TAAC                            :0xe
11:32:43: Time Access 2 NSAC*100                        :0x0
11:32:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:43: Card Command Classess CCC                     :0x5b5
11:32:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:43: DSR(driver stage register)  DSR_IMP           :0x0
11:32:43: Reserv2                                       :0x0
11:32:43: Device Size C_SIZE                            :0xedc8
11:32:43: Reserv3                                       :0x0
11:32:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:44: Reserv4                                       :0x0
11:32:44: Write Speed Factor R2W_FACTOR                 :0x2
11:32:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:44: FILE_FORMAT_GRP                               :0x0
11:32:44: COPY flag                                     :0x1
11:32:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:44: File_Format                                   :0x0
11:32:44: CRC                                           :0x0
11:32:44: ####CSD Registe Values####  

11:32:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 4304 ] 
11:32:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273180>, <py_sfcl.CommandDataDefinition object at 0x06273030>) , Command count = 4305 ] 
11:32:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DF00>, <py_sfcl.PySEnhancedCmdData object at 0x06276060>, <None>, <py_sfcl.Command23 object at 0x0626D0C0>) , Command count = 4306 ] 
11:32:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:47: Host Frequency set to 25000 KHz
11:32:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x062732A0>, 0x0, True) , Command count = 4307 ] 
11:32:47: [GO18_globalSetVolt]### Host voltage value is set.
11:32:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A600>, 0x0, False) , Command count = 4308 ] 
11:32:47: [GO18_globalSetVolt]### Host voltage value is set.
11:32:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4309 ] 
11:32:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4310 ] 
11:32:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4311 ] 
11:32:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 4312 ] 
11:32:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F30>, <py_sfcl.CommandDataDefinition object at 0x06273FC0>) , Command count = 4313 ] 
11:32:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4314 ] 
11:32:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:47: Host Frequency set to 25000 KHz
11:32:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:47: ####CSD Registe 2.0 Values####
11:32:47: CSD_STRUCTURE                                 :0x1
11:32:47: Reserv1                                       :0x0
11:32:47: Time Access 1 TAAC                            :0xe
11:32:47: Time Access 2 NSAC*100                        :0x0
11:32:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:47: Card Command Classess CCC                     :0x5b5
11:32:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:47: DSR(driver stage register)  DSR_IMP           :0x0
11:32:47: Reserv2                                       :0x0
11:32:47: Device Size C_SIZE                            :0xedc8
11:32:47: Reserv3                                       :0x0
11:32:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:47: Reserv4                                       :0x0
11:32:47: Write Speed Factor R2W_FACTOR                 :0x2
11:32:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:47: FILE_FORMAT_GRP                               :0x0
11:32:47: COPY flag                                     :0x1
11:32:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:47: File_Format                                   :0x0
11:32:47: CRC                                           :0x0
11:32:47: ####CSD Registe Values####  

11:32:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:47: [GetSCRRegisterEntry] Passed
11:32:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:47: Data_Status_After Erases          : 0
11:32:47: CPRM Security Support             : No Security
11:32:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:47: Spec. Version                     : Version 3.0X
11:32:47: Extended Security Support         : Extended_Security_Not_Supported
11:32:47: Command Support                   : COMMAND_SUPPORT
11:32:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273060>, <py_sfcl.CommandDataDefinition object at 0x0626DD20>) , Command count = 4315 ] 
11:32:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D0C0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 4316 ] 
11:32:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:47: [ SetBusWidth(0x4) , Command count = 4317 ] 
11:32:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4318 ] 
11:32:47: Protected Area Size 0x28000
11:32:47: Bus Width           2
11:32:47: Secure Mode         0
11:32:47: Speed  Class        4
11:32:47: Perf Move           0
11:32:47: Au Size             9
11:32:47: Erase Size          15
11:32:47: Erase Timeout       1
11:32:47: Erase offset        1
11:32:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4319 ] 
11:32:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:47: Host Frequency set to 100000 KHz
11:32:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:47: ####CSD Registe 2.0 Values####
11:32:47: CSD_STRUCTURE                                 :0x1
11:32:47: Reserv1                                       :0x0
11:32:47: Time Access 1 TAAC                            :0xe
11:32:47: Time Access 2 NSAC*100                        :0x0
11:32:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:47: Card Command Classess CCC                     :0x5b5
11:32:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:47: DSR(driver stage register)  DSR_IMP           :0x0
11:32:47: Reserv2                                       :0x0
11:32:47: Device Size C_SIZE                            :0xedc8
11:32:47: Reserv3                                       :0x0
11:32:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:48: Reserv4                                       :0x0
11:32:48: Write Speed Factor R2W_FACTOR                 :0x2
11:32:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:48: FILE_FORMAT_GRP                               :0x0
11:32:48: COPY flag                                     :0x1
11:32:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:48: File_Format                                   :0x0
11:32:48: CRC                                           :0x0
11:32:48: ####CSD Registe Values####  

11:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273900>, <py_sfcl.CommandDataDefinition object at 0x06273C90>) , Command count = 4320 ] 
11:32:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x062760F0>) , Command count = 4321 ] 
11:32:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
11:32:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
11:32:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062760C0>, <py_sfcl.PySEnhancedCmdData object at 0x06276B10>, <None>, <py_sfcl.Command23 object at 0x062765A0>) , Command count = 4322 ] 
11:32:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:32:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:51: Host Frequency set to 25000 KHz
11:32:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D20>, 0x0, True) , Command count = 4323 ] 
11:32:51: [GO18_globalSetVolt]### Host voltage value is set.
11:32:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A2D0>, 0x0, False) , Command count = 4324 ] 
11:32:51: [GO18_globalSetVolt]### Host voltage value is set.
11:32:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4325 ] 
11:32:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4326 ] 
11:32:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4327 ] 
11:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA80>, <py_sfcl.CommandDataDefinition object at 0x0626DE40>) , Command count = 4328 ] 
11:32:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 4329 ] 
11:32:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:51: [ SetCardRCA(0x1, 0xD555) , Command count = 4330 ] 
11:32:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:51: Host Frequency set to 25000 KHz
11:32:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:51: ####CSD Registe 2.0 Values####
11:32:51: CSD_STRUCTURE                                 :0x1
11:32:51: Reserv1                                       :0x0
11:32:51: Time Access 1 TAAC                            :0xe
11:32:51: Time Access 2 NSAC*100                        :0x0
11:32:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:51: Card Command Classess CCC                     :0x5b5
11:32:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:51: DSR(driver stage register)  DSR_IMP           :0x0
11:32:51: Reserv2                                       :0x0
11:32:51: Device Size C_SIZE                            :0xedc8
11:32:51: Reserv3                                       :0x0
11:32:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:51: Reserv4                                       :0x0
11:32:51: Write Speed Factor R2W_FACTOR                 :0x2
11:32:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:51: FILE_FORMAT_GRP                               :0x0
11:32:51: COPY flag                                     :0x1
11:32:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:51: File_Format                                   :0x0
11:32:51: CRC                                           :0x0
11:32:51: ####CSD Registe Values####  

11:32:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:51: [GetSCRRegisterEntry] Passed
11:32:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:51: Data_Status_After Erases          : 0
11:32:51: CPRM Security Support             : No Security
11:32:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:51: Spec. Version                     : Version 3.0X
11:32:51: Extended Security Support         : Extended_Security_Not_Supported
11:32:51: Command Support                   : COMMAND_SUPPORT
11:32:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D360>, <py_sfcl.CommandDataDefinition object at 0x0627DBD0>) , Command count = 4331 ] 
11:32:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273990>, <py_sfcl.CommandDataDefinition object at 0x06276990>) , Command count = 4332 ] 
11:32:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:51: [ SetBusWidth(0x4) , Command count = 4333 ] 
11:32:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06273540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4334 ] 
11:32:51: Protected Area Size 0x28000
11:32:51: Bus Width           2
11:32:51: Secure Mode         0
11:32:51: Speed  Class        4
11:32:51: Perf Move           0
11:32:51: Au Size             9
11:32:51: Erase Size          15
11:32:53: Failed Running script <module 'STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap.pyc'> with error  
11:32:53: ########################################
11:32:53: ########################################
11:32:53: Stated Running script STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump 
11:32:53: ########################################
11:32:53: ###### Running STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_JumpTest ###### 

11:32:53: [GO4_globalInitCard]### Switch to Specify Card Type
11:32:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:55: Host Frequency set to 25000 KHz
11:32:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:55: [GO18_globalSetVolt]### Set Host Voltage value.
11:32:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:32:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 4335 ] 
11:32:55: [GO18_globalSetVolt]### Host voltage value is set.
11:32:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:32:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269870>, 0x0, False) , Command count = 4336 ] 
11:32:55: [GO18_globalSetVolt]### Host voltage value is set.
11:32:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4337 ] 
11:32:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:32:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4338 ] 
11:32:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:32:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:32:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:32:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:32:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:32:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4339 ] 
11:32:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:32:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x06276900>) , Command count = 4340 ] 
11:32:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F00>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 4341 ] 
11:32:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:32:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4342 ] 
11:32:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:32:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:32:56: Host Frequency set to 25000 KHz
11:32:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:32:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:56: ####CSD Registe 2.0 Values####
11:32:56: CSD_STRUCTURE                                 :0x1
11:32:56: Reserv1                                       :0x0
11:32:56: Time Access 1 TAAC                            :0xe
11:32:56: Time Access 2 NSAC*100                        :0x0
11:32:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:32:56: Card Command Classess CCC                     :0x5b5
11:32:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:56: DSR(driver stage register)  DSR_IMP           :0x0
11:32:56: Reserv2                                       :0x0
11:32:56: Device Size C_SIZE                            :0xedc8
11:32:56: Reserv3                                       :0x0
11:32:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:56: Reserv4                                       :0x0
11:32:56: Write Speed Factor R2W_FACTOR                 :0x2
11:32:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:56: FILE_FORMAT_GRP                               :0x0
11:32:56: COPY flag                                     :0x1
11:32:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:56: File_Format                                   :0x0
11:32:56: CRC                                           :0x0
11:32:56: ####CSD Registe Values####  

11:32:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:32:56: [GetSCRRegisterEntry] Passed
11:32:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:32:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:32:56: Data_Status_After Erases          : 0
11:32:56: CPRM Security Support             : No Security
11:32:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:32:56: Spec. Version                     : Version 3.0X
11:32:56: Extended Security Support         : Extended_Security_Not_Supported
11:32:56: Command Support                   : COMMAND_SUPPORT
11:32:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 4343 ] 
11:32:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269360>, <py_sfcl.CommandDataDefinition object at 0x06276ED0>) , Command count = 4344 ] 
11:32:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:32:56: [ SetBusWidth(0x4) , Command count = 4345 ] 
11:32:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:32:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06276960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4346 ] 
11:32:56: Protected Area Size 0x28000
11:32:56: Bus Width           2
11:32:56: Secure Mode         0
11:32:56: Speed  Class        4
11:32:56: Perf Move           0
11:32:56: Au Size             9
11:32:56: Erase Size          15
11:32:56: Erase Timeout       1
11:32:56: Erase offset        1
11:32:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:32:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:32:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4347 ] 
11:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:32:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:32:56: Host Frequency set to 100000 KHz
11:32:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:32:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:32:56: ####CSD Registe 2.0 Values####
11:32:56: CSD_STRUCTURE                                 :0x1
11:32:56: Reserv1                                       :0x0
11:32:56: Time Access 1 TAAC                            :0xe
11:32:56: Time Access 2 NSAC*100                        :0x0
11:32:56: Data Transfer Rate TRAN_SPEED                 :0xb
11:32:56: Card Command Classess CCC                     :0x5b5
11:32:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:32:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:32:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:32:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:32:56: DSR(driver stage register)  DSR_IMP           :0x0
11:32:56: Reserv2                                       :0x0
11:32:56: Device Size C_SIZE                            :0xedc8
11:32:56: Reserv3                                       :0x0
11:32:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:32:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:32:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:32:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:32:56: Reserv4                                       :0x0
11:32:56: Write Speed Factor R2W_FACTOR                 :0x2
11:32:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:32:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:32:56: FILE_FORMAT_GRP                               :0x0
11:32:56: COPY flag                                     :0x1
11:32:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:32:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:32:56: File_Format                                   :0x0
11:32:56: CRC                                           :0x0
11:32:56: ####CSD Registe Values####  

11:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x06269F90>) , Command count = 4348 ] 
11:32:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D5A0>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 4349 ] 
11:32:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:32:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
11:33:00: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4350 ] 
11:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1024
11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x0627DE40>) , Command count = 4351 ] 
11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A420>, <py_sfcl.PySEnhancedCmdData object at 0x06312B40>, <None>, <py_sfcl.Command23 object at 0x0627D630>) , Command count = 4352 ] 
11:33:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:02: Host Frequency set to 25000 KHz
11:33:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 4353 ] 
11:33:02: [GO18_globalSetVolt]### Host voltage value is set.
11:33:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x053E2420>, 0x0, False) , Command count = 4354 ] 
11:33:02: [GO18_globalSetVolt]### Host voltage value is set.
11:33:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4355 ] 
11:33:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4356 ] 
11:33:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4357 ] 
11:33:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 4358 ] 
11:33:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 4359 ] 
11:33:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4360 ] 
11:33:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:02: Host Frequency set to 25000 KHz
11:33:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:02: ####CSD Registe 2.0 Values####
11:33:02: CSD_STRUCTURE                                 :0x1
11:33:02: Reserv1                                       :0x0
11:33:02: Time Access 1 TAAC                            :0xe
11:33:02: Time Access 2 NSAC*100                        :0x0
11:33:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:02: Card Command Classess CCC                     :0x5b5
11:33:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:02: DSR(driver stage register)  DSR_IMP           :0x0
11:33:02: Reserv2                                       :0x0
11:33:02: Device Size C_SIZE                            :0xedc8
11:33:02: Reserv3                                       :0x0
11:33:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:02: Reserv4                                       :0x0
11:33:02: Write Speed Factor R2W_FACTOR                 :0x2
11:33:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:02: FILE_FORMAT_GRP                               :0x0
11:33:02: COPY flag                                     :0x1
11:33:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:02: File_Format                                   :0x0
11:33:02: CRC                                           :0x0
11:33:02: ####CSD Registe Values####  

11:33:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:02: [GetSCRRegisterEntry] Passed
11:33:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:02: Data_Status_After Erases          : 0
11:33:02: CPRM Security Support             : No Security
11:33:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:02: Spec. Version                     : Version 3.0X
11:33:02: Extended Security Support         : Extended_Security_Not_Supported
11:33:02: Command Support                   : COMMAND_SUPPORT
11:33:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627A7E0>) , Command count = 4361 ] 
11:33:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB40>, <py_sfcl.CommandDataDefinition object at 0x0627A510>) , Command count = 4362 ] 
11:33:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:02: [ SetBusWidth(0x4) , Command count = 4363 ] 
11:33:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4364 ] 
11:33:02: Protected Area Size 0x28000
11:33:02: Bus Width           2
11:33:02: Secure Mode         0
11:33:02: Speed  Class        4
11:33:02: Perf Move           0
11:33:02: Au Size             9
11:33:02: Erase Size          15
11:33:02: Erase Timeout       1
11:33:02: Erase offset        1
11:33:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4365 ] 
11:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:02: Host Frequency set to 100000 KHz
11:33:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:02: ####CSD Registe 2.0 Values####
11:33:02: CSD_STRUCTURE                                 :0x1
11:33:02: Reserv1                                       :0x0
11:33:02: Time Access 1 TAAC                            :0xe
11:33:02: Time Access 2 NSAC*100                        :0x0
11:33:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:02: Card Command Classess CCC                     :0x5b5
11:33:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:03: DSR(driver stage register)  DSR_IMP           :0x0
11:33:03: Reserv2                                       :0x0
11:33:03: Device Size C_SIZE                            :0xedc8
11:33:03: Reserv3                                       :0x0
11:33:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:03: Reserv4                                       :0x0
11:33:03: Write Speed Factor R2W_FACTOR                 :0x2
11:33:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:03: FILE_FORMAT_GRP                               :0x0
11:33:03: COPY flag                                     :0x1
11:33:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:03: File_Format                                   :0x0
11:33:03: CRC                                           :0x0
11:33:03: ####CSD Registe Values####  

11:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x0627A150>) , Command count = 4366 ] 
11:33:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC30>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 4367 ] 
11:33:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06312A20>) , Command count = 4368 ] 
11:33:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
11:33:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312B70>, <py_sfcl.PySEnhancedCmdData object at 0x06312E40>, <None>, <py_sfcl.Command23 object at 0x062767B0>) , Command count = 4369 ] 
11:33:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312B10>, <py_sfcl.PySEnhancedCmdData object at 0x06312D20>, <None>, <py_sfcl.Command23 object at 0x06312C00>) , Command count = 4370 ] 
11:33:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:06: Host Frequency set to 25000 KHz
11:33:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 4371 ] 
11:33:06: [GO18_globalSetVolt]### Host voltage value is set.
11:33:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1B0>, 0x0, False) , Command count = 4372 ] 
11:33:06: [GO18_globalSetVolt]### Host voltage value is set.
11:33:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4373 ] 
11:33:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4374 ] 
11:33:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4375 ] 
11:33:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 4376 ] 
11:33:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x062767E0>) , Command count = 4377 ] 
11:33:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:06: [ SetCardRCA(0x1, 0xD555) , Command count = 4378 ] 
11:33:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:06: Host Frequency set to 25000 KHz
11:33:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:06: ####CSD Registe 2.0 Values####
11:33:06: CSD_STRUCTURE                                 :0x1
11:33:06: Reserv1                                       :0x0
11:33:06: Time Access 1 TAAC                            :0xe
11:33:06: Time Access 2 NSAC*100                        :0x0
11:33:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:06: Card Command Classess CCC                     :0x5b5
11:33:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:06: DSR(driver stage register)  DSR_IMP           :0x0
11:33:06: Reserv2                                       :0x0
11:33:06: Device Size C_SIZE                            :0xedc8
11:33:06: Reserv3                                       :0x0
11:33:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:06: Reserv4                                       :0x0
11:33:06: Write Speed Factor R2W_FACTOR                 :0x2
11:33:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:06: FILE_FORMAT_GRP                               :0x0
11:33:06: COPY flag                                     :0x1
11:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:06: File_Format                                   :0x0
11:33:06: CRC                                           :0x0
11:33:06: ####CSD Registe Values####  

11:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:06: [GetSCRRegisterEntry] Passed
11:33:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:06: Data_Status_After Erases          : 0
11:33:06: CPRM Security Support             : No Security
11:33:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:06: Spec. Version                     : Version 3.0X
11:33:06: Extended Security Support         : Extended_Security_Not_Supported
11:33:06: Command Support                   : COMMAND_SUPPORT
11:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0626D240>) , Command count = 4379 ] 
11:33:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF90>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 4380 ] 
11:33:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:06: [ SetBusWidth(0x4) , Command count = 4381 ] 
11:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4382 ] 
11:33:06: Protected Area Size 0x28000
11:33:06: Bus Width           2
11:33:06: Secure Mode         0
11:33:06: Speed  Class        4
11:33:06: Perf Move           0
11:33:06: Au Size             9
11:33:06: Erase Size          15
11:33:06: Erase Timeout       1
11:33:06: Erase offset        1
11:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4383 ] 
11:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:06: Host Frequency set to 100000 KHz
11:33:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:06: ####CSD Registe 2.0 Values####
11:33:06: CSD_STRUCTURE                                 :0x1
11:33:06: Reserv1                                       :0x0
11:33:06: Time Access 1 TAAC                            :0xe
11:33:06: Time Access 2 NSAC*100                        :0x0
11:33:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:06: Card Command Classess CCC                     :0x5b5
11:33:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:06: DSR(driver stage register)  DSR_IMP           :0x0
11:33:06: Reserv2                                       :0x0
11:33:06: Device Size C_SIZE                            :0xedc8
11:33:06: Reserv3                                       :0x0
11:33:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:06: Reserv4                                       :0x0
11:33:06: Write Speed Factor R2W_FACTOR                 :0x2
11:33:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:06: FILE_FORMAT_GRP                               :0x0
11:33:06: COPY flag                                     :0x1
11:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:06: File_Format                                   :0x0
11:33:06: CRC                                           :0x0
11:33:06: ####CSD Registe Values####  

11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276540>, <py_sfcl.CommandDataDefinition object at 0x06273510>) , Command count = 4384 ] 
11:33:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276150>, <py_sfcl.CommandDataDefinition object at 0x0627A690>) , Command count = 4385 ] 
11:33:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627ADE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A390>, <py_sfcl.PySEnhancedCmdData object at 0x05401C90>, <None>, <py_sfcl.Command23 object at 0x05401C30>) , Command count = 4386 ] 
11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A5D0>, <py_sfcl.PySEnhancedCmdData object at 0x061AF2D0>, <None>, <py_sfcl.Command23 object at 0x054019C0>) , Command count = 4387 ] 
11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x054019F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A9C0>, <py_sfcl.PySEnhancedCmdData object at 0x06269F30>, <None>, <py_sfcl.Command23 object at 0x06312F60>) , Command count = 4388 ] 
11:33:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:08: Host Frequency set to 25000 KHz
11:33:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 4389 ] 
11:33:08: [GO18_globalSetVolt]### Host voltage value is set.
11:33:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401C60>, 0x0, False) , Command count = 4390 ] 
11:33:09: [GO18_globalSetVolt]### Host voltage value is set.
11:33:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4391 ] 
11:33:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4392 ] 
11:33:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4393 ] 
11:33:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 4394 ] 
11:33:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 4395 ] 
11:33:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:09: [ SetCardRCA(0x1, 0xD555) , Command count = 4396 ] 
11:33:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:09: Host Frequency set to 25000 KHz
11:33:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:09: ####CSD Registe 2.0 Values####
11:33:09: CSD_STRUCTURE                                 :0x1
11:33:09: Reserv1                                       :0x0
11:33:09: Time Access 1 TAAC                            :0xe
11:33:09: Time Access 2 NSAC*100                        :0x0
11:33:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:09: Card Command Classess CCC                     :0x5b5
11:33:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:09: DSR(driver stage register)  DSR_IMP           :0x0
11:33:09: Reserv2                                       :0x0
11:33:09: Device Size C_SIZE                            :0xedc8
11:33:09: Reserv3                                       :0x0
11:33:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:09: Reserv4                                       :0x0
11:33:09: Write Speed Factor R2W_FACTOR                 :0x2
11:33:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:09: FILE_FORMAT_GRP                               :0x0
11:33:09: COPY flag                                     :0x1
11:33:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:09: File_Format                                   :0x0
11:33:09: CRC                                           :0x0
11:33:09: ####CSD Registe Values####  

11:33:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:09: [GetSCRRegisterEntry] Passed
11:33:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:09: Data_Status_After Erases          : 0
11:33:09: CPRM Security Support             : No Security
11:33:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:09: Spec. Version                     : Version 3.0X
11:33:09: Extended Security Support         : Extended_Security_Not_Supported
11:33:09: Command Support                   : COMMAND_SUPPORT
11:33:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 4397 ] 
11:33:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D930>, <py_sfcl.CommandDataDefinition object at 0x06276720>) , Command count = 4398 ] 
11:33:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:09: [ SetBusWidth(0x4) , Command count = 4399 ] 
11:33:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4400 ] 
11:33:09: Protected Area Size 0x28000
11:33:09: Bus Width           2
11:33:09: Secure Mode         0
11:33:09: Speed  Class        4
11:33:09: Perf Move           0
11:33:09: Au Size             9
11:33:09: Erase Size          15
11:33:09: Erase Timeout       1
11:33:09: Erase offset        1
11:33:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4401 ] 
11:33:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:09: Host Frequency set to 100000 KHz
11:33:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:09: ####CSD Registe 2.0 Values####
11:33:09: CSD_STRUCTURE                                 :0x1
11:33:09: Reserv1                                       :0x0
11:33:09: Time Access 1 TAAC                            :0xe
11:33:09: Time Access 2 NSAC*100                        :0x0
11:33:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:09: Card Command Classess CCC                     :0x5b5
11:33:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:09: DSR(driver stage register)  DSR_IMP           :0x0
11:33:09: Reserv2                                       :0x0
11:33:09: Device Size C_SIZE                            :0xedc8
11:33:09: Reserv3                                       :0x0
11:33:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:09: Reserv4                                       :0x0
11:33:09: Write Speed Factor R2W_FACTOR                 :0x2
11:33:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:09: FILE_FORMAT_GRP                               :0x0
11:33:09: COPY flag                                     :0x1
11:33:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:09: File_Format                                   :0x0
11:33:09: CRC                                           :0x0
11:33:09: ####CSD Registe Values####  

11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 4402 ] 
11:33:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269450>, <py_sfcl.CommandDataDefinition object at 0x0627ABD0>) , Command count = 4403 ] 
11:33:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627ACC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D1E0>, <None>, <py_sfcl.Command23 object at 0x06312C60>) , Command count = 4404 ] 
11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312EA0>, <py_sfcl.PySEnhancedCmdData object at 0x06312E10>, <None>, <py_sfcl.Command23 object at 0x0627DBA0>) , Command count = 4405 ] 
11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AFB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AED0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x06312F00>) , Command count = 4406 ] 
11:33:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:11: Host Frequency set to 25000 KHz
11:33:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 4407 ] 
11:33:11: [GO18_globalSetVolt]### Host voltage value is set.
11:33:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276CC0>, 0x0, False) , Command count = 4408 ] 
11:33:11: [GO18_globalSetVolt]### Host voltage value is set.
11:33:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4409 ] 
11:33:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4410 ] 
11:33:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4411 ] 
11:33:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 4412 ] 
11:33:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x0627D030>) , Command count = 4413 ] 
11:33:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:11: [ SetCardRCA(0x1, 0xD555) , Command count = 4414 ] 
11:33:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:12: Host Frequency set to 25000 KHz
11:33:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:12: ####CSD Registe 2.0 Values####
11:33:12: CSD_STRUCTURE                                 :0x1
11:33:12: Reserv1                                       :0x0
11:33:12: Time Access 1 TAAC                            :0xe
11:33:12: Time Access 2 NSAC*100                        :0x0
11:33:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:12: Card Command Classess CCC                     :0x5b5
11:33:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:12: DSR(driver stage register)  DSR_IMP           :0x0
11:33:12: Reserv2                                       :0x0
11:33:12: Device Size C_SIZE                            :0xedc8
11:33:12: Reserv3                                       :0x0
11:33:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:12: Reserv4                                       :0x0
11:33:12: Write Speed Factor R2W_FACTOR                 :0x2
11:33:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:12: FILE_FORMAT_GRP                               :0x0
11:33:12: COPY flag                                     :0x1
11:33:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:12: File_Format                                   :0x0
11:33:12: CRC                                           :0x0
11:33:12: ####CSD Registe Values####  

11:33:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:12: [GetSCRRegisterEntry] Passed
11:33:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:12: Data_Status_After Erases          : 0
11:33:12: CPRM Security Support             : No Security
11:33:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:12: Spec. Version                     : Version 3.0X
11:33:12: Extended Security Support         : Extended_Security_Not_Supported
11:33:12: Command Support                   : COMMAND_SUPPORT
11:33:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627ABA0>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 4415 ] 
11:33:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x06269900>) , Command count = 4416 ] 
11:33:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:12: [ SetBusWidth(0x4) , Command count = 4417 ] 
11:33:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062168D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4418 ] 
11:33:12: Protected Area Size 0x28000
11:33:12: Bus Width           2
11:33:12: Secure Mode         0
11:33:12: Speed  Class        4
11:33:12: Perf Move           0
11:33:12: Au Size             9
11:33:12: Erase Size          15
11:33:12: Erase Timeout       1
11:33:12: Erase offset        1
11:33:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4419 ] 
11:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:12: Host Frequency set to 100000 KHz
11:33:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:12: ####CSD Registe 2.0 Values####
11:33:12: CSD_STRUCTURE                                 :0x1
11:33:12: Reserv1                                       :0x0
11:33:12: Time Access 1 TAAC                            :0xe
11:33:12: Time Access 2 NSAC*100                        :0x0
11:33:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:12: Card Command Classess CCC                     :0x5b5
11:33:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:12: DSR(driver stage register)  DSR_IMP           :0x0
11:33:12: Reserv2                                       :0x0
11:33:12: Device Size C_SIZE                            :0xedc8
11:33:12: Reserv3                                       :0x0
11:33:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:12: Reserv4                                       :0x0
11:33:12: Write Speed Factor R2W_FACTOR                 :0x2
11:33:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:12: FILE_FORMAT_GRP                               :0x0
11:33:12: COPY flag                                     :0x1
11:33:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:12: File_Format                                   :0x0
11:33:12: CRC                                           :0x0
11:33:12: ####CSD Registe Values####  

11:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D120>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 4420 ] 
11:33:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 4421 ] 
11:33:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF90>, <py_sfcl.PySEnhancedCmdData object at 0x0627D510>, <None>, <py_sfcl.Command23 object at 0x06312BA0>) , Command count = 4422 ] 
11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D300>, <py_sfcl.PySEnhancedCmdData object at 0x06312A50>, <None>, <py_sfcl.Command23 object at 0x06312F30>) , Command count = 4423 ] 
11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C30>, <py_sfcl.PySEnhancedCmdData object at 0x06268C60>, <None>, <py_sfcl.Command23 object at 0x06312D50>) , Command count = 4424 ] 
11:33:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:14: Host Frequency set to 25000 KHz
11:33:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:14: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 4425 ] 
11:33:14: [GO18_globalSetVolt]### Host voltage value is set.
11:33:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EFF60>, 0x0, False) , Command count = 4426 ] 
11:33:14: [GO18_globalSetVolt]### Host voltage value is set.
11:33:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4427 ] 
11:33:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4428 ] 
11:33:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4429 ] 
11:33:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C30>, <py_sfcl.CommandDataDefinition object at 0x06280180>) , Command count = 4430 ] 
11:33:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AB40>, <py_sfcl.CommandDataDefinition object at 0x0627AC30>) , Command count = 4431 ] 
11:33:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:14: [ SetCardRCA(0x1, 0xD555) , Command count = 4432 ] 
11:33:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:14: Host Frequency set to 25000 KHz
11:33:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:14: ####CSD Registe 2.0 Values####
11:33:14: CSD_STRUCTURE                                 :0x1
11:33:14: Reserv1                                       :0x0
11:33:14: Time Access 1 TAAC                            :0xe
11:33:14: Time Access 2 NSAC*100                        :0x0
11:33:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:14: Card Command Classess CCC                     :0x5b5
11:33:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:14: DSR(driver stage register)  DSR_IMP           :0x0
11:33:14: Reserv2                                       :0x0
11:33:14: Device Size C_SIZE                            :0xedc8
11:33:14: Reserv3                                       :0x0
11:33:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:14: Reserv4                                       :0x0
11:33:14: Write Speed Factor R2W_FACTOR                 :0x2
11:33:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:14: FILE_FORMAT_GRP                               :0x0
11:33:14: COPY flag                                     :0x1
11:33:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:14: File_Format                                   :0x0
11:33:14: CRC                                           :0x0
11:33:14: ####CSD Registe Values####  

11:33:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:14: [GetSCRRegisterEntry] Passed
11:33:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:14: Data_Status_After Erases          : 0
11:33:14: CPRM Security Support             : No Security
11:33:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:14: Spec. Version                     : Version 3.0X
11:33:14: Extended Security Support         : Extended_Security_Not_Supported
11:33:14: Command Support                   : COMMAND_SUPPORT
11:33:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A990>, <py_sfcl.CommandDataDefinition object at 0x06269180>) , Command count = 4433 ] 
11:33:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A300>, <py_sfcl.CommandDataDefinition object at 0x062692D0>) , Command count = 4434 ] 
11:33:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:14: [ SetBusWidth(0x4) , Command count = 4435 ] 
11:33:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4436 ] 
11:33:14: Protected Area Size 0x28000
11:33:14: Bus Width           2
11:33:14: Secure Mode         0
11:33:14: Speed  Class        4
11:33:14: Perf Move           0
11:33:14: Au Size             9
11:33:14: Erase Size          15
11:33:14: Erase Timeout       1
11:33:14: Erase offset        1
11:33:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4437 ] 
11:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:14: Host Frequency set to 100000 KHz
11:33:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:14: ####CSD Registe 2.0 Values####
11:33:14: CSD_STRUCTURE                                 :0x1
11:33:14: Reserv1                                       :0x0
11:33:14: Time Access 1 TAAC                            :0xe
11:33:14: Time Access 2 NSAC*100                        :0x0
11:33:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:14: Card Command Classess CCC                     :0x5b5
11:33:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:14: DSR(driver stage register)  DSR_IMP           :0x0
11:33:14: Reserv2                                       :0x0
11:33:14: Device Size C_SIZE                            :0xedc8
11:33:14: Reserv3                                       :0x0
11:33:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:14: Reserv4                                       :0x0
11:33:14: Write Speed Factor R2W_FACTOR                 :0x2
11:33:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:14: FILE_FORMAT_GRP                               :0x0
11:33:14: COPY flag                                     :0x1
11:33:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:14: File_Format                                   :0x0
11:33:14: CRC                                           :0x0
11:33:14: ####CSD Registe Values####  

11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627A1B0>) , Command count = 4438 ] 
11:33:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AAE0>, <py_sfcl.CommandDataDefinition object at 0x0627D3F0>) , Command count = 4439 ] 
11:33:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x06268090>) , Command count = 4440 ] 
11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x06268840>) , Command count = 4441 ] 
11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062685D0>, <py_sfcl.PySEnhancedCmdData object at 0x06268720>, <None>, <py_sfcl.Command23 object at 0x062680C0>) , Command count = 4442 ] 
11:33:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:17: Host Frequency set to 25000 KHz
11:33:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 4443 ] 
11:33:17: [GO18_globalSetVolt]### Host voltage value is set.
11:33:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273960>, 0x0, False) , Command count = 4444 ] 
11:33:17: [GO18_globalSetVolt]### Host voltage value is set.
11:33:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4445 ] 
11:33:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4446 ] 
11:33:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4447 ] 
11:33:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 4448 ] 
11:33:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x0627DC30>) , Command count = 4449 ] 
11:33:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:17: [ SetCardRCA(0x1, 0xD555) , Command count = 4450 ] 
11:33:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:17: Host Frequency set to 25000 KHz
11:33:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:17: ####CSD Registe 2.0 Values####
11:33:17: CSD_STRUCTURE                                 :0x1
11:33:17: Reserv1                                       :0x0
11:33:17: Time Access 1 TAAC                            :0xe
11:33:17: Time Access 2 NSAC*100                        :0x0
11:33:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:17: Card Command Classess CCC                     :0x5b5
11:33:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:17: DSR(driver stage register)  DSR_IMP           :0x0
11:33:17: Reserv2                                       :0x0
11:33:17: Device Size C_SIZE                            :0xedc8
11:33:17: Reserv3                                       :0x0
11:33:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:17: Reserv4                                       :0x0
11:33:17: Write Speed Factor R2W_FACTOR                 :0x2
11:33:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:17: FILE_FORMAT_GRP                               :0x0
11:33:17: COPY flag                                     :0x1
11:33:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:17: File_Format                                   :0x0
11:33:17: CRC                                           :0x0
11:33:17: ####CSD Registe Values####  

11:33:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:17: [GetSCRRegisterEntry] Passed
11:33:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:17: Data_Status_After Erases          : 0
11:33:17: CPRM Security Support             : No Security
11:33:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:17: Spec. Version                     : Version 3.0X
11:33:17: Extended Security Support         : Extended_Security_Not_Supported
11:33:17: Command Support                   : COMMAND_SUPPORT
11:33:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CC0>, <py_sfcl.CommandDataDefinition object at 0x0627D600>) , Command count = 4451 ] 
11:33:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216810>, <py_sfcl.CommandDataDefinition object at 0x0627D7E0>) , Command count = 4452 ] 
11:33:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:17: [ SetBusWidth(0x4) , Command count = 4453 ] 
11:33:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4454 ] 
11:33:17: Protected Area Size 0x28000
11:33:17: Bus Width           2
11:33:17: Secure Mode         0
11:33:17: Speed  Class        4
11:33:17: Perf Move           0
11:33:17: Au Size             9
11:33:17: Erase Size          15
11:33:17: Erase Timeout       1
11:33:17: Erase offset        1
11:33:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4455 ] 
11:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:17: Host Frequency set to 100000 KHz
11:33:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:17: ####CSD Registe 2.0 Values####
11:33:17: CSD_STRUCTURE                                 :0x1
11:33:17: Reserv1                                       :0x0
11:33:17: Time Access 1 TAAC                            :0xe
11:33:17: Time Access 2 NSAC*100                        :0x0
11:33:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:17: Card Command Classess CCC                     :0x5b5
11:33:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:17: DSR(driver stage register)  DSR_IMP           :0x0
11:33:17: Reserv2                                       :0x0
11:33:17: Device Size C_SIZE                            :0xedc8
11:33:17: Reserv3                                       :0x0
11:33:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:17: Reserv4                                       :0x0
11:33:17: Write Speed Factor R2W_FACTOR                 :0x2
11:33:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:17: FILE_FORMAT_GRP                               :0x0
11:33:17: COPY flag                                     :0x1
11:33:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:17: File_Format                                   :0x0
11:33:17: CRC                                           :0x0
11:33:17: ####CSD Registe Values####  

11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 4456 ] 
11:33:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269750>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 4457 ] 
11:33:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AE70>, <py_sfcl.PySEnhancedCmdData object at 0x0627AAE0>, <None>, <py_sfcl.Command23 object at 0x062688A0>) , Command count = 4458 ] 
11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x0627D330>, <None>, <py_sfcl.Command23 object at 0x0627ACF0>) , Command count = 4459 ] 
11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268F30>, <py_sfcl.PySEnhancedCmdData object at 0x06273F60>, <None>, <py_sfcl.Command23 object at 0x06324060>) , Command count = 4460 ] 
11:33:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:19: Host Frequency set to 25000 KHz
11:33:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 4461 ] 
11:33:19: [GO18_globalSetVolt]### Host voltage value is set.
11:33:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x062764B0>, 0x0, False) , Command count = 4462 ] 
11:33:19: [GO18_globalSetVolt]### Host voltage value is set.
11:33:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4463 ] 
11:33:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4464 ] 
11:33:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4465 ] 
11:33:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B10>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 4466 ] 
11:33:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A330>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 4467 ] 
11:33:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:20: [ SetCardRCA(0x1, 0xD555) , Command count = 4468 ] 
11:33:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:20: Host Frequency set to 25000 KHz
11:33:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:20: ####CSD Registe 2.0 Values####
11:33:20: CSD_STRUCTURE                                 :0x1
11:33:20: Reserv1                                       :0x0
11:33:20: Time Access 1 TAAC                            :0xe
11:33:20: Time Access 2 NSAC*100                        :0x0
11:33:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:20: Card Command Classess CCC                     :0x5b5
11:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:20: DSR(driver stage register)  DSR_IMP           :0x0
11:33:20: Reserv2                                       :0x0
11:33:20: Device Size C_SIZE                            :0xedc8
11:33:20: Reserv3                                       :0x0
11:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:20: Reserv4                                       :0x0
11:33:20: Write Speed Factor R2W_FACTOR                 :0x2
11:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:20: FILE_FORMAT_GRP                               :0x0
11:33:20: COPY flag                                     :0x1
11:33:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:20: File_Format                                   :0x0
11:33:20: CRC                                           :0x0
11:33:20: ####CSD Registe Values####  

11:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:20: [GetSCRRegisterEntry] Passed
11:33:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:20: Data_Status_After Erases          : 0
11:33:20: CPRM Security Support             : No Security
11:33:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:20: Spec. Version                     : Version 3.0X
11:33:20: Extended Security Support         : Extended_Security_Not_Supported
11:33:20: Command Support                   : COMMAND_SUPPORT
11:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E10>, <py_sfcl.CommandDataDefinition object at 0x06269120>) , Command count = 4469 ] 
11:33:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x06268660>) , Command count = 4470 ] 
11:33:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:20: [ SetBusWidth(0x4) , Command count = 4471 ] 
11:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4472 ] 
11:33:20: Protected Area Size 0x28000
11:33:20: Bus Width           2
11:33:20: Secure Mode         0
11:33:20: Speed  Class        4
11:33:20: Perf Move           0
11:33:20: Au Size             9
11:33:20: Erase Size          15
11:33:20: Erase Timeout       1
11:33:20: Erase offset        1
11:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4473 ] 
11:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:20: Host Frequency set to 100000 KHz
11:33:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:20: ####CSD Registe 2.0 Values####
11:33:20: CSD_STRUCTURE                                 :0x1
11:33:20: Reserv1                                       :0x0
11:33:20: Time Access 1 TAAC                            :0xe
11:33:20: Time Access 2 NSAC*100                        :0x0
11:33:20: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:20: Card Command Classess CCC                     :0x5b5
11:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:20: DSR(driver stage register)  DSR_IMP           :0x0
11:33:20: Reserv2                                       :0x0
11:33:20: Device Size C_SIZE                            :0xedc8
11:33:20: Reserv3                                       :0x0
11:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:20: Reserv4                                       :0x0
11:33:20: Write Speed Factor R2W_FACTOR                 :0x2
11:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:20: FILE_FORMAT_GRP                               :0x0
11:33:20: COPY flag                                     :0x1
11:33:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:20: File_Format                                   :0x0
11:33:20: CRC                                           :0x0
11:33:20: ####CSD Registe Values####  

11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 4474 ] 
11:33:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AFC0>, <py_sfcl.CommandDataDefinition object at 0x06268F90>) , Command count = 4475 ] 
11:33:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0627D6F0>, <None>, <py_sfcl.Command23 object at 0x06280150>) , Command count = 4476 ] 
11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273ED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062733C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D780>, <None>, <py_sfcl.Command23 object at 0x0627DDE0>) , Command count = 4477 ] 
11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062697E0>, <py_sfcl.PySEnhancedCmdData object at 0x06324180>, <None>, <py_sfcl.Command23 object at 0x0627D480>) , Command count = 4478 ] 
11:33:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:20: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:22: Host Frequency set to 25000 KHz
11:33:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:22: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 4479 ] 
11:33:22: [GO18_globalSetVolt]### Host voltage value is set.
11:33:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D3C0>, 0x0, False) , Command count = 4480 ] 
11:33:22: [GO18_globalSetVolt]### Host voltage value is set.
11:33:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4481 ] 
11:33:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4482 ] 
11:33:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4483 ] 
11:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 4484 ] 
11:33:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x06269E10>) , Command count = 4485 ] 
11:33:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:22: [ SetCardRCA(0x1, 0xD555) , Command count = 4486 ] 
11:33:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:23: Host Frequency set to 25000 KHz
11:33:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:23: ####CSD Registe 2.0 Values####
11:33:23: CSD_STRUCTURE                                 :0x1
11:33:23: Reserv1                                       :0x0
11:33:23: Time Access 1 TAAC                            :0xe
11:33:23: Time Access 2 NSAC*100                        :0x0
11:33:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:23: Card Command Classess CCC                     :0x5b5
11:33:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:23: DSR(driver stage register)  DSR_IMP           :0x0
11:33:23: Reserv2                                       :0x0
11:33:23: Device Size C_SIZE                            :0xedc8
11:33:23: Reserv3                                       :0x0
11:33:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:23: Reserv4                                       :0x0
11:33:23: Write Speed Factor R2W_FACTOR                 :0x2
11:33:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:23: FILE_FORMAT_GRP                               :0x0
11:33:23: COPY flag                                     :0x1
11:33:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:23: File_Format                                   :0x0
11:33:23: CRC                                           :0x0
11:33:23: ####CSD Registe Values####  

11:33:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:23: [GetSCRRegisterEntry] Passed
11:33:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:23: Data_Status_After Erases          : 0
11:33:23: CPRM Security Support             : No Security
11:33:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:23: Spec. Version                     : Version 3.0X
11:33:23: Extended Security Support         : Extended_Security_Not_Supported
11:33:23: Command Support                   : COMMAND_SUPPORT
11:33:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 4487 ] 
11:33:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x06269E70>) , Command count = 4488 ] 
11:33:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:23: [ SetBusWidth(0x4) , Command count = 4489 ] 
11:33:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4490 ] 
11:33:23: Protected Area Size 0x28000
11:33:23: Bus Width           2
11:33:23: Secure Mode         0
11:33:23: Speed  Class        4
11:33:23: Perf Move           0
11:33:23: Au Size             9
11:33:23: Erase Size          15
11:33:23: Erase Timeout       1
11:33:23: Erase offset        1
11:33:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4491 ] 
11:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:23: Host Frequency set to 100000 KHz
11:33:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:23: ####CSD Registe 2.0 Values####
11:33:23: CSD_STRUCTURE                                 :0x1
11:33:23: Reserv1                                       :0x0
11:33:23: Time Access 1 TAAC                            :0xe
11:33:23: Time Access 2 NSAC*100                        :0x0
11:33:23: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:23: Card Command Classess CCC                     :0x5b5
11:33:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:23: DSR(driver stage register)  DSR_IMP           :0x0
11:33:23: Reserv2                                       :0x0
11:33:23: Device Size C_SIZE                            :0xedc8
11:33:23: Reserv3                                       :0x0
11:33:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:23: Reserv4                                       :0x0
11:33:23: Write Speed Factor R2W_FACTOR                 :0x2
11:33:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:23: FILE_FORMAT_GRP                               :0x0
11:33:23: COPY flag                                     :0x1
11:33:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:23: File_Format                                   :0x0
11:33:23: CRC                                           :0x0
11:33:23: ####CSD Registe Values####  

11:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273630>, <py_sfcl.CommandDataDefinition object at 0x052C4030>) , Command count = 4492 ] 
11:33:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D4E0>, <py_sfcl.CommandDataDefinition object at 0x0626D7B0>) , Command count = 4493 ] 
11:33:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D840>, <py_sfcl.PySEnhancedCmdData object at 0x06269390>, <None>, <py_sfcl.Command23 object at 0x06269E70>) , Command count = 4494 ] 
11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269E40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06324180>, <None>, <py_sfcl.Command23 object at 0x06269CF0>) , Command count = 4495 ] 
11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324120>, <py_sfcl.PySEnhancedCmdData object at 0x063240F0>, <None>, <py_sfcl.Command23 object at 0x063241E0>) , Command count = 4496 ] 
11:33:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:25: Host Frequency set to 25000 KHz
11:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x062691B0>, 0x0, True) , Command count = 4497 ] 
11:33:25: [GO18_globalSetVolt]### Host voltage value is set.
11:33:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8A0>, 0x0, False) , Command count = 4498 ] 
11:33:25: [GO18_globalSetVolt]### Host voltage value is set.
11:33:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4499 ] 
11:33:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4500 ] 
11:33:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4501 ] 
11:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 4502 ] 
11:33:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C00>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 4503 ] 
11:33:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4504 ] 
11:33:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:25: Host Frequency set to 25000 KHz
11:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:25: ####CSD Registe 2.0 Values####
11:33:25: CSD_STRUCTURE                                 :0x1
11:33:25: Reserv1                                       :0x0
11:33:25: Time Access 1 TAAC                            :0xe
11:33:25: Time Access 2 NSAC*100                        :0x0
11:33:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:25: Card Command Classess CCC                     :0x5b5
11:33:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:25: DSR(driver stage register)  DSR_IMP           :0x0
11:33:25: Reserv2                                       :0x0
11:33:25: Device Size C_SIZE                            :0xedc8
11:33:25: Reserv3                                       :0x0
11:33:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:25: Reserv4                                       :0x0
11:33:25: Write Speed Factor R2W_FACTOR                 :0x2
11:33:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:25: FILE_FORMAT_GRP                               :0x0
11:33:25: COPY flag                                     :0x1
11:33:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:25: File_Format                                   :0x0
11:33:25: CRC                                           :0x0
11:33:25: ####CSD Registe Values####  

11:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:25: [GetSCRRegisterEntry] Passed
11:33:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:25: Data_Status_After Erases          : 0
11:33:25: CPRM Security Support             : No Security
11:33:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:25: Spec. Version                     : Version 3.0X
11:33:25: Extended Security Support         : Extended_Security_Not_Supported
11:33:25: Command Support                   : COMMAND_SUPPORT
11:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06269810>) , Command count = 4505 ] 
11:33:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D6C0>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 4506 ] 
11:33:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:25: [ SetBusWidth(0x4) , Command count = 4507 ] 
11:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4508 ] 
11:33:25: Protected Area Size 0x28000
11:33:25: Bus Width           2
11:33:25: Secure Mode         0
11:33:25: Speed  Class        4
11:33:25: Perf Move           0
11:33:25: Au Size             9
11:33:25: Erase Size          15
11:33:25: Erase Timeout       1
11:33:25: Erase offset        1
11:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4509 ] 
11:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:25: Host Frequency set to 100000 KHz
11:33:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:25: ####CSD Registe 2.0 Values####
11:33:25: CSD_STRUCTURE                                 :0x1
11:33:25: Reserv1                                       :0x0
11:33:25: Time Access 1 TAAC                            :0xe
11:33:25: Time Access 2 NSAC*100                        :0x0
11:33:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:25: Card Command Classess CCC                     :0x5b5
11:33:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:25: DSR(driver stage register)  DSR_IMP           :0x0
11:33:25: Reserv2                                       :0x0
11:33:25: Device Size C_SIZE                            :0xedc8
11:33:25: Reserv3                                       :0x0
11:33:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:25: Reserv4                                       :0x0
11:33:25: Write Speed Factor R2W_FACTOR                 :0x2
11:33:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:25: FILE_FORMAT_GRP                               :0x0
11:33:25: COPY flag                                     :0x1
11:33:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:25: File_Format                                   :0x0
11:33:25: CRC                                           :0x0
11:33:25: ####CSD Registe Values####  

11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 4510 ] 
11:33:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 4511 ] 
11:33:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062691E0>, <py_sfcl.PySEnhancedCmdData object at 0x06269D80>, <None>, <py_sfcl.Command23 object at 0x06269030>) , Command count = 4512 ] 
11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063241E0>, <py_sfcl.PySEnhancedCmdData object at 0x06324150>, <None>, <py_sfcl.Command23 object at 0x06269DB0>) , Command count = 4513 ] 
11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324360>, <py_sfcl.PySEnhancedCmdData object at 0x06324390>, <None>, <py_sfcl.Command23 object at 0x063243F0>) , Command count = 4514 ] 
11:33:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:25: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:28: Host Frequency set to 25000 KHz
11:33:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 4515 ] 
11:33:28: [GO18_globalSetVolt]### Host voltage value is set.
11:33:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C90>, 0x0, False) , Command count = 4516 ] 
11:33:28: [GO18_globalSetVolt]### Host voltage value is set.
11:33:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4517 ] 
11:33:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4518 ] 
11:33:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4519 ] 
11:33:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x06269A20>) , Command count = 4520 ] 
11:33:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 4521 ] 
11:33:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:28: [ SetCardRCA(0x1, 0xD555) , Command count = 4522 ] 
11:33:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:28: Host Frequency set to 25000 KHz
11:33:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:28: ####CSD Registe 2.0 Values####
11:33:28: CSD_STRUCTURE                                 :0x1
11:33:28: Reserv1                                       :0x0
11:33:28: Time Access 1 TAAC                            :0xe
11:33:28: Time Access 2 NSAC*100                        :0x0
11:33:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:28: Card Command Classess CCC                     :0x5b5
11:33:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:28: DSR(driver stage register)  DSR_IMP           :0x0
11:33:28: Reserv2                                       :0x0
11:33:28: Device Size C_SIZE                            :0xedc8
11:33:28: Reserv3                                       :0x0
11:33:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:28: Reserv4                                       :0x0
11:33:28: Write Speed Factor R2W_FACTOR                 :0x2
11:33:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:28: FILE_FORMAT_GRP                               :0x0
11:33:28: COPY flag                                     :0x1
11:33:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:28: File_Format                                   :0x0
11:33:28: CRC                                           :0x0
11:33:28: ####CSD Registe Values####  

11:33:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:28: [GetSCRRegisterEntry] Passed
11:33:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:28: Data_Status_After Erases          : 0
11:33:28: CPRM Security Support             : No Security
11:33:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:28: Spec. Version                     : Version 3.0X
11:33:28: Extended Security Support         : Extended_Security_Not_Supported
11:33:28: Command Support                   : COMMAND_SUPPORT
11:33:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 4523 ] 
11:33:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695D0>, <py_sfcl.CommandDataDefinition object at 0x0627A0F0>) , Command count = 4524 ] 
11:33:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:28: [ SetBusWidth(0x4) , Command count = 4525 ] 
11:33:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062698A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4526 ] 
11:33:28: Protected Area Size 0x28000
11:33:28: Bus Width           2
11:33:28: Secure Mode         0
11:33:28: Speed  Class        4
11:33:28: Perf Move           0
11:33:28: Au Size             9
11:33:28: Erase Size          15
11:33:28: Erase Timeout       1
11:33:28: Erase offset        1
11:33:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4527 ] 
11:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:28: Host Frequency set to 100000 KHz
11:33:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:28: ####CSD Registe 2.0 Values####
11:33:28: CSD_STRUCTURE                                 :0x1
11:33:28: Reserv1                                       :0x0
11:33:28: Time Access 1 TAAC                            :0xe
11:33:28: Time Access 2 NSAC*100                        :0x0
11:33:28: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:28: Card Command Classess CCC                     :0x5b5
11:33:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:28: DSR(driver stage register)  DSR_IMP           :0x0
11:33:28: Reserv2                                       :0x0
11:33:28: Device Size C_SIZE                            :0xedc8
11:33:28: Reserv3                                       :0x0
11:33:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:28: Reserv4                                       :0x0
11:33:28: Write Speed Factor R2W_FACTOR                 :0x2
11:33:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:28: FILE_FORMAT_GRP                               :0x0
11:33:28: COPY flag                                     :0x1
11:33:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:28: File_Format                                   :0x0
11:33:28: CRC                                           :0x0
11:33:28: ####CSD Registe Values####  

11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 4528 ] 
11:33:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA20>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 4529 ] 
11:33:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D360>, <None>, <py_sfcl.Command23 object at 0x0626D630>) , Command count = 4530 ] 
11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273690>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBD0>, <None>, <py_sfcl.Command23 object at 0x0626DC60>) , Command count = 4531 ] 
11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062769C0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC00>, <None>, <py_sfcl.Command23 object at 0x063245D0>) , Command count = 4532 ] 
11:33:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:28: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:30: Host Frequency set to 25000 KHz
11:33:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:30: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x062696F0>, 0x0, True) , Command count = 4533 ] 
11:33:30: [GO18_globalSetVolt]### Host voltage value is set.
11:33:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AB0>, 0x0, False) , Command count = 4534 ] 
11:33:30: [GO18_globalSetVolt]### Host voltage value is set.
11:33:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4535 ] 
11:33:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4536 ] 
11:33:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4537 ] 
11:33:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B10>, <py_sfcl.CommandDataDefinition object at 0x0626D540>) , Command count = 4538 ] 
11:33:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06273BD0>) , Command count = 4539 ] 
11:33:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:31: [ SetCardRCA(0x1, 0xD555) , Command count = 4540 ] 
11:33:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:31: Host Frequency set to 25000 KHz
11:33:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:31: ####CSD Registe 2.0 Values####
11:33:31: CSD_STRUCTURE                                 :0x1
11:33:31: Reserv1                                       :0x0
11:33:31: Time Access 1 TAAC                            :0xe
11:33:31: Time Access 2 NSAC*100                        :0x0
11:33:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:31: Card Command Classess CCC                     :0x5b5
11:33:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:31: DSR(driver stage register)  DSR_IMP           :0x0
11:33:31: Reserv2                                       :0x0
11:33:31: Device Size C_SIZE                            :0xedc8
11:33:31: Reserv3                                       :0x0
11:33:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:31: Reserv4                                       :0x0
11:33:31: Write Speed Factor R2W_FACTOR                 :0x2
11:33:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:31: FILE_FORMAT_GRP                               :0x0
11:33:31: COPY flag                                     :0x1
11:33:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:31: File_Format                                   :0x0
11:33:31: CRC                                           :0x0
11:33:31: ####CSD Registe Values####  

11:33:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:31: [GetSCRRegisterEntry] Passed
11:33:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:31: Data_Status_After Erases          : 0
11:33:31: CPRM Security Support             : No Security
11:33:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:31: Spec. Version                     : Version 3.0X
11:33:31: Extended Security Support         : Extended_Security_Not_Supported
11:33:31: Command Support                   : COMMAND_SUPPORT
11:33:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 4541 ] 
11:33:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D7B0>, <py_sfcl.CommandDataDefinition object at 0x0626D990>) , Command count = 4542 ] 
11:33:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:31: [ SetBusWidth(0x4) , Command count = 4543 ] 
11:33:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4544 ] 
11:33:31: Protected Area Size 0x28000
11:33:31: Bus Width           2
11:33:31: Secure Mode         0
11:33:31: Speed  Class        4
11:33:31: Perf Move           0
11:33:31: Au Size             9
11:33:31: Erase Size          15
11:33:31: Erase Timeout       1
11:33:31: Erase offset        1
11:33:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4545 ] 
11:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:31: Host Frequency set to 100000 KHz
11:33:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:31: ####CSD Registe 2.0 Values####
11:33:31: CSD_STRUCTURE                                 :0x1
11:33:31: Reserv1                                       :0x0
11:33:31: Time Access 1 TAAC                            :0xe
11:33:31: Time Access 2 NSAC*100                        :0x0
11:33:31: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:31: Card Command Classess CCC                     :0x5b5
11:33:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:31: DSR(driver stage register)  DSR_IMP           :0x0
11:33:31: Reserv2                                       :0x0
11:33:31: Device Size C_SIZE                            :0xedc8
11:33:31: Reserv3                                       :0x0
11:33:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:31: Reserv4                                       :0x0
11:33:31: Write Speed Factor R2W_FACTOR                 :0x2
11:33:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:31: FILE_FORMAT_GRP                               :0x0
11:33:31: COPY flag                                     :0x1
11:33:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:31: File_Format                                   :0x0
11:33:31: CRC                                           :0x0
11:33:31: ####CSD Registe Values####  

11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAB0>, <py_sfcl.CommandDataDefinition object at 0x0627A870>) , Command count = 4546 ] 
11:33:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B70>, <py_sfcl.CommandDataDefinition object at 0x0626D7E0>) , Command count = 4547 ] 
11:33:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DCF0>, <py_sfcl.PySEnhancedCmdData object at 0x06273570>, <None>, <py_sfcl.Command23 object at 0x062732D0>) , Command count = 4548 ] 
11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324450>, <py_sfcl.PySEnhancedCmdData object at 0x06324600>, <None>, <py_sfcl.Command23 object at 0x06273BD0>) , Command count = 4549 ] 
11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062734E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A060>, <None>, <py_sfcl.Command23 object at 0x06324540>) , Command count = 4550 ] 
11:33:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:33: Host Frequency set to 25000 KHz
11:33:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273480>, 0x0, True) , Command count = 4551 ] 
11:33:33: [GO18_globalSetVolt]### Host voltage value is set.
11:33:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273330>, 0x0, False) , Command count = 4552 ] 
11:33:33: [GO18_globalSetVolt]### Host voltage value is set.
11:33:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4553 ] 
11:33:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4554 ] 
11:33:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4555 ] 
11:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 4556 ] 
11:33:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 4557 ] 
11:33:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:33: [ SetCardRCA(0x1, 0xD555) , Command count = 4558 ] 
11:33:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:33: Host Frequency set to 25000 KHz
11:33:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:33: ####CSD Registe 2.0 Values####
11:33:33: CSD_STRUCTURE                                 :0x1
11:33:33: Reserv1                                       :0x0
11:33:33: Time Access 1 TAAC                            :0xe
11:33:33: Time Access 2 NSAC*100                        :0x0
11:33:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:33: Card Command Classess CCC                     :0x5b5
11:33:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:33: DSR(driver stage register)  DSR_IMP           :0x0
11:33:33: Reserv2                                       :0x0
11:33:33: Device Size C_SIZE                            :0xedc8
11:33:33: Reserv3                                       :0x0
11:33:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:33: Reserv4                                       :0x0
11:33:33: Write Speed Factor R2W_FACTOR                 :0x2
11:33:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:33: FILE_FORMAT_GRP                               :0x0
11:33:33: COPY flag                                     :0x1
11:33:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:33: File_Format                                   :0x0
11:33:33: CRC                                           :0x0
11:33:33: ####CSD Registe Values####  

11:33:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:33: [GetSCRRegisterEntry] Passed
11:33:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:33: Data_Status_After Erases          : 0
11:33:33: CPRM Security Support             : No Security
11:33:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:33: Spec. Version                     : Version 3.0X
11:33:33: Extended Security Support         : Extended_Security_Not_Supported
11:33:33: Command Support                   : COMMAND_SUPPORT
11:33:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 4559 ] 
11:33:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AE0>, <py_sfcl.CommandDataDefinition object at 0x0626D390>) , Command count = 4560 ] 
11:33:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:33: [ SetBusWidth(0x4) , Command count = 4561 ] 
11:33:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4562 ] 
11:33:33: Protected Area Size 0x28000
11:33:33: Bus Width           2
11:33:33: Secure Mode         0
11:33:33: Speed  Class        4
11:33:33: Perf Move           0
11:33:33: Au Size             9
11:33:33: Erase Size          15
11:33:33: Erase Timeout       1
11:33:33: Erase offset        1
11:33:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4563 ] 
11:33:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:34: Host Frequency set to 100000 KHz
11:33:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:34: ####CSD Registe 2.0 Values####
11:33:34: CSD_STRUCTURE                                 :0x1
11:33:34: Reserv1                                       :0x0
11:33:34: Time Access 1 TAAC                            :0xe
11:33:34: Time Access 2 NSAC*100                        :0x0
11:33:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:34: Card Command Classess CCC                     :0x5b5
11:33:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:34: DSR(driver stage register)  DSR_IMP           :0x0
11:33:34: Reserv2                                       :0x0
11:33:34: Device Size C_SIZE                            :0xedc8
11:33:34: Reserv3                                       :0x0
11:33:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:34: Reserv4                                       :0x0
11:33:34: Write Speed Factor R2W_FACTOR                 :0x2
11:33:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:34: FILE_FORMAT_GRP                               :0x0
11:33:34: COPY flag                                     :0x1
11:33:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:34: File_Format                                   :0x0
11:33:34: CRC                                           :0x0
11:33:34: ####CSD Registe Values####  

11:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 4564 ] 
11:33:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BA0>, <py_sfcl.CommandDataDefinition object at 0x0626D960>) , Command count = 4565 ] 
11:33:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD50>, <None>, <py_sfcl.Command23 object at 0x06324570>) , Command count = 4566 ] 
11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x062762A0>, <None>, <py_sfcl.Command23 object at 0x0626D5A0>) , Command count = 4567 ] 
11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062699F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324690>, <py_sfcl.PySEnhancedCmdData object at 0x063246C0>, <None>, <py_sfcl.Command23 object at 0x06324660>) , Command count = 4568 ] 
11:33:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:36: Host Frequency set to 25000 KHz
11:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 4569 ] 
11:33:36: [GO18_globalSetVolt]### Host voltage value is set.
11:33:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DB70>, 0x0, False) , Command count = 4570 ] 
11:33:36: [GO18_globalSetVolt]### Host voltage value is set.
11:33:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4571 ] 
11:33:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4572 ] 
11:33:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4573 ] 
11:33:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A600>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 4574 ] 
11:33:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 4575 ] 
11:33:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:36: [ SetCardRCA(0x1, 0xD555) , Command count = 4576 ] 
11:33:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:36: Host Frequency set to 25000 KHz
11:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:36: ####CSD Registe 2.0 Values####
11:33:36: CSD_STRUCTURE                                 :0x1
11:33:36: Reserv1                                       :0x0
11:33:36: Time Access 1 TAAC                            :0xe
11:33:36: Time Access 2 NSAC*100                        :0x0
11:33:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:36: Card Command Classess CCC                     :0x5b5
11:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:36: DSR(driver stage register)  DSR_IMP           :0x0
11:33:36: Reserv2                                       :0x0
11:33:36: Device Size C_SIZE                            :0xedc8
11:33:36: Reserv3                                       :0x0
11:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:36: Reserv4                                       :0x0
11:33:36: Write Speed Factor R2W_FACTOR                 :0x2
11:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:36: FILE_FORMAT_GRP                               :0x0
11:33:36: COPY flag                                     :0x1
11:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:36: File_Format                                   :0x0
11:33:36: CRC                                           :0x0
11:33:36: ####CSD Registe Values####  

11:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:36: [GetSCRRegisterEntry] Passed
11:33:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:36: Data_Status_After Erases          : 0
11:33:36: CPRM Security Support             : No Security
11:33:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:36: Spec. Version                     : Version 3.0X
11:33:36: Extended Security Support         : Extended_Security_Not_Supported
11:33:36: Command Support                   : COMMAND_SUPPORT
11:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x0626DF00>) , Command count = 4577 ] 
11:33:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273840>, <py_sfcl.CommandDataDefinition object at 0x06276510>) , Command count = 4578 ] 
11:33:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:36: [ SetBusWidth(0x4) , Command count = 4579 ] 
11:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4580 ] 
11:33:36: Protected Area Size 0x28000
11:33:36: Bus Width           2
11:33:36: Secure Mode         0
11:33:36: Speed  Class        4
11:33:36: Perf Move           0
11:33:36: Au Size             9
11:33:36: Erase Size          15
11:33:36: Erase Timeout       1
11:33:36: Erase offset        1
11:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4581 ] 
11:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:36: Host Frequency set to 100000 KHz
11:33:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:36: ####CSD Registe 2.0 Values####
11:33:36: CSD_STRUCTURE                                 :0x1
11:33:36: Reserv1                                       :0x0
11:33:36: Time Access 1 TAAC                            :0xe
11:33:36: Time Access 2 NSAC*100                        :0x0
11:33:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:36: Card Command Classess CCC                     :0x5b5
11:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:36: DSR(driver stage register)  DSR_IMP           :0x0
11:33:36: Reserv2                                       :0x0
11:33:36: Device Size C_SIZE                            :0xedc8
11:33:36: Reserv3                                       :0x0
11:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:36: Reserv4                                       :0x0
11:33:36: Write Speed Factor R2W_FACTOR                 :0x2
11:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:36: FILE_FORMAT_GRP                               :0x0
11:33:36: COPY flag                                     :0x1
11:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:36: File_Format                                   :0x0
11:33:36: CRC                                           :0x0
11:33:36: ####CSD Registe Values####  

11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 4582 ] 
11:33:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x062764E0>) , Command count = 4583 ] 
11:33:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276210>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DC00>, <None>, <py_sfcl.Command23 object at 0x0627D0C0>) , Command count = 4584 ] 
11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062730C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x0627DA80>) , Command count = 4585 ] 
11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312900>, <py_sfcl.PySEnhancedCmdData object at 0x06324810>, <None>, <py_sfcl.Command23 object at 0x06324720>) , Command count = 4586 ] 
11:33:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:38: Host Frequency set to 25000 KHz
11:33:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 4587 ] 
11:33:38: [GO18_globalSetVolt]### Host voltage value is set.
11:33:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DB70>, 0x0, False) , Command count = 4588 ] 
11:33:38: [GO18_globalSetVolt]### Host voltage value is set.
11:33:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4589 ] 
11:33:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4590 ] 
11:33:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4591 ] 
11:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x06276900>) , Command count = 4592 ] 
11:33:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C00>, <py_sfcl.CommandDataDefinition object at 0x06276990>) , Command count = 4593 ] 
11:33:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:39: [ SetCardRCA(0x1, 0xD555) , Command count = 4594 ] 
11:33:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:39: Host Frequency set to 25000 KHz
11:33:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:39: ####CSD Registe 2.0 Values####
11:33:39: CSD_STRUCTURE                                 :0x1
11:33:39: Reserv1                                       :0x0
11:33:39: Time Access 1 TAAC                            :0xe
11:33:39: Time Access 2 NSAC*100                        :0x0
11:33:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:39: Card Command Classess CCC                     :0x5b5
11:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:39: DSR(driver stage register)  DSR_IMP           :0x0
11:33:39: Reserv2                                       :0x0
11:33:39: Device Size C_SIZE                            :0xedc8
11:33:39: Reserv3                                       :0x0
11:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:39: Reserv4                                       :0x0
11:33:39: Write Speed Factor R2W_FACTOR                 :0x2
11:33:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:39: FILE_FORMAT_GRP                               :0x0
11:33:39: COPY flag                                     :0x1
11:33:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:39: File_Format                                   :0x0
11:33:39: CRC                                           :0x0
11:33:39: ####CSD Registe Values####  

11:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:39: [GetSCRRegisterEntry] Passed
11:33:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:39: Data_Status_After Erases          : 0
11:33:39: CPRM Security Support             : No Security
11:33:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:39: Spec. Version                     : Version 3.0X
11:33:39: Extended Security Support         : Extended_Security_Not_Supported
11:33:39: Command Support                   : COMMAND_SUPPORT
11:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 4595 ] 
11:33:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x06276C90>) , Command count = 4596 ] 
11:33:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:39: [ SetBusWidth(0x4) , Command count = 4597 ] 
11:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06312D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4598 ] 
11:33:39: Protected Area Size 0x28000
11:33:39: Bus Width           2
11:33:39: Secure Mode         0
11:33:39: Speed  Class        4
11:33:39: Perf Move           0
11:33:39: Au Size             9
11:33:39: Erase Size          15
11:33:39: Erase Timeout       1
11:33:39: Erase offset        1
11:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4599 ] 
11:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:39: Host Frequency set to 100000 KHz
11:33:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:39: ####CSD Registe 2.0 Values####
11:33:39: CSD_STRUCTURE                                 :0x1
11:33:39: Reserv1                                       :0x0
11:33:39: Time Access 1 TAAC                            :0xe
11:33:39: Time Access 2 NSAC*100                        :0x0
11:33:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:39: Card Command Classess CCC                     :0x5b5
11:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:39: DSR(driver stage register)  DSR_IMP           :0x0
11:33:39: Reserv2                                       :0x0
11:33:39: Device Size C_SIZE                            :0xedc8
11:33:39: Reserv3                                       :0x0
11:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:39: Reserv4                                       :0x0
11:33:39: Write Speed Factor R2W_FACTOR                 :0x2
11:33:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:39: FILE_FORMAT_GRP                               :0x0
11:33:39: COPY flag                                     :0x1
11:33:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:39: File_Format                                   :0x0
11:33:39: CRC                                           :0x0
11:33:39: ####CSD Registe Values####  

11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 4600 ] 
11:33:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x06276ED0>) , Command count = 4601 ] 
11:33:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062765A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276EA0>, <py_sfcl.PySEnhancedCmdData object at 0x062768D0>, <None>, <py_sfcl.Command23 object at 0x0627A8A0>) , Command count = 4602 ] 
11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x06273A20>) , Command count = 4603 ] 
11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312CF0>, <py_sfcl.PySEnhancedCmdData object at 0x063249F0>, <None>, <py_sfcl.Command23 object at 0x0627DE40>) , Command count = 4604 ] 
11:33:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:39: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:41: Host Frequency set to 25000 KHz
11:33:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:41: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 4605 ] 
11:33:41: [GO18_globalSetVolt]### Host voltage value is set.
11:33:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DD20>, 0x0, False) , Command count = 4606 ] 
11:33:41: [GO18_globalSetVolt]### Host voltage value is set.
11:33:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4607 ] 
11:33:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4608 ] 
11:33:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4609 ] 
11:33:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 4610 ] 
11:33:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x06273F90>) , Command count = 4611 ] 
11:33:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4612 ] 
11:33:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:42: Host Frequency set to 25000 KHz
11:33:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:42: ####CSD Registe 2.0 Values####
11:33:42: CSD_STRUCTURE                                 :0x1
11:33:42: Reserv1                                       :0x0
11:33:42: Time Access 1 TAAC                            :0xe
11:33:42: Time Access 2 NSAC*100                        :0x0
11:33:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:42: Card Command Classess CCC                     :0x5b5
11:33:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:42: DSR(driver stage register)  DSR_IMP           :0x0
11:33:42: Reserv2                                       :0x0
11:33:42: Device Size C_SIZE                            :0xedc8
11:33:42: Reserv3                                       :0x0
11:33:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:42: Reserv4                                       :0x0
11:33:42: Write Speed Factor R2W_FACTOR                 :0x2
11:33:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:42: FILE_FORMAT_GRP                               :0x0
11:33:42: COPY flag                                     :0x1
11:33:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:42: File_Format                                   :0x0
11:33:42: CRC                                           :0x0
11:33:42: ####CSD Registe Values####  

11:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:42: [GetSCRRegisterEntry] Passed
11:33:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:42: Data_Status_After Erases          : 0
11:33:42: CPRM Security Support             : No Security
11:33:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:42: Spec. Version                     : Version 3.0X
11:33:42: Extended Security Support         : Extended_Security_Not_Supported
11:33:42: Command Support                   : COMMAND_SUPPORT
11:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 4613 ] 
11:33:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 4614 ] 
11:33:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:42: [ SetBusWidth(0x4) , Command count = 4615 ] 
11:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627DED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4616 ] 
11:33:42: Protected Area Size 0x28000
11:33:42: Bus Width           2
11:33:42: Secure Mode         0
11:33:42: Speed  Class        4
11:33:42: Perf Move           0
11:33:42: Au Size             9
11:33:42: Erase Size          15
11:33:42: Erase Timeout       1
11:33:42: Erase offset        1
11:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4617 ] 
11:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:42: Host Frequency set to 100000 KHz
11:33:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:42: ####CSD Registe 2.0 Values####
11:33:42: CSD_STRUCTURE                                 :0x1
11:33:42: Reserv1                                       :0x0
11:33:42: Time Access 1 TAAC                            :0xe
11:33:42: Time Access 2 NSAC*100                        :0x0
11:33:42: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:42: Card Command Classess CCC                     :0x5b5
11:33:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:42: DSR(driver stage register)  DSR_IMP           :0x0
11:33:42: Reserv2                                       :0x0
11:33:42: Device Size C_SIZE                            :0xedc8
11:33:42: Reserv3                                       :0x0
11:33:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:42: Reserv4                                       :0x0
11:33:42: Write Speed Factor R2W_FACTOR                 :0x2
11:33:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:42: FILE_FORMAT_GRP                               :0x0
11:33:42: COPY flag                                     :0x1
11:33:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:42: File_Format                                   :0x0
11:33:42: CRC                                           :0x0
11:33:42: ####CSD Registe Values####  

11:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 4618 ] 
11:33:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x0627D630>) , Command count = 4619 ] 
11:33:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06312AE0>) , Command count = 4620 ] 
11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x06312B70>, <None>, <py_sfcl.Command23 object at 0x06312A20>) , Command count = 4621 ] 
11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053E2420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276BD0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A510>, <None>, <py_sfcl.Command23 object at 0x06312E40>) , Command count = 4622 ] 
11:33:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:44: Host Frequency set to 25000 KHz
11:33:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 4623 ] 
11:33:44: [GO18_globalSetVolt]### Host voltage value is set.
11:33:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DCF0>, 0x0, False) , Command count = 4624 ] 
11:33:44: [GO18_globalSetVolt]### Host voltage value is set.
11:33:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4625 ] 
11:33:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4626 ] 
11:33:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4627 ] 
11:33:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 4628 ] 
11:33:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D150>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 4629 ] 
11:33:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4630 ] 
11:33:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:44: Host Frequency set to 25000 KHz
11:33:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:44: ####CSD Registe 2.0 Values####
11:33:44: CSD_STRUCTURE                                 :0x1
11:33:44: Reserv1                                       :0x0
11:33:44: Time Access 1 TAAC                            :0xe
11:33:44: Time Access 2 NSAC*100                        :0x0
11:33:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:44: Card Command Classess CCC                     :0x5b5
11:33:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:44: DSR(driver stage register)  DSR_IMP           :0x0
11:33:44: Reserv2                                       :0x0
11:33:44: Device Size C_SIZE                            :0xedc8
11:33:44: Reserv3                                       :0x0
11:33:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:44: Reserv4                                       :0x0
11:33:44: Write Speed Factor R2W_FACTOR                 :0x2
11:33:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:44: FILE_FORMAT_GRP                               :0x0
11:33:44: COPY flag                                     :0x1
11:33:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:44: File_Format                                   :0x0
11:33:44: CRC                                           :0x0
11:33:44: ####CSD Registe Values####  

11:33:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:44: [GetSCRRegisterEntry] Passed
11:33:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:44: Data_Status_After Erases          : 0
11:33:44: CPRM Security Support             : No Security
11:33:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:44: Spec. Version                     : Version 3.0X
11:33:44: Extended Security Support         : Extended_Security_Not_Supported
11:33:44: Command Support                   : COMMAND_SUPPORT
11:33:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0626D240>) , Command count = 4631 ] 
11:33:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D870>, <py_sfcl.CommandDataDefinition object at 0x0627A480>) , Command count = 4632 ] 
11:33:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:44: [ SetBusWidth(0x4) , Command count = 4633 ] 
11:33:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4634 ] 
11:33:44: Protected Area Size 0x28000
11:33:44: Bus Width           2
11:33:44: Secure Mode         0
11:33:44: Speed  Class        4
11:33:44: Perf Move           0
11:33:44: Au Size             9
11:33:44: Erase Size          15
11:33:44: Erase Timeout       1
11:33:44: Erase offset        1
11:33:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4635 ] 
11:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:44: Host Frequency set to 100000 KHz
11:33:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:44: ####CSD Registe 2.0 Values####
11:33:44: CSD_STRUCTURE                                 :0x1
11:33:44: Reserv1                                       :0x0
11:33:44: Time Access 1 TAAC                            :0xe
11:33:44: Time Access 2 NSAC*100                        :0x0
11:33:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:44: Card Command Classess CCC                     :0x5b5
11:33:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:44: DSR(driver stage register)  DSR_IMP           :0x0
11:33:44: Reserv2                                       :0x0
11:33:44: Device Size C_SIZE                            :0xedc8
11:33:44: Reserv3                                       :0x0
11:33:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:44: Reserv4                                       :0x0
11:33:44: Write Speed Factor R2W_FACTOR                 :0x2
11:33:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:44: FILE_FORMAT_GRP                               :0x0
11:33:44: COPY flag                                     :0x1
11:33:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:44: File_Format                                   :0x0
11:33:44: CRC                                           :0x0
11:33:44: ####CSD Registe Values####  

11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 4636 ] 
11:33:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273720>, <py_sfcl.CommandDataDefinition object at 0x06312B10>) , Command count = 4637 ] 
11:33:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x06312AB0>, <None>, <py_sfcl.Command23 object at 0x0626DB10>) , Command count = 4638 ] 
11:33:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
11:33:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x06312C00>) , Command count = 4639 ] 
11:33:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312E70>, <py_sfcl.PySEnhancedCmdData object at 0x0627ADE0>, <None>, <py_sfcl.Command23 object at 0x06312C90>) , Command count = 4640 ] 
11:33:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:47: Host Frequency set to 25000 KHz
11:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 4641 ] 
11:33:47: [GO18_globalSetVolt]### Host voltage value is set.
11:33:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E70>, 0x0, False) , Command count = 4642 ] 
11:33:47: [GO18_globalSetVolt]### Host voltage value is set.
11:33:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4643 ] 
11:33:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4644 ] 
11:33:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4645 ] 
11:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x0627AC60>) , Command count = 4646 ] 
11:33:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 4647 ] 
11:33:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4648 ] 
11:33:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:47: Host Frequency set to 25000 KHz
11:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:47: ####CSD Registe 2.0 Values####
11:33:47: CSD_STRUCTURE                                 :0x1
11:33:47: Reserv1                                       :0x0
11:33:47: Time Access 1 TAAC                            :0xe
11:33:47: Time Access 2 NSAC*100                        :0x0
11:33:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:47: Card Command Classess CCC                     :0x5b5
11:33:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:47: DSR(driver stage register)  DSR_IMP           :0x0
11:33:47: Reserv2                                       :0x0
11:33:47: Device Size C_SIZE                            :0xedc8
11:33:47: Reserv3                                       :0x0
11:33:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:47: Reserv4                                       :0x0
11:33:47: Write Speed Factor R2W_FACTOR                 :0x2
11:33:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:47: FILE_FORMAT_GRP                               :0x0
11:33:47: COPY flag                                     :0x1
11:33:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:47: File_Format                                   :0x0
11:33:47: CRC                                           :0x0
11:33:47: ####CSD Registe Values####  

11:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:47: [GetSCRRegisterEntry] Passed
11:33:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:47: Data_Status_After Erases          : 0
11:33:47: CPRM Security Support             : No Security
11:33:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:47: Spec. Version                     : Version 3.0X
11:33:47: Extended Security Support         : Extended_Security_Not_Supported
11:33:47: Command Support                   : COMMAND_SUPPORT
11:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 4649 ] 
11:33:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DAE0>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 4650 ] 
11:33:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:47: [ SetBusWidth(0x4) , Command count = 4651 ] 
11:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4652 ] 
11:33:47: Protected Area Size 0x28000
11:33:47: Bus Width           2
11:33:47: Secure Mode         0
11:33:47: Speed  Class        4
11:33:47: Perf Move           0
11:33:47: Au Size             9
11:33:47: Erase Size          15
11:33:47: Erase Timeout       1
11:33:47: Erase offset        1
11:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4653 ] 
11:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:47: Host Frequency set to 100000 KHz
11:33:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:47: ####CSD Registe 2.0 Values####
11:33:47: CSD_STRUCTURE                                 :0x1
11:33:47: Reserv1                                       :0x0
11:33:47: Time Access 1 TAAC                            :0xe
11:33:47: Time Access 2 NSAC*100                        :0x0
11:33:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:47: Card Command Classess CCC                     :0x5b5
11:33:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:48: DSR(driver stage register)  DSR_IMP           :0x0
11:33:48: Reserv2                                       :0x0
11:33:48: Device Size C_SIZE                            :0xedc8
11:33:48: Reserv3                                       :0x0
11:33:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:48: Reserv4                                       :0x0
11:33:48: Write Speed Factor R2W_FACTOR                 :0x2
11:33:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:48: FILE_FORMAT_GRP                               :0x0
11:33:48: COPY flag                                     :0x1
11:33:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:48: File_Format                                   :0x0
11:33:48: CRC                                           :0x0
11:33:48: ####CSD Registe Values####  

11:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 4654 ] 
11:33:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 4655 ] 
11:33:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312C60>, <py_sfcl.PySEnhancedCmdData object at 0x06312DB0>, <None>, <py_sfcl.Command23 object at 0x06276720>) , Command count = 4656 ] 
11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x06312EA0>, <None>, <py_sfcl.Command23 object at 0x06312DE0>) , Command count = 4657 ] 
11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D210>, <py_sfcl.PySEnhancedCmdData object at 0x0627ACC0>, <None>, <py_sfcl.Command23 object at 0x06312E10>) , Command count = 4658 ] 
11:33:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:51: Host Frequency set to 25000 KHz
11:33:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 4659 ] 
11:33:51: [GO18_globalSetVolt]### Host voltage value is set.
11:33:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401CC0>, 0x0, False) , Command count = 4660 ] 
11:33:51: [GO18_globalSetVolt]### Host voltage value is set.
11:33:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4661 ] 
11:33:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4662 ] 
11:33:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4663 ] 
11:33:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 4664 ] 
11:33:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AD50>, <py_sfcl.CommandDataDefinition object at 0x0627A930>) , Command count = 4665 ] 
11:33:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:51: [ SetCardRCA(0x1, 0xD555) , Command count = 4666 ] 
11:33:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:51: Host Frequency set to 25000 KHz
11:33:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:51: ####CSD Registe 2.0 Values####
11:33:51: CSD_STRUCTURE                                 :0x1
11:33:51: Reserv1                                       :0x0
11:33:51: Time Access 1 TAAC                            :0xe
11:33:51: Time Access 2 NSAC*100                        :0x0
11:33:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:51: Card Command Classess CCC                     :0x5b5
11:33:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:51: DSR(driver stage register)  DSR_IMP           :0x0
11:33:51: Reserv2                                       :0x0
11:33:51: Device Size C_SIZE                            :0xedc8
11:33:51: Reserv3                                       :0x0
11:33:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:51: Reserv4                                       :0x0
11:33:51: Write Speed Factor R2W_FACTOR                 :0x2
11:33:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:51: FILE_FORMAT_GRP                               :0x0
11:33:51: COPY flag                                     :0x1
11:33:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:51: File_Format                                   :0x0
11:33:51: CRC                                           :0x0
11:33:51: ####CSD Registe Values####  

11:33:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:51: [GetSCRRegisterEntry] Passed
11:33:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:51: Data_Status_After Erases          : 0
11:33:51: CPRM Security Support             : No Security
11:33:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:51: Spec. Version                     : Version 3.0X
11:33:51: Extended Security Support         : Extended_Security_Not_Supported
11:33:51: Command Support                   : COMMAND_SUPPORT
11:33:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 4667 ] 
11:33:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A660>, <py_sfcl.CommandDataDefinition object at 0x0627A930>) , Command count = 4668 ] 
11:33:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:51: [ SetBusWidth(0x4) , Command count = 4669 ] 
11:33:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06216E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4670 ] 
11:33:51: Protected Area Size 0x28000
11:33:51: Bus Width           2
11:33:51: Secure Mode         0
11:33:51: Speed  Class        4
11:33:51: Perf Move           0
11:33:51: Au Size             9
11:33:51: Erase Size          15
11:33:51: Erase Timeout       1
11:33:51: Erase offset        1
11:33:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4671 ] 
11:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:52: Host Frequency set to 100000 KHz
11:33:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:52: ####CSD Registe 2.0 Values####
11:33:52: CSD_STRUCTURE                                 :0x1
11:33:52: Reserv1                                       :0x0
11:33:52: Time Access 1 TAAC                            :0xe
11:33:52: Time Access 2 NSAC*100                        :0x0
11:33:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:52: Card Command Classess CCC                     :0x5b5
11:33:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:52: DSR(driver stage register)  DSR_IMP           :0x0
11:33:52: Reserv2                                       :0x0
11:33:52: Device Size C_SIZE                            :0xedc8
11:33:52: Reserv3                                       :0x0
11:33:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:52: Reserv4                                       :0x0
11:33:52: Write Speed Factor R2W_FACTOR                 :0x2
11:33:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:52: FILE_FORMAT_GRP                               :0x0
11:33:52: COPY flag                                     :0x1
11:33:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:52: File_Format                                   :0x0
11:33:52: CRC                                           :0x0
11:33:52: ####CSD Registe Values####  

11:33:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D120>, <py_sfcl.CommandDataDefinition object at 0x06312CC0>) , Command count = 4672 ] 
11:33:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AFB10>, <py_sfcl.CommandDataDefinition object at 0x06312F00>) , Command count = 4673 ] 
11:33:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D510>, <py_sfcl.PySEnhancedCmdData object at 0x06312BA0>, <None>, <py_sfcl.Command23 object at 0x0627A7B0>) , Command count = 4674 ] 
11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D300>, <py_sfcl.PySEnhancedCmdData object at 0x06312A50>, <None>, <py_sfcl.Command23 object at 0x06312FC0>) , Command count = 4675 ] 
11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x0627AED0>, <None>, <py_sfcl.Command23 object at 0x06312F30>) , Command count = 4676 ] 
11:33:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:53: [GO4_globalInitCard]### Switch to Specify Card Type
11:33:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:56: Host Frequency set to 25000 KHz
11:33:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:33:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:33:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 4677 ] 
11:33:56: [GO18_globalSetVolt]### Host voltage value is set.
11:33:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:33:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x062734B0>, 0x0, False) , Command count = 4678 ] 
11:33:56: [GO18_globalSetVolt]### Host voltage value is set.
11:33:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4679 ] 
11:33:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:33:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4680 ] 
11:33:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:33:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:33:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:33:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:33:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4681 ] 
11:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:33:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C30>, <py_sfcl.CommandDataDefinition object at 0x06280180>) , Command count = 4682 ] 
11:33:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 4683 ] 
11:33:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:33:56: [ SetCardRCA(0x1, 0xD555) , Command count = 4684 ] 
11:33:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:33:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:33:56: Host Frequency set to 25000 KHz
11:33:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:56: ####CSD Registe 2.0 Values####
11:33:56: CSD_STRUCTURE                                 :0x1
11:33:56: Reserv1                                       :0x0
11:33:56: Time Access 1 TAAC                            :0xe
11:33:56: Time Access 2 NSAC*100                        :0x0
11:33:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:33:56: Card Command Classess CCC                     :0x5b5
11:33:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:56: DSR(driver stage register)  DSR_IMP           :0x0
11:33:56: Reserv2                                       :0x0
11:33:56: Device Size C_SIZE                            :0xedc8
11:33:56: Reserv3                                       :0x0
11:33:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:56: Reserv4                                       :0x0
11:33:56: Write Speed Factor R2W_FACTOR                 :0x2
11:33:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:56: FILE_FORMAT_GRP                               :0x0
11:33:56: COPY flag                                     :0x1
11:33:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:56: File_Format                                   :0x0
11:33:56: CRC                                           :0x0
11:33:56: ####CSD Registe Values####  

11:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:33:56: [GetSCRRegisterEntry] Passed
11:33:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:33:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:33:56: Data_Status_After Erases          : 0
11:33:56: CPRM Security Support             : No Security
11:33:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:33:56: Spec. Version                     : Version 3.0X
11:33:56: Extended Security Support         : Extended_Security_Not_Supported
11:33:56: Command Support                   : COMMAND_SUPPORT
11:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 4685 ] 
11:33:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AF00>, <py_sfcl.CommandDataDefinition object at 0x0627AB40>) , Command count = 4686 ] 
11:33:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:33:56: [ SetBusWidth(0x4) , Command count = 4687 ] 
11:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:33:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4688 ] 
11:33:56: Protected Area Size 0x28000
11:33:56: Bus Width           2
11:33:56: Secure Mode         0
11:33:56: Speed  Class        4
11:33:56: Perf Move           0
11:33:56: Au Size             9
11:33:56: Erase Size          15
11:33:56: Erase Timeout       1
11:33:56: Erase offset        1
11:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:33:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:33:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4689 ] 
11:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:33:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:33:56: Host Frequency set to 100000 KHz
11:33:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:33:57: ####CSD Registe 2.0 Values####
11:33:57: CSD_STRUCTURE                                 :0x1
11:33:57: Reserv1                                       :0x0
11:33:57: Time Access 1 TAAC                            :0xe
11:33:57: Time Access 2 NSAC*100                        :0x0
11:33:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:33:57: Card Command Classess CCC                     :0x5b5
11:33:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:33:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:33:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:33:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:33:57: DSR(driver stage register)  DSR_IMP           :0x0
11:33:57: Reserv2                                       :0x0
11:33:57: Device Size C_SIZE                            :0xedc8
11:33:57: Reserv3                                       :0x0
11:33:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:33:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:33:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:33:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:33:57: Reserv4                                       :0x0
11:33:57: Write Speed Factor R2W_FACTOR                 :0x2
11:33:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:33:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:33:57: FILE_FORMAT_GRP                               :0x0
11:33:57: COPY flag                                     :0x1
11:33:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:33:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:33:57: File_Format                                   :0x0
11:33:57: CRC                                           :0x0
11:33:57: ####CSD Registe Values####  

11:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627A1B0>) , Command count = 4690 ] 
11:33:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312D50>, <py_sfcl.CommandDataDefinition object at 0x06268450>) , Command count = 4691 ] 
11:33:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:33:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:33:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627A630>) , Command count = 4692 ] 
11:33:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
11:33:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:33:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x06268090>) , Command count = 4693 ] 
11:33:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:33:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:33:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EFF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062688D0>, <py_sfcl.PySEnhancedCmdData object at 0x062684B0>, <None>, <py_sfcl.Command23 object at 0x06268840>) , Command count = 4694 ] 
11:33:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:33:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:00: Host Frequency set to 25000 KHz
11:34:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 4695 ] 
11:34:00: [GO18_globalSetVolt]### Host voltage value is set.
11:34:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x062683F0>, 0x0, False) , Command count = 4696 ] 
11:34:00: [GO18_globalSetVolt]### Host voltage value is set.
11:34:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4697 ] 
11:34:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4698 ] 
11:34:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4699 ] 
11:34:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 4700 ] 
11:34:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x0627D3F0>) , Command count = 4701 ] 
11:34:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:01: [ SetCardRCA(0x1, 0xD555) , Command count = 4702 ] 
11:34:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:01: Host Frequency set to 25000 KHz
11:34:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:01: ####CSD Registe 2.0 Values####
11:34:01: CSD_STRUCTURE                                 :0x1
11:34:01: Reserv1                                       :0x0
11:34:01: Time Access 1 TAAC                            :0xe
11:34:01: Time Access 2 NSAC*100                        :0x0
11:34:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:01: Card Command Classess CCC                     :0x5b5
11:34:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:01: DSR(driver stage register)  DSR_IMP           :0x0
11:34:01: Reserv2                                       :0x0
11:34:01: Device Size C_SIZE                            :0xedc8
11:34:01: Reserv3                                       :0x0
11:34:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:01: Reserv4                                       :0x0
11:34:01: Write Speed Factor R2W_FACTOR                 :0x2
11:34:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:01: FILE_FORMAT_GRP                               :0x0
11:34:01: COPY flag                                     :0x1
11:34:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:01: File_Format                                   :0x0
11:34:01: CRC                                           :0x0
11:34:01: ####CSD Registe Values####  

11:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:01: [GetSCRRegisterEntry] Passed
11:34:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:01: Data_Status_After Erases          : 0
11:34:01: CPRM Security Support             : No Security
11:34:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:01: Spec. Version                     : Version 3.0X
11:34:01: Extended Security Support         : Extended_Security_Not_Supported
11:34:01: Command Support                   : COMMAND_SUPPORT
11:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CC0>, <py_sfcl.CommandDataDefinition object at 0x062739F0>) , Command count = 4703 ] 
11:34:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269210>, <py_sfcl.CommandDataDefinition object at 0x0627DC30>) , Command count = 4704 ] 
11:34:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:01: [ SetBusWidth(0x4) , Command count = 4705 ] 
11:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06268510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4706 ] 
11:34:01: Protected Area Size 0x28000
11:34:01: Bus Width           2
11:34:01: Secure Mode         0
11:34:01: Speed  Class        4
11:34:01: Perf Move           0
11:34:01: Au Size             9
11:34:01: Erase Size          15
11:34:01: Erase Timeout       1
11:34:01: Erase offset        1
11:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4707 ] 
11:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:01: Host Frequency set to 100000 KHz
11:34:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:01: ####CSD Registe 2.0 Values####
11:34:01: CSD_STRUCTURE                                 :0x1
11:34:01: Reserv1                                       :0x0
11:34:01: Time Access 1 TAAC                            :0xe
11:34:01: Time Access 2 NSAC*100                        :0x0
11:34:01: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:01: Card Command Classess CCC                     :0x5b5
11:34:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:01: DSR(driver stage register)  DSR_IMP           :0x0
11:34:01: Reserv2                                       :0x0
11:34:01: Device Size C_SIZE                            :0xedc8
11:34:01: Reserv3                                       :0x0
11:34:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:02: Reserv4                                       :0x0
11:34:02: Write Speed Factor R2W_FACTOR                 :0x2
11:34:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:02: FILE_FORMAT_GRP                               :0x0
11:34:02: COPY flag                                     :0x1
11:34:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:02: File_Format                                   :0x0
11:34:02: CRC                                           :0x0
11:34:02: ####CSD Registe Values####  

11:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 4708 ] 
11:34:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D060>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 4709 ] 
11:34:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062688A0>, <py_sfcl.PySEnhancedCmdData object at 0x062680C0>, <None>, <py_sfcl.Command23 object at 0x062169F0>) , Command count = 4710 ] 
11:34:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
11:34:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x0627ACF0>, <None>, <py_sfcl.Command23 object at 0x0627AE70>) , Command count = 4711 ] 
11:34:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D690>, <py_sfcl.PySEnhancedCmdData object at 0x0627DC30>, <None>, <py_sfcl.Command23 object at 0x0627AF30>) , Command count = 4712 ] 
11:34:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:03: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:05: Host Frequency set to 25000 KHz
11:34:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 4713 ] 
11:34:05: [GO18_globalSetVolt]### Host voltage value is set.
11:34:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276660>, 0x0, False) , Command count = 4714 ] 
11:34:05: [GO18_globalSetVolt]### Host voltage value is set.
11:34:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4715 ] 
11:34:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4716 ] 
11:34:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4717 ] 
11:34:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B10>, <py_sfcl.CommandDataDefinition object at 0x06269720>) , Command count = 4718 ] 
11:34:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 4719 ] 
11:34:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:05: [ SetCardRCA(0x1, 0xD555) , Command count = 4720 ] 
11:34:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:06: Host Frequency set to 25000 KHz
11:34:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:06: ####CSD Registe 2.0 Values####
11:34:06: CSD_STRUCTURE                                 :0x1
11:34:06: Reserv1                                       :0x0
11:34:06: Time Access 1 TAAC                            :0xe
11:34:06: Time Access 2 NSAC*100                        :0x0
11:34:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:06: Card Command Classess CCC                     :0x5b5
11:34:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:06: DSR(driver stage register)  DSR_IMP           :0x0
11:34:06: Reserv2                                       :0x0
11:34:06: Device Size C_SIZE                            :0xedc8
11:34:06: Reserv3                                       :0x0
11:34:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:06: Reserv4                                       :0x0
11:34:06: Write Speed Factor R2W_FACTOR                 :0x2
11:34:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:06: FILE_FORMAT_GRP                               :0x0
11:34:06: COPY flag                                     :0x1
11:34:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:06: File_Format                                   :0x0
11:34:06: CRC                                           :0x0
11:34:06: ####CSD Registe Values####  

11:34:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:06: [GetSCRRegisterEntry] Passed
11:34:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:06: Data_Status_After Erases          : 0
11:34:06: CPRM Security Support             : No Security
11:34:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:06: Spec. Version                     : Version 3.0X
11:34:06: Extended Security Support         : Extended_Security_Not_Supported
11:34:06: Command Support                   : COMMAND_SUPPORT
11:34:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x06273E10>) , Command count = 4721 ] 
11:34:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062694B0>, <py_sfcl.CommandDataDefinition object at 0x0626D6C0>) , Command count = 4722 ] 
11:34:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:06: [ SetBusWidth(0x4) , Command count = 4723 ] 
11:34:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627D390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4724 ] 
11:34:06: Protected Area Size 0x28000
11:34:06: Bus Width           2
11:34:06: Secure Mode         0
11:34:06: Speed  Class        4
11:34:06: Perf Move           0
11:34:06: Au Size             9
11:34:06: Erase Size          15
11:34:06: Erase Timeout       1
11:34:06: Erase offset        1
11:34:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4725 ] 
11:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:06: Host Frequency set to 100000 KHz
11:34:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:06: ####CSD Registe 2.0 Values####
11:34:06: CSD_STRUCTURE                                 :0x1
11:34:06: Reserv1                                       :0x0
11:34:06: Time Access 1 TAAC                            :0xe
11:34:06: Time Access 2 NSAC*100                        :0x0
11:34:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:06: Card Command Classess CCC                     :0x5b5
11:34:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:06: DSR(driver stage register)  DSR_IMP           :0x0
11:34:06: Reserv2                                       :0x0
11:34:06: Device Size C_SIZE                            :0xedc8
11:34:06: Reserv3                                       :0x0
11:34:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:06: Reserv4                                       :0x0
11:34:06: Write Speed Factor R2W_FACTOR                 :0x2
11:34:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:06: FILE_FORMAT_GRP                               :0x0
11:34:06: COPY flag                                     :0x1
11:34:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:07: File_Format                                   :0x0
11:34:07: CRC                                           :0x0
11:34:07: ####CSD Registe Values####  

11:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 4726 ] 
11:34:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269ED0>, <py_sfcl.CommandDataDefinition object at 0x06273F60>) , Command count = 4727 ] 
11:34:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06280150>, <py_sfcl.PySEnhancedCmdData object at 0x0626D510>, <None>, <py_sfcl.Command23 object at 0x06268660>) , Command count = 4728 ] 
11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273ED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062733C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D780>, <None>, <py_sfcl.Command23 object at 0x0626D450>) , Command count = 4729 ] 
11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062764B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062692A0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DCC0>, <None>, <py_sfcl.Command23 object at 0x0627DDE0>) , Command count = 4730 ] 
11:34:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:10: Host Frequency set to 25000 KHz
11:34:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 4731 ] 
11:34:10: [GO18_globalSetVolt]### Host voltage value is set.
11:34:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216A80>, 0x0, False) , Command count = 4732 ] 
11:34:10: [GO18_globalSetVolt]### Host voltage value is set.
11:34:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4733 ] 
11:34:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4734 ] 
11:34:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4735 ] 
11:34:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 4736 ] 
11:34:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 4737 ] 
11:34:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:10: [ SetCardRCA(0x1, 0xD555) , Command count = 4738 ] 
11:34:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:10: Host Frequency set to 25000 KHz
11:34:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:10: ####CSD Registe 2.0 Values####
11:34:10: CSD_STRUCTURE                                 :0x1
11:34:10: Reserv1                                       :0x0
11:34:10: Time Access 1 TAAC                            :0xe
11:34:10: Time Access 2 NSAC*100                        :0x0
11:34:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:10: Card Command Classess CCC                     :0x5b5
11:34:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:10: DSR(driver stage register)  DSR_IMP           :0x0
11:34:10: Reserv2                                       :0x0
11:34:10: Device Size C_SIZE                            :0xedc8
11:34:10: Reserv3                                       :0x0
11:34:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:10: Reserv4                                       :0x0
11:34:10: Write Speed Factor R2W_FACTOR                 :0x2
11:34:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:10: FILE_FORMAT_GRP                               :0x0
11:34:10: COPY flag                                     :0x1
11:34:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:10: File_Format                                   :0x0
11:34:10: CRC                                           :0x0
11:34:10: ####CSD Registe Values####  

11:34:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:10: [GetSCRRegisterEntry] Passed
11:34:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:10: Data_Status_After Erases          : 0
11:34:10: CPRM Security Support             : No Security
11:34:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:10: Spec. Version                     : Version 3.0X
11:34:10: Extended Security Support         : Extended_Security_Not_Supported
11:34:10: Command Support                   : COMMAND_SUPPORT
11:34:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 4739 ] 
11:34:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062683C0>, <py_sfcl.CommandDataDefinition object at 0x062695A0>) , Command count = 4740 ] 
11:34:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:10: [ SetBusWidth(0x4) , Command count = 4741 ] 
11:34:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4742 ] 
11:34:10: Protected Area Size 0x28000
11:34:10: Bus Width           2
11:34:10: Secure Mode         0
11:34:10: Speed  Class        4
11:34:10: Perf Move           0
11:34:10: Au Size             9
11:34:10: Erase Size          15
11:34:10: Erase Timeout       1
11:34:10: Erase offset        1
11:34:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4743 ] 
11:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:11: Host Frequency set to 100000 KHz
11:34:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:11: ####CSD Registe 2.0 Values####
11:34:11: CSD_STRUCTURE                                 :0x1
11:34:11: Reserv1                                       :0x0
11:34:11: Time Access 1 TAAC                            :0xe
11:34:11: Time Access 2 NSAC*100                        :0x0
11:34:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:11: Card Command Classess CCC                     :0x5b5
11:34:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:11: DSR(driver stage register)  DSR_IMP           :0x0
11:34:11: Reserv2                                       :0x0
11:34:11: Device Size C_SIZE                            :0xedc8
11:34:11: Reserv3                                       :0x0
11:34:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:11: Reserv4                                       :0x0
11:34:11: Write Speed Factor R2W_FACTOR                 :0x2
11:34:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:11: FILE_FORMAT_GRP                               :0x0
11:34:11: COPY flag                                     :0x1
11:34:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:11: File_Format                                   :0x0
11:34:11: CRC                                           :0x0
11:34:11: ####CSD Registe Values####  

11:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x06273630>) , Command count = 4744 ] 
11:34:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268480>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 4745 ] 
11:34:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D840>, <py_sfcl.PySEnhancedCmdData object at 0x06269390>, <None>, <py_sfcl.Command23 object at 0x06269060>) , Command count = 4746 ] 
11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269E40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06269CF0>, <None>, <py_sfcl.Command23 object at 0x06269E70>) , Command count = 4747 ] 
11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D3C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D930>, <py_sfcl.PySEnhancedCmdData object at 0x0627DFC0>, <None>, <py_sfcl.Command23 object at 0x0627D480>) , Command count = 4748 ] 
11:34:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:15: Host Frequency set to 25000 KHz
11:34:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 4749 ] 
11:34:15: [GO18_globalSetVolt]### Host voltage value is set.
11:34:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268FC0>, 0x0, False) , Command count = 4750 ] 
11:34:15: [GO18_globalSetVolt]### Host voltage value is set.
11:34:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4751 ] 
11:34:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4752 ] 
11:34:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4753 ] 
11:34:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 4754 ] 
11:34:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 4755 ] 
11:34:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:15: [ SetCardRCA(0x1, 0xD555) , Command count = 4756 ] 
11:34:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:15: Host Frequency set to 25000 KHz
11:34:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:15: ####CSD Registe 2.0 Values####
11:34:15: CSD_STRUCTURE                                 :0x1
11:34:15: Reserv1                                       :0x0
11:34:15: Time Access 1 TAAC                            :0xe
11:34:15: Time Access 2 NSAC*100                        :0x0
11:34:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:15: Card Command Classess CCC                     :0x5b5
11:34:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:15: DSR(driver stage register)  DSR_IMP           :0x0
11:34:15: Reserv2                                       :0x0
11:34:15: Device Size C_SIZE                            :0xedc8
11:34:15: Reserv3                                       :0x0
11:34:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:15: Reserv4                                       :0x0
11:34:15: Write Speed Factor R2W_FACTOR                 :0x2
11:34:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:15: FILE_FORMAT_GRP                               :0x0
11:34:15: COPY flag                                     :0x1
11:34:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:15: File_Format                                   :0x0
11:34:15: CRC                                           :0x0
11:34:15: ####CSD Registe Values####  

11:34:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:15: [GetSCRRegisterEntry] Passed
11:34:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:15: Data_Status_After Erases          : 0
11:34:15: CPRM Security Support             : No Security
11:34:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:15: Spec. Version                     : Version 3.0X
11:34:15: Extended Security Support         : Extended_Security_Not_Supported
11:34:15: Command Support                   : COMMAND_SUPPORT
11:34:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 4757 ] 
11:34:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268BA0>, <py_sfcl.CommandDataDefinition object at 0x062698D0>) , Command count = 4758 ] 
11:34:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:15: [ SetBusWidth(0x4) , Command count = 4759 ] 
11:34:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626DB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4760 ] 
11:34:15: Protected Area Size 0x28000
11:34:15: Bus Width           2
11:34:15: Secure Mode         0
11:34:15: Speed  Class        4
11:34:15: Perf Move           0
11:34:15: Au Size             9
11:34:15: Erase Size          15
11:34:15: Erase Timeout       1
11:34:15: Erase offset        1
11:34:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4761 ] 
11:34:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:15: Host Frequency set to 100000 KHz
11:34:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:16: ####CSD Registe 2.0 Values####
11:34:16: CSD_STRUCTURE                                 :0x1
11:34:16: Reserv1                                       :0x0
11:34:16: Time Access 1 TAAC                            :0xe
11:34:16: Time Access 2 NSAC*100                        :0x0
11:34:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:16: Card Command Classess CCC                     :0x5b5
11:34:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:16: DSR(driver stage register)  DSR_IMP           :0x0
11:34:16: Reserv2                                       :0x0
11:34:16: Device Size C_SIZE                            :0xedc8
11:34:16: Reserv3                                       :0x0
11:34:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:16: Reserv4                                       :0x0
11:34:16: Write Speed Factor R2W_FACTOR                 :0x2
11:34:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:16: FILE_FORMAT_GRP                               :0x0
11:34:16: COPY flag                                     :0x1
11:34:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:16: File_Format                                   :0x0
11:34:16: CRC                                           :0x0
11:34:16: ####CSD Registe Values####  

11:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 4762 ] 
11:34:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9C0>, <py_sfcl.CommandDataDefinition object at 0x06269930>) , Command count = 4763 ] 
11:34:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062691E0>, <py_sfcl.PySEnhancedCmdData object at 0x06269D80>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 4764 ] 
11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x063241E0>, <None>, <py_sfcl.Command23 object at 0x06269030>) , Command count = 4765 ] 
11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D8A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062693C0>, <py_sfcl.PySEnhancedCmdData object at 0x063244B0>, <None>, <py_sfcl.Command23 object at 0x06324150>) , Command count = 4766 ] 
11:34:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:19: Host Frequency set to 25000 KHz
11:34:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 4767 ] 
11:34:20: [GO18_globalSetVolt]### Host voltage value is set.
11:34:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276630>, 0x0, False) , Command count = 4768 ] 
11:34:20: [GO18_globalSetVolt]### Host voltage value is set.
11:34:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4769 ] 
11:34:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4770 ] 
11:34:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4771 ] 
11:34:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 4772 ] 
11:34:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x06269A20>) , Command count = 4773 ] 
11:34:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:20: [ SetCardRCA(0x1, 0xD555) , Command count = 4774 ] 
11:34:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:20: Host Frequency set to 25000 KHz
11:34:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:20: ####CSD Registe 2.0 Values####
11:34:20: CSD_STRUCTURE                                 :0x1
11:34:20: Reserv1                                       :0x0
11:34:20: Time Access 1 TAAC                            :0xe
11:34:20: Time Access 2 NSAC*100                        :0x0
11:34:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:20: Card Command Classess CCC                     :0x5b5
11:34:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:20: DSR(driver stage register)  DSR_IMP           :0x0
11:34:20: Reserv2                                       :0x0
11:34:20: Device Size C_SIZE                            :0xedc8
11:34:20: Reserv3                                       :0x0
11:34:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:20: Reserv4                                       :0x0
11:34:20: Write Speed Factor R2W_FACTOR                 :0x2
11:34:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:20: FILE_FORMAT_GRP                               :0x0
11:34:20: COPY flag                                     :0x1
11:34:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:20: File_Format                                   :0x0
11:34:20: CRC                                           :0x0
11:34:20: ####CSD Registe Values####  

11:34:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:20: [GetSCRRegisterEntry] Passed
11:34:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:20: Data_Status_After Erases          : 0
11:34:20: CPRM Security Support             : No Security
11:34:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:20: Spec. Version                     : Version 3.0X
11:34:20: Extended Security Support         : Extended_Security_Not_Supported
11:34:20: Command Support                   : COMMAND_SUPPORT
11:34:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 4775 ] 
11:34:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x0626D480>) , Command count = 4776 ] 
11:34:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:20: [ SetBusWidth(0x4) , Command count = 4777 ] 
11:34:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062800C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4778 ] 
11:34:20: Protected Area Size 0x28000
11:34:20: Bus Width           2
11:34:20: Secure Mode         0
11:34:20: Speed  Class        4
11:34:20: Perf Move           0
11:34:20: Au Size             9
11:34:20: Erase Size          15
11:34:20: Erase Timeout       1
11:34:20: Erase offset        1
11:34:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4779 ] 
11:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:20: Host Frequency set to 100000 KHz
11:34:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:20: ####CSD Registe 2.0 Values####
11:34:20: CSD_STRUCTURE                                 :0x1
11:34:20: Reserv1                                       :0x0
11:34:20: Time Access 1 TAAC                            :0xe
11:34:20: Time Access 2 NSAC*100                        :0x0
11:34:20: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:20: Card Command Classess CCC                     :0x5b5
11:34:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:20: DSR(driver stage register)  DSR_IMP           :0x0
11:34:20: Reserv2                                       :0x0
11:34:20: Device Size C_SIZE                            :0xedc8
11:34:20: Reserv3                                       :0x0
11:34:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:21: Reserv4                                       :0x0
11:34:21: Write Speed Factor R2W_FACTOR                 :0x2
11:34:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:21: FILE_FORMAT_GRP                               :0x0
11:34:21: COPY flag                                     :0x1
11:34:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:21: File_Format                                   :0x0
11:34:21: CRC                                           :0x0
11:34:21: ####CSD Registe Values####  

11:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 4780 ] 
11:34:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8D0>, <py_sfcl.CommandDataDefinition object at 0x0626DA50>) , Command count = 4781 ] 
11:34:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D360>, <None>, <py_sfcl.Command23 object at 0x0626D570>) , Command count = 4782 ] 
11:34:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
11:34:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273690>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBD0>, <None>, <py_sfcl.Command23 object at 0x0626D630>) , Command count = 4783 ] 
11:34:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063246F0>, <py_sfcl.PySEnhancedCmdData object at 0x06324510>, <None>, <py_sfcl.Command23 object at 0x0626DC60>) , Command count = 4784 ] 
11:34:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:24: Host Frequency set to 25000 KHz
11:34:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x062696F0>, 0x0, True) , Command count = 4785 ] 
11:34:24: [GO18_globalSetVolt]### Host voltage value is set.
11:34:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268180>, 0x0, False) , Command count = 4786 ] 
11:34:24: [GO18_globalSetVolt]### Host voltage value is set.
11:34:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4787 ] 
11:34:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4788 ] 
11:34:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4789 ] 
11:34:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B10>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 4790 ] 
11:34:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 4791 ] 
11:34:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4792 ] 
11:34:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:25: Host Frequency set to 25000 KHz
11:34:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:25: ####CSD Registe 2.0 Values####
11:34:25: CSD_STRUCTURE                                 :0x1
11:34:25: Reserv1                                       :0x0
11:34:25: Time Access 1 TAAC                            :0xe
11:34:25: Time Access 2 NSAC*100                        :0x0
11:34:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:25: Card Command Classess CCC                     :0x5b5
11:34:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:25: DSR(driver stage register)  DSR_IMP           :0x0
11:34:25: Reserv2                                       :0x0
11:34:25: Device Size C_SIZE                            :0xedc8
11:34:25: Reserv3                                       :0x0
11:34:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:25: Reserv4                                       :0x0
11:34:25: Write Speed Factor R2W_FACTOR                 :0x2
11:34:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:25: FILE_FORMAT_GRP                               :0x0
11:34:25: COPY flag                                     :0x1
11:34:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:25: File_Format                                   :0x0
11:34:25: CRC                                           :0x0
11:34:25: ####CSD Registe Values####  

11:34:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:25: [GetSCRRegisterEntry] Passed
11:34:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:25: Data_Status_After Erases          : 0
11:34:25: CPRM Security Support             : No Security
11:34:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:25: Spec. Version                     : Version 3.0X
11:34:25: Extended Security Support         : Extended_Security_Not_Supported
11:34:25: Command Support                   : COMMAND_SUPPORT
11:34:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 4793 ] 
11:34:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x0626DED0>) , Command count = 4794 ] 
11:34:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:25: [ SetBusWidth(0x4) , Command count = 4795 ] 
11:34:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4796 ] 
11:34:25: Protected Area Size 0x28000
11:34:25: Bus Width           2
11:34:25: Secure Mode         0
11:34:25: Speed  Class        4
11:34:25: Perf Move           0
11:34:25: Au Size             9
11:34:25: Erase Size          15
11:34:25: Erase Timeout       1
11:34:25: Erase offset        1
11:34:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4797 ] 
11:34:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:25: Host Frequency set to 100000 KHz
11:34:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:25: ####CSD Registe 2.0 Values####
11:34:25: CSD_STRUCTURE                                 :0x1
11:34:25: Reserv1                                       :0x0
11:34:25: Time Access 1 TAAC                            :0xe
11:34:25: Time Access 2 NSAC*100                        :0x0
11:34:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:25: Card Command Classess CCC                     :0x5b5
11:34:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:25: DSR(driver stage register)  DSR_IMP           :0x0
11:34:25: Reserv2                                       :0x0
11:34:25: Device Size C_SIZE                            :0xedc8
11:34:25: Reserv3                                       :0x0
11:34:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:26: Reserv4                                       :0x0
11:34:26: Write Speed Factor R2W_FACTOR                 :0x2
11:34:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:26: FILE_FORMAT_GRP                               :0x0
11:34:26: COPY flag                                     :0x1
11:34:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:26: File_Format                                   :0x0
11:34:26: CRC                                           :0x0
11:34:26: ####CSD Registe Values####  

11:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x0627DAB0>) , Command count = 4798 ] 
11:34:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276420>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 4799 ] 
11:34:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273570>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x0626DC00>) , Command count = 4800 ] 
11:34:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
11:34:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06324450>, <None>, <py_sfcl.Command23 object at 0x0626DCF0>) , Command count = 4801 ] 
11:34:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273660>, <py_sfcl.PySEnhancedCmdData object at 0x063246F0>, <None>, <py_sfcl.Command23 object at 0x06324600>) , Command count = 4802 ] 
11:34:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:29: Host Frequency set to 25000 KHz
11:34:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 4803 ] 
11:34:29: [GO18_globalSetVolt]### Host voltage value is set.
11:34:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D300>, 0x0, False) , Command count = 4804 ] 
11:34:29: [GO18_globalSetVolt]### Host voltage value is set.
11:34:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4805 ] 
11:34:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4806 ] 
11:34:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4807 ] 
11:34:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 4808 ] 
11:34:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x06269B70>) , Command count = 4809 ] 
11:34:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4810 ] 
11:34:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:30: Host Frequency set to 25000 KHz
11:34:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:30: ####CSD Registe 2.0 Values####
11:34:30: CSD_STRUCTURE                                 :0x1
11:34:30: Reserv1                                       :0x0
11:34:30: Time Access 1 TAAC                            :0xe
11:34:30: Time Access 2 NSAC*100                        :0x0
11:34:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:30: Card Command Classess CCC                     :0x5b5
11:34:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:30: DSR(driver stage register)  DSR_IMP           :0x0
11:34:30: Reserv2                                       :0x0
11:34:30: Device Size C_SIZE                            :0xedc8
11:34:30: Reserv3                                       :0x0
11:34:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:30: Reserv4                                       :0x0
11:34:30: Write Speed Factor R2W_FACTOR                 :0x2
11:34:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:30: FILE_FORMAT_GRP                               :0x0
11:34:30: COPY flag                                     :0x1
11:34:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:30: File_Format                                   :0x0
11:34:30: CRC                                           :0x0
11:34:30: ####CSD Registe Values####  

11:34:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:30: [GetSCRRegisterEntry] Passed
11:34:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:30: Data_Status_After Erases          : 0
11:34:30: CPRM Security Support             : No Security
11:34:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:30: Spec. Version                     : Version 3.0X
11:34:30: Extended Security Support         : Extended_Security_Not_Supported
11:34:30: Command Support                   : COMMAND_SUPPORT
11:34:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 4811 ] 
11:34:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDB0>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 4812 ] 
11:34:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:30: [ SetBusWidth(0x4) , Command count = 4813 ] 
11:34:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4814 ] 
11:34:30: Protected Area Size 0x28000
11:34:30: Bus Width           2
11:34:30: Secure Mode         0
11:34:30: Speed  Class        4
11:34:30: Perf Move           0
11:34:30: Au Size             9
11:34:30: Erase Size          15
11:34:30: Erase Timeout       1
11:34:30: Erase offset        1
11:34:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4815 ] 
11:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:30: Host Frequency set to 100000 KHz
11:34:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:30: ####CSD Registe 2.0 Values####
11:34:30: CSD_STRUCTURE                                 :0x1
11:34:30: Reserv1                                       :0x0
11:34:30: Time Access 1 TAAC                            :0xe
11:34:30: Time Access 2 NSAC*100                        :0x0
11:34:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:30: Card Command Classess CCC                     :0x5b5
11:34:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:30: DSR(driver stage register)  DSR_IMP           :0x0
11:34:30: Reserv2                                       :0x0
11:34:30: Device Size C_SIZE                            :0xedc8
11:34:30: Reserv3                                       :0x0
11:34:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:30: Reserv4                                       :0x0
11:34:30: Write Speed Factor R2W_FACTOR                 :0x2
11:34:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:31: FILE_FORMAT_GRP                               :0x0
11:34:31: COPY flag                                     :0x1
11:34:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:31: File_Format                                   :0x0
11:34:31: CRC                                           :0x0
11:34:31: ####CSD Registe Values####  

11:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 4816 ] 
11:34:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B40>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 4817 ] 
11:34:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD50>, <None>, <py_sfcl.Command23 object at 0x0626D1B0>) , Command count = 4818 ] 
11:34:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
11:34:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762A0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD20>, <None>, <py_sfcl.Command23 object at 0x0626D030>) , Command count = 4819 ] 
11:34:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D120>, <py_sfcl.PySEnhancedCmdData object at 0x06324510>, <None>, <py_sfcl.Command23 object at 0x0626D5A0>) , Command count = 4820 ] 
11:34:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:34: Host Frequency set to 25000 KHz
11:34:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 4821 ] 
11:34:34: [GO18_globalSetVolt]### Host voltage value is set.
11:34:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A360>, 0x0, False) , Command count = 4822 ] 
11:34:34: [GO18_globalSetVolt]### Host voltage value is set.
11:34:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4823 ] 
11:34:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4824 ] 
11:34:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4825 ] 
11:34:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A600>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 4826 ] 
11:34:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x0626D0C0>) , Command count = 4827 ] 
11:34:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:34: [ SetCardRCA(0x1, 0xD555) , Command count = 4828 ] 
11:34:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:34: Host Frequency set to 25000 KHz
11:34:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:34: ####CSD Registe 2.0 Values####
11:34:34: CSD_STRUCTURE                                 :0x1
11:34:34: Reserv1                                       :0x0
11:34:34: Time Access 1 TAAC                            :0xe
11:34:34: Time Access 2 NSAC*100                        :0x0
11:34:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:34: Card Command Classess CCC                     :0x5b5
11:34:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:34: DSR(driver stage register)  DSR_IMP           :0x0
11:34:34: Reserv2                                       :0x0
11:34:34: Device Size C_SIZE                            :0xedc8
11:34:34: Reserv3                                       :0x0
11:34:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:34: Reserv4                                       :0x0
11:34:34: Write Speed Factor R2W_FACTOR                 :0x2
11:34:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:34: FILE_FORMAT_GRP                               :0x0
11:34:34: COPY flag                                     :0x1
11:34:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:34: File_Format                                   :0x0
11:34:34: CRC                                           :0x0
11:34:34: ####CSD Registe Values####  

11:34:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:34: [GetSCRRegisterEntry] Passed
11:34:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:34: Data_Status_After Erases          : 0
11:34:34: CPRM Security Support             : No Security
11:34:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:34: Spec. Version                     : Version 3.0X
11:34:34: Extended Security Support         : Extended_Security_Not_Supported
11:34:34: Command Support                   : COMMAND_SUPPORT
11:34:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x0626DF00>) , Command count = 4829 ] 
11:34:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273750>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 4830 ] 
11:34:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:34: [ SetBusWidth(0x4) , Command count = 4831 ] 
11:34:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062760F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4832 ] 
11:34:34: Protected Area Size 0x28000
11:34:34: Bus Width           2
11:34:34: Secure Mode         0
11:34:34: Speed  Class        4
11:34:34: Perf Move           0
11:34:34: Au Size             9
11:34:34: Erase Size          15
11:34:34: Erase Timeout       1
11:34:34: Erase offset        1
11:34:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4833 ] 
11:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:35: Host Frequency set to 100000 KHz
11:34:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:35: ####CSD Registe 2.0 Values####
11:34:35: CSD_STRUCTURE                                 :0x1
11:34:35: Reserv1                                       :0x0
11:34:35: Time Access 1 TAAC                            :0xe
11:34:35: Time Access 2 NSAC*100                        :0x0
11:34:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:35: Card Command Classess CCC                     :0x5b5
11:34:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:35: DSR(driver stage register)  DSR_IMP           :0x0
11:34:35: Reserv2                                       :0x0
11:34:35: Device Size C_SIZE                            :0xedc8
11:34:35: Reserv3                                       :0x0
11:34:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:35: Reserv4                                       :0x0
11:34:35: Write Speed Factor R2W_FACTOR                 :0x2
11:34:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:35: FILE_FORMAT_GRP                               :0x0
11:34:35: COPY flag                                     :0x1
11:34:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:35: File_Format                                   :0x0
11:34:35: CRC                                           :0x0
11:34:35: ####CSD Registe Values####  

11:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 4834 ] 
11:34:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062699F0>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 4835 ] 
11:34:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x062763C0>) , Command count = 4836 ] 
11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062730C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276DB0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DA80>, <None>, <py_sfcl.Command23 object at 0x06276210>) , Command count = 4837 ] 
11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312930>, <py_sfcl.PySEnhancedCmdData object at 0x063248A0>, <None>, <py_sfcl.Command23 object at 0x06324840>) , Command count = 4838 ] 
11:34:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:39: Host Frequency set to 25000 KHz
11:34:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:39: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 4839 ] 
11:34:39: [GO18_globalSetVolt]### Host voltage value is set.
11:34:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269EA0>, 0x0, False) , Command count = 4840 ] 
11:34:39: [GO18_globalSetVolt]### Host voltage value is set.
11:34:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4841 ] 
11:34:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4842 ] 
11:34:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4843 ] 
11:34:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x06276900>) , Command count = 4844 ] 
11:34:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F00>, <py_sfcl.CommandDataDefinition object at 0x062764E0>) , Command count = 4845 ] 
11:34:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:39: [ SetCardRCA(0x1, 0xD555) , Command count = 4846 ] 
11:34:39: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:39: Host Frequency set to 25000 KHz
11:34:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:39: ####CSD Registe 2.0 Values####
11:34:39: CSD_STRUCTURE                                 :0x1
11:34:39: Reserv1                                       :0x0
11:34:39: Time Access 1 TAAC                            :0xe
11:34:39: Time Access 2 NSAC*100                        :0x0
11:34:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:39: Card Command Classess CCC                     :0x5b5
11:34:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:39: DSR(driver stage register)  DSR_IMP           :0x0
11:34:39: Reserv2                                       :0x0
11:34:39: Device Size C_SIZE                            :0xedc8
11:34:39: Reserv3                                       :0x0
11:34:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:39: Reserv4                                       :0x0
11:34:39: Write Speed Factor R2W_FACTOR                 :0x2
11:34:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:39: FILE_FORMAT_GRP                               :0x0
11:34:39: COPY flag                                     :0x1
11:34:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:39: File_Format                                   :0x0
11:34:39: CRC                                           :0x0
11:34:39: ####CSD Registe Values####  

11:34:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:39: [GetSCRRegisterEntry] Passed
11:34:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:39: Data_Status_After Erases          : 0
11:34:39: CPRM Security Support             : No Security
11:34:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:39: Spec. Version                     : Version 3.0X
11:34:39: Extended Security Support         : Extended_Security_Not_Supported
11:34:39: Command Support                   : COMMAND_SUPPORT
11:34:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 4847 ] 
11:34:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312BD0>, <py_sfcl.CommandDataDefinition object at 0x06276C00>) , Command count = 4848 ] 
11:34:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:39: [ SetBusWidth(0x4) , Command count = 4849 ] 
11:34:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4850 ] 
11:34:39: Protected Area Size 0x28000
11:34:39: Bus Width           2
11:34:39: Secure Mode         0
11:34:39: Speed  Class        4
11:34:39: Perf Move           0
11:34:39: Au Size             9
11:34:39: Erase Size          15
11:34:39: Erase Timeout       1
11:34:39: Erase offset        1
11:34:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4851 ] 
11:34:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:39: Host Frequency set to 100000 KHz
11:34:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:39: ####CSD Registe 2.0 Values####
11:34:39: CSD_STRUCTURE                                 :0x1
11:34:39: Reserv1                                       :0x0
11:34:39: Time Access 1 TAAC                            :0xe
11:34:39: Time Access 2 NSAC*100                        :0x0
11:34:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:39: Card Command Classess CCC                     :0x5b5
11:34:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:39: DSR(driver stage register)  DSR_IMP           :0x0
11:34:39: Reserv2                                       :0x0
11:34:39: Device Size C_SIZE                            :0xedc8
11:34:39: Reserv3                                       :0x0
11:34:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:40: Reserv4                                       :0x0
11:34:40: Write Speed Factor R2W_FACTOR                 :0x2
11:34:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:40: FILE_FORMAT_GRP                               :0x0
11:34:40: COPY flag                                     :0x1
11:34:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:40: File_Format                                   :0x0
11:34:40: CRC                                           :0x0
11:34:40: ####CSD Registe Values####  

11:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 4852 ] 
11:34:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A2D0>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 4853 ] 
11:34:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x062765A0>, <None>, <py_sfcl.Command23 object at 0x062768D0>) , Command count = 4854 ] 
11:34:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
11:34:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x06276EA0>) , Command count = 4855 ] 
11:34:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312960>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x06273A20>) , Command count = 4856 ] 
11:34:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:43: Host Frequency set to 25000 KHz
11:34:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 4857 ] 
11:34:43: [GO18_globalSetVolt]### Host voltage value is set.
11:34:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276D80>, 0x0, False) , Command count = 4858 ] 
11:34:43: [GO18_globalSetVolt]### Host voltage value is set.
11:34:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4859 ] 
11:34:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4860 ] 
11:34:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4861 ] 
11:34:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276600>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 4862 ] 
11:34:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 4863 ] 
11:34:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4864 ] 
11:34:44: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:44: Host Frequency set to 25000 KHz
11:34:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:44: ####CSD Registe 2.0 Values####
11:34:44: CSD_STRUCTURE                                 :0x1
11:34:44: Reserv1                                       :0x0
11:34:44: Time Access 1 TAAC                            :0xe
11:34:44: Time Access 2 NSAC*100                        :0x0
11:34:44: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:44: Card Command Classess CCC                     :0x5b5
11:34:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:44: DSR(driver stage register)  DSR_IMP           :0x0
11:34:44: Reserv2                                       :0x0
11:34:44: Device Size C_SIZE                            :0xedc8
11:34:44: Reserv3                                       :0x0
11:34:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:44: Reserv4                                       :0x0
11:34:44: Write Speed Factor R2W_FACTOR                 :0x2
11:34:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:44: FILE_FORMAT_GRP                               :0x0
11:34:44: COPY flag                                     :0x1
11:34:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:44: File_Format                                   :0x0
11:34:44: CRC                                           :0x0
11:34:44: ####CSD Registe Values####  

11:34:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:44: [GetSCRRegisterEntry] Passed
11:34:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:44: Data_Status_After Erases          : 0
11:34:44: CPRM Security Support             : No Security
11:34:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:44: Spec. Version                     : Version 3.0X
11:34:44: Extended Security Support         : Extended_Security_Not_Supported
11:34:44: Command Support                   : COMMAND_SUPPORT
11:34:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 4865 ] 
11:34:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A270>, <py_sfcl.CommandDataDefinition object at 0x0627A090>) , Command count = 4866 ] 
11:34:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:44: [ SetBusWidth(0x4) , Command count = 4867 ] 
11:34:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4868 ] 
11:34:44: Protected Area Size 0x28000
11:34:44: Bus Width           2
11:34:44: Secure Mode         0
11:34:44: Speed  Class        4
11:34:44: Perf Move           0
11:34:44: Au Size             9
11:34:44: Erase Size          15
11:34:44: Erase Timeout       1
11:34:44: Erase offset        1
11:34:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4869 ] 
11:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:44: Host Frequency set to 100000 KHz
11:34:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:44: ####CSD Registe 2.0 Values####
11:34:44: CSD_STRUCTURE                                 :0x1
11:34:44: Reserv1                                       :0x0
11:34:44: Time Access 1 TAAC                            :0xe
11:34:44: Time Access 2 NSAC*100                        :0x0
11:34:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:44: Card Command Classess CCC                     :0x5b5
11:34:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:44: DSR(driver stage register)  DSR_IMP           :0x0
11:34:44: Reserv2                                       :0x0
11:34:44: Device Size C_SIZE                            :0xedc8
11:34:44: Reserv3                                       :0x0
11:34:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:45: Reserv4                                       :0x0
11:34:45: Write Speed Factor R2W_FACTOR                 :0x2
11:34:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:45: FILE_FORMAT_GRP                               :0x0
11:34:45: COPY flag                                     :0x1
11:34:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:45: File_Format                                   :0x0
11:34:45: CRC                                           :0x0
11:34:45: ####CSD Registe Values####  

11:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 4870 ] 
11:34:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269870>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 4871 ] 
11:34:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06312ED0>) , Command count = 4872 ] 
11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1023
11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x06312B70>, <None>, <py_sfcl.Command23 object at 0x06312AE0>) , Command count = 4873 ] 
11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DD20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401F60>, <py_sfcl.PySEnhancedCmdData object at 0x0627A720>, <None>, <py_sfcl.Command23 object at 0x06312A20>) , Command count = 4874 ] 
11:34:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:46: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:48: Host Frequency set to 25000 KHz
11:34:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:48: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 4875 ] 
11:34:48: [GO18_globalSetVolt]### Host voltage value is set.
11:34:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D090>, 0x0, False) , Command count = 4876 ] 
11:34:48: [GO18_globalSetVolt]### Host voltage value is set.
11:34:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4877 ] 
11:34:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4878 ] 
11:34:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4879 ] 
11:34:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 4880 ] 
11:34:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x0627D630>) , Command count = 4881 ] 
11:34:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:48: [ SetCardRCA(0x1, 0xD555) , Command count = 4882 ] 
11:34:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:48: Host Frequency set to 25000 KHz
11:34:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:48: ####CSD Registe 2.0 Values####
11:34:48: CSD_STRUCTURE                                 :0x1
11:34:48: Reserv1                                       :0x0
11:34:48: Time Access 1 TAAC                            :0xe
11:34:48: Time Access 2 NSAC*100                        :0x0
11:34:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:48: Card Command Classess CCC                     :0x5b5
11:34:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:48: DSR(driver stage register)  DSR_IMP           :0x0
11:34:48: Reserv2                                       :0x0
11:34:48: Device Size C_SIZE                            :0xedc8
11:34:48: Reserv3                                       :0x0
11:34:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:48: Reserv4                                       :0x0
11:34:48: Write Speed Factor R2W_FACTOR                 :0x2
11:34:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:48: FILE_FORMAT_GRP                               :0x0
11:34:48: COPY flag                                     :0x1
11:34:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:48: File_Format                                   :0x0
11:34:48: CRC                                           :0x0
11:34:48: ####CSD Registe Values####  

11:34:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:48: [GetSCRRegisterEntry] Passed
11:34:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:48: Data_Status_After Erases          : 0
11:34:48: CPRM Security Support             : No Security
11:34:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:48: Spec. Version                     : Version 3.0X
11:34:48: Extended Security Support         : Extended_Security_Not_Supported
11:34:48: Command Support                   : COMMAND_SUPPORT
11:34:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 4883 ] 
11:34:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D270>, <py_sfcl.CommandDataDefinition object at 0x0626DCC0>) , Command count = 4884 ] 
11:34:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:48: [ SetBusWidth(0x4) , Command count = 4885 ] 
11:34:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4886 ] 
11:34:48: Protected Area Size 0x28000
11:34:48: Bus Width           2
11:34:49: Secure Mode         0
11:34:49: Speed  Class        4
11:34:49: Perf Move           0
11:34:49: Au Size             9
11:34:49: Erase Size          15
11:34:49: Erase Timeout       1
11:34:49: Erase offset        1
11:34:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4887 ] 
11:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:49: Host Frequency set to 100000 KHz
11:34:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:49: ####CSD Registe 2.0 Values####
11:34:49: CSD_STRUCTURE                                 :0x1
11:34:49: Reserv1                                       :0x0
11:34:49: Time Access 1 TAAC                            :0xe
11:34:49: Time Access 2 NSAC*100                        :0x0
11:34:49: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:49: Card Command Classess CCC                     :0x5b5
11:34:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:49: DSR(driver stage register)  DSR_IMP           :0x0
11:34:49: Reserv2                                       :0x0
11:34:49: Device Size C_SIZE                            :0xedc8
11:34:49: Reserv3                                       :0x0
11:34:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:49: Reserv4                                       :0x0
11:34:49: Write Speed Factor R2W_FACTOR                 :0x2
11:34:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:49: FILE_FORMAT_GRP                               :0x0
11:34:49: COPY flag                                     :0x1
11:34:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:49: File_Format                                   :0x0
11:34:49: CRC                                           :0x0
11:34:49: ####CSD Registe Values####  

11:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 4888 ] 
11:34:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053E2420>, <py_sfcl.CommandDataDefinition object at 0x06312E40>) , Command count = 4889 ] 
11:34:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x06312AB0>, <None>, <py_sfcl.Command23 object at 0x0627A150>) , Command count = 4890 ] 
11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x0626DB10>) , Command count = 4891 ] 
11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A510>, <None>, <py_sfcl.Command23 object at 0x06312C00>) , Command count = 4892 ] 
11:34:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:53: Host Frequency set to 25000 KHz
11:34:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 4893 ] 
11:34:53: [GO18_globalSetVolt]### Host voltage value is set.
11:34:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276120>, 0x0, False) , Command count = 4894 ] 
11:34:53: [GO18_globalSetVolt]### Host voltage value is set.
11:34:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4895 ] 
11:34:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4896 ] 
11:34:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4897 ] 
11:34:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x06312B10>) , Command count = 4898 ] 
11:34:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x0627A180>) , Command count = 4899 ] 
11:34:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:53: [ SetCardRCA(0x1, 0xD555) , Command count = 4900 ] 
11:34:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:53: Host Frequency set to 25000 KHz
11:34:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:53: ####CSD Registe 2.0 Values####
11:34:53: CSD_STRUCTURE                                 :0x1
11:34:53: Reserv1                                       :0x0
11:34:53: Time Access 1 TAAC                            :0xe
11:34:53: Time Access 2 NSAC*100                        :0x0
11:34:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:53: Card Command Classess CCC                     :0x5b5
11:34:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:53: DSR(driver stage register)  DSR_IMP           :0x0
11:34:53: Reserv2                                       :0x0
11:34:53: Device Size C_SIZE                            :0xedc8
11:34:53: Reserv3                                       :0x0
11:34:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:53: Reserv4                                       :0x0
11:34:53: Write Speed Factor R2W_FACTOR                 :0x2
11:34:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:53: FILE_FORMAT_GRP                               :0x0
11:34:53: COPY flag                                     :0x1
11:34:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:53: File_Format                                   :0x0
11:34:53: CRC                                           :0x0
11:34:53: ####CSD Registe Values####  

11:34:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:53: [GetSCRRegisterEntry] Passed
11:34:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:53: Data_Status_After Erases          : 0
11:34:53: CPRM Security Support             : No Security
11:34:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:53: Spec. Version                     : Version 3.0X
11:34:53: Extended Security Support         : Extended_Security_Not_Supported
11:34:53: Command Support                   : COMMAND_SUPPORT
11:34:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 4901 ] 
11:34:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216600>, <py_sfcl.CommandDataDefinition object at 0x0627A5A0>) , Command count = 4902 ] 
11:34:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:53: [ SetBusWidth(0x4) , Command count = 4903 ] 
11:34:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4904 ] 
11:34:53: Protected Area Size 0x28000
11:34:53: Bus Width           2
11:34:53: Secure Mode         0
11:34:53: Speed  Class        4
11:34:53: Perf Move           0
11:34:53: Au Size             9
11:34:53: Erase Size          15
11:34:53: Erase Timeout       1
11:34:53: Erase offset        1
11:34:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4905 ] 
11:34:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:54: Host Frequency set to 100000 KHz
11:34:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:54: ####CSD Registe 2.0 Values####
11:34:54: CSD_STRUCTURE                                 :0x1
11:34:54: Reserv1                                       :0x0
11:34:54: Time Access 1 TAAC                            :0xe
11:34:54: Time Access 2 NSAC*100                        :0x0
11:34:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:54: Card Command Classess CCC                     :0x5b5
11:34:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:54: DSR(driver stage register)  DSR_IMP           :0x0
11:34:54: Reserv2                                       :0x0
11:34:54: Device Size C_SIZE                            :0xedc8
11:34:54: Reserv3                                       :0x0
11:34:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:54: Reserv4                                       :0x0
11:34:54: Write Speed Factor R2W_FACTOR                 :0x2
11:34:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:54: FILE_FORMAT_GRP                               :0x0
11:34:54: COPY flag                                     :0x1
11:34:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:55: File_Format                                   :0x0
11:34:55: CRC                                           :0x0
11:34:55: ####CSD Registe Values####  

11:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 4906 ] 
11:34:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1B0>, <py_sfcl.CommandDataDefinition object at 0x06312E70>) , Command count = 4907 ] 
11:34:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06312C60>, <None>, <py_sfcl.Command23 object at 0x06276BD0>) , Command count = 4908 ] 
11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x06312EA0>, <None>, <py_sfcl.Command23 object at 0x06312DB0>) , Command count = 4909 ] 
11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:34:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627ADE0>, <None>, <py_sfcl.Command23 object at 0x06312DE0>) , Command count = 4910 ] 
11:34:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:34:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:34:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:57: Host Frequency set to 25000 KHz
11:34:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:57: [GO18_globalSetVolt]### Set Host Voltage value.
11:34:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:34:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 4911 ] 
11:34:57: [GO18_globalSetVolt]### Host voltage value is set.
11:34:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:34:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A540>, 0x0, False) , Command count = 4912 ] 
11:34:58: [GO18_globalSetVolt]### Host voltage value is set.
11:34:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4913 ] 
11:34:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:34:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4914 ] 
11:34:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:34:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:34:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:34:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:34:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:34:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4915 ] 
11:34:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:34:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 4916 ] 
11:34:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 4917 ] 
11:34:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:34:58: [ SetCardRCA(0x1, 0xD555) , Command count = 4918 ] 
11:34:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:34:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:34:58: Host Frequency set to 25000 KHz
11:34:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:58: ####CSD Registe 2.0 Values####
11:34:58: CSD_STRUCTURE                                 :0x1
11:34:58: Reserv1                                       :0x0
11:34:58: Time Access 1 TAAC                            :0xe
11:34:58: Time Access 2 NSAC*100                        :0x0
11:34:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:34:58: Card Command Classess CCC                     :0x5b5
11:34:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:58: DSR(driver stage register)  DSR_IMP           :0x0
11:34:58: Reserv2                                       :0x0
11:34:58: Device Size C_SIZE                            :0xedc8
11:34:58: Reserv3                                       :0x0
11:34:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:58: Reserv4                                       :0x0
11:34:58: Write Speed Factor R2W_FACTOR                 :0x2
11:34:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:58: FILE_FORMAT_GRP                               :0x0
11:34:58: COPY flag                                     :0x1
11:34:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:58: File_Format                                   :0x0
11:34:58: CRC                                           :0x0
11:34:58: ####CSD Registe Values####  

11:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:34:58: [GetSCRRegisterEntry] Passed
11:34:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:34:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:34:58: Data_Status_After Erases          : 0
11:34:58: CPRM Security Support             : No Security
11:34:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:34:58: Spec. Version                     : Version 3.0X
11:34:58: Extended Security Support         : Extended_Security_Not_Supported
11:34:58: Command Support                   : COMMAND_SUPPORT
11:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 4919 ] 
11:34:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 4920 ] 
11:34:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:34:58: [ SetBusWidth(0x4) , Command count = 4921 ] 
11:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:34:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4922 ] 
11:34:58: Protected Area Size 0x28000
11:34:58: Bus Width           2
11:34:58: Secure Mode         0
11:34:58: Speed  Class        4
11:34:58: Perf Move           0
11:34:58: Au Size             9
11:34:58: Erase Size          15
11:34:58: Erase Timeout       1
11:34:58: Erase offset        1
11:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:34:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:34:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4923 ] 
11:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:34:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:34:58: Host Frequency set to 100000 KHz
11:34:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:34:58: ####CSD Registe 2.0 Values####
11:34:58: CSD_STRUCTURE                                 :0x1
11:34:58: Reserv1                                       :0x0
11:34:58: Time Access 1 TAAC                            :0xe
11:34:58: Time Access 2 NSAC*100                        :0x0
11:34:58: Data Transfer Rate TRAN_SPEED                 :0xb
11:34:58: Card Command Classess CCC                     :0x5b5
11:34:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:34:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:34:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:34:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:34:58: DSR(driver stage register)  DSR_IMP           :0x0
11:34:58: Reserv2                                       :0x0
11:34:58: Device Size C_SIZE                            :0xedc8
11:34:58: Reserv3                                       :0x0
11:34:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:34:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:34:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:34:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:34:59: Reserv4                                       :0x0
11:34:59: Write Speed Factor R2W_FACTOR                 :0x2
11:34:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:34:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:34:59: FILE_FORMAT_GRP                               :0x0
11:34:59: COPY flag                                     :0x1
11:34:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:34:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:34:59: File_Format                                   :0x0
11:34:59: CRC                                           :0x0
11:34:59: ####CSD Registe Values####  

11:34:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D120>, <py_sfcl.CommandDataDefinition object at 0x06312CC0>) , Command count = 4924 ] 
11:34:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:34:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062736C0>, <py_sfcl.CommandDataDefinition object at 0x062736F0>) , Command count = 4925 ] 
11:34:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:34:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:34:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:34:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x0627D510>, <None>, <py_sfcl.Command23 object at 0x06312BA0>) , Command count = 4926 ] 
11:34:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
11:35:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D300>, <py_sfcl.PySEnhancedCmdData object at 0x06312A50>, <None>, <py_sfcl.Command23 object at 0x0627D210>) , Command count = 4927 ] 
11:35:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268B70>, <py_sfcl.PySEnhancedCmdData object at 0x0627ADE0>, <None>, <py_sfcl.Command23 object at 0x06312FC0>) , Command count = 4928 ] 
11:35:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:02: Host Frequency set to 25000 KHz
11:35:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 4929 ] 
11:35:02: [GO18_globalSetVolt]### Host voltage value is set.
11:35:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273B40>, 0x0, False) , Command count = 4930 ] 
11:35:02: [GO18_globalSetVolt]### Host voltage value is set.
11:35:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4931 ] 
11:35:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4932 ] 
11:35:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4933 ] 
11:35:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273C30>, <py_sfcl.CommandDataDefinition object at 0x06280180>) , Command count = 4934 ] 
11:35:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690F0>, <py_sfcl.CommandDataDefinition object at 0x06276390>) , Command count = 4935 ] 
11:35:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4936 ] 
11:35:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:03: Host Frequency set to 25000 KHz
11:35:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:03: ####CSD Registe 2.0 Values####
11:35:03: CSD_STRUCTURE                                 :0x1
11:35:03: Reserv1                                       :0x0
11:35:03: Time Access 1 TAAC                            :0xe
11:35:03: Time Access 2 NSAC*100                        :0x0
11:35:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:03: Card Command Classess CCC                     :0x5b5
11:35:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:03: DSR(driver stage register)  DSR_IMP           :0x0
11:35:03: Reserv2                                       :0x0
11:35:03: Device Size C_SIZE                            :0xedc8
11:35:03: Reserv3                                       :0x0
11:35:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:03: Reserv4                                       :0x0
11:35:03: Write Speed Factor R2W_FACTOR                 :0x2
11:35:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:03: FILE_FORMAT_GRP                               :0x0
11:35:03: COPY flag                                     :0x1
11:35:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:03: File_Format                                   :0x0
11:35:03: CRC                                           :0x0
11:35:03: ####CSD Registe Values####  

11:35:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:03: [GetSCRRegisterEntry] Passed
11:35:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:03: Data_Status_After Erases          : 0
11:35:03: CPRM Security Support             : No Security
11:35:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:03: Spec. Version                     : Version 3.0X
11:35:03: Extended Security Support         : Extended_Security_Not_Supported
11:35:03: Command Support                   : COMMAND_SUPPORT
11:35:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 4937 ] 
11:35:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D210>, <py_sfcl.CommandDataDefinition object at 0x0627AD20>) , Command count = 4938 ] 
11:35:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:03: [ SetBusWidth(0x4) , Command count = 4939 ] 
11:35:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4940 ] 
11:35:03: Protected Area Size 0x28000
11:35:03: Bus Width           2
11:35:03: Secure Mode         0
11:35:03: Speed  Class        4
11:35:03: Perf Move           0
11:35:03: Au Size             9
11:35:03: Erase Size          15
11:35:03: Erase Timeout       1
11:35:03: Erase offset        1
11:35:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4941 ] 
11:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:03: Host Frequency set to 100000 KHz
11:35:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:03: ####CSD Registe 2.0 Values####
11:35:03: CSD_STRUCTURE                                 :0x1
11:35:03: Reserv1                                       :0x0
11:35:03: Time Access 1 TAAC                            :0xe
11:35:03: Time Access 2 NSAC*100                        :0x0
11:35:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:03: Card Command Classess CCC                     :0x5b5
11:35:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:03: DSR(driver stage register)  DSR_IMP           :0x0
11:35:03: Reserv2                                       :0x0
11:35:03: Device Size C_SIZE                            :0xedc8
11:35:03: Reserv3                                       :0x0
11:35:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:04: Reserv4                                       :0x0
11:35:04: Write Speed Factor R2W_FACTOR                 :0x2
11:35:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:04: FILE_FORMAT_GRP                               :0x0
11:35:04: COPY flag                                     :0x1
11:35:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:04: File_Format                                   :0x0
11:35:04: CRC                                           :0x0
11:35:04: ####CSD Registe Values####  

11:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x0627A960>) , Command count = 4942 ] 
11:35:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276CC0>, <py_sfcl.CommandDataDefinition object at 0x06312F30>) , Command count = 4943 ] 
11:35:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 4944 ] 
11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x06268C60>) , Command count = 4945 ] 
11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062734B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273120>, <py_sfcl.PySEnhancedCmdData object at 0x0627AB10>, <None>, <py_sfcl.Command23 object at 0x06268090>) , Command count = 4946 ] 
11:35:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:07: Host Frequency set to 25000 KHz
11:35:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 4947 ] 
11:35:07: [GO18_globalSetVolt]### Host voltage value is set.
11:35:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216510>, 0x0, False) , Command count = 4948 ] 
11:35:07: [GO18_globalSetVolt]### Host voltage value is set.
11:35:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4949 ] 
11:35:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4950 ] 
11:35:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4951 ] 
11:35:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 4952 ] 
11:35:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x0627D2D0>) , Command count = 4953 ] 
11:35:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4954 ] 
11:35:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:07: Host Frequency set to 25000 KHz
11:35:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:07: ####CSD Registe 2.0 Values####
11:35:07: CSD_STRUCTURE                                 :0x1
11:35:07: Reserv1                                       :0x0
11:35:07: Time Access 1 TAAC                            :0xe
11:35:07: Time Access 2 NSAC*100                        :0x0
11:35:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:07: Card Command Classess CCC                     :0x5b5
11:35:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:07: DSR(driver stage register)  DSR_IMP           :0x0
11:35:07: Reserv2                                       :0x0
11:35:07: Device Size C_SIZE                            :0xedc8
11:35:07: Reserv3                                       :0x0
11:35:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:07: Reserv4                                       :0x0
11:35:07: Write Speed Factor R2W_FACTOR                 :0x2
11:35:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:07: FILE_FORMAT_GRP                               :0x0
11:35:07: COPY flag                                     :0x1
11:35:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:07: File_Format                                   :0x0
11:35:07: CRC                                           :0x0
11:35:07: ####CSD Registe Values####  

11:35:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:07: [GetSCRRegisterEntry] Passed
11:35:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:07: Data_Status_After Erases          : 0
11:35:07: CPRM Security Support             : No Security
11:35:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:07: Spec. Version                     : Version 3.0X
11:35:07: Extended Security Support         : Extended_Security_Not_Supported
11:35:07: Command Support                   : COMMAND_SUPPORT
11:35:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CC0>, <py_sfcl.CommandDataDefinition object at 0x062739F0>) , Command count = 4955 ] 
11:35:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273090>, <py_sfcl.CommandDataDefinition object at 0x0627D3F0>) , Command count = 4956 ] 
11:35:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:07: [ SetBusWidth(0x4) , Command count = 4957 ] 
11:35:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ADB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4958 ] 
11:35:07: Protected Area Size 0x28000
11:35:07: Bus Width           2
11:35:08: Secure Mode         0
11:35:08: Speed  Class        4
11:35:08: Perf Move           0
11:35:08: Au Size             9
11:35:08: Erase Size          15
11:35:08: Erase Timeout       1
11:35:08: Erase offset        1
11:35:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4959 ] 
11:35:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:08: Host Frequency set to 100000 KHz
11:35:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:08: ####CSD Registe 2.0 Values####
11:35:08: CSD_STRUCTURE                                 :0x1
11:35:08: Reserv1                                       :0x0
11:35:08: Time Access 1 TAAC                            :0xe
11:35:08: Time Access 2 NSAC*100                        :0x0
11:35:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:08: Card Command Classess CCC                     :0x5b5
11:35:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:08: DSR(driver stage register)  DSR_IMP           :0x0
11:35:08: Reserv2                                       :0x0
11:35:08: Device Size C_SIZE                            :0xedc8
11:35:08: Reserv3                                       :0x0
11:35:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:09: Reserv4                                       :0x0
11:35:09: Write Speed Factor R2W_FACTOR                 :0x2
11:35:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:09: FILE_FORMAT_GRP                               :0x0
11:35:09: COPY flag                                     :0x1
11:35:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:09: File_Format                                   :0x0
11:35:09: CRC                                           :0x0
11:35:09: ####CSD Registe Values####  

11:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 4960 ] 
11:35:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFF60>, <py_sfcl.CommandDataDefinition object at 0x062688D0>) , Command count = 4961 ] 
11:35:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062169F0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D330>, <None>, <py_sfcl.Command23 object at 0x062680C0>) , Command count = 4962 ] 
11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268060>, <py_sfcl.PySEnhancedCmdData object at 0x06268750>, <None>, <py_sfcl.Command23 object at 0x062688A0>) , Command count = 4963 ] 
11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062683F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D240>, <py_sfcl.PySEnhancedCmdData object at 0x0627AE70>, <None>, <py_sfcl.Command23 object at 0x06268E70>) , Command count = 4964 ] 
11:35:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:12: Host Frequency set to 25000 KHz
11:35:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 4965 ] 
11:35:12: [GO18_globalSetVolt]### Host voltage value is set.
11:35:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276480>, 0x0, False) , Command count = 4966 ] 
11:35:12: [GO18_globalSetVolt]### Host voltage value is set.
11:35:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4967 ] 
11:35:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4968 ] 
11:35:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4969 ] 
11:35:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 4970 ] 
11:35:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 4971 ] 
11:35:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:12: [ SetCardRCA(0x1, 0xD555) , Command count = 4972 ] 
11:35:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:12: Host Frequency set to 25000 KHz
11:35:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:12: ####CSD Registe 2.0 Values####
11:35:12: CSD_STRUCTURE                                 :0x1
11:35:12: Reserv1                                       :0x0
11:35:12: Time Access 1 TAAC                            :0xe
11:35:12: Time Access 2 NSAC*100                        :0x0
11:35:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:12: Card Command Classess CCC                     :0x5b5
11:35:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:12: DSR(driver stage register)  DSR_IMP           :0x0
11:35:12: Reserv2                                       :0x0
11:35:12: Device Size C_SIZE                            :0xedc8
11:35:12: Reserv3                                       :0x0
11:35:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:12: Reserv4                                       :0x0
11:35:12: Write Speed Factor R2W_FACTOR                 :0x2
11:35:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:12: FILE_FORMAT_GRP                               :0x0
11:35:12: COPY flag                                     :0x1
11:35:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:12: File_Format                                   :0x0
11:35:12: CRC                                           :0x0
11:35:12: ####CSD Registe Values####  

11:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:12: [GetSCRRegisterEntry] Passed
11:35:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:12: Data_Status_After Erases          : 0
11:35:12: CPRM Security Support             : No Security
11:35:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:12: Spec. Version                     : Version 3.0X
11:35:12: Extended Security Support         : Extended_Security_Not_Supported
11:35:12: Command Support                   : COMMAND_SUPPORT
11:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 4973 ] 
11:35:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF60>, <py_sfcl.CommandDataDefinition object at 0x062731B0>) , Command count = 4974 ] 
11:35:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:12: [ SetBusWidth(0x4) , Command count = 4975 ] 
11:35:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4976 ] 
11:35:12: Protected Area Size 0x28000
11:35:12: Bus Width           2
11:35:13: Secure Mode         0
11:35:13: Speed  Class        4
11:35:13: Perf Move           0
11:35:13: Au Size             9
11:35:13: Erase Size          15
11:35:13: Erase Timeout       1
11:35:13: Erase offset        1
11:35:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4977 ] 
11:35:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:13: Host Frequency set to 100000 KHz
11:35:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:13: ####CSD Registe 2.0 Values####
11:35:13: CSD_STRUCTURE                                 :0x1
11:35:13: Reserv1                                       :0x0
11:35:13: Time Access 1 TAAC                            :0xe
11:35:13: Time Access 2 NSAC*100                        :0x0
11:35:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:13: Card Command Classess CCC                     :0x5b5
11:35:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:13: DSR(driver stage register)  DSR_IMP           :0x0
11:35:13: Reserv2                                       :0x0
11:35:13: Device Size C_SIZE                            :0xedc8
11:35:13: Reserv3                                       :0x0
11:35:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:13: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:13: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:13: Reserv4                                       :0x0
11:35:13: Write Speed Factor R2W_FACTOR                 :0x2
11:35:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:13: FILE_FORMAT_GRP                               :0x0
11:35:13: COPY flag                                     :0x1
11:35:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:13: File_Format                                   :0x0
11:35:13: CRC                                           :0x0
11:35:13: ####CSD Registe Values####  

11:35:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 4978 ] 
11:35:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273960>, <py_sfcl.CommandDataDefinition object at 0x0627AF30>) , Command count = 4979 ] 
11:35:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06280150>, <py_sfcl.PySEnhancedCmdData object at 0x0627D6F0>, <None>, <py_sfcl.Command23 object at 0x0627AB10>) , Command count = 4980 ] 
11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273ED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062733C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D780>, <None>, <py_sfcl.Command23 object at 0x0627DC30>) , Command count = 4981 ] 
11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268E70>, <py_sfcl.PySEnhancedCmdData object at 0x06268660>, <None>, <py_sfcl.Command23 object at 0x0626D450>) , Command count = 4982 ] 
11:35:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:17: Host Frequency set to 25000 KHz
11:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 4983 ] 
11:35:17: [GO18_globalSetVolt]### Host voltage value is set.
11:35:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D660>, 0x0, False) , Command count = 4984 ] 
11:35:17: [GO18_globalSetVolt]### Host voltage value is set.
11:35:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4985 ] 
11:35:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4986 ] 
11:35:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4987 ] 
11:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 4988 ] 
11:35:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x06269D50>) , Command count = 4989 ] 
11:35:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:17: [ SetCardRCA(0x1, 0xD555) , Command count = 4990 ] 
11:35:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:17: Host Frequency set to 25000 KHz
11:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:17: ####CSD Registe 2.0 Values####
11:35:17: CSD_STRUCTURE                                 :0x1
11:35:17: Reserv1                                       :0x0
11:35:17: Time Access 1 TAAC                            :0xe
11:35:17: Time Access 2 NSAC*100                        :0x0
11:35:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:17: Card Command Classess CCC                     :0x5b5
11:35:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:17: DSR(driver stage register)  DSR_IMP           :0x0
11:35:17: Reserv2                                       :0x0
11:35:17: Device Size C_SIZE                            :0xedc8
11:35:17: Reserv3                                       :0x0
11:35:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:17: Reserv4                                       :0x0
11:35:17: Write Speed Factor R2W_FACTOR                 :0x2
11:35:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:17: FILE_FORMAT_GRP                               :0x0
11:35:17: COPY flag                                     :0x1
11:35:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:17: File_Format                                   :0x0
11:35:17: CRC                                           :0x0
11:35:17: ####CSD Registe Values####  

11:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:17: [GetSCRRegisterEntry] Passed
11:35:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:17: Data_Status_After Erases          : 0
11:35:17: CPRM Security Support             : No Security
11:35:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:17: Spec. Version                     : Version 3.0X
11:35:17: Extended Security Support         : Extended_Security_Not_Supported
11:35:17: Command Support                   : COMMAND_SUPPORT
11:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 4991 ] 
11:35:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062687B0>, <py_sfcl.CommandDataDefinition object at 0x06269E10>) , Command count = 4992 ] 
11:35:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:17: [ SetBusWidth(0x4) , Command count = 4993 ] 
11:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4994 ] 
11:35:17: Protected Area Size 0x28000
11:35:17: Bus Width           2
11:35:17: Secure Mode         0
11:35:17: Speed  Class        4
11:35:17: Perf Move           0
11:35:17: Au Size             9
11:35:17: Erase Size          15
11:35:17: Erase Timeout       1
11:35:17: Erase offset        1
11:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4995 ] 
11:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:17: Host Frequency set to 100000 KHz
11:35:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:18: ####CSD Registe 2.0 Values####
11:35:18: CSD_STRUCTURE                                 :0x1
11:35:18: Reserv1                                       :0x0
11:35:18: Time Access 1 TAAC                            :0xe
11:35:18: Time Access 2 NSAC*100                        :0x0
11:35:18: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:18: Card Command Classess CCC                     :0x5b5
11:35:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:18: DSR(driver stage register)  DSR_IMP           :0x0
11:35:18: Reserv2                                       :0x0
11:35:18: Device Size C_SIZE                            :0xedc8
11:35:18: Reserv3                                       :0x0
11:35:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:18: Reserv4                                       :0x0
11:35:18: Write Speed Factor R2W_FACTOR                 :0x2
11:35:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:18: FILE_FORMAT_GRP                               :0x0
11:35:18: COPY flag                                     :0x1
11:35:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:18: File_Format                                   :0x0
11:35:18: CRC                                           :0x0
11:35:18: ####CSD Registe Values####  

11:35:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x062683C0>) , Command count = 4996 ] 
11:35:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062764B0>, <py_sfcl.CommandDataDefinition object at 0x0627DCC0>) , Command count = 4997 ] 
11:35:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D840>, <py_sfcl.PySEnhancedCmdData object at 0x0627D390>, <None>, <py_sfcl.Command23 object at 0x06268F30>) , Command count = 4998 ] 
11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062692A0>, <py_sfcl.PySEnhancedCmdData object at 0x062695A0>, <None>, <py_sfcl.Command23 object at 0x0627D870>) , Command count = 4999 ] 
11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268030>, <py_sfcl.PySEnhancedCmdData object at 0x063249C0>, <None>, <py_sfcl.Command23 object at 0x06273630>) , Command count = 5000 ] 
11:35:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:19: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:21: Host Frequency set to 25000 KHz
11:35:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 5001 ] 
11:35:21: [GO18_globalSetVolt]### Host voltage value is set.
11:35:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273DB0>, 0x0, False) , Command count = 5002 ] 
11:35:22: [GO18_globalSetVolt]### Host voltage value is set.
11:35:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5003 ] 
11:35:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5004 ] 
11:35:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5005 ] 
11:35:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 5006 ] 
11:35:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C00>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 5007 ] 
11:35:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:22: [ SetCardRCA(0x1, 0xD555) , Command count = 5008 ] 
11:35:22: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:22: Host Frequency set to 25000 KHz
11:35:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:22: ####CSD Registe 2.0 Values####
11:35:22: CSD_STRUCTURE                                 :0x1
11:35:22: Reserv1                                       :0x0
11:35:22: Time Access 1 TAAC                            :0xe
11:35:22: Time Access 2 NSAC*100                        :0x0
11:35:22: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:22: Card Command Classess CCC                     :0x5b5
11:35:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:22: DSR(driver stage register)  DSR_IMP           :0x0
11:35:22: Reserv2                                       :0x0
11:35:22: Device Size C_SIZE                            :0xedc8
11:35:22: Reserv3                                       :0x0
11:35:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:22: Reserv4                                       :0x0
11:35:22: Write Speed Factor R2W_FACTOR                 :0x2
11:35:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:22: FILE_FORMAT_GRP                               :0x0
11:35:22: COPY flag                                     :0x1
11:35:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:22: File_Format                                   :0x0
11:35:22: CRC                                           :0x0
11:35:22: ####CSD Registe Values####  

11:35:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:22: [GetSCRRegisterEntry] Passed
11:35:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:22: Data_Status_After Erases          : 0
11:35:22: CPRM Security Support             : No Security
11:35:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:22: Spec. Version                     : Version 3.0X
11:35:22: Extended Security Support         : Extended_Security_Not_Supported
11:35:22: Command Support                   : COMMAND_SUPPORT
11:35:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 5009 ] 
11:35:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 5010 ] 
11:35:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:22: [ SetBusWidth(0x4) , Command count = 5011 ] 
11:35:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0626D7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5012 ] 
11:35:22: Protected Area Size 0x28000
11:35:22: Bus Width           2
11:35:22: Secure Mode         0
11:35:22: Speed  Class        4
11:35:22: Perf Move           0
11:35:22: Au Size             9
11:35:22: Erase Size          15
11:35:22: Erase Timeout       1
11:35:22: Erase offset        1
11:35:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5013 ] 
11:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:22: Host Frequency set to 100000 KHz
11:35:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:22: ####CSD Registe 2.0 Values####
11:35:22: CSD_STRUCTURE                                 :0x1
11:35:22: Reserv1                                       :0x0
11:35:22: Time Access 1 TAAC                            :0xe
11:35:22: Time Access 2 NSAC*100                        :0x0
11:35:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:22: Card Command Classess CCC                     :0x5b5
11:35:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:22: DSR(driver stage register)  DSR_IMP           :0x0
11:35:22: Reserv2                                       :0x0
11:35:22: Device Size C_SIZE                            :0xedc8
11:35:22: Reserv3                                       :0x0
11:35:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:23: Reserv4                                       :0x0
11:35:23: Write Speed Factor R2W_FACTOR                 :0x2
11:35:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:23: FILE_FORMAT_GRP                               :0x0
11:35:23: COPY flag                                     :0x1
11:35:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:23: File_Format                                   :0x0
11:35:23: CRC                                           :0x0
11:35:23: ####CSD Registe Values####  

11:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 5014 ] 
11:35:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D3C0>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 5015 ] 
11:35:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D480>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269600>, <py_sfcl.PySEnhancedCmdData object at 0x062691E0>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 5016 ] 
11:35:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
11:35:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x06269D80>) , Command count = 5017 ] 
11:35:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269960>, <py_sfcl.PySEnhancedCmdData object at 0x06324120>, <None>, <py_sfcl.Command23 object at 0x062698D0>) , Command count = 5018 ] 
11:35:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:24: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:26: Host Frequency set to 25000 KHz
11:35:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:26: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 5019 ] 
11:35:26: [GO18_globalSetVolt]### Host voltage value is set.
11:35:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268AB0>, 0x0, False) , Command count = 5020 ] 
11:35:26: [GO18_globalSetVolt]### Host voltage value is set.
11:35:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5021 ] 
11:35:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5022 ] 
11:35:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5023 ] 
11:35:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 5024 ] 
11:35:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 5025 ] 
11:35:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:27: [ SetCardRCA(0x1, 0xD555) , Command count = 5026 ] 
11:35:27: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:27: Host Frequency set to 25000 KHz
11:35:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:27: ####CSD Registe 2.0 Values####
11:35:27: CSD_STRUCTURE                                 :0x1
11:35:27: Reserv1                                       :0x0
11:35:27: Time Access 1 TAAC                            :0xe
11:35:27: Time Access 2 NSAC*100                        :0x0
11:35:27: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:27: Card Command Classess CCC                     :0x5b5
11:35:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:27: DSR(driver stage register)  DSR_IMP           :0x0
11:35:27: Reserv2                                       :0x0
11:35:27: Device Size C_SIZE                            :0xedc8
11:35:27: Reserv3                                       :0x0
11:35:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:27: Reserv4                                       :0x0
11:35:27: Write Speed Factor R2W_FACTOR                 :0x2
11:35:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:27: FILE_FORMAT_GRP                               :0x0
11:35:27: COPY flag                                     :0x1
11:35:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:27: File_Format                                   :0x0
11:35:27: CRC                                           :0x0
11:35:27: ####CSD Registe Values####  

11:35:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:27: [GetSCRRegisterEntry] Passed
11:35:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:27: Data_Status_After Erases          : 0
11:35:27: CPRM Security Support             : No Security
11:35:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:27: Spec. Version                     : Version 3.0X
11:35:27: Extended Security Support         : Extended_Security_Not_Supported
11:35:27: Command Support                   : COMMAND_SUPPORT
11:35:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 5027 ] 
11:35:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D20>, <py_sfcl.CommandDataDefinition object at 0x06273EA0>) , Command count = 5028 ] 
11:35:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:27: [ SetBusWidth(0x4) , Command count = 5029 ] 
11:35:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5030 ] 
11:35:27: Protected Area Size 0x28000
11:35:27: Bus Width           2
11:35:27: Secure Mode         0
11:35:27: Speed  Class        4
11:35:27: Perf Move           0
11:35:27: Au Size             9
11:35:27: Erase Size          15
11:35:27: Erase Timeout       1
11:35:27: Erase offset        1
11:35:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5031 ] 
11:35:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:27: Host Frequency set to 100000 KHz
11:35:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:27: ####CSD Registe 2.0 Values####
11:35:27: CSD_STRUCTURE                                 :0x1
11:35:27: Reserv1                                       :0x0
11:35:27: Time Access 1 TAAC                            :0xe
11:35:27: Time Access 2 NSAC*100                        :0x0
11:35:27: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:27: Card Command Classess CCC                     :0x5b5
11:35:27: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:27: DSR(driver stage register)  DSR_IMP           :0x0
11:35:27: Reserv2                                       :0x0
11:35:27: Device Size C_SIZE                            :0xedc8
11:35:27: Reserv3                                       :0x0
11:35:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:28: Reserv4                                       :0x0
11:35:28: Write Speed Factor R2W_FACTOR                 :0x2
11:35:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:28: FILE_FORMAT_GRP                               :0x0
11:35:28: COPY flag                                     :0x1
11:35:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:28: File_Format                                   :0x0
11:35:28: CRC                                           :0x0
11:35:28: ####CSD Registe Values####  

11:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x06276B40>) , Command count = 5032 ] 
11:35:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D8A0>, <py_sfcl.CommandDataDefinition object at 0x062693C0>) , Command count = 5033 ] 
11:35:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D360>, <None>, <py_sfcl.Command23 object at 0x0626D7B0>) , Command count = 5034 ] 
11:35:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
11:35:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273690>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBD0>, <None>, <py_sfcl.Command23 object at 0x0626D570>) , Command count = 5035 ] 
11:35:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062739C0>, <py_sfcl.PySEnhancedCmdData object at 0x063249C0>, <None>, <py_sfcl.Command23 object at 0x0626D630>) , Command count = 5036 ] 
11:35:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:29: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:31: Host Frequency set to 25000 KHz
11:35:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:31: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x062696F0>, 0x0, True) , Command count = 5037 ] 
11:35:31: [GO18_globalSetVolt]### Host voltage value is set.
11:35:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D750>, 0x0, False) , Command count = 5038 ] 
11:35:31: [GO18_globalSetVolt]### Host voltage value is set.
11:35:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5039 ] 
11:35:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5040 ] 
11:35:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5041 ] 
11:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B10>, <py_sfcl.CommandDataDefinition object at 0x06273930>) , Command count = 5042 ] 
11:35:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x0626DA50>) , Command count = 5043 ] 
11:35:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:31: [ SetCardRCA(0x1, 0xD555) , Command count = 5044 ] 
11:35:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:32: Host Frequency set to 25000 KHz
11:35:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:32: ####CSD Registe 2.0 Values####
11:35:32: CSD_STRUCTURE                                 :0x1
11:35:32: Reserv1                                       :0x0
11:35:32: Time Access 1 TAAC                            :0xe
11:35:32: Time Access 2 NSAC*100                        :0x0
11:35:32: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:32: Card Command Classess CCC                     :0x5b5
11:35:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:32: DSR(driver stage register)  DSR_IMP           :0x0
11:35:32: Reserv2                                       :0x0
11:35:32: Device Size C_SIZE                            :0xedc8
11:35:32: Reserv3                                       :0x0
11:35:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:32: Reserv4                                       :0x0
11:35:32: Write Speed Factor R2W_FACTOR                 :0x2
11:35:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:32: FILE_FORMAT_GRP                               :0x0
11:35:32: COPY flag                                     :0x1
11:35:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:32: File_Format                                   :0x0
11:35:32: CRC                                           :0x0
11:35:32: ####CSD Registe Values####  

11:35:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:32: [GetSCRRegisterEntry] Passed
11:35:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:32: Data_Status_After Erases          : 0
11:35:32: CPRM Security Support             : No Security
11:35:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:32: Spec. Version                     : Version 3.0X
11:35:32: Extended Security Support         : Extended_Security_Not_Supported
11:35:32: Command Support                   : COMMAND_SUPPORT
11:35:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 5045 ] 
11:35:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x0626D690>) , Command count = 5046 ] 
11:35:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:32: [ SetBusWidth(0x4) , Command count = 5047 ] 
11:35:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5048 ] 
11:35:32: Protected Area Size 0x28000
11:35:32: Bus Width           2
11:35:32: Secure Mode         0
11:35:32: Speed  Class        4
11:35:32: Perf Move           0
11:35:32: Au Size             9
11:35:32: Erase Size          15
11:35:32: Erase Timeout       1
11:35:32: Erase offset        1
11:35:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5049 ] 
11:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:32: Host Frequency set to 100000 KHz
11:35:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:32: ####CSD Registe 2.0 Values####
11:35:32: CSD_STRUCTURE                                 :0x1
11:35:32: Reserv1                                       :0x0
11:35:32: Time Access 1 TAAC                            :0xe
11:35:32: Time Access 2 NSAC*100                        :0x0
11:35:32: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:32: Card Command Classess CCC                     :0x5b5
11:35:32: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:32: DSR(driver stage register)  DSR_IMP           :0x0
11:35:32: Reserv2                                       :0x0
11:35:32: Device Size C_SIZE                            :0xedc8
11:35:32: Reserv3                                       :0x0
11:35:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:33: Reserv4                                       :0x0
11:35:33: Write Speed Factor R2W_FACTOR                 :0x2
11:35:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:33: FILE_FORMAT_GRP                               :0x0
11:35:33: COPY flag                                     :0x1
11:35:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:33: File_Format                                   :0x0
11:35:33: CRC                                           :0x0
11:35:33: ####CSD Registe Values####  

11:35:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 5050 ] 
11:35:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C90>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 5051 ] 
11:35:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273570>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x0626D990>) , Command count = 5052 ] 
11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063249C0>, <py_sfcl.PySEnhancedCmdData object at 0x06324480>, <None>, <py_sfcl.Command23 object at 0x0626DC00>) , Command count = 5053 ] 
11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401F90>, <py_sfcl.PySEnhancedCmdData object at 0x06324930>, <None>, <py_sfcl.Command23 object at 0x063245A0>) , Command count = 5054 ] 
11:35:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:34: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:36: Host Frequency set to 25000 KHz
11:35:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:36: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 5055 ] 
11:35:36: [GO18_globalSetVolt]### Host voltage value is set.
11:35:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273480>, 0x0, False) , Command count = 5056 ] 
11:35:36: [GO18_globalSetVolt]### Host voltage value is set.
11:35:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5057 ] 
11:35:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5058 ] 
11:35:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5059 ] 
11:35:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 5060 ] 
11:35:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 5061 ] 
11:35:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:36: [ SetCardRCA(0x1, 0xD555) , Command count = 5062 ] 
11:35:36: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:36: Host Frequency set to 25000 KHz
11:35:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:36: ####CSD Registe 2.0 Values####
11:35:36: CSD_STRUCTURE                                 :0x1
11:35:36: Reserv1                                       :0x0
11:35:36: Time Access 1 TAAC                            :0xe
11:35:36: Time Access 2 NSAC*100                        :0x0
11:35:36: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:36: Card Command Classess CCC                     :0x5b5
11:35:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:36: DSR(driver stage register)  DSR_IMP           :0x0
11:35:36: Reserv2                                       :0x0
11:35:36: Device Size C_SIZE                            :0xedc8
11:35:36: Reserv3                                       :0x0
11:35:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:36: Reserv4                                       :0x0
11:35:36: Write Speed Factor R2W_FACTOR                 :0x2
11:35:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:36: FILE_FORMAT_GRP                               :0x0
11:35:36: COPY flag                                     :0x1
11:35:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:36: File_Format                                   :0x0
11:35:36: CRC                                           :0x0
11:35:36: ####CSD Registe Values####  

11:35:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:36: [GetSCRRegisterEntry] Passed
11:35:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:36: Data_Status_After Erases          : 0
11:35:36: CPRM Security Support             : No Security
11:35:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:36: Spec. Version                     : Version 3.0X
11:35:36: Extended Security Support         : Extended_Security_Not_Supported
11:35:36: Command Support                   : COMMAND_SUPPORT
11:35:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 5063 ] 
11:35:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 5064 ] 
11:35:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:36: [ SetBusWidth(0x4) , Command count = 5065 ] 
11:35:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5066 ] 
11:35:37: Protected Area Size 0x28000
11:35:37: Bus Width           2
11:35:37: Secure Mode         0
11:35:37: Speed  Class        4
11:35:37: Perf Move           0
11:35:37: Au Size             9
11:35:37: Erase Size          15
11:35:37: Erase Timeout       1
11:35:37: Erase offset        1
11:35:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5067 ] 
11:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:37: Host Frequency set to 100000 KHz
11:35:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:37: ####CSD Registe 2.0 Values####
11:35:37: CSD_STRUCTURE                                 :0x1
11:35:37: Reserv1                                       :0x0
11:35:37: Time Access 1 TAAC                            :0xe
11:35:37: Time Access 2 NSAC*100                        :0x0
11:35:37: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:37: Card Command Classess CCC                     :0x5b5
11:35:37: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:37: DSR(driver stage register)  DSR_IMP           :0x0
11:35:37: Reserv2                                       :0x0
11:35:37: Device Size C_SIZE                            :0xedc8
11:35:37: Reserv3                                       :0x0
11:35:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:38: Reserv4                                       :0x0
11:35:38: Write Speed Factor R2W_FACTOR                 :0x2
11:35:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:38: FILE_FORMAT_GRP                               :0x0
11:35:38: COPY flag                                     :0x1
11:35:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:38: File_Format                                   :0x0
11:35:38: CRC                                           :0x0
11:35:38: ####CSD Registe Values####  

11:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627A210>) , Command count = 5068 ] 
11:35:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AB0>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 5069 ] 
11:35:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD50>, <None>, <py_sfcl.Command23 object at 0x0626DDB0>) , Command count = 5070 ] 
11:35:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
11:35:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762A0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD20>, <None>, <py_sfcl.Command23 object at 0x0626D1B0>) , Command count = 5071 ] 
11:35:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063243F0>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x0626D030>) , Command count = 5072 ] 
11:35:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:39: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:41: Host Frequency set to 25000 KHz
11:35:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:41: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 5073 ] 
11:35:41: [GO18_globalSetVolt]### Host voltage value is set.
11:35:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269540>, 0x0, False) , Command count = 5074 ] 
11:35:41: [GO18_globalSetVolt]### Host voltage value is set.
11:35:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5075 ] 
11:35:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5076 ] 
11:35:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5077 ] 
11:35:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 5078 ] 
11:35:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 5079 ] 
11:35:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:41: [ SetCardRCA(0x1, 0xD555) , Command count = 5080 ] 
11:35:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:42: Host Frequency set to 25000 KHz
11:35:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:42: ####CSD Registe 2.0 Values####
11:35:42: CSD_STRUCTURE                                 :0x1
11:35:42: Reserv1                                       :0x0
11:35:42: Time Access 1 TAAC                            :0xe
11:35:42: Time Access 2 NSAC*100                        :0x0
11:35:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:42: Card Command Classess CCC                     :0x5b5
11:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:42: DSR(driver stage register)  DSR_IMP           :0x0
11:35:42: Reserv2                                       :0x0
11:35:42: Device Size C_SIZE                            :0xedc8
11:35:42: Reserv3                                       :0x0
11:35:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:42: Reserv4                                       :0x0
11:35:42: Write Speed Factor R2W_FACTOR                 :0x2
11:35:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:42: FILE_FORMAT_GRP                               :0x0
11:35:42: COPY flag                                     :0x1
11:35:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:42: File_Format                                   :0x0
11:35:42: CRC                                           :0x0
11:35:42: ####CSD Registe Values####  

11:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:42: [GetSCRRegisterEntry] Passed
11:35:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:42: Data_Status_After Erases          : 0
11:35:42: CPRM Security Support             : No Security
11:35:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:42: Spec. Version                     : Version 3.0X
11:35:42: Extended Security Support         : Extended_Security_Not_Supported
11:35:42: Command Support                   : COMMAND_SUPPORT
11:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 5081 ] 
11:35:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDE0>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 5082 ] 
11:35:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:42: [ SetBusWidth(0x4) , Command count = 5083 ] 
11:35:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5084 ] 
11:35:42: Protected Area Size 0x28000
11:35:42: Bus Width           2
11:35:42: Secure Mode         0
11:35:42: Speed  Class        4
11:35:42: Perf Move           0
11:35:42: Au Size             9
11:35:42: Erase Size          15
11:35:42: Erase Timeout       1
11:35:42: Erase offset        1
11:35:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5085 ] 
11:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:42: Host Frequency set to 100000 KHz
11:35:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:42: ####CSD Registe 2.0 Values####
11:35:42: CSD_STRUCTURE                                 :0x1
11:35:42: Reserv1                                       :0x0
11:35:42: Time Access 1 TAAC                            :0xe
11:35:42: Time Access 2 NSAC*100                        :0x0
11:35:42: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:42: Card Command Classess CCC                     :0x5b5
11:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:42: DSR(driver stage register)  DSR_IMP           :0x0
11:35:42: Reserv2                                       :0x0
11:35:42: Device Size C_SIZE                            :0xedc8
11:35:42: Reserv3                                       :0x0
11:35:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:43: Reserv4                                       :0x0
11:35:43: Write Speed Factor R2W_FACTOR                 :0x2
11:35:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:43: FILE_FORMAT_GRP                               :0x0
11:35:43: COPY flag                                     :0x1
11:35:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:43: File_Format                                   :0x0
11:35:43: CRC                                           :0x0
11:35:43: ####CSD Registe Values####  

11:35:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 5086 ] 
11:35:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D120>, <py_sfcl.CommandDataDefinition object at 0x0626D5A0>) , Command count = 5087 ] 
11:35:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x062763C0>) , Command count = 5088 ] 
11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062730C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DA80>, <py_sfcl.PySEnhancedCmdData object at 0x06276DB0>, <None>, <py_sfcl.Command23 object at 0x06273840>) , Command count = 5089 ] 
11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063243C0>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x06276210>) , Command count = 5090 ] 
11:35:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:44: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:46: Host Frequency set to 25000 KHz
11:35:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:46: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 5091 ] 
11:35:46: [GO18_globalSetVolt]### Host voltage value is set.
11:35:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273900>, 0x0, False) , Command count = 5092 ] 
11:35:46: [GO18_globalSetVolt]### Host voltage value is set.
11:35:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5093 ] 
11:35:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5094 ] 
11:35:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5095 ] 
11:35:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F60>, <py_sfcl.CommandDataDefinition object at 0x06276900>) , Command count = 5096 ] 
11:35:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0F0>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 5097 ] 
11:35:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:46: [ SetCardRCA(0x1, 0xD555) , Command count = 5098 ] 
11:35:46: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:47: Host Frequency set to 25000 KHz
11:35:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:47: ####CSD Registe 2.0 Values####
11:35:47: CSD_STRUCTURE                                 :0x1
11:35:47: Reserv1                                       :0x0
11:35:47: Time Access 1 TAAC                            :0xe
11:35:47: Time Access 2 NSAC*100                        :0x0
11:35:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:47: Card Command Classess CCC                     :0x5b5
11:35:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:47: DSR(driver stage register)  DSR_IMP           :0x0
11:35:47: Reserv2                                       :0x0
11:35:47: Device Size C_SIZE                            :0xedc8
11:35:47: Reserv3                                       :0x0
11:35:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:47: Reserv4                                       :0x0
11:35:47: Write Speed Factor R2W_FACTOR                 :0x2
11:35:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:47: FILE_FORMAT_GRP                               :0x0
11:35:47: COPY flag                                     :0x1
11:35:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:47: File_Format                                   :0x0
11:35:47: CRC                                           :0x0
11:35:47: ####CSD Registe Values####  

11:35:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:47: [GetSCRRegisterEntry] Passed
11:35:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:47: Data_Status_After Erases          : 0
11:35:47: CPRM Security Support             : No Security
11:35:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:47: Spec. Version                     : Version 3.0X
11:35:47: Extended Security Support         : Extended_Security_Not_Supported
11:35:47: Command Support                   : COMMAND_SUPPORT
11:35:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 5099 ] 
11:35:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x062764E0>) , Command count = 5100 ] 
11:35:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:47: [ SetBusWidth(0x4) , Command count = 5101 ] 
11:35:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063245D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5102 ] 
11:35:47: Protected Area Size 0x28000
11:35:47: Bus Width           2
11:35:47: Secure Mode         0
11:35:47: Speed  Class        4
11:35:47: Perf Move           0
11:35:47: Au Size             9
11:35:47: Erase Size          15
11:35:47: Erase Timeout       1
11:35:47: Erase offset        1
11:35:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5103 ] 
11:35:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:47: Host Frequency set to 100000 KHz
11:35:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:47: ####CSD Registe 2.0 Values####
11:35:47: CSD_STRUCTURE                                 :0x1
11:35:47: Reserv1                                       :0x0
11:35:47: Time Access 1 TAAC                            :0xe
11:35:47: Time Access 2 NSAC*100                        :0x0
11:35:47: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:47: Card Command Classess CCC                     :0x5b5
11:35:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:47: DSR(driver stage register)  DSR_IMP           :0x0
11:35:47: Reserv2                                       :0x0
11:35:47: Device Size C_SIZE                            :0xedc8
11:35:47: Reserv3                                       :0x0
11:35:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:48: Reserv4                                       :0x0
11:35:48: Write Speed Factor R2W_FACTOR                 :0x2
11:35:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:48: FILE_FORMAT_GRP                               :0x0
11:35:48: COPY flag                                     :0x1
11:35:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:48: File_Format                                   :0x0
11:35:48: CRC                                           :0x0
11:35:48: ####CSD Registe Values####  

11:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 5104 ] 
11:35:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DB70>, <py_sfcl.CommandDataDefinition object at 0x06312930>) , Command count = 5105 ] 
11:35:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x062765A0>, <None>, <py_sfcl.Command23 object at 0x06276810>) , Command count = 5106 ] 
11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x062768D0>) , Command count = 5107 ] 
11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063244E0>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x06276EA0>) , Command count = 5108 ] 
11:35:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:49: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:51: Host Frequency set to 25000 KHz
11:35:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:51: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 5109 ] 
11:35:51: [GO18_globalSetVolt]### Host voltage value is set.
11:35:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DC90>, 0x0, False) , Command count = 5110 ] 
11:35:51: [GO18_globalSetVolt]### Host voltage value is set.
11:35:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5111 ] 
11:35:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5112 ] 
11:35:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5113 ] 
11:35:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B10>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 5114 ] 
11:35:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 5115 ] 
11:35:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:51: [ SetCardRCA(0x1, 0xD555) , Command count = 5116 ] 
11:35:51: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:51: Host Frequency set to 25000 KHz
11:35:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:51: ####CSD Registe 2.0 Values####
11:35:51: CSD_STRUCTURE                                 :0x1
11:35:51: Reserv1                                       :0x0
11:35:51: Time Access 1 TAAC                            :0xe
11:35:51: Time Access 2 NSAC*100                        :0x0
11:35:51: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:51: Card Command Classess CCC                     :0x5b5
11:35:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:51: DSR(driver stage register)  DSR_IMP           :0x0
11:35:51: Reserv2                                       :0x0
11:35:51: Device Size C_SIZE                            :0xedc8
11:35:51: Reserv3                                       :0x0
11:35:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:51: Reserv4                                       :0x0
11:35:51: Write Speed Factor R2W_FACTOR                 :0x2
11:35:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:51: FILE_FORMAT_GRP                               :0x0
11:35:51: COPY flag                                     :0x1
11:35:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:51: File_Format                                   :0x0
11:35:51: CRC                                           :0x0
11:35:51: ####CSD Registe Values####  

11:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:51: [GetSCRRegisterEntry] Passed
11:35:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:51: Data_Status_After Erases          : 0
11:35:51: CPRM Security Support             : No Security
11:35:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:51: Spec. Version                     : Version 3.0X
11:35:51: Extended Security Support         : Extended_Security_Not_Supported
11:35:51: Command Support                   : COMMAND_SUPPORT
11:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 5117 ] 
11:35:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 5118 ] 
11:35:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:51: [ SetBusWidth(0x4) , Command count = 5119 ] 
11:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5120 ] 
11:35:51: Protected Area Size 0x28000
11:35:51: Bus Width           2
11:35:51: Secure Mode         0
11:35:51: Speed  Class        4
11:35:51: Perf Move           0
11:35:51: Au Size             9
11:35:51: Erase Size          15
11:35:51: Erase Timeout       1
11:35:51: Erase offset        1
11:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5121 ] 
11:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:52: Host Frequency set to 100000 KHz
11:35:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:52: ####CSD Registe 2.0 Values####
11:35:52: CSD_STRUCTURE                                 :0x1
11:35:52: Reserv1                                       :0x0
11:35:52: Time Access 1 TAAC                            :0xe
11:35:52: Time Access 2 NSAC*100                        :0x0
11:35:52: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:52: Card Command Classess CCC                     :0x5b5
11:35:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:52: DSR(driver stage register)  DSR_IMP           :0x0
11:35:52: Reserv2                                       :0x0
11:35:52: Device Size C_SIZE                            :0xedc8
11:35:52: Reserv3                                       :0x0
11:35:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:52: Reserv4                                       :0x0
11:35:52: Write Speed Factor R2W_FACTOR                 :0x2
11:35:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:52: FILE_FORMAT_GRP                               :0x0
11:35:52: COPY flag                                     :0x1
11:35:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:52: File_Format                                   :0x0
11:35:52: CRC                                           :0x0
11:35:52: ####CSD Registe Values####  

11:35:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 5122 ] 
11:35:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB70>, <py_sfcl.CommandDataDefinition object at 0x06273A20>) , Command count = 5123 ] 
11:35:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06312ED0>) , Command count = 5124 ] 
11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x06312B70>, <None>, <py_sfcl.Command23 object at 0x0626D780>) , Command count = 5125 ] 
11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276D80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063247B0>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x06312AE0>) , Command count = 5126 ] 
11:35:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:35:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:56: Host Frequency set to 25000 KHz
11:35:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:35:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 5127 ] 
11:35:56: [GO18_globalSetVolt]### Host voltage value is set.
11:35:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1E0>, 0x0, False) , Command count = 5128 ] 
11:35:56: [GO18_globalSetVolt]### Host voltage value is set.
11:35:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5129 ] 
11:35:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:35:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5130 ] 
11:35:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:35:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:35:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:35:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:35:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5131 ] 
11:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:35:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 5132 ] 
11:35:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D150>, <py_sfcl.CommandDataDefinition object at 0x0627DB70>) , Command count = 5133 ] 
11:35:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:35:56: [ SetCardRCA(0x1, 0xD555) , Command count = 5134 ] 
11:35:56: [DVTCommonLib]### Identification :Idenfication of card completed 

11:35:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:35:56: Host Frequency set to 25000 KHz
11:35:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:56: ####CSD Registe 2.0 Values####
11:35:56: CSD_STRUCTURE                                 :0x1
11:35:56: Reserv1                                       :0x0
11:35:56: Time Access 1 TAAC                            :0xe
11:35:56: Time Access 2 NSAC*100                        :0x0
11:35:56: Data Transfer Rate TRAN_SPEED                 :0x32
11:35:56: Card Command Classess CCC                     :0x5b5
11:35:56: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:56: DSR(driver stage register)  DSR_IMP           :0x0
11:35:56: Reserv2                                       :0x0
11:35:56: Device Size C_SIZE                            :0xedc8
11:35:56: Reserv3                                       :0x0
11:35:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:56: Reserv4                                       :0x0
11:35:56: Write Speed Factor R2W_FACTOR                 :0x2
11:35:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:56: FILE_FORMAT_GRP                               :0x0
11:35:56: COPY flag                                     :0x1
11:35:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:56: File_Format                                   :0x0
11:35:56: CRC                                           :0x0
11:35:56: ####CSD Registe Values####  

11:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:35:56: [GetSCRRegisterEntry] Passed
11:35:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:35:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:35:56: Data_Status_After Erases          : 0
11:35:56: CPRM Security Support             : No Security
11:35:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:35:56: Spec. Version                     : Version 3.0X
11:35:56: Extended Security Support         : Extended_Security_Not_Supported
11:35:56: Command Support                   : COMMAND_SUPPORT
11:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 5135 ] 
11:35:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062737E0>, <py_sfcl.CommandDataDefinition object at 0x0627D630>) , Command count = 5136 ] 
11:35:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:35:56: [ SetBusWidth(0x4) , Command count = 5137 ] 
11:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:35:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5138 ] 
11:35:56: Protected Area Size 0x28000
11:35:56: Bus Width           2
11:35:56: Secure Mode         0
11:35:56: Speed  Class        4
11:35:56: Perf Move           0
11:35:56: Au Size             9
11:35:56: Erase Size          15
11:35:56: Erase Timeout       1
11:35:56: Erase offset        1
11:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:35:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:35:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5139 ] 
11:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:35:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:35:56: Host Frequency set to 100000 KHz
11:35:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:35:57: ####CSD Registe 2.0 Values####
11:35:57: CSD_STRUCTURE                                 :0x1
11:35:57: Reserv1                                       :0x0
11:35:57: Time Access 1 TAAC                            :0xe
11:35:57: Time Access 2 NSAC*100                        :0x0
11:35:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:35:57: Card Command Classess CCC                     :0x5b5
11:35:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:35:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:35:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:35:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:35:57: DSR(driver stage register)  DSR_IMP           :0x0
11:35:57: Reserv2                                       :0x0
11:35:57: Device Size C_SIZE                            :0xedc8
11:35:57: Reserv3                                       :0x0
11:35:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:35:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:35:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:35:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:35:57: Reserv4                                       :0x0
11:35:57: Write Speed Factor R2W_FACTOR                 :0x2
11:35:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:35:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:35:57: FILE_FORMAT_GRP                               :0x0
11:35:57: COPY flag                                     :0x1
11:35:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:35:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:35:57: File_Format                                   :0x0
11:35:57: CRC                                           :0x0
11:35:57: ####CSD Registe Values####  

11:35:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627DF90>) , Command count = 5140 ] 
11:35:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:35:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD20>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 5141 ] 
11:35:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:35:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x0627A5D0>) , Command count = 5142 ] 
11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:35:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x0627A480>) , Command count = 5143 ] 
11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:35:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A570>, <py_sfcl.PySEnhancedCmdData object at 0x06312D20>, <None>, <py_sfcl.Command23 object at 0x0626DB10>) , Command count = 5144 ] 
11:35:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:35:58: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:00: Host Frequency set to 25000 KHz
11:36:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:00: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 5145 ] 
11:36:00: [GO18_globalSetVolt]### Host voltage value is set.
11:36:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EDED0>, 0x0, False) , Command count = 5146 ] 
11:36:01: [GO18_globalSetVolt]### Host voltage value is set.
11:36:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5147 ] 
11:36:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5148 ] 
11:36:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5149 ] 
11:36:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401E70>, <py_sfcl.CommandDataDefinition object at 0x06312B10>) , Command count = 5150 ] 
11:36:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627AB70>) , Command count = 5151 ] 
11:36:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:01: [ SetCardRCA(0x1, 0xD555) , Command count = 5152 ] 
11:36:01: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:01: Host Frequency set to 25000 KHz
11:36:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:01: ####CSD Registe 2.0 Values####
11:36:01: CSD_STRUCTURE                                 :0x1
11:36:01: Reserv1                                       :0x0
11:36:01: Time Access 1 TAAC                            :0xe
11:36:01: Time Access 2 NSAC*100                        :0x0
11:36:01: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:01: Card Command Classess CCC                     :0x5b5
11:36:01: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:01: DSR(driver stage register)  DSR_IMP           :0x0
11:36:01: Reserv2                                       :0x0
11:36:01: Device Size C_SIZE                            :0xedc8
11:36:01: Reserv3                                       :0x0
11:36:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:01: Reserv4                                       :0x0
11:36:01: Write Speed Factor R2W_FACTOR                 :0x2
11:36:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:01: FILE_FORMAT_GRP                               :0x0
11:36:01: COPY flag                                     :0x1
11:36:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:01: File_Format                                   :0x0
11:36:01: CRC                                           :0x0
11:36:01: ####CSD Registe Values####  

11:36:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:01: [GetSCRRegisterEntry] Passed
11:36:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:01: Data_Status_After Erases          : 0
11:36:01: CPRM Security Support             : No Security
11:36:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:01: Spec. Version                     : Version 3.0X
11:36:01: Extended Security Support         : Extended_Security_Not_Supported
11:36:01: Command Support                   : COMMAND_SUPPORT
11:36:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 5153 ] 
11:36:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273810>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 5154 ] 
11:36:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:01: [ SetBusWidth(0x4) , Command count = 5155 ] 
11:36:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5156 ] 
11:36:01: Protected Area Size 0x28000
11:36:01: Bus Width           2
11:36:01: Secure Mode         0
11:36:01: Speed  Class        4
11:36:01: Perf Move           0
11:36:01: Au Size             9
11:36:01: Erase Size          15
11:36:01: Erase Timeout       1
11:36:01: Erase offset        1
11:36:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5157 ] 
11:36:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:01: Host Frequency set to 100000 KHz
11:36:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:02: ####CSD Registe 2.0 Values####
11:36:02: CSD_STRUCTURE                                 :0x1
11:36:02: Reserv1                                       :0x0
11:36:02: Time Access 1 TAAC                            :0xe
11:36:02: Time Access 2 NSAC*100                        :0x0
11:36:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:02: Card Command Classess CCC                     :0x5b5
11:36:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:02: DSR(driver stage register)  DSR_IMP           :0x0
11:36:02: Reserv2                                       :0x0
11:36:02: Device Size C_SIZE                            :0xedc8
11:36:02: Reserv3                                       :0x0
11:36:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:02: Reserv4                                       :0x0
11:36:02: Write Speed Factor R2W_FACTOR                 :0x2
11:36:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:02: FILE_FORMAT_GRP                               :0x0
11:36:02: COPY flag                                     :0x1
11:36:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:02: File_Format                                   :0x0
11:36:02: CRC                                           :0x0
11:36:02: ####CSD Registe Values####  

11:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 5158 ] 
11:36:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DCF0>, <py_sfcl.CommandDataDefinition object at 0x06269FC0>) , Command count = 5159 ] 
11:36:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276BD0>, <None>, <py_sfcl.Command23 object at 0x06312C60>) , Command count = 5160 ] 
11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DAE0>, <None>, <py_sfcl.Command23 object at 0x0627A9C0>) , Command count = 5161 ] 
11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A780>, <py_sfcl.PySEnhancedCmdData object at 0x06312F90>, <None>, <py_sfcl.Command23 object at 0x06312EA0>) , Command count = 5162 ] 
11:36:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:03: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:05: Host Frequency set to 25000 KHz
11:36:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:05: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 5163 ] 
11:36:05: [GO18_globalSetVolt]### Host voltage value is set.
11:36:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401DE0>, 0x0, False) , Command count = 5164 ] 
11:36:05: [GO18_globalSetVolt]### Host voltage value is set.
11:36:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5165 ] 
11:36:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5166 ] 
11:36:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5167 ] 
11:36:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 5168 ] 
11:36:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D030>, <py_sfcl.CommandDataDefinition object at 0x06312E70>) , Command count = 5169 ] 
11:36:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:06: [ SetCardRCA(0x1, 0xD555) , Command count = 5170 ] 
11:36:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:06: Host Frequency set to 25000 KHz
11:36:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:06: ####CSD Registe 2.0 Values####
11:36:06: CSD_STRUCTURE                                 :0x1
11:36:06: Reserv1                                       :0x0
11:36:06: Time Access 1 TAAC                            :0xe
11:36:06: Time Access 2 NSAC*100                        :0x0
11:36:06: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:06: Card Command Classess CCC                     :0x5b5
11:36:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:06: DSR(driver stage register)  DSR_IMP           :0x0
11:36:06: Reserv2                                       :0x0
11:36:06: Device Size C_SIZE                            :0xedc8
11:36:06: Reserv3                                       :0x0
11:36:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:06: Reserv4                                       :0x0
11:36:06: Write Speed Factor R2W_FACTOR                 :0x2
11:36:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:06: FILE_FORMAT_GRP                               :0x0
11:36:06: COPY flag                                     :0x1
11:36:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:06: File_Format                                   :0x0
11:36:06: CRC                                           :0x0
11:36:06: ####CSD Registe Values####  

11:36:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:06: [GetSCRRegisterEntry] Passed
11:36:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:06: Data_Status_After Erases          : 0
11:36:06: CPRM Security Support             : No Security
11:36:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:06: Spec. Version                     : Version 3.0X
11:36:06: Extended Security Support         : Extended_Security_Not_Supported
11:36:06: Command Support                   : COMMAND_SUPPORT
11:36:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 5171 ] 
11:36:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 5172 ] 
11:36:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:06: [ SetBusWidth(0x4) , Command count = 5173 ] 
11:36:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5174 ] 
11:36:06: Protected Area Size 0x28000
11:36:06: Bus Width           2
11:36:06: Secure Mode         0
11:36:06: Speed  Class        4
11:36:06: Perf Move           0
11:36:06: Au Size             9
11:36:06: Erase Size          15
11:36:06: Erase Timeout       1
11:36:06: Erase offset        1
11:36:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5175 ] 
11:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:06: Host Frequency set to 100000 KHz
11:36:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:06: ####CSD Registe 2.0 Values####
11:36:06: CSD_STRUCTURE                                 :0x1
11:36:06: Reserv1                                       :0x0
11:36:06: Time Access 1 TAAC                            :0xe
11:36:06: Time Access 2 NSAC*100                        :0x0
11:36:06: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:06: Card Command Classess CCC                     :0x5b5
11:36:06: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:06: DSR(driver stage register)  DSR_IMP           :0x0
11:36:06: Reserv2                                       :0x0
11:36:06: Device Size C_SIZE                            :0xedc8
11:36:06: Reserv3                                       :0x0
11:36:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:07: Reserv4                                       :0x0
11:36:07: Write Speed Factor R2W_FACTOR                 :0x2
11:36:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:07: FILE_FORMAT_GRP                               :0x0
11:36:07: COPY flag                                     :0x1
11:36:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:07: File_Format                                   :0x0
11:36:07: CRC                                           :0x0
11:36:07: ####CSD Registe Values####  

11:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738A0>, <py_sfcl.CommandDataDefinition object at 0x05401C60>) , Command count = 5176 ] 
11:36:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E70>, <py_sfcl.CommandDataDefinition object at 0x06312DE0>) , Command count = 5177 ] 
11:36:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x0627D510>, <None>, <py_sfcl.Command23 object at 0x06312C90>) , Command count = 5178 ] 
11:36:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
11:36:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312A50>, <py_sfcl.PySEnhancedCmdData object at 0x0627D300>, <None>, <py_sfcl.Command23 object at 0x06312BA0>) , Command count = 5179 ] 
11:36:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A4E0>, <None>, <py_sfcl.Command23 object at 0x0627D210>) , Command count = 5180 ] 
11:36:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:08: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:10: Host Frequency set to 25000 KHz
11:36:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:10: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 5181 ] 
11:36:10: [GO18_globalSetVolt]### Host voltage value is set.
11:36:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AF90>, 0x0, False) , Command count = 5182 ] 
11:36:10: [GO18_globalSetVolt]### Host voltage value is set.
11:36:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5183 ] 
11:36:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5184 ] 
11:36:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5185 ] 
11:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06280180>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 5186 ] 
11:36:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x06312DE0>) , Command count = 5187 ] 
11:36:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:11: [ SetCardRCA(0x1, 0xD555) , Command count = 5188 ] 
11:36:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:11: Host Frequency set to 25000 KHz
11:36:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:11: ####CSD Registe 2.0 Values####
11:36:11: CSD_STRUCTURE                                 :0x1
11:36:11: Reserv1                                       :0x0
11:36:11: Time Access 1 TAAC                            :0xe
11:36:11: Time Access 2 NSAC*100                        :0x0
11:36:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:11: Card Command Classess CCC                     :0x5b5
11:36:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:11: DSR(driver stage register)  DSR_IMP           :0x0
11:36:11: Reserv2                                       :0x0
11:36:11: Device Size C_SIZE                            :0xedc8
11:36:11: Reserv3                                       :0x0
11:36:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:11: Reserv4                                       :0x0
11:36:11: Write Speed Factor R2W_FACTOR                 :0x2
11:36:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:11: FILE_FORMAT_GRP                               :0x0
11:36:11: COPY flag                                     :0x1
11:36:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:11: File_Format                                   :0x0
11:36:11: CRC                                           :0x0
11:36:11: ####CSD Registe Values####  

11:36:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:11: [GetSCRRegisterEntry] Passed
11:36:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:11: Data_Status_After Erases          : 0
11:36:11: CPRM Security Support             : No Security
11:36:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:11: Spec. Version                     : Version 3.0X
11:36:11: Extended Security Support         : Extended_Security_Not_Supported
11:36:11: Command Support                   : COMMAND_SUPPORT
11:36:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 5189 ] 
11:36:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0627A990>) , Command count = 5190 ] 
11:36:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:11: [ SetBusWidth(0x4) , Command count = 5191 ] 
11:36:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5192 ] 
11:36:11: Protected Area Size 0x28000
11:36:11: Bus Width           2
11:36:11: Secure Mode         0
11:36:11: Speed  Class        4
11:36:11: Perf Move           0
11:36:11: Au Size             9
11:36:11: Erase Size          15
11:36:11: Erase Timeout       1
11:36:11: Erase offset        1
11:36:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5193 ] 
11:36:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:11: Host Frequency set to 100000 KHz
11:36:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:11: ####CSD Registe 2.0 Values####
11:36:11: CSD_STRUCTURE                                 :0x1
11:36:11: Reserv1                                       :0x0
11:36:11: Time Access 1 TAAC                            :0xe
11:36:11: Time Access 2 NSAC*100                        :0x0
11:36:11: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:11: Card Command Classess CCC                     :0x5b5
11:36:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:11: DSR(driver stage register)  DSR_IMP           :0x0
11:36:11: Reserv2                                       :0x0
11:36:11: Device Size C_SIZE                            :0xedc8
11:36:11: Reserv3                                       :0x0
11:36:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:12: Reserv4                                       :0x0
11:36:12: Write Speed Factor R2W_FACTOR                 :0x2
11:36:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:12: FILE_FORMAT_GRP                               :0x0
11:36:12: COPY flag                                     :0x1
11:36:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:12: File_Format                                   :0x0
11:36:12: CRC                                           :0x0
11:36:12: ####CSD Registe Values####  

11:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 5194 ] 
11:36:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401CC0>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 5195 ] 
11:36:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627AC00>) , Command count = 5196 ] 
11:36:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
11:36:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x06216E10>) , Command count = 5197 ] 
11:36:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216570>, <py_sfcl.PySEnhancedCmdData object at 0x0627ADE0>, <None>, <py_sfcl.Command23 object at 0x06268C60>) , Command count = 5198 ] 
11:36:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:13: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:15: Host Frequency set to 25000 KHz
11:36:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:15: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 5199 ] 
11:36:15: [GO18_globalSetVolt]### Host voltage value is set.
11:36:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216A20>, 0x0, False) , Command count = 5200 ] 
11:36:15: [GO18_globalSetVolt]### Host voltage value is set.
11:36:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5201 ] 
11:36:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5202 ] 
11:36:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5203 ] 
11:36:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 5204 ] 
11:36:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x06268B70>) , Command count = 5205 ] 
11:36:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:15: [ SetCardRCA(0x1, 0xD555) , Command count = 5206 ] 
11:36:15: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:15: Host Frequency set to 25000 KHz
11:36:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:15: ####CSD Registe 2.0 Values####
11:36:15: CSD_STRUCTURE                                 :0x1
11:36:15: Reserv1                                       :0x0
11:36:15: Time Access 1 TAAC                            :0xe
11:36:15: Time Access 2 NSAC*100                        :0x0
11:36:15: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:15: Card Command Classess CCC                     :0x5b5
11:36:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:15: DSR(driver stage register)  DSR_IMP           :0x0
11:36:15: Reserv2                                       :0x0
11:36:15: Device Size C_SIZE                            :0xedc8
11:36:15: Reserv3                                       :0x0
11:36:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:15: Reserv4                                       :0x0
11:36:15: Write Speed Factor R2W_FACTOR                 :0x2
11:36:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:15: FILE_FORMAT_GRP                               :0x0
11:36:15: COPY flag                                     :0x1
11:36:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:15: File_Format                                   :0x0
11:36:15: CRC                                           :0x0
11:36:15: ####CSD Registe Values####  

11:36:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:16: [GetSCRRegisterEntry] Passed
11:36:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:16: Data_Status_After Erases          : 0
11:36:16: CPRM Security Support             : No Security
11:36:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:16: Spec. Version                     : Version 3.0X
11:36:16: Extended Security Support         : Extended_Security_Not_Supported
11:36:16: Command Support                   : COMMAND_SUPPORT
11:36:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268CC0>, <py_sfcl.CommandDataDefinition object at 0x062739F0>) , Command count = 5207 ] 
11:36:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D540>, <py_sfcl.CommandDataDefinition object at 0x0627D2D0>) , Command count = 5208 ] 
11:36:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:16: [ SetBusWidth(0x4) , Command count = 5209 ] 
11:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627AB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5210 ] 
11:36:16: Protected Area Size 0x28000
11:36:16: Bus Width           2
11:36:16: Secure Mode         0
11:36:16: Speed  Class        4
11:36:16: Perf Move           0
11:36:16: Au Size             9
11:36:16: Erase Size          15
11:36:16: Erase Timeout       1
11:36:16: Erase offset        1
11:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5211 ] 
11:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:16: Host Frequency set to 100000 KHz
11:36:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:16: ####CSD Registe 2.0 Values####
11:36:16: CSD_STRUCTURE                                 :0x1
11:36:16: Reserv1                                       :0x0
11:36:16: Time Access 1 TAAC                            :0xe
11:36:16: Time Access 2 NSAC*100                        :0x0
11:36:16: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:16: Card Command Classess CCC                     :0x5b5
11:36:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:16: DSR(driver stage register)  DSR_IMP           :0x0
11:36:16: Reserv2                                       :0x0
11:36:16: Device Size C_SIZE                            :0xedc8
11:36:16: Reserv3                                       :0x0
11:36:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:17: Reserv4                                       :0x0
11:36:17: Write Speed Factor R2W_FACTOR                 :0x2
11:36:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:17: FILE_FORMAT_GRP                               :0x0
11:36:17: COPY flag                                     :0x1
11:36:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:17: File_Format                                   :0x0
11:36:17: CRC                                           :0x0
11:36:17: ####CSD Registe Values####  

11:36:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 5212 ] 
11:36:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062734B0>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 5213 ] 
11:36:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x062680C0>, <None>, <py_sfcl.Command23 object at 0x0627A630>) , Command count = 5214 ] 
11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x062688A0>, <None>, <py_sfcl.Command23 object at 0x06268840>) , Command count = 5215 ] 
11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x06216510>, <None>, <py_sfcl.Command23 object at 0x0627AED0>) , Command count = 5216 ] 
11:36:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:20: Host Frequency set to 25000 KHz
11:36:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:20: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 5217 ] 
11:36:20: [GO18_globalSetVolt]### Host voltage value is set.
11:36:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x062802D0>, 0x0, False) , Command count = 5218 ] 
11:36:20: [GO18_globalSetVolt]### Host voltage value is set.
11:36:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5219 ] 
11:36:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5220 ] 
11:36:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5221 ] 
11:36:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x0627A330>) , Command count = 5222 ] 
11:36:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF00>, <py_sfcl.CommandDataDefinition object at 0x06268B10>) , Command count = 5223 ] 
11:36:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:20: [ SetCardRCA(0x1, 0xD555) , Command count = 5224 ] 
11:36:20: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:20: Host Frequency set to 25000 KHz
11:36:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:20: ####CSD Registe 2.0 Values####
11:36:20: CSD_STRUCTURE                                 :0x1
11:36:20: Reserv1                                       :0x0
11:36:20: Time Access 1 TAAC                            :0xe
11:36:20: Time Access 2 NSAC*100                        :0x0
11:36:20: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:20: Card Command Classess CCC                     :0x5b5
11:36:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:20: DSR(driver stage register)  DSR_IMP           :0x0
11:36:20: Reserv2                                       :0x0
11:36:20: Device Size C_SIZE                            :0xedc8
11:36:20: Reserv3                                       :0x0
11:36:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:20: Reserv4                                       :0x0
11:36:20: Write Speed Factor R2W_FACTOR                 :0x2
11:36:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:20: FILE_FORMAT_GRP                               :0x0
11:36:20: COPY flag                                     :0x1
11:36:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:20: File_Format                                   :0x0
11:36:20: CRC                                           :0x0
11:36:20: ####CSD Registe Values####  

11:36:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:20: [GetSCRRegisterEntry] Passed
11:36:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:20: Data_Status_After Erases          : 0
11:36:20: CPRM Security Support             : No Security
11:36:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:20: Spec. Version                     : Version 3.0X
11:36:20: Extended Security Support         : Extended_Security_Not_Supported
11:36:20: Command Support                   : COMMAND_SUPPORT
11:36:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 5225 ] 
11:36:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062168D0>, <py_sfcl.CommandDataDefinition object at 0x06273E10>) , Command count = 5226 ] 
11:36:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:20: [ SetBusWidth(0x4) , Command count = 5227 ] 
11:36:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5228 ] 
11:36:20: Protected Area Size 0x28000
11:36:20: Bus Width           2
11:36:21: Secure Mode         0
11:36:21: Speed  Class        4
11:36:21: Perf Move           0
11:36:21: Au Size             9
11:36:21: Erase Size          15
11:36:21: Erase Timeout       1
11:36:21: Erase offset        1
11:36:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5229 ] 
11:36:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:21: Host Frequency set to 100000 KHz
11:36:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:21: ####CSD Registe 2.0 Values####
11:36:21: CSD_STRUCTURE                                 :0x1
11:36:21: Reserv1                                       :0x0
11:36:21: Time Access 1 TAAC                            :0xe
11:36:21: Time Access 2 NSAC*100                        :0x0
11:36:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:21: Card Command Classess CCC                     :0x5b5
11:36:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:21: DSR(driver stage register)  DSR_IMP           :0x0
11:36:21: Reserv2                                       :0x0
11:36:21: Device Size C_SIZE                            :0xedc8
11:36:21: Reserv3                                       :0x0
11:36:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:21: Reserv4                                       :0x0
11:36:21: Write Speed Factor R2W_FACTOR                 :0x2
11:36:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:21: FILE_FORMAT_GRP                               :0x0
11:36:21: COPY flag                                     :0x1
11:36:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:21: File_Format                                   :0x0
11:36:21: CRC                                           :0x0
11:36:21: ####CSD Registe Values####  

11:36:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 5230 ] 
11:36:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE70>, <py_sfcl.CommandDataDefinition object at 0x0627D240>) , Command count = 5231 ] 
11:36:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06280150>, <py_sfcl.PySEnhancedCmdData object at 0x0627D6F0>, <None>, <py_sfcl.Command23 object at 0x06216570>) , Command count = 5232 ] 
11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D780>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC30>, <py_sfcl.PySEnhancedCmdData object at 0x06268510>, <None>, <py_sfcl.Command23 object at 0x0627AB10>) , Command count = 5233 ] 
11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273ED0>, <py_sfcl.PySEnhancedCmdData object at 0x062733C0>, <None>, <py_sfcl.Command23 object at 0x0626D510>) , Command count = 5234 ] 
11:36:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:25: Host Frequency set to 25000 KHz
11:36:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 5235 ] 
11:36:25: [GO18_globalSetVolt]### Host voltage value is set.
11:36:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216E70>, 0x0, False) , Command count = 5236 ] 
11:36:25: [GO18_globalSetVolt]### Host voltage value is set.
11:36:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5237 ] 
11:36:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5238 ] 
11:36:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5239 ] 
11:36:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 5240 ] 
11:36:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x0627AF30>) , Command count = 5241 ] 
11:36:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:25: [ SetCardRCA(0x1, 0xD555) , Command count = 5242 ] 
11:36:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:25: Host Frequency set to 25000 KHz
11:36:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:25: ####CSD Registe 2.0 Values####
11:36:25: CSD_STRUCTURE                                 :0x1
11:36:25: Reserv1                                       :0x0
11:36:25: Time Access 1 TAAC                            :0xe
11:36:25: Time Access 2 NSAC*100                        :0x0
11:36:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:25: Card Command Classess CCC                     :0x5b5
11:36:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:25: DSR(driver stage register)  DSR_IMP           :0x0
11:36:25: Reserv2                                       :0x0
11:36:25: Device Size C_SIZE                            :0xedc8
11:36:25: Reserv3                                       :0x0
11:36:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:25: Reserv4                                       :0x0
11:36:25: Write Speed Factor R2W_FACTOR                 :0x2
11:36:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:25: FILE_FORMAT_GRP                               :0x0
11:36:25: COPY flag                                     :0x1
11:36:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:25: File_Format                                   :0x0
11:36:25: CRC                                           :0x0
11:36:25: ####CSD Registe Values####  

11:36:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:25: [GetSCRRegisterEntry] Passed
11:36:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:25: Data_Status_After Erases          : 0
11:36:25: CPRM Security Support             : No Security
11:36:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:25: Spec. Version                     : Version 3.0X
11:36:25: Extended Security Support         : Extended_Security_Not_Supported
11:36:25: Command Support                   : COMMAND_SUPPORT
11:36:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AEA0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 5243 ] 
11:36:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py_sfcl.CommandDataDefinition object at 0x06269150>) , Command count = 5244 ] 
11:36:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:25: [ SetBusWidth(0x4) , Command count = 5245 ] 
11:36:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5246 ] 
11:36:25: Protected Area Size 0x28000
11:36:25: Bus Width           2
11:36:25: Secure Mode         0
11:36:25: Speed  Class        4
11:36:25: Perf Move           0
11:36:25: Au Size             9
11:36:25: Erase Size          15
11:36:25: Erase Timeout       1
11:36:25: Erase offset        1
11:36:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5247 ] 
11:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:25: Host Frequency set to 100000 KHz
11:36:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:26: ####CSD Registe 2.0 Values####
11:36:26: CSD_STRUCTURE                                 :0x1
11:36:26: Reserv1                                       :0x0
11:36:26: Time Access 1 TAAC                            :0xe
11:36:26: Time Access 2 NSAC*100                        :0x0
11:36:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:26: Card Command Classess CCC                     :0x5b5
11:36:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:26: DSR(driver stage register)  DSR_IMP           :0x0
11:36:26: Reserv2                                       :0x0
11:36:26: Device Size C_SIZE                            :0xedc8
11:36:26: Reserv3                                       :0x0
11:36:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:26: Reserv4                                       :0x0
11:36:26: Write Speed Factor R2W_FACTOR                 :0x2
11:36:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:26: FILE_FORMAT_GRP                               :0x0
11:36:26: COPY flag                                     :0x1
11:36:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:26: File_Format                                   :0x0
11:36:26: CRC                                           :0x0
11:36:26: ####CSD Registe Values####  

11:36:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 5248 ] 
11:36:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF060>, <py_sfcl.CommandDataDefinition object at 0x06312C30>) , Command count = 5249 ] 
11:36:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D390>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273150>, <py_sfcl.PySEnhancedCmdData object at 0x06276660>, <None>, <py_sfcl.Command23 object at 0x06273E10>) , Command count = 5250 ] 
11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD80>, <None>, <py_sfcl.Command23 object at 0x06268F30>) , Command count = 5251 ] 
11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269300>, <py_sfcl.PySEnhancedCmdData object at 0x06269060>, <None>, <py_sfcl.Command23 object at 0x0626D840>) , Command count = 5252 ] 
11:36:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:30: Host Frequency set to 25000 KHz
11:36:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:30: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 5253 ] 
11:36:30: [GO18_globalSetVolt]### Host voltage value is set.
11:36:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D750>, 0x0, False) , Command count = 5254 ] 
11:36:30: [GO18_globalSetVolt]### Host voltage value is set.
11:36:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5255 ] 
11:36:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5256 ] 
11:36:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5257 ] 
11:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 5258 ] 
11:36:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x0626D4E0>) , Command count = 5259 ] 
11:36:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:30: [ SetCardRCA(0x1, 0xD555) , Command count = 5260 ] 
11:36:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:30: Host Frequency set to 25000 KHz
11:36:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:30: ####CSD Registe 2.0 Values####
11:36:30: CSD_STRUCTURE                                 :0x1
11:36:30: Reserv1                                       :0x0
11:36:30: Time Access 1 TAAC                            :0xe
11:36:30: Time Access 2 NSAC*100                        :0x0
11:36:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:30: Card Command Classess CCC                     :0x5b5
11:36:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:30: DSR(driver stage register)  DSR_IMP           :0x0
11:36:30: Reserv2                                       :0x0
11:36:30: Device Size C_SIZE                            :0xedc8
11:36:30: Reserv3                                       :0x0
11:36:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:30: Reserv4                                       :0x0
11:36:30: Write Speed Factor R2W_FACTOR                 :0x2
11:36:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:30: FILE_FORMAT_GRP                               :0x0
11:36:30: COPY flag                                     :0x1
11:36:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:30: File_Format                                   :0x0
11:36:30: CRC                                           :0x0
11:36:30: ####CSD Registe Values####  

11:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:30: [GetSCRRegisterEntry] Passed
11:36:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:30: Data_Status_After Erases          : 0
11:36:30: CPRM Security Support             : No Security
11:36:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:30: Spec. Version                     : Version 3.0X
11:36:30: Extended Security Support         : Extended_Security_Not_Supported
11:36:30: Command Support                   : COMMAND_SUPPORT
11:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 5261 ] 
11:36:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x062697E0>) , Command count = 5262 ] 
11:36:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:30: [ SetBusWidth(0x4) , Command count = 5263 ] 
11:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5264 ] 
11:36:30: Protected Area Size 0x28000
11:36:30: Bus Width           2
11:36:30: Secure Mode         0
11:36:30: Speed  Class        4
11:36:30: Perf Move           0
11:36:30: Au Size             9
11:36:30: Erase Size          15
11:36:30: Erase Timeout       1
11:36:30: Erase offset        1
11:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5265 ] 
11:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:30: Host Frequency set to 100000 KHz
11:36:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:31: ####CSD Registe 2.0 Values####
11:36:31: CSD_STRUCTURE                                 :0x1
11:36:31: Reserv1                                       :0x0
11:36:31: Time Access 1 TAAC                            :0xe
11:36:31: Time Access 2 NSAC*100                        :0x0
11:36:31: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:31: Card Command Classess CCC                     :0x5b5
11:36:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:31: DSR(driver stage register)  DSR_IMP           :0x0
11:36:31: Reserv2                                       :0x0
11:36:31: Device Size C_SIZE                            :0xedc8
11:36:31: Reserv3                                       :0x0
11:36:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:31: Reserv4                                       :0x0
11:36:31: Write Speed Factor R2W_FACTOR                 :0x2
11:36:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:31: FILE_FORMAT_GRP                               :0x0
11:36:31: COPY flag                                     :0x1
11:36:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:31: File_Format                                   :0x0
11:36:31: CRC                                           :0x0
11:36:31: ####CSD Registe Values####  

11:36:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 5266 ] 
11:36:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216A80>, <py_sfcl.CommandDataDefinition object at 0x06268030>) , Command count = 5267 ] 
11:36:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D480>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269600>, <py_sfcl.PySEnhancedCmdData object at 0x062691E0>, <None>, <py_sfcl.Command23 object at 0x062692A0>) , Command count = 5268 ] 
11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 5269 ] 
11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062697E0>, <py_sfcl.PySEnhancedCmdData object at 0x062691B0>, <None>, <py_sfcl.Command23 object at 0x06269D80>) , Command count = 5270 ] 
11:36:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:34: Host Frequency set to 25000 KHz
11:36:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 5271 ] 
11:36:35: [GO18_globalSetVolt]### Host voltage value is set.
11:36:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DE70>, 0x0, False) , Command count = 5272 ] 
11:36:35: [GO18_globalSetVolt]### Host voltage value is set.
11:36:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5273 ] 
11:36:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5274 ] 
11:36:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5275 ] 
11:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 5276 ] 
11:36:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269840>, <py_sfcl.CommandDataDefinition object at 0x06268030>) , Command count = 5277 ] 
11:36:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:35: [ SetCardRCA(0x1, 0xD555) , Command count = 5278 ] 
11:36:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:35: Host Frequency set to 25000 KHz
11:36:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:35: ####CSD Registe 2.0 Values####
11:36:35: CSD_STRUCTURE                                 :0x1
11:36:35: Reserv1                                       :0x0
11:36:35: Time Access 1 TAAC                            :0xe
11:36:35: Time Access 2 NSAC*100                        :0x0
11:36:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:35: Card Command Classess CCC                     :0x5b5
11:36:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:35: DSR(driver stage register)  DSR_IMP           :0x0
11:36:35: Reserv2                                       :0x0
11:36:35: Device Size C_SIZE                            :0xedc8
11:36:35: Reserv3                                       :0x0
11:36:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:35: Reserv4                                       :0x0
11:36:35: Write Speed Factor R2W_FACTOR                 :0x2
11:36:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:35: FILE_FORMAT_GRP                               :0x0
11:36:35: COPY flag                                     :0x1
11:36:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:35: File_Format                                   :0x0
11:36:35: CRC                                           :0x0
11:36:35: ####CSD Registe Values####  

11:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:35: [GetSCRRegisterEntry] Passed
11:36:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:35: Data_Status_After Erases          : 0
11:36:35: CPRM Security Support             : No Security
11:36:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:35: Spec. Version                     : Version 3.0X
11:36:35: Extended Security Support         : Extended_Security_Not_Supported
11:36:35: Command Support                   : COMMAND_SUPPORT
11:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 5279 ] 
11:36:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268900>, <py_sfcl.CommandDataDefinition object at 0x06273300>) , Command count = 5280 ] 
11:36:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:35: [ SetBusWidth(0x4) , Command count = 5281 ] 
11:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5282 ] 
11:36:35: Protected Area Size 0x28000
11:36:35: Bus Width           2
11:36:35: Secure Mode         0
11:36:35: Speed  Class        4
11:36:35: Perf Move           0
11:36:35: Au Size             9
11:36:35: Erase Size          15
11:36:35: Erase Timeout       1
11:36:35: Erase offset        1
11:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5283 ] 
11:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:35: Host Frequency set to 100000 KHz
11:36:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:35: ####CSD Registe 2.0 Values####
11:36:35: CSD_STRUCTURE                                 :0x1
11:36:35: Reserv1                                       :0x0
11:36:35: Time Access 1 TAAC                            :0xe
11:36:35: Time Access 2 NSAC*100                        :0x0
11:36:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:35: Card Command Classess CCC                     :0x5b5
11:36:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:35: DSR(driver stage register)  DSR_IMP           :0x0
11:36:35: Reserv2                                       :0x0
11:36:35: Device Size C_SIZE                            :0xedc8
11:36:35: Reserv3                                       :0x0
11:36:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:36: Reserv4                                       :0x0
11:36:36: Write Speed Factor R2W_FACTOR                 :0x2
11:36:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:36: FILE_FORMAT_GRP                               :0x0
11:36:36: COPY flag                                     :0x1
11:36:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:36: File_Format                                   :0x0
11:36:36: CRC                                           :0x0
11:36:36: ####CSD Registe Values####  

11:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x0626DB40>) , Command count = 5284 ] 
11:36:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268FC0>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 5285 ] 
11:36:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269E70>, <py_sfcl.PySEnhancedCmdData object at 0x06269960>, <None>, <py_sfcl.Command23 object at 0x0626D4B0>) , Command count = 5286 ] 
11:36:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
11:36:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D570>, <None>, <py_sfcl.Command23 object at 0x062698D0>) , Command count = 5287 ] 
11:36:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273690>, <py_sfcl.PySEnhancedCmdData object at 0x06273DB0>, <None>, <py_sfcl.Command23 object at 0x0626DB40>) , Command count = 5288 ] 
11:36:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:37: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:39: Host Frequency set to 25000 KHz
11:36:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:39: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x062696F0>, 0x0, True) , Command count = 5289 ] 
11:36:39: [GO18_globalSetVolt]### Host voltage value is set.
11:36:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DAE0>, 0x0, False) , Command count = 5290 ] 
11:36:39: [GO18_globalSetVolt]### Host voltage value is set.
11:36:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5291 ] 
11:36:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5292 ] 
11:36:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5293 ] 
11:36:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py_sfcl.CommandDataDefinition object at 0x06269B10>) , Command count = 5294 ] 
11:36:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x0626D540>) , Command count = 5295 ] 
11:36:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:40: [ SetCardRCA(0x1, 0xD555) , Command count = 5296 ] 
11:36:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:40: Host Frequency set to 25000 KHz
11:36:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:40: ####CSD Registe 2.0 Values####
11:36:40: CSD_STRUCTURE                                 :0x1
11:36:40: Reserv1                                       :0x0
11:36:40: Time Access 1 TAAC                            :0xe
11:36:40: Time Access 2 NSAC*100                        :0x0
11:36:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:40: Card Command Classess CCC                     :0x5b5
11:36:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:40: DSR(driver stage register)  DSR_IMP           :0x0
11:36:40: Reserv2                                       :0x0
11:36:40: Device Size C_SIZE                            :0xedc8
11:36:40: Reserv3                                       :0x0
11:36:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:40: Reserv4                                       :0x0
11:36:40: Write Speed Factor R2W_FACTOR                 :0x2
11:36:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:40: FILE_FORMAT_GRP                               :0x0
11:36:40: COPY flag                                     :0x1
11:36:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:40: File_Format                                   :0x0
11:36:40: CRC                                           :0x0
11:36:40: ####CSD Registe Values####  

11:36:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:40: [GetSCRRegisterEntry] Passed
11:36:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:40: Data_Status_After Erases          : 0
11:36:40: CPRM Security Support             : No Security
11:36:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:40: Spec. Version                     : Version 3.0X
11:36:40: Extended Security Support         : Extended_Security_Not_Supported
11:36:40: Command Support                   : COMMAND_SUPPORT
11:36:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 5297 ] 
11:36:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D50>, <py_sfcl.CommandDataDefinition object at 0x0626DE70>) , Command count = 5298 ] 
11:36:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:40: [ SetBusWidth(0x4) , Command count = 5299 ] 
11:36:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5300 ] 
11:36:40: Protected Area Size 0x28000
11:36:40: Bus Width           2
11:36:40: Secure Mode         0
11:36:40: Speed  Class        4
11:36:40: Perf Move           0
11:36:40: Au Size             9
11:36:40: Erase Size          15
11:36:40: Erase Timeout       1
11:36:40: Erase offset        1
11:36:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5301 ] 
11:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:40: Host Frequency set to 100000 KHz
11:36:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:40: ####CSD Registe 2.0 Values####
11:36:40: CSD_STRUCTURE                                 :0x1
11:36:40: Reserv1                                       :0x0
11:36:40: Time Access 1 TAAC                            :0xe
11:36:40: Time Access 2 NSAC*100                        :0x0
11:36:40: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:40: Card Command Classess CCC                     :0x5b5
11:36:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:40: DSR(driver stage register)  DSR_IMP           :0x0
11:36:40: Reserv2                                       :0x0
11:36:40: Device Size C_SIZE                            :0xedc8
11:36:40: Reserv3                                       :0x0
11:36:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:41: Reserv4                                       :0x0
11:36:41: Write Speed Factor R2W_FACTOR                 :0x2
11:36:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:41: FILE_FORMAT_GRP                               :0x0
11:36:41: COPY flag                                     :0x1
11:36:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:41: File_Format                                   :0x0
11:36:41: CRC                                           :0x0
11:36:41: ####CSD Registe Values####  

11:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 5302 ] 
11:36:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276630>, <py_sfcl.CommandDataDefinition object at 0x062739C0>) , Command count = 5303 ] 
11:36:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273570>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x06273300>) , Command count = 5304 ] 
11:36:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
11:36:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0626D690>, <None>, <py_sfcl.Command23 object at 0x0626D990>) , Command count = 5305 ] 
11:36:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D060>, <py_sfcl.PySEnhancedCmdData object at 0x063249C0>, <None>, <py_sfcl.Command23 object at 0x0627DAB0>) , Command count = 5306 ] 
11:36:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:44: Host Frequency set to 25000 KHz
11:36:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 5307 ] 
11:36:44: [GO18_globalSetVolt]### Host voltage value is set.
11:36:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269DE0>, 0x0, False) , Command count = 5308 ] 
11:36:44: [GO18_globalSetVolt]### Host voltage value is set.
11:36:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5309 ] 
11:36:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5310 ] 
11:36:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5311 ] 
11:36:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 5312 ] 
11:36:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x0626DC60>) , Command count = 5313 ] 
11:36:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:44: [ SetCardRCA(0x1, 0xD555) , Command count = 5314 ] 
11:36:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:45: Host Frequency set to 25000 KHz
11:36:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:45: ####CSD Registe 2.0 Values####
11:36:45: CSD_STRUCTURE                                 :0x1
11:36:45: Reserv1                                       :0x0
11:36:45: Time Access 1 TAAC                            :0xe
11:36:45: Time Access 2 NSAC*100                        :0x0
11:36:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:45: Card Command Classess CCC                     :0x5b5
11:36:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:45: DSR(driver stage register)  DSR_IMP           :0x0
11:36:45: Reserv2                                       :0x0
11:36:45: Device Size C_SIZE                            :0xedc8
11:36:45: Reserv3                                       :0x0
11:36:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:45: Reserv4                                       :0x0
11:36:45: Write Speed Factor R2W_FACTOR                 :0x2
11:36:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:45: FILE_FORMAT_GRP                               :0x0
11:36:45: COPY flag                                     :0x1
11:36:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:45: File_Format                                   :0x0
11:36:45: CRC                                           :0x0
11:36:45: ####CSD Registe Values####  

11:36:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:45: [GetSCRRegisterEntry] Passed
11:36:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:45: Data_Status_After Erases          : 0
11:36:45: CPRM Security Support             : No Security
11:36:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:45: Spec. Version                     : Version 3.0X
11:36:45: Extended Security Support         : Extended_Security_Not_Supported
11:36:45: Command Support                   : COMMAND_SUPPORT
11:36:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 5315 ] 
11:36:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DD50>, <py_sfcl.CommandDataDefinition object at 0x0626D090>) , Command count = 5316 ] 
11:36:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:45: [ SetBusWidth(0x4) , Command count = 5317 ] 
11:36:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5318 ] 
11:36:45: Protected Area Size 0x28000
11:36:45: Bus Width           2
11:36:45: Secure Mode         0
11:36:45: Speed  Class        4
11:36:45: Perf Move           0
11:36:45: Au Size             9
11:36:45: Erase Size          15
11:36:45: Erase Timeout       1
11:36:45: Erase offset        1
11:36:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5319 ] 
11:36:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:45: Host Frequency set to 100000 KHz
11:36:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:45: ####CSD Registe 2.0 Values####
11:36:45: CSD_STRUCTURE                                 :0x1
11:36:45: Reserv1                                       :0x0
11:36:45: Time Access 1 TAAC                            :0xe
11:36:45: Time Access 2 NSAC*100                        :0x0
11:36:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:45: Card Command Classess CCC                     :0x5b5
11:36:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:45: DSR(driver stage register)  DSR_IMP           :0x0
11:36:45: Reserv2                                       :0x0
11:36:45: Device Size C_SIZE                            :0xedc8
11:36:45: Reserv3                                       :0x0
11:36:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:46: Reserv4                                       :0x0
11:36:46: Write Speed Factor R2W_FACTOR                 :0x2
11:36:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:46: FILE_FORMAT_GRP                               :0x0
11:36:46: COPY flag                                     :0x1
11:36:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:46: File_Format                                   :0x0
11:36:46: CRC                                           :0x0
11:36:46: ####CSD Registe Values####  

11:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0626D390>) , Command count = 5320 ] 
11:36:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268180>, <py_sfcl.CommandDataDefinition object at 0x05401F90>) , Command count = 5321 ] 
11:36:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD50>, <None>, <py_sfcl.Command23 object at 0x0627A210>) , Command count = 5322 ] 
11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762A0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD20>, <None>, <py_sfcl.Command23 object at 0x0626DDB0>) , Command count = 5323 ] 
11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324A80>, <py_sfcl.PySEnhancedCmdData object at 0x06324480>, <None>, <py_sfcl.Command23 object at 0x0626D1B0>) , Command count = 5324 ] 
11:36:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:49: Host Frequency set to 25000 KHz
11:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 5325 ] 
11:36:49: [GO18_globalSetVolt]### Host voltage value is set.
11:36:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DFC0>, 0x0, False) , Command count = 5326 ] 
11:36:49: [GO18_globalSetVolt]### Host voltage value is set.
11:36:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5327 ] 
11:36:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5328 ] 
11:36:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5329 ] 
11:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 5330 ] 
11:36:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x0627A6F0>) , Command count = 5331 ] 
11:36:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:49: [ SetCardRCA(0x1, 0xD555) , Command count = 5332 ] 
11:36:49: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:49: Host Frequency set to 25000 KHz
11:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:49: ####CSD Registe 2.0 Values####
11:36:49: CSD_STRUCTURE                                 :0x1
11:36:49: Reserv1                                       :0x0
11:36:49: Time Access 1 TAAC                            :0xe
11:36:49: Time Access 2 NSAC*100                        :0x0
11:36:49: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:49: Card Command Classess CCC                     :0x5b5
11:36:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:49: DSR(driver stage register)  DSR_IMP           :0x0
11:36:49: Reserv2                                       :0x0
11:36:49: Device Size C_SIZE                            :0xedc8
11:36:49: Reserv3                                       :0x0
11:36:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:49: Reserv4                                       :0x0
11:36:49: Write Speed Factor R2W_FACTOR                 :0x2
11:36:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:49: FILE_FORMAT_GRP                               :0x0
11:36:49: COPY flag                                     :0x1
11:36:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:49: File_Format                                   :0x0
11:36:49: CRC                                           :0x0
11:36:49: ####CSD Registe Values####  

11:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:49: [GetSCRRegisterEntry] Passed
11:36:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:49: Data_Status_After Erases          : 0
11:36:49: CPRM Security Support             : No Security
11:36:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:49: Spec. Version                     : Version 3.0X
11:36:49: Extended Security Support         : Extended_Security_Not_Supported
11:36:49: Command Support                   : COMMAND_SUPPORT
11:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 5333 ] 
11:36:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062698A0>, <py_sfcl.CommandDataDefinition object at 0x0626DF00>) , Command count = 5334 ] 
11:36:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:49: [ SetBusWidth(0x4) , Command count = 5335 ] 
11:36:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063249F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5336 ] 
11:36:50: Protected Area Size 0x28000
11:36:50: Bus Width           2
11:36:50: Secure Mode         0
11:36:50: Speed  Class        4
11:36:50: Perf Move           0
11:36:50: Au Size             9
11:36:50: Erase Size          15
11:36:50: Erase Timeout       1
11:36:50: Erase offset        1
11:36:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5337 ] 
11:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:50: Host Frequency set to 100000 KHz
11:36:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:50: ####CSD Registe 2.0 Values####
11:36:50: CSD_STRUCTURE                                 :0x1
11:36:50: Reserv1                                       :0x0
11:36:50: Time Access 1 TAAC                            :0xe
11:36:50: Time Access 2 NSAC*100                        :0x0
11:36:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:50: Card Command Classess CCC                     :0x5b5
11:36:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:50: DSR(driver stage register)  DSR_IMP           :0x0
11:36:50: Reserv2                                       :0x0
11:36:50: Device Size C_SIZE                            :0xedc8
11:36:50: Reserv3                                       :0x0
11:36:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:50: Reserv4                                       :0x0
11:36:50: Write Speed Factor R2W_FACTOR                 :0x2
11:36:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:50: FILE_FORMAT_GRP                               :0x0
11:36:50: COPY flag                                     :0x1
11:36:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:50: File_Format                                   :0x0
11:36:50: CRC                                           :0x0
11:36:50: ####CSD Registe Values####  

11:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 5338 ] 
11:36:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D300>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 5339 ] 
11:36:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x06276510>) , Command count = 5340 ] 
11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276DB0>, <py_sfcl.PySEnhancedCmdData object at 0x062730C0>, <None>, <py_sfcl.Command23 object at 0x062763C0>) , Command count = 5341 ] 
11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273750>, <py_sfcl.PySEnhancedCmdData object at 0x06324030>, <None>, <py_sfcl.Command23 object at 0x06273840>) , Command count = 5342 ] 
11:36:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:54: Host Frequency set to 25000 KHz
11:36:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 5343 ] 
11:36:54: [GO18_globalSetVolt]### Host voltage value is set.
11:36:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273C90>, 0x0, False) , Command count = 5344 ] 
11:36:54: [GO18_globalSetVolt]### Host voltage value is set.
11:36:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5345 ] 
11:36:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5346 ] 
11:36:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5347 ] 
11:36:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x06276F60>) , Command count = 5348 ] 
11:36:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F00>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 5349 ] 
11:36:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:54: [ SetCardRCA(0x1, 0xD555) , Command count = 5350 ] 
11:36:54: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:54: Host Frequency set to 25000 KHz
11:36:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:54: ####CSD Registe 2.0 Values####
11:36:54: CSD_STRUCTURE                                 :0x1
11:36:54: Reserv1                                       :0x0
11:36:54: Time Access 1 TAAC                            :0xe
11:36:54: Time Access 2 NSAC*100                        :0x0
11:36:54: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:54: Card Command Classess CCC                     :0x5b5
11:36:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:54: DSR(driver stage register)  DSR_IMP           :0x0
11:36:54: Reserv2                                       :0x0
11:36:54: Device Size C_SIZE                            :0xedc8
11:36:54: Reserv3                                       :0x0
11:36:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:54: Reserv4                                       :0x0
11:36:54: Write Speed Factor R2W_FACTOR                 :0x2
11:36:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:54: FILE_FORMAT_GRP                               :0x0
11:36:54: COPY flag                                     :0x1
11:36:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:54: File_Format                                   :0x0
11:36:54: CRC                                           :0x0
11:36:54: ####CSD Registe Values####  

11:36:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:54: [GetSCRRegisterEntry] Passed
11:36:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:54: Data_Status_After Erases          : 0
11:36:54: CPRM Security Support             : No Security
11:36:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:54: Spec. Version                     : Version 3.0X
11:36:54: Extended Security Support         : Extended_Security_Not_Supported
11:36:54: Command Support                   : COMMAND_SUPPORT
11:36:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 5351 ] 
11:36:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273180>, <py_sfcl.CommandDataDefinition object at 0x06276F30>) , Command count = 5352 ] 
11:36:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:54: [ SetBusWidth(0x4) , Command count = 5353 ] 
11:36:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5354 ] 
11:36:54: Protected Area Size 0x28000
11:36:54: Bus Width           2
11:36:54: Secure Mode         0
11:36:54: Speed  Class        4
11:36:54: Perf Move           0
11:36:54: Au Size             9
11:36:54: Erase Size          15
11:36:54: Erase Timeout       1
11:36:54: Erase offset        1
11:36:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5355 ] 
11:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:55: Host Frequency set to 100000 KHz
11:36:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:55: ####CSD Registe 2.0 Values####
11:36:55: CSD_STRUCTURE                                 :0x1
11:36:55: Reserv1                                       :0x0
11:36:55: Time Access 1 TAAC                            :0xe
11:36:55: Time Access 2 NSAC*100                        :0x0
11:36:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:36:55: Card Command Classess CCC                     :0x5b5
11:36:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:55: DSR(driver stage register)  DSR_IMP           :0x0
11:36:55: Reserv2                                       :0x0
11:36:55: Device Size C_SIZE                            :0xedc8
11:36:55: Reserv3                                       :0x0
11:36:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:55: Reserv4                                       :0x0
11:36:55: Write Speed Factor R2W_FACTOR                 :0x2
11:36:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:55: FILE_FORMAT_GRP                               :0x0
11:36:55: COPY flag                                     :0x1
11:36:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:55: File_Format                                   :0x0
11:36:55: CRC                                           :0x0
11:36:55: ####CSD Registe Values####  

11:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 5356 ] 
11:36:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:36:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A360>, <py_sfcl.CommandDataDefinition object at 0x06276210>) , Command count = 5357 ] 
11:36:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:36:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x062765A0>, <None>, <py_sfcl.Command23 object at 0x06276C00>) , Command count = 5358 ] 
11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:36:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x06276810>) , Command count = 5359 ] 
11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:36:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:36:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324A50>, <py_sfcl.PySEnhancedCmdData object at 0x06324030>, <None>, <py_sfcl.Command23 object at 0x062768D0>) , Command count = 5360 ] 
11:36:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:36:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:36:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:59: Host Frequency set to 25000 KHz
11:36:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:36:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:36:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 5361 ] 
11:36:59: [GO18_globalSetVolt]### Host voltage value is set.
11:36:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:36:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273990>, 0x0, False) , Command count = 5362 ] 
11:36:59: [GO18_globalSetVolt]### Host voltage value is set.
11:36:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5363 ] 
11:36:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:36:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5364 ] 
11:36:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:36:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:36:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:36:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:36:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:36:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5365 ] 
11:36:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:36:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B10>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 5366 ] 
11:36:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x06276ED0>) , Command count = 5367 ] 
11:36:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:36:59: [ SetCardRCA(0x1, 0xD555) , Command count = 5368 ] 
11:36:59: [DVTCommonLib]### Identification :Idenfication of card completed 

11:36:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:36:59: Host Frequency set to 25000 KHz
11:36:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:36:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:36:59: ####CSD Registe 2.0 Values####
11:36:59: CSD_STRUCTURE                                 :0x1
11:36:59: Reserv1                                       :0x0
11:36:59: Time Access 1 TAAC                            :0xe
11:36:59: Time Access 2 NSAC*100                        :0x0
11:36:59: Data Transfer Rate TRAN_SPEED                 :0x32
11:36:59: Card Command Classess CCC                     :0x5b5
11:36:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:36:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:36:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:36:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:36:59: DSR(driver stage register)  DSR_IMP           :0x0
11:36:59: Reserv2                                       :0x0
11:36:59: Device Size C_SIZE                            :0xedc8
11:36:59: Reserv3                                       :0x0
11:36:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:36:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:36:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:36:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:36:59: Reserv4                                       :0x0
11:36:59: Write Speed Factor R2W_FACTOR                 :0x2
11:36:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:36:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:36:59: FILE_FORMAT_GRP                               :0x0
11:36:59: COPY flag                                     :0x1
11:36:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:36:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:36:59: File_Format                                   :0x0
11:36:59: CRC                                           :0x0
11:36:59: ####CSD Registe Values####  

11:36:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:36:59: [GetSCRRegisterEntry] Passed
11:36:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:36:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:36:59: Data_Status_After Erases          : 0
11:36:59: CPRM Security Support             : No Security
11:36:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:36:59: Spec. Version                     : Version 3.0X
11:36:59: Extended Security Support         : Extended_Security_Not_Supported
11:36:59: Command Support                   : COMMAND_SUPPORT
11:36:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 5369 ] 
11:36:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273210>, <py_sfcl.CommandDataDefinition object at 0x06276450>) , Command count = 5370 ] 
11:36:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:36:59: [ SetBusWidth(0x4) , Command count = 5371 ] 
11:36:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:36:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5372 ] 
11:36:59: Protected Area Size 0x28000
11:36:59: Bus Width           2
11:36:59: Secure Mode         0
11:36:59: Speed  Class        4
11:36:59: Perf Move           0
11:36:59: Au Size             9
11:36:59: Erase Size          15
11:36:59: Erase Timeout       1
11:36:59: Erase offset        1
11:36:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:36:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:36:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5373 ] 
11:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:36:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:36:59: Host Frequency set to 100000 KHz
11:36:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:36:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:00: ####CSD Registe 2.0 Values####
11:37:00: CSD_STRUCTURE                                 :0x1
11:37:00: Reserv1                                       :0x0
11:37:00: Time Access 1 TAAC                            :0xe
11:37:00: Time Access 2 NSAC*100                        :0x0
11:37:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:00: Card Command Classess CCC                     :0x5b5
11:37:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:00: DSR(driver stage register)  DSR_IMP           :0x0
11:37:00: Reserv2                                       :0x0
11:37:00: Device Size C_SIZE                            :0xedc8
11:37:00: Reserv3                                       :0x0
11:37:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:00: Reserv4                                       :0x0
11:37:00: Write Speed Factor R2W_FACTOR                 :0x2
11:37:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:00: FILE_FORMAT_GRP                               :0x0
11:37:00: COPY flag                                     :0x1
11:37:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:00: File_Format                                   :0x0
11:37:00: CRC                                           :0x0
11:37:00: ####CSD Registe Values####  

11:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 5374 ] 
11:37:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269EA0>, <py_sfcl.CommandDataDefinition object at 0x06276EA0>) , Command count = 5375 ] 
11:37:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x0627A270>) , Command count = 5376 ] 
11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D780>, <None>, <py_sfcl.Command23 object at 0x0627A090>) , Command count = 5377 ] 
11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DC90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324720>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x06312B70>) , Command count = 5378 ] 
11:37:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:01: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:04: Host Frequency set to 25000 KHz
11:37:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 5379 ] 
11:37:04: [GO18_globalSetVolt]### Host voltage value is set.
11:37:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D5A0>, 0x0, False) , Command count = 5380 ] 
11:37:04: [GO18_globalSetVolt]### Host voltage value is set.
11:37:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5381 ] 
11:37:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5382 ] 
11:37:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5383 ] 
11:37:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 5384 ] 
11:37:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x062166C0>) , Command count = 5385 ] 
11:37:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:04: [ SetCardRCA(0x1, 0xD555) , Command count = 5386 ] 
11:37:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:04: Host Frequency set to 25000 KHz
11:37:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:04: ####CSD Registe 2.0 Values####
11:37:04: CSD_STRUCTURE                                 :0x1
11:37:04: Reserv1                                       :0x0
11:37:04: Time Access 1 TAAC                            :0xe
11:37:04: Time Access 2 NSAC*100                        :0x0
11:37:04: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:04: Card Command Classess CCC                     :0x5b5
11:37:04: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:04: DSR(driver stage register)  DSR_IMP           :0x0
11:37:04: Reserv2                                       :0x0
11:37:04: Device Size C_SIZE                            :0xedc8
11:37:04: Reserv3                                       :0x0
11:37:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:04: Reserv4                                       :0x0
11:37:04: Write Speed Factor R2W_FACTOR                 :0x2
11:37:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:04: FILE_FORMAT_GRP                               :0x0
11:37:04: COPY flag                                     :0x1
11:37:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:04: File_Format                                   :0x0
11:37:04: CRC                                           :0x0
11:37:04: ####CSD Registe Values####  

11:37:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:04: [GetSCRRegisterEntry] Passed
11:37:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:04: Data_Status_After Erases          : 0
11:37:04: CPRM Security Support             : No Security
11:37:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:04: Spec. Version                     : Version 3.0X
11:37:04: Extended Security Support         : Extended_Security_Not_Supported
11:37:04: Command Support                   : COMMAND_SUPPORT
11:37:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 5387 ] 
11:37:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB40>, <py_sfcl.CommandDataDefinition object at 0x0627D150>) , Command count = 5388 ] 
11:37:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:04: [ SetBusWidth(0x4) , Command count = 5389 ] 
11:37:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5390 ] 
11:37:04: Protected Area Size 0x28000
11:37:04: Bus Width           2
11:37:04: Secure Mode         0
11:37:04: Speed  Class        4
11:37:04: Perf Move           0
11:37:04: Au Size             9
11:37:04: Erase Size          15
11:37:04: Erase Timeout       1
11:37:04: Erase offset        1
11:37:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5391 ] 
11:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:04: Host Frequency set to 100000 KHz
11:37:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:05: ####CSD Registe 2.0 Values####
11:37:05: CSD_STRUCTURE                                 :0x1
11:37:05: Reserv1                                       :0x0
11:37:05: Time Access 1 TAAC                            :0xe
11:37:05: Time Access 2 NSAC*100                        :0x0
11:37:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:05: Card Command Classess CCC                     :0x5b5
11:37:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:05: DSR(driver stage register)  DSR_IMP           :0x0
11:37:05: Reserv2                                       :0x0
11:37:05: Device Size C_SIZE                            :0xedc8
11:37:05: Reserv3                                       :0x0
11:37:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:05: Reserv4                                       :0x0
11:37:05: Write Speed Factor R2W_FACTOR                 :0x2
11:37:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:05: FILE_FORMAT_GRP                               :0x0
11:37:05: COPY flag                                     :0x1
11:37:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:05: File_Format                                   :0x0
11:37:05: CRC                                           :0x0
11:37:05: ####CSD Registe Values####  

11:37:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 5392 ] 
11:37:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276D80>, <py_sfcl.CommandDataDefinition object at 0x0627D630>) , Command count = 5393 ] 
11:37:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x06276540>) , Command count = 5394 ] 
11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1022
11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x0627A5D0>) , Command count = 5395 ] 
11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062763F0>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x0627A480>) , Command count = 5396 ] 
11:37:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:06: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:08: Host Frequency set to 25000 KHz
11:37:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:08: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 5397 ] 
11:37:08: [GO18_globalSetVolt]### Host voltage value is set.
11:37:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DC30>, 0x0, False) , Command count = 5398 ] 
11:37:08: [GO18_globalSetVolt]### Host voltage value is set.
11:37:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5399 ] 
11:37:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5400 ] 
11:37:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5401 ] 
11:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC60>, <py_sfcl.CommandDataDefinition object at 0x05401E70>) , Command count = 5402 ] 
11:37:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06312B10>) , Command count = 5403 ] 
11:37:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:09: [ SetCardRCA(0x1, 0xD555) , Command count = 5404 ] 
11:37:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:09: Host Frequency set to 25000 KHz
11:37:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:09: ####CSD Registe 2.0 Values####
11:37:09: CSD_STRUCTURE                                 :0x1
11:37:09: Reserv1                                       :0x0
11:37:09: Time Access 1 TAAC                            :0xe
11:37:09: Time Access 2 NSAC*100                        :0x0
11:37:09: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:09: Card Command Classess CCC                     :0x5b5
11:37:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:09: DSR(driver stage register)  DSR_IMP           :0x0
11:37:09: Reserv2                                       :0x0
11:37:09: Device Size C_SIZE                            :0xedc8
11:37:09: Reserv3                                       :0x0
11:37:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:09: Reserv4                                       :0x0
11:37:09: Write Speed Factor R2W_FACTOR                 :0x2
11:37:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:09: FILE_FORMAT_GRP                               :0x0
11:37:09: COPY flag                                     :0x1
11:37:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:09: File_Format                                   :0x0
11:37:09: CRC                                           :0x0
11:37:09: ####CSD Registe Values####  

11:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:09: [GetSCRRegisterEntry] Passed
11:37:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:09: Data_Status_After Erases          : 0
11:37:09: CPRM Security Support             : No Security
11:37:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:09: Spec. Version                     : Version 3.0X
11:37:09: Extended Security Support         : Extended_Security_Not_Supported
11:37:09: Command Support                   : COMMAND_SUPPORT
11:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 5405 ] 
11:37:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312D80>, <py_sfcl.CommandDataDefinition object at 0x0627A180>) , Command count = 5406 ] 
11:37:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:09: [ SetBusWidth(0x4) , Command count = 5407 ] 
11:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063245D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5408 ] 
11:37:09: Protected Area Size 0x28000
11:37:09: Bus Width           2
11:37:09: Secure Mode         0
11:37:09: Speed  Class        4
11:37:09: Perf Move           0
11:37:09: Au Size             9
11:37:09: Erase Size          15
11:37:09: Erase Timeout       1
11:37:09: Erase offset        1
11:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5409 ] 
11:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:09: Host Frequency set to 100000 KHz
11:37:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:09: ####CSD Registe 2.0 Values####
11:37:09: CSD_STRUCTURE                                 :0x1
11:37:09: Reserv1                                       :0x0
11:37:09: Time Access 1 TAAC                            :0xe
11:37:09: Time Access 2 NSAC*100                        :0x0
11:37:09: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:09: Card Command Classess CCC                     :0x5b5
11:37:09: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:09: DSR(driver stage register)  DSR_IMP           :0x0
11:37:09: Reserv2                                       :0x0
11:37:09: Device Size C_SIZE                            :0xedc8
11:37:09: Reserv3                                       :0x0
11:37:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:10: Reserv4                                       :0x0
11:37:10: Write Speed Factor R2W_FACTOR                 :0x2
11:37:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:10: FILE_FORMAT_GRP                               :0x0
11:37:10: COPY flag                                     :0x1
11:37:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:10: File_Format                                   :0x0
11:37:10: CRC                                           :0x0
11:37:10: ####CSD Registe Values####  

11:37:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 5410 ] 
11:37:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D090>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 5411 ] 
11:37:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276BD0>, <None>, <py_sfcl.Command23 object at 0x06312DB0>) , Command count = 5412 ] 
11:37:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
11:37:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DAE0>, <None>, <py_sfcl.Command23 object at 0x06312C60>) , Command count = 5413 ] 
11:37:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EDED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D930>, <py_sfcl.PySEnhancedCmdData object at 0x0627A2A0>, <None>, <py_sfcl.Command23 object at 0x06312F60>) , Command count = 5414 ] 
11:37:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:11: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:13: Host Frequency set to 25000 KHz
11:37:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:13: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 5415 ] 
11:37:13: [GO18_globalSetVolt]### Host voltage value is set.
11:37:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276150>, 0x0, False) , Command count = 5416 ] 
11:37:13: [GO18_globalSetVolt]### Host voltage value is set.
11:37:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5417 ] 
11:37:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5418 ] 
11:37:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5419 ] 
11:37:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 5420 ] 
11:37:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x06269FC0>) , Command count = 5421 ] 
11:37:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:13: [ SetCardRCA(0x1, 0xD555) , Command count = 5422 ] 
11:37:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:14: Host Frequency set to 25000 KHz
11:37:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:14: ####CSD Registe 2.0 Values####
11:37:14: CSD_STRUCTURE                                 :0x1
11:37:14: Reserv1                                       :0x0
11:37:14: Time Access 1 TAAC                            :0xe
11:37:14: Time Access 2 NSAC*100                        :0x0
11:37:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:14: Card Command Classess CCC                     :0x5b5
11:37:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:14: DSR(driver stage register)  DSR_IMP           :0x0
11:37:14: Reserv2                                       :0x0
11:37:14: Device Size C_SIZE                            :0xedc8
11:37:14: Reserv3                                       :0x0
11:37:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:14: Reserv4                                       :0x0
11:37:14: Write Speed Factor R2W_FACTOR                 :0x2
11:37:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:14: FILE_FORMAT_GRP                               :0x0
11:37:14: COPY flag                                     :0x1
11:37:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:14: File_Format                                   :0x0
11:37:14: CRC                                           :0x0
11:37:14: ####CSD Registe Values####  

11:37:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:14: [GetSCRRegisterEntry] Passed
11:37:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:14: Data_Status_After Erases          : 0
11:37:14: CPRM Security Support             : No Security
11:37:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:14: Spec. Version                     : Version 3.0X
11:37:14: Extended Security Support         : Extended_Security_Not_Supported
11:37:14: Command Support                   : COMMAND_SUPPORT
11:37:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 5423 ] 
11:37:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DED0>, <py_sfcl.CommandDataDefinition object at 0x06312E70>) , Command count = 5424 ] 
11:37:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:14: [ SetBusWidth(0x4) , Command count = 5425 ] 
11:37:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5426 ] 
11:37:14: Protected Area Size 0x28000
11:37:14: Bus Width           2
11:37:14: Secure Mode         0
11:37:14: Speed  Class        4
11:37:14: Perf Move           0
11:37:14: Au Size             9
11:37:14: Erase Size          15
11:37:14: Erase Timeout       1
11:37:14: Erase offset        1
11:37:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5427 ] 
11:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:14: Host Frequency set to 100000 KHz
11:37:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:14: ####CSD Registe 2.0 Values####
11:37:14: CSD_STRUCTURE                                 :0x1
11:37:14: Reserv1                                       :0x0
11:37:14: Time Access 1 TAAC                            :0xe
11:37:14: Time Access 2 NSAC*100                        :0x0
11:37:14: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:14: Card Command Classess CCC                     :0x5b5
11:37:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:14: DSR(driver stage register)  DSR_IMP           :0x0
11:37:14: Reserv2                                       :0x0
11:37:14: Device Size C_SIZE                            :0xedc8
11:37:14: Reserv3                                       :0x0
11:37:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:15: Reserv4                                       :0x0
11:37:15: Write Speed Factor R2W_FACTOR                 :0x2
11:37:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:15: FILE_FORMAT_GRP                               :0x0
11:37:15: COPY flag                                     :0x1
11:37:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:15: File_Format                                   :0x0
11:37:15: CRC                                           :0x0
11:37:15: ####CSD Registe Values####  

11:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738A0>, <py_sfcl.CommandDataDefinition object at 0x05401C60>) , Command count = 5428 ] 
11:37:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276120>, <py_sfcl.CommandDataDefinition object at 0x06312F90>) , Command count = 5429 ] 
11:37:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x06312C90>, <None>, <py_sfcl.Command23 object at 0x0627A5A0>) , Command count = 5430 ] 
11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312A50>, <py_sfcl.PySEnhancedCmdData object at 0x06312BA0>, <None>, <py_sfcl.Command23 object at 0x06312E10>) , Command count = 5431 ] 
11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D510>, <None>, <py_sfcl.Command23 object at 0x0627A780>) , Command count = 5432 ] 
11:37:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:16: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:18: Host Frequency set to 25000 KHz
11:37:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:18: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 5433 ] 
11:37:18: [GO18_globalSetVolt]### Host voltage value is set.
11:37:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D1B0>, 0x0, False) , Command count = 5434 ] 
11:37:18: [GO18_globalSetVolt]### Host voltage value is set.
11:37:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5435 ] 
11:37:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5436 ] 
11:37:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5437 ] 
11:37:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06280180>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 5438 ] 
11:37:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690F0>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 5439 ] 
11:37:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:18: [ SetCardRCA(0x1, 0xD555) , Command count = 5440 ] 
11:37:18: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:18: Host Frequency set to 25000 KHz
11:37:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:18: ####CSD Registe 2.0 Values####
11:37:18: CSD_STRUCTURE                                 :0x1
11:37:18: Reserv1                                       :0x0
11:37:18: Time Access 1 TAAC                            :0xe
11:37:18: Time Access 2 NSAC*100                        :0x0
11:37:18: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:18: Card Command Classess CCC                     :0x5b5
11:37:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:18: DSR(driver stage register)  DSR_IMP           :0x0
11:37:18: Reserv2                                       :0x0
11:37:18: Device Size C_SIZE                            :0xedc8
11:37:18: Reserv3                                       :0x0
11:37:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:18: Reserv4                                       :0x0
11:37:18: Write Speed Factor R2W_FACTOR                 :0x2
11:37:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:18: FILE_FORMAT_GRP                               :0x0
11:37:18: COPY flag                                     :0x1
11:37:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:18: File_Format                                   :0x0
11:37:18: CRC                                           :0x0
11:37:18: ####CSD Registe Values####  

11:37:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:18: [GetSCRRegisterEntry] Passed
11:37:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:18: Data_Status_After Erases          : 0
11:37:18: CPRM Security Support             : No Security
11:37:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:18: Spec. Version                     : Version 3.0X
11:37:18: Extended Security Support         : Extended_Security_Not_Supported
11:37:18: Command Support                   : COMMAND_SUPPORT
11:37:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 5441 ] 
11:37:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6F0>, <py_sfcl.CommandDataDefinition object at 0x06312DE0>) , Command count = 5442 ] 
11:37:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:18: [ SetBusWidth(0x4) , Command count = 5443 ] 
11:37:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5444 ] 
11:37:18: Protected Area Size 0x28000
11:37:18: Bus Width           2
11:37:18: Secure Mode         0
11:37:18: Speed  Class        4
11:37:18: Perf Move           0
11:37:18: Au Size             9
11:37:18: Erase Size          15
11:37:18: Erase Timeout       1
11:37:18: Erase offset        1
11:37:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5445 ] 
11:37:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:19: Host Frequency set to 100000 KHz
11:37:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:19: ####CSD Registe 2.0 Values####
11:37:19: CSD_STRUCTURE                                 :0x1
11:37:19: Reserv1                                       :0x0
11:37:19: Time Access 1 TAAC                            :0xe
11:37:19: Time Access 2 NSAC*100                        :0x0
11:37:19: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:19: Card Command Classess CCC                     :0x5b5
11:37:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:19: DSR(driver stage register)  DSR_IMP           :0x0
11:37:19: Reserv2                                       :0x0
11:37:19: Device Size C_SIZE                            :0xedc8
11:37:19: Reserv3                                       :0x0
11:37:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:19: Reserv4                                       :0x0
11:37:19: Write Speed Factor R2W_FACTOR                 :0x2
11:37:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:19: FILE_FORMAT_GRP                               :0x0
11:37:19: COPY flag                                     :0x1
11:37:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:19: File_Format                                   :0x0
11:37:19: CRC                                           :0x0
11:37:19: ####CSD Registe Values####  

11:37:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 5446 ] 
11:37:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D210>, <py_sfcl.CommandDataDefinition object at 0x0627A540>) , Command count = 5447 ] 
11:37:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627DED0>) , Command count = 5448 ] 
11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x0627AC00>) , Command count = 5449 ] 
11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AF90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0627A4E0>, <None>, <py_sfcl.Command23 object at 0x06216E10>) , Command count = 5450 ] 
11:37:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:21: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:23: Host Frequency set to 25000 KHz
11:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:23: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 5451 ] 
11:37:23: [GO18_globalSetVolt]### Host voltage value is set.
11:37:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401A50>, 0x0, False) , Command count = 5452 ] 
11:37:23: [GO18_globalSetVolt]### Host voltage value is set.
11:37:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5453 ] 
11:37:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5454 ] 
11:37:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5455 ] 
11:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 5456 ] 
11:37:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x0627D450>) , Command count = 5457 ] 
11:37:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:23: [ SetCardRCA(0x1, 0xD555) , Command count = 5458 ] 
11:37:23: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:23: Host Frequency set to 25000 KHz
11:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:23: ####CSD Registe 2.0 Values####
11:37:23: CSD_STRUCTURE                                 :0x1
11:37:23: Reserv1                                       :0x0
11:37:23: Time Access 1 TAAC                            :0xe
11:37:23: Time Access 2 NSAC*100                        :0x0
11:37:23: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:23: Card Command Classess CCC                     :0x5b5
11:37:23: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:23: DSR(driver stage register)  DSR_IMP           :0x0
11:37:23: Reserv2                                       :0x0
11:37:23: Device Size C_SIZE                            :0xedc8
11:37:23: Reserv3                                       :0x0
11:37:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:23: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:23: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:23: Reserv4                                       :0x0
11:37:23: Write Speed Factor R2W_FACTOR                 :0x2
11:37:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:23: FILE_FORMAT_GRP                               :0x0
11:37:23: COPY flag                                     :0x1
11:37:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:23: File_Format                                   :0x0
11:37:23: CRC                                           :0x0
11:37:23: ####CSD Registe Values####  

11:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:23: [GetSCRRegisterEntry] Passed
11:37:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:23: Data_Status_After Erases          : 0
11:37:23: CPRM Security Support             : No Security
11:37:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:23: Spec. Version                     : Version 3.0X
11:37:23: Extended Security Support         : Extended_Security_Not_Supported
11:37:23: Command Support                   : COMMAND_SUPPORT
11:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 5459 ] 
11:37:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4B0>, <py_sfcl.CommandDataDefinition object at 0x0627D2A0>) , Command count = 5460 ] 
11:37:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:23: [ SetBusWidth(0x4) , Command count = 5461 ] 
11:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5462 ] 
11:37:23: Protected Area Size 0x28000
11:37:23: Bus Width           2
11:37:23: Secure Mode         0
11:37:23: Speed  Class        4
11:37:23: Perf Move           0
11:37:23: Au Size             9
11:37:23: Erase Size          15
11:37:23: Erase Timeout       1
11:37:23: Erase offset        1
11:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5463 ] 
11:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:24: Host Frequency set to 100000 KHz
11:37:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:24: ####CSD Registe 2.0 Values####
11:37:24: CSD_STRUCTURE                                 :0x1
11:37:24: Reserv1                                       :0x0
11:37:24: Time Access 1 TAAC                            :0xe
11:37:24: Time Access 2 NSAC*100                        :0x0
11:37:24: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:24: Card Command Classess CCC                     :0x5b5
11:37:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:24: DSR(driver stage register)  DSR_IMP           :0x0
11:37:24: Reserv2                                       :0x0
11:37:24: Device Size C_SIZE                            :0xedc8
11:37:24: Reserv3                                       :0x0
11:37:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:24: Reserv4                                       :0x0
11:37:24: Write Speed Factor R2W_FACTOR                 :0x2
11:37:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:24: FILE_FORMAT_GRP                               :0x0
11:37:24: COPY flag                                     :0x1
11:37:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:24: File_Format                                   :0x0
11:37:24: CRC                                           :0x0
11:37:24: ####CSD Registe Values####  

11:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 5464 ] 
11:37:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B40>, <py_sfcl.CommandDataDefinition object at 0x0627ADE0>) , Command count = 5465 ] 
11:37:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 5466 ] 
11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x062688A0>, <None>, <py_sfcl.Command23 object at 0x062680C0>) , Command count = 5467 ] 
11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216A20>, <py_sfcl.PySEnhancedCmdData object at 0x0627D7E0>, <None>, <py_sfcl.Command23 object at 0x06268840>) , Command count = 5468 ] 
11:37:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:28: Host Frequency set to 25000 KHz
11:37:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 5469 ] 
11:37:28: [GO18_globalSetVolt]### Host voltage value is set.
11:37:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269CC0>, 0x0, False) , Command count = 5470 ] 
11:37:28: [GO18_globalSetVolt]### Host voltage value is set.
11:37:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5471 ] 
11:37:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5472 ] 
11:37:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5473 ] 
11:37:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x0627A330>) , Command count = 5474 ] 
11:37:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D840>, <py_sfcl.CommandDataDefinition object at 0x06273120>) , Command count = 5475 ] 
11:37:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:28: [ SetCardRCA(0x1, 0xD555) , Command count = 5476 ] 
11:37:28: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:28: Host Frequency set to 25000 KHz
11:37:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:28: ####CSD Registe 2.0 Values####
11:37:28: CSD_STRUCTURE                                 :0x1
11:37:28: Reserv1                                       :0x0
11:37:28: Time Access 1 TAAC                            :0xe
11:37:28: Time Access 2 NSAC*100                        :0x0
11:37:28: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:28: Card Command Classess CCC                     :0x5b5
11:37:28: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:28: DSR(driver stage register)  DSR_IMP           :0x0
11:37:28: Reserv2                                       :0x0
11:37:28: Device Size C_SIZE                            :0xedc8
11:37:28: Reserv3                                       :0x0
11:37:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:28: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:28: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:28: Reserv4                                       :0x0
11:37:28: Write Speed Factor R2W_FACTOR                 :0x2
11:37:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:28: FILE_FORMAT_GRP                               :0x0
11:37:28: COPY flag                                     :0x1
11:37:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:28: File_Format                                   :0x0
11:37:28: CRC                                           :0x0
11:37:28: ####CSD Registe Values####  

11:37:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:28: [GetSCRRegisterEntry] Passed
11:37:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:28: Data_Status_After Erases          : 0
11:37:28: CPRM Security Support             : No Security
11:37:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:28: Spec. Version                     : Version 3.0X
11:37:28: Extended Security Support         : Extended_Security_Not_Supported
11:37:28: Command Support                   : COMMAND_SUPPORT
11:37:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 5477 ] 
11:37:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A300>, <py_sfcl.CommandDataDefinition object at 0x0627DF00>) , Command count = 5478 ] 
11:37:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:28: [ SetBusWidth(0x4) , Command count = 5479 ] 
11:37:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062688D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5480 ] 
11:37:28: Protected Area Size 0x28000
11:37:28: Bus Width           2
11:37:28: Secure Mode         0
11:37:28: Speed  Class        4
11:37:28: Perf Move           0
11:37:28: Au Size             9
11:37:28: Erase Size          15
11:37:28: Erase Timeout       1
11:37:28: Erase offset        1
11:37:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5481 ] 
11:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:28: Host Frequency set to 100000 KHz
11:37:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:29: ####CSD Registe 2.0 Values####
11:37:29: CSD_STRUCTURE                                 :0x1
11:37:29: Reserv1                                       :0x0
11:37:29: Time Access 1 TAAC                            :0xe
11:37:29: Time Access 2 NSAC*100                        :0x0
11:37:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:29: Card Command Classess CCC                     :0x5b5
11:37:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:29: DSR(driver stage register)  DSR_IMP           :0x0
11:37:29: Reserv2                                       :0x0
11:37:29: Device Size C_SIZE                            :0xedc8
11:37:29: Reserv3                                       :0x0
11:37:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:29: Reserv4                                       :0x0
11:37:29: Write Speed Factor R2W_FACTOR                 :0x2
11:37:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:29: FILE_FORMAT_GRP                               :0x0
11:37:29: COPY flag                                     :0x1
11:37:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:29: File_Format                                   :0x0
11:37:29: CRC                                           :0x0
11:37:29: ####CSD Registe Values####  

11:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 5482 ] 
11:37:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216510>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 5483 ] 
11:37:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06280150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06216570>, <None>, <py_sfcl.Command23 object at 0x062683F0>) , Command count = 5484 ] 
11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x062731B0>, <None>, <py_sfcl.Command23 object at 0x0626D6C0>) , Command count = 5485 ] 
11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062802D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062694B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D6F0>, <None>, <py_sfcl.Command23 object at 0x0627D780>) , Command count = 5486 ] 
11:37:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:30: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:32: Host Frequency set to 25000 KHz
11:37:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:32: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 5487 ] 
11:37:32: [GO18_globalSetVolt]### Host voltage value is set.
11:37:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269750>, 0x0, False) , Command count = 5488 ] 
11:37:32: [GO18_globalSetVolt]### Host voltage value is set.
11:37:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5489 ] 
11:37:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5490 ] 
11:37:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5491 ] 
11:37:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 5492 ] 
11:37:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 5493 ] 
11:37:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:33: [ SetCardRCA(0x1, 0xD555) , Command count = 5494 ] 
11:37:33: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:33: Host Frequency set to 25000 KHz
11:37:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:33: ####CSD Registe 2.0 Values####
11:37:33: CSD_STRUCTURE                                 :0x1
11:37:33: Reserv1                                       :0x0
11:37:33: Time Access 1 TAAC                            :0xe
11:37:33: Time Access 2 NSAC*100                        :0x0
11:37:33: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:33: Card Command Classess CCC                     :0x5b5
11:37:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:33: DSR(driver stage register)  DSR_IMP           :0x0
11:37:33: Reserv2                                       :0x0
11:37:33: Device Size C_SIZE                            :0xedc8
11:37:33: Reserv3                                       :0x0
11:37:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:33: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:33: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:33: Reserv4                                       :0x0
11:37:33: Write Speed Factor R2W_FACTOR                 :0x2
11:37:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:33: FILE_FORMAT_GRP                               :0x0
11:37:33: COPY flag                                     :0x1
11:37:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:33: File_Format                                   :0x0
11:37:33: CRC                                           :0x0
11:37:33: ####CSD Registe Values####  

11:37:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:33: [GetSCRRegisterEntry] Passed
11:37:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:33: Data_Status_After Erases          : 0
11:37:33: CPRM Security Support             : No Security
11:37:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:33: Spec. Version                     : Version 3.0X
11:37:33: Extended Security Support         : Extended_Security_Not_Supported
11:37:33: Command Support                   : COMMAND_SUPPORT
11:37:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x0627AEA0>) , Command count = 5495 ] 
11:37:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A9F0>, <py_sfcl.CommandDataDefinition object at 0x06268210>) , Command count = 5496 ] 
11:37:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:33: [ SetBusWidth(0x4) , Command count = 5497 ] 
11:37:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5498 ] 
11:37:33: Protected Area Size 0x28000
11:37:33: Bus Width           2
11:37:33: Secure Mode         0
11:37:33: Speed  Class        4
11:37:33: Perf Move           0
11:37:33: Au Size             9
11:37:33: Erase Size          15
11:37:33: Erase Timeout       1
11:37:33: Erase offset        1
11:37:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5499 ] 
11:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:33: Host Frequency set to 100000 KHz
11:37:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:33: ####CSD Registe 2.0 Values####
11:37:33: CSD_STRUCTURE                                 :0x1
11:37:33: Reserv1                                       :0x0
11:37:33: Time Access 1 TAAC                            :0xe
11:37:33: Time Access 2 NSAC*100                        :0x0
11:37:33: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:33: Card Command Classess CCC                     :0x5b5
11:37:33: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:33: DSR(driver stage register)  DSR_IMP           :0x0
11:37:33: Reserv2                                       :0x0
11:37:33: Device Size C_SIZE                            :0xedc8
11:37:33: Reserv3                                       :0x0
11:37:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:34: Reserv4                                       :0x0
11:37:34: Write Speed Factor R2W_FACTOR                 :0x2
11:37:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:34: FILE_FORMAT_GRP                               :0x0
11:37:34: COPY flag                                     :0x1
11:37:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:34: File_Format                                   :0x0
11:37:34: CRC                                           :0x0
11:37:34: ####CSD Registe Values####  

11:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 5500 ] 
11:37:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276480>, <py_sfcl.CommandDataDefinition object at 0x06273ED0>) , Command count = 5501 ] 
11:37:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D390>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276660>, <py_sfcl.PySEnhancedCmdData object at 0x06273150>, <None>, <py_sfcl.Command23 object at 0x0627D3F0>) , Command count = 5502 ] 
11:37:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
11:37:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0626DD80>, <None>, <py_sfcl.Command23 object at 0x06273E10>) , Command count = 5503 ] 
11:37:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269390>, <py_sfcl.PySEnhancedCmdData object at 0x06268E70>, <None>, <py_sfcl.Command23 object at 0x062695A0>) , Command count = 5504 ] 
11:37:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:35: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:37: Host Frequency set to 25000 KHz
11:37:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:37: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 5505 ] 
11:37:37: [GO18_globalSetVolt]### Host voltage value is set.
11:37:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627AFC0>, 0x0, False) , Command count = 5506 ] 
11:37:37: [GO18_globalSetVolt]### Host voltage value is set.
11:37:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5507 ] 
11:37:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5508 ] 
11:37:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5509 ] 
11:37:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 5510 ] 
11:37:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C00>, <py_sfcl.CommandDataDefinition object at 0x06312C30>) , Command count = 5511 ] 
11:37:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:38: [ SetCardRCA(0x1, 0xD555) , Command count = 5512 ] 
11:37:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:38: Host Frequency set to 25000 KHz
11:37:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:38: ####CSD Registe 2.0 Values####
11:37:38: CSD_STRUCTURE                                 :0x1
11:37:38: Reserv1                                       :0x0
11:37:38: Time Access 1 TAAC                            :0xe
11:37:38: Time Access 2 NSAC*100                        :0x0
11:37:38: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:38: Card Command Classess CCC                     :0x5b5
11:37:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:38: DSR(driver stage register)  DSR_IMP           :0x0
11:37:38: Reserv2                                       :0x0
11:37:38: Device Size C_SIZE                            :0xedc8
11:37:38: Reserv3                                       :0x0
11:37:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:38: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:38: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:38: Reserv4                                       :0x0
11:37:38: Write Speed Factor R2W_FACTOR                 :0x2
11:37:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:38: FILE_FORMAT_GRP                               :0x0
11:37:38: COPY flag                                     :0x1
11:37:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:38: File_Format                                   :0x0
11:37:38: CRC                                           :0x0
11:37:38: ####CSD Registe Values####  

11:37:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:38: [GetSCRRegisterEntry] Passed
11:37:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:38: Data_Status_After Erases          : 0
11:37:38: CPRM Security Support             : No Security
11:37:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:38: Spec. Version                     : Version 3.0X
11:37:38: Extended Security Support         : Extended_Security_Not_Supported
11:37:38: Command Support                   : COMMAND_SUPPORT
11:37:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 5513 ] 
11:37:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269090>, <py_sfcl.CommandDataDefinition object at 0x062693F0>) , Command count = 5514 ] 
11:37:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:38: [ SetBusWidth(0x4) , Command count = 5515 ] 
11:37:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06269E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5516 ] 
11:37:38: Protected Area Size 0x28000
11:37:38: Bus Width           2
11:37:38: Secure Mode         0
11:37:38: Speed  Class        4
11:37:38: Perf Move           0
11:37:38: Au Size             9
11:37:38: Erase Size          15
11:37:38: Erase Timeout       1
11:37:38: Erase offset        1
11:37:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5517 ] 
11:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:38: Host Frequency set to 100000 KHz
11:37:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:38: ####CSD Registe 2.0 Values####
11:37:38: CSD_STRUCTURE                                 :0x1
11:37:38: Reserv1                                       :0x0
11:37:38: Time Access 1 TAAC                            :0xe
11:37:38: Time Access 2 NSAC*100                        :0x0
11:37:38: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:38: Card Command Classess CCC                     :0x5b5
11:37:38: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:38: DSR(driver stage register)  DSR_IMP           :0x0
11:37:38: Reserv2                                       :0x0
11:37:38: Device Size C_SIZE                            :0xedc8
11:37:38: Reserv3                                       :0x0
11:37:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:39: Reserv4                                       :0x0
11:37:39: Write Speed Factor R2W_FACTOR                 :0x2
11:37:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:39: FILE_FORMAT_GRP                               :0x0
11:37:39: COPY flag                                     :0x1
11:37:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:39: File_Format                                   :0x0
11:37:39: CRC                                           :0x0
11:37:39: ####CSD Registe Values####  

11:37:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 5518 ] 
11:37:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D840>, <py_sfcl.CommandDataDefinition object at 0x06269300>) , Command count = 5519 ] 
11:37:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062691E0>, <py_sfcl.PySEnhancedCmdData object at 0x062692A0>, <None>, <py_sfcl.Command23 object at 0x06268660>) , Command count = 5520 ] 
11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x06269AE0>) , Command count = 5521 ] 
11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D660>, <py_sfcl.PySEnhancedCmdData object at 0x0627DFC0>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 5522 ] 
11:37:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:40: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:42: Host Frequency set to 25000 KHz
11:37:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:42: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 5523 ] 
11:37:42: [GO18_globalSetVolt]### Host voltage value is set.
11:37:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268EA0>, 0x0, False) , Command count = 5524 ] 
11:37:42: [GO18_globalSetVolt]### Host voltage value is set.
11:37:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5525 ] 
11:37:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5526 ] 
11:37:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5527 ] 
11:37:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 5528 ] 
11:37:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269510>, <py_sfcl.CommandDataDefinition object at 0x06269930>) , Command count = 5529 ] 
11:37:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:42: [ SetCardRCA(0x1, 0xD555) , Command count = 5530 ] 
11:37:42: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:42: Host Frequency set to 25000 KHz
11:37:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:42: ####CSD Registe 2.0 Values####
11:37:42: CSD_STRUCTURE                                 :0x1
11:37:42: Reserv1                                       :0x0
11:37:42: Time Access 1 TAAC                            :0xe
11:37:42: Time Access 2 NSAC*100                        :0x0
11:37:42: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:42: Card Command Classess CCC                     :0x5b5
11:37:42: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:42: DSR(driver stage register)  DSR_IMP           :0x0
11:37:42: Reserv2                                       :0x0
11:37:42: Device Size C_SIZE                            :0xedc8
11:37:42: Reserv3                                       :0x0
11:37:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:42: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:42: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:42: Reserv4                                       :0x0
11:37:42: Write Speed Factor R2W_FACTOR                 :0x2
11:37:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:42: FILE_FORMAT_GRP                               :0x0
11:37:42: COPY flag                                     :0x1
11:37:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:42: File_Format                                   :0x0
11:37:42: CRC                                           :0x0
11:37:42: ####CSD Registe Values####  

11:37:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:42: [GetSCRRegisterEntry] Passed
11:37:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:42: Data_Status_After Erases          : 0
11:37:42: CPRM Security Support             : No Security
11:37:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:42: Spec. Version                     : Version 3.0X
11:37:42: Extended Security Support         : Extended_Security_Not_Supported
11:37:42: Command Support                   : COMMAND_SUPPORT
11:37:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 5531 ] 
11:37:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735D0>, <py_sfcl.CommandDataDefinition object at 0x06269840>) , Command count = 5532 ] 
11:37:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:43: [ SetBusWidth(0x4) , Command count = 5533 ] 
11:37:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5534 ] 
11:37:43: Protected Area Size 0x28000
11:37:43: Bus Width           2
11:37:43: Secure Mode         0
11:37:43: Speed  Class        4
11:37:43: Perf Move           0
11:37:43: Au Size             9
11:37:43: Erase Size          15
11:37:43: Erase Timeout       1
11:37:43: Erase offset        1
11:37:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5535 ] 
11:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:43: Host Frequency set to 100000 KHz
11:37:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:43: ####CSD Registe 2.0 Values####
11:37:43: CSD_STRUCTURE                                 :0x1
11:37:43: Reserv1                                       :0x0
11:37:43: Time Access 1 TAAC                            :0xe
11:37:43: Time Access 2 NSAC*100                        :0x0
11:37:43: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:43: Card Command Classess CCC                     :0x5b5
11:37:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:43: DSR(driver stage register)  DSR_IMP           :0x0
11:37:43: Reserv2                                       :0x0
11:37:43: Device Size C_SIZE                            :0xedc8
11:37:43: Reserv3                                       :0x0
11:37:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:44: Reserv4                                       :0x0
11:37:44: Write Speed Factor R2W_FACTOR                 :0x2
11:37:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:44: FILE_FORMAT_GRP                               :0x0
11:37:44: COPY flag                                     :0x1
11:37:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:44: File_Format                                   :0x0
11:37:44: CRC                                           :0x0
11:37:44: ####CSD Registe Values####  

11:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 5536 ] 
11:37:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062697E0>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 5537 ] 
11:37:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269E70>, <py_sfcl.PySEnhancedCmdData object at 0x06269960>, <None>, <py_sfcl.Command23 object at 0x062801E0>) , Command count = 5538 ] 
11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062698D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273EA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D3F0>, <None>, <py_sfcl.Command23 object at 0x0626D4B0>) , Command count = 5539 ] 
11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D360>, <None>, <py_sfcl.Command23 object at 0x0626DBD0>) , Command count = 5540 ] 
11:37:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:45: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:47: Host Frequency set to 25000 KHz
11:37:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:47: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x062696F0>, 0x0, True) , Command count = 5541 ] 
11:37:47: [GO18_globalSetVolt]### Host voltage value is set.
11:37:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x062684E0>, 0x0, False) , Command count = 5542 ] 
11:37:47: [GO18_globalSetVolt]### Host voltage value is set.
11:37:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5543 ] 
11:37:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5544 ] 
11:37:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5545 ] 
11:37:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 5546 ] 
11:37:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 5547 ] 
11:37:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:47: [ SetCardRCA(0x1, 0xD555) , Command count = 5548 ] 
11:37:47: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:47: Host Frequency set to 25000 KHz
11:37:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:47: ####CSD Registe 2.0 Values####
11:37:47: CSD_STRUCTURE                                 :0x1
11:37:47: Reserv1                                       :0x0
11:37:47: Time Access 1 TAAC                            :0xe
11:37:47: Time Access 2 NSAC*100                        :0x0
11:37:47: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:47: Card Command Classess CCC                     :0x5b5
11:37:47: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:47: DSR(driver stage register)  DSR_IMP           :0x0
11:37:47: Reserv2                                       :0x0
11:37:47: Device Size C_SIZE                            :0xedc8
11:37:47: Reserv3                                       :0x0
11:37:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:47: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:47: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:47: Reserv4                                       :0x0
11:37:47: Write Speed Factor R2W_FACTOR                 :0x2
11:37:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:47: FILE_FORMAT_GRP                               :0x0
11:37:47: COPY flag                                     :0x1
11:37:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:47: File_Format                                   :0x0
11:37:47: CRC                                           :0x0
11:37:47: ####CSD Registe Values####  

11:37:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:47: [GetSCRRegisterEntry] Passed
11:37:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:47: Data_Status_After Erases          : 0
11:37:47: CPRM Security Support             : No Security
11:37:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:47: Spec. Version                     : Version 3.0X
11:37:47: Extended Security Support         : Extended_Security_Not_Supported
11:37:47: Command Support                   : COMMAND_SUPPORT
11:37:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 5549 ] 
11:37:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D6C0>, <py_sfcl.CommandDataDefinition object at 0x0626DA50>) , Command count = 5550 ] 
11:37:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:47: [ SetBusWidth(0x4) , Command count = 5551 ] 
11:37:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5552 ] 
11:37:47: Protected Area Size 0x28000
11:37:47: Bus Width           2
11:37:48: Secure Mode         0
11:37:48: Speed  Class        4
11:37:48: Perf Move           0
11:37:48: Au Size             9
11:37:48: Erase Size          15
11:37:48: Erase Timeout       1
11:37:48: Erase offset        1
11:37:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5553 ] 
11:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:48: Host Frequency set to 100000 KHz
11:37:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:48: ####CSD Registe 2.0 Values####
11:37:48: CSD_STRUCTURE                                 :0x1
11:37:48: Reserv1                                       :0x0
11:37:48: Time Access 1 TAAC                            :0xe
11:37:48: Time Access 2 NSAC*100                        :0x0
11:37:48: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:48: Card Command Classess CCC                     :0x5b5
11:37:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:48: DSR(driver stage register)  DSR_IMP           :0x0
11:37:48: Reserv2                                       :0x0
11:37:48: Device Size C_SIZE                            :0xedc8
11:37:48: Reserv3                                       :0x0
11:37:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:48: Reserv4                                       :0x0
11:37:48: Write Speed Factor R2W_FACTOR                 :0x2
11:37:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:48: FILE_FORMAT_GRP                               :0x0
11:37:48: COPY flag                                     :0x1
11:37:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:48: File_Format                                   :0x0
11:37:48: CRC                                           :0x0
11:37:48: ####CSD Registe Values####  

11:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 5554 ] 
11:37:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268AB0>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 5555 ] 
11:37:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273570>, <py_sfcl.PySEnhancedCmdData object at 0x062732D0>, <None>, <py_sfcl.Command23 object at 0x0627D7B0>) , Command count = 5556 ] 
11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0626D690>, <None>, <py_sfcl.Command23 object at 0x06273300>) , Command count = 5557 ] 
11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA20>, <py_sfcl.PySEnhancedCmdData object at 0x0626DE70>, <None>, <py_sfcl.Command23 object at 0x0626D990>) , Command count = 5558 ] 
11:37:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:50: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:52: Host Frequency set to 25000 KHz
11:37:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:52: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 5559 ] 
11:37:52: [GO18_globalSetVolt]### Host voltage value is set.
11:37:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DA20>, 0x0, False) , Command count = 5560 ] 
11:37:52: [GO18_globalSetVolt]### Host voltage value is set.
11:37:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5561 ] 
11:37:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5562 ] 
11:37:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5563 ] 
11:37:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273450>, <py_sfcl.CommandDataDefinition object at 0x06273270>) , Command count = 5564 ] 
11:37:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DBA0>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 5565 ] 
11:37:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:52: [ SetCardRCA(0x1, 0xD555) , Command count = 5566 ] 
11:37:52: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:52: Host Frequency set to 25000 KHz
11:37:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:52: ####CSD Registe 2.0 Values####
11:37:52: CSD_STRUCTURE                                 :0x1
11:37:52: Reserv1                                       :0x0
11:37:52: Time Access 1 TAAC                            :0xe
11:37:52: Time Access 2 NSAC*100                        :0x0
11:37:52: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:52: Card Command Classess CCC                     :0x5b5
11:37:52: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:52: DSR(driver stage register)  DSR_IMP           :0x0
11:37:52: Reserv2                                       :0x0
11:37:52: Device Size C_SIZE                            :0xedc8
11:37:52: Reserv3                                       :0x0
11:37:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:52: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:52: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:52: Reserv4                                       :0x0
11:37:52: Write Speed Factor R2W_FACTOR                 :0x2
11:37:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:52: FILE_FORMAT_GRP                               :0x0
11:37:52: COPY flag                                     :0x1
11:37:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:52: File_Format                                   :0x0
11:37:52: CRC                                           :0x0
11:37:52: ####CSD Registe Values####  

11:37:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:52: [GetSCRRegisterEntry] Passed
11:37:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:52: Data_Status_After Erases          : 0
11:37:52: CPRM Security Support             : No Security
11:37:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:52: Spec. Version                     : Version 3.0X
11:37:52: Extended Security Support         : Extended_Security_Not_Supported
11:37:52: Command Support                   : COMMAND_SUPPORT
11:37:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 5567 ] 
11:37:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062695D0>, <py_sfcl.CommandDataDefinition object at 0x0626DBA0>) , Command count = 5568 ] 
11:37:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:52: [ SetBusWidth(0x4) , Command count = 5569 ] 
11:37:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5570 ] 
11:37:52: Protected Area Size 0x28000
11:37:52: Bus Width           2
11:37:52: Secure Mode         0
11:37:52: Speed  Class        4
11:37:52: Perf Move           0
11:37:52: Au Size             9
11:37:52: Erase Size          15
11:37:52: Erase Timeout       1
11:37:52: Erase offset        1
11:37:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5571 ] 
11:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:52: Host Frequency set to 100000 KHz
11:37:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:53: ####CSD Registe 2.0 Values####
11:37:53: CSD_STRUCTURE                                 :0x1
11:37:53: Reserv1                                       :0x0
11:37:53: Time Access 1 TAAC                            :0xe
11:37:53: Time Access 2 NSAC*100                        :0x0
11:37:53: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:53: Card Command Classess CCC                     :0x5b5
11:37:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:53: DSR(driver stage register)  DSR_IMP           :0x0
11:37:53: Reserv2                                       :0x0
11:37:53: Device Size C_SIZE                            :0xedc8
11:37:53: Reserv3                                       :0x0
11:37:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:53: Reserv4                                       :0x0
11:37:53: Write Speed Factor R2W_FACTOR                 :0x2
11:37:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:53: FILE_FORMAT_GRP                               :0x0
11:37:53: COPY flag                                     :0x1
11:37:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:53: File_Format                                   :0x0
11:37:53: CRC                                           :0x0
11:37:53: ####CSD Registe Values####  

11:37:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0626D390>) , Command count = 5572 ] 
11:37:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D750>, <py_sfcl.CommandDataDefinition object at 0x0627D060>) , Command count = 5573 ] 
11:37:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A210>, <None>, <py_sfcl.Command23 object at 0x0626DE10>) , Command count = 5574 ] 
11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x0626DDB0>, <None>, <py_sfcl.Command23 object at 0x0626DD50>) , Command count = 5575 ] 
11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062769C0>, <py_sfcl.PySEnhancedCmdData object at 0x06324120>, <None>, <py_sfcl.Command23 object at 0x0626D090>) , Command count = 5576 ] 
11:37:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:54: [GO4_globalInitCard]### Switch to Specify Card Type
11:37:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:56: Host Frequency set to 25000 KHz
11:37:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:56: [GO18_globalSetVolt]### Set Host Voltage value.
11:37:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:37:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 5577 ] 
11:37:56: [GO18_globalSetVolt]### Host voltage value is set.
11:37:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:37:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x062731E0>, 0x0, False) , Command count = 5578 ] 
11:37:56: [GO18_globalSetVolt]### Host voltage value is set.
11:37:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5579 ] 
11:37:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:37:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5580 ] 
11:37:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:37:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:37:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:37:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:37:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:37:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5581 ] 
11:37:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:37:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x0627A600>) , Command count = 5582 ] 
11:37:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 5583 ] 
11:37:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:37:57: [ SetCardRCA(0x1, 0xD555) , Command count = 5584 ] 
11:37:57: [DVTCommonLib]### Identification :Idenfication of card completed 

11:37:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:37:57: Host Frequency set to 25000 KHz
11:37:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:57: ####CSD Registe 2.0 Values####
11:37:57: CSD_STRUCTURE                                 :0x1
11:37:57: Reserv1                                       :0x0
11:37:57: Time Access 1 TAAC                            :0xe
11:37:57: Time Access 2 NSAC*100                        :0x0
11:37:57: Data Transfer Rate TRAN_SPEED                 :0x32
11:37:57: Card Command Classess CCC                     :0x5b5
11:37:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:57: DSR(driver stage register)  DSR_IMP           :0x0
11:37:57: Reserv2                                       :0x0
11:37:57: Device Size C_SIZE                            :0xedc8
11:37:57: Reserv3                                       :0x0
11:37:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:57: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:57: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:57: Reserv4                                       :0x0
11:37:57: Write Speed Factor R2W_FACTOR                 :0x2
11:37:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:57: FILE_FORMAT_GRP                               :0x0
11:37:57: COPY flag                                     :0x1
11:37:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:57: File_Format                                   :0x0
11:37:57: CRC                                           :0x0
11:37:57: ####CSD Registe Values####  

11:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:37:57: [GetSCRRegisterEntry] Passed
11:37:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:37:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:37:57: Data_Status_After Erases          : 0
11:37:57: CPRM Security Support             : No Security
11:37:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:37:57: Spec. Version                     : Version 3.0X
11:37:57: Extended Security Support         : Extended_Security_Not_Supported
11:37:57: Command Support                   : COMMAND_SUPPORT
11:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062735A0>, <py_sfcl.CommandDataDefinition object at 0x06276060>) , Command count = 5585 ] 
11:37:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062800C0>, <py_sfcl.CommandDataDefinition object at 0x0627A6F0>) , Command count = 5586 ] 
11:37:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:37:57: [ SetBusWidth(0x4) , Command count = 5587 ] 
11:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:37:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5588 ] 
11:37:57: Protected Area Size 0x28000
11:37:57: Bus Width           2
11:37:57: Secure Mode         0
11:37:57: Speed  Class        4
11:37:57: Perf Move           0
11:37:57: Au Size             9
11:37:57: Erase Size          15
11:37:57: Erase Timeout       1
11:37:57: Erase offset        1
11:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:37:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:37:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5589 ] 
11:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:37:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:37:57: Host Frequency set to 100000 KHz
11:37:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:37:57: ####CSD Registe 2.0 Values####
11:37:57: CSD_STRUCTURE                                 :0x1
11:37:57: Reserv1                                       :0x0
11:37:57: Time Access 1 TAAC                            :0xe
11:37:57: Time Access 2 NSAC*100                        :0x0
11:37:57: Data Transfer Rate TRAN_SPEED                 :0xb
11:37:57: Card Command Classess CCC                     :0x5b5
11:37:57: Max Read Data Block Length  READ_BL_LEN       :0x9
11:37:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:37:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:37:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:37:57: DSR(driver stage register)  DSR_IMP           :0x0
11:37:57: Reserv2                                       :0x0
11:37:57: Device Size C_SIZE                            :0xedc8
11:37:57: Reserv3                                       :0x0
11:37:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:37:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:37:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:37:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:37:58: Reserv4                                       :0x0
11:37:58: Write Speed Factor R2W_FACTOR                 :0x2
11:37:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:37:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:37:58: FILE_FORMAT_GRP                               :0x0
11:37:58: COPY flag                                     :0x1
11:37:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:37:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:37:58: File_Format                                   :0x0
11:37:58: CRC                                           :0x0
11:37:58: ####CSD Registe Values####  

11:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 5590 ] 
11:37:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1B0>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 5591 ] 
11:37:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:37:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:37:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x06273330>) , Command count = 5592 ] 
11:37:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
11:37:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:37:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062730C0>, <py_sfcl.PySEnhancedCmdData object at 0x06276DB0>, <None>, <py_sfcl.Command23 object at 0x06276510>) , Command count = 5593 ] 
11:37:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:37:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:37:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AE40>, <py_sfcl.PySEnhancedCmdData object at 0x06324960>, <None>, <py_sfcl.Command23 object at 0x062763C0>) , Command count = 5594 ] 
11:37:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:37:59: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:01: Host Frequency set to 25000 KHz
11:38:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:01: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 5595 ] 
11:38:01: [GO18_globalSetVolt]### Host voltage value is set.
11:38:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273BA0>, 0x0, False) , Command count = 5596 ] 
11:38:01: [GO18_globalSetVolt]### Host voltage value is set.
11:38:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5597 ] 
11:38:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5598 ] 
11:38:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5599 ] 
11:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 5600 ] 
11:38:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0F0>, <py_sfcl.CommandDataDefinition object at 0x06276DE0>) , Command count = 5601 ] 
11:38:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:02: [ SetCardRCA(0x1, 0xD555) , Command count = 5602 ] 
11:38:02: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:02: Host Frequency set to 25000 KHz
11:38:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:02: ####CSD Registe 2.0 Values####
11:38:02: CSD_STRUCTURE                                 :0x1
11:38:02: Reserv1                                       :0x0
11:38:02: Time Access 1 TAAC                            :0xe
11:38:02: Time Access 2 NSAC*100                        :0x0
11:38:02: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:02: Card Command Classess CCC                     :0x5b5
11:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:02: DSR(driver stage register)  DSR_IMP           :0x0
11:38:02: Reserv2                                       :0x0
11:38:02: Device Size C_SIZE                            :0xedc8
11:38:02: Reserv3                                       :0x0
11:38:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:02: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:02: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:02: Reserv4                                       :0x0
11:38:02: Write Speed Factor R2W_FACTOR                 :0x2
11:38:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:02: FILE_FORMAT_GRP                               :0x0
11:38:02: COPY flag                                     :0x1
11:38:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:02: File_Format                                   :0x0
11:38:02: CRC                                           :0x0
11:38:02: ####CSD Registe Values####  

11:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:02: [GetSCRRegisterEntry] Passed
11:38:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:02: Data_Status_After Erases          : 0
11:38:02: CPRM Security Support             : No Security
11:38:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:02: Spec. Version                     : Version 3.0X
11:38:02: Extended Security Support         : Extended_Security_Not_Supported
11:38:02: Command Support                   : COMMAND_SUPPORT
11:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 5603 ] 
11:38:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273AE0>, <py_sfcl.CommandDataDefinition object at 0x06276270>) , Command count = 5604 ] 
11:38:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:02: [ SetBusWidth(0x4) , Command count = 5605 ] 
11:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5606 ] 
11:38:02: Protected Area Size 0x28000
11:38:02: Bus Width           2
11:38:02: Secure Mode         0
11:38:02: Speed  Class        4
11:38:02: Perf Move           0
11:38:02: Au Size             9
11:38:02: Erase Size          15
11:38:02: Erase Timeout       1
11:38:02: Erase offset        1
11:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5607 ] 
11:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:02: Host Frequency set to 100000 KHz
11:38:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:02: ####CSD Registe 2.0 Values####
11:38:02: CSD_STRUCTURE                                 :0x1
11:38:02: Reserv1                                       :0x0
11:38:02: Time Access 1 TAAC                            :0xe
11:38:02: Time Access 2 NSAC*100                        :0x0
11:38:02: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:02: Card Command Classess CCC                     :0x5b5
11:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:02: DSR(driver stage register)  DSR_IMP           :0x0
11:38:02: Reserv2                                       :0x0
11:38:02: Device Size C_SIZE                            :0xedc8
11:38:02: Reserv3                                       :0x0
11:38:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:03: Reserv4                                       :0x0
11:38:03: Write Speed Factor R2W_FACTOR                 :0x2
11:38:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:03: FILE_FORMAT_GRP                               :0x0
11:38:03: COPY flag                                     :0x1
11:38:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:03: File_Format                                   :0x0
11:38:03: CRC                                           :0x0
11:38:03: ####CSD Registe Values####  

11:38:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 5608 ] 
11:38:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269540>, <py_sfcl.CommandDataDefinition object at 0x06273750>) , Command count = 5609 ] 
11:38:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x062765A0>, <None>, <py_sfcl.Command23 object at 0x06276C90>) , Command count = 5610 ] 
11:38:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
11:38:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x06276C00>) , Command count = 5611 ] 
11:38:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063245A0>, <py_sfcl.PySEnhancedCmdData object at 0x06324A80>, <None>, <py_sfcl.Command23 object at 0x06276810>) , Command count = 5612 ] 
11:38:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:04: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:06: Host Frequency set to 25000 KHz
11:38:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:06: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 5613 ] 
11:38:06: [GO18_globalSetVolt]### Host voltage value is set.
11:38:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276FC0>, 0x0, False) , Command count = 5614 ] 
11:38:06: [GO18_globalSetVolt]### Host voltage value is set.
11:38:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5615 ] 
11:38:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5616 ] 
11:38:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5617 ] 
11:38:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273B10>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 5618 ] 
11:38:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x06276600>) , Command count = 5619 ] 
11:38:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:06: [ SetCardRCA(0x1, 0xD555) , Command count = 5620 ] 
11:38:06: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:07: Host Frequency set to 25000 KHz
11:38:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:07: ####CSD Registe 2.0 Values####
11:38:07: CSD_STRUCTURE                                 :0x1
11:38:07: Reserv1                                       :0x0
11:38:07: Time Access 1 TAAC                            :0xe
11:38:07: Time Access 2 NSAC*100                        :0x0
11:38:07: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:07: Card Command Classess CCC                     :0x5b5
11:38:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:07: DSR(driver stage register)  DSR_IMP           :0x0
11:38:07: Reserv2                                       :0x0
11:38:07: Device Size C_SIZE                            :0xedc8
11:38:07: Reserv3                                       :0x0
11:38:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:07: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:07: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:07: Reserv4                                       :0x0
11:38:07: Write Speed Factor R2W_FACTOR                 :0x2
11:38:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:07: FILE_FORMAT_GRP                               :0x0
11:38:07: COPY flag                                     :0x1
11:38:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:07: File_Format                                   :0x0
11:38:07: CRC                                           :0x0
11:38:07: ####CSD Registe Values####  

11:38:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:07: [GetSCRRegisterEntry] Passed
11:38:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:07: Data_Status_After Erases          : 0
11:38:07: CPRM Security Support             : No Security
11:38:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:07: Spec. Version                     : Version 3.0X
11:38:07: Extended Security Support         : Extended_Security_Not_Supported
11:38:07: Command Support                   : COMMAND_SUPPORT
11:38:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 5621 ] 
11:38:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D7E0>, <py_sfcl.CommandDataDefinition object at 0x06276600>) , Command count = 5622 ] 
11:38:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:07: [ SetBusWidth(0x4) , Command count = 5623 ] 
11:38:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063246C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5624 ] 
11:38:07: Protected Area Size 0x28000
11:38:07: Bus Width           2
11:38:07: Secure Mode         0
11:38:07: Speed  Class        4
11:38:07: Perf Move           0
11:38:07: Au Size             9
11:38:07: Erase Size          15
11:38:07: Erase Timeout       1
11:38:07: Erase offset        1
11:38:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5625 ] 
11:38:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:07: Host Frequency set to 100000 KHz
11:38:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:07: ####CSD Registe 2.0 Values####
11:38:07: CSD_STRUCTURE                                 :0x1
11:38:07: Reserv1                                       :0x0
11:38:07: Time Access 1 TAAC                            :0xe
11:38:07: Time Access 2 NSAC*100                        :0x0
11:38:07: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:07: Card Command Classess CCC                     :0x5b5
11:38:07: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:07: DSR(driver stage register)  DSR_IMP           :0x0
11:38:07: Reserv2                                       :0x0
11:38:07: Device Size C_SIZE                            :0xedc8
11:38:07: Reserv3                                       :0x0
11:38:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:08: Reserv4                                       :0x0
11:38:08: Write Speed Factor R2W_FACTOR                 :0x2
11:38:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:08: FILE_FORMAT_GRP                               :0x0
11:38:08: COPY flag                                     :0x1
11:38:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:08: File_Format                                   :0x0
11:38:08: CRC                                           :0x0
11:38:08: ####CSD Registe Values####  

11:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06276960>) , Command count = 5626 ] 
11:38:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062768D0>, <py_sfcl.CommandDataDefinition object at 0x06312ED0>) , Command count = 5627 ] 
11:38:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06312CF0>) , Command count = 5628 ] 
11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D780>, <None>, <py_sfcl.Command23 object at 0x0627A270>) , Command count = 5629 ] 
11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063241B0>, <py_sfcl.PySEnhancedCmdData object at 0x063245A0>, <None>, <py_sfcl.Command23 object at 0x0627A090>) , Command count = 5630 ] 
11:38:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:09: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:11: Host Frequency set to 25000 KHz
11:38:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:11: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 5631 ] 
11:38:11: [GO18_globalSetVolt]### Host voltage value is set.
11:38:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x062761B0>, 0x0, False) , Command count = 5632 ] 
11:38:11: [GO18_globalSetVolt]### Host voltage value is set.
11:38:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5633 ] 
11:38:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5634 ] 
11:38:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5635 ] 
11:38:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 5636 ] 
11:38:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767E0>, <py_sfcl.CommandDataDefinition object at 0x06276EA0>) , Command count = 5637 ] 
11:38:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:11: [ SetCardRCA(0x1, 0xD555) , Command count = 5638 ] 
11:38:11: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:11: Host Frequency set to 25000 KHz
11:38:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:11: ####CSD Registe 2.0 Values####
11:38:11: CSD_STRUCTURE                                 :0x1
11:38:11: Reserv1                                       :0x0
11:38:11: Time Access 1 TAAC                            :0xe
11:38:11: Time Access 2 NSAC*100                        :0x0
11:38:11: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:11: Card Command Classess CCC                     :0x5b5
11:38:11: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:11: DSR(driver stage register)  DSR_IMP           :0x0
11:38:11: Reserv2                                       :0x0
11:38:11: Device Size C_SIZE                            :0xedc8
11:38:11: Reserv3                                       :0x0
11:38:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:11: Reserv4                                       :0x0
11:38:11: Write Speed Factor R2W_FACTOR                 :0x2
11:38:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:11: FILE_FORMAT_GRP                               :0x0
11:38:11: COPY flag                                     :0x1
11:38:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:11: File_Format                                   :0x0
11:38:11: CRC                                           :0x0
11:38:11: ####CSD Registe Values####  

11:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:11: [GetSCRRegisterEntry] Passed
11:38:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:11: Data_Status_After Erases          : 0
11:38:11: CPRM Security Support             : No Security
11:38:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:11: Spec. Version                     : Version 3.0X
11:38:11: Extended Security Support         : Extended_Security_Not_Supported
11:38:11: Command Support                   : COMMAND_SUPPORT
11:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 5639 ] 
11:38:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269330>, <py_sfcl.CommandDataDefinition object at 0x062166C0>) , Command count = 5640 ] 
11:38:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:11: [ SetBusWidth(0x4) , Command count = 5641 ] 
11:38:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063249F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5642 ] 
11:38:11: Protected Area Size 0x28000
11:38:11: Bus Width           2
11:38:12: Secure Mode         0
11:38:12: Speed  Class        4
11:38:12: Perf Move           0
11:38:12: Au Size             9
11:38:12: Erase Size          15
11:38:12: Erase Timeout       1
11:38:12: Erase offset        1
11:38:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5643 ] 
11:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:12: Host Frequency set to 100000 KHz
11:38:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:12: ####CSD Registe 2.0 Values####
11:38:12: CSD_STRUCTURE                                 :0x1
11:38:12: Reserv1                                       :0x0
11:38:12: Time Access 1 TAAC                            :0xe
11:38:12: Time Access 2 NSAC*100                        :0x0
11:38:12: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:12: Card Command Classess CCC                     :0x5b5
11:38:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:12: DSR(driver stage register)  DSR_IMP           :0x0
11:38:12: Reserv2                                       :0x0
11:38:12: Device Size C_SIZE                            :0xedc8
11:38:12: Reserv3                                       :0x0
11:38:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:12: Reserv4                                       :0x0
11:38:12: Write Speed Factor R2W_FACTOR                 :0x2
11:38:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:12: FILE_FORMAT_GRP                               :0x0
11:38:12: COPY flag                                     :0x1
11:38:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:12: File_Format                                   :0x0
11:38:12: CRC                                           :0x0
11:38:12: ####CSD Registe Values####  

11:38:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 5644 ] 
11:38:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312B70>, <py_sfcl.CommandDataDefinition object at 0x06312AB0>) , Command count = 5645 ] 
11:38:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x063129F0>) , Command count = 5646 ] 
11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x06276540>) , Command count = 5647 ] 
11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063243F0>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x0627A5D0>) , Command count = 5648 ] 
11:38:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:14: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:16: Host Frequency set to 25000 KHz
11:38:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:16: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 5649 ] 
11:38:16: [GO18_globalSetVolt]### Host voltage value is set.
11:38:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E10>, 0x0, False) , Command count = 5650 ] 
11:38:16: [GO18_globalSetVolt]### Host voltage value is set.
11:38:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5651 ] 
11:38:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5652 ] 
11:38:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5653 ] 
11:38:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC60>, <py_sfcl.CommandDataDefinition object at 0x06312E40>) , Command count = 5654 ] 
11:38:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x05401E70>) , Command count = 5655 ] 
11:38:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:16: [ SetCardRCA(0x1, 0xD555) , Command count = 5656 ] 
11:38:16: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:16: Host Frequency set to 25000 KHz
11:38:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:16: ####CSD Registe 2.0 Values####
11:38:16: CSD_STRUCTURE                                 :0x1
11:38:16: Reserv1                                       :0x0
11:38:16: Time Access 1 TAAC                            :0xe
11:38:16: Time Access 2 NSAC*100                        :0x0
11:38:16: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:16: Card Command Classess CCC                     :0x5b5
11:38:16: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:16: DSR(driver stage register)  DSR_IMP           :0x0
11:38:16: Reserv2                                       :0x0
11:38:16: Device Size C_SIZE                            :0xedc8
11:38:16: Reserv3                                       :0x0
11:38:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:16: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:16: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:16: Reserv4                                       :0x0
11:38:16: Write Speed Factor R2W_FACTOR                 :0x2
11:38:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:16: FILE_FORMAT_GRP                               :0x0
11:38:16: COPY flag                                     :0x1
11:38:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:16: File_Format                                   :0x0
11:38:16: CRC                                           :0x0
11:38:16: ####CSD Registe Values####  

11:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:16: [GetSCRRegisterEntry] Passed
11:38:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:16: Data_Status_After Erases          : 0
11:38:16: CPRM Security Support             : No Security
11:38:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:16: Spec. Version                     : Version 3.0X
11:38:16: Extended Security Support         : Extended_Security_Not_Supported
11:38:16: Command Support                   : COMMAND_SUPPORT
11:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F00>, <py_sfcl.CommandDataDefinition object at 0x0626D150>) , Command count = 5657 ] 
11:38:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053FB930>, <py_sfcl.CommandDataDefinition object at 0x06312B10>) , Command count = 5658 ] 
11:38:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:16: [ SetBusWidth(0x4) , Command count = 5659 ] 
11:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5660 ] 
11:38:16: Protected Area Size 0x28000
11:38:16: Bus Width           2
11:38:16: Secure Mode         0
11:38:16: Speed  Class        4
11:38:16: Perf Move           0
11:38:16: Au Size             9
11:38:16: Erase Size          15
11:38:16: Erase Timeout       1
11:38:16: Erase offset        1
11:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5661 ] 
11:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:16: Host Frequency set to 100000 KHz
11:38:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:17: ####CSD Registe 2.0 Values####
11:38:17: CSD_STRUCTURE                                 :0x1
11:38:17: Reserv1                                       :0x0
11:38:17: Time Access 1 TAAC                            :0xe
11:38:17: Time Access 2 NSAC*100                        :0x0
11:38:17: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:17: Card Command Classess CCC                     :0x5b5
11:38:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:17: DSR(driver stage register)  DSR_IMP           :0x0
11:38:17: Reserv2                                       :0x0
11:38:17: Device Size C_SIZE                            :0xedc8
11:38:17: Reserv3                                       :0x0
11:38:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:17: Reserv4                                       :0x0
11:38:17: Write Speed Factor R2W_FACTOR                 :0x2
11:38:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:17: FILE_FORMAT_GRP                               :0x0
11:38:17: COPY flag                                     :0x1
11:38:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:17: File_Format                                   :0x0
11:38:17: CRC                                           :0x0
11:38:17: ####CSD Registe Values####  

11:38:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 5662 ] 
11:38:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF1E0>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 5663 ] 
11:38:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276BD0>, <None>, <py_sfcl.Command23 object at 0x0627A9C0>) , Command count = 5664 ] 
11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DAE0>, <None>, <py_sfcl.Command23 object at 0x06312DB0>) , Command count = 5665 ] 
11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626DC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324630>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x06312C60>) , Command count = 5666 ] 
11:38:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:21: Host Frequency set to 25000 KHz
11:38:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 5667 ] 
11:38:21: [GO18_globalSetVolt]### Host voltage value is set.
11:38:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273720>, 0x0, False) , Command count = 5668 ] 
11:38:21: [GO18_globalSetVolt]### Host voltage value is set.
11:38:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5669 ] 
11:38:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5670 ] 
11:38:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5671 ] 
11:38:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 5672 ] 
11:38:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D030>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 5673 ] 
11:38:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:21: [ SetCardRCA(0x1, 0xD555) , Command count = 5674 ] 
11:38:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:21: Host Frequency set to 25000 KHz
11:38:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:21: ####CSD Registe 2.0 Values####
11:38:21: CSD_STRUCTURE                                 :0x1
11:38:21: Reserv1                                       :0x0
11:38:21: Time Access 1 TAAC                            :0xe
11:38:21: Time Access 2 NSAC*100                        :0x0
11:38:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:21: Card Command Classess CCC                     :0x5b5
11:38:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:21: DSR(driver stage register)  DSR_IMP           :0x0
11:38:21: Reserv2                                       :0x0
11:38:21: Device Size C_SIZE                            :0xedc8
11:38:21: Reserv3                                       :0x0
11:38:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:21: Reserv4                                       :0x0
11:38:21: Write Speed Factor R2W_FACTOR                 :0x2
11:38:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:21: FILE_FORMAT_GRP                               :0x0
11:38:21: COPY flag                                     :0x1
11:38:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:21: File_Format                                   :0x0
11:38:21: CRC                                           :0x0
11:38:21: ####CSD Registe Values####  

11:38:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:21: [GetSCRRegisterEntry] Passed
11:38:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:21: Data_Status_After Erases          : 0
11:38:21: CPRM Security Support             : No Security
11:38:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:21: Spec. Version                     : Version 3.0X
11:38:21: Extended Security Support         : Extended_Security_Not_Supported
11:38:21: Command Support                   : COMMAND_SUPPORT
11:38:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 5675 ] 
11:38:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D870>, <py_sfcl.CommandDataDefinition object at 0x06269FC0>) , Command count = 5676 ] 
11:38:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:21: [ SetBusWidth(0x4) , Command count = 5677 ] 
11:38:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5678 ] 
11:38:21: Protected Area Size 0x28000
11:38:21: Bus Width           2
11:38:21: Secure Mode         0
11:38:21: Speed  Class        4
11:38:21: Perf Move           0
11:38:21: Au Size             9
11:38:21: Erase Size          15
11:38:21: Erase Timeout       1
11:38:21: Erase offset        1
11:38:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5679 ] 
11:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:21: Host Frequency set to 100000 KHz
11:38:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:22: ####CSD Registe 2.0 Values####
11:38:22: CSD_STRUCTURE                                 :0x1
11:38:22: Reserv1                                       :0x0
11:38:22: Time Access 1 TAAC                            :0xe
11:38:22: Time Access 2 NSAC*100                        :0x0
11:38:22: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:22: Card Command Classess CCC                     :0x5b5
11:38:22: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:22: DSR(driver stage register)  DSR_IMP           :0x0
11:38:22: Reserv2                                       :0x0
11:38:22: Device Size C_SIZE                            :0xedc8
11:38:22: Reserv3                                       :0x0
11:38:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:22: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:22: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:22: Reserv4                                       :0x0
11:38:22: Write Speed Factor R2W_FACTOR                 :0x2
11:38:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:22: FILE_FORMAT_GRP                               :0x0
11:38:22: COPY flag                                     :0x1
11:38:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:22: File_Format                                   :0x0
11:38:22: CRC                                           :0x0
11:38:22: ####CSD Registe Values####  

11:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738A0>, <py_sfcl.CommandDataDefinition object at 0x05401C60>) , Command count = 5680 ] 
11:38:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EDED0>, <py_sfcl.CommandDataDefinition object at 0x0626D930>) , Command count = 5681 ] 
11:38:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x06312C90>, <None>, <py_sfcl.Command23 object at 0x0627A5A0>) , Command count = 5682 ] 
11:38:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
11:38:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312A50>, <py_sfcl.PySEnhancedCmdData object at 0x06312BA0>, <None>, <py_sfcl.Command23 object at 0x0627D300>) , Command count = 5683 ] 
11:38:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269F30>, <py_sfcl.PySEnhancedCmdData object at 0x06324420>, <None>, <py_sfcl.Command23 object at 0x06312E10>) , Command count = 5684 ] 
11:38:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:23: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:25: Host Frequency set to 25000 KHz
11:38:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:25: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 5685 ] 
11:38:25: [GO18_globalSetVolt]### Host voltage value is set.
11:38:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x054019F0>, 0x0, False) , Command count = 5686 ] 
11:38:25: [GO18_globalSetVolt]### Host voltage value is set.
11:38:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5687 ] 
11:38:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5688 ] 
11:38:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5689 ] 
11:38:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06280180>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 5690 ] 
11:38:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x06312F90>) , Command count = 5691 ] 
11:38:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:26: [ SetCardRCA(0x1, 0xD555) , Command count = 5692 ] 
11:38:26: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:26: Host Frequency set to 25000 KHz
11:38:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:26: ####CSD Registe 2.0 Values####
11:38:26: CSD_STRUCTURE                                 :0x1
11:38:26: Reserv1                                       :0x0
11:38:26: Time Access 1 TAAC                            :0xe
11:38:26: Time Access 2 NSAC*100                        :0x0
11:38:26: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:26: Card Command Classess CCC                     :0x5b5
11:38:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:26: DSR(driver stage register)  DSR_IMP           :0x0
11:38:26: Reserv2                                       :0x0
11:38:26: Device Size C_SIZE                            :0xedc8
11:38:26: Reserv3                                       :0x0
11:38:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:26: Reserv4                                       :0x0
11:38:26: Write Speed Factor R2W_FACTOR                 :0x2
11:38:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:26: FILE_FORMAT_GRP                               :0x0
11:38:26: COPY flag                                     :0x1
11:38:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:26: File_Format                                   :0x0
11:38:26: CRC                                           :0x0
11:38:26: ####CSD Registe Values####  

11:38:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:26: [GetSCRRegisterEntry] Passed
11:38:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:26: Data_Status_After Erases          : 0
11:38:26: CPRM Security Support             : No Security
11:38:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:26: Spec. Version                     : Version 3.0X
11:38:26: Extended Security Support         : Extended_Security_Not_Supported
11:38:26: Command Support                   : COMMAND_SUPPORT
11:38:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 5693 ] 
11:38:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DEA0>, <py_sfcl.CommandDataDefinition object at 0x06273C30>) , Command count = 5694 ] 
11:38:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:26: [ SetBusWidth(0x4) , Command count = 5695 ] 
11:38:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5696 ] 
11:38:26: Protected Area Size 0x28000
11:38:26: Bus Width           2
11:38:26: Secure Mode         0
11:38:26: Speed  Class        4
11:38:26: Perf Move           0
11:38:26: Au Size             9
11:38:26: Erase Size          15
11:38:26: Erase Timeout       1
11:38:26: Erase offset        1
11:38:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5697 ] 
11:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:26: Host Frequency set to 100000 KHz
11:38:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:26: ####CSD Registe 2.0 Values####
11:38:26: CSD_STRUCTURE                                 :0x1
11:38:26: Reserv1                                       :0x0
11:38:26: Time Access 1 TAAC                            :0xe
11:38:26: Time Access 2 NSAC*100                        :0x0
11:38:26: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:26: Card Command Classess CCC                     :0x5b5
11:38:26: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:26: DSR(driver stage register)  DSR_IMP           :0x0
11:38:26: Reserv2                                       :0x0
11:38:26: Device Size C_SIZE                            :0xedc8
11:38:26: Reserv3                                       :0x0
11:38:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:27: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:27: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:27: Reserv4                                       :0x0
11:38:27: Write Speed Factor R2W_FACTOR                 :0x2
11:38:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:27: FILE_FORMAT_GRP                               :0x0
11:38:27: COPY flag                                     :0x1
11:38:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:27: File_Format                                   :0x0
11:38:27: CRC                                           :0x0
11:38:27: ####CSD Registe Values####  

11:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 5698 ] 
11:38:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401DE0>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 5699 ] 
11:38:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627A1B0>) , Command count = 5700 ] 
11:38:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
11:38:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x0627DED0>) , Command count = 5701 ] 
11:38:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A960>, <py_sfcl.PySEnhancedCmdData object at 0x06324420>, <None>, <py_sfcl.Command23 object at 0x0627AC00>) , Command count = 5702 ] 
11:38:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:28: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:30: Host Frequency set to 25000 KHz
11:38:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:30: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 5703 ] 
11:38:30: [GO18_globalSetVolt]### Host voltage value is set.
11:38:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AFB10>, 0x0, False) , Command count = 5704 ] 
11:38:30: [GO18_globalSetVolt]### Host voltage value is set.
11:38:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5705 ] 
11:38:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5706 ] 
11:38:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5707 ] 
11:38:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 5708 ] 
11:38:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 5709 ] 
11:38:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:30: [ SetCardRCA(0x1, 0xD555) , Command count = 5710 ] 
11:38:31: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:31: Host Frequency set to 25000 KHz
11:38:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:31: ####CSD Registe 2.0 Values####
11:38:31: CSD_STRUCTURE                                 :0x1
11:38:31: Reserv1                                       :0x0
11:38:31: Time Access 1 TAAC                            :0xe
11:38:31: Time Access 2 NSAC*100                        :0x0
11:38:31: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:31: Card Command Classess CCC                     :0x5b5
11:38:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:31: DSR(driver stage register)  DSR_IMP           :0x0
11:38:31: Reserv2                                       :0x0
11:38:31: Device Size C_SIZE                            :0xedc8
11:38:31: Reserv3                                       :0x0
11:38:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:31: Reserv4                                       :0x0
11:38:31: Write Speed Factor R2W_FACTOR                 :0x2
11:38:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:31: FILE_FORMAT_GRP                               :0x0
11:38:31: COPY flag                                     :0x1
11:38:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:31: File_Format                                   :0x0
11:38:31: CRC                                           :0x0
11:38:31: ####CSD Registe Values####  

11:38:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:31: [GetSCRRegisterEntry] Passed
11:38:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:31: Data_Status_After Erases          : 0
11:38:31: CPRM Security Support             : No Security
11:38:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:31: Spec. Version                     : Version 3.0X
11:38:31: Extended Security Support         : Extended_Security_Not_Supported
11:38:31: Command Support                   : COMMAND_SUPPORT
11:38:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 5711 ] 
11:38:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269900>, <py_sfcl.CommandDataDefinition object at 0x0627D600>) , Command count = 5712 ] 
11:38:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:31: [ SetBusWidth(0x4) , Command count = 5713 ] 
11:38:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063245D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5714 ] 
11:38:31: Protected Area Size 0x28000
11:38:31: Bus Width           2
11:38:31: Secure Mode         0
11:38:31: Speed  Class        4
11:38:31: Perf Move           0
11:38:31: Au Size             9
11:38:31: Erase Size          15
11:38:31: Erase Timeout       1
11:38:31: Erase offset        1
11:38:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5715 ] 
11:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:31: Host Frequency set to 100000 KHz
11:38:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:31: ####CSD Registe 2.0 Values####
11:38:31: CSD_STRUCTURE                                 :0x1
11:38:31: Reserv1                                       :0x0
11:38:31: Time Access 1 TAAC                            :0xe
11:38:31: Time Access 2 NSAC*100                        :0x0
11:38:31: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:31: Card Command Classess CCC                     :0x5b5
11:38:31: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:31: DSR(driver stage register)  DSR_IMP           :0x0
11:38:31: Reserv2                                       :0x0
11:38:31: Device Size C_SIZE                            :0xedc8
11:38:31: Reserv3                                       :0x0
11:38:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:32: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:32: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:32: Reserv4                                       :0x0
11:38:32: Write Speed Factor R2W_FACTOR                 :0x2
11:38:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:32: FILE_FORMAT_GRP                               :0x0
11:38:32: COPY flag                                     :0x1
11:38:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:32: File_Format                                   :0x0
11:38:32: CRC                                           :0x0
11:38:32: ####CSD Registe Values####  

11:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x062684B0>) , Command count = 5716 ] 
11:38:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AF90>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 5717 ] 
11:38:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x062169F0>) , Command count = 5718 ] 
11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x062688A0>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 5719 ] 
11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062169C0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D2A0>, <None>, <py_sfcl.Command23 object at 0x062680C0>) , Command count = 5720 ] 
11:38:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:33: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:35: Host Frequency set to 25000 KHz
11:38:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:35: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 5721 ] 
11:38:35: [GO18_globalSetVolt]### Host voltage value is set.
11:38:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312D50>, 0x0, False) , Command count = 5722 ] 
11:38:35: [GO18_globalSetVolt]### Host voltage value is set.
11:38:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5723 ] 
11:38:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5724 ] 
11:38:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5725 ] 
11:38:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x0627A330>) , Command count = 5726 ] 
11:38:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 5727 ] 
11:38:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:35: [ SetCardRCA(0x1, 0xD555) , Command count = 5728 ] 
11:38:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:35: Host Frequency set to 25000 KHz
11:38:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:35: ####CSD Registe 2.0 Values####
11:38:35: CSD_STRUCTURE                                 :0x1
11:38:35: Reserv1                                       :0x0
11:38:35: Time Access 1 TAAC                            :0xe
11:38:35: Time Access 2 NSAC*100                        :0x0
11:38:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:35: Card Command Classess CCC                     :0x5b5
11:38:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:35: DSR(driver stage register)  DSR_IMP           :0x0
11:38:35: Reserv2                                       :0x0
11:38:35: Device Size C_SIZE                            :0xedc8
11:38:35: Reserv3                                       :0x0
11:38:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:35: Reserv4                                       :0x0
11:38:35: Write Speed Factor R2W_FACTOR                 :0x2
11:38:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:35: FILE_FORMAT_GRP                               :0x0
11:38:35: COPY flag                                     :0x1
11:38:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:35: File_Format                                   :0x0
11:38:35: CRC                                           :0x0
11:38:35: ####CSD Registe Values####  

11:38:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:35: [GetSCRRegisterEntry] Passed
11:38:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:35: Data_Status_After Erases          : 0
11:38:35: CPRM Security Support             : No Security
11:38:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:35: Spec. Version                     : Version 3.0X
11:38:35: Extended Security Support         : Extended_Security_Not_Supported
11:38:35: Command Support                   : COMMAND_SUPPORT
11:38:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 5729 ] 
11:38:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062692D0>, <py_sfcl.CommandDataDefinition object at 0x0627D720>) , Command count = 5730 ] 
11:38:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:35: [ SetBusWidth(0x4) , Command count = 5731 ] 
11:38:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5732 ] 
11:38:36: Protected Area Size 0x28000
11:38:36: Bus Width           2
11:38:36: Secure Mode         0
11:38:36: Speed  Class        4
11:38:36: Perf Move           0
11:38:36: Au Size             9
11:38:36: Erase Size          15
11:38:36: Erase Timeout       1
11:38:36: Erase offset        1
11:38:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5733 ] 
11:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:36: Host Frequency set to 100000 KHz
11:38:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:36: ####CSD Registe 2.0 Values####
11:38:36: CSD_STRUCTURE                                 :0x1
11:38:36: Reserv1                                       :0x0
11:38:36: Time Access 1 TAAC                            :0xe
11:38:36: Time Access 2 NSAC*100                        :0x0
11:38:36: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:36: Card Command Classess CCC                     :0x5b5
11:38:36: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:36: DSR(driver stage register)  DSR_IMP           :0x0
11:38:36: Reserv2                                       :0x0
11:38:36: Device Size C_SIZE                            :0xedc8
11:38:36: Reserv3                                       :0x0
11:38:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:36: Reserv4                                       :0x0
11:38:36: Write Speed Factor R2W_FACTOR                 :0x2
11:38:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:36: FILE_FORMAT_GRP                               :0x0
11:38:36: COPY flag                                     :0x1
11:38:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:36: File_Format                                   :0x0
11:38:36: CRC                                           :0x0
11:38:37: ####CSD Registe Values####  

11:38:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 5734 ] 
11:38:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A750>, <py_sfcl.CommandDataDefinition object at 0x06216A20>) , Command count = 5735 ] 
11:38:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06280150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06216570>, <None>, <py_sfcl.Command23 object at 0x0627DC30>) , Command count = 5736 ] 
11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x062731B0>, <None>, <py_sfcl.Command23 object at 0x062683F0>) , Command count = 5737 ] 
11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DF60>, <py_sfcl.PySEnhancedCmdData object at 0x0627D330>, <None>, <py_sfcl.Command23 object at 0x0626D6C0>) , Command count = 5738 ] 
11:38:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:38: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:40: Host Frequency set to 25000 KHz
11:38:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:40: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 5739 ] 
11:38:40: [GO18_globalSetVolt]### Host voltage value is set.
11:38:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D060>, 0x0, False) , Command count = 5740 ] 
11:38:40: [GO18_globalSetVolt]### Host voltage value is set.
11:38:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5741 ] 
11:38:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5742 ] 
11:38:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5743 ] 
11:38:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 5744 ] 
11:38:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x06268F90>) , Command count = 5745 ] 
11:38:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:40: [ SetCardRCA(0x1, 0xD555) , Command count = 5746 ] 
11:38:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:40: Host Frequency set to 25000 KHz
11:38:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:40: ####CSD Registe 2.0 Values####
11:38:40: CSD_STRUCTURE                                 :0x1
11:38:40: Reserv1                                       :0x0
11:38:40: Time Access 1 TAAC                            :0xe
11:38:40: Time Access 2 NSAC*100                        :0x0
11:38:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:40: Card Command Classess CCC                     :0x5b5
11:38:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:40: DSR(driver stage register)  DSR_IMP           :0x0
11:38:40: Reserv2                                       :0x0
11:38:40: Device Size C_SIZE                            :0xedc8
11:38:40: Reserv3                                       :0x0
11:38:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:40: Reserv4                                       :0x0
11:38:40: Write Speed Factor R2W_FACTOR                 :0x2
11:38:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:40: FILE_FORMAT_GRP                               :0x0
11:38:40: COPY flag                                     :0x1
11:38:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:40: File_Format                                   :0x0
11:38:40: CRC                                           :0x0
11:38:40: ####CSD Registe Values####  

11:38:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:40: [GetSCRRegisterEntry] Passed
11:38:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:40: Data_Status_After Erases          : 0
11:38:40: CPRM Security Support             : No Security
11:38:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:40: Spec. Version                     : Version 3.0X
11:38:40: Extended Security Support         : Extended_Security_Not_Supported
11:38:40: Command Support                   : COMMAND_SUPPORT
11:38:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 5747 ] 
11:38:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269210>, <py_sfcl.CommandDataDefinition object at 0x0627AAE0>) , Command count = 5748 ] 
11:38:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:40: [ SetBusWidth(0x4) , Command count = 5749 ] 
11:38:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5750 ] 
11:38:40: Protected Area Size 0x28000
11:38:40: Bus Width           2
11:38:40: Secure Mode         0
11:38:40: Speed  Class        4
11:38:40: Perf Move           0
11:38:40: Au Size             9
11:38:40: Erase Size          15
11:38:40: Erase Timeout       1
11:38:40: Erase offset        1
11:38:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5751 ] 
11:38:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:40: Host Frequency set to 100000 KHz
11:38:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:41: ####CSD Registe 2.0 Values####
11:38:41: CSD_STRUCTURE                                 :0x1
11:38:41: Reserv1                                       :0x0
11:38:41: Time Access 1 TAAC                            :0xe
11:38:41: Time Access 2 NSAC*100                        :0x0
11:38:41: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:41: Card Command Classess CCC                     :0x5b5
11:38:41: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:41: DSR(driver stage register)  DSR_IMP           :0x0
11:38:41: Reserv2                                       :0x0
11:38:41: Device Size C_SIZE                            :0xedc8
11:38:41: Reserv3                                       :0x0
11:38:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:41: Reserv4                                       :0x0
11:38:41: Write Speed Factor R2W_FACTOR                 :0x2
11:38:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:41: FILE_FORMAT_GRP                               :0x0
11:38:41: COPY flag                                     :0x1
11:38:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:41: File_Format                                   :0x0
11:38:41: CRC                                           :0x0
11:38:41: ####CSD Registe Values####  

11:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 5752 ] 
11:38:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062802D0>, <py_sfcl.CommandDataDefinition object at 0x062694B0>) , Command count = 5753 ] 
11:38:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273150>, <py_sfcl.PySEnhancedCmdData object at 0x06268F30>, <None>, <py_sfcl.Command23 object at 0x0627DF00>) , Command count = 5754 ] 
11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273E10>, <py_sfcl.PySEnhancedCmdData object at 0x0626D510>, <None>, <py_sfcl.Command23 object at 0x0627D390>) , Command count = 5755 ] 
11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269150>, <py_sfcl.PySEnhancedCmdData object at 0x0626D450>, <None>, <py_sfcl.Command23 object at 0x0626DD80>) , Command count = 5756 ] 
11:38:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:45: Host Frequency set to 25000 KHz
11:38:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:45: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 5757 ] 
11:38:45: [GO18_globalSetVolt]### Host voltage value is set.
11:38:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F60>, 0x0, False) , Command count = 5758 ] 
11:38:45: [GO18_globalSetVolt]### Host voltage value is set.
11:38:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5759 ] 
11:38:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5760 ] 
11:38:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5761 ] 
11:38:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 5762 ] 
11:38:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x062694B0>) , Command count = 5763 ] 
11:38:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:45: [ SetCardRCA(0x1, 0xD555) , Command count = 5764 ] 
11:38:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:45: Host Frequency set to 25000 KHz
11:38:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:45: ####CSD Registe 2.0 Values####
11:38:45: CSD_STRUCTURE                                 :0x1
11:38:45: Reserv1                                       :0x0
11:38:45: Time Access 1 TAAC                            :0xe
11:38:45: Time Access 2 NSAC*100                        :0x0
11:38:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:45: Card Command Classess CCC                     :0x5b5
11:38:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:45: DSR(driver stage register)  DSR_IMP           :0x0
11:38:45: Reserv2                                       :0x0
11:38:45: Device Size C_SIZE                            :0xedc8
11:38:45: Reserv3                                       :0x0
11:38:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:45: Reserv4                                       :0x0
11:38:45: Write Speed Factor R2W_FACTOR                 :0x2
11:38:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:45: FILE_FORMAT_GRP                               :0x0
11:38:45: COPY flag                                     :0x1
11:38:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:45: File_Format                                   :0x0
11:38:45: CRC                                           :0x0
11:38:45: ####CSD Registe Values####  

11:38:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:45: [GetSCRRegisterEntry] Passed
11:38:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:45: Data_Status_After Erases          : 0
11:38:45: CPRM Security Support             : No Security
11:38:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:45: Spec. Version                     : Version 3.0X
11:38:45: Extended Security Support         : Extended_Security_Not_Supported
11:38:45: Command Support                   : COMMAND_SUPPORT
11:38:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 5765 ] 
11:38:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627ADB0>, <py_sfcl.CommandDataDefinition object at 0x06312C30>) , Command count = 5766 ] 
11:38:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:45: [ SetBusWidth(0x4) , Command count = 5767 ] 
11:38:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5768 ] 
11:38:45: Protected Area Size 0x28000
11:38:45: Bus Width           2
11:38:45: Secure Mode         0
11:38:45: Speed  Class        4
11:38:45: Perf Move           0
11:38:45: Au Size             9
11:38:45: Erase Size          15
11:38:45: Erase Timeout       1
11:38:45: Erase offset        1
11:38:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5769 ] 
11:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:45: Host Frequency set to 100000 KHz
11:38:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:46: ####CSD Registe 2.0 Values####
11:38:46: CSD_STRUCTURE                                 :0x1
11:38:46: Reserv1                                       :0x0
11:38:46: Time Access 1 TAAC                            :0xe
11:38:46: Time Access 2 NSAC*100                        :0x0
11:38:46: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:46: Card Command Classess CCC                     :0x5b5
11:38:46: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:46: DSR(driver stage register)  DSR_IMP           :0x0
11:38:46: Reserv2                                       :0x0
11:38:46: Device Size C_SIZE                            :0xedc8
11:38:46: Reserv3                                       :0x0
11:38:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:46: Reserv4                                       :0x0
11:38:46: Write Speed Factor R2W_FACTOR                 :0x2
11:38:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:46: FILE_FORMAT_GRP                               :0x0
11:38:46: COPY flag                                     :0x1
11:38:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:46: File_Format                                   :0x0
11:38:46: CRC                                           :0x0
11:38:46: ####CSD Registe Values####  

11:38:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 5770 ] 
11:38:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216E70>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 5771 ] 
11:38:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D480>, <py_sfcl.PySEnhancedCmdData object at 0x06269600>, <None>, <py_sfcl.Command23 object at 0x0627A9F0>) , Command count = 5772 ] 
11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x062691E0>) , Command count = 5773 ] 
11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269F60>, <py_sfcl.PySEnhancedCmdData object at 0x062693F0>, <None>, <py_sfcl.Command23 object at 0x06269AE0>) , Command count = 5774 ] 
11:38:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:49: Host Frequency set to 25000 KHz
11:38:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 5775 ] 
11:38:49: [GO18_globalSetVolt]### Host voltage value is set.
11:38:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268480>, 0x0, False) , Command count = 5776 ] 
11:38:50: [GO18_globalSetVolt]### Host voltage value is set.
11:38:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5777 ] 
11:38:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5778 ] 
11:38:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5779 ] 
11:38:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 5780 ] 
11:38:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268030>, <py_sfcl.CommandDataDefinition object at 0x06268420>) , Command count = 5781 ] 
11:38:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:50: [ SetCardRCA(0x1, 0xD555) , Command count = 5782 ] 
11:38:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:50: Host Frequency set to 25000 KHz
11:38:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:50: ####CSD Registe 2.0 Values####
11:38:50: CSD_STRUCTURE                                 :0x1
11:38:50: Reserv1                                       :0x0
11:38:50: Time Access 1 TAAC                            :0xe
11:38:50: Time Access 2 NSAC*100                        :0x0
11:38:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:50: Card Command Classess CCC                     :0x5b5
11:38:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:50: DSR(driver stage register)  DSR_IMP           :0x0
11:38:50: Reserv2                                       :0x0
11:38:50: Device Size C_SIZE                            :0xedc8
11:38:50: Reserv3                                       :0x0
11:38:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:50: Reserv4                                       :0x0
11:38:50: Write Speed Factor R2W_FACTOR                 :0x2
11:38:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:50: FILE_FORMAT_GRP                               :0x0
11:38:50: COPY flag                                     :0x1
11:38:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:50: File_Format                                   :0x0
11:38:50: CRC                                           :0x0
11:38:50: ####CSD Registe Values####  

11:38:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:50: [GetSCRRegisterEntry] Passed
11:38:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:50: Data_Status_After Erases          : 0
11:38:50: CPRM Security Support             : No Security
11:38:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:50: Spec. Version                     : Version 3.0X
11:38:50: Extended Security Support         : Extended_Security_Not_Supported
11:38:50: Command Support                   : COMMAND_SUPPORT
11:38:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689C0>, <py_sfcl.CommandDataDefinition object at 0x0626DF90>) , Command count = 5783 ] 
11:38:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A930>, <py_sfcl.CommandDataDefinition object at 0x06269510>) , Command count = 5784 ] 
11:38:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:50: [ SetBusWidth(0x4) , Command count = 5785 ] 
11:38:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5786 ] 
11:38:50: Protected Area Size 0x28000
11:38:50: Bus Width           2
11:38:50: Secure Mode         0
11:38:50: Speed  Class        4
11:38:50: Perf Move           0
11:38:50: Au Size             9
11:38:50: Erase Size          15
11:38:50: Erase Timeout       1
11:38:50: Erase offset        1
11:38:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5787 ] 
11:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:50: Host Frequency set to 100000 KHz
11:38:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:51: ####CSD Registe 2.0 Values####
11:38:51: CSD_STRUCTURE                                 :0x1
11:38:51: Reserv1                                       :0x0
11:38:51: Time Access 1 TAAC                            :0xe
11:38:51: Time Access 2 NSAC*100                        :0x0
11:38:51: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:51: Card Command Classess CCC                     :0x5b5
11:38:51: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:51: DSR(driver stage register)  DSR_IMP           :0x0
11:38:51: Reserv2                                       :0x0
11:38:51: Device Size C_SIZE                            :0xedc8
11:38:51: Reserv3                                       :0x0
11:38:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:51: Reserv4                                       :0x0
11:38:51: Write Speed Factor R2W_FACTOR                 :0x2
11:38:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:51: FILE_FORMAT_GRP                               :0x0
11:38:51: COPY flag                                     :0x1
11:38:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:51: File_Format                                   :0x0
11:38:51: CRC                                           :0x0
11:38:51: ####CSD Registe Values####  

11:38:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F00>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 5788 ] 
11:38:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D660>, <py_sfcl.CommandDataDefinition object at 0x0627DFC0>) , Command count = 5789 ] 
11:38:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062801E0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D570>, <None>, <py_sfcl.Command23 object at 0x06273630>) , Command count = 5790 ] 
11:38:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
11:38:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D4B0>, <None>, <py_sfcl.Command23 object at 0x06269E70>) , Command count = 5791 ] 
11:38:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276B40>, <py_sfcl.PySEnhancedCmdData object at 0x06269BD0>, <None>, <py_sfcl.Command23 object at 0x06268900>) , Command count = 5792 ] 
11:38:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:54: Host Frequency set to 25000 KHz
11:38:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276D20>, 0x0, True) , Command count = 5793 ] 
11:38:54: [GO18_globalSetVolt]### Host voltage value is set.
11:38:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D9C0>, 0x0, False) , Command count = 5794 ] 
11:38:54: [GO18_globalSetVolt]### Host voltage value is set.
11:38:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5795 ] 
11:38:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:38:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5796 ] 
11:38:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:38:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:38:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:38:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:38:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5797 ] 
11:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:38:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 5798 ] 
11:38:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 5799 ] 
11:38:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:38:55: [ SetCardRCA(0x1, 0xD555) , Command count = 5800 ] 
11:38:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:38:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:55: Host Frequency set to 25000 KHz
11:38:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:55: ####CSD Registe 2.0 Values####
11:38:55: CSD_STRUCTURE                                 :0x1
11:38:55: Reserv1                                       :0x0
11:38:55: Time Access 1 TAAC                            :0xe
11:38:55: Time Access 2 NSAC*100                        :0x0
11:38:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:38:55: Card Command Classess CCC                     :0x5b5
11:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:55: DSR(driver stage register)  DSR_IMP           :0x0
11:38:55: Reserv2                                       :0x0
11:38:55: Device Size C_SIZE                            :0xedc8
11:38:55: Reserv3                                       :0x0
11:38:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:55: Reserv4                                       :0x0
11:38:55: Write Speed Factor R2W_FACTOR                 :0x2
11:38:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:55: FILE_FORMAT_GRP                               :0x0
11:38:55: COPY flag                                     :0x1
11:38:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:55: File_Format                                   :0x0
11:38:55: CRC                                           :0x0
11:38:55: ####CSD Registe Values####  

11:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:38:55: [GetSCRRegisterEntry] Passed
11:38:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:38:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:38:55: Data_Status_After Erases          : 0
11:38:55: CPRM Security Support             : No Security
11:38:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:38:55: Spec. Version                     : Version 3.0X
11:38:55: Extended Security Support         : Extended_Security_Not_Supported
11:38:55: Command Support                   : COMMAND_SUPPORT
11:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 5801 ] 
11:38:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268BA0>, <py_sfcl.CommandDataDefinition object at 0x06269E40>) , Command count = 5802 ] 
11:38:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:38:55: [ SetBusWidth(0x4) , Command count = 5803 ] 
11:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:38:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5804 ] 
11:38:55: Protected Area Size 0x28000
11:38:55: Bus Width           2
11:38:55: Secure Mode         0
11:38:55: Speed  Class        4
11:38:55: Perf Move           0
11:38:55: Au Size             9
11:38:55: Erase Size          15
11:38:55: Erase Timeout       1
11:38:55: Erase offset        1
11:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:38:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:38:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5805 ] 
11:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:38:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:38:55: Host Frequency set to 100000 KHz
11:38:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:38:55: ####CSD Registe 2.0 Values####
11:38:55: CSD_STRUCTURE                                 :0x1
11:38:55: Reserv1                                       :0x0
11:38:55: Time Access 1 TAAC                            :0xe
11:38:55: Time Access 2 NSAC*100                        :0x0
11:38:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:38:55: Card Command Classess CCC                     :0x5b5
11:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:38:55: DSR(driver stage register)  DSR_IMP           :0x0
11:38:55: Reserv2                                       :0x0
11:38:55: Device Size C_SIZE                            :0xedc8
11:38:55: Reserv3                                       :0x0
11:38:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:38:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:38:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:38:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:38:56: Reserv4                                       :0x0
11:38:56: Write Speed Factor R2W_FACTOR                 :0x2
11:38:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:38:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:38:56: FILE_FORMAT_GRP                               :0x0
11:38:56: COPY flag                                     :0x1
11:38:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:38:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:38:56: File_Format                                   :0x0
11:38:56: CRC                                           :0x0
11:38:56: ####CSD Registe Values####  

11:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A870>, <py_sfcl.CommandDataDefinition object at 0x06273A50>) , Command count = 5806 ] 
11:38:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BD0>, <py_sfcl.CommandDataDefinition object at 0x0627DA50>) , Command count = 5807 ] 
11:38:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:38:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:38:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273570>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062732D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D7B0>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 5808 ] 
11:38:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
11:38:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:38:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DED0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC00>, <None>, <py_sfcl.Command23 object at 0x0627A0C0>) , Command count = 5809 ] 
11:38:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:38:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:38:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062684E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DCF0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D360>, <None>, <py_sfcl.Command23 object at 0x0626D690>) , Command count = 5810 ] 
11:38:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:38:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:38:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:38:59: Host Frequency set to 25000 KHz
11:38:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:38:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:38:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:38:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 5811 ] 
11:38:59: [GO18_globalSetVolt]### Host voltage value is set.
11:38:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:38:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8D0>, 0x0, False) , Command count = 5812 ] 
11:38:59: [GO18_globalSetVolt]### Host voltage value is set.
11:38:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5813 ] 
11:38:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5814 ] 
11:39:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5815 ] 
11:39:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276930>, <py_sfcl.CommandDataDefinition object at 0x06273450>) , Command count = 5816 ] 
11:39:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273E40>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 5817 ] 
11:39:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:00: [ SetCardRCA(0x1, 0xD555) , Command count = 5818 ] 
11:39:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:00: Host Frequency set to 25000 KHz
11:39:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:00: ####CSD Registe 2.0 Values####
11:39:00: CSD_STRUCTURE                                 :0x1
11:39:00: Reserv1                                       :0x0
11:39:00: Time Access 1 TAAC                            :0xe
11:39:00: Time Access 2 NSAC*100                        :0x0
11:39:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:00: Card Command Classess CCC                     :0x5b5
11:39:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:00: DSR(driver stage register)  DSR_IMP           :0x0
11:39:00: Reserv2                                       :0x0
11:39:00: Device Size C_SIZE                            :0xedc8
11:39:00: Reserv3                                       :0x0
11:39:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:00: Reserv4                                       :0x0
11:39:00: Write Speed Factor R2W_FACTOR                 :0x2
11:39:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:00: FILE_FORMAT_GRP                               :0x0
11:39:00: COPY flag                                     :0x1
11:39:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:00: File_Format                                   :0x0
11:39:00: CRC                                           :0x0
11:39:00: ####CSD Registe Values####  

11:39:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:00: [GetSCRRegisterEntry] Passed
11:39:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:00: Data_Status_After Erases          : 0
11:39:00: CPRM Security Support             : No Security
11:39:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:00: Spec. Version                     : Version 3.0X
11:39:00: Extended Security Support         : Extended_Security_Not_Supported
11:39:00: Command Support                   : COMMAND_SUPPORT
11:39:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062732A0>, <py_sfcl.CommandDataDefinition object at 0x06273420>) , Command count = 5819 ] 
11:39:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A50>, <py_sfcl.CommandDataDefinition object at 0x06276630>) , Command count = 5820 ] 
11:39:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:00: [ SetBusWidth(0x4) , Command count = 5821 ] 
11:39:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5822 ] 
11:39:00: Protected Area Size 0x28000
11:39:00: Bus Width           2
11:39:00: Secure Mode         0
11:39:00: Speed  Class        4
11:39:00: Perf Move           0
11:39:00: Au Size             9
11:39:00: Erase Size          15
11:39:00: Erase Timeout       1
11:39:00: Erase offset        1
11:39:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5823 ] 
11:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:00: Host Frequency set to 100000 KHz
11:39:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:00: ####CSD Registe 2.0 Values####
11:39:00: CSD_STRUCTURE                                 :0x1
11:39:00: Reserv1                                       :0x0
11:39:00: Time Access 1 TAAC                            :0xe
11:39:00: Time Access 2 NSAC*100                        :0x0
11:39:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:00: Card Command Classess CCC                     :0x5b5
11:39:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:00: DSR(driver stage register)  DSR_IMP           :0x0
11:39:00: Reserv2                                       :0x0
11:39:00: Device Size C_SIZE                            :0xedc8
11:39:00: Reserv3                                       :0x0
11:39:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:01: Reserv4                                       :0x0
11:39:01: Write Speed Factor R2W_FACTOR                 :0x2
11:39:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:01: FILE_FORMAT_GRP                               :0x0
11:39:01: COPY flag                                     :0x1
11:39:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:01: File_Format                                   :0x0
11:39:01: CRC                                           :0x0
11:39:01: ####CSD Registe Values####  

11:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627DAB0>) , Command count = 5824 ] 
11:39:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DAE0>, <py_sfcl.CommandDataDefinition object at 0x0626DA20>) , Command count = 5825 ] 
11:39:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A210>, <None>, <py_sfcl.Command23 object at 0x0626DBD0>) , Command count = 5826 ] 
11:39:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
11:39:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x0626DDB0>, <None>, <py_sfcl.Command23 object at 0x062762A0>) , Command count = 5827 ] 
11:39:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D390>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBA0>, <None>, <py_sfcl.Command23 object at 0x0626DD50>) , Command count = 5828 ] 
11:39:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:04: Host Frequency set to 25000 KHz
11:39:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 5829 ] 
11:39:04: [GO18_globalSetVolt]### Host voltage value is set.
11:39:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276420>, 0x0, False) , Command count = 5830 ] 
11:39:04: [GO18_globalSetVolt]### Host voltage value is set.
11:39:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5831 ] 
11:39:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5832 ] 
11:39:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5833 ] 
11:39:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x0627A600>) , Command count = 5834 ] 
11:39:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273390>, <py_sfcl.CommandDataDefinition object at 0x0627D060>) , Command count = 5835 ] 
11:39:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:05: [ SetCardRCA(0x1, 0xD555) , Command count = 5836 ] 
11:39:05: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:05: Host Frequency set to 25000 KHz
11:39:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:05: ####CSD Registe 2.0 Values####
11:39:05: CSD_STRUCTURE                                 :0x1
11:39:05: Reserv1                                       :0x0
11:39:05: Time Access 1 TAAC                            :0xe
11:39:05: Time Access 2 NSAC*100                        :0x0
11:39:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:05: Card Command Classess CCC                     :0x5b5
11:39:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:05: DSR(driver stage register)  DSR_IMP           :0x0
11:39:05: Reserv2                                       :0x0
11:39:05: Device Size C_SIZE                            :0xedc8
11:39:05: Reserv3                                       :0x0
11:39:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:05: Reserv4                                       :0x0
11:39:05: Write Speed Factor R2W_FACTOR                 :0x2
11:39:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:05: FILE_FORMAT_GRP                               :0x0
11:39:05: COPY flag                                     :0x1
11:39:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:05: File_Format                                   :0x0
11:39:05: CRC                                           :0x0
11:39:05: ####CSD Registe Values####  

11:39:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:05: [GetSCRRegisterEntry] Passed
11:39:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:05: Data_Status_After Erases          : 0
11:39:05: CPRM Security Support             : No Security
11:39:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:05: Spec. Version                     : Version 3.0X
11:39:05: Extended Security Support         : Extended_Security_Not_Supported
11:39:05: Command Support                   : COMMAND_SUPPORT
11:39:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276060>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 5837 ] 
11:39:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D900>, <py_sfcl.CommandDataDefinition object at 0x062734E0>) , Command count = 5838 ] 
11:39:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:05: [ SetBusWidth(0x4) , Command count = 5839 ] 
11:39:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5840 ] 
11:39:05: Protected Area Size 0x28000
11:39:05: Bus Width           2
11:39:05: Secure Mode         0
11:39:05: Speed  Class        4
11:39:05: Perf Move           0
11:39:05: Au Size             9
11:39:05: Erase Size          15
11:39:05: Erase Timeout       1
11:39:05: Erase offset        1
11:39:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5841 ] 
11:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:05: Host Frequency set to 100000 KHz
11:39:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:05: ####CSD Registe 2.0 Values####
11:39:05: CSD_STRUCTURE                                 :0x1
11:39:05: Reserv1                                       :0x0
11:39:05: Time Access 1 TAAC                            :0xe
11:39:05: Time Access 2 NSAC*100                        :0x0
11:39:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:05: Card Command Classess CCC                     :0x5b5
11:39:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:05: DSR(driver stage register)  DSR_IMP           :0x0
11:39:05: Reserv2                                       :0x0
11:39:05: Device Size C_SIZE                            :0xedc8
11:39:05: Reserv3                                       :0x0
11:39:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:06: Reserv4                                       :0x0
11:39:06: Write Speed Factor R2W_FACTOR                 :0x2
11:39:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:06: FILE_FORMAT_GRP                               :0x0
11:39:06: COPY flag                                     :0x1
11:39:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:06: File_Format                                   :0x0
11:39:06: CRC                                           :0x0
11:39:06: ####CSD Registe Values####  

11:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 5842 ] 
11:39:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269DE0>, <py_sfcl.CommandDataDefinition object at 0x06273C60>) , Command count = 5843 ] 
11:39:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x0627A6F0>) , Command count = 5844 ] 
11:39:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
11:39:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062730C0>, <py_sfcl.PySEnhancedCmdData object at 0x06276DB0>, <None>, <py_sfcl.Command23 object at 0x06273330>) , Command count = 5845 ] 
11:39:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062731E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D660>, <py_sfcl.PySEnhancedCmdData object at 0x0626D090>, <None>, <py_sfcl.Command23 object at 0x06276510>) , Command count = 5846 ] 
11:39:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:09: Host Frequency set to 25000 KHz
11:39:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 5847 ] 
11:39:09: [GO18_globalSetVolt]### Host voltage value is set.
11:39:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269B40>, 0x0, False) , Command count = 5848 ] 
11:39:09: [GO18_globalSetVolt]### Host voltage value is set.
11:39:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5849 ] 
11:39:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5850 ] 
11:39:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5851 ] 
11:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 5852 ] 
11:39:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276F00>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 5853 ] 
11:39:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:09: [ SetCardRCA(0x1, 0xD555) , Command count = 5854 ] 
11:39:10: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:10: Host Frequency set to 25000 KHz
11:39:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:10: ####CSD Registe 2.0 Values####
11:39:10: CSD_STRUCTURE                                 :0x1
11:39:10: Reserv1                                       :0x0
11:39:10: Time Access 1 TAAC                            :0xe
11:39:10: Time Access 2 NSAC*100                        :0x0
11:39:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:10: Card Command Classess CCC                     :0x5b5
11:39:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:10: DSR(driver stage register)  DSR_IMP           :0x0
11:39:10: Reserv2                                       :0x0
11:39:10: Device Size C_SIZE                            :0xedc8
11:39:10: Reserv3                                       :0x0
11:39:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:10: Reserv4                                       :0x0
11:39:10: Write Speed Factor R2W_FACTOR                 :0x2
11:39:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:10: FILE_FORMAT_GRP                               :0x0
11:39:10: COPY flag                                     :0x1
11:39:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:10: File_Format                                   :0x0
11:39:10: CRC                                           :0x0
11:39:10: ####CSD Registe Values####  

11:39:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:10: [GetSCRRegisterEntry] Passed
11:39:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:10: Data_Status_After Erases          : 0
11:39:10: CPRM Security Support             : No Security
11:39:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:10: Spec. Version                     : Version 3.0X
11:39:10: Extended Security Support         : Extended_Security_Not_Supported
11:39:10: Command Support                   : COMMAND_SUPPORT
11:39:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 5855 ] 
11:39:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273030>, <py_sfcl.CommandDataDefinition object at 0x06276DE0>) , Command count = 5856 ] 
11:39:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:10: [ SetBusWidth(0x4) , Command count = 5857 ] 
11:39:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5858 ] 
11:39:10: Protected Area Size 0x28000
11:39:10: Bus Width           2
11:39:10: Secure Mode         0
11:39:10: Speed  Class        4
11:39:10: Perf Move           0
11:39:10: Au Size             9
11:39:10: Erase Size          15
11:39:10: Erase Timeout       1
11:39:10: Erase offset        1
11:39:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5859 ] 
11:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:10: Host Frequency set to 100000 KHz
11:39:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:10: ####CSD Registe 2.0 Values####
11:39:10: CSD_STRUCTURE                                 :0x1
11:39:10: Reserv1                                       :0x0
11:39:10: Time Access 1 TAAC                            :0xe
11:39:10: Time Access 2 NSAC*100                        :0x0
11:39:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:10: Card Command Classess CCC                     :0x5b5
11:39:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:10: DSR(driver stage register)  DSR_IMP           :0x0
11:39:10: Reserv2                                       :0x0
11:39:10: Device Size C_SIZE                            :0xedc8
11:39:10: Reserv3                                       :0x0
11:39:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:11: Reserv4                                       :0x0
11:39:11: Write Speed Factor R2W_FACTOR                 :0x2
11:39:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:11: FILE_FORMAT_GRP                               :0x0
11:39:11: COPY flag                                     :0x1
11:39:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:11: File_Format                                   :0x0
11:39:11: CRC                                           :0x0
11:39:11: ####CSD Registe Values####  

11:39:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 5860 ] 
11:39:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DFC0>, <py_sfcl.CommandDataDefinition object at 0x0627AE40>) , Command count = 5861 ] 
11:39:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x062765A0>, <None>, <py_sfcl.Command23 object at 0x0626DF00>) , Command count = 5862 ] 
11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x06276C90>) , Command count = 5863 ] 
11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062760F0>, <py_sfcl.PySEnhancedCmdData object at 0x06324660>, <None>, <py_sfcl.Command23 object at 0x06276C00>) , Command count = 5864 ] 
11:39:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:14: Host Frequency set to 25000 KHz
11:39:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:14: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 5865 ] 
11:39:14: [GO18_globalSetVolt]### Host voltage value is set.
11:39:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x062699F0>, 0x0, False) , Command count = 5866 ] 
11:39:14: [GO18_globalSetVolt]### Host voltage value is set.
11:39:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5867 ] 
11:39:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5868 ] 
11:39:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5869 ] 
11:39:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276210>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 5870 ] 
11:39:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DF30>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 5871 ] 
11:39:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:14: [ SetCardRCA(0x1, 0xD555) , Command count = 5872 ] 
11:39:14: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:14: Host Frequency set to 25000 KHz
11:39:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:14: ####CSD Registe 2.0 Values####
11:39:14: CSD_STRUCTURE                                 :0x1
11:39:14: Reserv1                                       :0x0
11:39:14: Time Access 1 TAAC                            :0xe
11:39:14: Time Access 2 NSAC*100                        :0x0
11:39:14: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:14: Card Command Classess CCC                     :0x5b5
11:39:14: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:14: DSR(driver stage register)  DSR_IMP           :0x0
11:39:14: Reserv2                                       :0x0
11:39:14: Device Size C_SIZE                            :0xedc8
11:39:14: Reserv3                                       :0x0
11:39:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:14: Reserv4                                       :0x0
11:39:14: Write Speed Factor R2W_FACTOR                 :0x2
11:39:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:14: FILE_FORMAT_GRP                               :0x0
11:39:14: COPY flag                                     :0x1
11:39:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:14: File_Format                                   :0x0
11:39:14: CRC                                           :0x0
11:39:14: ####CSD Registe Values####  

11:39:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:14: [GetSCRRegisterEntry] Passed
11:39:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:14: Data_Status_After Erases          : 0
11:39:14: CPRM Security Support             : No Security
11:39:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:14: Spec. Version                     : Version 3.0X
11:39:14: Extended Security Support         : Extended_Security_Not_Supported
11:39:14: Command Support                   : COMMAND_SUPPORT
11:39:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 5873 ] 
11:39:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A120>, <py_sfcl.CommandDataDefinition object at 0x0627A7E0>) , Command count = 5874 ] 
11:39:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:14: [ SetBusWidth(0x4) , Command count = 5875 ] 
11:39:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5876 ] 
11:39:14: Protected Area Size 0x28000
11:39:14: Bus Width           2
11:39:14: Secure Mode         0
11:39:14: Speed  Class        4
11:39:14: Perf Move           0
11:39:14: Au Size             9
11:39:14: Erase Size          15
11:39:14: Erase Timeout       1
11:39:14: Erase offset        1
11:39:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5877 ] 
11:39:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:15: Host Frequency set to 100000 KHz
11:39:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:15: ####CSD Registe 2.0 Values####
11:39:15: CSD_STRUCTURE                                 :0x1
11:39:15: Reserv1                                       :0x0
11:39:15: Time Access 1 TAAC                            :0xe
11:39:15: Time Access 2 NSAC*100                        :0x0
11:39:15: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:15: Card Command Classess CCC                     :0x5b5
11:39:15: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:15: DSR(driver stage register)  DSR_IMP           :0x0
11:39:15: Reserv2                                       :0x0
11:39:15: Device Size C_SIZE                            :0xedc8
11:39:15: Reserv3                                       :0x0
11:39:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:15: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:15: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:15: Reserv4                                       :0x0
11:39:15: Write Speed Factor R2W_FACTOR                 :0x2
11:39:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:15: FILE_FORMAT_GRP                               :0x0
11:39:15: COPY flag                                     :0x1
11:39:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:15: File_Format                                   :0x0
11:39:15: CRC                                           :0x0
11:39:15: ####CSD Registe Values####  

11:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06312A80>) , Command count = 5878 ] 
11:39:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276810>, <py_sfcl.CommandDataDefinition object at 0x06312960>) , Command count = 5879 ] 
11:39:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062762D0>, <py_sfcl.PySEnhancedCmdData object at 0x06276030>, <None>, <py_sfcl.Command23 object at 0x06273900>) , Command count = 5880 ] 
11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D780>, <None>, <py_sfcl.Command23 object at 0x06312CF0>) , Command count = 5881 ] 
11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324690>, <py_sfcl.PySEnhancedCmdData object at 0x06324900>, <None>, <py_sfcl.Command23 object at 0x0627A270>) , Command count = 5882 ] 
11:39:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:17: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:19: Host Frequency set to 25000 KHz
11:39:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:19: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 5883 ] 
11:39:19: [GO18_globalSetVolt]### Host voltage value is set.
11:39:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627A2D0>, 0x0, False) , Command count = 5884 ] 
11:39:19: [GO18_globalSetVolt]### Host voltage value is set.
11:39:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5885 ] 
11:39:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5886 ] 
11:39:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5887 ] 
11:39:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 5888 ] 
11:39:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF270>, <py_sfcl.CommandDataDefinition object at 0x06276810>) , Command count = 5889 ] 
11:39:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:19: [ SetCardRCA(0x1, 0xD555) , Command count = 5890 ] 
11:39:19: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:19: Host Frequency set to 25000 KHz
11:39:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:19: ####CSD Registe 2.0 Values####
11:39:19: CSD_STRUCTURE                                 :0x1
11:39:19: Reserv1                                       :0x0
11:39:19: Time Access 1 TAAC                            :0xe
11:39:19: Time Access 2 NSAC*100                        :0x0
11:39:19: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:19: Card Command Classess CCC                     :0x5b5
11:39:19: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:19: DSR(driver stage register)  DSR_IMP           :0x0
11:39:19: Reserv2                                       :0x0
11:39:19: Device Size C_SIZE                            :0xedc8
11:39:19: Reserv3                                       :0x0
11:39:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:19: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:19: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:19: Reserv4                                       :0x0
11:39:19: Write Speed Factor R2W_FACTOR                 :0x2
11:39:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:19: FILE_FORMAT_GRP                               :0x0
11:39:19: COPY flag                                     :0x1
11:39:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:19: File_Format                                   :0x0
11:39:19: CRC                                           :0x0
11:39:19: ####CSD Registe Values####  

11:39:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:19: [GetSCRRegisterEntry] Passed
11:39:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:19: Data_Status_After Erases          : 0
11:39:19: CPRM Security Support             : No Security
11:39:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:19: Spec. Version                     : Version 3.0X
11:39:19: Extended Security Support         : Extended_Security_Not_Supported
11:39:19: Command Support                   : COMMAND_SUPPORT
11:39:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 5891 ] 
11:39:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312BD0>, <py_sfcl.CommandDataDefinition object at 0x06276EA0>) , Command count = 5892 ] 
11:39:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:19: [ SetBusWidth(0x4) , Command count = 5893 ] 
11:39:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5894 ] 
11:39:19: Protected Area Size 0x28000
11:39:19: Bus Width           2
11:39:19: Secure Mode         0
11:39:19: Speed  Class        4
11:39:19: Perf Move           0
11:39:19: Au Size             9
11:39:19: Erase Size          15
11:39:19: Erase Timeout       1
11:39:19: Erase offset        1
11:39:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5895 ] 
11:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:19: Host Frequency set to 100000 KHz
11:39:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:20: ####CSD Registe 2.0 Values####
11:39:20: CSD_STRUCTURE                                 :0x1
11:39:20: Reserv1                                       :0x0
11:39:20: Time Access 1 TAAC                            :0xe
11:39:20: Time Access 2 NSAC*100                        :0x0
11:39:20: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:20: Card Command Classess CCC                     :0x5b5
11:39:20: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:20: DSR(driver stage register)  DSR_IMP           :0x0
11:39:20: Reserv2                                       :0x0
11:39:20: Device Size C_SIZE                            :0xedc8
11:39:20: Reserv3                                       :0x0
11:39:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:20: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:20: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:20: Reserv4                                       :0x0
11:39:20: Write Speed Factor R2W_FACTOR                 :0x2
11:39:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:20: FILE_FORMAT_GRP                               :0x0
11:39:20: COPY flag                                     :0x1
11:39:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:20: File_Format                                   :0x0
11:39:20: CRC                                           :0x0
11:39:20: ####CSD Registe Values####  

11:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 5896 ] 
11:39:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273990>, <py_sfcl.CommandDataDefinition object at 0x0627A090>) , Command count = 5897 ] 
11:39:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x0627D150>) , Command count = 5898 ] 
11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x0627DF90>) , Command count = 5899 ] 
11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062761B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324B40>, <py_sfcl.PySEnhancedCmdData object at 0x063245A0>, <None>, <py_sfcl.Command23 object at 0x06276540>) , Command count = 5900 ] 
11:39:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:24: Host Frequency set to 25000 KHz
11:39:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CAE70>, 0x0, True) , Command count = 5901 ] 
11:39:24: [GO18_globalSetVolt]### Host voltage value is set.
11:39:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269870>, 0x0, False) , Command count = 5902 ] 
11:39:24: [GO18_globalSetVolt]### Host voltage value is set.
11:39:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5903 ] 
11:39:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5904 ] 
11:39:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5905 ] 
11:39:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AC60>, <py_sfcl.CommandDataDefinition object at 0x05401F60>) , Command count = 5906 ] 
11:39:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276780>, <py_sfcl.CommandDataDefinition object at 0x06312AB0>) , Command count = 5907 ] 
11:39:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:24: [ SetCardRCA(0x1, 0xD555) , Command count = 5908 ] 
11:39:24: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:24: Host Frequency set to 25000 KHz
11:39:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:24: ####CSD Registe 2.0 Values####
11:39:24: CSD_STRUCTURE                                 :0x1
11:39:24: Reserv1                                       :0x0
11:39:24: Time Access 1 TAAC                            :0xe
11:39:24: Time Access 2 NSAC*100                        :0x0
11:39:24: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:24: Card Command Classess CCC                     :0x5b5
11:39:24: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:24: DSR(driver stage register)  DSR_IMP           :0x0
11:39:24: Reserv2                                       :0x0
11:39:24: Device Size C_SIZE                            :0xedc8
11:39:24: Reserv3                                       :0x0
11:39:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:24: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:24: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:24: Reserv4                                       :0x0
11:39:24: Write Speed Factor R2W_FACTOR                 :0x2
11:39:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:24: FILE_FORMAT_GRP                               :0x0
11:39:24: COPY flag                                     :0x1
11:39:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:24: File_Format                                   :0x0
11:39:24: CRC                                           :0x0
11:39:24: ####CSD Registe Values####  

11:39:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:24: [GetSCRRegisterEntry] Passed
11:39:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:24: Data_Status_After Erases          : 0
11:39:24: CPRM Security Support             : No Security
11:39:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:24: Spec. Version                     : Version 3.0X
11:39:24: Extended Security Support         : Extended_Security_Not_Supported
11:39:24: Command Support                   : COMMAND_SUPPORT
11:39:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 5909 ] 
11:39:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DCC0>, <py_sfcl.CommandDataDefinition object at 0x05401E70>) , Command count = 5910 ] 
11:39:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:24: [ SetBusWidth(0x4) , Command count = 5911 ] 
11:39:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5912 ] 
11:39:24: Protected Area Size 0x28000
11:39:24: Bus Width           2
11:39:24: Secure Mode         0
11:39:24: Speed  Class        4
11:39:24: Perf Move           0
11:39:24: Au Size             9
11:39:24: Erase Size          15
11:39:24: Erase Timeout       1
11:39:24: Erase offset        1
11:39:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5913 ] 
11:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:24: Host Frequency set to 100000 KHz
11:39:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:25: ####CSD Registe 2.0 Values####
11:39:25: CSD_STRUCTURE                                 :0x1
11:39:25: Reserv1                                       :0x0
11:39:25: Time Access 1 TAAC                            :0xe
11:39:25: Time Access 2 NSAC*100                        :0x0
11:39:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:25: Card Command Classess CCC                     :0x5b5
11:39:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:25: DSR(driver stage register)  DSR_IMP           :0x0
11:39:25: Reserv2                                       :0x0
11:39:25: Device Size C_SIZE                            :0xedc8
11:39:25: Reserv3                                       :0x0
11:39:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:25: Reserv4                                       :0x0
11:39:25: Write Speed Factor R2W_FACTOR                 :0x2
11:39:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:25: FILE_FORMAT_GRP                               :0x0
11:39:25: COPY flag                                     :0x1
11:39:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:25: File_Format                                   :0x0
11:39:25: CRC                                           :0x0
11:39:25: ####CSD Registe Values####  

11:39:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 5914 ] 
11:39:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D5A0>, <py_sfcl.CommandDataDefinition object at 0x0627A5D0>) , Command count = 5915 ] 
11:39:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276BD0>, <None>, <py_sfcl.Command23 object at 0x0627A510>) , Command count = 5916 ] 
11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1021
11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DAE0>, <None>, <py_sfcl.Command23 object at 0x0627A9C0>) , Command count = 5917 ] 
11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324A50>, <py_sfcl.PySEnhancedCmdData object at 0x06324300>, <None>, <py_sfcl.Command23 object at 0x06312DB0>) , Command count = 5918 ] 
11:39:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:26: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:28: Host Frequency set to 25000 KHz
11:39:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:28: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 5919 ] 
11:39:29: [GO18_globalSetVolt]### Host voltage value is set.
11:39:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x053E2420>, 0x0, False) , Command count = 5920 ] 
11:39:29: [GO18_globalSetVolt]### Host voltage value is set.
11:39:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5921 ] 
11:39:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5922 ] 
11:39:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5923 ] 
11:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 5924 ] 
11:39:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D270>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 5925 ] 
11:39:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:29: [ SetCardRCA(0x1, 0xD555) , Command count = 5926 ] 
11:39:29: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:29: Host Frequency set to 25000 KHz
11:39:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:29: ####CSD Registe 2.0 Values####
11:39:29: CSD_STRUCTURE                                 :0x1
11:39:29: Reserv1                                       :0x0
11:39:29: Time Access 1 TAAC                            :0xe
11:39:29: Time Access 2 NSAC*100                        :0x0
11:39:29: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:29: Card Command Classess CCC                     :0x5b5
11:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:29: DSR(driver stage register)  DSR_IMP           :0x0
11:39:29: Reserv2                                       :0x0
11:39:29: Device Size C_SIZE                            :0xedc8
11:39:29: Reserv3                                       :0x0
11:39:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:29: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:29: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:29: Reserv4                                       :0x0
11:39:29: Write Speed Factor R2W_FACTOR                 :0x2
11:39:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:29: FILE_FORMAT_GRP                               :0x0
11:39:29: COPY flag                                     :0x1
11:39:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:29: File_Format                                   :0x0
11:39:29: CRC                                           :0x0
11:39:29: ####CSD Registe Values####  

11:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:29: [GetSCRRegisterEntry] Passed
11:39:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:29: Data_Status_After Erases          : 0
11:39:29: CPRM Security Support             : No Security
11:39:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:29: Spec. Version                     : Version 3.0X
11:39:29: Extended Security Support         : Extended_Security_Not_Supported
11:39:29: Command Support                   : COMMAND_SUPPORT
11:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 5927 ] 
11:39:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D270>, <py_sfcl.CommandDataDefinition object at 0x0626DB10>) , Command count = 5928 ] 
11:39:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:29: [ SetBusWidth(0x4) , Command count = 5929 ] 
11:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063246C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5930 ] 
11:39:29: Protected Area Size 0x28000
11:39:29: Bus Width           2
11:39:29: Secure Mode         0
11:39:29: Speed  Class        4
11:39:29: Perf Move           0
11:39:29: Au Size             9
11:39:29: Erase Size          15
11:39:29: Erase Timeout       1
11:39:29: Erase offset        1
11:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5931 ] 
11:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:29: Host Frequency set to 100000 KHz
11:39:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:29: ####CSD Registe 2.0 Values####
11:39:29: CSD_STRUCTURE                                 :0x1
11:39:29: Reserv1                                       :0x0
11:39:29: Time Access 1 TAAC                            :0xe
11:39:29: Time Access 2 NSAC*100                        :0x0
11:39:29: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:29: Card Command Classess CCC                     :0x5b5
11:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:29: DSR(driver stage register)  DSR_IMP           :0x0
11:39:29: Reserv2                                       :0x0
11:39:29: Device Size C_SIZE                            :0xedc8
11:39:30: Reserv3                                       :0x0
11:39:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:30: Reserv4                                       :0x0
11:39:30: Write Speed Factor R2W_FACTOR                 :0x2
11:39:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:30: FILE_FORMAT_GRP                               :0x0
11:39:30: COPY flag                                     :0x1
11:39:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:30: File_Format                                   :0x0
11:39:30: CRC                                           :0x0
11:39:30: ####CSD Registe Values####  

11:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738A0>, <py_sfcl.CommandDataDefinition object at 0x05401C60>) , Command count = 5932 ] 
11:39:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC30>, <py_sfcl.CommandDataDefinition object at 0x0627A2A0>) , Command count = 5933 ] 
11:39:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x0627A5A0>, <None>, <py_sfcl.Command23 object at 0x06269FC0>) , Command count = 5934 ] 
11:39:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
11:39:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D300>, <py_sfcl.PySEnhancedCmdData object at 0x06312A50>, <None>, <py_sfcl.Command23 object at 0x0627D120>) , Command count = 5935 ] 
11:39:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324930>, <py_sfcl.PySEnhancedCmdData object at 0x06324840>, <None>, <py_sfcl.Command23 object at 0x06312BA0>) , Command count = 5936 ] 
11:39:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:31: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:33: Host Frequency set to 25000 KHz
11:39:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:33: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 5937 ] 
11:39:33: [GO18_globalSetVolt]### Host voltage value is set.
11:39:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x053EF1B0>, 0x0, False) , Command count = 5938 ] 
11:39:33: [GO18_globalSetVolt]### Host voltage value is set.
11:39:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5939 ] 
11:39:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5940 ] 
11:39:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5941 ] 
11:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06280180>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 5942 ] 
11:39:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062690F0>, <py_sfcl.CommandDataDefinition object at 0x0626D930>) , Command count = 5943 ] 
11:39:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:34: [ SetCardRCA(0x1, 0xD555) , Command count = 5944 ] 
11:39:34: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:34: Host Frequency set to 25000 KHz
11:39:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:34: ####CSD Registe 2.0 Values####
11:39:34: CSD_STRUCTURE                                 :0x1
11:39:34: Reserv1                                       :0x0
11:39:34: Time Access 1 TAAC                            :0xe
11:39:34: Time Access 2 NSAC*100                        :0x0
11:39:34: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:34: Card Command Classess CCC                     :0x5b5
11:39:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:34: DSR(driver stage register)  DSR_IMP           :0x0
11:39:34: Reserv2                                       :0x0
11:39:34: Device Size C_SIZE                            :0xedc8
11:39:34: Reserv3                                       :0x0
11:39:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:34: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:34: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:34: Reserv4                                       :0x0
11:39:34: Write Speed Factor R2W_FACTOR                 :0x2
11:39:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:34: FILE_FORMAT_GRP                               :0x0
11:39:34: COPY flag                                     :0x1
11:39:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:34: File_Format                                   :0x0
11:39:34: CRC                                           :0x0
11:39:34: ####CSD Registe Values####  

11:39:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:34: [GetSCRRegisterEntry] Passed
11:39:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:34: Data_Status_After Erases          : 0
11:39:34: CPRM Security Support             : No Security
11:39:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:34: Spec. Version                     : Version 3.0X
11:39:34: Extended Security Support         : Extended_Security_Not_Supported
11:39:34: Command Support                   : COMMAND_SUPPORT
11:39:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 5945 ] 
11:39:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216600>, <py_sfcl.CommandDataDefinition object at 0x06312F90>) , Command count = 5946 ] 
11:39:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:34: [ SetBusWidth(0x4) , Command count = 5947 ] 
11:39:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063249F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5948 ] 
11:39:34: Protected Area Size 0x28000
11:39:34: Bus Width           2
11:39:34: Secure Mode         0
11:39:34: Speed  Class        4
11:39:34: Perf Move           0
11:39:34: Au Size             9
11:39:34: Erase Size          15
11:39:34: Erase Timeout       1
11:39:34: Erase offset        1
11:39:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5949 ] 
11:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:34: Host Frequency set to 100000 KHz
11:39:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:34: ####CSD Registe 2.0 Values####
11:39:34: CSD_STRUCTURE                                 :0x1
11:39:34: Reserv1                                       :0x0
11:39:34: Time Access 1 TAAC                            :0xe
11:39:34: Time Access 2 NSAC*100                        :0x0
11:39:34: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:34: Card Command Classess CCC                     :0x5b5
11:39:34: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:34: DSR(driver stage register)  DSR_IMP           :0x0
11:39:34: Reserv2                                       :0x0
11:39:34: Device Size C_SIZE                            :0xedc8
11:39:34: Reserv3                                       :0x0
11:39:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:35: Reserv4                                       :0x0
11:39:35: Write Speed Factor R2W_FACTOR                 :0x2
11:39:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:35: FILE_FORMAT_GRP                               :0x0
11:39:35: COPY flag                                     :0x1
11:39:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:35: File_Format                                   :0x0
11:39:35: CRC                                           :0x0
11:39:35: ####CSD Registe Values####  

11:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 5950 ] 
11:39:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276150>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 5951 ] 
11:39:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x0627A990>) , Command count = 5952 ] 
11:39:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
11:39:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062738D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268990>, <py_sfcl.PySEnhancedCmdData object at 0x06268A20>, <None>, <py_sfcl.Command23 object at 0x0627A1B0>) , Command count = 5953 ] 
11:39:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x054019F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06324B10>, <py_sfcl.PySEnhancedCmdData object at 0x06324090>, <None>, <py_sfcl.Command23 object at 0x0627DED0>) , Command count = 5954 ] 
11:39:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:36: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:38: Host Frequency set to 25000 KHz
11:39:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:38: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 5955 ] 
11:39:38: [GO18_globalSetVolt]### Host voltage value is set.
11:39:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x062736C0>, 0x0, False) , Command count = 5956 ] 
11:39:38: [GO18_globalSetVolt]### Host voltage value is set.
11:39:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5957 ] 
11:39:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5958 ] 
11:39:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5959 ] 
11:39:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269A80>, <py_sfcl.CommandDataDefinition object at 0x06269240>) , Command count = 5960 ] 
11:39:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269270>, <py_sfcl.CommandDataDefinition object at 0x06312F30>) , Command count = 5961 ] 
11:39:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:38: [ SetCardRCA(0x1, 0xD555) , Command count = 5962 ] 
11:39:38: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:39: Host Frequency set to 25000 KHz
11:39:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:39: ####CSD Registe 2.0 Values####
11:39:39: CSD_STRUCTURE                                 :0x1
11:39:39: Reserv1                                       :0x0
11:39:39: Time Access 1 TAAC                            :0xe
11:39:39: Time Access 2 NSAC*100                        :0x0
11:39:39: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:39: Card Command Classess CCC                     :0x5b5
11:39:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:39: DSR(driver stage register)  DSR_IMP           :0x0
11:39:39: Reserv2                                       :0x0
11:39:39: Device Size C_SIZE                            :0xedc8
11:39:39: Reserv3                                       :0x0
11:39:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:39: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:39: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:39: Reserv4                                       :0x0
11:39:39: Write Speed Factor R2W_FACTOR                 :0x2
11:39:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:39: FILE_FORMAT_GRP                               :0x0
11:39:39: COPY flag                                     :0x1
11:39:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:39: File_Format                                   :0x0
11:39:39: CRC                                           :0x0
11:39:39: ####CSD Registe Values####  

11:39:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:39: [GetSCRRegisterEntry] Passed
11:39:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:39: Data_Status_After Erases          : 0
11:39:39: CPRM Security Support             : No Security
11:39:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:39: Spec. Version                     : Version 3.0X
11:39:39: Extended Security Support         : Extended_Security_Not_Supported
11:39:39: Command Support                   : COMMAND_SUPPORT
11:39:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 5963 ] 
11:39:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AD20>, <py_sfcl.CommandDataDefinition object at 0x0627D450>) , Command count = 5964 ] 
11:39:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:39: [ SetBusWidth(0x4) , Command count = 5965 ] 
11:39:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5966 ] 
11:39:39: Protected Area Size 0x28000
11:39:39: Bus Width           2
11:39:39: Secure Mode         0
11:39:39: Speed  Class        4
11:39:39: Perf Move           0
11:39:39: Au Size             9
11:39:39: Erase Size          15
11:39:39: Erase Timeout       1
11:39:39: Erase offset        1
11:39:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5967 ] 
11:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:39: Host Frequency set to 100000 KHz
11:39:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:39: ####CSD Registe 2.0 Values####
11:39:39: CSD_STRUCTURE                                 :0x1
11:39:39: Reserv1                                       :0x0
11:39:39: Time Access 1 TAAC                            :0xe
11:39:39: Time Access 2 NSAC*100                        :0x0
11:39:39: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:39: Card Command Classess CCC                     :0x5b5
11:39:39: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:39: DSR(driver stage register)  DSR_IMP           :0x0
11:39:39: Reserv2                                       :0x0
11:39:39: Device Size C_SIZE                            :0xedc8
11:39:39: Reserv3                                       :0x0
11:39:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:40: Reserv4                                       :0x0
11:39:40: Write Speed Factor R2W_FACTOR                 :0x2
11:39:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:40: FILE_FORMAT_GRP                               :0x0
11:39:40: COPY flag                                     :0x1
11:39:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:40: File_Format                                   :0x0
11:39:40: CRC                                           :0x0
11:39:40: ####CSD Registe Values####  

11:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 5968 ] 
11:39:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A960>, <py_sfcl.CommandDataDefinition object at 0x0627AC00>) , Command count = 5969 ] 
11:39:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x06268720>) , Command count = 5970 ] 
11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x062688A0>, <None>, <py_sfcl.Command23 object at 0x062169F0>) , Command count = 5971 ] 
11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AFB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D2D0>, <py_sfcl.PySEnhancedCmdData object at 0x06324630>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 5972 ] 
11:39:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:41: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:43: Host Frequency set to 25000 KHz
11:39:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:43: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 5973 ] 
11:39:43: [GO18_globalSetVolt]### Host voltage value is set.
11:39:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276CC0>, 0x0, False) , Command count = 5974 ] 
11:39:43: [GO18_globalSetVolt]### Host voltage value is set.
11:39:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5975 ] 
11:39:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5976 ] 
11:39:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5977 ] 
11:39:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x06273B40>) , Command count = 5978 ] 
11:39:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273120>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 5979 ] 
11:39:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:43: [ SetCardRCA(0x1, 0xD555) , Command count = 5980 ] 
11:39:43: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:43: Host Frequency set to 25000 KHz
11:39:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:43: ####CSD Registe 2.0 Values####
11:39:43: CSD_STRUCTURE                                 :0x1
11:39:43: Reserv1                                       :0x0
11:39:43: Time Access 1 TAAC                            :0xe
11:39:43: Time Access 2 NSAC*100                        :0x0
11:39:43: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:43: Card Command Classess CCC                     :0x5b5
11:39:43: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:43: DSR(driver stage register)  DSR_IMP           :0x0
11:39:43: Reserv2                                       :0x0
11:39:43: Device Size C_SIZE                            :0xedc8
11:39:43: Reserv3                                       :0x0
11:39:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:43: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:43: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:43: Reserv4                                       :0x0
11:39:43: Write Speed Factor R2W_FACTOR                 :0x2
11:39:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:43: FILE_FORMAT_GRP                               :0x0
11:39:43: COPY flag                                     :0x1
11:39:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:43: File_Format                                   :0x0
11:39:43: CRC                                           :0x0
11:39:43: ####CSD Registe Values####  

11:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:43: [GetSCRRegisterEntry] Passed
11:39:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:43: Data_Status_After Erases          : 0
11:39:43: CPRM Security Support             : No Security
11:39:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:43: Spec. Version                     : Version 3.0X
11:39:43: Extended Security Support         : Extended_Security_Not_Supported
11:39:43: Command Support                   : COMMAND_SUPPORT
11:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 5981 ] 
11:39:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D210>, <py_sfcl.CommandDataDefinition object at 0x062685D0>) , Command count = 5982 ] 
11:39:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:44: [ SetBusWidth(0x4) , Command count = 5983 ] 
11:39:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5984 ] 
11:39:44: Protected Area Size 0x28000
11:39:44: Bus Width           2
11:39:44: Secure Mode         0
11:39:44: Speed  Class        4
11:39:44: Perf Move           0
11:39:44: Au Size             9
11:39:44: Erase Size          15
11:39:44: Erase Timeout       1
11:39:44: Erase offset        1
11:39:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5985 ] 
11:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:44: Host Frequency set to 100000 KHz
11:39:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:44: ####CSD Registe 2.0 Values####
11:39:44: CSD_STRUCTURE                                 :0x1
11:39:44: Reserv1                                       :0x0
11:39:44: Time Access 1 TAAC                            :0xe
11:39:44: Time Access 2 NSAC*100                        :0x0
11:39:44: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:44: Card Command Classess CCC                     :0x5b5
11:39:44: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:44: DSR(driver stage register)  DSR_IMP           :0x0
11:39:44: Reserv2                                       :0x0
11:39:44: Device Size C_SIZE                            :0xedc8
11:39:44: Reserv3                                       :0x0
11:39:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:44: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:44: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:44: Reserv4                                       :0x0
11:39:44: Write Speed Factor R2W_FACTOR                 :0x2
11:39:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:44: FILE_FORMAT_GRP                               :0x0
11:39:44: COPY flag                                     :0x1
11:39:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:44: File_Format                                   :0x0
11:39:44: CRC                                           :0x0
11:39:44: ####CSD Registe Values####  

11:39:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 5986 ] 
11:39:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401A50>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 5987 ] 
11:39:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06280150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06216570>, <None>, <py_sfcl.Command23 object at 0x0627DC30>) , Command count = 5988 ] 
11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AB10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062731B0>, <py_sfcl.PySEnhancedCmdData object at 0x06268510>, <None>, <py_sfcl.Command23 object at 0x0627AED0>) , Command count = 5989 ] 
11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06312D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D7E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D720>, <None>, <py_sfcl.Command23 object at 0x062683F0>) , Command count = 5990 ] 
11:39:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:46: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:48: Host Frequency set to 25000 KHz
11:39:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:48: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 5991 ] 
11:39:48: [GO18_globalSetVolt]### Host voltage value is set.
11:39:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216810>, 0x0, False) , Command count = 5992 ] 
11:39:48: [GO18_globalSetVolt]### Host voltage value is set.
11:39:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5993 ] 
11:39:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5994 ] 
11:39:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5995 ] 
11:39:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216540>, <py_sfcl.CommandDataDefinition object at 0x062167E0>) , Command count = 5996 ] 
11:39:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DC90>, <py_sfcl.CommandDataDefinition object at 0x0627A750>) , Command count = 5997 ] 
11:39:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:48: [ SetCardRCA(0x1, 0xD555) , Command count = 5998 ] 
11:39:48: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:48: Host Frequency set to 25000 KHz
11:39:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:48: ####CSD Registe 2.0 Values####
11:39:48: CSD_STRUCTURE                                 :0x1
11:39:48: Reserv1                                       :0x0
11:39:48: Time Access 1 TAAC                            :0xe
11:39:48: Time Access 2 NSAC*100                        :0x0
11:39:48: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:48: Card Command Classess CCC                     :0x5b5
11:39:48: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:48: DSR(driver stage register)  DSR_IMP           :0x0
11:39:48: Reserv2                                       :0x0
11:39:48: Device Size C_SIZE                            :0xedc8
11:39:48: Reserv3                                       :0x0
11:39:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:48: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:48: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:48: Reserv4                                       :0x0
11:39:48: Write Speed Factor R2W_FACTOR                 :0x2
11:39:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:48: FILE_FORMAT_GRP                               :0x0
11:39:48: COPY flag                                     :0x1
11:39:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:48: File_Format                                   :0x0
11:39:48: CRC                                           :0x0
11:39:48: ####CSD Registe Values####  

11:39:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:48: [GetSCRRegisterEntry] Passed
11:39:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:48: Data_Status_After Erases          : 0
11:39:48: CPRM Security Support             : No Security
11:39:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:48: Spec. Version                     : Version 3.0X
11:39:48: Extended Security Support         : Extended_Security_Not_Supported
11:39:48: Command Support                   : COMMAND_SUPPORT
11:39:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 5999 ] 
11:39:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A690>, <py_sfcl.CommandDataDefinition object at 0x0627AF30>) , Command count = 6000 ] 
11:39:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:48: [ SetBusWidth(0x4) , Command count = 6001 ] 
11:39:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6002 ] 
11:39:48: Protected Area Size 0x28000
11:39:48: Bus Width           2
11:39:48: Secure Mode         0
11:39:48: Speed  Class        4
11:39:48: Perf Move           0
11:39:48: Au Size             9
11:39:48: Erase Size          15
11:39:48: Erase Timeout       1
11:39:48: Erase offset        1
11:39:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6003 ] 
11:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:49: Host Frequency set to 100000 KHz
11:39:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:49: ####CSD Registe 2.0 Values####
11:39:49: CSD_STRUCTURE                                 :0x1
11:39:49: Reserv1                                       :0x0
11:39:49: Time Access 1 TAAC                            :0xe
11:39:49: Time Access 2 NSAC*100                        :0x0
11:39:49: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:49: Card Command Classess CCC                     :0x5b5
11:39:49: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:49: DSR(driver stage register)  DSR_IMP           :0x0
11:39:49: Reserv2                                       :0x0
11:39:49: Device Size C_SIZE                            :0xedc8
11:39:49: Reserv3                                       :0x0
11:39:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:49: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:49: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:49: Reserv4                                       :0x0
11:39:49: Write Speed Factor R2W_FACTOR                 :0x2
11:39:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:49: FILE_FORMAT_GRP                               :0x0
11:39:49: COPY flag                                     :0x1
11:39:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:49: File_Format                                   :0x0
11:39:49: CRC                                           :0x0
11:39:49: ####CSD Registe Values####  

11:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 6004 ] 
11:39:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269CC0>, <py_sfcl.CommandDataDefinition object at 0x0627DF60>) , Command count = 6005 ] 
11:39:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273150>, <py_sfcl.PySEnhancedCmdData object at 0x06268F30>, <None>, <py_sfcl.Command23 object at 0x0627DF00>) , Command count = 6006 ] 
11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0627D870>, <None>, <py_sfcl.Command23 object at 0x0626D6C0>) , Command count = 6007 ] 
11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ABA0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AF30>, <None>, <py_sfcl.Command23 object at 0x0627D390>) , Command count = 6008 ] 
11:39:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:51: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:53: Host Frequency set to 25000 KHz
11:39:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:53: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 6009 ] 
11:39:53: [GO18_globalSetVolt]### Host voltage value is set.
11:39:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273960>, 0x0, False) , Command count = 6010 ] 
11:39:53: [GO18_globalSetVolt]### Host voltage value is set.
11:39:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6011 ] 
11:39:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6012 ] 
11:39:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6013 ] 
11:39:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 6014 ] 
11:39:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C00>, <py_sfcl.CommandDataDefinition object at 0x0627DCC0>) , Command count = 6015 ] 
11:39:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:53: [ SetCardRCA(0x1, 0xD555) , Command count = 6016 ] 
11:39:53: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:53: Host Frequency set to 25000 KHz
11:39:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:53: ####CSD Registe 2.0 Values####
11:39:53: CSD_STRUCTURE                                 :0x1
11:39:53: Reserv1                                       :0x0
11:39:53: Time Access 1 TAAC                            :0xe
11:39:53: Time Access 2 NSAC*100                        :0x0
11:39:53: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:53: Card Command Classess CCC                     :0x5b5
11:39:53: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:53: DSR(driver stage register)  DSR_IMP           :0x0
11:39:53: Reserv2                                       :0x0
11:39:53: Device Size C_SIZE                            :0xedc8
11:39:53: Reserv3                                       :0x0
11:39:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:53: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:53: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:53: Reserv4                                       :0x0
11:39:53: Write Speed Factor R2W_FACTOR                 :0x2
11:39:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:53: FILE_FORMAT_GRP                               :0x0
11:39:53: COPY flag                                     :0x1
11:39:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:53: File_Format                                   :0x0
11:39:53: CRC                                           :0x0
11:39:53: ####CSD Registe Values####  

11:39:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:53: [GetSCRRegisterEntry] Passed
11:39:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:53: Data_Status_After Erases          : 0
11:39:53: CPRM Security Support             : No Security
11:39:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:53: Spec. Version                     : Version 3.0X
11:39:53: Extended Security Support         : Extended_Security_Not_Supported
11:39:53: Command Support                   : COMMAND_SUPPORT
11:39:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 6017 ] 
11:39:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AB40>, <py_sfcl.CommandDataDefinition object at 0x062694B0>) , Command count = 6018 ] 
11:39:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:53: [ SetBusWidth(0x4) , Command count = 6019 ] 
11:39:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063245D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6020 ] 
11:39:53: Protected Area Size 0x28000
11:39:53: Bus Width           2
11:39:53: Secure Mode         0
11:39:53: Speed  Class        4
11:39:53: Perf Move           0
11:39:53: Au Size             9
11:39:53: Erase Size          15
11:39:53: Erase Timeout       1
11:39:53: Erase offset        1
11:39:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6021 ] 
11:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:53: Host Frequency set to 100000 KHz
11:39:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:54: ####CSD Registe 2.0 Values####
11:39:54: CSD_STRUCTURE                                 :0x1
11:39:54: Reserv1                                       :0x0
11:39:54: Time Access 1 TAAC                            :0xe
11:39:54: Time Access 2 NSAC*100                        :0x0
11:39:54: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:54: Card Command Classess CCC                     :0x5b5
11:39:54: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:54: DSR(driver stage register)  DSR_IMP           :0x0
11:39:54: Reserv2                                       :0x0
11:39:54: Device Size C_SIZE                            :0xedc8
11:39:54: Reserv3                                       :0x0
11:39:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:54: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:54: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:54: Reserv4                                       :0x0
11:39:54: Write Speed Factor R2W_FACTOR                 :0x2
11:39:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:54: FILE_FORMAT_GRP                               :0x0
11:39:54: COPY flag                                     :0x1
11:39:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:54: File_Format                                   :0x0
11:39:54: CRC                                           :0x0
11:39:54: ####CSD Registe Values####  

11:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 6022 ] 
11:39:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D450>, <py_sfcl.CommandDataDefinition object at 0x0626DD80>) , Command count = 6023 ] 
11:39:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:39:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D480>, <py_sfcl.PySEnhancedCmdData object at 0x0627A9F0>, <None>, <py_sfcl.Command23 object at 0x0627AAE0>) , Command count = 6024 ] 
11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:39:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x06269600>) , Command count = 6025 ] 
11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:39:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062692A0>, <py_sfcl.PySEnhancedCmdData object at 0x06269210>, <None>, <py_sfcl.Command23 object at 0x062691E0>) , Command count = 6026 ] 
11:39:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:39:55: [GO4_globalInitCard]### Switch to Specify Card Type
11:39:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:58: Host Frequency set to 25000 KHz
11:39:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:58: [GO18_globalSetVolt]### Set Host Voltage value.
11:39:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:39:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 6027 ] 
11:39:58: [GO18_globalSetVolt]### Host voltage value is set.
11:39:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:39:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x062764B0>, 0x0, False) , Command count = 6028 ] 
11:39:58: [GO18_globalSetVolt]### Host voltage value is set.
11:39:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6029 ] 
11:39:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:39:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6030 ] 
11:39:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:39:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:39:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:39:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:39:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:39:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6031 ] 
11:39:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:39:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x0626DAB0>) , Command count = 6032 ] 
11:39:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273CC0>, <py_sfcl.CommandDataDefinition object at 0x0627D930>) , Command count = 6033 ] 
11:39:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:39:58: [ SetCardRCA(0x1, 0xD555) , Command count = 6034 ] 
11:39:58: [DVTCommonLib]### Identification :Idenfication of card completed 

11:39:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:39:58: Host Frequency set to 25000 KHz
11:39:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:39:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:58: ####CSD Registe 2.0 Values####
11:39:58: CSD_STRUCTURE                                 :0x1
11:39:58: Reserv1                                       :0x0
11:39:58: Time Access 1 TAAC                            :0xe
11:39:58: Time Access 2 NSAC*100                        :0x0
11:39:58: Data Transfer Rate TRAN_SPEED                 :0x32
11:39:58: Card Command Classess CCC                     :0x5b5
11:39:58: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:58: DSR(driver stage register)  DSR_IMP           :0x0
11:39:58: Reserv2                                       :0x0
11:39:58: Device Size C_SIZE                            :0xedc8
11:39:58: Reserv3                                       :0x0
11:39:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:58: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:58: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:58: Reserv4                                       :0x0
11:39:58: Write Speed Factor R2W_FACTOR                 :0x2
11:39:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:58: FILE_FORMAT_GRP                               :0x0
11:39:58: COPY flag                                     :0x1
11:39:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:58: File_Format                                   :0x0
11:39:58: CRC                                           :0x0
11:39:58: ####CSD Registe Values####  

11:39:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:39:58: [GetSCRRegisterEntry] Passed
11:39:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:39:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:39:58: Data_Status_After Erases          : 0
11:39:58: CPRM Security Support             : No Security
11:39:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:39:58: Spec. Version                     : Version 3.0X
11:39:58: Extended Security Support         : Extended_Security_Not_Supported
11:39:58: Command Support                   : COMMAND_SUPPORT
11:39:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF90>, <py_sfcl.CommandDataDefinition object at 0x062689C0>) , Command count = 6035 ] 
11:39:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A660>, <py_sfcl.CommandDataDefinition object at 0x06269930>) , Command count = 6036 ] 
11:39:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:39:58: [ SetBusWidth(0x4) , Command count = 6037 ] 
11:39:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:39:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6038 ] 
11:39:58: Protected Area Size 0x28000
11:39:58: Bus Width           2
11:39:58: Secure Mode         0
11:39:58: Speed  Class        4
11:39:58: Perf Move           0
11:39:58: Au Size             9
11:39:58: Erase Size          15
11:39:58: Erase Timeout       1
11:39:58: Erase offset        1
11:39:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:39:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:39:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:39:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6039 ] 
11:39:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:39:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:39:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:39:58: Host Frequency set to 100000 KHz
11:39:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:39:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:39:58: ####CSD Registe 2.0 Values####
11:39:58: CSD_STRUCTURE                                 :0x1
11:39:59: Reserv1                                       :0x0
11:39:59: Time Access 1 TAAC                            :0xe
11:39:59: Time Access 2 NSAC*100                        :0x0
11:39:59: Data Transfer Rate TRAN_SPEED                 :0xb
11:39:59: Card Command Classess CCC                     :0x5b5
11:39:59: Max Read Data Block Length  READ_BL_LEN       :0x9
11:39:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:39:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:39:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:39:59: DSR(driver stage register)  DSR_IMP           :0x0
11:39:59: Reserv2                                       :0x0
11:39:59: Device Size C_SIZE                            :0xedc8
11:39:59: Reserv3                                       :0x0
11:39:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:39:59: Erase Sector Size SECTOR_SIZE                 :0x7f
11:39:59: Write Protect Group Size WP_GRP_SIZE          :0x0
11:39:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:39:59: Reserv4                                       :0x0
11:39:59: Write Speed Factor R2W_FACTOR                 :0x2
11:39:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:39:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:39:59: FILE_FORMAT_GRP                               :0x0
11:39:59: COPY flag                                     :0x1
11:39:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:39:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:39:59: File_Format                                   :0x0
11:39:59: CRC                                           :0x0
11:39:59: ####CSD Registe Values####  

11:39:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D750>, <py_sfcl.CommandDataDefinition object at 0x0626D480>) , Command count = 6040 ] 
11:39:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:39:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AFC0>, <py_sfcl.CommandDataDefinition object at 0x06269F60>) , Command count = 6041 ] 
11:40:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062801E0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D570>, <None>, <py_sfcl.Command23 object at 0x06269060>) , Command count = 6042 ] 
11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D4B0>, <None>, <py_sfcl.Command23 object at 0x06273630>) , Command count = 6043 ] 
11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062696F0>, <py_sfcl.PySEnhancedCmdData object at 0x06269AE0>, <None>, <py_sfcl.Command23 object at 0x06269E70>) , Command count = 6044 ] 
11:40:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:00: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:02: Host Frequency set to 25000 KHz
11:40:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:02: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276D20>, 0x0, True) , Command count = 6045 ] 
11:40:02: [GO18_globalSetVolt]### Host voltage value is set.
11:40:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D3C0>, 0x0, False) , Command count = 6046 ] 
11:40:02: [GO18_globalSetVolt]### Host voltage value is set.
11:40:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6047 ] 
11:40:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6048 ] 
11:40:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6049 ] 
11:40:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 6050 ] 
11:40:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276240>, <py_sfcl.CommandDataDefinition object at 0x06269B10>) , Command count = 6051 ] 
11:40:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:03: [ SetCardRCA(0x1, 0xD555) , Command count = 6052 ] 
11:40:03: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:03: Host Frequency set to 25000 KHz
11:40:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:03: ####CSD Registe 2.0 Values####
11:40:03: CSD_STRUCTURE                                 :0x1
11:40:03: Reserv1                                       :0x0
11:40:03: Time Access 1 TAAC                            :0xe
11:40:03: Time Access 2 NSAC*100                        :0x0
11:40:03: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:03: Card Command Classess CCC                     :0x5b5
11:40:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:03: DSR(driver stage register)  DSR_IMP           :0x0
11:40:03: Reserv2                                       :0x0
11:40:03: Device Size C_SIZE                            :0xedc8
11:40:03: Reserv3                                       :0x0
11:40:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:03: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:03: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:03: Reserv4                                       :0x0
11:40:03: Write Speed Factor R2W_FACTOR                 :0x2
11:40:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:03: FILE_FORMAT_GRP                               :0x0
11:40:03: COPY flag                                     :0x1
11:40:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:03: File_Format                                   :0x0
11:40:03: CRC                                           :0x0
11:40:03: ####CSD Registe Values####  

11:40:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:03: [GetSCRRegisterEntry] Passed
11:40:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:03: Data_Status_After Erases          : 0
11:40:03: CPRM Security Support             : No Security
11:40:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:03: Spec. Version                     : Version 3.0X
11:40:03: Extended Security Support         : Extended_Security_Not_Supported
11:40:03: Command Support                   : COMMAND_SUPPORT
11:40:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 6053 ] 
11:40:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D810>, <py_sfcl.CommandDataDefinition object at 0x06269990>) , Command count = 6054 ] 
11:40:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:03: [ SetBusWidth(0x4) , Command count = 6055 ] 
11:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6056 ] 
11:40:03: Protected Area Size 0x28000
11:40:03: Bus Width           2
11:40:03: Secure Mode         0
11:40:03: Speed  Class        4
11:40:03: Perf Move           0
11:40:03: Au Size             9
11:40:03: Erase Size          15
11:40:03: Erase Timeout       1
11:40:03: Erase offset        1
11:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6057 ] 
11:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:03: Host Frequency set to 100000 KHz
11:40:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:03: ####CSD Registe 2.0 Values####
11:40:03: CSD_STRUCTURE                                 :0x1
11:40:03: Reserv1                                       :0x0
11:40:03: Time Access 1 TAAC                            :0xe
11:40:03: Time Access 2 NSAC*100                        :0x0
11:40:03: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:03: Card Command Classess CCC                     :0x5b5
11:40:03: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:03: DSR(driver stage register)  DSR_IMP           :0x0
11:40:03: Reserv2                                       :0x0
11:40:03: Device Size C_SIZE                            :0xedc8
11:40:03: Reserv3                                       :0x0
11:40:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:04: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:04: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:04: Reserv4                                       :0x0
11:40:04: Write Speed Factor R2W_FACTOR                 :0x2
11:40:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:04: FILE_FORMAT_GRP                               :0x0
11:40:04: COPY flag                                     :0x1
11:40:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:04: File_Format                                   :0x0
11:40:04: CRC                                           :0x0
11:40:04: ####CSD Registe Values####  

11:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py_sfcl.CommandDataDefinition object at 0x0627DE70>) , Command count = 6058 ] 
11:40:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276B40>, <py_sfcl.CommandDataDefinition object at 0x06269BD0>) , Command count = 6059 ] 
11:40:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273570>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062732D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D7B0>, <None>, <py_sfcl.Command23 object at 0x06269960>) , Command count = 6060 ] 
11:40:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
11:40:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DED0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DC00>, <None>, <py_sfcl.Command23 object at 0x062697B0>) , Command count = 6061 ] 
11:40:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DA50>, <py_sfcl.PySEnhancedCmdData object at 0x0627A0C0>, <None>, <py_sfcl.Command23 object at 0x0626D7B0>) , Command count = 6062 ] 
11:40:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:05: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:07: Host Frequency set to 25000 KHz
11:40:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:07: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268930>, 0x0, True) , Command count = 6063 ] 
11:40:07: [GO18_globalSetVolt]### Host voltage value is set.
11:40:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D8A0>, 0x0, False) , Command count = 6064 ] 
11:40:07: [GO18_globalSetVolt]### Host voltage value is set.
11:40:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6065 ] 
11:40:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6066 ] 
11:40:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6067 ] 
11:40:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276930>, <py_sfcl.CommandDataDefinition object at 0x0626D810>) , Command count = 6068 ] 
11:40:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269B70>, <py_sfcl.CommandDataDefinition object at 0x06273BD0>) , Command count = 6069 ] 
11:40:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:07: [ SetCardRCA(0x1, 0xD555) , Command count = 6070 ] 
11:40:07: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:08: Host Frequency set to 25000 KHz
11:40:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:08: ####CSD Registe 2.0 Values####
11:40:08: CSD_STRUCTURE                                 :0x1
11:40:08: Reserv1                                       :0x0
11:40:08: Time Access 1 TAAC                            :0xe
11:40:08: Time Access 2 NSAC*100                        :0x0
11:40:08: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:08: Card Command Classess CCC                     :0x5b5
11:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:08: DSR(driver stage register)  DSR_IMP           :0x0
11:40:08: Reserv2                                       :0x0
11:40:08: Device Size C_SIZE                            :0xedc8
11:40:08: Reserv3                                       :0x0
11:40:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:08: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:08: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:08: Reserv4                                       :0x0
11:40:08: Write Speed Factor R2W_FACTOR                 :0x2
11:40:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:08: FILE_FORMAT_GRP                               :0x0
11:40:08: COPY flag                                     :0x1
11:40:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:08: File_Format                                   :0x0
11:40:08: CRC                                           :0x0
11:40:08: ####CSD Registe Values####  

11:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:08: [GetSCRRegisterEntry] Passed
11:40:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:08: Data_Status_After Erases          : 0
11:40:08: CPRM Security Support             : No Security
11:40:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:08: Spec. Version                     : Version 3.0X
11:40:08: Extended Security Support         : Extended_Security_Not_Supported
11:40:08: Command Support                   : COMMAND_SUPPORT
11:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276A20>, <py_sfcl.CommandDataDefinition object at 0x062732A0>) , Command count = 6071 ] 
11:40:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269780>, <py_sfcl.CommandDataDefinition object at 0x06273690>) , Command count = 6072 ] 
11:40:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:08: [ SetBusWidth(0x4) , Command count = 6073 ] 
11:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6074 ] 
11:40:08: Protected Area Size 0x28000
11:40:08: Bus Width           2
11:40:08: Secure Mode         0
11:40:08: Speed  Class        4
11:40:08: Perf Move           0
11:40:08: Au Size             9
11:40:08: Erase Size          15
11:40:08: Erase Timeout       1
11:40:08: Erase offset        1
11:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6075 ] 
11:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:08: Host Frequency set to 100000 KHz
11:40:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:08: ####CSD Registe 2.0 Values####
11:40:08: CSD_STRUCTURE                                 :0x1
11:40:08: Reserv1                                       :0x0
11:40:08: Time Access 1 TAAC                            :0xe
11:40:08: Time Access 2 NSAC*100                        :0x0
11:40:08: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:08: Card Command Classess CCC                     :0x5b5
11:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:08: DSR(driver stage register)  DSR_IMP           :0x0
11:40:08: Reserv2                                       :0x0
11:40:08: Device Size C_SIZE                            :0xedc8
11:40:08: Reserv3                                       :0x0
11:40:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:09: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:09: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:09: Reserv4                                       :0x0
11:40:09: Write Speed Factor R2W_FACTOR                 :0x2
11:40:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:09: FILE_FORMAT_GRP                               :0x0
11:40:09: COPY flag                                     :0x1
11:40:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:09: File_Format                                   :0x0
11:40:09: CRC                                           :0x0
11:40:09: ####CSD Registe Values####  

11:40:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D9F0>, <py_sfcl.CommandDataDefinition object at 0x0627DAB0>) , Command count = 6076 ] 
11:40:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062684E0>, <py_sfcl.CommandDataDefinition object at 0x0626DCF0>) , Command count = 6077 ] 
11:40:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273FC0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBD0>, <None>, <py_sfcl.Command23 object at 0x0626D690>) , Command count = 6078 ] 
11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626DD20>, <py_sfcl.PySEnhancedCmdData object at 0x0626DDB0>, <None>, <py_sfcl.Command23 object at 0x0626D990>) , Command count = 6079 ] 
11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A210>, <py_sfcl.PySEnhancedCmdData object at 0x0627A060>, <None>, <py_sfcl.Command23 object at 0x062762A0>) , Command count = 6080 ] 
11:40:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:10: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:12: Host Frequency set to 25000 KHz
11:40:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:12: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273D50>, 0x0, True) , Command count = 6081 ] 
11:40:12: [GO18_globalSetVolt]### Host voltage value is set.
11:40:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06269C90>, 0x0, False) , Command count = 6082 ] 
11:40:12: [GO18_globalSetVolt]### Host voltage value is set.
11:40:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6083 ] 
11:40:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6084 ] 
11:40:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6085 ] 
11:40:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D960>, <py_sfcl.CommandDataDefinition object at 0x0627A600>) , Command count = 6086 ] 
11:40:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D20>, <py_sfcl.CommandDataDefinition object at 0x06273660>) , Command count = 6087 ] 
11:40:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:12: [ SetCardRCA(0x1, 0xD555) , Command count = 6088 ] 
11:40:12: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:12: Host Frequency set to 25000 KHz
11:40:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:12: ####CSD Registe 2.0 Values####
11:40:12: CSD_STRUCTURE                                 :0x1
11:40:12: Reserv1                                       :0x0
11:40:12: Time Access 1 TAAC                            :0xe
11:40:12: Time Access 2 NSAC*100                        :0x0
11:40:12: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:12: Card Command Classess CCC                     :0x5b5
11:40:12: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:12: DSR(driver stage register)  DSR_IMP           :0x0
11:40:12: Reserv2                                       :0x0
11:40:12: Device Size C_SIZE                            :0xedc8
11:40:12: Reserv3                                       :0x0
11:40:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:12: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:12: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:12: Reserv4                                       :0x0
11:40:12: Write Speed Factor R2W_FACTOR                 :0x2
11:40:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:12: FILE_FORMAT_GRP                               :0x0
11:40:12: COPY flag                                     :0x1
11:40:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:12: File_Format                                   :0x0
11:40:12: CRC                                           :0x0
11:40:12: ####CSD Registe Values####  

11:40:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:12: [GetSCRRegisterEntry] Passed
11:40:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:12: Data_Status_After Erases          : 0
11:40:12: CPRM Security Support             : No Security
11:40:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:12: Spec. Version                     : Version 3.0X
11:40:12: Extended Security Support         : Extended_Security_Not_Supported
11:40:12: Command Support                   : COMMAND_SUPPORT
11:40:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276060>, <py_sfcl.CommandDataDefinition object at 0x0627A810>) , Command count = 6089 ] 
11:40:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269BA0>, <py_sfcl.CommandDataDefinition object at 0x06273390>) , Command count = 6090 ] 
11:40:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:12: [ SetBusWidth(0x4) , Command count = 6091 ] 
11:40:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6092 ] 
11:40:12: Protected Area Size 0x28000
11:40:12: Bus Width           2
11:40:13: Secure Mode         0
11:40:13: Speed  Class        4
11:40:13: Perf Move           0
11:40:13: Au Size             9
11:40:13: Erase Size          15
11:40:13: Erase Timeout       1
11:40:13: Erase offset        1
11:40:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6093 ] 
11:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:13: Host Frequency set to 100000 KHz
11:40:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:13: ####CSD Registe 2.0 Values####
11:40:13: CSD_STRUCTURE                                 :0x1
11:40:13: Reserv1                                       :0x0
11:40:13: Time Access 1 TAAC                            :0xe
11:40:13: Time Access 2 NSAC*100                        :0x0
11:40:13: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:13: Card Command Classess CCC                     :0x5b5
11:40:13: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:13: DSR(driver stage register)  DSR_IMP           :0x0
11:40:13: Reserv2                                       :0x0
11:40:13: Device Size C_SIZE                            :0xedc8
11:40:13: Reserv3                                       :0x0
11:40:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:14: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:14: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:14: Reserv4                                       :0x0
11:40:14: Write Speed Factor R2W_FACTOR                 :0x2
11:40:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:14: FILE_FORMAT_GRP                               :0x0
11:40:14: COPY flag                                     :0x1
11:40:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:14: File_Format                                   :0x0
11:40:14: CRC                                           :0x0
11:40:14: ####CSD Registe Values####  

11:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269570>, <py_sfcl.CommandDataDefinition object at 0x0627D360>) , Command count = 6094 ] 
11:40:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DA20>, <py_sfcl.CommandDataDefinition object at 0x062769C0>) , Command count = 6095 ] 
11:40:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DC00>, <py_sfcl.PySEnhancedCmdData object at 0x0627D0C0>, <None>, <py_sfcl.Command23 object at 0x0626DD50>) , Command count = 6096 ] 
11:40:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
11:40:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627DA80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276DB0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DBA0>, <None>, <py_sfcl.Command23 object at 0x0627A6F0>) , Command count = 6097 ] 
11:40:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062734E0>, <py_sfcl.PySEnhancedCmdData object at 0x06273480>, <None>, <py_sfcl.Command23 object at 0x062730C0>) , Command count = 6098 ] 
11:40:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:15: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:17: Host Frequency set to 25000 KHz
11:40:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:17: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06312990>, 0x0, True) , Command count = 6099 ] 
11:40:17: [GO18_globalSetVolt]### Host voltage value is set.
11:40:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273AB0>, 0x0, False) , Command count = 6100 ] 
11:40:17: [GO18_globalSetVolt]### Host voltage value is set.
11:40:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6101 ] 
11:40:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6102 ] 
11:40:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6103 ] 
11:40:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D5A0>, <py_sfcl.CommandDataDefinition object at 0x0626D030>) , Command count = 6104 ] 
11:40:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D0F0>, <py_sfcl.CommandDataDefinition object at 0x06276F60>) , Command count = 6105 ] 
11:40:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:17: [ SetCardRCA(0x1, 0xD555) , Command count = 6106 ] 
11:40:17: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:17: Host Frequency set to 25000 KHz
11:40:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:17: ####CSD Registe 2.0 Values####
11:40:17: CSD_STRUCTURE                                 :0x1
11:40:17: Reserv1                                       :0x0
11:40:17: Time Access 1 TAAC                            :0xe
11:40:17: Time Access 2 NSAC*100                        :0x0
11:40:17: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:17: Card Command Classess CCC                     :0x5b5
11:40:17: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:17: DSR(driver stage register)  DSR_IMP           :0x0
11:40:17: Reserv2                                       :0x0
11:40:17: Device Size C_SIZE                            :0xedc8
11:40:17: Reserv3                                       :0x0
11:40:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:17: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:17: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:17: Reserv4                                       :0x0
11:40:17: Write Speed Factor R2W_FACTOR                 :0x2
11:40:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:17: FILE_FORMAT_GRP                               :0x0
11:40:17: COPY flag                                     :0x1
11:40:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:17: File_Format                                   :0x0
11:40:17: CRC                                           :0x0
11:40:17: ####CSD Registe Values####  

11:40:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:17: [GetSCRRegisterEntry] Passed
11:40:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:17: Data_Status_After Erases          : 0
11:40:17: CPRM Security Support             : No Security
11:40:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:17: Spec. Version                     : Version 3.0X
11:40:17: Extended Security Support         : Extended_Security_Not_Supported
11:40:17: Command Support                   : COMMAND_SUPPORT
11:40:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D420>, <py_sfcl.CommandDataDefinition object at 0x06273C00>) , Command count = 6107 ] 
11:40:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D990>, <py_sfcl.CommandDataDefinition object at 0x06276CF0>) , Command count = 6108 ] 
11:40:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:17: [ SetBusWidth(0x4) , Command count = 6109 ] 
11:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6110 ] 
11:40:17: Protected Area Size 0x28000
11:40:17: Bus Width           2
11:40:17: Secure Mode         0
11:40:17: Speed  Class        4
11:40:17: Perf Move           0
11:40:17: Au Size             9
11:40:17: Erase Size          15
11:40:17: Erase Timeout       1
11:40:17: Erase offset        1
11:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6111 ] 
11:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:17: Host Frequency set to 100000 KHz
11:40:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:17: ####CSD Registe 2.0 Values####
11:40:17: CSD_STRUCTURE                                 :0x1
11:40:17: Reserv1                                       :0x0
11:40:17: Time Access 1 TAAC                            :0xe
11:40:18: Time Access 2 NSAC*100                        :0x0
11:40:18: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:18: Card Command Classess CCC                     :0x5b5
11:40:18: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:18: DSR(driver stage register)  DSR_IMP           :0x0
11:40:18: Reserv2                                       :0x0
11:40:18: Device Size C_SIZE                            :0xedc8
11:40:18: Reserv3                                       :0x0
11:40:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:18: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:18: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:18: Reserv4                                       :0x0
11:40:18: Write Speed Factor R2W_FACTOR                 :0x2
11:40:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:18: FILE_FORMAT_GRP                               :0x0
11:40:18: COPY flag                                     :0x1
11:40:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:18: File_Format                                   :0x0
11:40:18: CRC                                           :0x0
11:40:18: ####CSD Registe Values####  

11:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269F90>, <py_sfcl.CommandDataDefinition object at 0x06269360>) , Command count = 6112 ] 
11:40:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062731E0>, <py_sfcl.CommandDataDefinition object at 0x0626D660>) , Command count = 6113 ] 
11:40:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A8A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x063129C0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF00>, <None>, <py_sfcl.Command23 object at 0x06276270>) , Command count = 6114 ] 
11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D720>, <py_sfcl.PySEnhancedCmdData object at 0x0626DF30>, <None>, <py_sfcl.Command23 object at 0x062765A0>) , Command count = 6115 ] 
11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062763C0>, <py_sfcl.PySEnhancedCmdData object at 0x06276DE0>, <None>, <py_sfcl.Command23 object at 0x06276C90>) , Command count = 6116 ] 
11:40:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:18: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:21: Host Frequency set to 25000 KHz
11:40:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:21: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D180>, 0x0, True) , Command count = 6117 ] 
11:40:21: [GO18_globalSetVolt]### Host voltage value is set.
11:40:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D120>, 0x0, False) , Command count = 6118 ] 
11:40:21: [GO18_globalSetVolt]### Host voltage value is set.
11:40:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6119 ] 
11:40:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6120 ] 
11:40:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6121 ] 
11:40:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276210>, <py_sfcl.CommandDataDefinition object at 0x06312930>) , Command count = 6122 ] 
11:40:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC30>, <py_sfcl.CommandDataDefinition object at 0x06273B10>) , Command count = 6123 ] 
11:40:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:21: [ SetCardRCA(0x1, 0xD555) , Command count = 6124 ] 
11:40:21: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:21: Host Frequency set to 25000 KHz
11:40:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:21: ####CSD Registe 2.0 Values####
11:40:21: CSD_STRUCTURE                                 :0x1
11:40:21: Reserv1                                       :0x0
11:40:21: Time Access 1 TAAC                            :0xe
11:40:21: Time Access 2 NSAC*100                        :0x0
11:40:21: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:21: Card Command Classess CCC                     :0x5b5
11:40:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:21: DSR(driver stage register)  DSR_IMP           :0x0
11:40:21: Reserv2                                       :0x0
11:40:21: Device Size C_SIZE                            :0xedc8
11:40:21: Reserv3                                       :0x0
11:40:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:21: Reserv4                                       :0x0
11:40:21: Write Speed Factor R2W_FACTOR                 :0x2
11:40:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:21: FILE_FORMAT_GRP                               :0x0
11:40:21: COPY flag                                     :0x1
11:40:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:21: File_Format                                   :0x0
11:40:21: CRC                                           :0x0
11:40:21: ####CSD Registe Values####  

11:40:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:21: [GetSCRRegisterEntry] Passed
11:40:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:21: Data_Status_After Erases          : 0
11:40:21: CPRM Security Support             : No Security
11:40:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:21: Spec. Version                     : Version 3.0X
11:40:21: Extended Security Support         : Extended_Security_Not_Supported
11:40:21: Command Support                   : COMMAND_SUPPORT
11:40:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627DB10>, <py_sfcl.CommandDataDefinition object at 0x0627DC60>) , Command count = 6125 ] 
11:40:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DDE0>, <py_sfcl.CommandDataDefinition object at 0x06312900>) , Command count = 6126 ] 
11:40:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:21: [ SetBusWidth(0x4) , Command count = 6127 ] 
11:40:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6128 ] 
11:40:21: Protected Area Size 0x28000
11:40:21: Bus Width           2
11:40:21: Secure Mode         0
11:40:21: Speed  Class        4
11:40:21: Perf Move           0
11:40:21: Au Size             9
11:40:21: Erase Size          15
11:40:21: Erase Timeout       1
11:40:21: Erase offset        1
11:40:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6129 ] 
11:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:21: Host Frequency set to 100000 KHz
11:40:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:21: ####CSD Registe 2.0 Values####
11:40:21: CSD_STRUCTURE                                 :0x1
11:40:21: Reserv1                                       :0x0
11:40:21: Time Access 1 TAAC                            :0xe
11:40:21: Time Access 2 NSAC*100                        :0x0
11:40:21: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:21: Card Command Classess CCC                     :0x5b5
11:40:21: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:21: DSR(driver stage register)  DSR_IMP           :0x0
11:40:21: Reserv2                                       :0x0
11:40:21: Device Size C_SIZE                            :0xedc8
11:40:21: Reserv3                                       :0x0
11:40:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:21: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:21: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:21: Reserv4                                       :0x0
11:40:22: Write Speed Factor R2W_FACTOR                 :0x2
11:40:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:22: FILE_FORMAT_GRP                               :0x0
11:40:22: COPY flag                                     :0x1
11:40:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:22: File_Format                                   :0x0
11:40:22: CRC                                           :0x0
11:40:22: ####CSD Registe Values####  

11:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053977E0>, <py_sfcl.CommandDataDefinition object at 0x06312A80>) , Command count = 6130 ] 
11:40:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273BA0>, <py_sfcl.CommandDataDefinition object at 0x06273870>) , Command count = 6131 ] 
11:40:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053DEE40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273900>, <py_sfcl.PySEnhancedCmdData object at 0x062762D0>, <None>, <py_sfcl.Command23 object at 0x06276C00>) , Command count = 6132 ] 
11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062767B0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D780>, <None>, <py_sfcl.Command23 object at 0x06276030>) , Command count = 6133 ] 
11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062699F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A7E0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A120>, <None>, <py_sfcl.Command23 object at 0x06312CF0>) , Command count = 6134 ] 
11:40:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:22: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:24: Host Frequency set to 25000 KHz
11:40:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:24: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216B40>, 0x0, True) , Command count = 6135 ] 
11:40:24: [GO18_globalSetVolt]### Host voltage value is set.
11:40:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626DB70>, 0x0, False) , Command count = 6136 ] 
11:40:24: [GO18_globalSetVolt]### Host voltage value is set.
11:40:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6137 ] 
11:40:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6138 ] 
11:40:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6139 ] 
11:40:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EF420>, <py_sfcl.CommandDataDefinition object at 0x053EF240>) , Command count = 6140 ] 
11:40:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062767E0>, <py_sfcl.CommandDataDefinition object at 0x0627DE40>) , Command count = 6141 ] 
11:40:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:25: [ SetCardRCA(0x1, 0xD555) , Command count = 6142 ] 
11:40:25: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:25: Host Frequency set to 25000 KHz
11:40:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:25: ####CSD Registe 2.0 Values####
11:40:25: CSD_STRUCTURE                                 :0x1
11:40:25: Reserv1                                       :0x0
11:40:25: Time Access 1 TAAC                            :0xe
11:40:25: Time Access 2 NSAC*100                        :0x0
11:40:25: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:25: Card Command Classess CCC                     :0x5b5
11:40:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:25: DSR(driver stage register)  DSR_IMP           :0x0
11:40:25: Reserv2                                       :0x0
11:40:25: Device Size C_SIZE                            :0xedc8
11:40:25: Reserv3                                       :0x0
11:40:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:25: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:25: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:25: Reserv4                                       :0x0
11:40:25: Write Speed Factor R2W_FACTOR                 :0x2
11:40:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:25: FILE_FORMAT_GRP                               :0x0
11:40:25: COPY flag                                     :0x1
11:40:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:25: File_Format                                   :0x0
11:40:25: CRC                                           :0x0
11:40:25: ####CSD Registe Values####  

11:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:25: [GetSCRRegisterEntry] Passed
11:40:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:25: Data_Status_After Erases          : 0
11:40:25: CPRM Security Support             : No Security
11:40:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:25: Spec. Version                     : Version 3.0X
11:40:25: Extended Security Support         : Extended_Security_Not_Supported
11:40:25: Command Support                   : COMMAND_SUPPORT
11:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFCF0>, <py_sfcl.CommandDataDefinition object at 0x0627AA80>) , Command count = 6143 ] 
11:40:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DE40>, <py_sfcl.CommandDataDefinition object at 0x062767E0>) , Command count = 6144 ] 
11:40:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:25: [ SetBusWidth(0x4) , Command count = 6145 ] 
11:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6146 ] 
11:40:25: Protected Area Size 0x28000
11:40:25: Bus Width           2
11:40:25: Secure Mode         0
11:40:25: Speed  Class        4
11:40:25: Perf Move           0
11:40:25: Au Size             9
11:40:25: Erase Size          15
11:40:25: Erase Timeout       1
11:40:25: Erase offset        1
11:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6147 ] 
11:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:25: Host Frequency set to 100000 KHz
11:40:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:25: ####CSD Registe 2.0 Values####
11:40:25: CSD_STRUCTURE                                 :0x1
11:40:25: Reserv1                                       :0x0
11:40:25: Time Access 1 TAAC                            :0xe
11:40:25: Time Access 2 NSAC*100                        :0x0
11:40:25: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:25: Card Command Classess CCC                     :0x5b5
11:40:25: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:25: DSR(driver stage register)  DSR_IMP           :0x0
11:40:25: Reserv2                                       :0x0
11:40:25: Device Size C_SIZE                            :0xedc8
11:40:25: Reserv3                                       :0x0
11:40:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:26: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:26: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:26: Reserv4                                       :0x0
11:40:26: Write Speed Factor R2W_FACTOR                 :0x2
11:40:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:26: FILE_FORMAT_GRP                               :0x0
11:40:26: COPY flag                                     :0x1
11:40:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:26: File_Format                                   :0x0
11:40:26: CRC                                           :0x0
11:40:26: ####CSD Registe Values####  

11:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273510>, <py_sfcl.CommandDataDefinition object at 0x0627A720>) , Command count = 6148 ] 
11:40:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276FC0>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 6149 ] 
11:40:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05401C90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05401C30>, <py_sfcl.PySEnhancedCmdData object at 0x0627A150>, <None>, <py_sfcl.Command23 object at 0x06312AE0>) , Command count = 6150 ] 
11:40:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
11:40:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061AF2D0>, <py_sfcl.PySEnhancedCmdData object at 0x054019C0>, <None>, <py_sfcl.Command23 object at 0x0627D150>) , Command count = 6151 ] 
11:40:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627A2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312A20>, <py_sfcl.PySEnhancedCmdData object at 0x06312BD0>, <None>, <py_sfcl.Command23 object at 0x0627DF90>) , Command count = 6152 ] 
11:40:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:27: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:29: Host Frequency set to 25000 KHz
11:40:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:29: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276330>, 0x0, True) , Command count = 6153 ] 
11:40:29: [GO18_globalSetVolt]### Host voltage value is set.
11:40:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273A20>, 0x0, False) , Command count = 6154 ] 
11:40:29: [GO18_globalSetVolt]### Host voltage value is set.
11:40:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6155 ] 
11:40:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6156 ] 
11:40:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6157 ] 
11:40:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401F60>, <py_sfcl.CommandDataDefinition object at 0x0627D630>) , Command count = 6158 ] 
11:40:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFEA0>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 6159 ] 
11:40:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:30: [ SetCardRCA(0x1, 0xD555) , Command count = 6160 ] 
11:40:30: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:30: Host Frequency set to 25000 KHz
11:40:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:30: ####CSD Registe 2.0 Values####
11:40:30: CSD_STRUCTURE                                 :0x1
11:40:30: Reserv1                                       :0x0
11:40:30: Time Access 1 TAAC                            :0xe
11:40:30: Time Access 2 NSAC*100                        :0x0
11:40:30: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:30: Card Command Classess CCC                     :0x5b5
11:40:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:30: DSR(driver stage register)  DSR_IMP           :0x0
11:40:30: Reserv2                                       :0x0
11:40:30: Device Size C_SIZE                            :0xedc8
11:40:30: Reserv3                                       :0x0
11:40:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:30: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:30: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:30: Reserv4                                       :0x0
11:40:30: Write Speed Factor R2W_FACTOR                 :0x2
11:40:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:30: FILE_FORMAT_GRP                               :0x0
11:40:30: COPY flag                                     :0x1
11:40:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:30: File_Format                                   :0x0
11:40:30: CRC                                           :0x0
11:40:30: ####CSD Registe Values####  

11:40:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:30: [GetSCRRegisterEntry] Passed
11:40:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:30: Data_Status_After Erases          : 0
11:40:30: CPRM Security Support             : No Security
11:40:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:30: Spec. Version                     : Version 3.0X
11:40:30: Extended Security Support         : Extended_Security_Not_Supported
11:40:30: Command Support                   : COMMAND_SUPPORT
11:40:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D150>, <py_sfcl.CommandDataDefinition object at 0x06216C00>) , Command count = 6161 ] 
11:40:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276870>, <py_sfcl.CommandDataDefinition object at 0x0627A270>) , Command count = 6162 ] 
11:40:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:30: [ SetBusWidth(0x4) , Command count = 6163 ] 
11:40:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627A090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6164 ] 
11:40:30: Protected Area Size 0x28000
11:40:30: Bus Width           2
11:40:30: Secure Mode         0
11:40:30: Speed  Class        4
11:40:30: Perf Move           0
11:40:30: Au Size             9
11:40:30: Erase Size          15
11:40:30: Erase Timeout       1
11:40:30: Erase offset        1
11:40:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6165 ] 
11:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:30: Host Frequency set to 100000 KHz
11:40:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:30: ####CSD Registe 2.0 Values####
11:40:30: CSD_STRUCTURE                                 :0x1
11:40:30: Reserv1                                       :0x0
11:40:30: Time Access 1 TAAC                            :0xe
11:40:30: Time Access 2 NSAC*100                        :0x0
11:40:30: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:30: Card Command Classess CCC                     :0x5b5
11:40:30: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:30: DSR(driver stage register)  DSR_IMP           :0x0
11:40:30: Reserv2                                       :0x0
11:40:30: Device Size C_SIZE                            :0xedc8
11:40:30: Reserv3                                       :0x0
11:40:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:31: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:31: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:31: Reserv4                                       :0x0
11:40:31: Write Speed Factor R2W_FACTOR                 :0x2
11:40:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:31: FILE_FORMAT_GRP                               :0x0
11:40:31: COPY flag                                     :0x1
11:40:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:31: File_Format                                   :0x0
11:40:31: CRC                                           :0x0
11:40:31: ####CSD Registe Values####  

11:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF030>, <py_sfcl.CommandDataDefinition object at 0x06273240>) , Command count = 6166 ] 
11:40:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062761B0>, <py_sfcl.CommandDataDefinition object at 0x06276540>) , Command count = 6167 ] 
11:40:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06276720>, <py_sfcl.PySEnhancedCmdData object at 0x06276BD0>, <None>, <py_sfcl.Command23 object at 0x0627A180>) , Command count = 6168 ] 
11:40:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
11:40:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627DBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0626DAE0>, <None>, <py_sfcl.Command23 object at 0x0627A510>) , Command count = 6169 ] 
11:40:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312B10>, <py_sfcl.PySEnhancedCmdData object at 0x06312C00>, <None>, <py_sfcl.Command23 object at 0x0627A9C0>) , Command count = 6170 ] 
11:40:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:32: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:34: Host Frequency set to 25000 KHz
11:40:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:34: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273F00>, 0x0, True) , Command count = 6171 ] 
11:40:34: [GO18_globalSetVolt]### Host voltage value is set.
11:40:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DD20>, 0x0, False) , Command count = 6172 ] 
11:40:34: [GO18_globalSetVolt]### Host voltage value is set.
11:40:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6173 ] 
11:40:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6174 ] 
11:40:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6175 ] 
11:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061AF660>, <py_sfcl.CommandDataDefinition object at 0x0627D5D0>) , Command count = 6176 ] 
11:40:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D030>, <py_sfcl.CommandDataDefinition object at 0x0627A5D0>) , Command count = 6177 ] 
11:40:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:35: [ SetCardRCA(0x1, 0xD555) , Command count = 6178 ] 
11:40:35: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:35: Host Frequency set to 25000 KHz
11:40:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:35: ####CSD Registe 2.0 Values####
11:40:35: CSD_STRUCTURE                                 :0x1
11:40:35: Reserv1                                       :0x0
11:40:35: Time Access 1 TAAC                            :0xe
11:40:35: Time Access 2 NSAC*100                        :0x0
11:40:35: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:35: Card Command Classess CCC                     :0x5b5
11:40:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:35: DSR(driver stage register)  DSR_IMP           :0x0
11:40:35: Reserv2                                       :0x0
11:40:35: Device Size C_SIZE                            :0xedc8
11:40:35: Reserv3                                       :0x0
11:40:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:35: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:35: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:35: Reserv4                                       :0x0
11:40:35: Write Speed Factor R2W_FACTOR                 :0x2
11:40:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:35: FILE_FORMAT_GRP                               :0x0
11:40:35: COPY flag                                     :0x1
11:40:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:35: File_Format                                   :0x0
11:40:35: CRC                                           :0x0
11:40:35: ####CSD Registe Values####  

11:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:35: [GetSCRRegisterEntry] Passed
11:40:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:35: Data_Status_After Erases          : 0
11:40:35: CPRM Security Support             : No Security
11:40:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:35: Spec. Version                     : Version 3.0X
11:40:35: Extended Security Support         : Extended_Security_Not_Supported
11:40:35: Command Support                   : COMMAND_SUPPORT
11:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216990>, <py_sfcl.CommandDataDefinition object at 0x0627DE10>) , Command count = 6179 ] 
11:40:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062737E0>, <py_sfcl.CommandDataDefinition object at 0x062763F0>) , Command count = 6180 ] 
11:40:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:35: [ SetBusWidth(0x4) , Command count = 6181 ] 
11:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6182 ] 
11:40:35: Protected Area Size 0x28000
11:40:35: Bus Width           2
11:40:35: Secure Mode         0
11:40:35: Speed  Class        4
11:40:35: Perf Move           0
11:40:35: Au Size             9
11:40:35: Erase Size          15
11:40:35: Erase Timeout       1
11:40:35: Erase offset        1
11:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6183 ] 
11:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:35: Host Frequency set to 100000 KHz
11:40:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:35: ####CSD Registe 2.0 Values####
11:40:35: CSD_STRUCTURE                                 :0x1
11:40:35: Reserv1                                       :0x0
11:40:35: Time Access 1 TAAC                            :0xe
11:40:35: Time Access 2 NSAC*100                        :0x0
11:40:35: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:35: Card Command Classess CCC                     :0x5b5
11:40:35: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:35: DSR(driver stage register)  DSR_IMP           :0x0
11:40:35: Reserv2                                       :0x0
11:40:35: Device Size C_SIZE                            :0xedc8
11:40:35: Reserv3                                       :0x0
11:40:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:36: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:36: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:36: Reserv4                                       :0x0
11:40:36: Write Speed Factor R2W_FACTOR                 :0x2
11:40:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:36: FILE_FORMAT_GRP                               :0x0
11:40:36: COPY flag                                     :0x1
11:40:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:36: File_Format                                   :0x0
11:40:36: CRC                                           :0x0
11:40:36: ####CSD Registe Values####  

11:40:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062738A0>, <py_sfcl.CommandDataDefinition object at 0x05401C60>) , Command count = 6184 ] 
11:40:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276E10>, <py_sfcl.CommandDataDefinition object at 0x0626D270>) , Command count = 6185 ] 
11:40:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061AF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268C90>, <py_sfcl.PySEnhancedCmdData object at 0x0627A5A0>, <None>, <py_sfcl.Command23 object at 0x06312CC0>) , Command count = 6186 ] 
11:40:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
11:40:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062165D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D300>, <py_sfcl.PySEnhancedCmdData object at 0x0627D120>, <None>, <py_sfcl.Command23 object at 0x06269FC0>) , Command count = 6187 ] 
11:40:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053E2420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06312C60>, <py_sfcl.PySEnhancedCmdData object at 0x06312EA0>, <None>, <py_sfcl.Command23 object at 0x06312A50>) , Command count = 6188 ] 
11:40:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:37: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:39: Host Frequency set to 25000 KHz
11:40:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:39: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216450>, 0x0, True) , Command count = 6189 ] 
11:40:39: [GO18_globalSetVolt]### Host voltage value is set.
11:40:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627DCF0>, 0x0, False) , Command count = 6190 ] 
11:40:39: [GO18_globalSetVolt]### Host voltage value is set.
11:40:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6191 ] 
11:40:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6192 ] 
11:40:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6193 ] 
11:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06280180>, <py_sfcl.CommandDataDefinition object at 0x0627A3C0>) , Command count = 6194 ] 
11:40:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627D4E0>, <py_sfcl.CommandDataDefinition object at 0x0626D270>) , Command count = 6195 ] 
11:40:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:40: [ SetCardRCA(0x1, 0xD555) , Command count = 6196 ] 
11:40:40: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:40: Host Frequency set to 25000 KHz
11:40:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:40: ####CSD Registe 2.0 Values####
11:40:40: CSD_STRUCTURE                                 :0x1
11:40:40: Reserv1                                       :0x0
11:40:40: Time Access 1 TAAC                            :0xe
11:40:40: Time Access 2 NSAC*100                        :0x0
11:40:40: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:40: Card Command Classess CCC                     :0x5b5
11:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:40: DSR(driver stage register)  DSR_IMP           :0x0
11:40:40: Reserv2                                       :0x0
11:40:40: Device Size C_SIZE                            :0xedc8
11:40:40: Reserv3                                       :0x0
11:40:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:40: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:40: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:40: Reserv4                                       :0x0
11:40:40: Write Speed Factor R2W_FACTOR                 :0x2
11:40:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:40: FILE_FORMAT_GRP                               :0x0
11:40:40: COPY flag                                     :0x1
11:40:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:40: File_Format                                   :0x0
11:40:40: CRC                                           :0x0
11:40:40: ####CSD Registe Values####  

11:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:40: [GetSCRRegisterEntry] Passed
11:40:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:40: Data_Status_After Erases          : 0
11:40:40: CPRM Security Support             : No Security
11:40:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:40: Spec. Version                     : Version 3.0X
11:40:40: Extended Security Support         : Extended_Security_Not_Supported
11:40:40: Command Support                   : COMMAND_SUPPORT
11:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269180>, <py_sfcl.CommandDataDefinition object at 0x06268870>) , Command count = 6197 ] 
11:40:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273810>, <py_sfcl.CommandDataDefinition object at 0x0626D930>) , Command count = 6198 ] 
11:40:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:40: [ SetBusWidth(0x4) , Command count = 6199 ] 
11:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063244B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6200 ] 
11:40:40: Protected Area Size 0x28000
11:40:40: Bus Width           2
11:40:40: Secure Mode         0
11:40:40: Speed  Class        4
11:40:40: Perf Move           0
11:40:40: Au Size             9
11:40:40: Erase Size          15
11:40:40: Erase Timeout       1
11:40:40: Erase offset        1
11:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6201 ] 
11:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:40: Host Frequency set to 100000 KHz
11:40:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:40: ####CSD Registe 2.0 Values####
11:40:40: CSD_STRUCTURE                                 :0x1
11:40:40: Reserv1                                       :0x0
11:40:40: Time Access 1 TAAC                            :0xe
11:40:40: Time Access 2 NSAC*100                        :0x0
11:40:40: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:40: Card Command Classess CCC                     :0x5b5
11:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:40: DSR(driver stage register)  DSR_IMP           :0x0
11:40:40: Reserv2                                       :0x0
11:40:40: Device Size C_SIZE                            :0xedc8
11:40:40: Reserv3                                       :0x0
11:40:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:41: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:41: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:41: Reserv4                                       :0x0
11:40:41: Write Speed Factor R2W_FACTOR                 :0x2
11:40:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:41: FILE_FORMAT_GRP                               :0x0
11:40:41: COPY flag                                     :0x1
11:40:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:41: File_Format                                   :0x0
11:40:41: CRC                                           :0x0
11:40:41: ####CSD Registe Values####  

11:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268C30>, <py_sfcl.CommandDataDefinition object at 0x06268960>) , Command count = 6202 ] 
11:40:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312BA0>, <py_sfcl.CommandDataDefinition object at 0x0627A780>) , Command count = 6203 ] 
11:40:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062680F0>, <py_sfcl.PySEnhancedCmdData object at 0x06268810>, <None>, <py_sfcl.Command23 object at 0x06312F60>) , Command count = 6204 ] 
11:40:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
11:40:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268990>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268A20>, <py_sfcl.PySEnhancedCmdData object at 0x0627A1B0>, <None>, <py_sfcl.Command23 object at 0x0627A990>) , Command count = 6205 ] 
11:40:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053EF1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273720>, <py_sfcl.PySEnhancedCmdData object at 0x06273810>, <None>, <py_sfcl.Command23 object at 0x0627ACC0>) , Command count = 6206 ] 
11:40:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:42: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:44: Host Frequency set to 25000 KHz
11:40:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:44: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06268E10>, 0x0, True) , Command count = 6207 ] 
11:40:44: [GO18_globalSetVolt]### Host voltage value is set.
11:40:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276E70>, 0x0, False) , Command count = 6208 ] 
11:40:44: [GO18_globalSetVolt]### Host voltage value is set.
11:40:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6209 ] 
11:40:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6210 ] 
11:40:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6211 ] 
11:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268450>, <py_sfcl.CommandDataDefinition object at 0x06269A80>) , Command count = 6212 ] 
11:40:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268DE0>, <py_sfcl.CommandDataDefinition object at 0x06269F30>) , Command count = 6213 ] 
11:40:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:45: [ SetCardRCA(0x1, 0xD555) , Command count = 6214 ] 
11:40:45: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:45: Host Frequency set to 25000 KHz
11:40:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:45: ####CSD Registe 2.0 Values####
11:40:45: CSD_STRUCTURE                                 :0x1
11:40:45: Reserv1                                       :0x0
11:40:45: Time Access 1 TAAC                            :0xe
11:40:45: Time Access 2 NSAC*100                        :0x0
11:40:45: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:45: Card Command Classess CCC                     :0x5b5
11:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:45: DSR(driver stage register)  DSR_IMP           :0x0
11:40:45: Reserv2                                       :0x0
11:40:45: Device Size C_SIZE                            :0xedc8
11:40:45: Reserv3                                       :0x0
11:40:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:45: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:45: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:45: Reserv4                                       :0x0
11:40:45: Write Speed Factor R2W_FACTOR                 :0x2
11:40:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:45: FILE_FORMAT_GRP                               :0x0
11:40:45: COPY flag                                     :0x1
11:40:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:45: File_Format                                   :0x0
11:40:45: CRC                                           :0x0
11:40:45: ####CSD Registe Values####  

11:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:45: [GetSCRRegisterEntry] Passed
11:40:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:45: Data_Status_After Erases          : 0
11:40:45: CPRM Security Support             : No Security
11:40:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:45: Spec. Version                     : Version 3.0X
11:40:45: Extended Security Support         : Extended_Security_Not_Supported
11:40:45: Command Support                   : COMMAND_SUPPORT
11:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062739F0>, <py_sfcl.CommandDataDefinition object at 0x0627D510>) , Command count = 6215 ] 
11:40:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053DB4B0>, <py_sfcl.CommandDataDefinition object at 0x06268CC0>) , Command count = 6216 ] 
11:40:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:45: [ SetBusWidth(0x4) , Command count = 6217 ] 
11:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063240C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6218 ] 
11:40:45: Protected Area Size 0x28000
11:40:45: Bus Width           2
11:40:45: Secure Mode         0
11:40:45: Speed  Class        4
11:40:45: Perf Move           0
11:40:45: Au Size             9
11:40:45: Erase Size          15
11:40:45: Erase Timeout       1
11:40:45: Erase offset        1
11:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6219 ] 
11:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:45: Host Frequency set to 100000 KHz
11:40:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:45: ####CSD Registe 2.0 Values####
11:40:45: CSD_STRUCTURE                                 :0x1
11:40:45: Reserv1                                       :0x0
11:40:45: Time Access 1 TAAC                            :0xe
11:40:45: Time Access 2 NSAC*100                        :0x0
11:40:45: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:45: Card Command Classess CCC                     :0x5b5
11:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:45: DSR(driver stage register)  DSR_IMP           :0x0
11:40:45: Reserv2                                       :0x0
11:40:45: Device Size C_SIZE                            :0xedc8
11:40:45: Reserv3                                       :0x0
11:40:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:46: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:46: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:46: Reserv4                                       :0x0
11:40:46: Write Speed Factor R2W_FACTOR                 :0x2
11:40:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:46: FILE_FORMAT_GRP                               :0x0
11:40:46: COPY flag                                     :0x1
11:40:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:46: File_Format                                   :0x0
11:40:46: CRC                                           :0x0
11:40:46: ####CSD Registe Values####  

11:40:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D1E0>, <py_sfcl.CommandDataDefinition object at 0x0627A4E0>) , Command count = 6220 ] 
11:40:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054019F0>, <py_sfcl.CommandDataDefinition object at 0x06216E10>) , Command count = 6221 ] 
11:40:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06269C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627ACF0>, <py_sfcl.PySEnhancedCmdData object at 0x0627A630>, <None>, <py_sfcl.Command23 object at 0x06273C30>) , Command count = 6222 ] 
11:40:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
11:40:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06268750>, <py_sfcl.PySEnhancedCmdData object at 0x062688A0>, <None>, <py_sfcl.Command23 object at 0x06268720>) , Command count = 6223 ] 
11:40:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062736C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D1B0>, <py_sfcl.PySEnhancedCmdData object at 0x0627DEA0>, <None>, <py_sfcl.Command23 object at 0x062169F0>) , Command count = 6224 ] 
11:40:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:47: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:49: Host Frequency set to 25000 KHz
11:40:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:49: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0626D2D0>, 0x0, True) , Command count = 6225 ] 
11:40:49: [GO18_globalSetVolt]### Host voltage value is set.
11:40:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05401CC0>, 0x0, False) , Command count = 6226 ] 
11:40:49: [GO18_globalSetVolt]### Host voltage value is set.
11:40:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6227 ] 
11:40:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6228 ] 
11:40:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6229 ] 
11:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269720>, <py_sfcl.CommandDataDefinition object at 0x06273B40>) , Command count = 6230 ] 
11:40:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A900>, <py_sfcl.CommandDataDefinition object at 0x0627AC00>) , Command count = 6231 ] 
11:40:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:50: [ SetCardRCA(0x1, 0xD555) , Command count = 6232 ] 
11:40:50: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:50: Host Frequency set to 25000 KHz
11:40:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:50: ####CSD Registe 2.0 Values####
11:40:50: CSD_STRUCTURE                                 :0x1
11:40:50: Reserv1                                       :0x0
11:40:50: Time Access 1 TAAC                            :0xe
11:40:50: Time Access 2 NSAC*100                        :0x0
11:40:50: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:50: Card Command Classess CCC                     :0x5b5
11:40:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:50: DSR(driver stage register)  DSR_IMP           :0x0
11:40:50: Reserv2                                       :0x0
11:40:50: Device Size C_SIZE                            :0xedc8
11:40:50: Reserv3                                       :0x0
11:40:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:50: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:50: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:50: Reserv4                                       :0x0
11:40:50: Write Speed Factor R2W_FACTOR                 :0x2
11:40:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:50: FILE_FORMAT_GRP                               :0x0
11:40:50: COPY flag                                     :0x1
11:40:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:50: File_Format                                   :0x0
11:40:50: CRC                                           :0x0
11:40:50: ####CSD Registe Values####  

11:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:50: [GetSCRRegisterEntry] Passed
11:40:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:50: Data_Status_After Erases          : 0
11:40:50: CPRM Security Support             : No Security
11:40:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:50: Spec. Version                     : Version 3.0X
11:40:50: Extended Security Support         : Extended_Security_Not_Supported
11:40:50: Command Support                   : COMMAND_SUPPORT
11:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269120>, <py_sfcl.CommandDataDefinition object at 0x0626D2A0>) , Command count = 6233 ] 
11:40:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py_sfcl.CommandDataDefinition object at 0x0627AF00>) , Command count = 6234 ] 
11:40:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:50: [ SetBusWidth(0x4) , Command count = 6235 ] 
11:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063246C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6236 ] 
11:40:50: Protected Area Size 0x28000
11:40:50: Bus Width           2
11:40:50: Secure Mode         0
11:40:50: Speed  Class        4
11:40:50: Perf Move           0
11:40:50: Au Size             9
11:40:50: Erase Size          15
11:40:50: Erase Timeout       1
11:40:50: Erase offset        1
11:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6237 ] 
11:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:50: Host Frequency set to 100000 KHz
11:40:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:50: ####CSD Registe 2.0 Values####
11:40:50: CSD_STRUCTURE                                 :0x1
11:40:50: Reserv1                                       :0x0
11:40:50: Time Access 1 TAAC                            :0xe
11:40:50: Time Access 2 NSAC*100                        :0x0
11:40:50: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:50: Card Command Classess CCC                     :0x5b5
11:40:50: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:50: DSR(driver stage register)  DSR_IMP           :0x0
11:40:50: Reserv2                                       :0x0
11:40:50: Device Size C_SIZE                            :0xedc8
11:40:50: Reserv3                                       :0x0
11:40:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:51: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:51: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:51: Reserv4                                       :0x0
11:40:51: Write Speed Factor R2W_FACTOR                 :0x2
11:40:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:51: FILE_FORMAT_GRP                               :0x0
11:40:51: COPY flag                                     :0x1
11:40:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:51: File_Format                                   :0x0
11:40:51: CRC                                           :0x0
11:40:51: ####CSD Registe Values####  

11:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216EA0>, <py_sfcl.CommandDataDefinition object at 0x06216FC0>) , Command count = 6238 ] 
11:40:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05401FC0>, <py_sfcl.CommandDataDefinition object at 0x06216480>) , Command count = 6239 ] 
11:40:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06280150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06216AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06216570>, <None>, <py_sfcl.Command23 object at 0x0627D450>) , Command count = 6240 ] 
11:40:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
11:40:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062731B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627AB10>, <py_sfcl.PySEnhancedCmdData object at 0x0627AED0>, <None>, <py_sfcl.Command23 object at 0x0627A390>) , Command count = 6241 ] 
11:40:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0627D690>, <None>, <py_sfcl.Command23 object at 0x0627D0F0>) , Command count = 6242 ] 
11:40:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:52: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:54: Host Frequency set to 25000 KHz
11:40:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:54: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06273780>, 0x0, True) , Command count = 6243 ] 
11:40:54: [GO18_globalSetVolt]### Host voltage value is set.
11:40:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x062734B0>, 0x0, False) , Command count = 6244 ] 
11:40:54: [GO18_globalSetVolt]### Host voltage value is set.
11:40:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6245 ] 
11:40:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6246 ] 
11:40:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6247 ] 
11:40:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE70>, <py_sfcl.CommandDataDefinition object at 0x06216540>) , Command count = 6248 ] 
11:40:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D180>, <py_sfcl.CommandDataDefinition object at 0x062169C0>) , Command count = 6249 ] 
11:40:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:55: [ SetCardRCA(0x1, 0xD555) , Command count = 6250 ] 
11:40:55: [DVTCommonLib]### Identification :Idenfication of card completed 

11:40:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:55: Host Frequency set to 25000 KHz
11:40:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:55: ####CSD Registe 2.0 Values####
11:40:55: CSD_STRUCTURE                                 :0x1
11:40:55: Reserv1                                       :0x0
11:40:55: Time Access 1 TAAC                            :0xe
11:40:55: Time Access 2 NSAC*100                        :0x0
11:40:55: Data Transfer Rate TRAN_SPEED                 :0x32
11:40:55: Card Command Classess CCC                     :0x5b5
11:40:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:55: DSR(driver stage register)  DSR_IMP           :0x0
11:40:55: Reserv2                                       :0x0
11:40:55: Device Size C_SIZE                            :0xedc8
11:40:55: Reserv3                                       :0x0
11:40:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:55: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:55: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:55: Reserv4                                       :0x0
11:40:55: Write Speed Factor R2W_FACTOR                 :0x2
11:40:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:55: FILE_FORMAT_GRP                               :0x0
11:40:55: COPY flag                                     :0x1
11:40:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:55: File_Format                                   :0x0
11:40:55: CRC                                           :0x0
11:40:55: ####CSD Registe Values####  

11:40:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:40:55: [GetSCRRegisterEntry] Passed
11:40:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:40:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:40:55: Data_Status_After Erases          : 0
11:40:55: CPRM Security Support             : No Security
11:40:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:40:55: Spec. Version                     : Version 3.0X
11:40:55: Extended Security Support         : Extended_Security_Not_Supported
11:40:55: Command Support                   : COMMAND_SUPPORT
11:40:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269D50>, <py_sfcl.CommandDataDefinition object at 0x062681B0>) , Command count = 6251 ] 
11:40:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273090>, <py_sfcl.CommandDataDefinition object at 0x0627AEA0>) , Command count = 6252 ] 
11:40:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:40:55: [ SetBusWidth(0x4) , Command count = 6253 ] 
11:40:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:40:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063249F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6254 ] 
11:40:55: Protected Area Size 0x28000
11:40:55: Bus Width           2
11:40:55: Secure Mode         0
11:40:55: Speed  Class        4
11:40:55: Perf Move           0
11:40:55: Au Size             9
11:40:55: Erase Size          15
11:40:55: Erase Timeout       1
11:40:55: Erase offset        1
11:40:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:40:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:40:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6255 ] 
11:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:40:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:40:55: Host Frequency set to 100000 KHz
11:40:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:40:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:40:55: ####CSD Registe 2.0 Values####
11:40:55: CSD_STRUCTURE                                 :0x1
11:40:55: Reserv1                                       :0x0
11:40:55: Time Access 1 TAAC                            :0xe
11:40:55: Time Access 2 NSAC*100                        :0x0
11:40:55: Data Transfer Rate TRAN_SPEED                 :0xb
11:40:55: Card Command Classess CCC                     :0x5b5
11:40:55: Max Read Data Block Length  READ_BL_LEN       :0x9
11:40:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:40:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:40:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:40:55: DSR(driver stage register)  DSR_IMP           :0x0
11:40:55: Reserv2                                       :0x0
11:40:55: Device Size C_SIZE                            :0xedc8
11:40:55: Reserv3                                       :0x0
11:40:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:40:56: Erase Sector Size SECTOR_SIZE                 :0x7f
11:40:56: Write Protect Group Size WP_GRP_SIZE          :0x0
11:40:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:40:56: Reserv4                                       :0x0
11:40:56: Write Speed Factor R2W_FACTOR                 :0x2
11:40:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:40:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:40:56: FILE_FORMAT_GRP                               :0x0
11:40:56: COPY flag                                     :0x1
11:40:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:40:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:40:56: File_Format                                   :0x0
11:40:56: CRC                                           :0x0
11:40:56: ####CSD Registe Values####  

11:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C4030>, <py_sfcl.CommandDataDefinition object at 0x0627DDE0>) , Command count = 6256 ] 
11:40:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06312D50>, <py_sfcl.CommandDataDefinition object at 0x062683F0>) , Command count = 6257 ] 
11:40:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:40:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:40:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06276660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06273150>, <py_sfcl.PySEnhancedCmdData object at 0x06268F30>, <None>, <py_sfcl.Command23 object at 0x0627D2A0>) , Command count = 6258 ] 
11:40:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
11:40:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:40:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D510>, <py_sfcl.PySEnhancedCmdData object at 0x0626D6C0>, <None>, <py_sfcl.Command23 object at 0x0627DF00>) , Command count = 6259 ] 
11:40:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:40:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:40:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06216810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627D3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AEA0>, <None>, <py_sfcl.Command23 object at 0x0627D870>) , Command count = 6260 ] 
11:40:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:40:57: [GO4_globalInitCard]### Switch to Specify Card Type
11:40:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:40:59: Host Frequency set to 25000 KHz
11:40:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:40:59: [GO18_globalSetVolt]### Set Host Voltage value.
11:40:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x062686F0>, 0x0, True) , Command count = 6261 ] 
11:40:59: [GO18_globalSetVolt]### Host voltage value is set.
11:40:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D240>, 0x0, False) , Command count = 6262 ] 
11:40:59: [GO18_globalSetVolt]### Host voltage value is set.
11:40:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6263 ] 
11:40:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:40:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6264 ] 
11:40:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:40:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:40:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:40:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:40:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:40:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6265 ] 
11:40:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:40:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268A80>, <py_sfcl.CommandDataDefinition object at 0x06268A50>) , Command count = 6266 ] 
11:40:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0539E180>, <py_sfcl.CommandDataDefinition object at 0x062690C0>) , Command count = 6267 ] 
11:40:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:40:59: [ SetCardRCA(0x1, 0xD555) , Command count = 6268 ] 
11:41:00: [DVTCommonLib]### Identification :Idenfication of card completed 

11:41:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:41:00: Host Frequency set to 25000 KHz
11:41:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:41:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:00: ####CSD Registe 2.0 Values####
11:41:00: CSD_STRUCTURE                                 :0x1
11:41:00: Reserv1                                       :0x0
11:41:00: Time Access 1 TAAC                            :0xe
11:41:00: Time Access 2 NSAC*100                        :0x0
11:41:00: Data Transfer Rate TRAN_SPEED                 :0x32
11:41:00: Card Command Classess CCC                     :0x5b5
11:41:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:00: DSR(driver stage register)  DSR_IMP           :0x0
11:41:00: Reserv2                                       :0x0
11:41:00: Device Size C_SIZE                            :0xedc8
11:41:00: Reserv3                                       :0x0
11:41:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:00: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:00: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:00: Reserv4                                       :0x0
11:41:00: Write Speed Factor R2W_FACTOR                 :0x2
11:41:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:00: FILE_FORMAT_GRP                               :0x0
11:41:00: COPY flag                                     :0x1
11:41:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:00: File_Format                                   :0x0
11:41:00: CRC                                           :0x0
11:41:00: ####CSD Registe Values####  

11:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:41:00: [GetSCRRegisterEntry] Passed
11:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:41:00: Data_Status_After Erases          : 0
11:41:00: CPRM Security Support             : No Security
11:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:41:00: Spec. Version                     : Version 3.0X
11:41:00: Extended Security Support         : Extended_Security_Not_Supported
11:41:00: Command Support                   : COMMAND_SUPPORT
11:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062689F0>, <py_sfcl.CommandDataDefinition object at 0x06268CF0>) , Command count = 6269 ] 
11:41:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062168D0>, <py_sfcl.CommandDataDefinition object at 0x0627DCC0>) , Command count = 6270 ] 
11:41:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:41:00: [ SetBusWidth(0x4) , Command count = 6271 ] 
11:41:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:41:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06324150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6272 ] 
11:41:00: Protected Area Size 0x28000
11:41:00: Bus Width           2
11:41:00: Secure Mode         0
11:41:00: Speed  Class        4
11:41:00: Perf Move           0
11:41:00: Au Size             9
11:41:00: Erase Size          15
11:41:00: Erase Timeout       1
11:41:00: Erase offset        1
11:41:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:41:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:41:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6273 ] 
11:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:41:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:41:00: Host Frequency set to 100000 KHz
11:41:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:41:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:00: ####CSD Registe 2.0 Values####
11:41:00: CSD_STRUCTURE                                 :0x1
11:41:00: Reserv1                                       :0x0
11:41:00: Time Access 1 TAAC                            :0xe
11:41:00: Time Access 2 NSAC*100                        :0x0
11:41:00: Data Transfer Rate TRAN_SPEED                 :0xb
11:41:00: Card Command Classess CCC                     :0x5b5
11:41:00: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:00: DSR(driver stage register)  DSR_IMP           :0x0
11:41:00: Reserv2                                       :0x0
11:41:00: Device Size C_SIZE                            :0xedc8
11:41:00: Reserv3                                       :0x0
11:41:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:01: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:01: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:01: Reserv4                                       :0x0
11:41:01: Write Speed Factor R2W_FACTOR                 :0x2
11:41:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:01: FILE_FORMAT_GRP                               :0x0
11:41:01: COPY flag                                     :0x1
11:41:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:01: File_Format                                   :0x0
11:41:01: CRC                                           :0x0
11:41:01: ####CSD Registe Values####  

11:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268540>, <py_sfcl.CommandDataDefinition object at 0x0626D8D0>) , Command count = 6274 ] 
11:41:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D060>, <py_sfcl.CommandDataDefinition object at 0x0627ABA0>) , Command count = 6275 ] 
11:41:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:41:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:41:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:41:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06268660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0627A9F0>, <py_sfcl.PySEnhancedCmdData object at 0x0627AAE0>, <None>, <py_sfcl.Command23 object at 0x0627A690>) , Command count = 6276 ] 
11:41:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:41:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
11:41:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:41:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627AA50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06269030>, <None>, <py_sfcl.Command23 object at 0x0627D480>) , Command count = 6277 ] 
11:41:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:41:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:41:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062695A0>, <py_sfcl.PySEnhancedCmdData object at 0x062694B0>, <None>, <py_sfcl.Command23 object at 0x06269600>) , Command count = 6278 ] 
11:41:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:41:02: [GO4_globalInitCard]### Switch to Specify Card Type
11:41:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:41:04: Host Frequency set to 25000 KHz
11:41:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:41:04: [GO18_globalSetVolt]### Set Host Voltage value.
11:41:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0627D570>, 0x0, True) , Command count = 6279 ] 
11:41:04: [GO18_globalSetVolt]### Host voltage value is set.
11:41:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x061AF060>, 0x0, False) , Command count = 6280 ] 
11:41:04: [GO18_globalSetVolt]### Host voltage value is set.
11:41:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6281 ] 
11:41:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:41:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6282 ] 
11:41:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:41:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:41:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:41:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:41:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6283 ] 
11:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:41:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273D80>, <py_sfcl.CommandDataDefinition object at 0x06268E70>) , Command count = 6284 ] 
11:41:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268030>, <py_sfcl.CommandDataDefinition object at 0x0626DD80>) , Command count = 6285 ] 
11:41:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:41:04: [ SetCardRCA(0x1, 0xD555) , Command count = 6286 ] 
11:41:04: [DVTCommonLib]### Identification :Idenfication of card completed 

11:41:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:41:05: Host Frequency set to 25000 KHz
11:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:05: ####CSD Registe 2.0 Values####
11:41:05: CSD_STRUCTURE                                 :0x1
11:41:05: Reserv1                                       :0x0
11:41:05: Time Access 1 TAAC                            :0xe
11:41:05: Time Access 2 NSAC*100                        :0x0
11:41:05: Data Transfer Rate TRAN_SPEED                 :0x32
11:41:05: Card Command Classess CCC                     :0x5b5
11:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:05: DSR(driver stage register)  DSR_IMP           :0x0
11:41:05: Reserv2                                       :0x0
11:41:05: Device Size C_SIZE                            :0xedc8
11:41:05: Reserv3                                       :0x0
11:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:05: Reserv4                                       :0x0
11:41:05: Write Speed Factor R2W_FACTOR                 :0x2
11:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:05: FILE_FORMAT_GRP                               :0x0
11:41:05: COPY flag                                     :0x1
11:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:05: File_Format                                   :0x0
11:41:05: CRC                                           :0x0
11:41:05: ####CSD Registe Values####  

11:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:41:05: [GetSCRRegisterEntry] Passed
11:41:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:41:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:41:05: Data_Status_After Erases          : 0
11:41:05: CPRM Security Support             : No Security
11:41:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:41:05: Spec. Version                     : Version 3.0X
11:41:05: Extended Security Support         : Extended_Security_Not_Supported
11:41:05: Command Support                   : COMMAND_SUPPORT
11:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF90>, <py_sfcl.CommandDataDefinition object at 0x06269A20>) , Command count = 6287 ] 
11:41:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062688D0>, <py_sfcl.CommandDataDefinition object at 0x062689C0>) , Command count = 6288 ] 
11:41:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:41:05: [ SetBusWidth(0x4) , Command count = 6289 ] 
11:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6290 ] 
11:41:05: Protected Area Size 0x28000
11:41:05: Bus Width           2
11:41:05: Secure Mode         0
11:41:05: Speed  Class        4
11:41:05: Perf Move           0
11:41:05: Au Size             9
11:41:05: Erase Size          15
11:41:05: Erase Timeout       1
11:41:05: Erase offset        1
11:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:41:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:41:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6291 ] 
11:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:41:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:41:05: Host Frequency set to 100000 KHz
11:41:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:05: ####CSD Registe 2.0 Values####
11:41:05: CSD_STRUCTURE                                 :0x1
11:41:05: Reserv1                                       :0x0
11:41:05: Time Access 1 TAAC                            :0xe
11:41:05: Time Access 2 NSAC*100                        :0x0
11:41:05: Data Transfer Rate TRAN_SPEED                 :0xb
11:41:05: Card Command Classess CCC                     :0x5b5
11:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:05: DSR(driver stage register)  DSR_IMP           :0x0
11:41:05: Reserv2                                       :0x0
11:41:05: Device Size C_SIZE                            :0xedc8
11:41:05: Reserv3                                       :0x0
11:41:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:06: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:06: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:06: Reserv4                                       :0x0
11:41:06: Write Speed Factor R2W_FACTOR                 :0x2
11:41:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:06: FILE_FORMAT_GRP                               :0x0
11:41:06: COPY flag                                     :0x1
11:41:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:06: File_Format                                   :0x0
11:41:06: CRC                                           :0x0
11:41:06: ####CSD Registe Values####  

11:41:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D750>, <py_sfcl.CommandDataDefinition object at 0x0626D480>) , Command count = 6292 ] 
11:41:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:41:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F60>, <py_sfcl.CommandDataDefinition object at 0x062692A0>) , Command count = 6293 ] 
11:41:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
11:41:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


11:41:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:41:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062801E0>, <py_sfcl.PySEnhancedCmdData object at 0x0626D570>, <None>, <py_sfcl.Command23 object at 0x06269390>) , Command count = 6294 ] 
11:41:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:41:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
11:41:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
11:41:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0626D4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06273EA0>, <None>, <py_sfcl.Command23 object at 0x06269060>) , Command count = 6295 ] 
11:41:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

11:41:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
11:41:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062764B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06269CF0>, <py_sfcl.PySEnhancedCmdData object at 0x062691E0>, <None>, <py_sfcl.Command23 object at 0x06273630>) , Command count = 6296 ] 
11:41:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

11:41:07: [GO4_globalInitCard]### Switch to Specify Card Type
11:41:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:41:09: Host Frequency set to 25000 KHz
11:41:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:41:09: [GO18_globalSetVolt]### Set Host Voltage value.
11:41:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
11:41:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06276D20>, 0x0, True) , Command count = 6297 ] 
11:41:09: [GO18_globalSetVolt]### Host voltage value is set.
11:41:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
11:41:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06216A80>, 0x0, False) , Command count = 6298 ] 
11:41:09: [GO18_globalSetVolt]### Host voltage value is set.
11:41:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6299 ] 
11:41:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
11:41:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6300 ] 
11:41:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
11:41:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
11:41:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
11:41:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
11:41:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
11:41:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6301 ] 
11:41:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
11:41:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
11:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py_sfcl.CommandDataDefinition object at 0x0626D600>) , Command count = 6302 ] 
11:41:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
11:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py_sfcl.CommandDataDefinition object at 0x062693C0>) , Command count = 6303 ] 
11:41:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
11:41:09: [ SetCardRCA(0x1, 0xD555) , Command count = 6304 ] 
11:41:09: [DVTCommonLib]### Identification :Idenfication of card completed 

11:41:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
11:41:10: Host Frequency set to 25000 KHz
11:41:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
11:41:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:10: ####CSD Registe 2.0 Values####
11:41:10: CSD_STRUCTURE                                 :0x1
11:41:10: Reserv1                                       :0x0
11:41:10: Time Access 1 TAAC                            :0xe
11:41:10: Time Access 2 NSAC*100                        :0x0
11:41:10: Data Transfer Rate TRAN_SPEED                 :0x32
11:41:10: Card Command Classess CCC                     :0x5b5
11:41:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:10: DSR(driver stage register)  DSR_IMP           :0x0
11:41:10: Reserv2                                       :0x0
11:41:10: Device Size C_SIZE                            :0xedc8
11:41:10: Reserv3                                       :0x0
11:41:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:10: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:10: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:10: Reserv4                                       :0x0
11:41:10: Write Speed Factor R2W_FACTOR                 :0x2
11:41:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:10: FILE_FORMAT_GRP                               :0x0
11:41:10: COPY flag                                     :0x1
11:41:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:10: File_Format                                   :0x0
11:41:10: CRC                                           :0x0
11:41:10: ####CSD Registe Values####  

11:41:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
11:41:10: [GetSCRRegisterEntry] Passed
11:41:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
11:41:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
11:41:10: Data_Status_After Erases          : 0
11:41:10: CPRM Security Support             : No Security
11:41:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
11:41:10: Spec. Version                     : Version 3.0X
11:41:10: Extended Security Support         : Extended_Security_Not_Supported
11:41:10: Command Support                   : COMMAND_SUPPORT
11:41:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

11:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py_sfcl.CommandDataDefinition object at 0x06280120>) , Command count = 6305 ] 
11:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
11:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py_sfcl.CommandDataDefinition object at 0x062691B0>) , Command count = 6306 ] 
11:41:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
11:41:10: [ SetBusWidth(0x4) , Command count = 6307 ] 
11:41:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
11:41:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063242D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6308 ] 
11:41:10: Protected Area Size 0x28000
11:41:10: Bus Width           2
11:41:10: Secure Mode         0
11:41:10: Speed  Class        4
11:41:10: Perf Move           0
11:41:10: Au Size             9
11:41:10: Erase Size          15
11:41:10: Erase Timeout       1
11:41:10: Erase offset        1
11:41:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

11:41:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
11:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
11:41:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6309 ] 
11:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
11:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

11:41:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
11:41:10: Host Frequency set to 100000 KHz
11:41:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
11:41:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
11:41:10: ####CSD Registe 2.0 Values####
11:41:10: CSD_STRUCTURE                                 :0x1
11:41:10: Reserv1                                       :0x0
11:41:10: Time Access 1 TAAC                            :0xe
11:41:10: Time Access 2 NSAC*100                        :0x0
11:41:10: Data Transfer Rate TRAN_SPEED                 :0xb
11:41:10: Card Command Classess CCC                     :0x5b5
11:41:10: Max Read Data Block Length  READ_BL_LEN       :0x9
11:41:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
11:41:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
11:41:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
11:41:10: DSR(driver stage register)  DSR_IMP           :0x0
11:41:10: Reserv2                                       :0x0
11:41:10: Device Size C_SIZE                            :0xedc8
11:41:10: Reserv3                                       :0x0
11:41:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
11:41:11: Erase Sector Size SECTOR_SIZE                 :0x7f
11:41:11: Write Protect Group Size WP_GRP_SIZE          :0x0
11:41:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
11:41:11: Reserv4                                       :0x0
11:41:11: Write Speed Factor R2W_FACTOR                 :0x2
11:41:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
11:41:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
11:41:11: FILE_FORMAT_GRP                               :0x0
11:41:11: COPY flag                                     :0x1
11:41:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
11:41:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
11:41:11: File_Format                                   :0x0
11:41:11: CRC                                           :0x0
11:41:11: ####CSD Registe Values####  

11:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py_sfcl.CommandDataDefinition object at 0x0627DE70>) , Command count = 6310 ] 
11:41:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
11:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062696F0>, <py_sfcl.CommandDataDefinition object at 0x06269AE0>) , Command count = 6311 ] 
11:41:11: [ GetCardStatus() , Command count = 6312 ] 
11:41:11: CMD7[ SEL_DESELECT_CARD ] Failed with an exception
11:41:11: Failed Running script <module 'STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xF5L (245) executing command 'SendBasicCommand'
   Description : POWER_ON_OFF_GENERAL_ERR
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x062696F0>, <py_sfcl.CommandDataDefinition object at 0x06269AE0>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>
 
11:41:12: ########################################
11:41:12: ########################################
11:41:12: Stated Running script STPTRNSABRTST36_DVT_ST_CMD0_2_14_Before_Data_Overlap 
11:41:12: ########################################
11:41:12: ###### Running STPTRNSABRTST36_DVT_ST_CMD0_2_14_Before_Data_Overlap Test ###### 

11:41:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:41:12: Failed Running script <module 'STPTRNSABRTST36_DVT_ST_CMD0_2_14_Before_Data_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST36_DVT_ST_CMD0_2_14_Before_Data_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
11:41:12: ########################################
11:41:12: ########################################
11:41:12: Stated Running script STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump 
11:41:12: ########################################
11:41:12: ###### Running STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump Test ###### 

11:41:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:41:12: Failed Running script <module 'STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
11:41:12: ########################################
11:41:12: ########################################
11:41:12: Stated Running script STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap 
11:41:12: ########################################
11:41:12: ###### Running STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap Test ###### 

11:41:12: [GO4_globalInitCard]### Switch to Specify Card Type
11:41:12: Failed Running script <module 'STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
11:41:12: ########################################
11:41:12: 


11:41:12: ########################################
11:41:12: The Script <class 'STPTRNSABRTST02_2_Call_All_CMD0.call_All_CMD0_2'> had 7 error on running 
11:41:12: ########################################

2016-11-21 11:41:13: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST02_2_Call_All_CMD0.py", line 113, in RunTestProcedure
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST02_2_Call_All_CMD0.py", line 86, in Run



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'STPTRNSABRTST<NUM>_<NUM>_Call_All_CMD<NUM>.call_All_CMD<NUM>_<NUM>'> had <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST02_2_Call_All_CMD0.call_All_CMD0_2'> had 7 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   6293 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D750>, <py     1605.450         3.2   read=  0, write=  0                 0       
   6294 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06273960>, py_     1605.454         9.9   read=  0, write=  0                 0       
   6295 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0627D960>, py_     1605.782         9.0   read=  0, write=  0                 0       
   6296 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0626D3F0>, py_     1605.791       476.5   read=  0, write=  0                 0       
   6297 SetVolt(<py_sfcl.SDVoltage object at 0x061AF060>, 0, T)                    1608.378        17.9   read=  0, write=  0                 0       
   6298 SetVolt(<py_sfcl.SDVoltage object at 0x06276D20>, 0, F)                    1608.396        28.3   read=  0, write=  0                 0       
   6299 CardSetTimeOut(1F4, FA, 64)                                                1608.425         1.8   read=  0, write=  0                 0       
   6300 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,     1608.428       216.8   read=  0, write=  0                 C1FF8000
   6301 SwitchVolt_CMD11(T, 0, 5)                                                  1608.645         8.4   read=  0, write=  0                 0       
   6302 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273F60>, <py     1608.654         4.1   read=  0, write=  0                 0       
   6303 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273930>, <py     1608.658         3.6   read=  0, write=  0                 0       
   6304 SetCardRCA(1, D555)                                                        1608.662         1.3   read=  0, write=  0                 'Obj'   
   6305 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AE10>, <py     1608.840         3.2   read=  0, write=  0                 0       
   6306 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276300>, <py     1608.844         6.0   read=  0, write=  0                 0       
   6307 SetBusWidth(4)                                                             1608.850         3.5   read=  0, write=  0                 0       
   6308 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0627ADB0>, <200/20     1608.853         7.2   read=  0, write=  0                 0       
   6309 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                           1609.029         9.6   read=  0, write=  0                 0       
   6310 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626DF60>, <py     1609.952       510.2   read=  0, write=  0                 0       
   6311 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273A50>, <py     1610.462         5.6   read=  0, write=  0                 F5      
   6312 GetCardStatus()                                                            1610.468         5.9   read=  0, write=  0                 'Obj'   

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:26:50


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2708.286044   NA                                  0       
    113 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2653.147872   NA                                  0       
     80 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2642.313780   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062769F0>, <py           NA  641.937079   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268BA0>, <py           NA  610.034265   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627AA20>, <py           NA  603.140749   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268D80>, <py           NA  589.929030   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06273180>, <py           NA  582.910248   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D8A0>, <py           NA  578.043917   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D6F0>, <py           NA  578.038182   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276840>, <py           NA  573.848887   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06268B40>, <py           NA  561.007833   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A840>, <py           NA  559.779630   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0626D900>, <py           NA  558.981554   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06216750>, <py           NA  555.973073   NA                                  0       
    250 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x053FB4E0>, py_           NA  551.605388   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0627A1E0>, <py           NA  547.925304   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053EFC60>, <py           NA  545.898723   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06269C60>, <py           NA  544.970250   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06276C60>, <py           NA  543.941867   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 6311


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:26:51.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST02_2_Call_All_CMD0.call_All_CMD0_2'> had 7 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

