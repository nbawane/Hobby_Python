18:06:19: Sata Disconnector Board found in COM1.
18:06:23: *****************************************************

18:06:23: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

18:06:23: *                                                   *

18:06:23: *  Compatibility with this version is not verified! *

18:06:23: *****************************************************

18:06:26: [ DeviceSetupCompletion() , Command count = 7 ] 
18:06:26: Testname Mapping: ScriptName=[CH5666_CallAll_SCR_SDStatus] -> TestId=[CH5666]
18:06:26: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
18:06:26: [ GetPhysicalChipsInfo() , Command count = 9 ] 
18:06:26: [ GetFileSize(0xEA) , Command count = 10 ] 
18:06:26: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
18:06:26: [ GetFileSize(0x16) , Command count = 12 ] 
18:06:26: [ GetCardStatus() , Command count = 13 ] 
18:06:26: [ GetFileSize(0x18) , Command count = 14 ] 
18:06:26: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
18:06:26: [ GetFileSize(0x15) , Command count = 16 ] 
18:06:26: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
18:06:28: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
18:06:28: [ GetFileSize(0xE) , Command count = 18 ] 
18:06:28: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
18:06:28: [ GetFileSize(0x1E) , Command count = 20 ] 
18:06:28: [ GetCardStatus() , Command count = 21 ] 
18:06:28: [ GetFileSize(0x21) , Command count = 22 ] 
18:06:28: [ GetCardStatus() , Command count = 23 ] 
18:06:28: [ GetFileSize(0x33) , Command count = 24 ] 
18:06:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
18:06:28: [ GetFileSize(0x1F) , Command count = 26 ] 
18:06:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
18:06:28: [ GetFileSize(0x2A) , Command count = 28 ] 
18:06:28: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
18:06:28: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
18:06:28: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
18:06:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
18:06:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
18:06:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
18:06:28: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
18:06:28: [ GetFileSize(0x33) , Command count = 36 ] 
18:06:28: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
18:06:28: [ GetFileSize(0x33) , Command count = 38 ] 
18:06:28: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
18:06:28: [ GetIpVersionInfo() , Command count = 40 ] 
18:06:28: [ GetPhysicalChipsInfo() , Command count = 41 ] 
18:06:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A7E0>, <0x200/0x200, Arb>) , Command count = 42 ] 
18:06:29: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=CH5666 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 18:06:28
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : CH5666
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 20641732709
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: CH5666_CallAll_SCR_SDStatus >>>>>>>>>>>>>>>



18:06:32: MaxLba of the card: 0x3B72400 
18:06:34: ###### Running CallAll_SCR_SDStatus scripts  ######
18:06:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables STARTED
18:06:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:06:34: Perform Power Off and On.
18:06:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:06:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 44 ] 
18:06:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:06:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:06:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:06:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:06:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:06:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:06:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA660>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 45 ] 
18:06:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:06:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA420>, <py_sfcl.CommandDataDefinition object at 0x05DAAE40>) , Command count = 46 ] 
18:06:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:06:37: [ SetCardRCA(0x1, 0xD555) , Command count = 47 ] 
18:06:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:06:43: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
18:06:43: [GO7_globalPreTestingSettings]### Default Initialization Start
18:06:43: [DVTCommonLib]###  SwitchHostVoltageRegion called
18:06:43: [ SwitchHostVoltageRegion(False) , Command count = 48 ] 
18:06:43: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

18:06:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 49 ] 
18:06:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 50 ] 
18:06:46: [ CardInit() , Command count = 51 ] 
18:06:46: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 52 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:06:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:06:46: ####CSD Registe 2.0 Values####
18:06:46: CSD_STRUCTURE                                 :0x1
18:06:46: Reserv1                                       :0x0
18:06:46: Time Access 1 TAAC                            :0xe
18:06:46: Time Access 2 NSAC*100                        :0x0
18:06:46: Data Transfer Rate TRAN_SPEED                 :0x32
18:06:46: Card Command Classess CCC                     :0x5b5
18:06:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:06:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:06:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:06:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:06:46: DSR(driver stage register)  DSR_IMP           :0x0
18:06:46: Reserv2                                       :0x0
18:06:46: Device Size C_SIZE                            :0xedc8
18:06:46: Reserv3                                       :0x0
18:06:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:06:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:06:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:06:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:06:46: Reserv4                                       :0x0
18:06:46: Write Speed Factor R2W_FACTOR                 :0x2
18:06:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:06:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:06:46: FILE_FORMAT_GRP                               :0x0
18:06:46: COPY flag                                     :0x1
18:06:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:06:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:06:46: File_Format                                   :0x0
18:06:46: CRC                                           :0x0
18:06:46: ####CSD Registe Values####  

18:06:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:06:46: ProductSerialNumber = 0x23482900
18:06:46: CardMaximumLBA      = 0x3b72400
18:06:46: CardCapacity        = 32G
18:06:46: Is card secure      = 0
18:06:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:06:46: [GO7_globalPreTestingSettings]### Default Initialization Completed 


18:06:46: [GO4_globalInitCard]### Switch to Specify Card Type
18:06:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:06:48: Host Frequency set to 25000 KHz
18:06:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:06:48: [GO18_globalSetVolt]### Set Host Voltage value.
18:06:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:06:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D600>, 0x0, True) , Command count = 53 ] 
18:06:48: [GO18_globalSetVolt]### Host voltage value is set.
18:06:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:06:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DC30>, 0x0, False) , Command count = 54 ] 
18:06:48: [GO18_globalSetVolt]### Host voltage value is set.
18:06:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 55 ] 
18:06:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:06:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 56 ] 
18:06:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:06:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:06:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:06:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:06:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:06:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 57 ] 
18:06:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:06:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E2D660>) , Command count = 58 ] 
18:06:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D540>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 59 ] 
18:06:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:06:48: [ SetCardRCA(0x1, 0xD555) , Command count = 60 ] 
18:06:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:06:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:06:48: Host Frequency set to 25000 KHz
18:06:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:06:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:06:48: ####CSD Registe 2.0 Values####
18:06:48: CSD_STRUCTURE                                 :0x1
18:06:48: Reserv1                                       :0x0
18:06:48: Time Access 1 TAAC                            :0xe
18:06:48: Time Access 2 NSAC*100                        :0x0
18:06:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:06:48: Card Command Classess CCC                     :0x5b5
18:06:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:06:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:06:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:06:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:06:48: DSR(driver stage register)  DSR_IMP           :0x0
18:06:48: Reserv2                                       :0x0
18:06:48: Device Size C_SIZE                            :0xedc8
18:06:48: Reserv3                                       :0x0
18:06:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:06:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:06:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:06:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:06:48: Reserv4                                       :0x0
18:06:48: Write Speed Factor R2W_FACTOR                 :0x2
18:06:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:06:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:06:48: FILE_FORMAT_GRP                               :0x0
18:06:48: COPY flag                                     :0x1
18:06:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:06:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:06:48: File_Format                                   :0x0
18:06:48: CRC                                           :0x0
18:06:48: ####CSD Registe Values####  

18:06:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:06:48: [GetSCRRegisterEntry] Passed
18:06:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:06:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:06:48: Data_Status_After Erases          : 0
18:06:48: CPRM Security Support             : No Security
18:06:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:06:48: Spec. Version                     : Version 3.0X
18:06:48: Extended Security Support         : Extended_Security_Not_Supported
18:06:48: Command Support                   : COMMAND_SUPPORT
18:06:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF00>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 61 ] 
18:06:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E2DED0>) , Command count = 62 ] 
18:06:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:06:48: [ SetBusWidth(0x4) , Command count = 63 ] 
18:06:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:06:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
18:06:48: Protected Area Size 0x28000
18:06:48: Bus Width           2
18:06:48: Secure Mode         0
18:06:48: Speed  Class        4
18:06:48: Perf Move           0
18:06:48: Au Size             9
18:06:48: Erase Size          15
18:06:48: Erase Timeout       1
18:06:48: Erase offset        1
18:06:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:06:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:06:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:06:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 65 ] 
18:06:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:06:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:06:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:06:48: Host Frequency set to 100000 KHz
18:06:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:06:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:06:48: ####CSD Registe 2.0 Values####
18:06:48: CSD_STRUCTURE                                 :0x1
18:06:48: Reserv1                                       :0x0
18:06:48: Time Access 1 TAAC                            :0xe
18:06:48: Time Access 2 NSAC*100                        :0x0
18:06:48: Data Transfer Rate TRAN_SPEED                 :0xb
18:06:48: Card Command Classess CCC                     :0x5b5
18:06:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:06:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:06:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:06:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:06:48: DSR(driver stage register)  DSR_IMP           :0x0
18:06:48: Reserv2                                       :0x0
18:06:48: Device Size C_SIZE                            :0xedc8
18:06:48: Reserv3                                       :0x0
18:06:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:06:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:06:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:06:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:06:48: Reserv4                                       :0x0
18:06:48: Write Speed Factor R2W_FACTOR                 :0x2
18:06:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:06:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:06:48: FILE_FORMAT_GRP                               :0x0
18:06:48: COPY flag                                     :0x1
18:06:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:06:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:06:48: File_Format                                   :0x0
18:06:48: CRC                                           :0x0
18:06:48: ####CSD Registe Values####  

18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D870>, <py_sfcl.CommandDataDefinition object at 0x05E2DD80>) , Command count = 66 ] 
18:06:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:06:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E2DA50>) , Command count = 67 ] 
18:06:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:06:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:06:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 68 ] 
18:06:48: Protected Area Size 0x28000
18:06:48: Bus Width           2
18:06:48: Secure Mode         0
18:06:48: Speed  Class        4
18:06:48: Perf Move           0
18:06:48: Au Size             9
18:06:48: Erase Size          15
18:06:48: Erase Timeout       1
18:06:48: Erase offset        1
18:06:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:06:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:06:48: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:06:48: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:06:48: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables COMPLETED
18:06:48: ########################################
18:06:48: Stated Running script CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest 
18:06:48: ########################################
18:06:49: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest.py]###### SCR SD Status Structure test.  ######
18:06:49: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest] TEST SCRIPT EXECUTION IS STARTED.
18:06:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:06:49: Perform Power Off and On.
18:06:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:06:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 69 ] 
18:06:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:06:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:06:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:06:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:06:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:06:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:06:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E373C0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 70 ] 
18:06:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:06:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 71 ] 
18:06:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:06:51: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
18:06:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:06:51: [GO4_globalInitCard]### Switch to Specify Card Type
18:06:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:06:53: Host Frequency set to 25000 KHz
18:06:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:06:53: [GO18_globalSetVolt]### Set Host Voltage value.
18:06:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:06:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37C00>, 0x0, True) , Command count = 73 ] 
18:06:53: [GO18_globalSetVolt]### Host voltage value is set.
18:06:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:06:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37D50>, 0x0, False) , Command count = 74 ] 
18:06:53: [GO18_globalSetVolt]### Host voltage value is set.
18:06:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 75 ] 
18:06:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:06:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 76 ] 
18:06:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:06:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:06:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:06:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:06:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:06:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 77 ] 
18:06:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:06:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37F30>) , Command count = 78 ] 
18:06:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E376C0>) , Command count = 79 ] 
18:06:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:06:53: [ SetCardRCA(0x1, 0xD555) , Command count = 80 ] 
18:06:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:06:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:06:53: Host Frequency set to 25000 KHz
18:06:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:06:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:06:53: ####CSD Registe 2.0 Values####
18:06:53: CSD_STRUCTURE                                 :0x1
18:06:53: Reserv1                                       :0x0
18:06:53: Time Access 1 TAAC                            :0xe
18:06:53: Time Access 2 NSAC*100                        :0x0
18:06:53: Data Transfer Rate TRAN_SPEED                 :0x32
18:06:53: Card Command Classess CCC                     :0x5b5
18:06:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:06:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:06:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:06:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:06:53: DSR(driver stage register)  DSR_IMP           :0x0
18:06:53: Reserv2                                       :0x0
18:06:53: Device Size C_SIZE                            :0xedc8
18:06:53: Reserv3                                       :0x0
18:06:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:06:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:06:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:06:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:06:53: Reserv4                                       :0x0
18:06:53: Write Speed Factor R2W_FACTOR                 :0x2
18:06:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:06:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:06:53: FILE_FORMAT_GRP                               :0x0
18:06:53: COPY flag                                     :0x1
18:06:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:06:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:06:53: File_Format                                   :0x0
18:06:53: CRC                                           :0x0
18:06:53: ####CSD Registe Values####  

18:06:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:06:53: [GetSCRRegisterEntry] Passed
18:06:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:06:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:06:53: Data_Status_After Erases          : 0
18:06:53: CPRM Security Support             : No Security
18:06:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:06:53: Spec. Version                     : Version 3.0X
18:06:53: Extended Security Support         : Extended_Security_Not_Supported
18:06:53: Command Support                   : COMMAND_SUPPORT
18:06:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A80>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 81 ] 
18:06:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E377B0>) , Command count = 82 ] 
18:06:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:06:53: [ SetBusWidth(0x4) , Command count = 83 ] 
18:06:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:06:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 84 ] 
18:06:53: Protected Area Size 0x28000
18:06:53: Bus Width           2
18:06:53: Secure Mode         0
18:06:53: Speed  Class        4
18:06:53: Perf Move           0
18:06:53: Au Size             9
18:06:53: Erase Size          15
18:06:53: Erase Timeout       1
18:06:53: Erase offset        1
18:06:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:06:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:06:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:06:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 85 ] 
18:06:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:06:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:06:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:06:53: Host Frequency set to 100000 KHz
18:06:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:06:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:06:53: ####CSD Registe 2.0 Values####
18:06:53: CSD_STRUCTURE                                 :0x1
18:06:53: Reserv1                                       :0x0
18:06:53: Time Access 1 TAAC                            :0xe
18:06:53: Time Access 2 NSAC*100                        :0x0
18:06:53: Data Transfer Rate TRAN_SPEED                 :0xb
18:06:53: Card Command Classess CCC                     :0x5b5
18:06:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:06:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:06:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:06:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:06:53: DSR(driver stage register)  DSR_IMP           :0x0
18:06:53: Reserv2                                       :0x0
18:06:53: Device Size C_SIZE                            :0xedc8
18:06:53: Reserv3                                       :0x0
18:06:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:06:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:06:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:06:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:06:53: Reserv4                                       :0x0
18:06:53: Write Speed Factor R2W_FACTOR                 :0x2
18:06:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:06:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:06:53: FILE_FORMAT_GRP                               :0x0
18:06:53: COPY flag                                     :0x1
18:06:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:06:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:06:53: File_Format                                   :0x0
18:06:53: CRC                                           :0x0
18:06:53: ####CSD Registe Values####  

18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D80>, <py_sfcl.CommandDataDefinition object at 0x05E373F0>) , Command count = 86 ] 
18:06:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37930>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 87 ] 
18:06:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:06:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:06:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:06:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:06:53: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest] LOOP NUMBER 0 IS STARTED.
18:06:53: [GetSCRRegisterEntry] Passed
18:06:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:06:53: [GetSCRRegisterEntry] Passed
18:06:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:06:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:06:53: Data_Status_After Erases          : 0
18:06:53: CPRM Security Support             : No Security
18:06:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:06:53: Spec. Version                     : Version 3.0X
18:06:53: Extended Security Support         : Extended_Security_Not_Supported
18:06:53: Command Support                   : COMMAND_SUPPORT
18:06:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E37540>) , Command count = 88 ] 
18:06:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E37AE0>) , Command count = 89 ] 
18:06:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C90>, <py_sfcl.CommandDataDefinition object at 0x05E37CC0>) , Command count = 90 ] 
18:06:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E10>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 91 ] 
18:06:53: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
18:06:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 92 ] 
18:06:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37870>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 93 ] 
18:06:54: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
18:06:54: Bus Width is set to 4.
18:06:54: Bus Width is set to 4
18:06:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37600>, <py_sfcl.CommandDataDefinition object at 0x05E37B70>) , Command count = 94 ] 
18:06:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37690>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 95 ] 
18:06:54: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
18:06:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xADA26A to EndLba:0xB00443 with Increment Pattern
18:06:55: [ WrLbaNoData(0xADA26A, 0x261D9, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 96 ] 
18:06:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xADA26A to EndLba:0xB00443 with Increment Pattern 

18:06:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 97 ] 
18:06:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:55: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 98 ] 
18:06:55: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x261D9
18:06:55: [INFO] - Correct Number of Blocks are wirtten. No of Blocks written are : 0x261d9
18:06:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xADA26A to EndLba:0xB00443 with Increment Pattern
18:06:57: [ RdLbaNoData(0xADA26A, 0x261D9, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 99 ] 
18:06:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xADA26A to EndLba:0xB00443 with Increment Pattern 

18:06:57: [GetSCRRegisterEntry] Passed
18:06:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:06:57: [GetSCRRegisterEntry] Passed
18:06:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:06:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:06:57: Data_Status_After Erases          : 0
18:06:57: CPRM Security Support             : No Security
18:06:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:06:57: Spec. Version                     : Version 3.0X
18:06:57: Extended Security Support         : Extended_Security_Not_Supported
18:06:57: Command Support                   : COMMAND_SUPPORT
18:06:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:06:57: SCR_BUFFER and SCR_BUFFER_SINGLE_CMD MATCHES.
18:06:57: LOCKING the card
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E240>, <py_sfcl.CommandDataDefinition object at 0x05E3E270>) , Command count = 100 ] 
18:06:57: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:06:57: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 101 ] 
18:06:57: [ GetCardStatus() , Command count = 102 ] 
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:06:57: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:06:57: [CH5025_Utility_RandomCommandBlock]##### Failed as expected, Card is locked therefore can not write.
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:06:57: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 103 ] 
18:06:57: [ GetCardStatus() , Command count = 104 ] 
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:06:57: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:06:57: [CH5025_Utility_RandomCommandBlock]##### Failed as expected, Data is not written.
18:06:57: CLEAR the card
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E3E3F0>) , Command count = 105 ] 
18:06:57: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x101D182 to EndLba:0x101D192 with Increment Pattern
18:06:57: [ WrLbaNoData(0x101D182, 0x10, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 106 ] 
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x101D182 to EndLba:0x101D192 with Increment Pattern 

18:06:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x101D182 to EndLba:0x101D192 with Increment Pattern
18:06:57: [ RdLbaNoData(0x101D182, 0x10, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 107 ] 
18:06:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x101D182 to EndLba:0x101D192 with Increment Pattern 

18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E330>, <py_sfcl.CommandDataDefinition object at 0x05E3E4B0>) , Command count = 108 ] 
18:06:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:06:57: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest]#####  Card is not locked and Ready for Data as expected.
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E510>, <py_sfcl.CommandDataDefinition object at 0x05E3E540>) , Command count = 109 ] 
18:06:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E5D0>) , Command count = 110 ] 
18:06:57: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
18:06:57: Bus Width is set to 4.
18:06:57: Bus Width is set to 4
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E630>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 111 ] 
18:06:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:06:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E3E6F0>) , Command count = 112 ] 
18:06:57: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
18:06:57: SD_STATUS_BUFFER and SD_STATUS_BUFFER_SINGLE_CMD MATCHES.
18:06:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x32000 with Increment Pattern
18:06:59: [ WrLbaNoData(0x0, 0x32000, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 113 ] 
18:06:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x32000 with Increment Pattern 

18:06:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x32000 with Increment Pattern
18:07:02: [ RdLbaNoData(0x0, 0x32000, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 114 ] 
18:07:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x32000 with Increment Pattern 

18:07:02: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:07:02: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:07:02: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:07:02: Perform Power Off and On.
18:07:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 115 ] 
18:07:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:07:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E7E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E810>) , Command count = 116 ] 
18:07:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E870>, <py_sfcl.CommandDataDefinition object at 0x05E3E8A0>) , Command count = 117 ] 
18:07:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:07:04: [ SetCardRCA(0x1, 0xD555) , Command count = 118 ] 
18:07:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:04: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:06: Host Frequency set to 25000 KHz
18:07:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:06: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EB10>, 0x0, True) , Command count = 119 ] 
18:07:06: [GO18_globalSetVolt]### Host voltage value is set.
18:07:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E990>, 0x0, False) , Command count = 120 ] 
18:07:06: [GO18_globalSetVolt]### Host voltage value is set.
18:07:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 121 ] 
18:07:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 122 ] 
18:07:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 123 ] 
18:07:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 124 ] 
18:07:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB70>, <py_sfcl.CommandDataDefinition object at 0x05E3EBA0>) , Command count = 125 ] 
18:07:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:06: [ SetCardRCA(0x1, 0xD555) , Command count = 126 ] 
18:07:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:06: Host Frequency set to 25000 KHz
18:07:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:06: ####CSD Registe 2.0 Values####
18:07:06: CSD_STRUCTURE                                 :0x1
18:07:06: Reserv1                                       :0x0
18:07:06: Time Access 1 TAAC                            :0xe
18:07:06: Time Access 2 NSAC*100                        :0x0
18:07:06: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:06: Card Command Classess CCC                     :0x5b5
18:07:06: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:06: DSR(driver stage register)  DSR_IMP           :0x0
18:07:06: Reserv2                                       :0x0
18:07:06: Device Size C_SIZE                            :0xedc8
18:07:06: Reserv3                                       :0x0
18:07:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:06: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:06: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:06: Reserv4                                       :0x0
18:07:06: Write Speed Factor R2W_FACTOR                 :0x2
18:07:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:06: FILE_FORMAT_GRP                               :0x0
18:07:06: COPY flag                                     :0x1
18:07:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:06: File_Format                                   :0x0
18:07:06: CRC                                           :0x0
18:07:06: ####CSD Registe Values####  

18:07:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:07: [GetSCRRegisterEntry] Passed
18:07:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:07: Data_Status_After Erases          : 0
18:07:07: CPRM Security Support             : No Security
18:07:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:07: Spec. Version                     : Version 3.0X
18:07:07: Extended Security Support         : Extended_Security_Not_Supported
18:07:07: Command Support                   : COMMAND_SUPPORT
18:07:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE10>, <py_sfcl.CommandDataDefinition object at 0x05E3EC30>) , Command count = 127 ] 
18:07:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC90>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 128 ] 
18:07:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:07: [ SetBusWidth(0x4) , Command count = 129 ] 
18:07:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3ED80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 130 ] 
18:07:07: Protected Area Size 0x28000
18:07:07: Bus Width           2
18:07:07: Secure Mode         0
18:07:07: Speed  Class        4
18:07:07: Perf Move           0
18:07:07: Au Size             9
18:07:07: Erase Size          15
18:07:07: Erase Timeout       1
18:07:07: Erase offset        1
18:07:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 131 ] 
18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:07: Host Frequency set to 100000 KHz
18:07:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:07: ####CSD Registe 2.0 Values####
18:07:07: CSD_STRUCTURE                                 :0x1
18:07:07: Reserv1                                       :0x0
18:07:07: Time Access 1 TAAC                            :0xe
18:07:07: Time Access 2 NSAC*100                        :0x0
18:07:07: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:07: Card Command Classess CCC                     :0x5b5
18:07:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:07: DSR(driver stage register)  DSR_IMP           :0x0
18:07:07: Reserv2                                       :0x0
18:07:07: Device Size C_SIZE                            :0xedc8
18:07:07: Reserv3                                       :0x0
18:07:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:07: Reserv4                                       :0x0
18:07:07: Write Speed Factor R2W_FACTOR                 :0x2
18:07:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:07: FILE_FORMAT_GRP                               :0x0
18:07:07: COPY flag                                     :0x1
18:07:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:07: File_Format                                   :0x0
18:07:07: CRC                                           :0x0
18:07:07: ####CSD Registe Values####  

18:07:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EEA0>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 132 ] 
18:07:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EF30>, <py_sfcl.CommandDataDefinition object at 0x05E3EF60>) , Command count = 133 ] 
18:07:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:07: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:07:07: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:07:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:07: [GetSCRRegisterEntry] Passed
18:07:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:07: Data_Status_After Erases          : 0
18:07:07: CPRM Security Support             : No Security
18:07:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:07: Spec. Version                     : Version 3.0X
18:07:07: Extended Security Support         : Extended_Security_Not_Supported
18:07:07: Command Support                   : COMMAND_SUPPORT
18:07:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:07: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:07:07: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:07:07: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:07:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:07: [GetSCRRegisterEntry] Passed
18:07:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:07: Data_Status_After Erases          : 0
18:07:07: CPRM Security Support             : No Security
18:07:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:07: Spec. Version                     : Version 3.0X
18:07:07: Extended Security Support         : Extended_Security_Not_Supported
18:07:07: Command Support                   : COMMAND_SUPPORT
18:07:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:07: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:07: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 134 ] 
18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:07:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:07: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:09: Host Frequency set to 25000 KHz
18:07:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:09: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44030>, 0x0, True) , Command count = 135 ] 
18:07:09: [GO18_globalSetVolt]### Host voltage value is set.
18:07:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44090>, 0x0, False) , Command count = 136 ] 
18:07:09: [GO18_globalSetVolt]### Host voltage value is set.
18:07:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 137 ] 
18:07:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 138 ] 
18:07:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 139 ] 
18:07:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441E0>, <py_sfcl.CommandDataDefinition object at 0x05E44180>) , Command count = 140 ] 
18:07:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44210>, <py_sfcl.CommandDataDefinition object at 0x05E44240>) , Command count = 141 ] 
18:07:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:09: [ SetCardRCA(0x1, 0xD555) , Command count = 142 ] 
18:07:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:09: Host Frequency set to 25000 KHz
18:07:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:09: ####CSD Registe 2.0 Values####
18:07:09: CSD_STRUCTURE                                 :0x1
18:07:09: Reserv1                                       :0x0
18:07:09: Time Access 1 TAAC                            :0xe
18:07:09: Time Access 2 NSAC*100                        :0x0
18:07:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:09: Card Command Classess CCC                     :0x5b5
18:07:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:09: DSR(driver stage register)  DSR_IMP           :0x0
18:07:09: Reserv2                                       :0x0
18:07:09: Device Size C_SIZE                            :0xedc8
18:07:09: Reserv3                                       :0x0
18:07:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:09: Reserv4                                       :0x0
18:07:09: Write Speed Factor R2W_FACTOR                 :0x2
18:07:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:09: FILE_FORMAT_GRP                               :0x0
18:07:09: COPY flag                                     :0x1
18:07:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:09: File_Format                                   :0x0
18:07:09: CRC                                           :0x0
18:07:09: ####CSD Registe Values####  

18:07:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:09: [GetSCRRegisterEntry] Passed
18:07:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:09: Data_Status_After Erases          : 0
18:07:09: CPRM Security Support             : No Security
18:07:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:09: Spec. Version                     : Version 3.0X
18:07:09: Extended Security Support         : Extended_Security_Not_Supported
18:07:09: Command Support                   : COMMAND_SUPPORT
18:07:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444B0>, <py_sfcl.CommandDataDefinition object at 0x05E442D0>) , Command count = 143 ] 
18:07:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44330>, <py_sfcl.CommandDataDefinition object at 0x05E44360>) , Command count = 144 ] 
18:07:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:09: [ SetBusWidth(0x4) , Command count = 145 ] 
18:07:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 146 ] 
18:07:09: Protected Area Size 0x28000
18:07:09: Bus Width           2
18:07:09: Secure Mode         0
18:07:09: Speed  Class        4
18:07:09: Perf Move           0
18:07:09: Au Size             9
18:07:09: Erase Size          15
18:07:09: Erase Timeout       1
18:07:09: Erase offset        1
18:07:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 147 ] 
18:07:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:10: Host Frequency set to 100000 KHz
18:07:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:10: ####CSD Registe 2.0 Values####
18:07:10: CSD_STRUCTURE                                 :0x1
18:07:10: Reserv1                                       :0x0
18:07:10: Time Access 1 TAAC                            :0xe
18:07:10: Time Access 2 NSAC*100                        :0x0
18:07:10: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:10: Card Command Classess CCC                     :0x5b5
18:07:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:10: DSR(driver stage register)  DSR_IMP           :0x0
18:07:10: Reserv2                                       :0x0
18:07:10: Device Size C_SIZE                            :0xedc8
18:07:10: Reserv3                                       :0x0
18:07:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:10: Reserv4                                       :0x0
18:07:10: Write Speed Factor R2W_FACTOR                 :0x2
18:07:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:10: FILE_FORMAT_GRP                               :0x0
18:07:10: COPY flag                                     :0x1
18:07:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:10: File_Format                                   :0x0
18:07:10: CRC                                           :0x0
18:07:10: ####CSD Registe Values####  

18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E444E0>) , Command count = 148 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44540>, <py_sfcl.CommandDataDefinition object at 0x05E44570>) , Command count = 149 ] 
18:07:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E44600>) , Command count = 150 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44690>, <py_sfcl.CommandDataDefinition object at 0x05E446F0>) , Command count = 151 ] 
18:07:10: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 152 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44660>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 153 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E448A0>) , Command count = 154 ] 
18:07:10: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 155 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44990>) , Command count = 156 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E44A20>) , Command count = 157 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E44AE0>) , Command count = 158 ] 
18:07:10: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B40>, <py_sfcl.CommandDataDefinition object at 0x05E44B70>) , Command count = 159 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A80>, <py_sfcl.CommandDataDefinition object at 0x05E44BD0>) , Command count = 160 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C60>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 161 ] 
18:07:10: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CF0>, <py_sfcl.CommandDataDefinition object at 0x05E44D20>) , Command count = 162 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 163 ] 
18:07:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:10: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:07:10: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:07:10: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:10: [GetSCRRegisterEntry] Passed
18:07:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:10: Data_Status_After Erases          : 0
18:07:10: CPRM Security Support             : No Security
18:07:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:10: Spec. Version                     : Version 3.0X
18:07:10: Extended Security Support         : Extended_Security_Not_Supported
18:07:10: Command Support                   : COMMAND_SUPPORT
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:10: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:10: [GetSCRRegisterEntry] Passed
18:07:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:10: Data_Status_After Erases          : 0
18:07:10: CPRM Security Support             : No Security
18:07:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:10: Spec. Version                     : Version 3.0X
18:07:10: Extended Security Support         : Extended_Security_Not_Supported
18:07:10: Command Support                   : COMMAND_SUPPORT
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:10: [GetSCRRegisterEntry] Passed
18:07:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:10: Data_Status_After Erases          : 0
18:07:10: CPRM Security Support             : No Security
18:07:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:10: Spec. Version                     : Version 3.0X
18:07:10: Extended Security Support         : Extended_Security_Not_Supported
18:07:10: Command Support                   : COMMAND_SUPPORT
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:10: [GetSCRRegisterEntry] Passed
18:07:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:10: Data_Status_After Erases          : 0
18:07:10: CPRM Security Support             : No Security
18:07:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:10: Spec. Version                     : Version 3.0X
18:07:10: Extended Security Support         : Extended_Security_Not_Supported
18:07:10: Command Support                   : COMMAND_SUPPORT
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:10: [GetSCRRegisterEntry] Passed
18:07:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:10: Data_Status_After Erases          : 0
18:07:10: CPRM Security Support             : No Security
18:07:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:10: Spec. Version                     : Version 3.0X
18:07:10: Extended Security Support         : Extended_Security_Not_Supported
18:07:10: Command Support                   : COMMAND_SUPPORT
18:07:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:10: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:07:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 164 ] 
18:07:10: Protected Area Size 0x28000
18:07:10: Bus Width           2
18:07:10: Secure Mode         0
18:07:10: Speed  Class        4
18:07:10: Perf Move           0
18:07:10: Au Size             9
18:07:10: Erase Size          15
18:07:10: Erase Timeout       1
18:07:10: Erase offset        1
18:07:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:10: Failed Running script <module 'CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest.pyc'> with error Python argument types in
    SdLogical.WriteProductionFile(SdLogical, SdFlashManager, NoneType, str)
did not match C++ signature:
    WriteProductionFile(class SdLogical {lvalue}, class FlashManager {lvalue} flash_man, unsigned int max_lba=0, class boost::python::str {lvalue} file_path='') 
18:07:10: ########################################
18:07:10: ########################################
18:07:10: Stated Running script CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest 
18:07:10: ########################################
18:07:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]###### Test to verify ACMD51 and ACMD13 according to state diagram ###### 
18:07:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ### TEST SCRIPT EXECUTION IS STARTED. 

18:07:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Do card initialization
18:07:10: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:12: Host Frequency set to 25000 KHz
18:07:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:12: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F210>, 0x0, True) , Command count = 165 ] 
18:07:12: [GO18_globalSetVolt]### Host voltage value is set.
18:07:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F060>, 0x0, False) , Command count = 166 ] 
18:07:12: [GO18_globalSetVolt]### Host voltage value is set.
18:07:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 167 ] 
18:07:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 168 ] 
18:07:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 169 ] 
18:07:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 170 ] 
18:07:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F240>) , Command count = 171 ] 
18:07:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:12: [ SetCardRCA(0x1, 0xD555) , Command count = 172 ] 
18:07:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:12: Host Frequency set to 25000 KHz
18:07:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:12: ####CSD Registe 2.0 Values####
18:07:12: CSD_STRUCTURE                                 :0x1
18:07:12: Reserv1                                       :0x0
18:07:12: Time Access 1 TAAC                            :0xe
18:07:12: Time Access 2 NSAC*100                        :0x0
18:07:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:12: Card Command Classess CCC                     :0x5b5
18:07:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:12: DSR(driver stage register)  DSR_IMP           :0x0
18:07:12: Reserv2                                       :0x0
18:07:12: Device Size C_SIZE                            :0xedc8
18:07:12: Reserv3                                       :0x0
18:07:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:12: Reserv4                                       :0x0
18:07:12: Write Speed Factor R2W_FACTOR                 :0x2
18:07:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:12: FILE_FORMAT_GRP                               :0x0
18:07:12: COPY flag                                     :0x1
18:07:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:12: File_Format                                   :0x0
18:07:12: CRC                                           :0x0
18:07:12: ####CSD Registe Values####  

18:07:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:12: [GetSCRRegisterEntry] Passed
18:07:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:12: Data_Status_After Erases          : 0
18:07:12: CPRM Security Support             : No Security
18:07:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:12: Spec. Version                     : Version 3.0X
18:07:12: Extended Security Support         : Extended_Security_Not_Supported
18:07:12: Command Support                   : COMMAND_SUPPORT
18:07:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F4B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F2D0>) , Command count = 173 ] 
18:07:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F330>, <py_sfcl.CommandDataDefinition object at 0x05E4F360>) , Command count = 174 ] 
18:07:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:12: [ SetBusWidth(0x4) , Command count = 175 ] 
18:07:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 176 ] 
18:07:12: Protected Area Size 0x28000
18:07:12: Bus Width           2
18:07:12: Secure Mode         0
18:07:12: Speed  Class        4
18:07:12: Perf Move           0
18:07:12: Au Size             9
18:07:12: Erase Size          15
18:07:12: Erase Timeout       1
18:07:12: Erase offset        1
18:07:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 177 ] 
18:07:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:12: Host Frequency set to 100000 KHz
18:07:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:12: ####CSD Registe 2.0 Values####
18:07:12: CSD_STRUCTURE                                 :0x1
18:07:13: Reserv1                                       :0x0
18:07:13: Time Access 1 TAAC                            :0xe
18:07:13: Time Access 2 NSAC*100                        :0x0
18:07:13: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:13: Card Command Classess CCC                     :0x5b5
18:07:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:13: DSR(driver stage register)  DSR_IMP           :0x0
18:07:13: Reserv2                                       :0x0
18:07:13: Device Size C_SIZE                            :0xedc8
18:07:13: Reserv3                                       :0x0
18:07:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:13: Reserv4                                       :0x0
18:07:13: Write Speed Factor R2W_FACTOR                 :0x2
18:07:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:13: FILE_FORMAT_GRP                               :0x0
18:07:13: COPY flag                                     :0x1
18:07:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:13: File_Format                                   :0x0
18:07:13: CRC                                           :0x0
18:07:13: ####CSD Registe Values####  

18:07:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F4E0>) , Command count = 178 ] 
18:07:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 179 ] 
18:07:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values
18:07:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:13: [GetSCRRegisterEntry] Passed
18:07:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:13: Data_Status_After Erases          : 0
18:07:13: CPRM Security Support             : No Security
18:07:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:13: Spec. Version                     : Version 3.0X
18:07:13: Extended Security Support         : Extended_Security_Not_Supported
18:07:13: Command Support                   : COMMAND_SUPPORT
18:07:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:07:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 180 ] 
18:07:13: Protected Area Size 0x28000
18:07:13: Bus Width           2
18:07:13: Secure Mode         0
18:07:13: Speed  Class        4
18:07:13: Perf Move           0
18:07:13: Au Size             9
18:07:13: Erase Size          15
18:07:13: Erase Timeout       1
18:07:13: Erase offset        1
18:07:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_Load_SCR_SDStatus_Variables
18:07:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:07:13: Perform Power Off and On.
18:07:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 181 ] 
18:07:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:07:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F690>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 182 ] 
18:07:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F750>, <py_sfcl.CommandDataDefinition object at 0x05E4F780>) , Command count = 183 ] 
18:07:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:07:16: [ SetCardRCA(0x1, 0xD555) , Command count = 184 ] 
18:07:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:16: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:18: Host Frequency set to 25000 KHz
18:07:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:18: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F9F0>, 0x0, True) , Command count = 185 ] 
18:07:18: [GO18_globalSetVolt]### Host voltage value is set.
18:07:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F840>, 0x0, False) , Command count = 186 ] 
18:07:18: [GO18_globalSetVolt]### Host voltage value is set.
18:07:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 187 ] 
18:07:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 188 ] 
18:07:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 189 ] 
18:07:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F9C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F960>) , Command count = 190 ] 
18:07:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 191 ] 
18:07:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:18: [ SetCardRCA(0x1, 0xD555) , Command count = 192 ] 
18:07:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:18: Host Frequency set to 25000 KHz
18:07:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:18: ####CSD Registe 2.0 Values####
18:07:18: CSD_STRUCTURE                                 :0x1
18:07:18: Reserv1                                       :0x0
18:07:18: Time Access 1 TAAC                            :0xe
18:07:18: Time Access 2 NSAC*100                        :0x0
18:07:18: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:18: Card Command Classess CCC                     :0x5b5
18:07:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:18: DSR(driver stage register)  DSR_IMP           :0x0
18:07:18: Reserv2                                       :0x0
18:07:18: Device Size C_SIZE                            :0xedc8
18:07:18: Reserv3                                       :0x0
18:07:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:18: Reserv4                                       :0x0
18:07:18: Write Speed Factor R2W_FACTOR                 :0x2
18:07:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:18: FILE_FORMAT_GRP                               :0x0
18:07:18: COPY flag                                     :0x1
18:07:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:18: File_Format                                   :0x0
18:07:18: CRC                                           :0x0
18:07:18: ####CSD Registe Values####  

18:07:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:18: [GetSCRRegisterEntry] Passed
18:07:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:18: Data_Status_After Erases          : 0
18:07:18: CPRM Security Support             : No Security
18:07:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:18: Spec. Version                     : Version 3.0X
18:07:18: Extended Security Support         : Extended_Security_Not_Supported
18:07:18: Command Support                   : COMMAND_SUPPORT
18:07:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E4FAE0>) , Command count = 193 ] 
18:07:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E4FB70>) , Command count = 194 ] 
18:07:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:18: [ SetBusWidth(0x4) , Command count = 195 ] 
18:07:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 196 ] 
18:07:18: Protected Area Size 0x28000
18:07:18: Bus Width           2
18:07:18: Secure Mode         0
18:07:18: Speed  Class        4
18:07:18: Perf Move           0
18:07:18: Au Size             9
18:07:18: Erase Size          15
18:07:18: Erase Timeout       1
18:07:18: Erase offset        1
18:07:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 197 ] 
18:07:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:18: Host Frequency set to 100000 KHz
18:07:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:18: ####CSD Registe 2.0 Values####
18:07:18: CSD_STRUCTURE                                 :0x1
18:07:18: Reserv1                                       :0x0
18:07:18: Time Access 1 TAAC                            :0xe
18:07:18: Time Access 2 NSAC*100                        :0x0
18:07:18: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:18: Card Command Classess CCC                     :0x5b5
18:07:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:18: DSR(driver stage register)  DSR_IMP           :0x0
18:07:18: Reserv2                                       :0x0
18:07:18: Device Size C_SIZE                            :0xedc8
18:07:18: Reserv3                                       :0x0
18:07:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:18: Reserv4                                       :0x0
18:07:18: Write Speed Factor R2W_FACTOR                 :0x2
18:07:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:18: FILE_FORMAT_GRP                               :0x0
18:07:18: COPY flag                                     :0x1
18:07:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:18: File_Format                                   :0x0
18:07:18: CRC                                           :0x0
18:07:18: ####CSD Registe Values####  

18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FEA0>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 198 ] 
18:07:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 199 ] 
18:07:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:07:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:07:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ############ ACMD51, ACMD13 are valid only in Trans state #########
18:07:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 26 

18:07:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:07:21: [ HostReset(False) , Command count = 200 ] 
18:07:21: [ SetSpecialModes(0x5, True) , Command count = 201 ] 
18:07:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FED0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF00>) , Command count = 202 ] 
18:07:21: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:07:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF60>, <py_sfcl.CommandDataDefinition object at 0x05E4FF90>) , Command count = 203 ] 
18:07:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50030>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 204 ] 
18:07:21: [ GetCardStatus() , Command count = 205 ] 
18:07:21: ACmd51[ SEND_SCR ] Failed with an exception
18:07:21: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E50180>) , Command count = 206 ] 
18:07:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50240>, <py_sfcl.CommandDataDefinition object at 0x05E50270>) , Command count = 207 ] 
18:07:21: [ GetCardStatus() , Command count = 208 ] 
18:07:21: ACMD13[ SD_STATUS ] Failed with an exception
18:07:21: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:21: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:07:23: [ HostReset(False) , Command count = 209 ] 
18:07:23: [ SetSpecialModes(0x5, True) , Command count = 210 ] 
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50360>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 211 ] 
18:07:23: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E503F0>, <py_sfcl.CommandDataDefinition object at 0x05E50420>) , Command count = 212 ] 
18:07:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50480>, <py_sfcl.CommandDataDefinition object at 0x05E504B0>) , Command count = 213 ] 
18:07:23: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50510>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 214 ] 
18:07:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E505D0>) , Command count = 215 ] 
18:07:23: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50630>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 216 ] 
18:07:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E506C0>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 217 ] 
18:07:23: [ GetCardStatus() , Command count = 218 ] 
18:07:23: ACmd51[ SEND_SCR ] Failed with an exception
18:07:23: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50270>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 219 ] 
18:07:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50810>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 220 ] 
18:07:23: [ GetCardStatus() , Command count = 221 ] 
18:07:23: ACMD13[ SD_STATUS ] Failed with an exception
18:07:23: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:23: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:07:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 222 ] 
18:07:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 223 ] 
18:07:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E508A0>, <py_sfcl.CommandDataDefinition object at 0x05E50930>) , Command count = 224 ] 
18:07:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:26: [GetSCRRegisterEntry] Failed
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:07:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E509F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 225 ] 
18:07:26: [ GetCardStatus() , Command count = 226 ] 
18:07:26: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:07:26: [DVTCommonLib]### Exception_Details :Time out error on card response
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:07:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50840>, <py_sfcl.CommandDataDefinition object at 0x05E50810>) , Command count = 227 ] 
18:07:26: [ GetCardStatus() , Command count = 228 ] 
18:07:26: CMD55[ APP_CMD ] Failed with an exception
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B40>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 229 ] 
18:07:26: [ GetCardStatus() , Command count = 230 ] 
18:07:26: ACmd51[ SEND_SCR ] Failed with an exception
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50810>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 231 ] 
18:07:26: [ GetCardStatus() , Command count = 232 ] 
18:07:26: CMD55[ APP_CMD ] Failed with an exception
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B10>, <py_sfcl.CommandDataDefinition object at 0x05E50B40>) , Command count = 233 ] 
18:07:26: [ GetCardStatus() , Command count = 234 ] 
18:07:26: ACMD13[ SD_STATUS ] Failed with an exception
18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:07:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 235 ] 
18:07:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 236 ] 
18:07:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D50>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 237 ] 
18:07:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E70>, <py_sfcl.CommandDataDefinition object at 0x05E50EA0>) , Command count = 238 ] 
18:07:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:28: [ SetCardRCA(0x1, 0xD555) , Command count = 239 ] 
18:07:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E50F60>) , Command count = 240 ] 
18:07:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:29: [GetSCRRegisterEntry] Passed
18:07:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:29: Data_Status_After Erases          : 0
18:07:29: CPRM Security Support             : No Security
18:07:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:29: Spec. Version                     : Version 3.0X
18:07:29: Extended Security Support         : Extended_Security_Not_Supported
18:07:29: Command Support                   : COMMAND_SUPPORT
18:07:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 241 ] 
18:07:29: Protected Area Size 0x28000
18:07:29: Bus Width           0
18:07:29: Secure Mode         0
18:07:29: Speed  Class        4
18:07:29: Perf Move           0
18:07:29: Au Size             9
18:07:29: Erase Size          15
18:07:29: Erase Timeout       1
18:07:29: Erase offset        1
18:07:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:29: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:07:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 242 ] 
18:07:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 243 ] 
18:07:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E550C0>) , Command count = 244 ] 
18:07:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E55180>) , Command count = 245 ] 
18:07:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:31: [ SetCardRCA(0x1, 0xD555) , Command count = 246 ] 
18:07:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55210>, <py_sfcl.CommandDataDefinition object at 0x05E55240>) , Command count = 247 ] 
18:07:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E552A0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 248 ] 
18:07:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:07:31: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:07:31: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:07:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:07:31: Perform Power Off and On.
18:07:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 249 ] 
18:07:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:07:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55360>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 250 ] 
18:07:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E553F0>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 251 ] 
18:07:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:07:33: [ SetCardRCA(0x1, 0xD555) , Command count = 252 ] 
18:07:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:33: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:35: Host Frequency set to 25000 KHz
18:07:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:35: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55660>, 0x0, True) , Command count = 253 ] 
18:07:35: [GO18_globalSetVolt]### Host voltage value is set.
18:07:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05270930>, 0x0, False) , Command count = 254 ] 
18:07:35: [GO18_globalSetVolt]### Host voltage value is set.
18:07:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 255 ] 
18:07:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 256 ] 
18:07:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 257 ] 
18:07:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052B9DE0>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 258 ] 
18:07:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB270>, <py_sfcl.CommandDataDefinition object at 0x05E55510>) , Command count = 259 ] 
18:07:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:36: [ SetCardRCA(0x1, 0xD555) , Command count = 260 ] 
18:07:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:36: Host Frequency set to 25000 KHz
18:07:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:36: ####CSD Registe 2.0 Values####
18:07:36: CSD_STRUCTURE                                 :0x1
18:07:36: Reserv1                                       :0x0
18:07:36: Time Access 1 TAAC                            :0xe
18:07:36: Time Access 2 NSAC*100                        :0x0
18:07:36: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:36: Card Command Classess CCC                     :0x5b5
18:07:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:36: DSR(driver stage register)  DSR_IMP           :0x0
18:07:36: Reserv2                                       :0x0
18:07:36: Device Size C_SIZE                            :0xedc8
18:07:36: Reserv3                                       :0x0
18:07:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:36: Reserv4                                       :0x0
18:07:36: Write Speed Factor R2W_FACTOR                 :0x2
18:07:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:36: FILE_FORMAT_GRP                               :0x0
18:07:36: COPY flag                                     :0x1
18:07:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:36: File_Format                                   :0x0
18:07:36: CRC                                           :0x0
18:07:36: ####CSD Registe Values####  

18:07:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:36: [GetSCRRegisterEntry] Passed
18:07:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:36: Data_Status_After Erases          : 0
18:07:36: CPRM Security Support             : No Security
18:07:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:36: Spec. Version                     : Version 3.0X
18:07:36: Extended Security Support         : Extended_Security_Not_Supported
18:07:36: Command Support                   : COMMAND_SUPPORT
18:07:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 261 ] 
18:07:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB390>, <py_sfcl.CommandDataDefinition object at 0x05E555D0>) , Command count = 262 ] 
18:07:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:36: [ SetBusWidth(0x4) , Command count = 263 ] 
18:07:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 264 ] 
18:07:36: Protected Area Size 0x28000
18:07:36: Bus Width           2
18:07:36: Secure Mode         0
18:07:36: Speed  Class        4
18:07:36: Perf Move           0
18:07:36: Au Size             9
18:07:36: Erase Size          15
18:07:36: Erase Timeout       1
18:07:36: Erase offset        1
18:07:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 265 ] 
18:07:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:36: Host Frequency set to 100000 KHz
18:07:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:36: ####CSD Registe 2.0 Values####
18:07:36: CSD_STRUCTURE                                 :0x1
18:07:36: Reserv1                                       :0x0
18:07:36: Time Access 1 TAAC                            :0xe
18:07:36: Time Access 2 NSAC*100                        :0x0
18:07:36: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:36: Card Command Classess CCC                     :0x5b5
18:07:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:36: DSR(driver stage register)  DSR_IMP           :0x0
18:07:36: Reserv2                                       :0x0
18:07:36: Device Size C_SIZE                            :0xedc8
18:07:36: Reserv3                                       :0x0
18:07:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:36: Reserv4                                       :0x0
18:07:36: Write Speed Factor R2W_FACTOR                 :0x2
18:07:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:36: FILE_FORMAT_GRP                               :0x0
18:07:36: COPY flag                                     :0x1
18:07:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:36: File_Format                                   :0x0
18:07:36: CRC                                           :0x0
18:07:36: ####CSD Registe Values####  

18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05E558A0>) , Command count = 266 ] 
18:07:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBE40>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 267 ] 
18:07:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:37: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:07:37: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:07:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:37: [GetSCRRegisterEntry] Passed
18:07:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:37: Data_Status_After Erases          : 0
18:07:37: CPRM Security Support             : No Security
18:07:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:37: Spec. Version                     : Version 3.0X
18:07:37: Extended Security Support         : Extended_Security_Not_Supported
18:07:37: Command Support                   : COMMAND_SUPPORT
18:07:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:37: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:07:37: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:07:37: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:07:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:37: [GetSCRRegisterEntry] Passed
18:07:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:37: Data_Status_After Erases          : 0
18:07:37: CPRM Security Support             : No Security
18:07:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:37: Spec. Version                     : Version 3.0X
18:07:37: Extended Security Support         : Extended_Security_Not_Supported
18:07:37: Command Support                   : COMMAND_SUPPORT
18:07:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:37: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:07:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:37: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 268 ] 
18:07:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:07:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:37: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:39: Host Frequency set to 25000 KHz
18:07:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:39: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF90>, 0x0, True) , Command count = 269 ] 
18:07:39: [GO18_globalSetVolt]### Host voltage value is set.
18:07:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF00>, 0x0, False) , Command count = 270 ] 
18:07:39: [GO18_globalSetVolt]### Host voltage value is set.
18:07:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 271 ] 
18:07:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 272 ] 
18:07:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 273 ] 
18:07:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB40>, <py_sfcl.CommandDataDefinition object at 0x05E55750>) , Command count = 274 ] 
18:07:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C24E0>, <py_sfcl.CommandDataDefinition object at 0x05E557E0>) , Command count = 275 ] 
18:07:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:39: [ SetCardRCA(0x1, 0xD555) , Command count = 276 ] 
18:07:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:40: Host Frequency set to 25000 KHz
18:07:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:40: ####CSD Registe 2.0 Values####
18:07:40: CSD_STRUCTURE                                 :0x1
18:07:40: Reserv1                                       :0x0
18:07:40: Time Access 1 TAAC                            :0xe
18:07:40: Time Access 2 NSAC*100                        :0x0
18:07:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:40: Card Command Classess CCC                     :0x5b5
18:07:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:40: DSR(driver stage register)  DSR_IMP           :0x0
18:07:40: Reserv2                                       :0x0
18:07:40: Device Size C_SIZE                            :0xedc8
18:07:40: Reserv3                                       :0x0
18:07:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:40: Reserv4                                       :0x0
18:07:40: Write Speed Factor R2W_FACTOR                 :0x2
18:07:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:40: FILE_FORMAT_GRP                               :0x0
18:07:40: COPY flag                                     :0x1
18:07:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:40: File_Format                                   :0x0
18:07:40: CRC                                           :0x0
18:07:40: ####CSD Registe Values####  

18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 277 ] 
18:07:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDB0>, <py_sfcl.CommandDataDefinition object at 0x05E558D0>) , Command count = 278 ] 
18:07:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:40: [ SetBusWidth(0x4) , Command count = 279 ] 
18:07:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 280 ] 
18:07:40: Protected Area Size 0x28000
18:07:40: Bus Width           2
18:07:40: Secure Mode         0
18:07:40: Speed  Class        4
18:07:40: Perf Move           0
18:07:40: Au Size             9
18:07:40: Erase Size          15
18:07:40: Erase Timeout       1
18:07:40: Erase offset        1
18:07:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 281 ] 
18:07:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:40: Host Frequency set to 100000 KHz
18:07:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:40: ####CSD Registe 2.0 Values####
18:07:40: CSD_STRUCTURE                                 :0x1
18:07:40: Reserv1                                       :0x0
18:07:40: Time Access 1 TAAC                            :0xe
18:07:40: Time Access 2 NSAC*100                        :0x0
18:07:40: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:40: Card Command Classess CCC                     :0x5b5
18:07:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:40: DSR(driver stage register)  DSR_IMP           :0x0
18:07:40: Reserv2                                       :0x0
18:07:40: Device Size C_SIZE                            :0xedc8
18:07:40: Reserv3                                       :0x0
18:07:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:40: Reserv4                                       :0x0
18:07:40: Write Speed Factor R2W_FACTOR                 :0x2
18:07:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:40: FILE_FORMAT_GRP                               :0x0
18:07:40: COPY flag                                     :0x1
18:07:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:40: File_Format                                   :0x0
18:07:40: CRC                                           :0x0
18:07:40: ####CSD Registe Values####  

18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E55BA0>) , Command count = 282 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E559F0>) , Command count = 283 ] 
18:07:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 284 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AE0>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 285 ] 
18:07:40: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A120>, <py_sfcl.CommandDataDefinition object at 0x05E55B70>) , Command count = 286 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 287 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C30>, <py_sfcl.CommandDataDefinition object at 0x05E55C60>) , Command count = 288 ] 
18:07:40: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 289 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 290 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A420>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 291 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DB0>, <py_sfcl.CommandDataDefinition object at 0x05E55DE0>) , Command count = 292 ] 
18:07:40: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05D2A930>) , Command count = 293 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2AC60>) , Command count = 294 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55EA0>, <py_sfcl.CommandDataDefinition object at 0x05E55ED0>) , Command count = 295 ] 
18:07:40: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05DAA2D0>) , Command count = 296 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA480>, <py_sfcl.CommandDataDefinition object at 0x05DAA660>) , Command count = 297 ] 
18:07:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:40: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:07:40: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:07:40: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:40: [GetSCRRegisterEntry] Passed
18:07:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:40: Data_Status_After Erases          : 0
18:07:40: CPRM Security Support             : No Security
18:07:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:40: Spec. Version                     : Version 3.0X
18:07:40: Extended Security Support         : Extended_Security_Not_Supported
18:07:40: Command Support                   : COMMAND_SUPPORT
18:07:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:40: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:07:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:07:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:07:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:07:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:07:40: Perform Power Off and On.
18:07:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 298 ] 
18:07:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:07:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 299 ] 
18:07:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8C60>, <py_sfcl.CommandDataDefinition object at 0x05E55F60>) , Command count = 300 ] 
18:07:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:07:42: [ SetCardRCA(0x1, 0xD555) , Command count = 301 ] 
18:07:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:42: [GO4_globalInitCard]### Switch to Specify Card Type
18:07:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:44: Host Frequency set to 25000 KHz
18:07:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:44: [GO18_globalSetVolt]### Set Host Voltage value.
18:07:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:07:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB8E10>, 0x0, True) , Command count = 302 ] 
18:07:44: [GO18_globalSetVolt]### Host voltage value is set.
18:07:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:07:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB8D20>, 0x0, False) , Command count = 303 ] 
18:07:44: [GO18_globalSetVolt]### Host voltage value is set.
18:07:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 304 ] 
18:07:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 305 ] 
18:07:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 306 ] 
18:07:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D840>, <py_sfcl.CommandDataDefinition object at 0x05E2DB70>) , Command count = 307 ] 
18:07:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D6F0>, <py_sfcl.CommandDataDefinition object at 0x05E59060>) , Command count = 308 ] 
18:07:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:45: [ SetCardRCA(0x1, 0xD555) , Command count = 309 ] 
18:07:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:07:45: Host Frequency set to 25000 KHz
18:07:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:07:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:45: ####CSD Registe 2.0 Values####
18:07:45: CSD_STRUCTURE                                 :0x1
18:07:45: Reserv1                                       :0x0
18:07:45: Time Access 1 TAAC                            :0xe
18:07:45: Time Access 2 NSAC*100                        :0x0
18:07:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:07:45: Card Command Classess CCC                     :0x5b5
18:07:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:45: DSR(driver stage register)  DSR_IMP           :0x0
18:07:45: Reserv2                                       :0x0
18:07:45: Device Size C_SIZE                            :0xedc8
18:07:45: Reserv3                                       :0x0
18:07:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:45: Reserv4                                       :0x0
18:07:45: Write Speed Factor R2W_FACTOR                 :0x2
18:07:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:45: FILE_FORMAT_GRP                               :0x0
18:07:45: COPY flag                                     :0x1
18:07:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:45: File_Format                                   :0x0
18:07:45: CRC                                           :0x0
18:07:45: ####CSD Registe Values####  

18:07:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:45: [GetSCRRegisterEntry] Passed
18:07:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:45: Data_Status_After Erases          : 0
18:07:45: CPRM Security Support             : No Security
18:07:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:45: Spec. Version                     : Version 3.0X
18:07:45: Extended Security Support         : Extended_Security_Not_Supported
18:07:45: Command Support                   : COMMAND_SUPPORT
18:07:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E2DC90>) , Command count = 310 ] 
18:07:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF30>, <py_sfcl.CommandDataDefinition object at 0x05E2DEA0>) , Command count = 311 ] 
18:07:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:07:45: [ SetBusWidth(0x4) , Command count = 312 ] 
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 313 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:07:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:07:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 314 ] 
18:07:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:07:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:07:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:07:45: Host Frequency set to 100000 KHz
18:07:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:07:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:07:45: ####CSD Registe 2.0 Values####
18:07:45: CSD_STRUCTURE                                 :0x1
18:07:45: Reserv1                                       :0x0
18:07:45: Time Access 1 TAAC                            :0xe
18:07:45: Time Access 2 NSAC*100                        :0x0
18:07:45: Data Transfer Rate TRAN_SPEED                 :0xb
18:07:45: Card Command Classess CCC                     :0x5b5
18:07:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:07:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:07:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:07:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:07:45: DSR(driver stage register)  DSR_IMP           :0x0
18:07:45: Reserv2                                       :0x0
18:07:45: Device Size C_SIZE                            :0xedc8
18:07:45: Reserv3                                       :0x0
18:07:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:07:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:07:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:07:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:07:45: Reserv4                                       :0x0
18:07:45: Write Speed Factor R2W_FACTOR                 :0x2
18:07:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:07:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:07:45: FILE_FORMAT_GRP                               :0x0
18:07:45: COPY flag                                     :0x1
18:07:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:07:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:07:45: File_Format                                   :0x0
18:07:45: CRC                                           :0x0
18:07:45: ####CSD Registe Values####  

18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7E0>, <py_sfcl.CommandDataDefinition object at 0x05D2A7B0>) , Command count = 315 ] 
18:07:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE40>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 316 ] 
18:07:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:07:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:07:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 317 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:07:45: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 318 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 319 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 320 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 321 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E373C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 322 ] 
18:07:45: Protected Area Size 0x28000
18:07:45: Bus Width           2
18:07:45: Secure Mode         0
18:07:45: Speed  Class        4
18:07:45: Perf Move           0
18:07:45: Au Size             9
18:07:45: Erase Size          15
18:07:45: Erase Timeout       1
18:07:45: Erase offset        1
18:07:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:07:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:07:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 25 

18:07:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:07:47: [ HostReset(False) , Command count = 323 ] 
18:07:47: [ SetSpecialModes(0x5, True) , Command count = 324 ] 
18:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C00>, <py_sfcl.CommandDataDefinition object at 0x05E37510>) , Command count = 325 ] 
18:07:47: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A20>, <py_sfcl.CommandDataDefinition object at 0x05E372D0>) , Command count = 326 ] 
18:07:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F60>, <py_sfcl.CommandDataDefinition object at 0x05E37D20>) , Command count = 327 ] 
18:07:47: [ GetCardStatus() , Command count = 328 ] 
18:07:47: ACmd51[ SEND_SCR ] Failed with an exception
18:07:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B40>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 329 ] 
18:07:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37F30>) , Command count = 330 ] 
18:07:47: [ GetCardStatus() , Command count = 331 ] 
18:07:47: ACMD13[ SD_STATUS ] Failed with an exception
18:07:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:07:49: [ HostReset(False) , Command count = 332 ] 
18:07:49: [ SetSpecialModes(0x5, True) , Command count = 333 ] 
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37FC0>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 334 ] 
18:07:49: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x05E2D1B0>) , Command count = 335 ] 
18:07:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F00>, <py_sfcl.CommandDataDefinition object at 0x05E37EA0>) , Command count = 336 ] 
18:07:49: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E377B0>) , Command count = 337 ] 
18:07:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D80>, <py_sfcl.CommandDataDefinition object at 0x05E373F0>) , Command count = 338 ] 
18:07:49: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:07:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37930>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 339 ] 
18:07:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E37540>) , Command count = 340 ] 
18:07:50: [ GetCardStatus() , Command count = 341 ] 
18:07:50: ACmd51[ SEND_SCR ] Failed with an exception
18:07:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F30>, <py_sfcl.CommandDataDefinition object at 0x05E37ED0>) , Command count = 342 ] 
18:07:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:07:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E10>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 343 ] 
18:07:50: [ GetCardStatus() , Command count = 344 ] 
18:07:50: ACMD13[ SD_STATUS ] Failed with an exception
18:07:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:07:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 345 ] 
18:07:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 346 ] 
18:07:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E379C0>, <py_sfcl.CommandDataDefinition object at 0x05E37600>) , Command count = 347 ] 
18:07:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:52: [GetSCRRegisterEntry] Failed
18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:07:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 348 ] 
18:07:52: [ GetCardStatus() , Command count = 349 ] 
18:07:52: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:07:52: [DVTCommonLib]### Exception_Details :Time out error on card response
18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:07:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 350 ] 
18:07:52: [ GetCardStatus() , Command count = 351 ] 
18:07:52: CMD55[ APP_CMD ] Failed with an exception
18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E3E2A0>) , Command count = 352 ] 
18:07:52: [ GetCardStatus() , Command count = 353 ] 
18:07:52: ACmd51[ SEND_SCR ] Failed with an exception
18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E3E2D0>) , Command count = 354 ] 
18:07:52: [ GetCardStatus() , Command count = 355 ] 
18:07:52: CMD55[ APP_CMD ] Failed with an exception
18:07:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:07:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E030>) , Command count = 356 ] 
18:07:53: [ GetCardStatus() , Command count = 357 ] 
18:07:53: ACMD13[ SD_STATUS ] Failed with an exception
18:07:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:07:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:07:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 358 ] 
18:07:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 359 ] 
18:07:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E330>, <py_sfcl.CommandDataDefinition object at 0x05E3E4B0>) , Command count = 360 ] 
18:07:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E510>, <py_sfcl.CommandDataDefinition object at 0x05E3E540>) , Command count = 361 ] 
18:07:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:55: [ SetCardRCA(0x1, 0xD555) , Command count = 362 ] 
18:07:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E630>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 363 ] 
18:07:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:07:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:07:55: [GetSCRRegisterEntry] Passed
18:07:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:07:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:07:55: Data_Status_After Erases          : 0
18:07:55: CPRM Security Support             : No Security
18:07:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:07:55: Spec. Version                     : Version 3.0X
18:07:55: Extended Security Support         : Extended_Security_Not_Supported
18:07:55: Command Support                   : COMMAND_SUPPORT
18:07:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:07:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:07:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 364 ] 
18:07:55: Protected Area Size 0x28000
18:07:55: Bus Width           0
18:07:55: Secure Mode         0
18:07:55: Speed  Class        4
18:07:55: Perf Move           0
18:07:55: Au Size             9
18:07:55: Erase Size          15
18:07:55: Erase Timeout       1
18:07:55: Erase offset        1
18:07:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:07:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:07:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:07:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 365 ] 
18:07:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:07:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:07:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:07:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:07:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:07:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 366 ] 
18:07:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:07:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E3E6F0>) , Command count = 367 ] 
18:07:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E7E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E810>) , Command count = 368 ] 
18:07:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:07:57: [ SetCardRCA(0x1, 0xD555) , Command count = 369 ] 
18:07:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E3E960>) , Command count = 370 ] 
18:07:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB10>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 371 ] 
18:07:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:07:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:07:57: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:07:57: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:07:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:07:57: Perform Power Off and On.
18:07:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 372 ] 
18:08:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:08:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA80>, <py_sfcl.CommandDataDefinition object at 0x05E590F0>) , Command count = 373 ] 
18:08:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EAE0>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 374 ] 
18:08:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:08:00: [ SetCardRCA(0x1, 0xD555) , Command count = 375 ] 
18:08:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:00: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:02: Host Frequency set to 25000 KHz
18:08:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:02: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EB40>, 0x0, True) , Command count = 376 ] 
18:08:02: [GO18_globalSetVolt]### Host voltage value is set.
18:08:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EC00>, 0x0, False) , Command count = 377 ] 
18:08:02: [GO18_globalSetVolt]### Host voltage value is set.
18:08:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 378 ] 
18:08:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 379 ] 
18:08:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 380 ] 
18:08:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37630>, <py_sfcl.CommandDataDefinition object at 0x05E3EDB0>) , Command count = 381 ] 
18:08:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E3EC60>) , Command count = 382 ] 
18:08:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:02: [ SetCardRCA(0x1, 0xD555) , Command count = 383 ] 
18:08:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:02: Host Frequency set to 25000 KHz
18:08:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:02: ####CSD Registe 2.0 Values####
18:08:02: CSD_STRUCTURE                                 :0x1
18:08:02: Reserv1                                       :0x0
18:08:02: Time Access 1 TAAC                            :0xe
18:08:02: Time Access 2 NSAC*100                        :0x0
18:08:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:02: Card Command Classess CCC                     :0x5b5
18:08:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:02: DSR(driver stage register)  DSR_IMP           :0x0
18:08:02: Reserv2                                       :0x0
18:08:02: Device Size C_SIZE                            :0xedc8
18:08:02: Reserv3                                       :0x0
18:08:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:02: Reserv4                                       :0x0
18:08:02: Write Speed Factor R2W_FACTOR                 :0x2
18:08:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:02: FILE_FORMAT_GRP                               :0x0
18:08:02: COPY flag                                     :0x1
18:08:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:02: File_Format                                   :0x0
18:08:02: CRC                                           :0x0
18:08:02: ####CSD Registe Values####  

18:08:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:02: [GetSCRRegisterEntry] Passed
18:08:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:02: Data_Status_After Erases          : 0
18:08:02: CPRM Security Support             : No Security
18:08:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:02: Spec. Version                     : Version 3.0X
18:08:02: Extended Security Support         : Extended_Security_Not_Supported
18:08:02: Command Support                   : COMMAND_SUPPORT
18:08:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EEA0>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 384 ] 
18:08:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EFC0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 385 ] 
18:08:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:02: [ SetBusWidth(0x4) , Command count = 386 ] 
18:08:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E440C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 387 ] 
18:08:02: Protected Area Size 0x28000
18:08:02: Bus Width           2
18:08:02: Secure Mode         0
18:08:02: Speed  Class        4
18:08:02: Perf Move           0
18:08:02: Au Size             9
18:08:02: Erase Size          15
18:08:02: Erase Timeout       1
18:08:02: Erase offset        1
18:08:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 388 ] 
18:08:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:02: Host Frequency set to 100000 KHz
18:08:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:02: ####CSD Registe 2.0 Values####
18:08:02: CSD_STRUCTURE                                 :0x1
18:08:02: Reserv1                                       :0x0
18:08:02: Time Access 1 TAAC                            :0xe
18:08:02: Time Access 2 NSAC*100                        :0x0
18:08:02: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:02: Card Command Classess CCC                     :0x5b5
18:08:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:02: DSR(driver stage register)  DSR_IMP           :0x0
18:08:02: Reserv2                                       :0x0
18:08:02: Device Size C_SIZE                            :0xedc8
18:08:02: Reserv3                                       :0x0
18:08:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:03: Reserv4                                       :0x0
18:08:03: Write Speed Factor R2W_FACTOR                 :0x2
18:08:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:03: FILE_FORMAT_GRP                               :0x0
18:08:03: COPY flag                                     :0x1
18:08:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:03: File_Format                                   :0x0
18:08:03: CRC                                           :0x0
18:08:03: ####CSD Registe Values####  

18:08:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 389 ] 
18:08:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44150>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 390 ] 
18:08:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:03: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:08:03: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:08:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:03: [GetSCRRegisterEntry] Passed
18:08:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:03: Data_Status_After Erases          : 0
18:08:03: CPRM Security Support             : No Security
18:08:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:03: Spec. Version                     : Version 3.0X
18:08:03: Extended Security Support         : Extended_Security_Not_Supported
18:08:03: Command Support                   : COMMAND_SUPPORT
18:08:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:03: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:08:03: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:08:03: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:08:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:03: [GetSCRRegisterEntry] Passed
18:08:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:03: Data_Status_After Erases          : 0
18:08:03: CPRM Security Support             : No Security
18:08:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:03: Spec. Version                     : Version 3.0X
18:08:03: Extended Security Support         : Extended_Security_Not_Supported
18:08:03: Command Support                   : COMMAND_SUPPORT
18:08:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:03: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:08:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:03: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 391 ] 
18:08:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:08:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:03: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:05: Host Frequency set to 25000 KHz
18:08:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:05: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EA20>, 0x0, True) , Command count = 392 ] 
18:08:05: [GO18_globalSetVolt]### Host voltage value is set.
18:08:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EF60>, 0x0, False) , Command count = 393 ] 
18:08:05: [GO18_globalSetVolt]### Host voltage value is set.
18:08:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 394 ] 
18:08:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 395 ] 
18:08:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 396 ] 
18:08:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ED50>, <py_sfcl.CommandDataDefinition object at 0x05E44450>) , Command count = 397 ] 
18:08:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E44390>) , Command count = 398 ] 
18:08:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:05: [ SetCardRCA(0x1, 0xD555) , Command count = 399 ] 
18:08:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:05: Host Frequency set to 25000 KHz
18:08:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:05: ####CSD Registe 2.0 Values####
18:08:05: CSD_STRUCTURE                                 :0x1
18:08:05: Reserv1                                       :0x0
18:08:05: Time Access 1 TAAC                            :0xe
18:08:05: Time Access 2 NSAC*100                        :0x0
18:08:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:05: Card Command Classess CCC                     :0x5b5
18:08:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:05: DSR(driver stage register)  DSR_IMP           :0x0
18:08:05: Reserv2                                       :0x0
18:08:05: Device Size C_SIZE                            :0xedc8
18:08:05: Reserv3                                       :0x0
18:08:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:05: Reserv4                                       :0x0
18:08:05: Write Speed Factor R2W_FACTOR                 :0x2
18:08:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:05: FILE_FORMAT_GRP                               :0x0
18:08:05: COPY flag                                     :0x1
18:08:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:05: File_Format                                   :0x0
18:08:05: CRC                                           :0x0
18:08:05: ####CSD Registe Values####  

18:08:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:05: [GetSCRRegisterEntry] Passed
18:08:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:05: Data_Status_After Erases          : 0
18:08:05: CPRM Security Support             : No Security
18:08:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:05: Spec. Version                     : Version 3.0X
18:08:05: Extended Security Support         : Extended_Security_Not_Supported
18:08:05: Command Support                   : COMMAND_SUPPORT
18:08:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E444E0>) , Command count = 400 ] 
18:08:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44540>, <py_sfcl.CommandDataDefinition object at 0x05E44570>) , Command count = 401 ] 
18:08:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:05: [ SetBusWidth(0x4) , Command count = 402 ] 
18:08:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E446F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 403 ] 
18:08:05: Protected Area Size 0x28000
18:08:05: Bus Width           2
18:08:05: Secure Mode         0
18:08:05: Speed  Class        4
18:08:05: Perf Move           0
18:08:05: Au Size             9
18:08:05: Erase Size          15
18:08:05: Erase Timeout       1
18:08:05: Erase offset        1
18:08:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 404 ] 
18:08:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:05: Host Frequency set to 100000 KHz
18:08:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:05: ####CSD Registe 2.0 Values####
18:08:05: CSD_STRUCTURE                                 :0x1
18:08:05: Reserv1                                       :0x0
18:08:05: Time Access 1 TAAC                            :0xe
18:08:05: Time Access 2 NSAC*100                        :0x0
18:08:05: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:05: Card Command Classess CCC                     :0x5b5
18:08:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:05: DSR(driver stage register)  DSR_IMP           :0x0
18:08:05: Reserv2                                       :0x0
18:08:05: Device Size C_SIZE                            :0xedc8
18:08:05: Reserv3                                       :0x0
18:08:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:06: Reserv4                                       :0x0
18:08:06: Write Speed Factor R2W_FACTOR                 :0x2
18:08:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:06: FILE_FORMAT_GRP                               :0x0
18:08:06: COPY flag                                     :0x1
18:08:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:06: File_Format                                   :0x0
18:08:06: CRC                                           :0x0
18:08:06: ####CSD Registe Values####  

18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441E0>, <py_sfcl.CommandDataDefinition object at 0x05E44660>) , Command count = 405 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E448A0>) , Command count = 406 ] 
18:08:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 407 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44990>, <py_sfcl.CommandDataDefinition object at 0x05E44A50>) , Command count = 408 ] 
18:08:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E44A20>) , Command count = 409 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44AB0>) , Command count = 410 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B70>, <py_sfcl.CommandDataDefinition object at 0x05E44C00>) , Command count = 411 ] 
18:08:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A80>, <py_sfcl.CommandDataDefinition object at 0x05E44BD0>) , Command count = 412 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B40>, <py_sfcl.CommandDataDefinition object at 0x05E44C60>) , Command count = 413 ] 
18:08:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CF0>, <py_sfcl.CommandDataDefinition object at 0x05E44D20>) , Command count = 414 ] 
18:08:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44E10>, <py_sfcl.CommandDataDefinition object at 0x05E44D50>) , Command count = 415 ] 
18:08:07: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F030>, <py_sfcl.CommandDataDefinition object at 0x05E44090>) , Command count = 416 ] 
18:08:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F210>, <py_sfcl.CommandDataDefinition object at 0x05E4F090>) , Command count = 417 ] 
18:08:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44810>, <py_sfcl.CommandDataDefinition object at 0x05E44600>) , Command count = 418 ] 
18:08:07: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44360>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 419 ] 
18:08:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F120>) , Command count = 420 ] 
18:08:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:07: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:08:07: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:08:07: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:07: [GetSCRRegisterEntry] Passed
18:08:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:07: Data_Status_After Erases          : 0
18:08:07: CPRM Security Support             : No Security
18:08:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:07: Spec. Version                     : Version 3.0X
18:08:07: Extended Security Support         : Extended_Security_Not_Supported
18:08:07: Command Support                   : COMMAND_SUPPORT
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:07: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:07: [GetSCRRegisterEntry] Passed
18:08:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:07: Data_Status_After Erases          : 0
18:08:07: CPRM Security Support             : No Security
18:08:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:07: Spec. Version                     : Version 3.0X
18:08:07: Extended Security Support         : Extended_Security_Not_Supported
18:08:07: Command Support                   : COMMAND_SUPPORT
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:07: [GetSCRRegisterEntry] Passed
18:08:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:07: Data_Status_After Erases          : 0
18:08:07: CPRM Security Support             : No Security
18:08:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:07: Spec. Version                     : Version 3.0X
18:08:07: Extended Security Support         : Extended_Security_Not_Supported
18:08:07: Command Support                   : COMMAND_SUPPORT
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:07: [GetSCRRegisterEntry] Passed
18:08:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:07: Data_Status_After Erases          : 0
18:08:07: CPRM Security Support             : No Security
18:08:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:07: Spec. Version                     : Version 3.0X
18:08:07: Extended Security Support         : Extended_Security_Not_Supported
18:08:07: Command Support                   : COMMAND_SUPPORT
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:07: [GetSCRRegisterEntry] Passed
18:08:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:07: Data_Status_After Erases          : 0
18:08:07: CPRM Security Support             : No Security
18:08:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:07: Spec. Version                     : Version 3.0X
18:08:07: Extended Security Support         : Extended_Security_Not_Supported
18:08:07: Command Support                   : COMMAND_SUPPORT
18:08:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:07: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:08:07: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:08:07: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:08:07: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:08:07: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:08:07: Perform Power Off and On.
18:08:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 421 ] 
18:08:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:08:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E4F1B0>) , Command count = 422 ] 
18:08:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E4F270>) , Command count = 423 ] 
18:08:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:08:10: [ SetCardRCA(0x1, 0xD555) , Command count = 424 ] 
18:08:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:10: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:12: Host Frequency set to 25000 KHz
18:08:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:12: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F4B0>, 0x0, True) , Command count = 425 ] 
18:08:12: [GO18_globalSetVolt]### Host voltage value is set.
18:08:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F3C0>, 0x0, False) , Command count = 426 ] 
18:08:12: [GO18_globalSetVolt]### Host voltage value is set.
18:08:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 427 ] 
18:08:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 428 ] 
18:08:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 429 ] 
18:08:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F240>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 430 ] 
18:08:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F630>) , Command count = 431 ] 
18:08:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:12: [ SetCardRCA(0x1, 0xD555) , Command count = 432 ] 
18:08:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:12: Host Frequency set to 25000 KHz
18:08:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:12: ####CSD Registe 2.0 Values####
18:08:12: CSD_STRUCTURE                                 :0x1
18:08:12: Reserv1                                       :0x0
18:08:12: Time Access 1 TAAC                            :0xe
18:08:12: Time Access 2 NSAC*100                        :0x0
18:08:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:12: Card Command Classess CCC                     :0x5b5
18:08:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:12: DSR(driver stage register)  DSR_IMP           :0x0
18:08:12: Reserv2                                       :0x0
18:08:12: Device Size C_SIZE                            :0xedc8
18:08:12: Reserv3                                       :0x0
18:08:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:12: Reserv4                                       :0x0
18:08:12: Write Speed Factor R2W_FACTOR                 :0x2
18:08:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:12: FILE_FORMAT_GRP                               :0x0
18:08:12: COPY flag                                     :0x1
18:08:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:12: File_Format                                   :0x0
18:08:12: CRC                                           :0x0
18:08:12: ####CSD Registe Values####  

18:08:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:12: [GetSCRRegisterEntry] Passed
18:08:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:12: Data_Status_After Erases          : 0
18:08:12: CPRM Security Support             : No Security
18:08:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:12: Spec. Version                     : Version 3.0X
18:08:12: Extended Security Support         : Extended_Security_Not_Supported
18:08:12: Command Support                   : COMMAND_SUPPORT
18:08:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 433 ] 
18:08:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F690>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 434 ] 
18:08:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:12: [ SetBusWidth(0x4) , Command count = 435 ] 
18:08:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 436 ] 
18:08:12: Protected Area Size 0x28000
18:08:12: Bus Width           2
18:08:12: Secure Mode         0
18:08:12: Speed  Class        4
18:08:12: Perf Move           0
18:08:12: Au Size             9
18:08:12: Erase Size          15
18:08:12: Erase Timeout       1
18:08:12: Erase offset        1
18:08:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 437 ] 
18:08:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:12: Host Frequency set to 100000 KHz
18:08:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:12: ####CSD Registe 2.0 Values####
18:08:12: CSD_STRUCTURE                                 :0x1
18:08:13: Reserv1                                       :0x0
18:08:13: Time Access 1 TAAC                            :0xe
18:08:13: Time Access 2 NSAC*100                        :0x0
18:08:13: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:13: Card Command Classess CCC                     :0x5b5
18:08:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:13: DSR(driver stage register)  DSR_IMP           :0x0
18:08:13: Reserv2                                       :0x0
18:08:13: Device Size C_SIZE                            :0xedc8
18:08:13: Reserv3                                       :0x0
18:08:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:13: Reserv4                                       :0x0
18:08:13: Write Speed Factor R2W_FACTOR                 :0x2
18:08:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:13: FILE_FORMAT_GRP                               :0x0
18:08:13: COPY flag                                     :0x1
18:08:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:13: File_Format                                   :0x0
18:08:13: CRC                                           :0x0
18:08:13: ####CSD Registe Values####  

18:08:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F9F0>) , Command count = 438 ] 
18:08:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F930>, <py_sfcl.CommandDataDefinition object at 0x05E593F0>) , Command count = 439 ] 
18:08:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:08:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:08:13: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:08:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 440 ] 
18:08:13: Protected Area Size 0x28000
18:08:13: Bus Width           2
18:08:13: Secure Mode         0
18:08:13: Speed  Class        4
18:08:13: Perf Move           0
18:08:13: Au Size             9
18:08:13: Erase Size          15
18:08:13: Erase Timeout       1
18:08:13: Erase offset        1
18:08:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:13: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:08:13: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:08:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 441 ] 
18:08:13: Protected Area Size 0x28000
18:08:13: Bus Width           2
18:08:13: Secure Mode         0
18:08:13: Speed  Class        4
18:08:13: Perf Move           0
18:08:13: Au Size             9
18:08:13: Erase Size          15
18:08:13: Erase Timeout       1
18:08:13: Erase offset        1
18:08:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:13: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:08:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 442 ] 
18:08:14: Protected Area Size 0x28000
18:08:14: Bus Width           2
18:08:14: Secure Mode         0
18:08:14: Speed  Class        4
18:08:14: Perf Move           0
18:08:14: Au Size             9
18:08:14: Erase Size          15
18:08:14: Erase Timeout       1
18:08:14: Erase offset        1
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 443 ] 
18:08:14: Protected Area Size 0x28000
18:08:14: Bus Width           2
18:08:14: Secure Mode         0
18:08:14: Speed  Class        4
18:08:14: Perf Move           0
18:08:14: Au Size             9
18:08:14: Erase Size          15
18:08:14: Erase Timeout       1
18:08:14: Erase offset        1
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 444 ] 
18:08:14: Protected Area Size 0x28000
18:08:14: Bus Width           2
18:08:14: Secure Mode         0
18:08:14: Speed  Class        4
18:08:14: Perf Move           0
18:08:14: Au Size             9
18:08:14: Erase Size          15
18:08:14: Erase Timeout       1
18:08:14: Erase offset        1
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 445 ] 
18:08:14: Protected Area Size 0x28000
18:08:14: Bus Width           2
18:08:14: Secure Mode         0
18:08:14: Speed  Class        4
18:08:14: Perf Move           0
18:08:14: Au Size             9
18:08:14: Erase Size          15
18:08:14: Erase Timeout       1
18:08:14: Erase offset        1
18:08:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:08:14: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:08:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 24 

18:08:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:08:16: [ HostReset(False) , Command count = 446 ] 
18:08:16: [ SetSpecialModes(0x5, True) , Command count = 447 ] 
18:08:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 448 ] 
18:08:16: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:08:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E4FB70>) , Command count = 449 ] 
18:08:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FEA0>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 450 ] 
18:08:17: [ GetCardStatus() , Command count = 451 ] 
18:08:17: ACmd51[ SEND_SCR ] Failed with an exception
18:08:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E3E2A0>) , Command count = 452 ] 
18:08:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 453 ] 
18:08:17: [ GetCardStatus() , Command count = 454 ] 
18:08:17: ACMD13[ SD_STATUS ] Failed with an exception
18:08:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:08:19: [ HostReset(False) , Command count = 455 ] 
18:08:19: [ SetSpecialModes(0x5, True) , Command count = 456 ] 
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 457 ] 
18:08:19: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E50180>) , Command count = 458 ] 
18:08:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50300>, <py_sfcl.CommandDataDefinition object at 0x05E4FED0>) , Command count = 459 ] 
18:08:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50060>, <py_sfcl.CommandDataDefinition object at 0x05E4FF90>) , Command count = 460 ] 
18:08:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50030>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 461 ] 
18:08:19: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E50390>) , Command count = 462 ] 
18:08:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50360>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 463 ] 
18:08:19: [ GetCardStatus() , Command count = 464 ] 
18:08:19: ACmd51[ SEND_SCR ] Failed with an exception
18:08:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD50>, <py_sfcl.CommandDataDefinition object at 0x05E4FD20>) , Command count = 465 ] 
18:08:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50510>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 466 ] 
18:08:19: [ GetCardStatus() , Command count = 467 ] 
18:08:19: ACMD13[ SD_STATUS ] Failed with an exception
18:08:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:08:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 468 ] 
18:08:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 469 ] 
18:08:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E507E0>, <py_sfcl.CommandDataDefinition object at 0x05E507B0>) , Command count = 470 ] 
18:08:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:22: [GetSCRRegisterEntry] Failed
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:08:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 471 ] 
18:08:22: [ GetCardStatus() , Command count = 472 ] 
18:08:22: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:08:22: [DVTCommonLib]### Exception_Details :Time out error on card response
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:08:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50540>, <py_sfcl.CommandDataDefinition object at 0x05E50510>) , Command count = 473 ] 
18:08:22: [ GetCardStatus() , Command count = 474 ] 
18:08:22: CMD55[ APP_CMD ] Failed with an exception
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E50900>) , Command count = 475 ] 
18:08:22: [ GetCardStatus() , Command count = 476 ] 
18:08:22: ACmd51[ SEND_SCR ] Failed with an exception
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05E50510>) , Command count = 477 ] 
18:08:22: [ GetCardStatus() , Command count = 478 ] 
18:08:22: CMD55[ APP_CMD ] Failed with an exception
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E50960>) , Command count = 479 ] 
18:08:22: [ GetCardStatus() , Command count = 480 ] 
18:08:22: ACMD13[ SD_STATUS ] Failed with an exception
18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:08:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 481 ] 
18:08:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 482 ] 
18:08:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CC0>, <py_sfcl.CommandDataDefinition object at 0x05E50510>) , Command count = 483 ] 
18:08:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D20>, <py_sfcl.CommandDataDefinition object at 0x05E50CF0>) , Command count = 484 ] 
18:08:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:24: [ SetCardRCA(0x1, 0xD555) , Command count = 485 ] 
18:08:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E506C0>, <py_sfcl.CommandDataDefinition object at 0x05E50C00>) , Command count = 486 ] 
18:08:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:24: [GetSCRRegisterEntry] Passed
18:08:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:24: Data_Status_After Erases          : 0
18:08:24: CPRM Security Support             : No Security
18:08:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:24: Spec. Version                     : Version 3.0X
18:08:24: Extended Security Support         : Extended_Security_Not_Supported
18:08:24: Command Support                   : COMMAND_SUPPORT
18:08:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 487 ] 
18:08:24: Protected Area Size 0x28000
18:08:24: Bus Width           0
18:08:24: Secure Mode         0
18:08:24: Speed  Class        4
18:08:24: Perf Move           0
18:08:24: Au Size             9
18:08:24: Erase Size          15
18:08:24: Erase Timeout       1
18:08:24: Erase offset        1
18:08:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:08:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 488 ] 
18:08:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 489 ] 
18:08:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F00>, <py_sfcl.CommandDataDefinition object at 0x05E50E40>) , Command count = 490 ] 
18:08:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E70>, <py_sfcl.CommandDataDefinition object at 0x05E50EA0>) , Command count = 491 ] 
18:08:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:27: [ SetCardRCA(0x1, 0xD555) , Command count = 492 ] 
18:08:27: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509C0>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 493 ] 
18:08:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55060>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 494 ] 
18:08:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:08:27: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:08:27: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:08:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:08:27: Perform Power Off and On.
18:08:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 495 ] 
18:08:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:08:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F60>, <py_sfcl.CommandDataDefinition object at 0x05E55120>) , Command count = 496 ] 
18:08:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E551E0>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 497 ] 
18:08:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:08:29: [ SetCardRCA(0x1, 0xD555) , Command count = 498 ] 
18:08:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:29: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:31: Host Frequency set to 25000 KHz
18:08:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:31: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55210>, 0x0, True) , Command count = 499 ] 
18:08:31: [GO18_globalSetVolt]### Host voltage value is set.
18:08:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55090>, 0x0, False) , Command count = 500 ] 
18:08:31: [GO18_globalSetVolt]### Host voltage value is set.
18:08:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 501 ] 
18:08:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 502 ] 
18:08:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 503 ] 
18:08:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F840>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 504 ] 
18:08:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55660>, <py_sfcl.CommandDataDefinition object at 0x05E554B0>) , Command count = 505 ] 
18:08:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:31: [ SetCardRCA(0x1, 0xD555) , Command count = 506 ] 
18:08:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:32: Host Frequency set to 25000 KHz
18:08:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:32: ####CSD Registe 2.0 Values####
18:08:32: CSD_STRUCTURE                                 :0x1
18:08:32: Reserv1                                       :0x0
18:08:32: Time Access 1 TAAC                            :0xe
18:08:32: Time Access 2 NSAC*100                        :0x0
18:08:32: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:32: Card Command Classess CCC                     :0x5b5
18:08:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:32: DSR(driver stage register)  DSR_IMP           :0x0
18:08:32: Reserv2                                       :0x0
18:08:32: Device Size C_SIZE                            :0xedc8
18:08:32: Reserv3                                       :0x0
18:08:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:32: Reserv4                                       :0x0
18:08:32: Write Speed Factor R2W_FACTOR                 :0x2
18:08:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:32: FILE_FORMAT_GRP                               :0x0
18:08:32: COPY flag                                     :0x1
18:08:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:32: File_Format                                   :0x0
18:08:32: CRC                                           :0x0
18:08:32: ####CSD Registe Values####  

18:08:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:32: [GetSCRRegisterEntry] Passed
18:08:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:32: Data_Status_After Erases          : 0
18:08:32: CPRM Security Support             : No Security
18:08:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:32: Spec. Version                     : Version 3.0X
18:08:32: Extended Security Support         : Extended_Security_Not_Supported
18:08:32: Command Support                   : COMMAND_SUPPORT
18:08:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052782D0>, <py_sfcl.CommandDataDefinition object at 0x05E553C0>) , Command count = 507 ] 
18:08:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E55270>) , Command count = 508 ] 
18:08:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:32: [ SetBusWidth(0x4) , Command count = 509 ] 
18:08:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E554E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 510 ] 
18:08:32: Protected Area Size 0x28000
18:08:32: Bus Width           2
18:08:32: Secure Mode         0
18:08:32: Speed  Class        4
18:08:32: Perf Move           0
18:08:32: Au Size             9
18:08:32: Erase Size          15
18:08:32: Erase Timeout       1
18:08:32: Erase offset        1
18:08:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 511 ] 
18:08:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:32: Host Frequency set to 100000 KHz
18:08:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:32: ####CSD Registe 2.0 Values####
18:08:32: CSD_STRUCTURE                                 :0x1
18:08:32: Reserv1                                       :0x0
18:08:32: Time Access 1 TAAC                            :0xe
18:08:32: Time Access 2 NSAC*100                        :0x0
18:08:32: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:32: Card Command Classess CCC                     :0x5b5
18:08:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:32: DSR(driver stage register)  DSR_IMP           :0x0
18:08:32: Reserv2                                       :0x0
18:08:32: Device Size C_SIZE                            :0xedc8
18:08:32: Reserv3                                       :0x0
18:08:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:32: Reserv4                                       :0x0
18:08:32: Write Speed Factor R2W_FACTOR                 :0x2
18:08:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:32: FILE_FORMAT_GRP                               :0x0
18:08:32: COPY flag                                     :0x1
18:08:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:32: File_Format                                   :0x0
18:08:32: CRC                                           :0x0
18:08:32: ####CSD Registe Values####  

18:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB270>, <py_sfcl.CommandDataDefinition object at 0x052BB300>) , Command count = 512 ] 
18:08:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 513 ] 
18:08:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:32: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:08:32: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:08:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:32: [GetSCRRegisterEntry] Passed
18:08:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:32: Data_Status_After Erases          : 0
18:08:32: CPRM Security Support             : No Security
18:08:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:32: Spec. Version                     : Version 3.0X
18:08:32: Extended Security Support         : Extended_Security_Not_Supported
18:08:33: Command Support                   : COMMAND_SUPPORT
18:08:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:33: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:08:33: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:08:33: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:08:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:33: [GetSCRRegisterEntry] Passed
18:08:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:33: Data_Status_After Erases          : 0
18:08:33: CPRM Security Support             : No Security
18:08:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:33: Spec. Version                     : Version 3.0X
18:08:33: Extended Security Support         : Extended_Security_Not_Supported
18:08:33: Command Support                   : COMMAND_SUPPORT
18:08:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:33: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:08:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:33: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 514 ] 
18:08:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:08:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:33: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:35: Host Frequency set to 25000 KHz
18:08:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:35: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB570>, 0x0, True) , Command count = 515 ] 
18:08:35: [GO18_globalSetVolt]### Host voltage value is set.
18:08:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55690>, 0x0, False) , Command count = 516 ] 
18:08:35: [GO18_globalSetVolt]### Host voltage value is set.
18:08:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 517 ] 
18:08:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 518 ] 
18:08:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 519 ] 
18:08:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05270930>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 520 ] 
18:08:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF90>, <py_sfcl.CommandDataDefinition object at 0x05E55870>) , Command count = 521 ] 
18:08:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:35: [ SetCardRCA(0x1, 0xD555) , Command count = 522 ] 
18:08:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:36: Host Frequency set to 25000 KHz
18:08:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:36: ####CSD Registe 2.0 Values####
18:08:36: CSD_STRUCTURE                                 :0x1
18:08:36: Reserv1                                       :0x0
18:08:36: Time Access 1 TAAC                            :0xe
18:08:36: Time Access 2 NSAC*100                        :0x0
18:08:36: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:36: Card Command Classess CCC                     :0x5b5
18:08:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:36: DSR(driver stage register)  DSR_IMP           :0x0
18:08:36: Reserv2                                       :0x0
18:08:36: Device Size C_SIZE                            :0xedc8
18:08:36: Reserv3                                       :0x0
18:08:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:36: Reserv4                                       :0x0
18:08:36: Write Speed Factor R2W_FACTOR                 :0x2
18:08:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:36: FILE_FORMAT_GRP                               :0x0
18:08:36: COPY flag                                     :0x1
18:08:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:36: File_Format                                   :0x0
18:08:36: CRC                                           :0x0
18:08:36: ####CSD Registe Values####  

18:08:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:36: [GetSCRRegisterEntry] Passed
18:08:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:36: Data_Status_After Erases          : 0
18:08:36: CPRM Security Support             : No Security
18:08:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:36: Spec. Version                     : Version 3.0X
18:08:36: Extended Security Support         : Extended_Security_Not_Supported
18:08:36: Command Support                   : COMMAND_SUPPORT
18:08:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E558A0>) , Command count = 523 ] 
18:08:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 524 ] 
18:08:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:36: [ SetBusWidth(0x4) , Command count = 525 ] 
18:08:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 526 ] 
18:08:36: Protected Area Size 0x28000
18:08:36: Bus Width           2
18:08:36: Secure Mode         0
18:08:36: Speed  Class        4
18:08:36: Perf Move           0
18:08:36: Au Size             9
18:08:36: Erase Size          15
18:08:36: Erase Timeout       1
18:08:36: Erase offset        1
18:08:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 527 ] 
18:08:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:36: Host Frequency set to 100000 KHz
18:08:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:36: ####CSD Registe 2.0 Values####
18:08:36: CSD_STRUCTURE                                 :0x1
18:08:36: Reserv1                                       :0x0
18:08:36: Time Access 1 TAAC                            :0xe
18:08:36: Time Access 2 NSAC*100                        :0x0
18:08:36: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:36: Card Command Classess CCC                     :0x5b5
18:08:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:36: DSR(driver stage register)  DSR_IMP           :0x0
18:08:36: Reserv2                                       :0x0
18:08:36: Device Size C_SIZE                            :0xedc8
18:08:36: Reserv3                                       :0x0
18:08:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:36: Reserv4                                       :0x0
18:08:36: Write Speed Factor R2W_FACTOR                 :0x2
18:08:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:36: FILE_FORMAT_GRP                               :0x0
18:08:36: COPY flag                                     :0x1
18:08:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:36: File_Format                                   :0x0
18:08:36: CRC                                           :0x0
18:08:36: ####CSD Registe Values####  

18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C24E0>, <py_sfcl.CommandDataDefinition object at 0x05E557E0>) , Command count = 528 ] 
18:08:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 529 ] 
18:08:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 530 ] 
18:08:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 531 ] 
18:08:36: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E55570>) , Command count = 532 ] 
18:08:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBD80>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 533 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55BA0>, <py_sfcl.CommandDataDefinition object at 0x05E55A20>) , Command count = 534 ] 
18:08:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E559F0>) , Command count = 535 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05D2A0C0>) , Command count = 536 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AE0>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 537 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py_sfcl.CommandDataDefinition object at 0x05E55C00>) , Command count = 538 ] 
18:08:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 539 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A120>, <py_sfcl.CommandDataDefinition object at 0x05E55C30>) , Command count = 540 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 541 ] 
18:08:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 542 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8A0>, <py_sfcl.CommandDataDefinition object at 0x05D2A420>) , Command count = 543 ] 
18:08:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:37: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:08:37: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:08:37: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:08:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:37: [GetSCRRegisterEntry] Passed
18:08:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:37: Data_Status_After Erases          : 0
18:08:37: CPRM Security Support             : No Security
18:08:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:37: Spec. Version                     : Version 3.0X
18:08:37: Extended Security Support         : Extended_Security_Not_Supported
18:08:37: Command Support                   : COMMAND_SUPPORT
18:08:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:37: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:38: [GetSCRRegisterEntry] Passed
18:08:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:38: Data_Status_After Erases          : 0
18:08:38: CPRM Security Support             : No Security
18:08:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:38: Spec. Version                     : Version 3.0X
18:08:38: Extended Security Support         : Extended_Security_Not_Supported
18:08:38: Command Support                   : COMMAND_SUPPORT
18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:38: [GetSCRRegisterEntry] Passed
18:08:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:38: Data_Status_After Erases          : 0
18:08:38: CPRM Security Support             : No Security
18:08:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:38: Spec. Version                     : Version 3.0X
18:08:38: Extended Security Support         : Extended_Security_Not_Supported
18:08:38: Command Support                   : COMMAND_SUPPORT
18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:38: [GetSCRRegisterEntry] Passed
18:08:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:38: Data_Status_After Erases          : 0
18:08:38: CPRM Security Support             : No Security
18:08:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:38: Spec. Version                     : Version 3.0X
18:08:38: Extended Security Support         : Extended_Security_Not_Supported
18:08:38: Command Support                   : COMMAND_SUPPORT
18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:38: [GetSCRRegisterEntry] Passed
18:08:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:38: Data_Status_After Erases          : 0
18:08:38: CPRM Security Support             : No Security
18:08:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:38: Spec. Version                     : Version 3.0X
18:08:38: Extended Security Support         : Extended_Security_Not_Supported
18:08:38: Command Support                   : COMMAND_SUPPORT
18:08:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:38: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:08:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:08:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:08:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:08:38: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:08:38: Perform Power Off and On.
18:08:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 544 ] 
18:08:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:08:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05D2A930>) , Command count = 545 ] 
18:08:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2AC60>) , Command count = 546 ] 
18:08:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:08:40: [ SetCardRCA(0x1, 0xD555) , Command count = 547 ] 
18:08:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:40: [GO4_globalInitCard]### Switch to Specify Card Type
18:08:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:42: Host Frequency set to 25000 KHz
18:08:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:42: [GO18_globalSetVolt]### Set Host Voltage value.
18:08:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:08:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAAB10>, 0x0, True) , Command count = 548 ] 
18:08:42: [GO18_globalSetVolt]### Host voltage value is set.
18:08:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:08:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDB10>, 0x0, False) , Command count = 549 ] 
18:08:42: [GO18_globalSetVolt]### Host voltage value is set.
18:08:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 550 ] 
18:08:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 551 ] 
18:08:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 552 ] 
18:08:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05DAA660>) , Command count = 553 ] 
18:08:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x05E55F90>) , Command count = 554 ] 
18:08:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:42: [ SetCardRCA(0x1, 0xD555) , Command count = 555 ] 
18:08:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:08:43: Host Frequency set to 25000 KHz
18:08:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:08:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:43: ####CSD Registe 2.0 Values####
18:08:43: CSD_STRUCTURE                                 :0x1
18:08:43: Reserv1                                       :0x0
18:08:43: Time Access 1 TAAC                            :0xe
18:08:43: Time Access 2 NSAC*100                        :0x0
18:08:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:08:43: Card Command Classess CCC                     :0x5b5
18:08:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:43: DSR(driver stage register)  DSR_IMP           :0x0
18:08:43: Reserv2                                       :0x0
18:08:43: Device Size C_SIZE                            :0xedc8
18:08:43: Reserv3                                       :0x0
18:08:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:43: Reserv4                                       :0x0
18:08:43: Write Speed Factor R2W_FACTOR                 :0x2
18:08:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:43: FILE_FORMAT_GRP                               :0x0
18:08:43: COPY flag                                     :0x1
18:08:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:43: File_Format                                   :0x0
18:08:43: CRC                                           :0x0
18:08:43: ####CSD Registe Values####  

18:08:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:43: [GetSCRRegisterEntry] Passed
18:08:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:43: Data_Status_After Erases          : 0
18:08:43: CPRM Security Support             : No Security
18:08:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:43: Spec. Version                     : Version 3.0X
18:08:43: Extended Security Support         : Extended_Security_Not_Supported
18:08:43: Command Support                   : COMMAND_SUPPORT
18:08:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 556 ] 
18:08:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E55DE0>) , Command count = 557 ] 
18:08:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:08:43: [ SetBusWidth(0x4) , Command count = 558 ] 
18:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 559 ] 
18:08:43: Protected Area Size 0x28000
18:08:43: Bus Width           2
18:08:43: Secure Mode         0
18:08:43: Speed  Class        4
18:08:43: Perf Move           0
18:08:43: Au Size             9
18:08:43: Erase Size          15
18:08:43: Erase Timeout       1
18:08:43: Erase offset        1
18:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:08:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 560 ] 
18:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:08:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:08:43: Host Frequency set to 100000 KHz
18:08:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:08:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:08:43: ####CSD Registe 2.0 Values####
18:08:43: CSD_STRUCTURE                                 :0x1
18:08:43: Reserv1                                       :0x0
18:08:43: Time Access 1 TAAC                            :0xe
18:08:43: Time Access 2 NSAC*100                        :0x0
18:08:43: Data Transfer Rate TRAN_SPEED                 :0xb
18:08:43: Card Command Classess CCC                     :0x5b5
18:08:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:08:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:08:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:08:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:08:43: DSR(driver stage register)  DSR_IMP           :0x0
18:08:43: Reserv2                                       :0x0
18:08:43: Device Size C_SIZE                            :0xedc8
18:08:43: Reserv3                                       :0x0
18:08:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:08:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:08:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:08:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:08:43: Reserv4                                       :0x0
18:08:43: Write Speed Factor R2W_FACTOR                 :0x2
18:08:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:08:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:08:43: FILE_FORMAT_GRP                               :0x0
18:08:43: COPY flag                                     :0x1
18:08:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:08:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:08:43: File_Format                                   :0x0
18:08:43: CRC                                           :0x0
18:08:43: ####CSD Registe Values####  

18:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D6F0>, <py_sfcl.CommandDataDefinition object at 0x05E2D660>) , Command count = 561 ] 
18:08:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E2DC90>) , Command count = 562 ] 
18:08:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:08:43: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:08:43: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:08:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 563 ] 
18:08:43: Protected Area Size 0x28000
18:08:43: Bus Width           2
18:08:43: Secure Mode         0
18:08:43: Speed  Class        4
18:08:43: Perf Move           0
18:08:43: Au Size             9
18:08:43: Erase Size          15
18:08:43: Erase Timeout       1
18:08:43: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:08:44: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 564 ] 
18:08:44: Protected Area Size 0x28000
18:08:44: Bus Width           2
18:08:44: Secure Mode         0
18:08:44: Speed  Class        4
18:08:44: Perf Move           0
18:08:44: Au Size             9
18:08:44: Erase Size          15
18:08:44: Erase Timeout       1
18:08:44: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 565 ] 
18:08:44: Protected Area Size 0x28000
18:08:44: Bus Width           2
18:08:44: Secure Mode         0
18:08:44: Speed  Class        4
18:08:44: Perf Move           0
18:08:44: Au Size             9
18:08:44: Erase Size          15
18:08:44: Erase Timeout       1
18:08:44: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 566 ] 
18:08:44: Protected Area Size 0x28000
18:08:44: Bus Width           2
18:08:44: Secure Mode         0
18:08:44: Speed  Class        4
18:08:44: Perf Move           0
18:08:44: Au Size             9
18:08:44: Erase Size          15
18:08:44: Erase Timeout       1
18:08:44: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 567 ] 
18:08:44: Protected Area Size 0x28000
18:08:44: Bus Width           2
18:08:44: Secure Mode         0
18:08:44: Speed  Class        4
18:08:44: Perf Move           0
18:08:44: Au Size             9
18:08:44: Erase Size          15
18:08:44: Erase Timeout       1
18:08:44: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 568 ] 
18:08:44: Protected Area Size 0x28000
18:08:44: Bus Width           2
18:08:44: Secure Mode         0
18:08:44: Speed  Class        4
18:08:44: Perf Move           0
18:08:44: Au Size             9
18:08:44: Erase Size          15
18:08:44: Erase Timeout       1
18:08:44: Erase offset        1
18:08:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:08:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:08:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 23 

18:08:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:08:47: [ HostReset(False) , Command count = 569 ] 
18:08:47: [ SetSpecialModes(0x5, True) , Command count = 570 ] 
18:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 571 ] 
18:08:47: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD80>, <py_sfcl.CommandDataDefinition object at 0x05E2DA50>) , Command count = 572 ] 
18:08:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B10>, <py_sfcl.CommandDataDefinition object at 0x05E2DBD0>) , Command count = 573 ] 
18:08:47: [ GetCardStatus() , Command count = 574 ] 
18:08:47: ACmd51[ SEND_SCR ] Failed with an exception
18:08:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E50900>) , Command count = 575 ] 
18:08:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE40>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 576 ] 
18:08:47: [ GetCardStatus() , Command count = 577 ] 
18:08:47: ACMD13[ SD_STATUS ] Failed with an exception
18:08:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:08:49: [ HostReset(False) , Command count = 578 ] 
18:08:49: [ SetSpecialModes(0x5, True) , Command count = 579 ] 
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37990>, <py_sfcl.CommandDataDefinition object at 0x05E37DE0>) , Command count = 580 ] 
18:08:49: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B40>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 581 ] 
18:08:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E37C00>) , Command count = 582 ] 
18:08:49: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D20>, <py_sfcl.CommandDataDefinition object at 0x05E59180>) , Command count = 583 ] 
18:08:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A80>, <py_sfcl.CommandDataDefinition object at 0x05E59060>) , Command count = 584 ] 
18:08:49: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E37F60>) , Command count = 585 ] 
18:08:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37FC0>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 586 ] 
18:08:49: [ GetCardStatus() , Command count = 587 ] 
18:08:49: ACmd51[ SEND_SCR ] Failed with an exception
18:08:49: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF60>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 588 ] 
18:08:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:08:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E377B0>) , Command count = 589 ] 
18:08:50: [ GetCardStatus() , Command count = 590 ] 
18:08:50: ACMD13[ SD_STATUS ] Failed with an exception
18:08:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:08:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 591 ] 
18:08:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 592 ] 
18:08:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37CC0>, <py_sfcl.CommandDataDefinition object at 0x05E37C90>) , Command count = 593 ] 
18:08:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:52: [GetSCRRegisterEntry] Failed
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:08:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 594 ] 
18:08:52: [ GetCardStatus() , Command count = 595 ] 
18:08:52: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:08:52: [DVTCommonLib]### Exception_Details :Time out error on card response
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E377B0>) , Command count = 596 ] 
18:08:52: [ GetCardStatus() , Command count = 597 ] 
18:08:52: CMD55[ APP_CMD ] Failed with an exception
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37870>, <py_sfcl.CommandDataDefinition object at 0x05E37B70>) , Command count = 598 ] 
18:08:52: [ GetCardStatus() , Command count = 599 ] 
18:08:52: ACmd51[ SEND_SCR ] Failed with an exception
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E2DE10>) , Command count = 600 ] 
18:08:52: [ GetCardStatus() , Command count = 601 ] 
18:08:52: CMD55[ APP_CMD ] Failed with an exception
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E060>, <py_sfcl.CommandDataDefinition object at 0x05E37B70>) , Command count = 602 ] 
18:08:52: [ GetCardStatus() , Command count = 603 ] 
18:08:52: ACMD13[ SD_STATUS ] Failed with an exception
18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:08:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:08:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 604 ] 
18:08:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 605 ] 
18:08:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37420>, <py_sfcl.CommandDataDefinition object at 0x05E37750>) , Command count = 606 ] 
18:08:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E270>, <py_sfcl.CommandDataDefinition object at 0x05E3E240>) , Command count = 607 ] 
18:08:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:55: [ SetCardRCA(0x1, 0xD555) , Command count = 608 ] 
18:08:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E37810>) , Command count = 609 ] 
18:08:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:08:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:08:55: [GetSCRRegisterEntry] Passed
18:08:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:08:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:08:55: Data_Status_After Erases          : 0
18:08:55: CPRM Security Support             : No Security
18:08:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:08:55: Spec. Version                     : Version 3.0X
18:08:55: Extended Security Support         : Extended_Security_Not_Supported
18:08:55: Command Support                   : COMMAND_SUPPORT
18:08:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:08:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:08:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 610 ] 
18:08:55: Protected Area Size 0x28000
18:08:55: Bus Width           0
18:08:55: Secure Mode         0
18:08:55: Speed  Class        4
18:08:55: Perf Move           0
18:08:55: Au Size             9
18:08:55: Erase Size          15
18:08:55: Erase Timeout       1
18:08:55: Erase offset        1
18:08:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:08:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:08:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 611 ] 
18:08:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:08:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 612 ] 
18:08:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:08:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E450>) , Command count = 613 ] 
18:08:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E510>, <py_sfcl.CommandDataDefinition object at 0x05E3E540>) , Command count = 614 ] 
18:08:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:08:57: [ SetCardRCA(0x1, 0xD555) , Command count = 615 ] 
18:08:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37690>, <py_sfcl.CommandDataDefinition object at 0x05E37BA0>) , Command count = 616 ] 
18:08:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:08:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E180>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 617 ] 
18:08:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:08:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:08:57: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:08:57: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:08:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:08:57: Perform Power Off and On.
18:08:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:08:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 618 ] 
18:08:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:08:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:08:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:08:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:08:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:08:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:08:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E3E6F0>) , Command count = 619 ] 
18:08:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:08:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E900>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 620 ] 
18:08:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:08:59: [ SetCardRCA(0x1, 0xD555) , Command count = 621 ] 
18:08:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:08:59: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:01: Host Frequency set to 25000 KHz
18:09:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:01: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E930>, 0x0, True) , Command count = 622 ] 
18:09:01: [GO18_globalSetVolt]### Host voltage value is set.
18:09:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E810>, 0x0, False) , Command count = 623 ] 
18:09:01: [GO18_globalSetVolt]### Host voltage value is set.
18:09:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 624 ] 
18:09:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 625 ] 
18:09:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 626 ] 
18:09:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8D20>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 627 ] 
18:09:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3EBD0>) , Command count = 628 ] 
18:09:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:02: [ SetCardRCA(0x1, 0xD555) , Command count = 629 ] 
18:09:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:02: Host Frequency set to 25000 KHz
18:09:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:02: ####CSD Registe 2.0 Values####
18:09:02: CSD_STRUCTURE                                 :0x1
18:09:02: Reserv1                                       :0x0
18:09:02: Time Access 1 TAAC                            :0xe
18:09:02: Time Access 2 NSAC*100                        :0x0
18:09:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:02: Card Command Classess CCC                     :0x5b5
18:09:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:02: DSR(driver stage register)  DSR_IMP           :0x0
18:09:02: Reserv2                                       :0x0
18:09:02: Device Size C_SIZE                            :0xedc8
18:09:02: Reserv3                                       :0x0
18:09:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:02: Reserv4                                       :0x0
18:09:02: Write Speed Factor R2W_FACTOR                 :0x2
18:09:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:02: FILE_FORMAT_GRP                               :0x0
18:09:02: COPY flag                                     :0x1
18:09:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:02: File_Format                                   :0x0
18:09:02: CRC                                           :0x0
18:09:02: ####CSD Registe Values####  

18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:02: [GetSCRRegisterEntry] Passed
18:09:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:02: Data_Status_After Erases          : 0
18:09:02: CPRM Security Support             : No Security
18:09:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:02: Spec. Version                     : Version 3.0X
18:09:02: Extended Security Support         : Extended_Security_Not_Supported
18:09:02: Command Support                   : COMMAND_SUPPORT
18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ECF0>, <py_sfcl.CommandDataDefinition object at 0x05E59420>) , Command count = 630 ] 
18:09:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE10>, <py_sfcl.CommandDataDefinition object at 0x05E59120>) , Command count = 631 ] 
18:09:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:02: [ SetBusWidth(0x4) , Command count = 632 ] 
18:09:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 633 ] 
18:09:02: Protected Area Size 0x28000
18:09:02: Bus Width           2
18:09:02: Secure Mode         0
18:09:02: Speed  Class        4
18:09:02: Perf Move           0
18:09:02: Au Size             9
18:09:02: Erase Size          15
18:09:02: Erase Timeout       1
18:09:02: Erase offset        1
18:09:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 634 ] 
18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:02: Host Frequency set to 100000 KHz
18:09:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:02: ####CSD Registe 2.0 Values####
18:09:02: CSD_STRUCTURE                                 :0x1
18:09:02: Reserv1                                       :0x0
18:09:02: Time Access 1 TAAC                            :0xe
18:09:02: Time Access 2 NSAC*100                        :0x0
18:09:02: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:02: Card Command Classess CCC                     :0x5b5
18:09:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:02: DSR(driver stage register)  DSR_IMP           :0x0
18:09:02: Reserv2                                       :0x0
18:09:02: Device Size C_SIZE                            :0xedc8
18:09:02: Reserv3                                       :0x0
18:09:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:02: Reserv4                                       :0x0
18:09:02: Write Speed Factor R2W_FACTOR                 :0x2
18:09:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:02: FILE_FORMAT_GRP                               :0x0
18:09:02: COPY flag                                     :0x1
18:09:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:02: File_Format                                   :0x0
18:09:02: CRC                                           :0x0
18:09:02: ####CSD Registe Values####  

18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E3EC60>) , Command count = 635 ] 
18:09:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EEA0>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 636 ] 
18:09:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:02: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:09:02: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:02: [GetSCRRegisterEntry] Passed
18:09:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:02: Data_Status_After Erases          : 0
18:09:02: CPRM Security Support             : No Security
18:09:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:02: Spec. Version                     : Version 3.0X
18:09:02: Extended Security Support         : Extended_Security_Not_Supported
18:09:02: Command Support                   : COMMAND_SUPPORT
18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:02: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:09:02: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:09:02: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:02: [GetSCRRegisterEntry] Passed
18:09:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:02: Data_Status_After Erases          : 0
18:09:02: CPRM Security Support             : No Security
18:09:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:02: Spec. Version                     : Version 3.0X
18:09:02: Extended Security Support         : Extended_Security_Not_Supported
18:09:02: Command Support                   : COMMAND_SUPPORT
18:09:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:02: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:02: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 637 ] 
18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:09:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:02: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:04: Host Frequency set to 25000 KHz
18:09:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:04: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E690>, 0x0, True) , Command count = 638 ] 
18:09:04: [GO18_globalSetVolt]### Host voltage value is set.
18:09:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55930>, 0x0, False) , Command count = 639 ] 
18:09:04: [GO18_globalSetVolt]### Host voltage value is set.
18:09:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 640 ] 
18:09:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 641 ] 
18:09:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 642 ] 
18:09:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC00>, <py_sfcl.CommandDataDefinition object at 0x05E3EF30>) , Command count = 643 ] 
18:09:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EA20>) , Command count = 644 ] 
18:09:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:04: [ SetCardRCA(0x1, 0xD555) , Command count = 645 ] 
18:09:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:05: Host Frequency set to 25000 KHz
18:09:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:05: ####CSD Registe 2.0 Values####
18:09:05: CSD_STRUCTURE                                 :0x1
18:09:05: Reserv1                                       :0x0
18:09:05: Time Access 1 TAAC                            :0xe
18:09:05: Time Access 2 NSAC*100                        :0x0
18:09:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:05: Card Command Classess CCC                     :0x5b5
18:09:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:05: DSR(driver stage register)  DSR_IMP           :0x0
18:09:05: Reserv2                                       :0x0
18:09:05: Device Size C_SIZE                            :0xedc8
18:09:05: Reserv3                                       :0x0
18:09:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:05: Reserv4                                       :0x0
18:09:05: Write Speed Factor R2W_FACTOR                 :0x2
18:09:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:05: FILE_FORMAT_GRP                               :0x0
18:09:05: COPY flag                                     :0x1
18:09:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:05: File_Format                                   :0x0
18:09:05: CRC                                           :0x0
18:09:05: ####CSD Registe Values####  

18:09:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:05: [GetSCRRegisterEntry] Passed
18:09:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:05: Data_Status_After Erases          : 0
18:09:05: CPRM Security Support             : No Security
18:09:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:05: Spec. Version                     : Version 3.0X
18:09:05: Extended Security Support         : Extended_Security_Not_Supported
18:09:05: Command Support                   : COMMAND_SUPPORT
18:09:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 646 ] 
18:09:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44300>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 647 ] 
18:09:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:05: [ SetBusWidth(0x4) , Command count = 648 ] 
18:09:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 649 ] 
18:09:05: Protected Area Size 0x28000
18:09:05: Bus Width           2
18:09:05: Secure Mode         0
18:09:05: Speed  Class        4
18:09:05: Perf Move           0
18:09:05: Au Size             9
18:09:05: Erase Size          15
18:09:05: Erase Timeout       1
18:09:05: Erase offset        1
18:09:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 650 ] 
18:09:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:05: Host Frequency set to 100000 KHz
18:09:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:05: ####CSD Registe 2.0 Values####
18:09:05: CSD_STRUCTURE                                 :0x1
18:09:05: Reserv1                                       :0x0
18:09:05: Time Access 1 TAAC                            :0xe
18:09:05: Time Access 2 NSAC*100                        :0x0
18:09:05: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:05: Card Command Classess CCC                     :0x5b5
18:09:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:05: DSR(driver stage register)  DSR_IMP           :0x0
18:09:05: Reserv2                                       :0x0
18:09:05: Device Size C_SIZE                            :0xedc8
18:09:05: Reserv3                                       :0x0
18:09:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:05: Reserv4                                       :0x0
18:09:05: Write Speed Factor R2W_FACTOR                 :0x2
18:09:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:05: FILE_FORMAT_GRP                               :0x0
18:09:05: COPY flag                                     :0x1
18:09:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:05: File_Format                                   :0x0
18:09:05: CRC                                           :0x0
18:09:05: ####CSD Registe Values####  

18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E44390>) , Command count = 651 ] 
18:09:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E444E0>) , Command count = 652 ] 
18:09:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440F0>, <py_sfcl.CommandDataDefinition object at 0x05E445D0>) , Command count = 653 ] 
18:09:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E447B0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 654 ] 
18:09:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441B0>, <py_sfcl.CommandDataDefinition object at 0x05E591B0>) , Command count = 655 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 656 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E592A0>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 657 ] 
18:09:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E448A0>) , Command count = 658 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 659 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44990>, <py_sfcl.CommandDataDefinition object at 0x05E44A50>) , Command count = 660 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A20>, <py_sfcl.CommandDataDefinition object at 0x05E44AE0>) , Command count = 661 ] 
18:09:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44AB0>) , Command count = 662 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E44B70>) , Command count = 663 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44BD0>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 664 ] 
18:09:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B40>, <py_sfcl.CommandDataDefinition object at 0x05E44C60>) , Command count = 665 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A80>, <py_sfcl.CommandDataDefinition object at 0x05E44CF0>) , Command count = 666 ] 
18:09:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:06: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:09:06: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:09:06: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:06: [GetSCRRegisterEntry] Passed
18:09:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:06: Data_Status_After Erases          : 0
18:09:06: CPRM Security Support             : No Security
18:09:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:06: Spec. Version                     : Version 3.0X
18:09:06: Extended Security Support         : Extended_Security_Not_Supported
18:09:06: Command Support                   : COMMAND_SUPPORT
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:06: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:06: [GetSCRRegisterEntry] Passed
18:09:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:06: Data_Status_After Erases          : 0
18:09:06: CPRM Security Support             : No Security
18:09:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:06: Spec. Version                     : Version 3.0X
18:09:06: Extended Security Support         : Extended_Security_Not_Supported
18:09:06: Command Support                   : COMMAND_SUPPORT
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:06: [GetSCRRegisterEntry] Passed
18:09:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:06: Data_Status_After Erases          : 0
18:09:06: CPRM Security Support             : No Security
18:09:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:06: Spec. Version                     : Version 3.0X
18:09:06: Extended Security Support         : Extended_Security_Not_Supported
18:09:06: Command Support                   : COMMAND_SUPPORT
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:06: [GetSCRRegisterEntry] Passed
18:09:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:06: Data_Status_After Erases          : 0
18:09:06: CPRM Security Support             : No Security
18:09:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:06: Spec. Version                     : Version 3.0X
18:09:06: Extended Security Support         : Extended_Security_Not_Supported
18:09:06: Command Support                   : COMMAND_SUPPORT
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:06: [GetSCRRegisterEntry] Passed
18:09:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:06: Data_Status_After Erases          : 0
18:09:06: CPRM Security Support             : No Security
18:09:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:06: Spec. Version                     : Version 3.0X
18:09:06: Extended Security Support         : Extended_Security_Not_Supported
18:09:06: Command Support                   : COMMAND_SUPPORT
18:09:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:06: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:09:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:09:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:09:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:09:06: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:09:06: Perform Power Off and On.
18:09:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 667 ] 
18:09:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:09:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E44D50>) , Command count = 668 ] 
18:09:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F210>, <py_sfcl.CommandDataDefinition object at 0x05E4F090>) , Command count = 669 ] 
18:09:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:09:08: [ SetCardRCA(0x1, 0xD555) , Command count = 670 ] 
18:09:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:08: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:10: Host Frequency set to 25000 KHz
18:09:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:10: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44360>, 0x0, True) , Command count = 671 ] 
18:09:10: [GO18_globalSetVolt]### Host voltage value is set.
18:09:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44180>, 0x0, False) , Command count = 672 ] 
18:09:10: [GO18_globalSetVolt]### Host voltage value is set.
18:09:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 673 ] 
18:09:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 674 ] 
18:09:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 675 ] 
18:09:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EF60>, <py_sfcl.CommandDataDefinition object at 0x05E4F2D0>) , Command count = 676 ] 
18:09:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F4B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F390>) , Command count = 677 ] 
18:09:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:10: [ SetCardRCA(0x1, 0xD555) , Command count = 678 ] 
18:09:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:10: Host Frequency set to 25000 KHz
18:09:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:10: ####CSD Registe 2.0 Values####
18:09:10: CSD_STRUCTURE                                 :0x1
18:09:10: Reserv1                                       :0x0
18:09:10: Time Access 1 TAAC                            :0xe
18:09:10: Time Access 2 NSAC*100                        :0x0
18:09:10: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:10: Card Command Classess CCC                     :0x5b5
18:09:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:10: DSR(driver stage register)  DSR_IMP           :0x0
18:09:10: Reserv2                                       :0x0
18:09:10: Device Size C_SIZE                            :0xedc8
18:09:10: Reserv3                                       :0x0
18:09:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:10: Reserv4                                       :0x0
18:09:10: Write Speed Factor R2W_FACTOR                 :0x2
18:09:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:10: FILE_FORMAT_GRP                               :0x0
18:09:10: COPY flag                                     :0x1
18:09:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:10: File_Format                                   :0x0
18:09:10: CRC                                           :0x0
18:09:10: ####CSD Registe Values####  

18:09:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:10: [GetSCRRegisterEntry] Passed
18:09:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:10: Data_Status_After Erases          : 0
18:09:10: CPRM Security Support             : No Security
18:09:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:10: Spec. Version                     : Version 3.0X
18:09:10: Extended Security Support         : Extended_Security_Not_Supported
18:09:10: Command Support                   : COMMAND_SUPPORT
18:09:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F480>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 679 ] 
18:09:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E44750>) , Command count = 680 ] 
18:09:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:10: [ SetBusWidth(0x4) , Command count = 681 ] 
18:09:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 682 ] 
18:09:10: Protected Area Size 0x28000
18:09:10: Bus Width           2
18:09:10: Secure Mode         0
18:09:10: Speed  Class        4
18:09:10: Perf Move           0
18:09:10: Au Size             9
18:09:10: Erase Size          15
18:09:10: Erase Timeout       1
18:09:10: Erase offset        1
18:09:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 683 ] 
18:09:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:11: Host Frequency set to 100000 KHz
18:09:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:11: ####CSD Registe 2.0 Values####
18:09:11: CSD_STRUCTURE                                 :0x1
18:09:11: Reserv1                                       :0x0
18:09:11: Time Access 1 TAAC                            :0xe
18:09:11: Time Access 2 NSAC*100                        :0x0
18:09:11: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:11: Card Command Classess CCC                     :0x5b5
18:09:11: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:11: DSR(driver stage register)  DSR_IMP           :0x0
18:09:11: Reserv2                                       :0x0
18:09:11: Device Size C_SIZE                            :0xedc8
18:09:11: Reserv3                                       :0x0
18:09:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:11: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:11: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:11: Reserv4                                       :0x0
18:09:11: Write Speed Factor R2W_FACTOR                 :0x2
18:09:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:11: FILE_FORMAT_GRP                               :0x0
18:09:11: COPY flag                                     :0x1
18:09:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:11: File_Format                                   :0x0
18:09:11: CRC                                           :0x0
18:09:11: ####CSD Registe Values####  

18:09:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F630>) , Command count = 684 ] 
18:09:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 685 ] 
18:09:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:11: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:09:11: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 686 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:09:11: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 687 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E440C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 688 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 689 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 690 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 691 ] 
18:09:11: Protected Area Size 0x28000
18:09:11: Bus Width           2
18:09:11: Secure Mode         0
18:09:11: Speed  Class        4
18:09:11: Perf Move           0
18:09:11: Au Size             9
18:09:11: Erase Size          15
18:09:11: Erase Timeout       1
18:09:11: Erase offset        1
18:09:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:09:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:09:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 22 

18:09:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:09:13: [ HostReset(False) , Command count = 692 ] 
18:09:13: [ SetSpecialModes(0x5, True) , Command count = 693 ] 
18:09:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E4FA80>) , Command count = 694 ] 
18:09:13: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:09:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F780>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 695 ] 
18:09:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F9C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FAE0>) , Command count = 696 ] 
18:09:13: [ GetCardStatus() , Command count = 697 ] 
18:09:13: ACmd51[ SEND_SCR ] Failed with an exception
18:09:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B70>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 698 ] 
18:09:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F930>, <py_sfcl.CommandDataDefinition object at 0x05E4FBD0>) , Command count = 699 ] 
18:09:13: [ GetCardStatus() , Command count = 700 ] 
18:09:13: ACMD13[ SD_STATUS ] Failed with an exception
18:09:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:09:15: [ HostReset(False) , Command count = 701 ] 
18:09:15: [ SetSpecialModes(0x5, True) , Command count = 702 ] 
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FDE0>, <py_sfcl.CommandDataDefinition object at 0x05E4FE70>) , Command count = 703 ] 
18:09:15: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E3E2A0>) , Command count = 704 ] 
18:09:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF00>, <py_sfcl.CommandDataDefinition object at 0x05E4FC60>) , Command count = 705 ] 
18:09:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50090>, <py_sfcl.CommandDataDefinition object at 0x05E4FCF0>) , Command count = 706 ] 
18:09:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50150>, <py_sfcl.CommandDataDefinition object at 0x05E592D0>) , Command count = 707 ] 
18:09:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50210>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 708 ] 
18:09:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 709 ] 
18:09:15: [ GetCardStatus() , Command count = 710 ] 
18:09:15: ACmd51[ SEND_SCR ] Failed with an exception
18:09:15: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 711 ] 
18:09:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50060>, <py_sfcl.CommandDataDefinition object at 0x05E4FF90>) , Command count = 712 ] 
18:09:16: [ GetCardStatus() , Command count = 713 ] 
18:09:16: ACMD13[ SD_STATUS ] Failed with an exception
18:09:16: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:16: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:09:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 714 ] 
18:09:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 715 ] 
18:09:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E50480>) , Command count = 716 ] 
18:09:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:18: [GetSCRRegisterEntry] Failed
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:09:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E502D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 717 ] 
18:09:18: [ GetCardStatus() , Command count = 718 ] 
18:09:18: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:09:18: [DVTCommonLib]### Exception_Details :Time out error on card response
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:09:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50060>, <py_sfcl.CommandDataDefinition object at 0x05E505D0>) , Command count = 719 ] 
18:09:18: [ GetCardStatus() , Command count = 720 ] 
18:09:18: CMD55[ APP_CMD ] Failed with an exception
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50330>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 721 ] 
18:09:18: [ GetCardStatus() , Command count = 722 ] 
18:09:18: ACmd51[ SEND_SCR ] Failed with an exception
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505D0>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 723 ] 
18:09:18: [ GetCardStatus() , Command count = 724 ] 
18:09:18: CMD55[ APP_CMD ] Failed with an exception
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50750>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 725 ] 
18:09:18: [ GetCardStatus() , Command count = 726 ] 
18:09:18: ACMD13[ SD_STATUS ] Failed with an exception
18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:09:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 727 ] 
18:09:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 728 ] 
18:09:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50930>, <py_sfcl.CommandDataDefinition object at 0x05E508D0>) , Command count = 729 ] 
18:09:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50AE0>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 730 ] 
18:09:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:21: [ SetCardRCA(0x1, 0xD555) , Command count = 731 ] 
18:09:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50360>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 732 ] 
18:09:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:21: [GetSCRRegisterEntry] Passed
18:09:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:21: Data_Status_After Erases          : 0
18:09:21: CPRM Security Support             : No Security
18:09:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:21: Spec. Version                     : Version 3.0X
18:09:21: Extended Security Support         : Extended_Security_Not_Supported
18:09:21: Command Support                   : COMMAND_SUPPORT
18:09:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 733 ] 
18:09:21: Protected Area Size 0x28000
18:09:21: Bus Width           0
18:09:21: Secure Mode         0
18:09:21: Speed  Class        4
18:09:21: Perf Move           0
18:09:21: Au Size             9
18:09:21: Erase Size          15
18:09:21: Erase Timeout       1
18:09:21: Erase offset        1
18:09:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:21: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:09:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 734 ] 
18:09:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 735 ] 
18:09:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D80>, <py_sfcl.CommandDataDefinition object at 0x05E50C30>) , Command count = 736 ] 
18:09:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D20>, <py_sfcl.CommandDataDefinition object at 0x05E50CF0>) , Command count = 737 ] 
18:09:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:23: [ SetCardRCA(0x1, 0xD555) , Command count = 738 ] 
18:09:23: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05E50270>) , Command count = 739 ] 
18:09:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E50BA0>) , Command count = 740 ] 
18:09:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:23: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:09:23: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:09:23: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:09:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:09:23: Perform Power Off and On.
18:09:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 741 ] 
18:09:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:09:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F00>, <py_sfcl.CommandDataDefinition object at 0x05E50E40>) , Command count = 742 ] 
18:09:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509F0>, <py_sfcl.CommandDataDefinition object at 0x05E50C00>) , Command count = 743 ] 
18:09:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:09:25: [ SetCardRCA(0x1, 0xD555) , Command count = 744 ] 
18:09:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:25: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:27: Host Frequency set to 25000 KHz
18:09:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:27: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E509C0>, 0x0, True) , Command count = 745 ] 
18:09:27: [GO18_globalSetVolt]### Host voltage value is set.
18:09:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50E10>, 0x0, False) , Command count = 746 ] 
18:09:28: [GO18_globalSetVolt]### Host voltage value is set.
18:09:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 747 ] 
18:09:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 748 ] 
18:09:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 749 ] 
18:09:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E55240>) , Command count = 750 ] 
18:09:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55210>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 751 ] 
18:09:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:28: [ SetCardRCA(0x1, 0xD555) , Command count = 752 ] 
18:09:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:28: Host Frequency set to 25000 KHz
18:09:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:28: ####CSD Registe 2.0 Values####
18:09:28: CSD_STRUCTURE                                 :0x1
18:09:28: Reserv1                                       :0x0
18:09:28: Time Access 1 TAAC                            :0xe
18:09:28: Time Access 2 NSAC*100                        :0x0
18:09:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:28: Card Command Classess CCC                     :0x5b5
18:09:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:28: DSR(driver stage register)  DSR_IMP           :0x0
18:09:28: Reserv2                                       :0x0
18:09:28: Device Size C_SIZE                            :0xedc8
18:09:28: Reserv3                                       :0x0
18:09:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:28: Reserv4                                       :0x0
18:09:28: Write Speed Factor R2W_FACTOR                 :0x2
18:09:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:28: FILE_FORMAT_GRP                               :0x0
18:09:28: COPY flag                                     :0x1
18:09:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:28: File_Format                                   :0x0
18:09:28: CRC                                           :0x0
18:09:28: ####CSD Registe Values####  

18:09:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:28: [GetSCRRegisterEntry] Passed
18:09:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:28: Data_Status_After Erases          : 0
18:09:28: CPRM Security Support             : No Security
18:09:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:28: Spec. Version                     : Version 3.0X
18:09:28: Extended Security Support         : Extended_Security_Not_Supported
18:09:28: Command Support                   : COMMAND_SUPPORT
18:09:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 753 ] 
18:09:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E50570>) , Command count = 754 ] 
18:09:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:28: [ SetBusWidth(0x4) , Command count = 755 ] 
18:09:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 756 ] 
18:09:28: Protected Area Size 0x28000
18:09:28: Bus Width           2
18:09:28: Secure Mode         0
18:09:28: Speed  Class        4
18:09:28: Perf Move           0
18:09:28: Au Size             9
18:09:28: Erase Size          15
18:09:28: Erase Timeout       1
18:09:28: Erase offset        1
18:09:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 757 ] 
18:09:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:28: Host Frequency set to 100000 KHz
18:09:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:28: ####CSD Registe 2.0 Values####
18:09:28: CSD_STRUCTURE                                 :0x1
18:09:28: Reserv1                                       :0x0
18:09:28: Time Access 1 TAAC                            :0xe
18:09:28: Time Access 2 NSAC*100                        :0x0
18:09:28: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:28: Card Command Classess CCC                     :0x5b5
18:09:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:28: DSR(driver stage register)  DSR_IMP           :0x0
18:09:28: Reserv2                                       :0x0
18:09:28: Device Size C_SIZE                            :0xedc8
18:09:28: Reserv3                                       :0x0
18:09:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:28: Reserv4                                       :0x0
18:09:28: Write Speed Factor R2W_FACTOR                 :0x2
18:09:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:28: FILE_FORMAT_GRP                               :0x0
18:09:28: COPY flag                                     :0x1
18:09:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:28: File_Format                                   :0x0
18:09:28: CRC                                           :0x0
18:09:28: ####CSD Registe Values####  

18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05278180>, <py_sfcl.CommandDataDefinition object at 0x05E55660>) , Command count = 758 ] 
18:09:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052782D0>, <py_sfcl.CommandDataDefinition object at 0x05E553C0>) , Command count = 759 ] 
18:09:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:09:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:09:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:29: [GetSCRRegisterEntry] Passed
18:09:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:29: Data_Status_After Erases          : 0
18:09:29: CPRM Security Support             : No Security
18:09:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:29: Spec. Version                     : Version 3.0X
18:09:29: Extended Security Support         : Extended_Security_Not_Supported
18:09:29: Command Support                   : COMMAND_SUPPORT
18:09:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:29: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:09:29: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:09:29: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:09:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:29: [GetSCRRegisterEntry] Passed
18:09:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:29: Data_Status_After Erases          : 0
18:09:29: CPRM Security Support             : No Security
18:09:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:29: Spec. Version                     : Version 3.0X
18:09:29: Extended Security Support         : Extended_Security_Not_Supported
18:09:29: Command Support                   : COMMAND_SUPPORT
18:09:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:29: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:09:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:29: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 760 ] 
18:09:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:09:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:29: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:31: Host Frequency set to 25000 KHz
18:09:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:31: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E3F0>, 0x0, True) , Command count = 761 ] 
18:09:31: [GO18_globalSetVolt]### Host voltage value is set.
18:09:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E446F0>, 0x0, False) , Command count = 762 ] 
18:09:31: [GO18_globalSetVolt]### Host voltage value is set.
18:09:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 763 ] 
18:09:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 764 ] 
18:09:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 765 ] 
18:09:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55270>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 766 ] 
18:09:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB570>, <py_sfcl.CommandDataDefinition object at 0x05E55090>) , Command count = 767 ] 
18:09:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:31: [ SetCardRCA(0x1, 0xD555) , Command count = 768 ] 
18:09:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:31: Host Frequency set to 25000 KHz
18:09:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:31: ####CSD Registe 2.0 Values####
18:09:31: CSD_STRUCTURE                                 :0x1
18:09:31: Reserv1                                       :0x0
18:09:31: Time Access 1 TAAC                            :0xe
18:09:31: Time Access 2 NSAC*100                        :0x0
18:09:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:31: Card Command Classess CCC                     :0x5b5
18:09:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:31: DSR(driver stage register)  DSR_IMP           :0x0
18:09:31: Reserv2                                       :0x0
18:09:31: Device Size C_SIZE                            :0xedc8
18:09:31: Reserv3                                       :0x0
18:09:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:31: Reserv4                                       :0x0
18:09:31: Write Speed Factor R2W_FACTOR                 :0x2
18:09:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:31: FILE_FORMAT_GRP                               :0x0
18:09:31: COPY flag                                     :0x1
18:09:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:31: File_Format                                   :0x0
18:09:31: CRC                                           :0x0
18:09:31: ####CSD Registe Values####  

18:09:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:31: [GetSCRRegisterEntry] Passed
18:09:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:31: Data_Status_After Erases          : 0
18:09:31: CPRM Security Support             : No Security
18:09:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:31: Spec. Version                     : Version 3.0X
18:09:31: Extended Security Support         : Extended_Security_Not_Supported
18:09:31: Command Support                   : COMMAND_SUPPORT
18:09:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55390>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 769 ] 
18:09:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55720>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 770 ] 
18:09:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:32: [ SetBusWidth(0x4) , Command count = 771 ] 
18:09:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 772 ] 
18:09:32: Protected Area Size 0x28000
18:09:32: Bus Width           2
18:09:32: Secure Mode         0
18:09:32: Speed  Class        4
18:09:32: Perf Move           0
18:09:32: Au Size             9
18:09:32: Erase Size          15
18:09:32: Erase Timeout       1
18:09:32: Erase offset        1
18:09:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 773 ] 
18:09:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:32: Host Frequency set to 100000 KHz
18:09:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:32: ####CSD Registe 2.0 Values####
18:09:32: CSD_STRUCTURE                                 :0x1
18:09:32: Reserv1                                       :0x0
18:09:32: Time Access 1 TAAC                            :0xe
18:09:32: Time Access 2 NSAC*100                        :0x0
18:09:32: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:32: Card Command Classess CCC                     :0x5b5
18:09:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:32: DSR(driver stage register)  DSR_IMP           :0x0
18:09:32: Reserv2                                       :0x0
18:09:32: Device Size C_SIZE                            :0xedc8
18:09:32: Reserv3                                       :0x0
18:09:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:32: Reserv4                                       :0x0
18:09:32: Write Speed Factor R2W_FACTOR                 :0x2
18:09:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:32: FILE_FORMAT_GRP                               :0x0
18:09:32: COPY flag                                     :0x1
18:09:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:32: File_Format                                   :0x0
18:09:32: CRC                                           :0x0
18:09:32: ####CSD Registe Values####  

18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF90>, <py_sfcl.CommandDataDefinition object at 0x05E55870>) , Command count = 774 ] 
18:09:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E558A0>) , Command count = 775 ] 
18:09:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 776 ] 
18:09:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55840>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 777 ] 
18:09:32: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E59240>) , Command count = 778 ] 
18:09:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052B9DE0>, <py_sfcl.CommandDataDefinition object at 0x052CDBA0>) , Command count = 779 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E59510>) , Command count = 780 ] 
18:09:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 781 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 782 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 783 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E558D0>) , Command count = 784 ] 
18:09:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBD80>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 785 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E55BA0>) , Command count = 786 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E559F0>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 787 ] 
18:09:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05D2A0C0>) , Command count = 788 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E55AE0>) , Command count = 789 ] 
18:09:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:33: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:09:33: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:09:33: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:09:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:33: [GetSCRRegisterEntry] Passed
18:09:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:33: Data_Status_After Erases          : 0
18:09:33: CPRM Security Support             : No Security
18:09:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:33: Spec. Version                     : Version 3.0X
18:09:33: Extended Security Support         : Extended_Security_Not_Supported
18:09:33: Command Support                   : COMMAND_SUPPORT
18:09:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:33: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:09:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:33: [GetSCRRegisterEntry] Passed
18:09:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:33: Data_Status_After Erases          : 0
18:09:33: CPRM Security Support             : No Security
18:09:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:33: Spec. Version                     : Version 3.0X
18:09:33: Extended Security Support         : Extended_Security_Not_Supported
18:09:33: Command Support                   : COMMAND_SUPPORT
18:09:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:33: [GetSCRRegisterEntry] Passed
18:09:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:34: Data_Status_After Erases          : 0
18:09:34: CPRM Security Support             : No Security
18:09:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:34: Spec. Version                     : Version 3.0X
18:09:34: Extended Security Support         : Extended_Security_Not_Supported
18:09:34: Command Support                   : COMMAND_SUPPORT
18:09:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:34: [GetSCRRegisterEntry] Passed
18:09:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:34: Data_Status_After Erases          : 0
18:09:34: CPRM Security Support             : No Security
18:09:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:34: Spec. Version                     : Version 3.0X
18:09:34: Extended Security Support         : Extended_Security_Not_Supported
18:09:34: Command Support                   : COMMAND_SUPPORT
18:09:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:34: [GetSCRRegisterEntry] Passed
18:09:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:34: Data_Status_After Erases          : 0
18:09:34: CPRM Security Support             : No Security
18:09:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:34: Spec. Version                     : Version 3.0X
18:09:34: Extended Security Support         : Extended_Security_Not_Supported
18:09:34: Command Support                   : COMMAND_SUPPORT
18:09:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:34: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:09:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:09:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:09:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:09:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:09:34: Perform Power Off and On.
18:09:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 790 ] 
18:09:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:09:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E55C00>) , Command count = 791 ] 
18:09:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A120>, <py_sfcl.CommandDataDefinition object at 0x05E55C30>) , Command count = 792 ] 
18:09:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:09:36: [ SetCardRCA(0x1, 0xD555) , Command count = 793 ] 
18:09:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:36: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:38: Host Frequency set to 25000 KHz
18:09:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:38: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A1B0>, 0x0, True) , Command count = 794 ] 
18:09:38: [GO18_globalSetVolt]### Host voltage value is set.
18:09:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0519DFC0>, 0x0, False) , Command count = 795 ] 
18:09:38: [GO18_globalSetVolt]### Host voltage value is set.
18:09:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 796 ] 
18:09:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 797 ] 
18:09:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 798 ] 
18:09:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA2D0>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 799 ] 
18:09:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 800 ] 
18:09:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:39: [ SetCardRCA(0x1, 0xD555) , Command count = 801 ] 
18:09:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:39: Host Frequency set to 25000 KHz
18:09:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:39: ####CSD Registe 2.0 Values####
18:09:39: CSD_STRUCTURE                                 :0x1
18:09:39: Reserv1                                       :0x0
18:09:39: Time Access 1 TAAC                            :0xe
18:09:39: Time Access 2 NSAC*100                        :0x0
18:09:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:39: Card Command Classess CCC                     :0x5b5
18:09:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:39: DSR(driver stage register)  DSR_IMP           :0x0
18:09:39: Reserv2                                       :0x0
18:09:39: Device Size C_SIZE                            :0xedc8
18:09:39: Reserv3                                       :0x0
18:09:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:39: Reserv4                                       :0x0
18:09:39: Write Speed Factor R2W_FACTOR                 :0x2
18:09:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:39: FILE_FORMAT_GRP                               :0x0
18:09:39: COPY flag                                     :0x1
18:09:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:39: File_Format                                   :0x0
18:09:39: CRC                                           :0x0
18:09:39: ####CSD Registe Values####  

18:09:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:39: [GetSCRRegisterEntry] Passed
18:09:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:39: Data_Status_After Erases          : 0
18:09:39: CPRM Security Support             : No Security
18:09:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:39: Spec. Version                     : Version 3.0X
18:09:39: Extended Security Support         : Extended_Security_Not_Supported
18:09:39: Command Support                   : COMMAND_SUPPORT
18:09:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E55E70>) , Command count = 802 ] 
18:09:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05E55D80>) , Command count = 803 ] 
18:09:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:39: [ SetBusWidth(0x4) , Command count = 804 ] 
18:09:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 805 ] 
18:09:39: Protected Area Size 0x28000
18:09:39: Bus Width           2
18:09:39: Secure Mode         0
18:09:39: Speed  Class        4
18:09:39: Perf Move           0
18:09:39: Au Size             9
18:09:39: Erase Size          15
18:09:39: Erase Timeout       1
18:09:39: Erase offset        1
18:09:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 806 ] 
18:09:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:39: Host Frequency set to 100000 KHz
18:09:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:39: ####CSD Registe 2.0 Values####
18:09:39: CSD_STRUCTURE                                 :0x1
18:09:39: Reserv1                                       :0x0
18:09:39: Time Access 1 TAAC                            :0xe
18:09:39: Time Access 2 NSAC*100                        :0x0
18:09:39: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:39: Card Command Classess CCC                     :0x5b5
18:09:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:39: DSR(driver stage register)  DSR_IMP           :0x0
18:09:39: Reserv2                                       :0x0
18:09:39: Device Size C_SIZE                            :0xedc8
18:09:39: Reserv3                                       :0x0
18:09:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:39: Reserv4                                       :0x0
18:09:39: Write Speed Factor R2W_FACTOR                 :0x2
18:09:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:39: FILE_FORMAT_GRP                               :0x0
18:09:39: COPY flag                                     :0x1
18:09:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:39: File_Format                                   :0x0
18:09:39: CRC                                           :0x0
18:09:39: ####CSD Registe Values####  

18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x05E55F90>) , Command count = 807 ] 
18:09:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 808 ] 
18:09:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:09:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 809 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:09:40: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 810 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 811 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 812 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 813 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 814 ] 
18:09:40: Protected Area Size 0x28000
18:09:40: Bus Width           2
18:09:40: Secure Mode         0
18:09:40: Speed  Class        4
18:09:40: Perf Move           0
18:09:40: Au Size             9
18:09:40: Erase Size          15
18:09:40: Erase Timeout       1
18:09:40: Erase offset        1
18:09:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:09:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:09:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 21 

18:09:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:09:42: [ HostReset(False) , Command count = 815 ] 
18:09:42: [ SetSpecialModes(0x5, True) , Command count = 816 ] 
18:09:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E55DB0>) , Command count = 817 ] 
18:09:42: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:09:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7B0>, <py_sfcl.CommandDataDefinition object at 0x05E2D780>) , Command count = 818 ] 
18:09:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E2DED0>) , Command count = 819 ] 
18:09:42: [ GetCardStatus() , Command count = 820 ] 
18:09:42: ACmd51[ SEND_SCR ] Failed with an exception
18:09:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50330>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 821 ] 
18:09:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E2DC90>) , Command count = 822 ] 
18:09:42: [ GetCardStatus() , Command count = 823 ] 
18:09:42: ACMD13[ SD_STATUS ] Failed with an exception
18:09:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:09:44: [ HostReset(False) , Command count = 824 ] 
18:09:44: [ SetSpecialModes(0x5, True) , Command count = 825 ] 
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D5D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 826 ] 
18:09:44: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E50900>) , Command count = 827 ] 
18:09:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E2DD80>) , Command count = 828 ] 
18:09:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 829 ] 
18:09:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B10>, <py_sfcl.CommandDataDefinition object at 0x05E59570>) , Command count = 830 ] 
18:09:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:09:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37AB0>, <py_sfcl.CommandDataDefinition object at 0x05E372D0>) , Command count = 831 ] 
18:09:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37990>, <py_sfcl.CommandDataDefinition object at 0x05E37DE0>) , Command count = 832 ] 
18:09:45: [ GetCardStatus() , Command count = 833 ] 
18:09:45: ACmd51[ SEND_SCR ] Failed with an exception
18:09:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05DAAE40>) , Command count = 834 ] 
18:09:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:09:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D20>, <py_sfcl.CommandDataDefinition object at 0x05E37300>) , Command count = 835 ] 
18:09:45: [ GetCardStatus() , Command count = 836 ] 
18:09:45: ACMD13[ SD_STATUS ] Failed with an exception
18:09:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:09:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 837 ] 
18:09:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 838 ] 
18:09:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 839 ] 
18:09:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:47: [GetSCRRegisterEntry] Failed
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:09:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 840 ] 
18:09:47: [ GetCardStatus() , Command count = 841 ] 
18:09:47: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:09:47: [DVTCommonLib]### Exception_Details :Time out error on card response
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E37300>) , Command count = 842 ] 
18:09:47: [ GetCardStatus() , Command count = 843 ] 
18:09:47: CMD55[ APP_CMD ] Failed with an exception
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E37F90>) , Command count = 844 ] 
18:09:47: [ GetCardStatus() , Command count = 845 ] 
18:09:47: ACmd51[ SEND_SCR ] Failed with an exception
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E2DF00>) , Command count = 846 ] 
18:09:47: [ GetCardStatus() , Command count = 847 ] 
18:09:47: CMD55[ APP_CMD ] Failed with an exception
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 848 ] 
18:09:47: [ GetCardStatus() , Command count = 849 ] 
18:09:47: ACMD13[ SD_STATUS ] Failed with an exception
18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:09:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:09:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 850 ] 
18:09:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 851 ] 
18:09:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37600>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 852 ] 
18:09:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37870>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 853 ] 
18:09:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:50: [ SetCardRCA(0x1, 0xD555) , Command count = 854 ] 
18:09:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 855 ] 
18:09:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:50: [GetSCRRegisterEntry] Passed
18:09:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:50: Data_Status_After Erases          : 0
18:09:50: CPRM Security Support             : No Security
18:09:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:50: Spec. Version                     : Version 3.0X
18:09:50: Extended Security Support         : Extended_Security_Not_Supported
18:09:50: Command Support                   : COMMAND_SUPPORT
18:09:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 856 ] 
18:09:50: Protected Area Size 0x28000
18:09:50: Bus Width           0
18:09:50: Secure Mode         0
18:09:50: Speed  Class        4
18:09:50: Perf Move           0
18:09:50: Au Size             9
18:09:50: Erase Size          15
18:09:50: Erase Timeout       1
18:09:50: Erase offset        1
18:09:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:09:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 857 ] 
18:09:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 858 ] 
18:09:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3C0>, <py_sfcl.CommandDataDefinition object at 0x05E37750>) , Command count = 859 ] 
18:09:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E270>, <py_sfcl.CommandDataDefinition object at 0x05E3E240>) , Command count = 860 ] 
18:09:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:52: [ SetCardRCA(0x1, 0xD555) , Command count = 861 ] 
18:09:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E37F30>) , Command count = 862 ] 
18:09:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E600>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 863 ] 
18:09:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:09:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:09:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:09:52: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:09:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:09:52: Perform Power Off and On.
18:09:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 864 ] 
18:09:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:09:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E450>) , Command count = 865 ] 
18:09:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E090>, <py_sfcl.CommandDataDefinition object at 0x05E3E4B0>) , Command count = 866 ] 
18:09:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:09:54: [ SetCardRCA(0x1, 0xD555) , Command count = 867 ] 
18:09:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:55: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:57: Host Frequency set to 25000 KHz
18:09:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:57: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E540>, 0x0, True) , Command count = 868 ] 
18:09:57: [GO18_globalSetVolt]### Host voltage value is set.
18:09:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37BA0>, 0x0, False) , Command count = 869 ] 
18:09:57: [GO18_globalSetVolt]### Host voltage value is set.
18:09:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 870 ] 
18:09:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:09:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 871 ] 
18:09:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:09:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:09:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:09:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:09:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:09:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 872 ] 
18:09:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:09:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E3E960>) , Command count = 873 ] 
18:09:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E3E2D0>) , Command count = 874 ] 
18:09:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:09:57: [ SetCardRCA(0x1, 0xD555) , Command count = 875 ] 
18:09:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:09:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:57: Host Frequency set to 25000 KHz
18:09:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:57: ####CSD Registe 2.0 Values####
18:09:57: CSD_STRUCTURE                                 :0x1
18:09:57: Reserv1                                       :0x0
18:09:57: Time Access 1 TAAC                            :0xe
18:09:57: Time Access 2 NSAC*100                        :0x0
18:09:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:09:57: Card Command Classess CCC                     :0x5b5
18:09:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:57: DSR(driver stage register)  DSR_IMP           :0x0
18:09:57: Reserv2                                       :0x0
18:09:57: Device Size C_SIZE                            :0xedc8
18:09:57: Reserv3                                       :0x0
18:09:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:57: Reserv4                                       :0x0
18:09:57: Write Speed Factor R2W_FACTOR                 :0x2
18:09:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:57: FILE_FORMAT_GRP                               :0x0
18:09:57: COPY flag                                     :0x1
18:09:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:57: File_Format                                   :0x0
18:09:57: CRC                                           :0x0
18:09:57: ####CSD Registe Values####  

18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:57: [GetSCRRegisterEntry] Passed
18:09:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:57: Data_Status_After Erases          : 0
18:09:57: CPRM Security Support             : No Security
18:09:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:57: Spec. Version                     : Version 3.0X
18:09:57: Extended Security Support         : Extended_Security_Not_Supported
18:09:57: Command Support                   : COMMAND_SUPPORT
18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9C0>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 876 ] 
18:09:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E870>, <py_sfcl.CommandDataDefinition object at 0x05E597E0>) , Command count = 877 ] 
18:09:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:09:57: [ SetBusWidth(0x4) , Command count = 878 ] 
18:09:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:09:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 879 ] 
18:09:57: Protected Area Size 0x28000
18:09:57: Bus Width           2
18:09:57: Secure Mode         0
18:09:57: Speed  Class        4
18:09:57: Perf Move           0
18:09:57: Au Size             9
18:09:57: Erase Size          15
18:09:57: Erase Timeout       1
18:09:57: Erase offset        1
18:09:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:09:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 880 ] 
18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:09:57: Host Frequency set to 100000 KHz
18:09:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:09:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:09:57: ####CSD Registe 2.0 Values####
18:09:57: CSD_STRUCTURE                                 :0x1
18:09:57: Reserv1                                       :0x0
18:09:57: Time Access 1 TAAC                            :0xe
18:09:57: Time Access 2 NSAC*100                        :0x0
18:09:57: Data Transfer Rate TRAN_SPEED                 :0xb
18:09:57: Card Command Classess CCC                     :0x5b5
18:09:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:09:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:09:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:09:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:09:57: DSR(driver stage register)  DSR_IMP           :0x0
18:09:57: Reserv2                                       :0x0
18:09:57: Device Size C_SIZE                            :0xedc8
18:09:57: Reserv3                                       :0x0
18:09:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:09:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:09:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:09:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:09:57: Reserv4                                       :0x0
18:09:57: Write Speed Factor R2W_FACTOR                 :0x2
18:09:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:09:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:09:57: FILE_FORMAT_GRP                               :0x0
18:09:57: COPY flag                                     :0x1
18:09:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:09:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:09:57: File_Format                                   :0x0
18:09:57: CRC                                           :0x0
18:09:57: ####CSD Registe Values####  

18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3EBD0>) , Command count = 881 ] 
18:09:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ECF0>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 882 ] 
18:09:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:09:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:09:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:09:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:57: [GetSCRRegisterEntry] Passed
18:09:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:57: Data_Status_After Erases          : 0
18:09:57: CPRM Security Support             : No Security
18:09:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:57: Spec. Version                     : Version 3.0X
18:09:57: Extended Security Support         : Extended_Security_Not_Supported
18:09:57: Command Support                   : COMMAND_SUPPORT
18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:09:57: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:09:57: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:09:57: [GetSCRRegisterEntry] Passed
18:09:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:09:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:09:57: Data_Status_After Erases          : 0
18:09:57: CPRM Security Support             : No Security
18:09:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:09:57: Spec. Version                     : Version 3.0X
18:09:57: Extended Security Support         : Extended_Security_Not_Supported
18:09:57: Command Support                   : COMMAND_SUPPORT
18:09:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:09:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:09:57: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 883 ] 
18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:09:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:09:57: [GO4_globalInitCard]### Switch to Specify Card Type
18:09:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:09:59: Host Frequency set to 25000 KHz
18:09:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:09:59: [GO18_globalSetVolt]### Set Host Voltage value.
18:09:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:09:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37E40>, 0x0, True) , Command count = 884 ] 
18:09:59: [GO18_globalSetVolt]### Host voltage value is set.
18:09:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:09:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA420>, 0x0, False) , Command count = 885 ] 
18:09:59: [GO18_globalSetVolt]### Host voltage value is set.
18:09:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 886 ] 
18:09:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 887 ] 
18:10:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 888 ] 
18:10:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E810>, <py_sfcl.CommandDataDefinition object at 0x05E3EB70>) , Command count = 889 ] 
18:10:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3E630>) , Command count = 890 ] 
18:10:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:00: [ SetCardRCA(0x1, 0xD555) , Command count = 891 ] 
18:10:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:00: Host Frequency set to 25000 KHz
18:10:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:00: ####CSD Registe 2.0 Values####
18:10:00: CSD_STRUCTURE                                 :0x1
18:10:00: Reserv1                                       :0x0
18:10:00: Time Access 1 TAAC                            :0xe
18:10:00: Time Access 2 NSAC*100                        :0x0
18:10:00: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:00: Card Command Classess CCC                     :0x5b5
18:10:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:00: DSR(driver stage register)  DSR_IMP           :0x0
18:10:00: Reserv2                                       :0x0
18:10:00: Device Size C_SIZE                            :0xedc8
18:10:00: Reserv3                                       :0x0
18:10:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:00: Reserv4                                       :0x0
18:10:00: Write Speed Factor R2W_FACTOR                 :0x2
18:10:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:00: FILE_FORMAT_GRP                               :0x0
18:10:00: COPY flag                                     :0x1
18:10:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:00: File_Format                                   :0x0
18:10:00: CRC                                           :0x0
18:10:00: ####CSD Registe Values####  

18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA80>, <py_sfcl.CommandDataDefinition object at 0x05E3EF00>) , Command count = 892 ] 
18:10:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D720>, <py_sfcl.CommandDataDefinition object at 0x05E590C0>) , Command count = 893 ] 
18:10:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:00: [ SetBusWidth(0x4) , Command count = 894 ] 
18:10:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 895 ] 
18:10:00: Protected Area Size 0x28000
18:10:00: Bus Width           2
18:10:00: Secure Mode         0
18:10:00: Speed  Class        4
18:10:00: Perf Move           0
18:10:00: Au Size             9
18:10:00: Erase Size          15
18:10:00: Erase Timeout       1
18:10:00: Erase offset        1
18:10:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 896 ] 
18:10:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:00: Host Frequency set to 100000 KHz
18:10:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:00: ####CSD Registe 2.0 Values####
18:10:00: CSD_STRUCTURE                                 :0x1
18:10:00: Reserv1                                       :0x0
18:10:00: Time Access 1 TAAC                            :0xe
18:10:00: Time Access 2 NSAC*100                        :0x0
18:10:00: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:00: Card Command Classess CCC                     :0x5b5
18:10:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:00: DSR(driver stage register)  DSR_IMP           :0x0
18:10:00: Reserv2                                       :0x0
18:10:00: Device Size C_SIZE                            :0xedc8
18:10:00: Reserv3                                       :0x0
18:10:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:00: Reserv4                                       :0x0
18:10:00: Write Speed Factor R2W_FACTOR                 :0x2
18:10:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:00: FILE_FORMAT_GRP                               :0x0
18:10:00: COPY flag                                     :0x1
18:10:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:00: File_Format                                   :0x0
18:10:00: CRC                                           :0x0
18:10:00: ####CSD Registe Values####  

18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EA20>) , Command count = 897 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 898 ] 
18:10:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44150>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 899 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44210>, <py_sfcl.CommandDataDefinition object at 0x05E590C0>) , Command count = 900 ] 
18:10:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E59210>) , Command count = 901 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37630>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 902 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59330>, <py_sfcl.CommandDataDefinition object at 0x05E59720>) , Command count = 903 ] 
18:10:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E444E0>) , Command count = 904 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440F0>, <py_sfcl.CommandDataDefinition object at 0x05E445D0>) , Command count = 905 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E447B0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 906 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44570>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 907 ] 
18:10:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 908 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441B0>, <py_sfcl.CommandDataDefinition object at 0x05E449C0>) , Command count = 909 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E448A0>, <py_sfcl.CommandDataDefinition object at 0x05E448D0>) , Command count = 910 ] 
18:10:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 911 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E44990>) , Command count = 912 ] 
18:10:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:00: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:10:00: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:10:00: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:00: [GetSCRRegisterEntry] Passed
18:10:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:00: Data_Status_After Erases          : 0
18:10:00: CPRM Security Support             : No Security
18:10:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:00: Spec. Version                     : Version 3.0X
18:10:00: Extended Security Support         : Extended_Security_Not_Supported
18:10:00: Command Support                   : COMMAND_SUPPORT
18:10:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:00: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:10:00: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:10:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:10:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:10:00: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:10:00: Perform Power Off and On.
18:10:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 913 ] 
18:10:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:10:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44AB0>) , Command count = 914 ] 
18:10:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E44B70>) , Command count = 915 ] 
18:10:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:10:02: [ SetCardRCA(0x1, 0xD555) , Command count = 916 ] 
18:10:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:02: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:05: Host Frequency set to 25000 KHz
18:10:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:05: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44B40>, 0x0, True) , Command count = 917 ] 
18:10:05: [GO18_globalSetVolt]### Host voltage value is set.
18:10:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44D20>, 0x0, False) , Command count = 918 ] 
18:10:05: [GO18_globalSetVolt]### Host voltage value is set.
18:10:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 919 ] 
18:10:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 920 ] 
18:10:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 921 ] 
18:10:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55930>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 922 ] 
18:10:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44360>, <py_sfcl.CommandDataDefinition object at 0x05E44600>) , Command count = 923 ] 
18:10:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:05: [ SetCardRCA(0x1, 0xD555) , Command count = 924 ] 
18:10:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:05: Host Frequency set to 25000 KHz
18:10:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:05: ####CSD Registe 2.0 Values####
18:10:05: CSD_STRUCTURE                                 :0x1
18:10:05: Reserv1                                       :0x0
18:10:05: Time Access 1 TAAC                            :0xe
18:10:05: Time Access 2 NSAC*100                        :0x0
18:10:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:05: Card Command Classess CCC                     :0x5b5
18:10:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:05: DSR(driver stage register)  DSR_IMP           :0x0
18:10:05: Reserv2                                       :0x0
18:10:05: Device Size C_SIZE                            :0xedc8
18:10:05: Reserv3                                       :0x0
18:10:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:05: Reserv4                                       :0x0
18:10:05: Write Speed Factor R2W_FACTOR                 :0x2
18:10:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:05: FILE_FORMAT_GRP                               :0x0
18:10:05: COPY flag                                     :0x1
18:10:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:05: File_Format                                   :0x0
18:10:05: CRC                                           :0x0
18:10:05: ####CSD Registe Values####  

18:10:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:05: [GetSCRRegisterEntry] Passed
18:10:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:05: Data_Status_After Erases          : 0
18:10:05: CPRM Security Support             : No Security
18:10:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:05: Spec. Version                     : Version 3.0X
18:10:05: Extended Security Support         : Extended_Security_Not_Supported
18:10:05: Command Support                   : COMMAND_SUPPORT
18:10:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F150>, <py_sfcl.CommandDataDefinition object at 0x05E44720>) , Command count = 925 ] 
18:10:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E44AE0>) , Command count = 926 ] 
18:10:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:05: [ SetBusWidth(0x4) , Command count = 927 ] 
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 928 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 929 ] 
18:10:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:05: Host Frequency set to 100000 KHz
18:10:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:05: ####CSD Registe 2.0 Values####
18:10:05: CSD_STRUCTURE                                 :0x1
18:10:05: Reserv1                                       :0x0
18:10:05: Time Access 1 TAAC                            :0xe
18:10:05: Time Access 2 NSAC*100                        :0x0
18:10:05: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:05: Card Command Classess CCC                     :0x5b5
18:10:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:05: DSR(driver stage register)  DSR_IMP           :0x0
18:10:05: Reserv2                                       :0x0
18:10:05: Device Size C_SIZE                            :0xedc8
18:10:05: Reserv3                                       :0x0
18:10:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:05: Reserv4                                       :0x0
18:10:05: Write Speed Factor R2W_FACTOR                 :0x2
18:10:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:05: FILE_FORMAT_GRP                               :0x0
18:10:05: COPY flag                                     :0x1
18:10:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:05: File_Format                                   :0x0
18:10:05: CRC                                           :0x0
18:10:05: ####CSD Registe Values####  

18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44270>, <py_sfcl.CommandDataDefinition object at 0x05E44DE0>) , Command count = 930 ] 
18:10:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 931 ] 
18:10:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:10:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 932 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:10:05: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 933 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 934 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 935 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 936 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 937 ] 
18:10:05: Protected Area Size 0x28000
18:10:05: Bus Width           2
18:10:05: Secure Mode         0
18:10:05: Speed  Class        4
18:10:05: Perf Move           0
18:10:05: Au Size             9
18:10:05: Erase Size          15
18:10:05: Erase Timeout       1
18:10:05: Erase offset        1
18:10:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:10:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:10:05: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 20 

18:10:05: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:10:07: [ HostReset(False) , Command count = 938 ] 
18:10:07: [ SetSpecialModes(0x5, True) , Command count = 939 ] 
18:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 940 ] 
18:10:07: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F360>, <py_sfcl.CommandDataDefinition object at 0x05E4F7B0>) , Command count = 941 ] 
18:10:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F990>) , Command count = 942 ] 
18:10:07: [ GetCardStatus() , Command count = 943 ] 
18:10:07: ACmd51[ SEND_SCR ] Failed with an exception
18:10:07: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E37F90>) , Command count = 944 ] 
18:10:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 945 ] 
18:10:08: [ GetCardStatus() , Command count = 946 ] 
18:10:08: ACMD13[ SD_STATUS ] Failed with an exception
18:10:08: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:08: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:10:10: [ HostReset(False) , Command count = 947 ] 
18:10:10: [ SetSpecialModes(0x5, True) , Command count = 948 ] 
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E4F600>) , Command count = 949 ] 
18:10:10: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B70>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 950 ] 
18:10:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F900>) , Command count = 951 ] 
18:10:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E591E0>) , Command count = 952 ] 
18:10:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB10>, <py_sfcl.CommandDataDefinition object at 0x05E59540>) , Command count = 953 ] 
18:10:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F9C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FB70>) , Command count = 954 ] 
18:10:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FDE0>, <py_sfcl.CommandDataDefinition object at 0x05E4FE70>) , Command count = 955 ] 
18:10:10: [ GetCardStatus() , Command count = 956 ] 
18:10:10: ACmd51[ SEND_SCR ] Failed with an exception
18:10:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 957 ] 
18:10:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50090>, <py_sfcl.CommandDataDefinition object at 0x05E4FCF0>) , Command count = 958 ] 
18:10:10: [ GetCardStatus() , Command count = 959 ] 
18:10:10: ACMD13[ SD_STATUS ] Failed with an exception
18:10:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:10:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 960 ] 
18:10:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 961 ] 
18:10:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FBD0>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 962 ] 
18:10:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:12: [GetSCRRegisterEntry] Failed
18:10:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:10:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:10:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E501B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 963 ] 
18:10:12: [ GetCardStatus() , Command count = 964 ] 
18:10:12: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:10:12: [DVTCommonLib]### Exception_Details :Time out error on card response
18:10:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:10:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E50090>) , Command count = 965 ] 
18:10:12: [ GetCardStatus() , Command count = 966 ] 
18:10:12: CMD55[ APP_CMD ] Failed with an exception
18:10:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50030>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 967 ] 
18:10:13: [ GetCardStatus() , Command count = 968 ] 
18:10:13: ACmd51[ SEND_SCR ] Failed with an exception
18:10:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E4F060>) , Command count = 969 ] 
18:10:13: [ GetCardStatus() , Command count = 970 ] 
18:10:13: CMD55[ APP_CMD ] Failed with an exception
18:10:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44F30>, <py_sfcl.CommandDataDefinition object at 0x05E4FF90>) , Command count = 971 ] 
18:10:13: [ GetCardStatus() , Command count = 972 ] 
18:10:13: ACMD13[ SD_STATUS ] Failed with an exception
18:10:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:10:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 973 ] 
18:10:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 974 ] 
18:10:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E4FCC0>) , Command count = 975 ] 
18:10:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 976 ] 
18:10:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:15: [ SetCardRCA(0x1, 0xD555) , Command count = 977 ] 
18:10:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E50870>) , Command count = 978 ] 
18:10:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:15: [GetSCRRegisterEntry] Passed
18:10:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:15: Data_Status_After Erases          : 0
18:10:15: CPRM Security Support             : No Security
18:10:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:15: Spec. Version                     : Version 3.0X
18:10:15: Extended Security Support         : Extended_Security_Not_Supported
18:10:15: Command Support                   : COMMAND_SUPPORT
18:10:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E502A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 979 ] 
18:10:15: Protected Area Size 0x28000
18:10:15: Bus Width           0
18:10:15: Secure Mode         0
18:10:15: Speed  Class        4
18:10:15: Perf Move           0
18:10:15: Au Size             9
18:10:15: Erase Size          15
18:10:15: Erase Timeout       1
18:10:15: Erase offset        1
18:10:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:15: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:10:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 980 ] 
18:10:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 981 ] 
18:10:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E50A80>) , Command count = 982 ] 
18:10:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50AE0>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 983 ] 
18:10:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:18: [ SetCardRCA(0x1, 0xD555) , Command count = 984 ] 
18:10:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505D0>, <py_sfcl.CommandDataDefinition object at 0x05E50600>) , Command count = 985 ] 
18:10:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C90>, <py_sfcl.CommandDataDefinition object at 0x05E50A20>) , Command count = 986 ] 
18:10:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:10:18: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:10:18: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:10:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:10:18: Perform Power Off and On.
18:10:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 987 ] 
18:10:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:10:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D80>, <py_sfcl.CommandDataDefinition object at 0x05E50C30>) , Command count = 988 ] 
18:10:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50240>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 989 ] 
18:10:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:10:20: [ SetCardRCA(0x1, 0xD555) , Command count = 990 ] 
18:10:20: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:20: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:22: Host Frequency set to 25000 KHz
18:10:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:22: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FC00>, 0x0, True) , Command count = 991 ] 
18:10:22: [GO18_globalSetVolt]### Host voltage value is set.
18:10:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FF60>, 0x0, False) , Command count = 992 ] 
18:10:22: [GO18_globalSetVolt]### Host voltage value is set.
18:10:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 993 ] 
18:10:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 994 ] 
18:10:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 995 ] 
18:10:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 996 ] 
18:10:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509C0>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 997 ] 
18:10:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:22: [ SetCardRCA(0x1, 0xD555) , Command count = 998 ] 
18:10:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:22: Host Frequency set to 25000 KHz
18:10:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:22: ####CSD Registe 2.0 Values####
18:10:22: CSD_STRUCTURE                                 :0x1
18:10:22: Reserv1                                       :0x0
18:10:22: Time Access 1 TAAC                            :0xe
18:10:22: Time Access 2 NSAC*100                        :0x0
18:10:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:22: Card Command Classess CCC                     :0x5b5
18:10:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:22: DSR(driver stage register)  DSR_IMP           :0x0
18:10:22: Reserv2                                       :0x0
18:10:22: Device Size C_SIZE                            :0xedc8
18:10:22: Reserv3                                       :0x0
18:10:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:22: Reserv4                                       :0x0
18:10:22: Write Speed Factor R2W_FACTOR                 :0x2
18:10:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:22: FILE_FORMAT_GRP                               :0x0
18:10:22: COPY flag                                     :0x1
18:10:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:22: File_Format                                   :0x0
18:10:22: CRC                                           :0x0
18:10:22: ####CSD Registe Values####  

18:10:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:23: [GetSCRRegisterEntry] Passed
18:10:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:23: Data_Status_After Erases          : 0
18:10:23: CPRM Security Support             : No Security
18:10:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:23: Spec. Version                     : Version 3.0X
18:10:23: Extended Security Support         : Extended_Security_Not_Supported
18:10:23: Command Support                   : COMMAND_SUPPORT
18:10:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550F0>, <py_sfcl.CommandDataDefinition object at 0x05E50F90>) , Command count = 999 ] 
18:10:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E50510>) , Command count = 1000 ] 
18:10:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:23: [ SetBusWidth(0x4) , Command count = 1001 ] 
18:10:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1002 ] 
18:10:23: Protected Area Size 0x28000
18:10:23: Bus Width           2
18:10:23: Secure Mode         0
18:10:23: Speed  Class        4
18:10:23: Perf Move           0
18:10:23: Au Size             9
18:10:23: Erase Size          15
18:10:23: Erase Timeout       1
18:10:23: Erase offset        1
18:10:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1003 ] 
18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:23: Host Frequency set to 100000 KHz
18:10:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:23: ####CSD Registe 2.0 Values####
18:10:23: CSD_STRUCTURE                                 :0x1
18:10:23: Reserv1                                       :0x0
18:10:23: Time Access 1 TAAC                            :0xe
18:10:23: Time Access 2 NSAC*100                        :0x0
18:10:23: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:23: Card Command Classess CCC                     :0x5b5
18:10:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:23: DSR(driver stage register)  DSR_IMP           :0x0
18:10:23: Reserv2                                       :0x0
18:10:23: Device Size C_SIZE                            :0xedc8
18:10:23: Reserv3                                       :0x0
18:10:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:23: Reserv4                                       :0x0
18:10:23: Write Speed Factor R2W_FACTOR                 :0x2
18:10:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:23: FILE_FORMAT_GRP                               :0x0
18:10:23: COPY flag                                     :0x1
18:10:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:23: File_Format                                   :0x0
18:10:23: CRC                                           :0x0
18:10:23: ####CSD Registe Values####  

18:10:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55210>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 1004 ] 
18:10:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 1005 ] 
18:10:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:10:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:10:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:23: [GetSCRRegisterEntry] Passed
18:10:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:23: Data_Status_After Erases          : 0
18:10:23: CPRM Security Support             : No Security
18:10:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:23: Spec. Version                     : Version 3.0X
18:10:23: Extended Security Support         : Extended_Security_Not_Supported
18:10:23: Command Support                   : COMMAND_SUPPORT
18:10:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:10:23: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:10:23: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:10:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:23: [GetSCRRegisterEntry] Passed
18:10:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:23: Data_Status_After Erases          : 0
18:10:23: CPRM Security Support             : No Security
18:10:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:23: Spec. Version                     : Version 3.0X
18:10:23: Extended Security Support         : Extended_Security_Not_Supported
18:10:23: Command Support                   : COMMAND_SUPPORT
18:10:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:23: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1006 ] 
18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:10:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:23: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:25: Host Frequency set to 25000 KHz
18:10:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:25: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F180>, 0x0, True) , Command count = 1007 ] 
18:10:25: [GO18_globalSetVolt]### Host voltage value is set.
18:10:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44450>, 0x0, False) , Command count = 1008 ] 
18:10:25: [GO18_globalSetVolt]### Host voltage value is set.
18:10:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1009 ] 
18:10:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1010 ] 
18:10:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1011 ] 
18:10:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55360>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 1012 ] 
18:10:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 1013 ] 
18:10:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1014 ] 
18:10:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:26: Host Frequency set to 25000 KHz
18:10:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:26: ####CSD Registe 2.0 Values####
18:10:26: CSD_STRUCTURE                                 :0x1
18:10:26: Reserv1                                       :0x0
18:10:26: Time Access 1 TAAC                            :0xe
18:10:26: Time Access 2 NSAC*100                        :0x0
18:10:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:26: Card Command Classess CCC                     :0x5b5
18:10:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:26: DSR(driver stage register)  DSR_IMP           :0x0
18:10:26: Reserv2                                       :0x0
18:10:26: Device Size C_SIZE                            :0xedc8
18:10:26: Reserv3                                       :0x0
18:10:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:26: Reserv4                                       :0x0
18:10:26: Write Speed Factor R2W_FACTOR                 :0x2
18:10:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:26: FILE_FORMAT_GRP                               :0x0
18:10:26: COPY flag                                     :0x1
18:10:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:26: File_Format                                   :0x0
18:10:26: CRC                                           :0x0
18:10:26: ####CSD Registe Values####  

18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E50570>) , Command count = 1015 ] 
18:10:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F810>, <py_sfcl.CommandDataDefinition object at 0x05E598D0>) , Command count = 1016 ] 
18:10:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:26: [ SetBusWidth(0x4) , Command count = 1017 ] 
18:10:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E551B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1018 ] 
18:10:26: Protected Area Size 0x28000
18:10:26: Bus Width           2
18:10:26: Secure Mode         0
18:10:26: Speed  Class        4
18:10:26: Perf Move           0
18:10:26: Au Size             9
18:10:26: Erase Size          15
18:10:26: Erase Timeout       1
18:10:26: Erase offset        1
18:10:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1019 ] 
18:10:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:26: Host Frequency set to 100000 KHz
18:10:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:26: ####CSD Registe 2.0 Values####
18:10:26: CSD_STRUCTURE                                 :0x1
18:10:26: Reserv1                                       :0x0
18:10:26: Time Access 1 TAAC                            :0xe
18:10:26: Time Access 2 NSAC*100                        :0x0
18:10:26: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:26: Card Command Classess CCC                     :0x5b5
18:10:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:26: DSR(driver stage register)  DSR_IMP           :0x0
18:10:26: Reserv2                                       :0x0
18:10:26: Device Size C_SIZE                            :0xedc8
18:10:26: Reserv3                                       :0x0
18:10:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:26: Reserv4                                       :0x0
18:10:26: Write Speed Factor R2W_FACTOR                 :0x2
18:10:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:26: FILE_FORMAT_GRP                               :0x0
18:10:26: COPY flag                                     :0x1
18:10:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:26: File_Format                                   :0x0
18:10:26: CRC                                           :0x0
18:10:26: ####CSD Registe Values####  

18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55090>, <py_sfcl.CommandDataDefinition object at 0x052BB570>) , Command count = 1020 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55390>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 1021 ] 
18:10:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 1022 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E557B0>, <py_sfcl.CommandDataDefinition object at 0x05E598D0>) , Command count = 1023 ] 
18:10:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E506C0>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 1024 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F840>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 1025 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59840>, <py_sfcl.CommandDataDefinition object at 0x05E59390>) , Command count = 1026 ] 
18:10:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E558A0>) , Command count = 1027 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 1028 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55840>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 1029 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55420>, <py_sfcl.CommandDataDefinition object at 0x05E55330>) , Command count = 1030 ] 
18:10:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052B9DE0>, <py_sfcl.CommandDataDefinition object at 0x052CDBA0>) , Command count = 1031 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 1032 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55A80>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 1033 ] 
18:10:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 1034 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55990>) , Command count = 1035 ] 
18:10:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:26: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:10:26: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:10:26: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:26: [GetSCRRegisterEntry] Passed
18:10:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:26: Data_Status_After Erases          : 0
18:10:26: CPRM Security Support             : No Security
18:10:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:26: Spec. Version                     : Version 3.0X
18:10:26: Extended Security Support         : Extended_Security_Not_Supported
18:10:26: Command Support                   : COMMAND_SUPPORT
18:10:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:26: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:10:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:10:26: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:10:26: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:10:26: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:10:26: Perform Power Off and On.
18:10:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1036 ] 
18:10:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:10:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558D0>, <py_sfcl.CommandDataDefinition object at 0x05E559C0>) , Command count = 1037 ] 
18:10:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E55BA0>) , Command count = 1038 ] 
18:10:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:10:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1039 ] 
18:10:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:29: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:31: Host Frequency set to 25000 KHz
18:10:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:31: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDFC0>, 0x0, True) , Command count = 1040 ] 
18:10:31: [GO18_globalSetVolt]### Host voltage value is set.
18:10:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55B10>, 0x0, False) , Command count = 1041 ] 
18:10:31: [GO18_globalSetVolt]### Host voltage value is set.
18:10:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1042 ] 
18:10:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1043 ] 
18:10:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1044 ] 
18:10:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446F0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 1045 ] 
18:10:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 1046 ] 
18:10:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1047 ] 
18:10:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:31: Host Frequency set to 25000 KHz
18:10:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:31: ####CSD Registe 2.0 Values####
18:10:31: CSD_STRUCTURE                                 :0x1
18:10:31: Reserv1                                       :0x0
18:10:31: Time Access 1 TAAC                            :0xe
18:10:31: Time Access 2 NSAC*100                        :0x0
18:10:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:31: Card Command Classess CCC                     :0x5b5
18:10:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:31: DSR(driver stage register)  DSR_IMP           :0x0
18:10:31: Reserv2                                       :0x0
18:10:31: Device Size C_SIZE                            :0xedc8
18:10:31: Reserv3                                       :0x0
18:10:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:31: Reserv4                                       :0x0
18:10:31: Write Speed Factor R2W_FACTOR                 :0x2
18:10:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:31: FILE_FORMAT_GRP                               :0x0
18:10:31: COPY flag                                     :0x1
18:10:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:31: File_Format                                   :0x0
18:10:31: CRC                                           :0x0
18:10:31: ####CSD Registe Values####  

18:10:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:31: [GetSCRRegisterEntry] Passed
18:10:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:31: Data_Status_After Erases          : 0
18:10:31: CPRM Security Support             : No Security
18:10:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:31: Spec. Version                     : Version 3.0X
18:10:31: Extended Security Support         : Extended_Security_Not_Supported
18:10:31: Command Support                   : COMMAND_SUPPORT
18:10:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 1048 ] 
18:10:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA6F0>, <py_sfcl.CommandDataDefinition object at 0x05E59A50>) , Command count = 1049 ] 
18:10:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:31: [ SetBusWidth(0x4) , Command count = 1050 ] 
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1051 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1052 ] 
18:10:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:31: Host Frequency set to 100000 KHz
18:10:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:31: ####CSD Registe 2.0 Values####
18:10:31: CSD_STRUCTURE                                 :0x1
18:10:31: Reserv1                                       :0x0
18:10:31: Time Access 1 TAAC                            :0xe
18:10:31: Time Access 2 NSAC*100                        :0x0
18:10:31: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:31: Card Command Classess CCC                     :0x5b5
18:10:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:31: DSR(driver stage register)  DSR_IMP           :0x0
18:10:31: Reserv2                                       :0x0
18:10:31: Device Size C_SIZE                            :0xedc8
18:10:31: Reserv3                                       :0x0
18:10:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:31: Reserv4                                       :0x0
18:10:31: Write Speed Factor R2W_FACTOR                 :0x2
18:10:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:31: FILE_FORMAT_GRP                               :0x0
18:10:31: COPY flag                                     :0x1
18:10:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:31: File_Format                                   :0x0
18:10:31: CRC                                           :0x0
18:10:31: ####CSD Registe Values####  

18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 1053 ] 
18:10:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E55E70>) , Command count = 1054 ] 
18:10:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:10:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1055 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:10:31: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2AC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1056 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CD0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1057 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DB8ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1058 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DB8E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1059 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BBF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1060 ] 
18:10:31: Protected Area Size 0x28000
18:10:31: Bus Width           2
18:10:31: Secure Mode         0
18:10:31: Speed  Class        4
18:10:31: Perf Move           0
18:10:31: Au Size             9
18:10:31: Erase Size          15
18:10:31: Erase Timeout       1
18:10:31: Erase offset        1
18:10:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:10:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:10:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 19 

18:10:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:10:33: [ HostReset(False) , Command count = 1061 ] 
18:10:33: [ SetSpecialModes(0x5, True) , Command count = 1062 ] 
18:10:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05DB8C60>) , Command count = 1063 ] 
18:10:33: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:10:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E55F30>) , Command count = 1064 ] 
18:10:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55FC0>, <py_sfcl.CommandDataDefinition object at 0x05E55E10>) , Command count = 1065 ] 
18:10:34: [ GetCardStatus() , Command count = 1066 ] 
18:10:34: ACmd51[ SEND_SCR ] Failed with an exception
18:10:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF90>, <py_sfcl.CommandDataDefinition object at 0x05E44F30>) , Command count = 1067 ] 
18:10:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 1068 ] 
18:10:34: [ GetCardStatus() , Command count = 1069 ] 
18:10:34: ACMD13[ SD_STATUS ] Failed with an exception
18:10:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:10:36: [ HostReset(False) , Command count = 1070 ] 
18:10:36: [ SetSpecialModes(0x5, True) , Command count = 1071 ] 
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA120>, <py_sfcl.CommandDataDefinition object at 0x05D2A7E0>) , Command count = 1072 ] 
18:10:36: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50330>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 1073 ] 
18:10:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA80>, <py_sfcl.CommandDataDefinition object at 0x05E55CF0>) , Command count = 1074 ] 
18:10:36: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E59660>) , Command count = 1075 ] 
18:10:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D810>, <py_sfcl.CommandDataDefinition object at 0x05E59A50>) , Command count = 1076 ] 
18:10:36: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E2DED0>) , Command count = 1077 ] 
18:10:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37450>, <py_sfcl.CommandDataDefinition object at 0x05E2D5D0>) , Command count = 1078 ] 
18:10:36: [ GetCardStatus() , Command count = 1079 ] 
18:10:36: ACmd51[ SEND_SCR ] Failed with an exception
18:10:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55EA0>, <py_sfcl.CommandDataDefinition object at 0x05E50960>) , Command count = 1080 ] 
18:10:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 1081 ] 
18:10:36: [ GetCardStatus() , Command count = 1082 ] 
18:10:36: ACMD13[ SD_STATUS ] Failed with an exception
18:10:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:10:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1083 ] 
18:10:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1084 ] 
18:10:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B40>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 1085 ] 
18:10:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:39: [GetSCRRegisterEntry] Failed
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:10:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1086 ] 
18:10:39: [ GetCardStatus() , Command count = 1087 ] 
18:10:39: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:10:39: [DVTCommonLib]### Exception_Details :Time out error on card response
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:10:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37960>, <py_sfcl.CommandDataDefinition object at 0x05E376C0>) , Command count = 1088 ] 
18:10:39: [ GetCardStatus() , Command count = 1089 ] 
18:10:39: CMD55[ APP_CMD ] Failed with an exception
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37BD0>) , Command count = 1090 ] 
18:10:39: [ GetCardStatus() , Command count = 1091 ] 
18:10:39: ACmd51[ SEND_SCR ] Failed with an exception
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E376C0>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 1092 ] 
18:10:39: [ GetCardStatus() , Command count = 1093 ] 
18:10:39: CMD55[ APP_CMD ] Failed with an exception
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E37DE0>) , Command count = 1094 ] 
18:10:39: [ GetCardStatus() , Command count = 1095 ] 
18:10:39: ACMD13[ SD_STATUS ] Failed with an exception
18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:10:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1096 ] 
18:10:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1097 ] 
18:10:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C90>, <py_sfcl.CommandDataDefinition object at 0x05E37930>) , Command count = 1098 ] 
18:10:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 1099 ] 
18:10:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1100 ] 
18:10:41: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 1101 ] 
18:10:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:41: [GetSCRRegisterEntry] Passed
18:10:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:41: Data_Status_After Erases          : 0
18:10:41: CPRM Security Support             : No Security
18:10:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:41: Spec. Version                     : Version 3.0X
18:10:41: Extended Security Support         : Extended_Security_Not_Supported
18:10:41: Command Support                   : COMMAND_SUPPORT
18:10:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1102 ] 
18:10:41: Protected Area Size 0x28000
18:10:41: Bus Width           0
18:10:41: Secure Mode         0
18:10:41: Speed  Class        4
18:10:41: Perf Move           0
18:10:41: Au Size             9
18:10:41: Erase Size          15
18:10:41: Erase Timeout       1
18:10:41: Erase offset        1
18:10:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:10:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1103 ] 
18:10:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1104 ] 
18:10:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 1105 ] 
18:10:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37870>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 1106 ] 
18:10:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1107 ] 
18:10:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF00>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 1108 ] 
18:10:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E390>, <py_sfcl.CommandDataDefinition object at 0x05E373C0>) , Command count = 1109 ] 
18:10:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:10:44: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:10:44: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:10:44: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:10:44: Perform Power Off and On.
18:10:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1110 ] 
18:10:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:10:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3C0>, <py_sfcl.CommandDataDefinition object at 0x05E37750>) , Command count = 1111 ] 
18:10:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 1112 ] 
18:10:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:10:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1113 ] 
18:10:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:46: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:48: Host Frequency set to 25000 KHz
18:10:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:48: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DE10>, 0x0, True) , Command count = 1114 ] 
18:10:48: [GO18_globalSetVolt]### Host voltage value is set.
18:10:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37FC0>, 0x0, False) , Command count = 1115 ] 
18:10:48: [GO18_globalSetVolt]### Host voltage value is set.
18:10:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1116 ] 
18:10:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1117 ] 
18:10:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1118 ] 
18:10:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05E3E720>) , Command count = 1119 ] 
18:10:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E540>, <py_sfcl.CommandDataDefinition object at 0x05E37570>) , Command count = 1120 ] 
18:10:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1121 ] 
18:10:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:49: Host Frequency set to 25000 KHz
18:10:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:49: ####CSD Registe 2.0 Values####
18:10:49: CSD_STRUCTURE                                 :0x1
18:10:49: Reserv1                                       :0x0
18:10:49: Time Access 1 TAAC                            :0xe
18:10:49: Time Access 2 NSAC*100                        :0x0
18:10:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:49: Card Command Classess CCC                     :0x5b5
18:10:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:49: DSR(driver stage register)  DSR_IMP           :0x0
18:10:49: Reserv2                                       :0x0
18:10:49: Device Size C_SIZE                            :0xedc8
18:10:49: Reserv3                                       :0x0
18:10:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:49: Reserv4                                       :0x0
18:10:49: Write Speed Factor R2W_FACTOR                 :0x2
18:10:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:49: FILE_FORMAT_GRP                               :0x0
18:10:49: COPY flag                                     :0x1
18:10:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:49: File_Format                                   :0x0
18:10:49: CRC                                           :0x0
18:10:49: ####CSD Registe Values####  

18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:49: [GetSCRRegisterEntry] Passed
18:10:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:49: Data_Status_After Erases          : 0
18:10:49: CPRM Security Support             : No Security
18:10:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:49: Spec. Version                     : Version 3.0X
18:10:49: Extended Security Support         : Extended_Security_Not_Supported
18:10:49: Command Support                   : COMMAND_SUPPORT
18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E660>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 1122 ] 
18:10:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E7E0>, <py_sfcl.CommandDataDefinition object at 0x05E59A20>) , Command count = 1123 ] 
18:10:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:49: [ SetBusWidth(0x4) , Command count = 1124 ] 
18:10:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1125 ] 
18:10:49: Protected Area Size 0x28000
18:10:49: Bus Width           2
18:10:49: Secure Mode         0
18:10:49: Speed  Class        4
18:10:49: Perf Move           0
18:10:49: Au Size             9
18:10:49: Erase Size          15
18:10:49: Erase Timeout       1
18:10:49: Erase offset        1
18:10:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1126 ] 
18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:49: Host Frequency set to 100000 KHz
18:10:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:49: ####CSD Registe 2.0 Values####
18:10:49: CSD_STRUCTURE                                 :0x1
18:10:49: Reserv1                                       :0x0
18:10:49: Time Access 1 TAAC                            :0xe
18:10:49: Time Access 2 NSAC*100                        :0x0
18:10:49: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:49: Card Command Classess CCC                     :0x5b5
18:10:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:49: DSR(driver stage register)  DSR_IMP           :0x0
18:10:49: Reserv2                                       :0x0
18:10:49: Device Size C_SIZE                            :0xedc8
18:10:49: Reserv3                                       :0x0
18:10:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:49: Reserv4                                       :0x0
18:10:49: Write Speed Factor R2W_FACTOR                 :0x2
18:10:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:49: FILE_FORMAT_GRP                               :0x0
18:10:49: COPY flag                                     :0x1
18:10:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:49: File_Format                                   :0x0
18:10:49: CRC                                           :0x0
18:10:49: ####CSD Registe Values####  

18:10:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37810>, <py_sfcl.CommandDataDefinition object at 0x05E37390>) , Command count = 1127 ] 
18:10:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 1128 ] 
18:10:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:10:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:49: [GetSCRRegisterEntry] Passed
18:10:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:49: Data_Status_After Erases          : 0
18:10:49: CPRM Security Support             : No Security
18:10:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:49: Spec. Version                     : Version 3.0X
18:10:49: Extended Security Support         : Extended_Security_Not_Supported
18:10:49: Command Support                   : COMMAND_SUPPORT
18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:49: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:10:49: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:10:49: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:49: [GetSCRRegisterEntry] Passed
18:10:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:49: Data_Status_After Erases          : 0
18:10:49: CPRM Security Support             : No Security
18:10:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:49: Spec. Version                     : Version 3.0X
18:10:49: Extended Security Support         : Extended_Security_Not_Supported
18:10:49: Command Support                   : COMMAND_SUPPORT
18:10:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:49: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:49: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1129 ] 
18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:10:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:49: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:51: Host Frequency set to 25000 KHz
18:10:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:51: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37720>, 0x0, True) , Command count = 1130 ] 
18:10:51: [GO18_globalSetVolt]### Host voltage value is set.
18:10:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DAE0>, 0x0, False) , Command count = 1131 ] 
18:10:51: [GO18_globalSetVolt]### Host voltage value is set.
18:10:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1132 ] 
18:10:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1133 ] 
18:10:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1134 ] 
18:10:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E3EAE0>) , Command count = 1135 ] 
18:10:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E40>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 1136 ] 
18:10:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1137 ] 
18:10:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:51: Host Frequency set to 25000 KHz
18:10:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:51: ####CSD Registe 2.0 Values####
18:10:51: CSD_STRUCTURE                                 :0x1
18:10:51: Reserv1                                       :0x0
18:10:51: Time Access 1 TAAC                            :0xe
18:10:51: Time Access 2 NSAC*100                        :0x0
18:10:51: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:51: Card Command Classess CCC                     :0x5b5
18:10:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:51: DSR(driver stage register)  DSR_IMP           :0x0
18:10:51: Reserv2                                       :0x0
18:10:51: Device Size C_SIZE                            :0xedc8
18:10:51: Reserv3                                       :0x0
18:10:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:51: Reserv4                                       :0x0
18:10:51: Write Speed Factor R2W_FACTOR                 :0x2
18:10:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:51: FILE_FORMAT_GRP                               :0x0
18:10:51: COPY flag                                     :0x1
18:10:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:51: File_Format                                   :0x0
18:10:51: CRC                                           :0x0
18:10:51: ####CSD Registe Values####  

18:10:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:51: [GetSCRRegisterEntry] Passed
18:10:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:51: Data_Status_After Erases          : 0
18:10:51: CPRM Security Support             : No Security
18:10:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:51: Spec. Version                     : Version 3.0X
18:10:51: Extended Security Support         : Extended_Security_Not_Supported
18:10:51: Command Support                   : COMMAND_SUPPORT
18:10:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 1138 ] 
18:10:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DB70>, <py_sfcl.CommandDataDefinition object at 0x05E3E300>) , Command count = 1139 ] 
18:10:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:51: [ SetBusWidth(0x4) , Command count = 1140 ] 
18:10:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1141 ] 
18:10:51: Protected Area Size 0x28000
18:10:51: Bus Width           2
18:10:51: Secure Mode         0
18:10:51: Speed  Class        4
18:10:51: Perf Move           0
18:10:51: Au Size             9
18:10:51: Erase Size          15
18:10:51: Erase Timeout       1
18:10:51: Erase offset        1
18:10:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1142 ] 
18:10:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:51: Host Frequency set to 100000 KHz
18:10:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:51: ####CSD Registe 2.0 Values####
18:10:51: CSD_STRUCTURE                                 :0x1
18:10:51: Reserv1                                       :0x0
18:10:51: Time Access 1 TAAC                            :0xe
18:10:51: Time Access 2 NSAC*100                        :0x0
18:10:51: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:51: Card Command Classess CCC                     :0x5b5
18:10:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:51: DSR(driver stage register)  DSR_IMP           :0x0
18:10:51: Reserv2                                       :0x0
18:10:51: Device Size C_SIZE                            :0xedc8
18:10:51: Reserv3                                       :0x0
18:10:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:51: Reserv4                                       :0x0
18:10:51: Write Speed Factor R2W_FACTOR                 :0x2
18:10:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:51: FILE_FORMAT_GRP                               :0x0
18:10:51: COPY flag                                     :0x1
18:10:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:51: File_Format                                   :0x0
18:10:51: CRC                                           :0x0
18:10:51: ####CSD Registe Values####  

18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3E630>) , Command count = 1143 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA80>, <py_sfcl.CommandDataDefinition object at 0x05E3EF00>) , Command count = 1144 ] 
18:10:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EEA0>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 1145 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EFC0>, <py_sfcl.CommandDataDefinition object at 0x05E59690>) , Command count = 1146 ] 
18:10:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E330>, <py_sfcl.CommandDataDefinition object at 0x05E59420>) , Command count = 1147 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8D20>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 1148 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA20>, <py_sfcl.CommandDataDefinition object at 0x05E3E5D0>) , Command count = 1149 ] 
18:10:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 1150 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E44150>) , Command count = 1151 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:51: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44210>, <py_sfcl.CommandDataDefinition object at 0x05E590C0>) , Command count = 1152 ] 
18:10:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44300>, <py_sfcl.CommandDataDefinition object at 0x05E445A0>) , Command count = 1153 ] 
18:10:52: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37630>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 1154 ] 
18:10:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E44330>) , Command count = 1155 ] 
18:10:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E443C0>) , Command count = 1156 ] 
18:10:52: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440F0>, <py_sfcl.CommandDataDefinition object at 0x05E445D0>) , Command count = 1157 ] 
18:10:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E447B0>) , Command count = 1158 ] 
18:10:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:10:52: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:10:52: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:10:52: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:52: [GetSCRRegisterEntry] Passed
18:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:52: Data_Status_After Erases          : 0
18:10:52: CPRM Security Support             : No Security
18:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:52: Spec. Version                     : Version 3.0X
18:10:52: Extended Security Support         : Extended_Security_Not_Supported
18:10:52: Command Support                   : COMMAND_SUPPORT
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:52: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:52: [GetSCRRegisterEntry] Passed
18:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:52: Data_Status_After Erases          : 0
18:10:52: CPRM Security Support             : No Security
18:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:52: Spec. Version                     : Version 3.0X
18:10:52: Extended Security Support         : Extended_Security_Not_Supported
18:10:52: Command Support                   : COMMAND_SUPPORT
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:52: [GetSCRRegisterEntry] Passed
18:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:52: Data_Status_After Erases          : 0
18:10:52: CPRM Security Support             : No Security
18:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:52: Spec. Version                     : Version 3.0X
18:10:52: Extended Security Support         : Extended_Security_Not_Supported
18:10:52: Command Support                   : COMMAND_SUPPORT
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:52: [GetSCRRegisterEntry] Passed
18:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:52: Data_Status_After Erases          : 0
18:10:52: CPRM Security Support             : No Security
18:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:52: Spec. Version                     : Version 3.0X
18:10:52: Extended Security Support         : Extended_Security_Not_Supported
18:10:52: Command Support                   : COMMAND_SUPPORT
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:52: [GetSCRRegisterEntry] Passed
18:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:52: Data_Status_After Erases          : 0
18:10:52: CPRM Security Support             : No Security
18:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:52: Spec. Version                     : Version 3.0X
18:10:52: Extended Security Support         : Extended_Security_Not_Supported
18:10:52: Command Support                   : COMMAND_SUPPORT
18:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:10:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:10:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:10:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:10:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:10:52: Perform Power Off and On.
18:10:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1159 ] 
18:10:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:10:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 1160 ] 
18:10:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441B0>, <py_sfcl.CommandDataDefinition object at 0x05E449C0>) , Command count = 1161 ] 
18:10:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:10:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1162 ] 
18:10:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:54: [GO4_globalInitCard]### Switch to Specify Card Type
18:10:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:56: Host Frequency set to 25000 KHz
18:10:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:56: [GO18_globalSetVolt]### Set Host Voltage value.
18:10:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:10:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44900>, 0x0, True) , Command count = 1163 ] 
18:10:56: [GO18_globalSetVolt]### Host voltage value is set.
18:10:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:10:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EC60>, 0x0, False) , Command count = 1164 ] 
18:10:56: [GO18_globalSetVolt]### Host voltage value is set.
18:10:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1165 ] 
18:10:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:10:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1166 ] 
18:10:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:10:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:10:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:10:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:10:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:10:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1167 ] 
18:10:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:10:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:10:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA420>, <py_sfcl.CommandDataDefinition object at 0x05E44C60>) , Command count = 1168 ] 
18:10:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:10:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B40>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 1169 ] 
18:10:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:10:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1170 ] 
18:10:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:10:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:10:56: Host Frequency set to 25000 KHz
18:10:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:10:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:56: ####CSD Registe 2.0 Values####
18:10:56: CSD_STRUCTURE                                 :0x1
18:10:56: Reserv1                                       :0x0
18:10:56: Time Access 1 TAAC                            :0xe
18:10:56: Time Access 2 NSAC*100                        :0x0
18:10:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:10:56: Card Command Classess CCC                     :0x5b5
18:10:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:56: DSR(driver stage register)  DSR_IMP           :0x0
18:10:56: Reserv2                                       :0x0
18:10:56: Device Size C_SIZE                            :0xedc8
18:10:56: Reserv3                                       :0x0
18:10:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:56: Reserv4                                       :0x0
18:10:56: Write Speed Factor R2W_FACTOR                 :0x2
18:10:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:56: FILE_FORMAT_GRP                               :0x0
18:10:56: COPY flag                                     :0x1
18:10:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:56: File_Format                                   :0x0
18:10:56: CRC                                           :0x0
18:10:56: ####CSD Registe Values####  

18:10:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:10:56: [GetSCRRegisterEntry] Passed
18:10:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:10:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:10:56: Data_Status_After Erases          : 0
18:10:56: CPRM Security Support             : No Security
18:10:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:10:56: Spec. Version                     : Version 3.0X
18:10:56: Extended Security Support         : Extended_Security_Not_Supported
18:10:56: Command Support                   : COMMAND_SUPPORT
18:10:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:10:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D50>, <py_sfcl.CommandDataDefinition object at 0x05E44C00>) , Command count = 1171 ] 
18:10:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:10:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44780>, <py_sfcl.CommandDataDefinition object at 0x05E44B10>) , Command count = 1172 ] 
18:10:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:10:56: [ SetBusWidth(0x4) , Command count = 1173 ] 
18:10:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1174 ] 
18:10:56: Protected Area Size 0x28000
18:10:56: Bus Width           2
18:10:56: Secure Mode         0
18:10:56: Speed  Class        4
18:10:56: Perf Move           0
18:10:56: Au Size             9
18:10:56: Erase Size          15
18:10:56: Erase Timeout       1
18:10:56: Erase offset        1
18:10:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:10:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:10:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1175 ] 
18:10:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:10:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:10:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:10:57: Host Frequency set to 100000 KHz
18:10:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:10:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:10:57: ####CSD Registe 2.0 Values####
18:10:57: CSD_STRUCTURE                                 :0x1
18:10:57: Reserv1                                       :0x0
18:10:57: Time Access 1 TAAC                            :0xe
18:10:57: Time Access 2 NSAC*100                        :0x0
18:10:57: Data Transfer Rate TRAN_SPEED                 :0xb
18:10:57: Card Command Classess CCC                     :0x5b5
18:10:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:10:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:10:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:10:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:10:57: DSR(driver stage register)  DSR_IMP           :0x0
18:10:57: Reserv2                                       :0x0
18:10:57: Device Size C_SIZE                            :0xedc8
18:10:57: Reserv3                                       :0x0
18:10:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:10:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:10:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:10:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:10:57: Reserv4                                       :0x0
18:10:57: Write Speed Factor R2W_FACTOR                 :0x2
18:10:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:10:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:10:57: FILE_FORMAT_GRP                               :0x0
18:10:57: COPY flag                                     :0x1
18:10:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:10:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:10:57: File_Format                                   :0x0
18:10:57: CRC                                           :0x0
18:10:57: ####CSD Registe Values####  

18:10:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E44360>) , Command count = 1176 ] 
18:10:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:10:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F150>, <py_sfcl.CommandDataDefinition object at 0x05E44720>) , Command count = 1177 ] 
18:10:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:10:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:10:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:10:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1178 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:10:57: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1179 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1180 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1181 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1182 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:10:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1183 ] 
18:10:57: Protected Area Size 0x28000
18:10:57: Bus Width           2
18:10:57: Secure Mode         0
18:10:57: Speed  Class        4
18:10:57: Perf Move           0
18:10:57: Au Size             9
18:10:57: Erase Size          15
18:10:57: Erase Timeout       1
18:10:57: Erase offset        1
18:10:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:10:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:10:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 18 

18:10:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:10:59: [ HostReset(False) , Command count = 1184 ] 
18:10:59: [ SetSpecialModes(0x5, True) , Command count = 1185 ] 
18:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A20>, <py_sfcl.CommandDataDefinition object at 0x05E4F2A0>) , Command count = 1186 ] 
18:10:59: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E4F630>) , Command count = 1187 ] 
18:10:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F270>) , Command count = 1188 ] 
18:10:59: [ GetCardStatus() , Command count = 1189 ] 
18:10:59: ACmd51[ SEND_SCR ] Failed with an exception
18:10:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37BD0>) , Command count = 1190 ] 
18:10:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 1191 ] 
18:10:59: [ GetCardStatus() , Command count = 1192 ] 
18:10:59: ACMD13[ SD_STATUS ] Failed with an exception
18:10:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:10:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:11:01: [ HostReset(False) , Command count = 1193 ] 
18:11:01: [ SetSpecialModes(0x5, True) , Command count = 1194 ] 
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E4F750>) , Command count = 1195 ] 
18:11:01: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E37F90>) , Command count = 1196 ] 
18:11:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA80>, <py_sfcl.CommandDataDefinition object at 0x05E4F720>) , Command count = 1197 ] 
18:11:01: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E594E0>) , Command count = 1198 ] 
18:11:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E59060>) , Command count = 1199 ] 
18:11:01: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F990>, <py_sfcl.CommandDataDefinition object at 0x05E4F780>) , Command count = 1200 ] 
18:11:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E4F600>) , Command count = 1201 ] 
18:11:01: [ GetCardStatus() , Command count = 1202 ] 
18:11:01: ACmd51[ SEND_SCR ] Failed with an exception
18:11:01: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E37B70>) , Command count = 1203 ] 
18:11:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 1204 ] 
18:11:02: [ GetCardStatus() , Command count = 1205 ] 
18:11:02: ACMD13[ SD_STATUS ] Failed with an exception
18:11:02: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:02: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:11:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
18:11:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1207 ] 
18:11:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4FF00>) , Command count = 1208 ] 
18:11:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:04: [GetSCRRegisterEntry] Failed
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:11:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1209 ] 
18:11:04: [ GetCardStatus() , Command count = 1210 ] 
18:11:04: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:11:04: [DVTCommonLib]### Exception_Details :Time out error on card response
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 1211 ] 
18:11:04: [ GetCardStatus() , Command count = 1212 ] 
18:11:04: CMD55[ APP_CMD ] Failed with an exception
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E4FDE0>) , Command count = 1213 ] 
18:11:04: [ GetCardStatus() , Command count = 1214 ] 
18:11:04: ACmd51[ SEND_SCR ] Failed with an exception
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 1215 ] 
18:11:04: [ GetCardStatus() , Command count = 1216 ] 
18:11:04: CMD55[ APP_CMD ] Failed with an exception
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E50150>) , Command count = 1217 ] 
18:11:04: [ GetCardStatus() , Command count = 1218 ] 
18:11:04: ACMD13[ SD_STATUS ] Failed with an exception
18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:11:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1219 ] 
18:11:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1220 ] 
18:11:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E50450>) , Command count = 1221 ] 
18:11:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E503F0>, <py_sfcl.CommandDataDefinition object at 0x05E50030>) , Command count = 1222 ] 
18:11:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1223 ] 
18:11:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FE70>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 1224 ] 
18:11:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:07: [GetSCRRegisterEntry] Passed
18:11:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:07: Data_Status_After Erases          : 0
18:11:07: CPRM Security Support             : No Security
18:11:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:07: Spec. Version                     : Version 3.0X
18:11:07: Extended Security Support         : Extended_Security_Not_Supported
18:11:07: Command Support                   : COMMAND_SUPPORT
18:11:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1225 ] 
18:11:07: Protected Area Size 0x28000
18:11:07: Bus Width           0
18:11:07: Secure Mode         0
18:11:07: Speed  Class        4
18:11:07: Perf Move           0
18:11:07: Au Size             9
18:11:07: Erase Size          15
18:11:07: Erase Timeout       1
18:11:07: Erase offset        1
18:11:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:07: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:11:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1226 ] 
18:11:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1227 ] 
18:11:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E4F060>) , Command count = 1228 ] 
18:11:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 1229 ] 
18:11:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1230 ] 
18:11:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E501B0>) , Command count = 1231 ] 
18:11:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E508A0>, <py_sfcl.CommandDataDefinition object at 0x05E507B0>) , Command count = 1232 ] 
18:11:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:11:09: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:11:09: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:11:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:11:09: Perform Power Off and On.
18:11:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1233 ] 
18:11:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E50A80>) , Command count = 1234 ] 
18:11:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E50870>) , Command count = 1235 ] 
18:11:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:11:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1236 ] 
18:11:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:11: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:13: Host Frequency set to 25000 KHz
18:11:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:13: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E505D0>, 0x0, True) , Command count = 1237 ] 
18:11:13: [GO18_globalSetVolt]### Host voltage value is set.
18:11:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50540>, 0x0, False) , Command count = 1238 ] 
18:11:14: [GO18_globalSetVolt]### Host voltage value is set.
18:11:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1239 ] 
18:11:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1240 ] 
18:11:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1241 ] 
18:11:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E50270>) , Command count = 1242 ] 
18:11:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05E50C60>) , Command count = 1243 ] 
18:11:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1244 ] 
18:11:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:14: Host Frequency set to 25000 KHz
18:11:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:14: ####CSD Registe 2.0 Values####
18:11:14: CSD_STRUCTURE                                 :0x1
18:11:14: Reserv1                                       :0x0
18:11:14: Time Access 1 TAAC                            :0xe
18:11:14: Time Access 2 NSAC*100                        :0x0
18:11:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:14: Card Command Classess CCC                     :0x5b5
18:11:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:14: DSR(driver stage register)  DSR_IMP           :0x0
18:11:14: Reserv2                                       :0x0
18:11:14: Device Size C_SIZE                            :0xedc8
18:11:14: Reserv3                                       :0x0
18:11:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:14: Reserv4                                       :0x0
18:11:14: Write Speed Factor R2W_FACTOR                 :0x2
18:11:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:14: FILE_FORMAT_GRP                               :0x0
18:11:14: COPY flag                                     :0x1
18:11:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:14: File_Format                                   :0x0
18:11:14: CRC                                           :0x0
18:11:14: ####CSD Registe Values####  

18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:14: [GetSCRRegisterEntry] Passed
18:11:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:14: Data_Status_After Erases          : 0
18:11:14: CPRM Security Support             : No Security
18:11:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:14: Spec. Version                     : Version 3.0X
18:11:14: Extended Security Support         : Extended_Security_Not_Supported
18:11:14: Command Support                   : COMMAND_SUPPORT
18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D50>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 1245 ] 
18:11:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F00>, <py_sfcl.CommandDataDefinition object at 0x05E59960>) , Command count = 1246 ] 
18:11:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:14: [ SetBusWidth(0x4) , Command count = 1247 ] 
18:11:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1248 ] 
18:11:14: Protected Area Size 0x28000
18:11:14: Bus Width           2
18:11:14: Secure Mode         0
18:11:14: Speed  Class        4
18:11:14: Perf Move           0
18:11:14: Au Size             9
18:11:14: Erase Size          15
18:11:14: Erase Timeout       1
18:11:14: Erase offset        1
18:11:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1249 ] 
18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:14: Host Frequency set to 100000 KHz
18:11:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:14: ####CSD Registe 2.0 Values####
18:11:14: CSD_STRUCTURE                                 :0x1
18:11:14: Reserv1                                       :0x0
18:11:14: Time Access 1 TAAC                            :0xe
18:11:14: Time Access 2 NSAC*100                        :0x0
18:11:14: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:14: Card Command Classess CCC                     :0x5b5
18:11:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:14: DSR(driver stage register)  DSR_IMP           :0x0
18:11:14: Reserv2                                       :0x0
18:11:14: Device Size C_SIZE                            :0xedc8
18:11:14: Reserv3                                       :0x0
18:11:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:14: Reserv4                                       :0x0
18:11:14: Write Speed Factor R2W_FACTOR                 :0x2
18:11:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:14: FILE_FORMAT_GRP                               :0x0
18:11:14: COPY flag                                     :0x1
18:11:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:14: File_Format                                   :0x0
18:11:14: CRC                                           :0x0
18:11:14: ####CSD Registe Values####  

18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55060>, <py_sfcl.CommandDataDefinition object at 0x05E509C0>) , Command count = 1250 ] 
18:11:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550F0>, <py_sfcl.CommandDataDefinition object at 0x05E50F90>) , Command count = 1251 ] 
18:11:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:11:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:14: [GetSCRRegisterEntry] Passed
18:11:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:14: Data_Status_After Erases          : 0
18:11:14: CPRM Security Support             : No Security
18:11:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:14: Spec. Version                     : Version 3.0X
18:11:14: Extended Security Support         : Extended_Security_Not_Supported
18:11:14: Command Support                   : COMMAND_SUPPORT
18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:11:14: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:11:14: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:14: [GetSCRRegisterEntry] Passed
18:11:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:14: Data_Status_After Erases          : 0
18:11:14: CPRM Security Support             : No Security
18:11:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:14: Spec. Version                     : Version 3.0X
18:11:14: Extended Security Support         : Extended_Security_Not_Supported
18:11:14: Command Support                   : COMMAND_SUPPORT
18:11:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:14: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1252 ] 
18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:11:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:14: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:16: Host Frequency set to 25000 KHz
18:11:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:16: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E502A0>, 0x0, True) , Command count = 1253 ] 
18:11:16: [GO18_globalSetVolt]### Host voltage value is set.
18:11:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EF30>, 0x0, False) , Command count = 1254 ] 
18:11:16: [GO18_globalSetVolt]### Host voltage value is set.
18:11:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1255 ] 
18:11:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1256 ] 
18:11:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1257 ] 
18:11:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF60>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 1258 ] 
18:11:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 1259 ] 
18:11:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1260 ] 
18:11:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:17: Host Frequency set to 25000 KHz
18:11:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:17: ####CSD Registe 2.0 Values####
18:11:17: CSD_STRUCTURE                                 :0x1
18:11:17: Reserv1                                       :0x0
18:11:17: Time Access 1 TAAC                            :0xe
18:11:17: Time Access 2 NSAC*100                        :0x0
18:11:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:17: Card Command Classess CCC                     :0x5b5
18:11:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:17: DSR(driver stage register)  DSR_IMP           :0x0
18:11:17: Reserv2                                       :0x0
18:11:17: Device Size C_SIZE                            :0xedc8
18:11:17: Reserv3                                       :0x0
18:11:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:17: Reserv4                                       :0x0
18:11:17: Write Speed Factor R2W_FACTOR                 :0x2
18:11:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:17: FILE_FORMAT_GRP                               :0x0
18:11:17: COPY flag                                     :0x1
18:11:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:17: File_Format                                   :0x0
18:11:17: CRC                                           :0x0
18:11:17: ####CSD Registe Values####  

18:11:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:17: [GetSCRRegisterEntry] Passed
18:11:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:17: Data_Status_After Erases          : 0
18:11:17: CPRM Security Support             : No Security
18:11:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:17: Spec. Version                     : Version 3.0X
18:11:17: Extended Security Support         : Extended_Security_Not_Supported
18:11:17: Command Support                   : COMMAND_SUPPORT
18:11:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E50EA0>) , Command count = 1261 ] 
18:11:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F330>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 1262 ] 
18:11:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:17: [ SetBusWidth(0x4) , Command count = 1263 ] 
18:11:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E552A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1264 ] 
18:11:17: Protected Area Size 0x28000
18:11:17: Bus Width           2
18:11:17: Secure Mode         0
18:11:17: Speed  Class        4
18:11:17: Perf Move           0
18:11:17: Au Size             9
18:11:17: Erase Size          15
18:11:17: Erase Timeout       1
18:11:17: Erase offset        1
18:11:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1265 ] 
18:11:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:17: Host Frequency set to 100000 KHz
18:11:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:17: ####CSD Registe 2.0 Values####
18:11:17: CSD_STRUCTURE                                 :0x1
18:11:17: Reserv1                                       :0x0
18:11:17: Time Access 1 TAAC                            :0xe
18:11:17: Time Access 2 NSAC*100                        :0x0
18:11:17: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:17: Card Command Classess CCC                     :0x5b5
18:11:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:17: DSR(driver stage register)  DSR_IMP           :0x0
18:11:17: Reserv2                                       :0x0
18:11:17: Device Size C_SIZE                            :0xedc8
18:11:17: Reserv3                                       :0x0
18:11:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:17: Reserv4                                       :0x0
18:11:17: Write Speed Factor R2W_FACTOR                 :0x2
18:11:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:17: FILE_FORMAT_GRP                               :0x0
18:11:17: COPY flag                                     :0x1
18:11:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:17: File_Format                                   :0x0
18:11:17: CRC                                           :0x0
18:11:17: ####CSD Registe Values####  

18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 1266 ] 
18:11:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E50570>) , Command count = 1267 ] 
18:11:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052782D0>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 1268 ] 
18:11:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E553C0>) , Command count = 1269 ] 
18:11:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E551E0>, <py_sfcl.CommandDataDefinition object at 0x05E592A0>) , Command count = 1270 ] 
18:11:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F810>) , Command count = 1271 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB570>, <py_sfcl.CommandDataDefinition object at 0x05E50810>) , Command count = 1272 ] 
18:11:18: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55390>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 1273 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55090>, <py_sfcl.CommandDataDefinition object at 0x052BB330>) , Command count = 1274 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E557B0>, <py_sfcl.CommandDataDefinition object at 0x05E598D0>) , Command count = 1275 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E506C0>, <py_sfcl.CommandDataDefinition object at 0x05E55720>) , Command count = 1276 ] 
18:11:18: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F840>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 1277 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 1278 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558A0>, <py_sfcl.CommandDataDefinition object at 0x05E556C0>) , Command count = 1279 ] 
18:11:18: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 1280 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E55840>) , Command count = 1281 ] 
18:11:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:18: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:11:18: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:11:18: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:18: [GetSCRRegisterEntry] Passed
18:11:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:18: Data_Status_After Erases          : 0
18:11:18: CPRM Security Support             : No Security
18:11:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:18: Spec. Version                     : Version 3.0X
18:11:18: Extended Security Support         : Extended_Security_Not_Supported
18:11:18: Command Support                   : COMMAND_SUPPORT
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:18: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:18: [GetSCRRegisterEntry] Passed
18:11:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:18: Data_Status_After Erases          : 0
18:11:18: CPRM Security Support             : No Security
18:11:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:18: Spec. Version                     : Version 3.0X
18:11:18: Extended Security Support         : Extended_Security_Not_Supported
18:11:18: Command Support                   : COMMAND_SUPPORT
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:18: [GetSCRRegisterEntry] Passed
18:11:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:18: Data_Status_After Erases          : 0
18:11:18: CPRM Security Support             : No Security
18:11:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:18: Spec. Version                     : Version 3.0X
18:11:18: Extended Security Support         : Extended_Security_Not_Supported
18:11:18: Command Support                   : COMMAND_SUPPORT
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:18: [GetSCRRegisterEntry] Passed
18:11:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:18: Data_Status_After Erases          : 0
18:11:18: CPRM Security Support             : No Security
18:11:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:18: Spec. Version                     : Version 3.0X
18:11:18: Extended Security Support         : Extended_Security_Not_Supported
18:11:18: Command Support                   : COMMAND_SUPPORT
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:18: [GetSCRRegisterEntry] Passed
18:11:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:18: Data_Status_After Erases          : 0
18:11:18: CPRM Security Support             : No Security
18:11:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:18: Spec. Version                     : Version 3.0X
18:11:18: Extended Security Support         : Extended_Security_Not_Supported
18:11:18: Command Support                   : COMMAND_SUPPORT
18:11:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:18: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:11:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:11:18: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:11:18: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:11:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:11:18: Perform Power Off and On.
18:11:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1282 ] 
18:11:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052B9DE0>, <py_sfcl.CommandDataDefinition object at 0x052CDBA0>) , Command count = 1283 ] 
18:11:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 1284 ] 
18:11:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:11:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1285 ] 
18:11:20: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:20: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:23: Host Frequency set to 25000 KHz
18:11:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:23: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDDE0>, 0x0, True) , Command count = 1286 ] 
18:11:23: [GO18_globalSetVolt]### Host voltage value is set.
18:11:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E554B0>, 0x0, False) , Command count = 1287 ] 
18:11:23: [GO18_globalSetVolt]### Host voltage value is set.
18:11:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1288 ] 
18:11:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1289 ] 
18:11:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1290 ] 
18:11:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05D2A0C0>) , Command count = 1291 ] 
18:11:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 1292 ] 
18:11:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1293 ] 
18:11:23: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:23: Host Frequency set to 25000 KHz
18:11:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:23: ####CSD Registe 2.0 Values####
18:11:23: CSD_STRUCTURE                                 :0x1
18:11:23: Reserv1                                       :0x0
18:11:23: Time Access 1 TAAC                            :0xe
18:11:23: Time Access 2 NSAC*100                        :0x0
18:11:23: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:23: Card Command Classess CCC                     :0x5b5
18:11:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:23: DSR(driver stage register)  DSR_IMP           :0x0
18:11:23: Reserv2                                       :0x0
18:11:23: Device Size C_SIZE                            :0xedc8
18:11:23: Reserv3                                       :0x0
18:11:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:23: Reserv4                                       :0x0
18:11:23: Write Speed Factor R2W_FACTOR                 :0x2
18:11:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:23: FILE_FORMAT_GRP                               :0x0
18:11:23: COPY flag                                     :0x1
18:11:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:23: File_Format                                   :0x0
18:11:23: CRC                                           :0x0
18:11:23: ####CSD Registe Values####  

18:11:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:23: [GetSCRRegisterEntry] Passed
18:11:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:23: Data_Status_After Erases          : 0
18:11:23: CPRM Security Support             : No Security
18:11:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:23: Spec. Version                     : Version 3.0X
18:11:23: Extended Security Support         : Extended_Security_Not_Supported
18:11:23: Command Support                   : COMMAND_SUPPORT
18:11:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C00>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 1294 ] 
18:11:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E598A0>) , Command count = 1295 ] 
18:11:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:23: [ SetBusWidth(0x4) , Command count = 1296 ] 
18:11:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1297 ] 
18:11:23: Protected Area Size 0x28000
18:11:23: Bus Width           2
18:11:23: Secure Mode         0
18:11:23: Speed  Class        4
18:11:23: Perf Move           0
18:11:23: Au Size             9
18:11:23: Erase Size          15
18:11:23: Erase Timeout       1
18:11:23: Erase offset        1
18:11:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1298 ] 
18:11:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:23: Host Frequency set to 100000 KHz
18:11:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:23: ####CSD Registe 2.0 Values####
18:11:23: CSD_STRUCTURE                                 :0x1
18:11:23: Reserv1                                       :0x0
18:11:23: Time Access 1 TAAC                            :0xe
18:11:23: Time Access 2 NSAC*100                        :0x0
18:11:23: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:23: Card Command Classess CCC                     :0x5b5
18:11:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:23: DSR(driver stage register)  DSR_IMP           :0x0
18:11:23: Reserv2                                       :0x0
18:11:23: Device Size C_SIZE                            :0xedc8
18:11:23: Reserv3                                       :0x0
18:11:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:23: Reserv4                                       :0x0
18:11:23: Write Speed Factor R2W_FACTOR                 :0x2
18:11:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:24: FILE_FORMAT_GRP                               :0x0
18:11:24: COPY flag                                     :0x1
18:11:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:24: File_Format                                   :0x0
18:11:24: CRC                                           :0x0
18:11:24: ####CSD Registe Values####  

18:11:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 1299 ] 
18:11:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 1300 ] 
18:11:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:11:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1301 ] 
18:11:24: Protected Area Size 0x28000
18:11:24: Bus Width           2
18:11:24: Secure Mode         0
18:11:24: Speed  Class        4
18:11:24: Perf Move           0
18:11:24: Au Size             9
18:11:24: Erase Size          15
18:11:24: Erase Timeout       1
18:11:24: Erase offset        1
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:11:24: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1302 ] 
18:11:24: Protected Area Size 0x28000
18:11:24: Bus Width           2
18:11:24: Secure Mode         0
18:11:24: Speed  Class        4
18:11:24: Perf Move           0
18:11:24: Au Size             9
18:11:24: Erase Size          15
18:11:24: Erase Timeout       1
18:11:24: Erase offset        1
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1303 ] 
18:11:24: Protected Area Size 0x28000
18:11:24: Bus Width           2
18:11:24: Secure Mode         0
18:11:24: Speed  Class        4
18:11:24: Perf Move           0
18:11:24: Au Size             9
18:11:24: Erase Size          15
18:11:24: Erase Timeout       1
18:11:24: Erase offset        1
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1304 ] 
18:11:24: Protected Area Size 0x28000
18:11:24: Bus Width           2
18:11:24: Secure Mode         0
18:11:24: Speed  Class        4
18:11:24: Perf Move           0
18:11:24: Au Size             9
18:11:24: Erase Size          15
18:11:24: Erase Timeout       1
18:11:24: Erase offset        1
18:11:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:24: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:11:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:11:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1305 ] 
18:11:25: Protected Area Size 0x28000
18:11:25: Bus Width           2
18:11:25: Secure Mode         0
18:11:25: Speed  Class        4
18:11:25: Perf Move           0
18:11:25: Au Size             9
18:11:25: Erase Size          15
18:11:25: Erase Timeout       1
18:11:25: Erase offset        1
18:11:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:11:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1306 ] 
18:11:25: Protected Area Size 0x28000
18:11:25: Bus Width           2
18:11:25: Secure Mode         0
18:11:25: Speed  Class        4
18:11:25: Perf Move           0
18:11:25: Au Size             9
18:11:25: Erase Size          15
18:11:25: Erase Timeout       1
18:11:25: Erase offset        1
18:11:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:11:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:11:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 17 

18:11:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:11:27: [ HostReset(False) , Command count = 1307 ] 
18:11:27: [ SetSpecialModes(0x5, True) , Command count = 1308 ] 
18:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E55D80>) , Command count = 1309 ] 
18:11:27: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2AC60>, <py_sfcl.CommandDataDefinition object at 0x05E55F90>) , Command count = 1310 ] 
18:11:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05E55B70>) , Command count = 1311 ] 
18:11:27: [ GetCardStatus() , Command count = 1312 ] 
18:11:27: ACmd51[ SEND_SCR ] Failed with an exception
18:11:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50150>, <py_sfcl.CommandDataDefinition object at 0x05E50180>) , Command count = 1313 ] 
18:11:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E55E70>) , Command count = 1314 ] 
18:11:27: [ GetCardStatus() , Command count = 1315 ] 
18:11:27: ACMD13[ SD_STATUS ] Failed with an exception
18:11:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:11:29: [ HostReset(False) , Command count = 1316 ] 
18:11:29: [ SetSpecialModes(0x5, True) , Command count = 1317 ] 
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDE10>, <py_sfcl.CommandDataDefinition object at 0x05E2D540>) , Command count = 1318 ] 
18:11:29: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF90>, <py_sfcl.CommandDataDefinition object at 0x05E44F30>) , Command count = 1319 ] 
18:11:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DB0>, <py_sfcl.CommandDataDefinition object at 0x05E55F30>) , Command count = 1320 ] 
18:11:29: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 1321 ] 
18:11:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E59960>) , Command count = 1322 ] 
18:11:29: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7B0>, <py_sfcl.CommandDataDefinition object at 0x05E55E10>) , Command count = 1323 ] 
18:11:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA120>, <py_sfcl.CommandDataDefinition object at 0x05D2A7E0>) , Command count = 1324 ] 
18:11:30: [ GetCardStatus() , Command count = 1325 ] 
18:11:30: ACmd51[ SEND_SCR ] Failed with an exception
18:11:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E55E70>) , Command count = 1326 ] 
18:11:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E59660>) , Command count = 1327 ] 
18:11:30: [ GetCardStatus() , Command count = 1328 ] 
18:11:30: ACMD13[ SD_STATUS ] Failed with an exception
18:11:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:11:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1329 ] 
18:11:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1330 ] 
18:11:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 1331 ] 
18:11:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:32: [GetSCRRegisterEntry] Failed
18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:11:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1332 ] 
18:11:32: [ GetCardStatus() , Command count = 1333 ] 
18:11:32: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:11:32: [DVTCommonLib]### Exception_Details :Time out error on card response
18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E37A20>) , Command count = 1334 ] 
18:11:32: [ GetCardStatus() , Command count = 1335 ] 
18:11:32: CMD55[ APP_CMD ] Failed with an exception
18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E37360>) , Command count = 1336 ] 
18:11:32: [ GetCardStatus() , Command count = 1337 ] 
18:11:32: ACmd51[ SEND_SCR ] Failed with an exception
18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x052BBF00>) , Command count = 1338 ] 
18:11:32: [ GetCardStatus() , Command count = 1339 ] 
18:11:32: CMD55[ APP_CMD ] Failed with an exception
18:11:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E3E570>) , Command count = 1340 ] 
18:11:33: [ GetCardStatus() , Command count = 1341 ] 
18:11:33: ACMD13[ SD_STATUS ] Failed with an exception
18:11:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:11:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1342 ] 
18:11:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1343 ] 
18:11:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E2D630>) , Command count = 1344 ] 
18:11:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 1345 ] 
18:11:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1346 ] 
18:11:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E372D0>, <py_sfcl.CommandDataDefinition object at 0x05E37CF0>) , Command count = 1347 ] 
18:11:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:35: [GetSCRRegisterEntry] Passed
18:11:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:35: Data_Status_After Erases          : 0
18:11:35: CPRM Security Support             : No Security
18:11:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:35: Spec. Version                     : Version 3.0X
18:11:35: Extended Security Support         : Extended_Security_Not_Supported
18:11:35: Command Support                   : COMMAND_SUPPORT
18:11:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1348 ] 
18:11:35: Protected Area Size 0x28000
18:11:35: Bus Width           0
18:11:35: Secure Mode         0
18:11:35: Speed  Class        4
18:11:35: Perf Move           0
18:11:35: Au Size             9
18:11:35: Erase Size          15
18:11:35: Erase Timeout       1
18:11:35: Erase offset        1
18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:35: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:11:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1349 ] 
18:11:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1350 ] 
18:11:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E376F0>) , Command count = 1351 ] 
18:11:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF30>, <py_sfcl.CommandDataDefinition object at 0x05E37A50>) , Command count = 1352 ] 
18:11:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1353 ] 
18:11:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E376C0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 1354 ] 
18:11:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E10>, <py_sfcl.CommandDataDefinition object at 0x05E37F60>) , Command count = 1355 ] 
18:11:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:37: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:11:37: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:11:37: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:11:37: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:11:37: Perform Power Off and On.
18:11:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1356 ] 
18:11:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 1357 ] 
18:11:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE40>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 1358 ] 
18:11:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:11:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1359 ] 
18:11:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:40: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:42: Host Frequency set to 25000 KHz
18:11:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:42: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DF00>, 0x0, True) , Command count = 1360 ] 
18:11:42: [GO18_globalSetVolt]### Host voltage value is set.
18:11:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D7B0>, 0x0, False) , Command count = 1361 ] 
18:11:42: [GO18_globalSetVolt]### Host voltage value is set.
18:11:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1362 ] 
18:11:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1363 ] 
18:11:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1364 ] 
18:11:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B10>, <py_sfcl.CommandDataDefinition object at 0x05E3E240>) , Command count = 1365 ] 
18:11:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E37F30>) , Command count = 1366 ] 
18:11:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1367 ] 
18:11:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:42: Host Frequency set to 25000 KHz
18:11:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:42: ####CSD Registe 2.0 Values####
18:11:42: CSD_STRUCTURE                                 :0x1
18:11:42: Reserv1                                       :0x0
18:11:42: Time Access 1 TAAC                            :0xe
18:11:42: Time Access 2 NSAC*100                        :0x0
18:11:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:42: Card Command Classess CCC                     :0x5b5
18:11:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:42: DSR(driver stage register)  DSR_IMP           :0x0
18:11:42: Reserv2                                       :0x0
18:11:42: Device Size C_SIZE                            :0xedc8
18:11:42: Reserv3                                       :0x0
18:11:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:42: Reserv4                                       :0x0
18:11:42: Write Speed Factor R2W_FACTOR                 :0x2
18:11:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:42: FILE_FORMAT_GRP                               :0x0
18:11:42: COPY flag                                     :0x1
18:11:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:42: File_Format                                   :0x0
18:11:42: CRC                                           :0x0
18:11:42: ####CSD Registe Values####  

18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:42: [GetSCRRegisterEntry] Passed
18:11:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:42: Data_Status_After Erases          : 0
18:11:42: CPRM Security Support             : No Security
18:11:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:42: Spec. Version                     : Version 3.0X
18:11:42: Extended Security Support         : Extended_Security_Not_Supported
18:11:42: Command Support                   : COMMAND_SUPPORT
18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 1368 ] 
18:11:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E510>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 1369 ] 
18:11:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:42: [ SetBusWidth(0x4) , Command count = 1370 ] 
18:11:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1371 ] 
18:11:42: Protected Area Size 0x28000
18:11:42: Bus Width           2
18:11:42: Secure Mode         0
18:11:42: Speed  Class        4
18:11:42: Perf Move           0
18:11:42: Au Size             9
18:11:42: Erase Size          15
18:11:42: Erase Timeout       1
18:11:42: Erase offset        1
18:11:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1372 ] 
18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:42: Host Frequency set to 100000 KHz
18:11:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:42: ####CSD Registe 2.0 Values####
18:11:42: CSD_STRUCTURE                                 :0x1
18:11:42: Reserv1                                       :0x0
18:11:42: Time Access 1 TAAC                            :0xe
18:11:42: Time Access 2 NSAC*100                        :0x0
18:11:42: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:42: Card Command Classess CCC                     :0x5b5
18:11:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:42: DSR(driver stage register)  DSR_IMP           :0x0
18:11:42: Reserv2                                       :0x0
18:11:42: Device Size C_SIZE                            :0xedc8
18:11:42: Reserv3                                       :0x0
18:11:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:42: Reserv4                                       :0x0
18:11:42: Write Speed Factor R2W_FACTOR                 :0x2
18:11:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:42: FILE_FORMAT_GRP                               :0x0
18:11:42: COPY flag                                     :0x1
18:11:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:42: File_Format                                   :0x0
18:11:42: CRC                                           :0x0
18:11:42: ####CSD Registe Values####  

18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E540>, <py_sfcl.CommandDataDefinition object at 0x05E3E8D0>) , Command count = 1373 ] 
18:11:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E660>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 1374 ] 
18:11:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:42: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:11:42: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:42: [GetSCRRegisterEntry] Passed
18:11:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:42: Data_Status_After Erases          : 0
18:11:42: CPRM Security Support             : No Security
18:11:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:42: Spec. Version                     : Version 3.0X
18:11:42: Extended Security Support         : Extended_Security_Not_Supported
18:11:42: Command Support                   : COMMAND_SUPPORT
18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:42: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:11:42: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:11:42: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:42: [GetSCRRegisterEntry] Passed
18:11:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:42: Data_Status_After Erases          : 0
18:11:42: CPRM Security Support             : No Security
18:11:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:42: Spec. Version                     : Version 3.0X
18:11:42: Extended Security Support         : Extended_Security_Not_Supported
18:11:42: Command Support                   : COMMAND_SUPPORT
18:11:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:42: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:42: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1375 ] 
18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:11:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:42: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:45: Host Frequency set to 25000 KHz
18:11:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:45: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D5D0>, 0x0, True) , Command count = 1376 ] 
18:11:45: [GO18_globalSetVolt]### Host voltage value is set.
18:11:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA480>, 0x0, False) , Command count = 1377 ] 
18:11:45: [GO18_globalSetVolt]### Host voltage value is set.
18:11:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1378 ] 
18:11:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1379 ] 
18:11:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1380 ] 
18:11:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37FC0>, <py_sfcl.CommandDataDefinition object at 0x05E3E180>) , Command count = 1381 ] 
18:11:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E3E900>) , Command count = 1382 ] 
18:11:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1383 ] 
18:11:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:45: Host Frequency set to 25000 KHz
18:11:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:45: ####CSD Registe 2.0 Values####
18:11:45: CSD_STRUCTURE                                 :0x1
18:11:45: Reserv1                                       :0x0
18:11:45: Time Access 1 TAAC                            :0xe
18:11:45: Time Access 2 NSAC*100                        :0x0
18:11:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:45: Card Command Classess CCC                     :0x5b5
18:11:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:45: DSR(driver stage register)  DSR_IMP           :0x0
18:11:45: Reserv2                                       :0x0
18:11:45: Device Size C_SIZE                            :0xedc8
18:11:45: Reserv3                                       :0x0
18:11:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:45: Reserv4                                       :0x0
18:11:45: Write Speed Factor R2W_FACTOR                 :0x2
18:11:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:45: FILE_FORMAT_GRP                               :0x0
18:11:45: COPY flag                                     :0x1
18:11:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:45: File_Format                                   :0x0
18:11:45: CRC                                           :0x0
18:11:45: ####CSD Registe Values####  

18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E450>, <py_sfcl.CommandDataDefinition object at 0x05E3E3C0>) , Command count = 1384 ] 
18:11:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA660>, <py_sfcl.CommandDataDefinition object at 0x05E3E2D0>) , Command count = 1385 ] 
18:11:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:45: [ SetBusWidth(0x4) , Command count = 1386 ] 
18:11:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1387 ] 
18:11:45: Protected Area Size 0x28000
18:11:45: Bus Width           2
18:11:45: Secure Mode         0
18:11:45: Speed  Class        4
18:11:45: Perf Move           0
18:11:45: Au Size             9
18:11:45: Erase Size          15
18:11:45: Erase Timeout       1
18:11:45: Erase offset        1
18:11:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1388 ] 
18:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:45: Host Frequency set to 100000 KHz
18:11:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:45: ####CSD Registe 2.0 Values####
18:11:45: CSD_STRUCTURE                                 :0x1
18:11:45: Reserv1                                       :0x0
18:11:45: Time Access 1 TAAC                            :0xe
18:11:45: Time Access 2 NSAC*100                        :0x0
18:11:45: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:45: Card Command Classess CCC                     :0x5b5
18:11:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:45: DSR(driver stage register)  DSR_IMP           :0x0
18:11:45: Reserv2                                       :0x0
18:11:45: Device Size C_SIZE                            :0xedc8
18:11:45: Reserv3                                       :0x0
18:11:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:45: Reserv4                                       :0x0
18:11:45: Write Speed Factor R2W_FACTOR                 :0x2
18:11:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:45: FILE_FORMAT_GRP                               :0x0
18:11:45: COPY flag                                     :0x1
18:11:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:45: File_Format                                   :0x0
18:11:45: CRC                                           :0x0
18:11:45: ####CSD Registe Values####  

18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E40>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 1389 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 1390 ] 
18:11:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ECF0>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 1391 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E59180>) , Command count = 1392 ] 
18:11:45: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E596C0>) , Command count = 1393 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E2DB70>) , Command count = 1394 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E630>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 1395 ] 
18:11:45: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA80>, <py_sfcl.CommandDataDefinition object at 0x05E3EF00>) , Command count = 1396 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EEA0>) , Command count = 1397 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EFC0>, <py_sfcl.CommandDataDefinition object at 0x05E59690>) , Command count = 1398 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 1399 ] 
18:11:45: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8D20>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 1400 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E330>, <py_sfcl.CommandDataDefinition object at 0x05E3EA20>) , Command count = 1401 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E990>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 1402 ] 
18:11:45: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E44150>) , Command count = 1403 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E44210>) , Command count = 1404 ] 
18:11:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:11:45: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:11:45: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:11:45: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:45: [GetSCRRegisterEntry] Passed
18:11:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:45: Data_Status_After Erases          : 0
18:11:45: CPRM Security Support             : No Security
18:11:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:45: Spec. Version                     : Version 3.0X
18:11:45: Extended Security Support         : Extended_Security_Not_Supported
18:11:45: Command Support                   : COMMAND_SUPPORT
18:11:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:45: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:11:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:11:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:11:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:11:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:11:45: Perform Power Off and On.
18:11:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1405 ] 
18:11:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37630>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 1406 ] 
18:11:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E44330>) , Command count = 1407 ] 
18:11:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:11:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1408 ] 
18:11:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:47: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:50: Host Frequency set to 25000 KHz
18:11:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:50: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E440F0>, 0x0, True) , Command count = 1409 ] 
18:11:50: [GO18_globalSetVolt]### Host voltage value is set.
18:11:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EBD0>, 0x0, False) , Command count = 1410 ] 
18:11:50: [GO18_globalSetVolt]### Host voltage value is set.
18:11:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1411 ] 
18:11:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1412 ] 
18:11:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1413 ] 
18:11:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DAE0>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 1414 ] 
18:11:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44A50>) , Command count = 1415 ] 
18:11:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1416 ] 
18:11:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:50: Host Frequency set to 25000 KHz
18:11:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:50: ####CSD Registe 2.0 Values####
18:11:50: CSD_STRUCTURE                                 :0x1
18:11:50: Reserv1                                       :0x0
18:11:50: Time Access 1 TAAC                            :0xe
18:11:50: Time Access 2 NSAC*100                        :0x0
18:11:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:50: Card Command Classess CCC                     :0x5b5
18:11:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:50: DSR(driver stage register)  DSR_IMP           :0x0
18:11:50: Reserv2                                       :0x0
18:11:50: Device Size C_SIZE                            :0xedc8
18:11:50: Reserv3                                       :0x0
18:11:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:50: Reserv4                                       :0x0
18:11:50: Write Speed Factor R2W_FACTOR                 :0x2
18:11:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:50: FILE_FORMAT_GRP                               :0x0
18:11:50: COPY flag                                     :0x1
18:11:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:50: File_Format                                   :0x0
18:11:50: CRC                                           :0x0
18:11:50: ####CSD Registe Values####  

18:11:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:50: [GetSCRRegisterEntry] Passed
18:11:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:50: Data_Status_After Erases          : 0
18:11:50: CPRM Security Support             : No Security
18:11:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:50: Spec. Version                     : Version 3.0X
18:11:50: Extended Security Support         : Extended_Security_Not_Supported
18:11:50: Command Support                   : COMMAND_SUPPORT
18:11:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E446C0>) , Command count = 1417 ] 
18:11:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 1418 ] 
18:11:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:50: [ SetBusWidth(0x4) , Command count = 1419 ] 
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1420 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1421 ] 
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:50: Host Frequency set to 100000 KHz
18:11:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:50: ####CSD Registe 2.0 Values####
18:11:50: CSD_STRUCTURE                                 :0x1
18:11:50: Reserv1                                       :0x0
18:11:50: Time Access 1 TAAC                            :0xe
18:11:50: Time Access 2 NSAC*100                        :0x0
18:11:50: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:50: Card Command Classess CCC                     :0x5b5
18:11:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:50: DSR(driver stage register)  DSR_IMP           :0x0
18:11:50: Reserv2                                       :0x0
18:11:50: Device Size C_SIZE                            :0xedc8
18:11:50: Reserv3                                       :0x0
18:11:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:50: Reserv4                                       :0x0
18:11:50: Write Speed Factor R2W_FACTOR                 :0x2
18:11:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:50: FILE_FORMAT_GRP                               :0x0
18:11:50: COPY flag                                     :0x1
18:11:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:50: File_Format                                   :0x0
18:11:50: CRC                                           :0x0
18:11:50: ####CSD Registe Values####  

18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B40>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 1422 ] 
18:11:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D50>, <py_sfcl.CommandDataDefinition object at 0x05E44C00>) , Command count = 1423 ] 
18:11:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:11:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E449F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1424 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:11:50: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1425 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1426 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1427 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1428 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1429 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:11:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:11:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 16 

18:11:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:11:52: [ HostReset(False) , Command count = 1430 ] 
18:11:52: [ SetSpecialModes(0x5, True) , Command count = 1431 ] 
18:11:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F210>) , Command count = 1432 ] 
18:11:52: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:11:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44DE0>) , Command count = 1433 ] 
18:11:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F090>, <py_sfcl.CommandDataDefinition object at 0x05E44240>) , Command count = 1434 ] 
18:11:53: [ GetCardStatus() , Command count = 1435 ] 
18:11:53: ACmd51[ SEND_SCR ] Failed with an exception
18:11:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E44600>) , Command count = 1436 ] 
18:11:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 1437 ] 
18:11:53: [ GetCardStatus() , Command count = 1438 ] 
18:11:53: ACMD13[ SD_STATUS ] Failed with an exception
18:11:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:11:55: [ HostReset(False) , Command count = 1439 ] 
18:11:55: [ SetSpecialModes(0x5, True) , Command count = 1440 ] 
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44E10>, <py_sfcl.CommandDataDefinition object at 0x05E44690>) , Command count = 1441 ] 
18:11:55: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37BD0>) , Command count = 1442 ] 
18:11:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F630>) , Command count = 1443 ] 
18:11:55: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 1444 ] 
18:11:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F270>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 1445 ] 
18:11:55: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F360>) , Command count = 1446 ] 
18:11:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E4F750>) , Command count = 1447 ] 
18:11:55: [ GetCardStatus() , Command count = 1448 ] 
18:11:55: ACmd51[ SEND_SCR ] Failed with an exception
18:11:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 1449 ] 
18:11:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E594E0>) , Command count = 1450 ] 
18:11:55: [ GetCardStatus() , Command count = 1451 ] 
18:11:55: ACMD13[ SD_STATUS ] Failed with an exception
18:11:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:11:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1452 ] 
18:11:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1453 ] 
18:11:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 1454 ] 
18:11:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:58: [GetSCRRegisterEntry] Failed
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:11:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1455 ] 
18:11:58: [ GetCardStatus() , Command count = 1456 ] 
18:11:58: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:11:58: [DVTCommonLib]### Exception_Details :Time out error on card response
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E44AB0>) , Command count = 1457 ] 
18:11:58: [ GetCardStatus() , Command count = 1458 ] 
18:11:58: CMD55[ APP_CMD ] Failed with an exception
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2A0>, <py_sfcl.CommandDataDefinition object at 0x05E4FC60>) , Command count = 1459 ] 
18:11:58: [ GetCardStatus() , Command count = 1460 ] 
18:11:58: ACmd51[ SEND_SCR ] Failed with an exception
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E440C0>) , Command count = 1461 ] 
18:11:58: [ GetCardStatus() , Command count = 1462 ] 
18:11:58: CMD55[ APP_CMD ] Failed with an exception
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2A0>, <py_sfcl.CommandDataDefinition object at 0x05E4FC60>) , Command count = 1463 ] 
18:11:58: [ GetCardStatus() , Command count = 1464 ] 
18:11:58: ACMD13[ SD_STATUS ] Failed with an exception
18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:11:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1465 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1466 ] 
18:12:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FBD0>, <py_sfcl.CommandDataDefinition object at 0x05E4F240>) , Command count = 1467 ] 
18:12:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E4FDE0>) , Command count = 1468 ] 
18:12:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1469 ] 
18:12:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50300>, <py_sfcl.CommandDataDefinition object at 0x05E4FB70>) , Command count = 1470 ] 
18:12:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:00: [GetSCRRegisterEntry] Passed
18:12:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:00: Data_Status_After Erases          : 0
18:12:00: CPRM Security Support             : No Security
18:12:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:00: Spec. Version                     : Version 3.0X
18:12:00: Extended Security Support         : Extended_Security_Not_Supported
18:12:00: Command Support                   : COMMAND_SUPPORT
18:12:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E591E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1471 ] 
18:12:00: Protected Area Size 0x28000
18:12:00: Bus Width           0
18:12:00: Secure Mode         0
18:12:00: Speed  Class        4
18:12:00: Perf Move           0
18:12:00: Au Size             9
18:12:00: Erase Size          15
18:12:00: Erase Timeout       1
18:12:00: Erase offset        1
18:12:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:00: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:12:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1472 ] 
18:12:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1473 ] 
18:12:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50630>, <py_sfcl.CommandDataDefinition object at 0x05E50210>) , Command count = 1474 ] 
18:12:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 1475 ] 
18:12:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1476 ] 
18:12:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E3E030>) , Command count = 1477 ] 
18:12:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 1478 ] 
18:12:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:03: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:12:03: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:12:03: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:12:03: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:12:03: Perform Power Off and On.
18:12:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1479 ] 
18:12:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E4F060>) , Command count = 1480 ] 
18:12:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FFC0>, <py_sfcl.CommandDataDefinition object at 0x05E50090>) , Command count = 1481 ] 
18:12:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1482 ] 
18:12:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:05: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:07: Host Frequency set to 25000 KHz
18:12:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:07: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FCF0>, 0x0, True) , Command count = 1483 ] 
18:12:07: [GO18_globalSetVolt]### Host voltage value is set.
18:12:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FD20>, 0x0, False) , Command count = 1484 ] 
18:12:07: [GO18_globalSetVolt]### Host voltage value is set.
18:12:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1485 ] 
18:12:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1486 ] 
18:12:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1487 ] 
18:12:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E50600>) , Command count = 1488 ] 
18:12:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505D0>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 1489 ] 
18:12:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1490 ] 
18:12:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:08: Host Frequency set to 25000 KHz
18:12:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:08: ####CSD Registe 2.0 Values####
18:12:08: CSD_STRUCTURE                                 :0x1
18:12:08: Reserv1                                       :0x0
18:12:08: Time Access 1 TAAC                            :0xe
18:12:08: Time Access 2 NSAC*100                        :0x0
18:12:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:08: Card Command Classess CCC                     :0x5b5
18:12:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:08: DSR(driver stage register)  DSR_IMP           :0x0
18:12:08: Reserv2                                       :0x0
18:12:08: Device Size C_SIZE                            :0xedc8
18:12:08: Reserv3                                       :0x0
18:12:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:08: Reserv4                                       :0x0
18:12:08: Write Speed Factor R2W_FACTOR                 :0x2
18:12:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:08: FILE_FORMAT_GRP                               :0x0
18:12:08: COPY flag                                     :0x1
18:12:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:08: File_Format                                   :0x0
18:12:08: CRC                                           :0x0
18:12:08: ####CSD Registe Values####  

18:12:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:08: [GetSCRRegisterEntry] Passed
18:12:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:08: Data_Status_After Erases          : 0
18:12:08: CPRM Security Support             : No Security
18:12:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:08: Spec. Version                     : Version 3.0X
18:12:08: Extended Security Support         : Extended_Security_Not_Supported
18:12:08: Command Support                   : COMMAND_SUPPORT
18:12:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CC0>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 1491 ] 
18:12:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D80>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 1492 ] 
18:12:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:08: [ SetBusWidth(0x4) , Command count = 1493 ] 
18:12:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1494 ] 
18:12:08: Protected Area Size 0x28000
18:12:08: Bus Width           2
18:12:08: Secure Mode         0
18:12:08: Speed  Class        4
18:12:08: Perf Move           0
18:12:08: Au Size             9
18:12:08: Erase Size          15
18:12:08: Erase Timeout       1
18:12:08: Erase offset        1
18:12:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1495 ] 
18:12:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:08: Host Frequency set to 100000 KHz
18:12:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:08: ####CSD Registe 2.0 Values####
18:12:08: CSD_STRUCTURE                                 :0x1
18:12:08: Reserv1                                       :0x0
18:12:08: Time Access 1 TAAC                            :0xe
18:12:08: Time Access 2 NSAC*100                        :0x0
18:12:08: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:08: Card Command Classess CCC                     :0x5b5
18:12:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:08: DSR(driver stage register)  DSR_IMP           :0x0
18:12:08: Reserv2                                       :0x0
18:12:08: Device Size C_SIZE                            :0xedc8
18:12:08: Reserv3                                       :0x0
18:12:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:08: Reserv4                                       :0x0
18:12:08: Write Speed Factor R2W_FACTOR                 :0x2
18:12:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:08: FILE_FORMAT_GRP                               :0x0
18:12:08: COPY flag                                     :0x1
18:12:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:08: File_Format                                   :0x0
18:12:08: CRC                                           :0x0
18:12:08: ####CSD Registe Values####  

18:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05E50C60>) , Command count = 1496 ] 
18:12:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D50>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 1497 ] 
18:12:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:12:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:12:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:08: [GetSCRRegisterEntry] Passed
18:12:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:08: Data_Status_After Erases          : 0
18:12:08: CPRM Security Support             : No Security
18:12:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:08: Spec. Version                     : Version 3.0X
18:12:08: Extended Security Support         : Extended_Security_Not_Supported
18:12:08: Command Support                   : COMMAND_SUPPORT
18:12:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:08: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:12:08: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:12:09: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:12:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:09: [GetSCRRegisterEntry] Passed
18:12:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:09: Data_Status_After Erases          : 0
18:12:09: CPRM Security Support             : No Security
18:12:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:09: Spec. Version                     : Version 3.0X
18:12:09: Extended Security Support         : Extended_Security_Not_Supported
18:12:09: Command Support                   : COMMAND_SUPPORT
18:12:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:09: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:12:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:09: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1498 ] 
18:12:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:12:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:09: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:11: Host Frequency set to 25000 KHz
18:12:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:11: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50240>, 0x0, True) , Command count = 1499 ] 
18:12:11: [GO18_globalSetVolt]### Host voltage value is set.
18:12:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EB70>, 0x0, False) , Command count = 1500 ] 
18:12:11: [GO18_globalSetVolt]### Host voltage value is set.
18:12:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1501 ] 
18:12:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1502 ] 
18:12:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1503 ] 
18:12:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50540>, <py_sfcl.CommandDataDefinition object at 0x05E50ED0>) , Command count = 1504 ] 
18:12:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502A0>, <py_sfcl.CommandDataDefinition object at 0x05E500F0>) , Command count = 1505 ] 
18:12:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1506 ] 
18:12:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:12: Host Frequency set to 25000 KHz
18:12:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:12: ####CSD Registe 2.0 Values####
18:12:12: CSD_STRUCTURE                                 :0x1
18:12:12: Reserv1                                       :0x0
18:12:12: Time Access 1 TAAC                            :0xe
18:12:12: Time Access 2 NSAC*100                        :0x0
18:12:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:12: Card Command Classess CCC                     :0x5b5
18:12:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:12: DSR(driver stage register)  DSR_IMP           :0x0
18:12:12: Reserv2                                       :0x0
18:12:12: Device Size C_SIZE                            :0xedc8
18:12:12: Reserv3                                       :0x0
18:12:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:12: Reserv4                                       :0x0
18:12:12: Write Speed Factor R2W_FACTOR                 :0x2
18:12:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:12: FILE_FORMAT_GRP                               :0x0
18:12:12: COPY flag                                     :0x1
18:12:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:12: File_Format                                   :0x0
18:12:12: CRC                                           :0x0
18:12:12: ####CSD Registe Values####  

18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55300>, <py_sfcl.CommandDataDefinition object at 0x05E509C0>) , Command count = 1507 ] 
18:12:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F2D0>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 1508 ] 
18:12:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:12: [ SetBusWidth(0x4) , Command count = 1509 ] 
18:12:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E552D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1510 ] 
18:12:12: Protected Area Size 0x28000
18:12:12: Bus Width           2
18:12:12: Secure Mode         0
18:12:12: Speed  Class        4
18:12:12: Perf Move           0
18:12:12: Au Size             9
18:12:12: Erase Size          15
18:12:12: Erase Timeout       1
18:12:12: Erase offset        1
18:12:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1511 ] 
18:12:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:12: Host Frequency set to 100000 KHz
18:12:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:12: ####CSD Registe 2.0 Values####
18:12:12: CSD_STRUCTURE                                 :0x1
18:12:12: Reserv1                                       :0x0
18:12:12: Time Access 1 TAAC                            :0xe
18:12:12: Time Access 2 NSAC*100                        :0x0
18:12:12: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:12: Card Command Classess CCC                     :0x5b5
18:12:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:12: DSR(driver stage register)  DSR_IMP           :0x0
18:12:12: Reserv2                                       :0x0
18:12:12: Device Size C_SIZE                            :0xedc8
18:12:12: Reserv3                                       :0x0
18:12:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:12: Reserv4                                       :0x0
18:12:12: Write Speed Factor R2W_FACTOR                 :0x2
18:12:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:12: FILE_FORMAT_GRP                               :0x0
18:12:12: COPY flag                                     :0x1
18:12:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:12: File_Format                                   :0x0
18:12:12: CRC                                           :0x0
18:12:12: ####CSD Registe Values####  

18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 1512 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E50EA0>) , Command count = 1513 ] 
18:12:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E50270>) , Command count = 1514 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C00>, <py_sfcl.CommandDataDefinition object at 0x05E509F0>) , Command count = 1515 ] 
18:12:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550C0>, <py_sfcl.CommandDataDefinition object at 0x05E593C0>) , Command count = 1516 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 1517 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E553F0>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 1518 ] 
18:12:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59780>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 1519 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x052782D0>) , Command count = 1520 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E553C0>) , Command count = 1521 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB390>, <py_sfcl.CommandDataDefinition object at 0x05E50690>) , Command count = 1522 ] 
18:12:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F810>) , Command count = 1523 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E551E0>, <py_sfcl.CommandDataDefinition object at 0x052BB570>) , Command count = 1524 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E10>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 1525 ] 
18:12:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59450>, <py_sfcl.CommandDataDefinition object at 0x05E590F0>) , Command count = 1526 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55390>, <py_sfcl.CommandDataDefinition object at 0x05E557B0>) , Command count = 1527 ] 
18:12:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:12: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:12:12: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:12:12: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:12: [GetSCRRegisterEntry] Passed
18:12:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:12: Data_Status_After Erases          : 0
18:12:12: CPRM Security Support             : No Security
18:12:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:12: Spec. Version                     : Version 3.0X
18:12:12: Extended Security Support         : Extended_Security_Not_Supported
18:12:12: Command Support                   : COMMAND_SUPPORT
18:12:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:12: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:12:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:12:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:12:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:12:12: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:12:12: Perform Power Off and On.
18:12:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1528 ] 
18:12:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F840>, <py_sfcl.CommandDataDefinition object at 0x05E50840>) , Command count = 1529 ] 
18:12:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 1530 ] 
18:12:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1531 ] 
18:12:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:14: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:16: Host Frequency set to 25000 KHz
18:12:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:16: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E442D0>, 0x0, True) , Command count = 1532 ] 
18:12:16: [GO18_globalSetVolt]### Host voltage value is set.
18:12:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55210>, 0x0, False) , Command count = 1533 ] 
18:12:16: [GO18_globalSetVolt]### Host voltage value is set.
18:12:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1534 ] 
18:12:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1535 ] 
18:12:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1536 ] 
18:12:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EF30>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 1537 ] 
18:12:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 1538 ] 
18:12:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1539 ] 
18:12:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:17: Host Frequency set to 25000 KHz
18:12:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:17: ####CSD Registe 2.0 Values####
18:12:17: CSD_STRUCTURE                                 :0x1
18:12:17: Reserv1                                       :0x0
18:12:17: Time Access 1 TAAC                            :0xe
18:12:17: Time Access 2 NSAC*100                        :0x0
18:12:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:17: Card Command Classess CCC                     :0x5b5
18:12:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:17: DSR(driver stage register)  DSR_IMP           :0x0
18:12:17: Reserv2                                       :0x0
18:12:17: Device Size C_SIZE                            :0xedc8
18:12:17: Reserv3                                       :0x0
18:12:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:17: Reserv4                                       :0x0
18:12:17: Write Speed Factor R2W_FACTOR                 :0x2
18:12:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:17: FILE_FORMAT_GRP                               :0x0
18:12:17: COPY flag                                     :0x1
18:12:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:17: File_Format                                   :0x0
18:12:17: CRC                                           :0x0
18:12:17: ####CSD Registe Values####  

18:12:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:17: [GetSCRRegisterEntry] Passed
18:12:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:17: Data_Status_After Erases          : 0
18:12:17: CPRM Security Support             : No Security
18:12:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:17: Spec. Version                     : Version 3.0X
18:12:17: Extended Security Support         : Extended_Security_Not_Supported
18:12:17: Command Support                   : COMMAND_SUPPORT
18:12:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AB0>, <py_sfcl.CommandDataDefinition object at 0x05E55840>) , Command count = 1540 ] 
18:12:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558D0>, <py_sfcl.CommandDataDefinition object at 0x05E59510>) , Command count = 1541 ] 
18:12:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:17: [ SetBusWidth(0x4) , Command count = 1542 ] 
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1543 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1544 ] 
18:12:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:17: Host Frequency set to 100000 KHz
18:12:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:17: ####CSD Registe 2.0 Values####
18:12:17: CSD_STRUCTURE                                 :0x1
18:12:17: Reserv1                                       :0x0
18:12:17: Time Access 1 TAAC                            :0xe
18:12:17: Time Access 2 NSAC*100                        :0x0
18:12:17: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:17: Card Command Classess CCC                     :0x5b5
18:12:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:17: DSR(driver stage register)  DSR_IMP           :0x0
18:12:17: Reserv2                                       :0x0
18:12:17: Device Size C_SIZE                            :0xedc8
18:12:17: Reserv3                                       :0x0
18:12:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:17: Reserv4                                       :0x0
18:12:17: Write Speed Factor R2W_FACTOR                 :0x2
18:12:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:17: FILE_FORMAT_GRP                               :0x0
18:12:17: COPY flag                                     :0x1
18:12:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:17: File_Format                                   :0x0
18:12:17: CRC                                           :0x0
18:12:17: ####CSD Registe Values####  

18:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 1545 ] 
18:12:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C00>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 1546 ] 
18:12:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:12:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1547 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:12:17: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1548 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052AE570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1549 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1550 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1551 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1552 ] 
18:12:17: Protected Area Size 0x28000
18:12:17: Bus Width           2
18:12:17: Secure Mode         0
18:12:17: Speed  Class        4
18:12:17: Perf Move           0
18:12:17: Au Size             9
18:12:17: Erase Size          15
18:12:17: Erase Timeout       1
18:12:17: Erase offset        1
18:12:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:12:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:12:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 15 

18:12:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:12:19: [ HostReset(False) , Command count = 1553 ] 
18:12:19: [ SetSpecialModes(0x5, True) , Command count = 1554 ] 
18:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55420>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 1555 ] 
18:12:19: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA6F0>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 1556 ] 
18:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E55F00>) , Command count = 1557 ] 
18:12:19: [ GetCardStatus() , Command count = 1558 ] 
18:12:19: ACmd51[ SEND_SCR ] Failed with an exception
18:12:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05E3E2A0>) , Command count = 1559 ] 
18:12:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 1560 ] 
18:12:19: [ GetCardStatus() , Command count = 1561 ] 
18:12:19: ACMD13[ SD_STATUS ] Failed with an exception
18:12:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:12:21: [ HostReset(False) , Command count = 1562 ] 
18:12:21: [ SetSpecialModes(0x5, True) , Command count = 1563 ] 
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x052CDB40>) , Command count = 1564 ] 
18:12:21: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50150>, <py_sfcl.CommandDataDefinition object at 0x05E50180>) , Command count = 1565 ] 
18:12:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8C60>, <py_sfcl.CommandDataDefinition object at 0x05E55F90>) , Command count = 1566 ] 
18:12:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05E55C30>) , Command count = 1567 ] 
18:12:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E59840>) , Command count = 1568 ] 
18:12:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E55ED0>) , Command count = 1569 ] 
18:12:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDE10>, <py_sfcl.CommandDataDefinition object at 0x05E2D540>) , Command count = 1570 ] 
18:12:22: [ GetCardStatus() , Command count = 1571 ] 
18:12:22: ACmd51[ SEND_SCR ] Failed with an exception
18:12:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E4FF90>) , Command count = 1572 ] 
18:12:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 1573 ] 
18:12:22: [ GetCardStatus() , Command count = 1574 ] 
18:12:22: ACMD13[ SD_STATUS ] Failed with an exception
18:12:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:12:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1575 ] 
18:12:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1576 ] 
18:12:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50330>, <py_sfcl.CommandDataDefinition object at 0x05D2A7B0>) , Command count = 1577 ] 
18:12:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:24: [GetSCRRegisterEntry] Failed
18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:12:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1578 ] 
18:12:24: [ GetCardStatus() , Command count = 1579 ] 
18:12:24: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:12:24: [DVTCommonLib]### Exception_Details :Time out error on card response
18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55960>, <py_sfcl.CommandDataDefinition object at 0x05E559C0>) , Command count = 1580 ] 
18:12:24: [ GetCardStatus() , Command count = 1581 ] 
18:12:24: CMD55[ APP_CMD ] Failed with an exception
18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E2DA20>) , Command count = 1582 ] 
18:12:24: [ GetCardStatus() , Command count = 1583 ] 
18:12:24: ACmd51[ SEND_SCR ] Failed with an exception
18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D870>, <py_sfcl.CommandDataDefinition object at 0x05E2D120>) , Command count = 1584 ] 
18:12:24: [ GetCardStatus() , Command count = 1585 ] 
18:12:24: CMD55[ APP_CMD ] Failed with an exception
18:12:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E2DA20>) , Command count = 1586 ] 
18:12:25: [ GetCardStatus() , Command count = 1587 ] 
18:12:25: ACMD13[ SD_STATUS ] Failed with an exception
18:12:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:12:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1588 ] 
18:12:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1589 ] 
18:12:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B10>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 1590 ] 
18:12:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 1591 ] 
18:12:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1592 ] 
18:12:27: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7E0>, <py_sfcl.CommandDataDefinition object at 0x05E37C00>) , Command count = 1593 ] 
18:12:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:27: [GetSCRRegisterEntry] Passed
18:12:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:27: Data_Status_After Erases          : 0
18:12:27: CPRM Security Support             : No Security
18:12:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:27: Spec. Version                     : Version 3.0X
18:12:27: Extended Security Support         : Extended_Security_Not_Supported
18:12:27: Command Support                   : COMMAND_SUPPORT
18:12:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E599C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1594 ] 
18:12:27: Protected Area Size 0x28000
18:12:27: Bus Width           0
18:12:27: Secure Mode         0
18:12:27: Speed  Class        4
18:12:27: Perf Move           0
18:12:27: Au Size             9
18:12:27: Erase Size          15
18:12:27: Erase Timeout       1
18:12:27: Erase offset        1
18:12:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:12:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1595 ] 
18:12:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1596 ] 
18:12:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E2DBD0>) , Command count = 1597 ] 
18:12:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 1598 ] 
18:12:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1599 ] 
18:12:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 1600 ] 
18:12:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37CC0>, <py_sfcl.CommandDataDefinition object at 0x05E37D20>) , Command count = 1601 ] 
18:12:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:29: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:12:29: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:12:29: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:12:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:12:29: Perform Power Off and On.
18:12:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1602 ] 
18:12:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E376F0>) , Command count = 1603 ] 
18:12:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E37CF0>) , Command count = 1604 ] 
18:12:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1605 ] 
18:12:32: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:32: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:34: Host Frequency set to 25000 KHz
18:12:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:34: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E376C0>, 0x0, True) , Command count = 1606 ] 
18:12:34: [GO18_globalSetVolt]### Host voltage value is set.
18:12:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37300>, 0x0, False) , Command count = 1607 ] 
18:12:34: [GO18_globalSetVolt]### Host voltage value is set.
18:12:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1608 ] 
18:12:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1609 ] 
18:12:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1610 ] 
18:12:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554B0>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 1611 ] 
18:12:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF00>, <py_sfcl.CommandDataDefinition object at 0x05E377B0>) , Command count = 1612 ] 
18:12:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1613 ] 
18:12:34: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:34: Host Frequency set to 25000 KHz
18:12:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:34: ####CSD Registe 2.0 Values####
18:12:34: CSD_STRUCTURE                                 :0x1
18:12:34: Reserv1                                       :0x0
18:12:34: Time Access 1 TAAC                            :0xe
18:12:34: Time Access 2 NSAC*100                        :0x0
18:12:34: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:34: Card Command Classess CCC                     :0x5b5
18:12:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:34: DSR(driver stage register)  DSR_IMP           :0x0
18:12:34: Reserv2                                       :0x0
18:12:34: Device Size C_SIZE                            :0xedc8
18:12:34: Reserv3                                       :0x0
18:12:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:34: Reserv4                                       :0x0
18:12:34: Write Speed Factor R2W_FACTOR                 :0x2
18:12:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:34: FILE_FORMAT_GRP                               :0x0
18:12:34: COPY flag                                     :0x1
18:12:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:34: File_Format                                   :0x0
18:12:34: CRC                                           :0x0
18:12:34: ####CSD Registe Values####  

18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:34: [GetSCRRegisterEntry] Passed
18:12:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:34: Data_Status_After Erases          : 0
18:12:34: CPRM Security Support             : No Security
18:12:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:34: Spec. Version                     : Version 3.0X
18:12:34: Extended Security Support         : Extended_Security_Not_Supported
18:12:34: Command Support                   : COMMAND_SUPPORT
18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37750>, <py_sfcl.CommandDataDefinition object at 0x05E37DB0>) , Command count = 1614 ] 
18:12:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E270>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 1615 ] 
18:12:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:34: [ SetBusWidth(0x4) , Command count = 1616 ] 
18:12:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1617 ] 
18:12:34: Protected Area Size 0x28000
18:12:34: Bus Width           2
18:12:34: Secure Mode         0
18:12:34: Speed  Class        4
18:12:34: Perf Move           0
18:12:34: Au Size             9
18:12:34: Erase Size          15
18:12:34: Erase Timeout       1
18:12:34: Erase offset        1
18:12:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1618 ] 
18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:34: Host Frequency set to 100000 KHz
18:12:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:34: ####CSD Registe 2.0 Values####
18:12:34: CSD_STRUCTURE                                 :0x1
18:12:34: Reserv1                                       :0x0
18:12:34: Time Access 1 TAAC                            :0xe
18:12:34: Time Access 2 NSAC*100                        :0x0
18:12:34: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:34: Card Command Classess CCC                     :0x5b5
18:12:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:34: DSR(driver stage register)  DSR_IMP           :0x0
18:12:34: Reserv2                                       :0x0
18:12:34: Device Size C_SIZE                            :0xedc8
18:12:34: Reserv3                                       :0x0
18:12:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:34: Reserv4                                       :0x0
18:12:34: Write Speed Factor R2W_FACTOR                 :0x2
18:12:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:34: FILE_FORMAT_GRP                               :0x0
18:12:34: COPY flag                                     :0x1
18:12:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:34: File_Format                                   :0x0
18:12:34: CRC                                           :0x0
18:12:34: ####CSD Registe Values####  

18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E3E600>) , Command count = 1619 ] 
18:12:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 1620 ] 
18:12:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:12:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:34: [GetSCRRegisterEntry] Passed
18:12:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:34: Data_Status_After Erases          : 0
18:12:34: CPRM Security Support             : No Security
18:12:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:34: Spec. Version                     : Version 3.0X
18:12:34: Extended Security Support         : Extended_Security_Not_Supported
18:12:34: Command Support                   : COMMAND_SUPPORT
18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:34: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:12:34: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:12:34: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:34: [GetSCRRegisterEntry] Passed
18:12:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:34: Data_Status_After Erases          : 0
18:12:34: CPRM Security Support             : No Security
18:12:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:34: Spec. Version                     : Version 3.0X
18:12:34: Extended Security Support         : Extended_Security_Not_Supported
18:12:34: Command Support                   : COMMAND_SUPPORT
18:12:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:34: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:34: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1621 ] 
18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:12:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:34: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:36: Host Frequency set to 25000 KHz
18:12:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:36: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37A80>, 0x0, True) , Command count = 1622 ] 
18:12:36: [GO18_globalSetVolt]### Host voltage value is set.
18:12:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F8A0>, 0x0, False) , Command count = 1623 ] 
18:12:36: [GO18_globalSetVolt]### Host voltage value is set.
18:12:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1624 ] 
18:12:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1625 ] 
18:12:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1626 ] 
18:12:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E37D80>) , Command count = 1627 ] 
18:12:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D5D0>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 1628 ] 
18:12:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1629 ] 
18:12:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:37: Host Frequency set to 25000 KHz
18:12:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:37: ####CSD Registe 2.0 Values####
18:12:37: CSD_STRUCTURE                                 :0x1
18:12:37: Reserv1                                       :0x0
18:12:37: Time Access 1 TAAC                            :0xe
18:12:37: Time Access 2 NSAC*100                        :0x0
18:12:37: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:37: Card Command Classess CCC                     :0x5b5
18:12:37: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:37: DSR(driver stage register)  DSR_IMP           :0x0
18:12:37: Reserv2                                       :0x0
18:12:37: Device Size C_SIZE                            :0xedc8
18:12:37: Reserv3                                       :0x0
18:12:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:37: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:37: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:37: Reserv4                                       :0x0
18:12:37: Write Speed Factor R2W_FACTOR                 :0x2
18:12:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:37: FILE_FORMAT_GRP                               :0x0
18:12:37: COPY flag                                     :0x1
18:12:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:37: File_Format                                   :0x0
18:12:37: CRC                                           :0x0
18:12:37: ####CSD Registe Values####  

18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37390>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 1630 ] 
18:12:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA570>, <py_sfcl.CommandDataDefinition object at 0x05E37690>) , Command count = 1631 ] 
18:12:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:37: [ SetBusWidth(0x4) , Command count = 1632 ] 
18:12:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1633 ] 
18:12:37: Protected Area Size 0x28000
18:12:37: Bus Width           2
18:12:37: Secure Mode         0
18:12:37: Speed  Class        4
18:12:37: Perf Move           0
18:12:37: Au Size             9
18:12:37: Erase Size          15
18:12:37: Erase Timeout       1
18:12:37: Erase offset        1
18:12:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1634 ] 
18:12:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:37: Host Frequency set to 100000 KHz
18:12:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:37: ####CSD Registe 2.0 Values####
18:12:37: CSD_STRUCTURE                                 :0x1
18:12:37: Reserv1                                       :0x0
18:12:37: Time Access 1 TAAC                            :0xe
18:12:37: Time Access 2 NSAC*100                        :0x0
18:12:37: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:37: Card Command Classess CCC                     :0x5b5
18:12:37: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:37: DSR(driver stage register)  DSR_IMP           :0x0
18:12:37: Reserv2                                       :0x0
18:12:37: Device Size C_SIZE                            :0xedc8
18:12:37: Reserv3                                       :0x0
18:12:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:37: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:37: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:37: Reserv4                                       :0x0
18:12:37: Write Speed Factor R2W_FACTOR                 :0x2
18:12:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:37: FILE_FORMAT_GRP                               :0x0
18:12:37: COPY flag                                     :0x1
18:12:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:37: File_Format                                   :0x0
18:12:37: CRC                                           :0x0
18:12:37: ####CSD Registe Values####  

18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E3E900>) , Command count = 1635 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E450>, <py_sfcl.CommandDataDefinition object at 0x05E3E3C0>) , Command count = 1636 ] 
18:12:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EBA0>) , Command count = 1637 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3E930>) , Command count = 1638 ] 
18:12:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E596F0>) , Command count = 1639 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05DAA660>) , Command count = 1640 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4E0>, <py_sfcl.CommandDataDefinition object at 0x05E3EF90>) , Command count = 1641 ] 
18:12:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 1642 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E40>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 1643 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E59180>) , Command count = 1644 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E300>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 1645 ] 
18:12:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E2DB70>) , Command count = 1646 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E3E630>) , Command count = 1647 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EF00>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 1648 ] 
18:12:37: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EEA0>) , Command count = 1649 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA80>, <py_sfcl.CommandDataDefinition object at 0x05E3EFC0>) , Command count = 1650 ] 
18:12:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:37: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:12:37: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:12:37: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:37: [GetSCRRegisterEntry] Passed
18:12:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:37: Data_Status_After Erases          : 0
18:12:37: CPRM Security Support             : No Security
18:12:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:37: Spec. Version                     : Version 3.0X
18:12:37: Extended Security Support         : Extended_Security_Not_Supported
18:12:37: Command Support                   : COMMAND_SUPPORT
18:12:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:37: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:12:37: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:12:37: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:12:37: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:12:37: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:12:37: Perform Power Off and On.
18:12:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1651 ] 
18:12:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8D20>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 1652 ] 
18:12:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E330>, <py_sfcl.CommandDataDefinition object at 0x05E3EA20>) , Command count = 1653 ] 
18:12:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1654 ] 
18:12:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:39: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:42: Host Frequency set to 25000 KHz
18:12:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:42: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E442A0>, 0x0, True) , Command count = 1655 ] 
18:12:42: [GO18_globalSetVolt]### Host voltage value is set.
18:12:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37810>, 0x0, False) , Command count = 1656 ] 
18:12:42: [GO18_globalSetVolt]### Host voltage value is set.
18:12:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1657 ] 
18:12:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1658 ] 
18:12:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1659 ] 
18:12:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA480>, <py_sfcl.CommandDataDefinition object at 0x05E445D0>) , Command count = 1660 ] 
18:12:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440F0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 1661 ] 
18:12:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1662 ] 
18:12:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:42: Host Frequency set to 25000 KHz
18:12:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:42: ####CSD Registe 2.0 Values####
18:12:42: CSD_STRUCTURE                                 :0x1
18:12:42: Reserv1                                       :0x0
18:12:42: Time Access 1 TAAC                            :0xe
18:12:42: Time Access 2 NSAC*100                        :0x0
18:12:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:42: Card Command Classess CCC                     :0x5b5
18:12:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:42: DSR(driver stage register)  DSR_IMP           :0x0
18:12:42: Reserv2                                       :0x0
18:12:42: Device Size C_SIZE                            :0xedc8
18:12:42: Reserv3                                       :0x0
18:12:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:42: Reserv4                                       :0x0
18:12:42: Write Speed Factor R2W_FACTOR                 :0x2
18:12:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:42: FILE_FORMAT_GRP                               :0x0
18:12:42: COPY flag                                     :0x1
18:12:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:42: File_Format                                   :0x0
18:12:42: CRC                                           :0x0
18:12:42: ####CSD Registe Values####  

18:12:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:42: [GetSCRRegisterEntry] Passed
18:12:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:42: Data_Status_After Erases          : 0
18:12:42: CPRM Security Support             : No Security
18:12:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:42: Spec. Version                     : Version 3.0X
18:12:42: Extended Security Support         : Extended_Security_Not_Supported
18:12:42: Command Support                   : COMMAND_SUPPORT
18:12:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E447E0>, <py_sfcl.CommandDataDefinition object at 0x05E3EC30>) , Command count = 1663 ] 
18:12:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E59720>) , Command count = 1664 ] 
18:12:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:42: [ SetBusWidth(0x4) , Command count = 1665 ] 
18:12:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1666 ] 
18:12:42: Protected Area Size 0x28000
18:12:42: Bus Width           2
18:12:42: Secure Mode         0
18:12:42: Speed  Class        4
18:12:42: Perf Move           0
18:12:42: Au Size             9
18:12:42: Erase Size          15
18:12:42: Erase Timeout       1
18:12:42: Erase offset        1
18:12:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1667 ] 
18:12:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:42: Host Frequency set to 100000 KHz
18:12:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:42: ####CSD Registe 2.0 Values####
18:12:42: CSD_STRUCTURE                                 :0x1
18:12:42: Reserv1                                       :0x0
18:12:42: Time Access 1 TAAC                            :0xe
18:12:42: Time Access 2 NSAC*100                        :0x0
18:12:42: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:42: Card Command Classess CCC                     :0x5b5
18:12:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:42: DSR(driver stage register)  DSR_IMP           :0x0
18:12:42: Reserv2                                       :0x0
18:12:42: Device Size C_SIZE                            :0xedc8
18:12:42: Reserv3                                       :0x0
18:12:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:42: Reserv4                                       :0x0
18:12:42: Write Speed Factor R2W_FACTOR                 :0x2
18:12:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:43: FILE_FORMAT_GRP                               :0x0
18:12:43: COPY flag                                     :0x1
18:12:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:43: File_Format                                   :0x0
18:12:43: CRC                                           :0x0
18:12:43: ####CSD Registe Values####  

18:12:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x05E44A50>) , Command count = 1668 ] 
18:12:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E446C0>) , Command count = 1669 ] 
18:12:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:43: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:12:43: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E441B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1670 ] 
18:12:43: Protected Area Size 0x28000
18:12:43: Bus Width           2
18:12:43: Secure Mode         0
18:12:43: Speed  Class        4
18:12:43: Perf Move           0
18:12:43: Au Size             9
18:12:43: Erase Size          15
18:12:43: Erase Timeout       1
18:12:43: Erase offset        1
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:12:43: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1671 ] 
18:12:43: Protected Area Size 0x28000
18:12:43: Bus Width           2
18:12:43: Secure Mode         0
18:12:43: Speed  Class        4
18:12:43: Perf Move           0
18:12:43: Au Size             9
18:12:43: Erase Size          15
18:12:43: Erase Timeout       1
18:12:43: Erase offset        1
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1672 ] 
18:12:43: Protected Area Size 0x28000
18:12:43: Bus Width           2
18:12:43: Secure Mode         0
18:12:43: Speed  Class        4
18:12:43: Perf Move           0
18:12:43: Au Size             9
18:12:43: Erase Size          15
18:12:43: Erase Timeout       1
18:12:43: Erase offset        1
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1673 ] 
18:12:43: Protected Area Size 0x28000
18:12:43: Bus Width           2
18:12:43: Secure Mode         0
18:12:43: Speed  Class        4
18:12:43: Perf Move           0
18:12:43: Au Size             9
18:12:43: Erase Size          15
18:12:43: Erase Timeout       1
18:12:43: Erase offset        1
18:12:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:43: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:12:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:12:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1674 ] 
18:12:44: Protected Area Size 0x28000
18:12:44: Bus Width           2
18:12:44: Secure Mode         0
18:12:44: Speed  Class        4
18:12:44: Perf Move           0
18:12:44: Au Size             9
18:12:44: Erase Size          15
18:12:44: Erase Timeout       1
18:12:44: Erase offset        1
18:12:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:12:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1675 ] 
18:12:44: Protected Area Size 0x28000
18:12:44: Bus Width           2
18:12:44: Secure Mode         0
18:12:44: Speed  Class        4
18:12:44: Perf Move           0
18:12:44: Au Size             9
18:12:44: Erase Size          15
18:12:44: Erase Timeout       1
18:12:44: Erase offset        1
18:12:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:12:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:12:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 14 

18:12:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:12:46: [ HostReset(False) , Command count = 1676 ] 
18:12:46: [ SetSpecialModes(0x5, True) , Command count = 1677 ] 
18:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E44B10>) , Command count = 1678 ] 
18:12:46: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44810>, <py_sfcl.CommandDataDefinition object at 0x05E44360>) , Command count = 1679 ] 
18:12:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05E44570>) , Command count = 1680 ] 
18:12:46: [ GetCardStatus() , Command count = 1681 ] 
18:12:46: ACmd51[ SEND_SCR ] Failed with an exception
18:12:46: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E50900>) , Command count = 1682 ] 
18:12:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D50>, <py_sfcl.CommandDataDefinition object at 0x05E44C00>) , Command count = 1683 ] 
18:12:46: [ GetCardStatus() , Command count = 1684 ] 
18:12:46: ACMD13[ SD_STATUS ] Failed with an exception
18:12:46: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:46: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:12:48: [ HostReset(False) , Command count = 1685 ] 
18:12:48: [ SetSpecialModes(0x5, True) , Command count = 1686 ] 
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E3ED50>) , Command count = 1687 ] 
18:12:48: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E4F510>) , Command count = 1688 ] 
18:12:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E44AE0>) , Command count = 1689 ] 
18:12:48: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44240>, <py_sfcl.CommandDataDefinition object at 0x05E44DB0>) , Command count = 1690 ] 
18:12:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A20>, <py_sfcl.CommandDataDefinition object at 0x05E59270>) , Command count = 1691 ] 
18:12:48: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:12:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E4F4B0>) , Command count = 1692 ] 
18:12:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44E10>, <py_sfcl.CommandDataDefinition object at 0x05E44690>) , Command count = 1693 ] 
18:12:49: [ GetCardStatus() , Command count = 1694 ] 
18:12:49: ACmd51[ SEND_SCR ] Failed with an exception
18:12:49: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C00>, <py_sfcl.CommandDataDefinition object at 0x05E44D50>) , Command count = 1695 ] 
18:12:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 1696 ] 
18:12:49: [ GetCardStatus() , Command count = 1697 ] 
18:12:49: ACMD13[ SD_STATUS ] Failed with an exception
18:12:49: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:49: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:12:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1698 ] 
18:12:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1699 ] 
18:12:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E44E10>) , Command count = 1700 ] 
18:12:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:51: [GetSCRRegisterEntry] Failed
18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:12:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1701 ] 
18:12:51: [ GetCardStatus() , Command count = 1702 ] 
18:12:51: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:12:51: [DVTCommonLib]### Exception_Details :Time out error on card response
18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 1703 ] 
18:12:51: [ GetCardStatus() , Command count = 1704 ] 
18:12:51: CMD55[ APP_CMD ] Failed with an exception
18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E060>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 1705 ] 
18:12:51: [ GetCardStatus() , Command count = 1706 ] 
18:12:51: ACmd51[ SEND_SCR ] Failed with an exception
18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F960>) , Command count = 1707 ] 
18:12:51: [ GetCardStatus() , Command count = 1708 ] 
18:12:51: CMD55[ APP_CMD ] Failed with an exception
18:12:51: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:12:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5D0>, <py_sfcl.CommandDataDefinition object at 0x05E4FB40>) , Command count = 1709 ] 
18:12:52: [ GetCardStatus() , Command count = 1710 ] 
18:12:52: ACMD13[ SD_STATUS ] Failed with an exception
18:12:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:12:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:12:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1711 ] 
18:12:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1712 ] 
18:12:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF00>, <py_sfcl.CommandDataDefinition object at 0x05E4F960>) , Command count = 1713 ] 
18:12:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 1714 ] 
18:12:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1715 ] 
18:12:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E4F9C0>) , Command count = 1716 ] 
18:12:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:54: [GetSCRRegisterEntry] Passed
18:12:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:54: Data_Status_After Erases          : 0
18:12:54: CPRM Security Support             : No Security
18:12:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:54: Spec. Version                     : Version 3.0X
18:12:54: Extended Security Support         : Extended_Security_Not_Supported
18:12:54: Command Support                   : COMMAND_SUPPORT
18:12:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1717 ] 
18:12:54: Protected Area Size 0x28000
18:12:54: Bus Width           0
18:12:54: Secure Mode         0
18:12:54: Speed  Class        4
18:12:54: Perf Move           0
18:12:54: Au Size             9
18:12:54: Erase Size          15
18:12:54: Erase Timeout       1
18:12:54: Erase offset        1
18:12:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:54: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:12:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1718 ] 
18:12:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1719 ] 
18:12:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50420>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 1720 ] 
18:12:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E4FDE0>) , Command count = 1721 ] 
18:12:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1722 ] 
18:12:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 1723 ] 
18:12:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50480>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 1724 ] 
18:12:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:12:56: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:12:56: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:12:56: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:12:56: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:12:56: Perform Power Off and On.
18:12:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1725 ] 
18:12:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50630>, <py_sfcl.CommandDataDefinition object at 0x05E50210>) , Command count = 1726 ] 
18:12:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F570>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 1727 ] 
18:12:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1728 ] 
18:12:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:59: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:01: Host Frequency set to 25000 KHz
18:13:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:01: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E150>, 0x0, True) , Command count = 1729 ] 
18:13:01: [GO18_globalSetVolt]### Host voltage value is set.
18:13:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F690>, 0x0, False) , Command count = 1730 ] 
18:13:01: [GO18_globalSetVolt]### Host voltage value is set.
18:13:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1731 ] 
18:13:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1732 ] 
18:13:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1733 ] 
18:13:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EBD0>, <py_sfcl.CommandDataDefinition object at 0x05E501B0>) , Command count = 1734 ] 
18:13:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 1735 ] 
18:13:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1736 ] 
18:13:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:01: Host Frequency set to 25000 KHz
18:13:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:01: ####CSD Registe 2.0 Values####
18:13:01: CSD_STRUCTURE                                 :0x1
18:13:01: Reserv1                                       :0x0
18:13:01: Time Access 1 TAAC                            :0xe
18:13:01: Time Access 2 NSAC*100                        :0x0
18:13:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:01: Card Command Classess CCC                     :0x5b5
18:13:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:01: DSR(driver stage register)  DSR_IMP           :0x0
18:13:01: Reserv2                                       :0x0
18:13:01: Device Size C_SIZE                            :0xedc8
18:13:01: Reserv3                                       :0x0
18:13:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:01: Reserv4                                       :0x0
18:13:01: Write Speed Factor R2W_FACTOR                 :0x2
18:13:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:01: FILE_FORMAT_GRP                               :0x0
18:13:01: COPY flag                                     :0x1
18:13:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:01: File_Format                                   :0x0
18:13:01: CRC                                           :0x0
18:13:01: ####CSD Registe Values####  

18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:01: [GetSCRRegisterEntry] Passed
18:13:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:01: Data_Status_After Erases          : 0
18:13:01: CPRM Security Support             : No Security
18:13:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:01: Spec. Version                     : Version 3.0X
18:13:01: Extended Security Support         : Extended_Security_Not_Supported
18:13:01: Command Support                   : COMMAND_SUPPORT
18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50930>, <py_sfcl.CommandDataDefinition object at 0x05E50780>) , Command count = 1737 ] 
18:13:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 1738 ] 
18:13:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:01: [ SetBusWidth(0x4) , Command count = 1739 ] 
18:13:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1740 ] 
18:13:01: Protected Area Size 0x28000
18:13:01: Bus Width           2
18:13:01: Secure Mode         0
18:13:01: Speed  Class        4
18:13:01: Perf Move           0
18:13:01: Au Size             9
18:13:01: Erase Size          15
18:13:01: Erase Timeout       1
18:13:01: Erase offset        1
18:13:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1741 ] 
18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:01: Host Frequency set to 100000 KHz
18:13:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:01: ####CSD Registe 2.0 Values####
18:13:01: CSD_STRUCTURE                                 :0x1
18:13:01: Reserv1                                       :0x0
18:13:01: Time Access 1 TAAC                            :0xe
18:13:01: Time Access 2 NSAC*100                        :0x0
18:13:01: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:01: Card Command Classess CCC                     :0x5b5
18:13:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:01: DSR(driver stage register)  DSR_IMP           :0x0
18:13:01: Reserv2                                       :0x0
18:13:01: Device Size C_SIZE                            :0xedc8
18:13:01: Reserv3                                       :0x0
18:13:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:01: Reserv4                                       :0x0
18:13:01: Write Speed Factor R2W_FACTOR                 :0x2
18:13:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:01: FILE_FORMAT_GRP                               :0x0
18:13:01: COPY flag                                     :0x1
18:13:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:01: File_Format                                   :0x0
18:13:01: CRC                                           :0x0
18:13:01: ####CSD Registe Values####  

18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505D0>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 1742 ] 
18:13:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CC0>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 1743 ] 
18:13:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:13:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:01: [GetSCRRegisterEntry] Passed
18:13:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:01: Data_Status_After Erases          : 0
18:13:01: CPRM Security Support             : No Security
18:13:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:01: Spec. Version                     : Version 3.0X
18:13:01: Extended Security Support         : Extended_Security_Not_Supported
18:13:01: Command Support                   : COMMAND_SUPPORT
18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:01: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:13:01: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:13:01: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:01: [GetSCRRegisterEntry] Passed
18:13:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:01: Data_Status_After Erases          : 0
18:13:01: CPRM Security Support             : No Security
18:13:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:01: Spec. Version                     : Version 3.0X
18:13:01: Extended Security Support         : Extended_Security_Not_Supported
18:13:01: Command Support                   : COMMAND_SUPPORT
18:13:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:01: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:01: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1744 ] 
18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:13:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:01: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:03: Host Frequency set to 25000 KHz
18:13:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:03: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E503C0>, 0x0, True) , Command count = 1745 ] 
18:13:03: [GO18_globalSetVolt]### Host voltage value is set.
18:13:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EAE0>, 0x0, False) , Command count = 1746 ] 
18:13:03: [GO18_globalSetVolt]### Host voltage value is set.
18:13:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1747 ] 
18:13:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1748 ] 
18:13:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1749 ] 
18:13:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E50C90>) , Command count = 1750 ] 
18:13:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF30>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 1751 ] 
18:13:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1752 ] 
18:13:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:04: Host Frequency set to 25000 KHz
18:13:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:04: ####CSD Registe 2.0 Values####
18:13:04: CSD_STRUCTURE                                 :0x1
18:13:04: Reserv1                                       :0x0
18:13:04: Time Access 1 TAAC                            :0xe
18:13:04: Time Access 2 NSAC*100                        :0x0
18:13:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:04: Card Command Classess CCC                     :0x5b5
18:13:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:04: DSR(driver stage register)  DSR_IMP           :0x0
18:13:04: Reserv2                                       :0x0
18:13:04: Device Size C_SIZE                            :0xedc8
18:13:04: Reserv3                                       :0x0
18:13:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:04: Reserv4                                       :0x0
18:13:04: Write Speed Factor R2W_FACTOR                 :0x2
18:13:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:04: FILE_FORMAT_GRP                               :0x0
18:13:04: COPY flag                                     :0x1
18:13:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:04: File_Format                                   :0x0
18:13:04: CRC                                           :0x0
18:13:04: ####CSD Registe Values####  

18:13:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:04: [GetSCRRegisterEntry] Passed
18:13:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:04: Data_Status_After Erases          : 0
18:13:04: CPRM Security Support             : No Security
18:13:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:04: Spec. Version                     : Version 3.0X
18:13:04: Extended Security Support         : Extended_Security_Not_Supported
18:13:04: Command Support                   : COMMAND_SUPPORT
18:13:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50A80>, <py_sfcl.CommandDataDefinition object at 0x05E50C60>) , Command count = 1753 ] 
18:13:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44510>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 1754 ] 
18:13:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:04: [ SetBusWidth(0x4) , Command count = 1755 ] 
18:13:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1756 ] 
18:13:04: Protected Area Size 0x28000
18:13:04: Bus Width           2
18:13:04: Secure Mode         0
18:13:04: Speed  Class        4
18:13:04: Perf Move           0
18:13:04: Au Size             9
18:13:04: Erase Size          15
18:13:04: Erase Timeout       1
18:13:04: Erase offset        1
18:13:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1757 ] 
18:13:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:04: Host Frequency set to 100000 KHz
18:13:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:04: ####CSD Registe 2.0 Values####
18:13:04: CSD_STRUCTURE                                 :0x1
18:13:04: Reserv1                                       :0x0
18:13:04: Time Access 1 TAAC                            :0xe
18:13:04: Time Access 2 NSAC*100                        :0x0
18:13:04: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:04: Card Command Classess CCC                     :0x5b5
18:13:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:04: DSR(driver stage register)  DSR_IMP           :0x0
18:13:04: Reserv2                                       :0x0
18:13:04: Device Size C_SIZE                            :0xedc8
18:13:04: Reserv3                                       :0x0
18:13:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:04: Reserv4                                       :0x0
18:13:04: Write Speed Factor R2W_FACTOR                 :0x2
18:13:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:05: FILE_FORMAT_GRP                               :0x0
18:13:05: COPY flag                                     :0x1
18:13:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:05: File_Format                                   :0x0
18:13:05: CRC                                           :0x0
18:13:05: ####CSD Registe Values####  

18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502A0>, <py_sfcl.CommandDataDefinition object at 0x05E500F0>) , Command count = 1758 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55300>, <py_sfcl.CommandDataDefinition object at 0x05E509C0>) , Command count = 1759 ] 
18:13:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550F0>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 1760 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C30>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 1761 ] 
18:13:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FE70>, <py_sfcl.CommandDataDefinition object at 0x05E59870>) , Command count = 1762 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E4F2D0>) , Command count = 1763 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50360>, <py_sfcl.CommandDataDefinition object at 0x05E50720>) , Command count = 1764 ] 
18:13:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E50EA0>) , Command count = 1765 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E55450>) , Command count = 1766 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C00>, <py_sfcl.CommandDataDefinition object at 0x05E509F0>) , Command count = 1767 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50060>, <py_sfcl.CommandDataDefinition object at 0x05E50BD0>) , Command count = 1768 ] 
18:13:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 1769 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550C0>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 1770 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59780>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 1771 ] 
18:13:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x052782D0>) , Command count = 1772 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50DB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F3C0>) , Command count = 1773 ] 
18:13:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:05: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:13:05: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:13:05: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:05: [GetSCRRegisterEntry] Passed
18:13:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:05: Data_Status_After Erases          : 0
18:13:05: CPRM Security Support             : No Security
18:13:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:05: Spec. Version                     : Version 3.0X
18:13:05: Extended Security Support         : Extended_Security_Not_Supported
18:13:05: Command Support                   : COMMAND_SUPPORT
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:05: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:05: [GetSCRRegisterEntry] Passed
18:13:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:05: Data_Status_After Erases          : 0
18:13:05: CPRM Security Support             : No Security
18:13:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:05: Spec. Version                     : Version 3.0X
18:13:05: Extended Security Support         : Extended_Security_Not_Supported
18:13:05: Command Support                   : COMMAND_SUPPORT
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:05: [GetSCRRegisterEntry] Passed
18:13:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:05: Data_Status_After Erases          : 0
18:13:05: CPRM Security Support             : No Security
18:13:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:05: Spec. Version                     : Version 3.0X
18:13:05: Extended Security Support         : Extended_Security_Not_Supported
18:13:05: Command Support                   : COMMAND_SUPPORT
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:05: [GetSCRRegisterEntry] Passed
18:13:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:05: Data_Status_After Erases          : 0
18:13:05: CPRM Security Support             : No Security
18:13:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:05: Spec. Version                     : Version 3.0X
18:13:05: Extended Security Support         : Extended_Security_Not_Supported
18:13:05: Command Support                   : COMMAND_SUPPORT
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:05: [GetSCRRegisterEntry] Passed
18:13:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:05: Data_Status_After Erases          : 0
18:13:05: CPRM Security Support             : No Security
18:13:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:05: Spec. Version                     : Version 3.0X
18:13:05: Extended Security Support         : Extended_Security_Not_Supported
18:13:05: Command Support                   : COMMAND_SUPPORT
18:13:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:05: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:13:05: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:13:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:13:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:13:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:13:05: Perform Power Off and On.
18:13:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1774 ] 
18:13:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:13:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F810>) , Command count = 1775 ] 
18:13:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E551E0>, <py_sfcl.CommandDataDefinition object at 0x052BB570>) , Command count = 1776 ] 
18:13:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:13:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1777 ] 
18:13:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:08: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:10: Host Frequency set to 25000 KHz
18:13:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:10: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E555D0>, 0x0, True) , Command count = 1778 ] 
18:13:10: [GO18_globalSetVolt]### Host voltage value is set.
18:13:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55060>, 0x0, False) , Command count = 1779 ] 
18:13:10: [GO18_globalSetVolt]### Host voltage value is set.
18:13:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1780 ] 
18:13:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1781 ] 
18:13:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1782 ] 
18:13:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB70>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 1783 ] 
18:13:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 1784 ] 
18:13:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1785 ] 
18:13:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:10: Host Frequency set to 25000 KHz
18:13:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:10: ####CSD Registe 2.0 Values####
18:13:10: CSD_STRUCTURE                                 :0x1
18:13:10: Reserv1                                       :0x0
18:13:10: Time Access 1 TAAC                            :0xe
18:13:10: Time Access 2 NSAC*100                        :0x0
18:13:10: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:10: Card Command Classess CCC                     :0x5b5
18:13:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:10: DSR(driver stage register)  DSR_IMP           :0x0
18:13:10: Reserv2                                       :0x0
18:13:10: Device Size C_SIZE                            :0xedc8
18:13:10: Reserv3                                       :0x0
18:13:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:10: Reserv4                                       :0x0
18:13:10: Write Speed Factor R2W_FACTOR                 :0x2
18:13:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:10: FILE_FORMAT_GRP                               :0x0
18:13:10: COPY flag                                     :0x1
18:13:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:10: File_Format                                   :0x0
18:13:10: CRC                                           :0x0
18:13:10: ####CSD Registe Values####  

18:13:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:10: [GetSCRRegisterEntry] Passed
18:13:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:10: Data_Status_After Erases          : 0
18:13:10: CPRM Security Support             : No Security
18:13:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:10: Spec. Version                     : Version 3.0X
18:13:10: Extended Security Support         : Extended_Security_Not_Supported
18:13:10: Command Support                   : COMMAND_SUPPORT
18:13:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E597E0>) , Command count = 1786 ] 
18:13:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55330>, <py_sfcl.CommandDataDefinition object at 0x05E59450>) , Command count = 1787 ] 
18:13:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:10: [ SetBusWidth(0x4) , Command count = 1788 ] 
18:13:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E554E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1789 ] 
18:13:10: Protected Area Size 0x28000
18:13:10: Bus Width           2
18:13:10: Secure Mode         0
18:13:10: Speed  Class        4
18:13:10: Perf Move           0
18:13:10: Au Size             9
18:13:10: Erase Size          15
18:13:10: Erase Timeout       1
18:13:10: Erase offset        1
18:13:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1790 ] 
18:13:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:10: Host Frequency set to 100000 KHz
18:13:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:10: ####CSD Registe 2.0 Values####
18:13:10: CSD_STRUCTURE                                 :0x1
18:13:10: Reserv1                                       :0x0
18:13:10: Time Access 1 TAAC                            :0xe
18:13:10: Time Access 2 NSAC*100                        :0x0
18:13:10: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:10: Card Command Classess CCC                     :0x5b5
18:13:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:10: DSR(driver stage register)  DSR_IMP           :0x0
18:13:10: Reserv2                                       :0x0
18:13:10: Device Size C_SIZE                            :0xedc8
18:13:10: Reserv3                                       :0x0
18:13:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:11: Reserv4                                       :0x0
18:13:11: Write Speed Factor R2W_FACTOR                 :0x2
18:13:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:11: FILE_FORMAT_GRP                               :0x0
18:13:11: COPY flag                                     :0x1
18:13:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:11: File_Format                                   :0x0
18:13:11: CRC                                           :0x0
18:13:11: ####CSD Registe Values####  

18:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 1791 ] 
18:13:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AB0>, <py_sfcl.CommandDataDefinition object at 0x05E55840>) , Command count = 1792 ] 
18:13:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:11: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:13:11: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1793 ] 
18:13:11: Protected Area Size 0x28000
18:13:11: Bus Width           2
18:13:11: Secure Mode         0
18:13:11: Speed  Class        4
18:13:11: Perf Move           0
18:13:11: Au Size             9
18:13:11: Erase Size          15
18:13:11: Erase Timeout       1
18:13:11: Erase offset        1
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:13:11: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E559F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1794 ] 
18:13:11: Protected Area Size 0x28000
18:13:11: Bus Width           2
18:13:11: Secure Mode         0
18:13:11: Speed  Class        4
18:13:11: Perf Move           0
18:13:11: Au Size             9
18:13:11: Erase Size          15
18:13:11: Erase Timeout       1
18:13:11: Erase offset        1
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05192180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1795 ] 
18:13:11: Protected Area Size 0x28000
18:13:11: Bus Width           2
18:13:11: Secure Mode         0
18:13:11: Speed  Class        4
18:13:11: Perf Move           0
18:13:11: Au Size             9
18:13:11: Erase Size          15
18:13:11: Erase Timeout       1
18:13:11: Erase offset        1
18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:13:11: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:13:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E558D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1796 ] 
18:13:11: Protected Area Size 0x28000
18:13:11: Bus Width           2
18:13:11: Secure Mode         0
18:13:12: Speed  Class        4
18:13:12: Perf Move           0
18:13:12: Au Size             9
18:13:12: Erase Size          15
18:13:12: Erase Timeout       1
18:13:12: Erase offset        1
18:13:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:13:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:13:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1797 ] 
18:13:12: Protected Area Size 0x28000
18:13:12: Bus Width           2
18:13:12: Secure Mode         0
18:13:12: Speed  Class        4
18:13:12: Perf Move           0
18:13:12: Au Size             9
18:13:12: Erase Size          15
18:13:12: Erase Timeout       1
18:13:12: Erase offset        1
18:13:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:13:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E558D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1798 ] 
18:13:12: Protected Area Size 0x28000
18:13:12: Bus Width           2
18:13:12: Secure Mode         0
18:13:12: Speed  Class        4
18:13:12: Perf Move           0
18:13:12: Au Size             9
18:13:12: Erase Size          15
18:13:12: Erase Timeout       1
18:13:12: Erase offset        1
18:13:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:13:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:13:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 13 

18:13:12: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:13:14: [ HostReset(False) , Command count = 1799 ] 
18:13:14: [ SetSpecialModes(0x5, True) , Command count = 1800 ] 
18:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E55BD0>) , Command count = 1801 ] 
18:13:14: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 1802 ] 
18:13:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E55C90>) , Command count = 1803 ] 
18:13:14: [ GetCardStatus() , Command count = 1804 ] 
18:13:14: ACmd51[ SEND_SCR ] Failed with an exception
18:13:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 1805 ] 
18:13:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C00>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 1806 ] 
18:13:14: [ GetCardStatus() , Command count = 1807 ] 
18:13:14: ACMD13[ SD_STATUS ] Failed with an exception
18:13:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:13:17: [ HostReset(False) , Command count = 1808 ] 
18:13:17: [ SetSpecialModes(0x5, True) , Command count = 1809 ] 
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05270930>) , Command count = 1810 ] 
18:13:17: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05E3E2A0>) , Command count = 1811 ] 
18:13:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55D80>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 1812 ] 
18:13:17: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E59210>) , Command count = 1813 ] 
18:13:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2AC60>, <py_sfcl.CommandDataDefinition object at 0x05E59990>) , Command count = 1814 ] 
18:13:17: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E551B0>, <py_sfcl.CommandDataDefinition object at 0x05E55F00>) , Command count = 1815 ] 
18:13:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x052CDB40>) , Command count = 1816 ] 
18:13:17: [ GetCardStatus() , Command count = 1817 ] 
18:13:17: ACmd51[ SEND_SCR ] Failed with an exception
18:13:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50150>, <py_sfcl.CommandDataDefinition object at 0x05DB8C60>) , Command count = 1818 ] 
18:13:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05E55C30>) , Command count = 1819 ] 
18:13:17: [ GetCardStatus() , Command count = 1820 ] 
18:13:17: ACMD13[ SD_STATUS ] Failed with an exception
18:13:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:13:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1821 ] 
18:13:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1822 ] 
18:13:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB40>, <py_sfcl.CommandDataDefinition object at 0x05E44F30>) , Command count = 1823 ] 
18:13:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:19: [GetSCRRegisterEntry] Failed
18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:13:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1824 ] 
18:13:19: [ GetCardStatus() , Command count = 1825 ] 
18:13:19: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:13:19: [DVTCommonLib]### Exception_Details :Time out error on card response
18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x052B9DE0>) , Command count = 1826 ] 
18:13:19: [ GetCardStatus() , Command count = 1827 ] 
18:13:19: CMD55[ APP_CMD ] Failed with an exception
18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50750>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 1828 ] 
18:13:19: [ GetCardStatus() , Command count = 1829 ] 
18:13:19: ACmd51[ SEND_SCR ] Failed with an exception
18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052B9DE0>, <py_sfcl.CommandDataDefinition object at 0x052CD0F0>) , Command count = 1830 ] 
18:13:19: [ GetCardStatus() , Command count = 1831 ] 
18:13:19: CMD55[ APP_CMD ] Failed with an exception
18:13:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA80>, <py_sfcl.CommandDataDefinition object at 0x05E2D780>) , Command count = 1832 ] 
18:13:20: [ GetCardStatus() , Command count = 1833 ] 
18:13:20: ACMD13[ SD_STATUS ] Failed with an exception
18:13:20: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:20: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:13:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1834 ] 
18:13:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1835 ] 
18:13:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA120>, <py_sfcl.CommandDataDefinition object at 0x052B9DE0>) , Command count = 1836 ] 
18:13:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05E2D810>) , Command count = 1837 ] 
18:13:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1838 ] 
18:13:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDE10>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 1839 ] 
18:13:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:22: [GetSCRRegisterEntry] Passed
18:13:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:22: Data_Status_After Erases          : 0
18:13:22: CPRM Security Support             : No Security
18:13:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:22: Spec. Version                     : Version 3.0X
18:13:22: Extended Security Support         : Extended_Security_Not_Supported
18:13:22: Command Support                   : COMMAND_SUPPORT
18:13:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1840 ] 
18:13:22: Protected Area Size 0x28000
18:13:22: Bus Width           0
18:13:22: Secure Mode         0
18:13:22: Speed  Class        4
18:13:22: Perf Move           0
18:13:22: Au Size             9
18:13:22: Erase Size          15
18:13:22: Erase Timeout       1
18:13:22: Erase offset        1
18:13:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:13:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1841 ] 
18:13:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1842 ] 
18:13:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D1B0>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 1843 ] 
18:13:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 1844 ] 
18:13:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1845 ] 
18:13:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 1846 ] 
18:13:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E59660>) , Command count = 1847 ] 
18:13:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:24: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:13:24: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:13:24: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:13:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:13:24: Perform Power Off and On.
18:13:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1848 ] 
18:13:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:13:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E2DBD0>) , Command count = 1849 ] 
18:13:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E37AE0>) , Command count = 1850 ] 
18:13:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:13:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1851 ] 
18:13:27: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:27: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:29: Host Frequency set to 25000 KHz
18:13:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:29: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF00>, 0x0, True) , Command count = 1852 ] 
18:13:29: [GO18_globalSetVolt]### Host voltage value is set.
18:13:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D840>, 0x0, False) , Command count = 1853 ] 
18:13:29: [GO18_globalSetVolt]### Host voltage value is set.
18:13:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1854 ] 
18:13:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1855 ] 
18:13:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1856 ] 
18:13:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55210>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 1857 ] 
18:13:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E376C0>, <py_sfcl.CommandDataDefinition object at 0x05E37A50>) , Command count = 1858 ] 
18:13:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1859 ] 
18:13:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:29: Host Frequency set to 25000 KHz
18:13:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:29: ####CSD Registe 2.0 Values####
18:13:29: CSD_STRUCTURE                                 :0x1
18:13:29: Reserv1                                       :0x0
18:13:29: Time Access 1 TAAC                            :0xe
18:13:29: Time Access 2 NSAC*100                        :0x0
18:13:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:29: Card Command Classess CCC                     :0x5b5
18:13:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:29: DSR(driver stage register)  DSR_IMP           :0x0
18:13:29: Reserv2                                       :0x0
18:13:29: Device Size C_SIZE                            :0xedc8
18:13:29: Reserv3                                       :0x0
18:13:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:29: Reserv4                                       :0x0
18:13:29: Write Speed Factor R2W_FACTOR                 :0x2
18:13:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:29: FILE_FORMAT_GRP                               :0x0
18:13:29: COPY flag                                     :0x1
18:13:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:29: File_Format                                   :0x0
18:13:29: CRC                                           :0x0
18:13:29: ####CSD Registe Values####  

18:13:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:29: [GetSCRRegisterEntry] Passed
18:13:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:29: Data_Status_After Erases          : 0
18:13:29: CPRM Security Support             : No Security
18:13:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:29: Spec. Version                     : Version 3.0X
18:13:29: Extended Security Support         : Extended_Security_Not_Supported
18:13:29: Command Support                   : COMMAND_SUPPORT
18:13:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37600>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 1860 ] 
18:13:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E59420>) , Command count = 1861 ] 
18:13:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:29: [ SetBusWidth(0x4) , Command count = 1862 ] 
18:13:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1863 ] 
18:13:29: Protected Area Size 0x28000
18:13:29: Bus Width           2
18:13:29: Secure Mode         0
18:13:29: Speed  Class        4
18:13:29: Perf Move           0
18:13:29: Au Size             9
18:13:29: Erase Size          15
18:13:29: Erase Timeout       1
18:13:29: Erase offset        1
18:13:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1864 ] 
18:13:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:29: Host Frequency set to 100000 KHz
18:13:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:29: ####CSD Registe 2.0 Values####
18:13:29: CSD_STRUCTURE                                 :0x1
18:13:29: Reserv1                                       :0x0
18:13:29: Time Access 1 TAAC                            :0xe
18:13:29: Time Access 2 NSAC*100                        :0x0
18:13:29: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:29: Card Command Classess CCC                     :0x5b5
18:13:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:30: DSR(driver stage register)  DSR_IMP           :0x0
18:13:30: Reserv2                                       :0x0
18:13:30: Device Size C_SIZE                            :0xedc8
18:13:30: Reserv3                                       :0x0
18:13:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:30: Reserv4                                       :0x0
18:13:30: Write Speed Factor R2W_FACTOR                 :0x2
18:13:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:30: FILE_FORMAT_GRP                               :0x0
18:13:30: COPY flag                                     :0x1
18:13:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:30: File_Format                                   :0x0
18:13:30: CRC                                           :0x0
18:13:30: ####CSD Registe Values####  

18:13:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF00>, <py_sfcl.CommandDataDefinition object at 0x05E3E390>) , Command count = 1865 ] 
18:13:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37750>, <py_sfcl.CommandDataDefinition object at 0x05E37DB0>) , Command count = 1866 ] 
18:13:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:13:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:13:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:30: [GetSCRRegisterEntry] Passed
18:13:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:30: Data_Status_After Erases          : 0
18:13:30: CPRM Security Support             : No Security
18:13:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:30: Spec. Version                     : Version 3.0X
18:13:30: Extended Security Support         : Extended_Security_Not_Supported
18:13:30: Command Support                   : COMMAND_SUPPORT
18:13:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:30: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:13:30: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:13:30: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:13:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:30: [GetSCRRegisterEntry] Passed
18:13:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:30: Data_Status_After Erases          : 0
18:13:30: CPRM Security Support             : No Security
18:13:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:30: Spec. Version                     : Version 3.0X
18:13:30: Extended Security Support         : Extended_Security_Not_Supported
18:13:30: Command Support                   : COMMAND_SUPPORT
18:13:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:31: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:13:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:31: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1867 ] 
18:13:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:13:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:31: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:33: Host Frequency set to 25000 KHz
18:13:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:33: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDF30>, 0x0, True) , Command count = 1868 ] 
18:13:33: [GO18_globalSetVolt]### Host voltage value is set.
18:13:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A090>, 0x0, False) , Command count = 1869 ] 
18:13:33: [GO18_globalSetVolt]### Host voltage value is set.
18:13:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1870 ] 
18:13:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1871 ] 
18:13:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1872 ] 
18:13:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37300>, <py_sfcl.CommandDataDefinition object at 0x05E372D0>) , Command count = 1873 ] 
18:13:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A80>, <py_sfcl.CommandDataDefinition object at 0x05E37660>) , Command count = 1874 ] 
18:13:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1875 ] 
18:13:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:33: Host Frequency set to 25000 KHz
18:13:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:33: ####CSD Registe 2.0 Values####
18:13:33: CSD_STRUCTURE                                 :0x1
18:13:33: Reserv1                                       :0x0
18:13:33: Time Access 1 TAAC                            :0xe
18:13:33: Time Access 2 NSAC*100                        :0x0
18:13:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:33: Card Command Classess CCC                     :0x5b5
18:13:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:33: DSR(driver stage register)  DSR_IMP           :0x0
18:13:33: Reserv2                                       :0x0
18:13:33: Device Size C_SIZE                            :0xedc8
18:13:33: Reserv3                                       :0x0
18:13:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:33: Reserv4                                       :0x0
18:13:33: Write Speed Factor R2W_FACTOR                 :0x2
18:13:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:33: FILE_FORMAT_GRP                               :0x0
18:13:33: COPY flag                                     :0x1
18:13:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:33: File_Format                                   :0x0
18:13:33: CRC                                           :0x0
18:13:33: ####CSD Registe Values####  

18:13:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:33: [GetSCRRegisterEntry] Passed
18:13:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:33: Data_Status_After Erases          : 0
18:13:33: CPRM Security Support             : No Security
18:13:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:33: Spec. Version                     : Version 3.0X
18:13:33: Extended Security Support         : Extended_Security_Not_Supported
18:13:33: Command Support                   : COMMAND_SUPPORT
18:13:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 1876 ] 
18:13:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A180>, <py_sfcl.CommandDataDefinition object at 0x05E2D840>) , Command count = 1877 ] 
18:13:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:33: [ SetBusWidth(0x4) , Command count = 1878 ] 
18:13:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1879 ] 
18:13:33: Protected Area Size 0x28000
18:13:33: Bus Width           2
18:13:33: Secure Mode         0
18:13:33: Speed  Class        4
18:13:33: Perf Move           0
18:13:33: Au Size             9
18:13:33: Erase Size          15
18:13:33: Erase Timeout       1
18:13:33: Erase offset        1
18:13:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1880 ] 
18:13:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:33: Host Frequency set to 100000 KHz
18:13:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:33: ####CSD Registe 2.0 Values####
18:13:33: CSD_STRUCTURE                                 :0x1
18:13:34: Reserv1                                       :0x0
18:13:34: Time Access 1 TAAC                            :0xe
18:13:34: Time Access 2 NSAC*100                        :0x0
18:13:34: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:34: Card Command Classess CCC                     :0x5b5
18:13:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:34: DSR(driver stage register)  DSR_IMP           :0x0
18:13:34: Reserv2                                       :0x0
18:13:34: Device Size C_SIZE                            :0xedc8
18:13:34: Reserv3                                       :0x0
18:13:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:34: Reserv4                                       :0x0
18:13:34: Write Speed Factor R2W_FACTOR                 :0x2
18:13:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:34: FILE_FORMAT_GRP                               :0x0
18:13:34: COPY flag                                     :0x1
18:13:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:34: File_Format                                   :0x0
18:13:34: CRC                                           :0x0
18:13:34: ####CSD Registe Values####  

18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D5D0>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 1881 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37390>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 1882 ] 
18:13:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F9F0>) , Command count = 1883 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 1884 ] 
18:13:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 1885 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B10>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 1886 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E900>, <py_sfcl.CommandDataDefinition object at 0x05E3E090>) , Command count = 1887 ] 
18:13:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E450>, <py_sfcl.CommandDataDefinition object at 0x05E3E3C0>) , Command count = 1888 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 1889 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3E930>) , Command count = 1890 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2D0>, <py_sfcl.CommandDataDefinition object at 0x05E3E4B0>) , Command count = 1891 ] 
18:13:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05DAA660>) , Command count = 1892 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 1893 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E840>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 1894 ] 
18:13:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E40>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 1895 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE70>) , Command count = 1896 ] 
18:13:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:34: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:13:34: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:13:34: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:34: [GetSCRRegisterEntry] Passed
18:13:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:34: Data_Status_After Erases          : 0
18:13:34: CPRM Security Support             : No Security
18:13:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:34: Spec. Version                     : Version 3.0X
18:13:34: Extended Security Support         : Extended_Security_Not_Supported
18:13:34: Command Support                   : COMMAND_SUPPORT
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:34: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:34: [GetSCRRegisterEntry] Passed
18:13:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:34: Data_Status_After Erases          : 0
18:13:34: CPRM Security Support             : No Security
18:13:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:34: Spec. Version                     : Version 3.0X
18:13:34: Extended Security Support         : Extended_Security_Not_Supported
18:13:34: Command Support                   : COMMAND_SUPPORT
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:34: [GetSCRRegisterEntry] Passed
18:13:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:34: Data_Status_After Erases          : 0
18:13:34: CPRM Security Support             : No Security
18:13:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:34: Spec. Version                     : Version 3.0X
18:13:34: Extended Security Support         : Extended_Security_Not_Supported
18:13:34: Command Support                   : COMMAND_SUPPORT
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:34: [GetSCRRegisterEntry] Passed
18:13:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:34: Data_Status_After Erases          : 0
18:13:34: CPRM Security Support             : No Security
18:13:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:34: Spec. Version                     : Version 3.0X
18:13:34: Extended Security Support         : Extended_Security_Not_Supported
18:13:34: Command Support                   : COMMAND_SUPPORT
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:34: [GetSCRRegisterEntry] Passed
18:13:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:34: Data_Status_After Erases          : 0
18:13:34: CPRM Security Support             : No Security
18:13:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:34: Spec. Version                     : Version 3.0X
18:13:34: Extended Security Support         : Extended_Security_Not_Supported
18:13:34: Command Support                   : COMMAND_SUPPORT
18:13:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:34: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:13:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:13:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:13:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:13:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:13:34: Perform Power Off and On.
18:13:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1897 ] 
18:13:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:13:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E2DB70>) , Command count = 1898 ] 
18:13:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E3E630>) , Command count = 1899 ] 
18:13:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:13:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1900 ] 
18:13:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:37: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:39: Host Frequency set to 25000 KHz
18:13:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:39: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E690>, 0x0, True) , Command count = 1901 ] 
18:13:39: [GO18_globalSetVolt]### Host voltage value is set.
18:13:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E540>, 0x0, False) , Command count = 1902 ] 
18:13:39: [GO18_globalSetVolt]### Host voltage value is set.
18:13:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1903 ] 
18:13:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1904 ] 
18:13:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1905 ] 
18:13:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8A0>, <py_sfcl.CommandDataDefinition object at 0x05E44150>) , Command count = 1906 ] 
18:13:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 1907 ] 
18:13:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1908 ] 
18:13:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:39: Host Frequency set to 25000 KHz
18:13:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:39: ####CSD Registe 2.0 Values####
18:13:39: CSD_STRUCTURE                                 :0x1
18:13:39: Reserv1                                       :0x0
18:13:39: Time Access 1 TAAC                            :0xe
18:13:39: Time Access 2 NSAC*100                        :0x0
18:13:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:39: Card Command Classess CCC                     :0x5b5
18:13:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:39: DSR(driver stage register)  DSR_IMP           :0x0
18:13:39: Reserv2                                       :0x0
18:13:39: Device Size C_SIZE                            :0xedc8
18:13:39: Reserv3                                       :0x0
18:13:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:39: Reserv4                                       :0x0
18:13:39: Write Speed Factor R2W_FACTOR                 :0x2
18:13:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:39: FILE_FORMAT_GRP                               :0x0
18:13:39: COPY flag                                     :0x1
18:13:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:39: File_Format                                   :0x0
18:13:39: CRC                                           :0x0
18:13:39: ####CSD Registe Values####  

18:13:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:39: [GetSCRRegisterEntry] Passed
18:13:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:39: Data_Status_After Erases          : 0
18:13:39: CPRM Security Support             : No Security
18:13:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:39: Spec. Version                     : Version 3.0X
18:13:39: Extended Security Support         : Extended_Security_Not_Supported
18:13:39: Command Support                   : COMMAND_SUPPORT
18:13:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E5D0>) , Command count = 1909 ] 
18:13:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E59420>) , Command count = 1910 ] 
18:13:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:39: [ SetBusWidth(0x4) , Command count = 1911 ] 
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E445D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1912 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1913 ] 
18:13:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:39: Host Frequency set to 100000 KHz
18:13:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:39: ####CSD Registe 2.0 Values####
18:13:39: CSD_STRUCTURE                                 :0x1
18:13:39: Reserv1                                       :0x0
18:13:39: Time Access 1 TAAC                            :0xe
18:13:39: Time Access 2 NSAC*100                        :0x0
18:13:39: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:39: Card Command Classess CCC                     :0x5b5
18:13:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:39: DSR(driver stage register)  DSR_IMP           :0x0
18:13:39: Reserv2                                       :0x0
18:13:39: Device Size C_SIZE                            :0xedc8
18:13:39: Reserv3                                       :0x0
18:13:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:39: Reserv4                                       :0x0
18:13:39: Write Speed Factor R2W_FACTOR                 :0x2
18:13:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:39: FILE_FORMAT_GRP                               :0x0
18:13:39: COPY flag                                     :0x1
18:13:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:39: File_Format                                   :0x0
18:13:39: CRC                                           :0x0
18:13:39: ####CSD Registe Values####  

18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440F0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 1914 ] 
18:13:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E447E0>, <py_sfcl.CommandDataDefinition object at 0x05E3EC30>) , Command count = 1915 ] 
18:13:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:13:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1916 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:13:39: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E448A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1917 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1918 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1919 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1920 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1921 ] 
18:13:39: Protected Area Size 0x28000
18:13:39: Bus Width           2
18:13:39: Secure Mode         0
18:13:39: Speed  Class        4
18:13:39: Perf Move           0
18:13:39: Au Size             9
18:13:39: Erase Size          15
18:13:39: Erase Timeout       1
18:13:39: Erase offset        1
18:13:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:13:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:13:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 12 

18:13:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:13:41: [ HostReset(False) , Command count = 1922 ] 
18:13:41: [ SetSpecialModes(0x5, True) , Command count = 1923 ] 
18:13:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E720>, <py_sfcl.CommandDataDefinition object at 0x05E441B0>) , Command count = 1924 ] 
18:13:41: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:13:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44BD0>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 1925 ] 
18:13:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E44870>) , Command count = 1926 ] 
18:13:42: [ GetCardStatus() , Command count = 1927 ] 
18:13:42: ACmd51[ SEND_SCR ] Failed with an exception
18:13:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 1928 ] 
18:13:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E446C0>) , Command count = 1929 ] 
18:13:42: [ GetCardStatus() , Command count = 1930 ] 
18:13:42: ACMD13[ SD_STATUS ] Failed with an exception
18:13:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:13:44: [ HostReset(False) , Command count = 1931 ] 
18:13:44: [ SetSpecialModes(0x5, True) , Command count = 1932 ] 
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E3EC00>) , Command count = 1933 ] 
18:13:44: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E50900>) , Command count = 1934 ] 
18:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F210>, <py_sfcl.CommandDataDefinition object at 0x05E44CF0>) , Command count = 1935 ] 
18:13:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05E59930>) , Command count = 1936 ] 
18:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E59570>) , Command count = 1937 ] 
18:13:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44270>, <py_sfcl.CommandDataDefinition object at 0x05E44BA0>) , Command count = 1938 ] 
18:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E3ED50>) , Command count = 1939 ] 
18:13:44: [ GetCardStatus() , Command count = 1940 ] 
18:13:44: ACmd51[ SEND_SCR ] Failed with an exception
18:13:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E4F2A0>) , Command count = 1941 ] 
18:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44240>, <py_sfcl.CommandDataDefinition object at 0x05E44DB0>) , Command count = 1942 ] 
18:13:44: [ GetCardStatus() , Command count = 1943 ] 
18:13:44: ACMD13[ SD_STATUS ] Failed with an exception
18:13:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:13:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1944 ] 
18:13:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1945 ] 
18:13:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E3E570>) , Command count = 1946 ] 
18:13:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:47: [GetSCRRegisterEntry] Failed
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:13:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1947 ] 
18:13:47: [ GetCardStatus() , Command count = 1948 ] 
18:13:47: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:13:47: [DVTCommonLib]### Exception_Details :Time out error on card response
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7E0>, <py_sfcl.CommandDataDefinition object at 0x05E37630>) , Command count = 1949 ] 
18:13:47: [ GetCardStatus() , Command count = 1950 ] 
18:13:47: CMD55[ APP_CMD ] Failed with an exception
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E4F720>) , Command count = 1951 ] 
18:13:47: [ GetCardStatus() , Command count = 1952 ] 
18:13:47: ACmd51[ SEND_SCR ] Failed with an exception
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37630>, <py_sfcl.CommandDataDefinition object at 0x05DAA420>) , Command count = 1953 ] 
18:13:47: [ GetCardStatus() , Command count = 1954 ] 
18:13:47: CMD55[ APP_CMD ] Failed with an exception
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 1955 ] 
18:13:47: [ GetCardStatus() , Command count = 1956 ] 
18:13:47: ACMD13[ SD_STATUS ] Failed with an exception
18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:13:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:13:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1957 ] 
18:13:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1958 ] 
18:13:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F480>, <py_sfcl.CommandDataDefinition object at 0x05E4F900>) , Command count = 1959 ] 
18:13:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F780>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 1960 ] 
18:13:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1961 ] 
18:13:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44690>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 1962 ] 
18:13:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:49: [GetSCRRegisterEntry] Passed
18:13:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:49: Data_Status_After Erases          : 0
18:13:49: CPRM Security Support             : No Security
18:13:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:49: Spec. Version                     : Version 3.0X
18:13:49: Extended Security Support         : Extended_Security_Not_Supported
18:13:49: Command Support                   : COMMAND_SUPPORT
18:13:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1963 ] 
18:13:49: Protected Area Size 0x28000
18:13:49: Bus Width           0
18:13:49: Secure Mode         0
18:13:49: Speed  Class        4
18:13:49: Perf Move           0
18:13:49: Au Size             9
18:13:49: Erase Size          15
18:13:49: Erase Timeout       1
18:13:49: Erase offset        1
18:13:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:49: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:13:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1964 ] 
18:13:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1965 ] 
18:13:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC90>, <py_sfcl.CommandDataDefinition object at 0x05E4FD80>) , Command count = 1966 ] 
18:13:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 1967 ] 
18:13:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1968 ] 
18:13:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 1969 ] 
18:13:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F930>, <py_sfcl.CommandDataDefinition object at 0x05E4FBA0>) , Command count = 1970 ] 
18:13:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:13:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:13:52: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:13:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:13:52: Perform Power Off and On.
18:13:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1971 ] 
18:13:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:13:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50420>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 1972 ] 
18:13:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B70>, <py_sfcl.CommandDataDefinition object at 0x05E4F9C0>) , Command count = 1973 ] 
18:13:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:13:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1974 ] 
18:13:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:54: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:56: Host Frequency set to 25000 KHz
18:13:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:56: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E440C0>, 0x0, True) , Command count = 1975 ] 
18:13:56: [GO18_globalSetVolt]### Host voltage value is set.
18:13:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FB10>, 0x0, False) , Command count = 1976 ] 
18:13:56: [GO18_globalSetVolt]### Host voltage value is set.
18:13:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1977 ] 
18:13:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1978 ] 
18:13:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1979 ] 
18:13:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37810>, <py_sfcl.CommandDataDefinition object at 0x05E3E030>) , Command count = 1980 ] 
18:13:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 1981 ] 
18:13:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1982 ] 
18:13:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:57: Host Frequency set to 25000 KHz
18:13:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:57: ####CSD Registe 2.0 Values####
18:13:57: CSD_STRUCTURE                                 :0x1
18:13:57: Reserv1                                       :0x0
18:13:57: Time Access 1 TAAC                            :0xe
18:13:57: Time Access 2 NSAC*100                        :0x0
18:13:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:57: Card Command Classess CCC                     :0x5b5
18:13:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:57: DSR(driver stage register)  DSR_IMP           :0x0
18:13:57: Reserv2                                       :0x0
18:13:57: Device Size C_SIZE                            :0xedc8
18:13:57: Reserv3                                       :0x0
18:13:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:57: Reserv4                                       :0x0
18:13:57: Write Speed Factor R2W_FACTOR                 :0x2
18:13:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:57: FILE_FORMAT_GRP                               :0x0
18:13:57: COPY flag                                     :0x1
18:13:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:57: File_Format                                   :0x0
18:13:57: CRC                                           :0x0
18:13:57: ####CSD Registe Values####  

18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:57: [GetSCRRegisterEntry] Passed
18:13:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:57: Data_Status_After Erases          : 0
18:13:57: CPRM Security Support             : No Security
18:13:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:57: Spec. Version                     : Version 3.0X
18:13:57: Extended Security Support         : Extended_Security_Not_Supported
18:13:57: Command Support                   : COMMAND_SUPPORT
18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F060>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 1983 ] 
18:13:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50990>, <py_sfcl.CommandDataDefinition object at 0x05E592A0>) , Command count = 1984 ] 
18:13:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:57: [ SetBusWidth(0x4) , Command count = 1985 ] 
18:13:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E501B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1986 ] 
18:13:57: Protected Area Size 0x28000
18:13:57: Bus Width           2
18:13:57: Secure Mode         0
18:13:57: Speed  Class        4
18:13:57: Perf Move           0
18:13:57: Au Size             9
18:13:57: Erase Size          15
18:13:57: Erase Timeout       1
18:13:57: Erase offset        1
18:13:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1987 ] 
18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:57: Host Frequency set to 100000 KHz
18:13:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:57: ####CSD Registe 2.0 Values####
18:13:57: CSD_STRUCTURE                                 :0x1
18:13:57: Reserv1                                       :0x0
18:13:57: Time Access 1 TAAC                            :0xe
18:13:57: Time Access 2 NSAC*100                        :0x0
18:13:57: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:57: Card Command Classess CCC                     :0x5b5
18:13:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:57: DSR(driver stage register)  DSR_IMP           :0x0
18:13:57: Reserv2                                       :0x0
18:13:57: Device Size C_SIZE                            :0xedc8
18:13:57: Reserv3                                       :0x0
18:13:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:57: Reserv4                                       :0x0
18:13:57: Write Speed Factor R2W_FACTOR                 :0x2
18:13:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:57: FILE_FORMAT_GRP                               :0x0
18:13:57: COPY flag                                     :0x1
18:13:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:57: File_Format                                   :0x0
18:13:57: CRC                                           :0x0
18:13:57: ####CSD Registe Values####  

18:13:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 1988 ] 
18:13:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50930>, <py_sfcl.CommandDataDefinition object at 0x05E50780>) , Command count = 1989 ] 
18:13:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:13:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:57: [GetSCRRegisterEntry] Passed
18:13:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:57: Data_Status_After Erases          : 0
18:13:57: CPRM Security Support             : No Security
18:13:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:57: Spec. Version                     : Version 3.0X
18:13:57: Extended Security Support         : Extended_Security_Not_Supported
18:13:57: Command Support                   : COMMAND_SUPPORT
18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:13:57: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:13:57: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:57: [GetSCRRegisterEntry] Passed
18:13:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:57: Data_Status_After Erases          : 0
18:13:57: CPRM Security Support             : No Security
18:13:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:57: Spec. Version                     : Version 3.0X
18:13:57: Extended Security Support         : Extended_Security_Not_Supported
18:13:57: Command Support                   : COMMAND_SUPPORT
18:13:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:57: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1990 ] 
18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:13:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:57: [GO4_globalInitCard]### Switch to Specify Card Type
18:13:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:59: Host Frequency set to 25000 KHz
18:13:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:59: [GO18_globalSetVolt]### Set Host Voltage value.
18:13:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:13:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44AB0>, 0x0, True) , Command count = 1991 ] 
18:13:59: [GO18_globalSetVolt]### Host voltage value is set.
18:13:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:13:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E180>, 0x0, False) , Command count = 1992 ] 
18:13:59: [GO18_globalSetVolt]### Host voltage value is set.
18:13:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1993 ] 
18:13:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:13:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1994 ] 
18:13:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:13:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:13:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:13:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:13:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:13:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1995 ] 
18:13:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:13:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E50A20>) , Command count = 1996 ] 
18:13:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E503C0>, <py_sfcl.CommandDataDefinition object at 0x05E508A0>) , Command count = 1997 ] 
18:13:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:13:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1998 ] 
18:13:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:13:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:13:59: Host Frequency set to 25000 KHz
18:13:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:13:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:59: ####CSD Registe 2.0 Values####
18:13:59: CSD_STRUCTURE                                 :0x1
18:13:59: Reserv1                                       :0x0
18:13:59: Time Access 1 TAAC                            :0xe
18:13:59: Time Access 2 NSAC*100                        :0x0
18:13:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:13:59: Card Command Classess CCC                     :0x5b5
18:13:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:59: DSR(driver stage register)  DSR_IMP           :0x0
18:13:59: Reserv2                                       :0x0
18:13:59: Device Size C_SIZE                            :0xedc8
18:13:59: Reserv3                                       :0x0
18:13:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:59: Reserv4                                       :0x0
18:13:59: Write Speed Factor R2W_FACTOR                 :0x2
18:13:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:59: FILE_FORMAT_GRP                               :0x0
18:13:59: COPY flag                                     :0x1
18:13:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:59: File_Format                                   :0x0
18:13:59: CRC                                           :0x0
18:13:59: ####CSD Registe Values####  

18:13:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:13:59: [GetSCRRegisterEntry] Passed
18:13:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:13:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:13:59: Data_Status_After Erases          : 0
18:13:59: CPRM Security Support             : No Security
18:13:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:13:59: Spec. Version                     : Version 3.0X
18:13:59: Extended Security Support         : Extended_Security_Not_Supported
18:13:59: Command Support                   : COMMAND_SUPPORT
18:13:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E4FCC0>) , Command count = 1999 ] 
18:13:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C60>, <py_sfcl.CommandDataDefinition object at 0x05E4FB10>) , Command count = 2000 ] 
18:13:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:13:59: [ SetBusWidth(0x4) , Command count = 2001 ] 
18:13:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:13:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2002 ] 
18:13:59: Protected Area Size 0x28000
18:13:59: Bus Width           2
18:13:59: Secure Mode         0
18:13:59: Speed  Class        4
18:13:59: Perf Move           0
18:13:59: Au Size             9
18:13:59: Erase Size          15
18:13:59: Erase Timeout       1
18:13:59: Erase offset        1
18:13:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:13:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:13:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:13:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2003 ] 
18:13:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:13:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:13:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:13:59: Host Frequency set to 100000 KHz
18:13:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:13:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:13:59: ####CSD Registe 2.0 Values####
18:13:59: CSD_STRUCTURE                                 :0x1
18:13:59: Reserv1                                       :0x0
18:13:59: Time Access 1 TAAC                            :0xe
18:13:59: Time Access 2 NSAC*100                        :0x0
18:13:59: Data Transfer Rate TRAN_SPEED                 :0xb
18:13:59: Card Command Classess CCC                     :0x5b5
18:13:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:13:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:13:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:13:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:13:59: DSR(driver stage register)  DSR_IMP           :0x0
18:13:59: Reserv2                                       :0x0
18:13:59: Device Size C_SIZE                            :0xedc8
18:13:59: Reserv3                                       :0x0
18:13:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:13:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:13:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:13:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:13:59: Reserv4                                       :0x0
18:13:59: Write Speed Factor R2W_FACTOR                 :0x2
18:13:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:13:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:13:59: FILE_FORMAT_GRP                               :0x0
18:13:59: COPY flag                                     :0x1
18:13:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:13:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:13:59: File_Format                                   :0x0
18:13:59: CRC                                           :0x0
18:13:59: ####CSD Registe Values####  

18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF30>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 2004 ] 
18:13:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50A80>, <py_sfcl.CommandDataDefinition object at 0x05E50C60>) , Command count = 2005 ] 
18:13:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:13:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D50>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 2006 ] 
18:13:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CF0>, <py_sfcl.CommandDataDefinition object at 0x05E59480>) , Command count = 2007 ] 
18:13:59: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB70>, <py_sfcl.CommandDataDefinition object at 0x05E59270>) , Command count = 2008 ] 
18:13:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 2009 ] 
18:13:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E50600>) , Command count = 2010 ] 
18:14:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55300>, <py_sfcl.CommandDataDefinition object at 0x05E509C0>) , Command count = 2011 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550F0>, <py_sfcl.CommandDataDefinition object at 0x05E502A0>) , Command count = 2012 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C30>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 2013 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD50>, <py_sfcl.CommandDataDefinition object at 0x05E50510>) , Command count = 2014 ] 
18:14:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E4F2D0>) , Command count = 2015 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FE70>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 2016 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50EA0>, <py_sfcl.CommandDataDefinition object at 0x05E50270>) , Command count = 2017 ] 
18:14:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E55450>) , Command count = 2018 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E50C00>) , Command count = 2019 ] 
18:14:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:00: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:14:00: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:14:00: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:00: [GetSCRRegisterEntry] Passed
18:14:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:00: Data_Status_After Erases          : 0
18:14:00: CPRM Security Support             : No Security
18:14:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:00: Spec. Version                     : Version 3.0X
18:14:00: Extended Security Support         : Extended_Security_Not_Supported
18:14:00: Command Support                   : COMMAND_SUPPORT
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:00: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:00: [GetSCRRegisterEntry] Passed
18:14:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:00: Data_Status_After Erases          : 0
18:14:00: CPRM Security Support             : No Security
18:14:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:00: Spec. Version                     : Version 3.0X
18:14:00: Extended Security Support         : Extended_Security_Not_Supported
18:14:00: Command Support                   : COMMAND_SUPPORT
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:00: [GetSCRRegisterEntry] Passed
18:14:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:00: Data_Status_After Erases          : 0
18:14:00: CPRM Security Support             : No Security
18:14:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:00: Spec. Version                     : Version 3.0X
18:14:00: Extended Security Support         : Extended_Security_Not_Supported
18:14:00: Command Support                   : COMMAND_SUPPORT
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:00: [GetSCRRegisterEntry] Passed
18:14:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:00: Data_Status_After Erases          : 0
18:14:00: CPRM Security Support             : No Security
18:14:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:00: Spec. Version                     : Version 3.0X
18:14:00: Extended Security Support         : Extended_Security_Not_Supported
18:14:00: Command Support                   : COMMAND_SUPPORT
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:00: [GetSCRRegisterEntry] Passed
18:14:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:00: Data_Status_After Erases          : 0
18:14:00: CPRM Security Support             : No Security
18:14:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:00: Spec. Version                     : Version 3.0X
18:14:00: Extended Security Support         : Extended_Security_Not_Supported
18:14:00: Command Support                   : COMMAND_SUPPORT
18:14:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:00: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:14:00: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:14:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:14:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:14:00: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:14:00: Perform Power Off and On.
18:14:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2020 ] 
18:14:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:14:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 2021 ] 
18:14:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550C0>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 2022 ] 
18:14:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:14:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2023 ] 
18:14:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:02: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:04: Host Frequency set to 25000 KHz
18:14:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:04: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E3F0>, 0x0, True) , Command count = 2024 ] 
18:14:04: [GO18_globalSetVolt]### Host voltage value is set.
18:14:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FC00>, 0x0, False) , Command count = 2025 ] 
18:14:04: [GO18_globalSetVolt]### Host voltage value is set.
18:14:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2026 ] 
18:14:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2027 ] 
18:14:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2028 ] 
18:14:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EAE0>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 2029 ] 
18:14:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555D0>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 2030 ] 
18:14:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2031 ] 
18:14:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:04: Host Frequency set to 25000 KHz
18:14:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:04: ####CSD Registe 2.0 Values####
18:14:04: CSD_STRUCTURE                                 :0x1
18:14:04: Reserv1                                       :0x0
18:14:04: Time Access 1 TAAC                            :0xe
18:14:04: Time Access 2 NSAC*100                        :0x0
18:14:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:04: Card Command Classess CCC                     :0x5b5
18:14:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:04: DSR(driver stage register)  DSR_IMP           :0x0
18:14:04: Reserv2                                       :0x0
18:14:04: Device Size C_SIZE                            :0xedc8
18:14:04: Reserv3                                       :0x0
18:14:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:04: Reserv4                                       :0x0
18:14:04: Write Speed Factor R2W_FACTOR                 :0x2
18:14:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:04: FILE_FORMAT_GRP                               :0x0
18:14:04: COPY flag                                     :0x1
18:14:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:04: File_Format                                   :0x0
18:14:04: CRC                                           :0x0
18:14:04: ####CSD Registe Values####  

18:14:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:04: [GetSCRRegisterEntry] Passed
18:14:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:04: Data_Status_After Erases          : 0
18:14:04: CPRM Security Support             : No Security
18:14:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:04: Spec. Version                     : Version 3.0X
18:14:04: Extended Security Support         : Extended_Security_Not_Supported
18:14:04: Command Support                   : COMMAND_SUPPORT
18:14:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50840>, <py_sfcl.CommandDataDefinition object at 0x05E59750>) , Command count = 2032 ] 
18:14:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558A0>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 2033 ] 
18:14:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:04: [ SetBusWidth(0x4) , Command count = 2034 ] 
18:14:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BBE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2035 ] 
18:14:04: Protected Area Size 0x28000
18:14:04: Bus Width           2
18:14:04: Secure Mode         0
18:14:04: Speed  Class        4
18:14:04: Perf Move           0
18:14:04: Au Size             9
18:14:04: Erase Size          15
18:14:04: Erase Timeout       1
18:14:04: Erase offset        1
18:14:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2036 ] 
18:14:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:05: Host Frequency set to 100000 KHz
18:14:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:05: ####CSD Registe 2.0 Values####
18:14:05: CSD_STRUCTURE                                 :0x1
18:14:05: Reserv1                                       :0x0
18:14:05: Time Access 1 TAAC                            :0xe
18:14:05: Time Access 2 NSAC*100                        :0x0
18:14:05: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:05: Card Command Classess CCC                     :0x5b5
18:14:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:05: DSR(driver stage register)  DSR_IMP           :0x0
18:14:05: Reserv2                                       :0x0
18:14:05: Device Size C_SIZE                            :0xedc8
18:14:05: Reserv3                                       :0x0
18:14:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:05: Reserv4                                       :0x0
18:14:05: Write Speed Factor R2W_FACTOR                 :0x2
18:14:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:05: FILE_FORMAT_GRP                               :0x0
18:14:05: COPY flag                                     :0x1
18:14:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:05: File_Format                                   :0x0
18:14:05: CRC                                           :0x0
18:14:05: ####CSD Registe Values####  

18:14:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x052AAF90>) , Command count = 2037 ] 
18:14:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 2038 ] 
18:14:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:14:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:14:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:14:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2039 ] 
18:14:05: Protected Area Size 0x28000
18:14:05: Bus Width           2
18:14:05: Secure Mode         0
18:14:05: Speed  Class        4
18:14:05: Perf Move           0
18:14:05: Au Size             9
18:14:05: Erase Size          15
18:14:05: Erase Timeout       1
18:14:05: Erase offset        1
18:14:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:14:05: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:14:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2040 ] 
18:14:05: Protected Area Size 0x28000
18:14:05: Bus Width           2
18:14:05: Secure Mode         0
18:14:05: Speed  Class        4
18:14:05: Perf Move           0
18:14:05: Au Size             9
18:14:05: Erase Size          15
18:14:05: Erase Timeout       1
18:14:05: Erase offset        1
18:14:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:14:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2041 ] 
18:14:06: Protected Area Size 0x28000
18:14:06: Bus Width           2
18:14:06: Secure Mode         0
18:14:06: Speed  Class        4
18:14:06: Perf Move           0
18:14:06: Au Size             9
18:14:06: Erase Size          15
18:14:06: Erase Timeout       1
18:14:06: Erase offset        1
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2042 ] 
18:14:06: Protected Area Size 0x28000
18:14:06: Bus Width           2
18:14:06: Secure Mode         0
18:14:06: Speed  Class        4
18:14:06: Perf Move           0
18:14:06: Au Size             9
18:14:06: Erase Size          15
18:14:06: Erase Timeout       1
18:14:06: Erase offset        1
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2043 ] 
18:14:06: Protected Area Size 0x28000
18:14:06: Bus Width           2
18:14:06: Secure Mode         0
18:14:06: Speed  Class        4
18:14:06: Perf Move           0
18:14:06: Au Size             9
18:14:06: Erase Size          15
18:14:06: Erase Timeout       1
18:14:06: Erase offset        1
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2044 ] 
18:14:06: Protected Area Size 0x28000
18:14:06: Bus Width           2
18:14:06: Secure Mode         0
18:14:06: Speed  Class        4
18:14:06: Perf Move           0
18:14:06: Au Size             9
18:14:06: Erase Size          15
18:14:06: Erase Timeout       1
18:14:06: Erase offset        1
18:14:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:14:06: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:14:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 11 

18:14:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:14:08: [ HostReset(False) , Command count = 2045 ] 
18:14:08: [ SetSpecialModes(0x5, True) , Command count = 2046 ] 
18:14:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x052BB390>) , Command count = 2047 ] 
18:14:08: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:14:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E559F0>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 2048 ] 
18:14:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E55990>) , Command count = 2049 ] 
18:14:09: [ GetCardStatus() , Command count = 2050 ] 
18:14:09: ACmd51[ SEND_SCR ] Failed with an exception
18:14:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E37F90>) , Command count = 2051 ] 
18:14:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AB0>, <py_sfcl.CommandDataDefinition object at 0x05E55840>) , Command count = 2052 ] 
18:14:09: [ GetCardStatus() , Command count = 2053 ] 
18:14:09: ACMD13[ SD_STATUS ] Failed with an exception
18:14:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:14:11: [ HostReset(False) , Command count = 2054 ] 
18:14:11: [ SetSpecialModes(0x5, True) , Command count = 2055 ] 
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A420>) , Command count = 2056 ] 
18:14:11: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 2057 ] 
18:14:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55CC0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 2058 ] 
18:14:11: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E59240>) , Command count = 2059 ] 
18:14:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA6F0>, <py_sfcl.CommandDataDefinition object at 0x05E592A0>) , Command count = 2060 ] 
18:14:11: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C90>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 2061 ] 
18:14:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05270930>) , Command count = 2062 ] 
18:14:11: [ GetCardStatus() , Command count = 2063 ] 
18:14:11: ACmd51[ SEND_SCR ] Failed with an exception
18:14:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05E55840>) , Command count = 2064 ] 
18:14:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E55BA0>) , Command count = 2065 ] 
18:14:11: [ GetCardStatus() , Command count = 2066 ] 
18:14:11: ACMD13[ SD_STATUS ] Failed with an exception
18:14:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:14:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2067 ] 
18:14:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2068 ] 
18:14:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2AC60>) , Command count = 2069 ] 
18:14:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:14: [GetSCRRegisterEntry] Failed
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:14:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DB8C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2070 ] 
18:14:14: [ GetCardStatus() , Command count = 2071 ] 
18:14:14: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:14:14: [DVTCommonLib]### Exception_Details :Time out error on card response
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E4F840>) , Command count = 2072 ] 
18:14:14: [ GetCardStatus() , Command count = 2073 ] 
18:14:14: CMD55[ APP_CMD ] Failed with an exception
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x052C2AE0>) , Command count = 2074 ] 
18:14:14: [ GetCardStatus() , Command count = 2075 ] 
18:14:14: ACmd51[ SEND_SCR ] Failed with an exception
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F840>, <py_sfcl.CommandDataDefinition object at 0x05DAAB10>) , Command count = 2076 ] 
18:14:14: [ GetCardStatus() , Command count = 2077 ] 
18:14:14: CMD55[ APP_CMD ] Failed with an exception
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E2D9F0>) , Command count = 2078 ] 
18:14:14: [ GetCardStatus() , Command count = 2079 ] 
18:14:14: ACMD13[ SD_STATUS ] Failed with an exception
18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:14:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2080 ] 
18:14:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2081 ] 
18:14:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7B0>, <py_sfcl.CommandDataDefinition object at 0x05E2D540>) , Command count = 2082 ] 
18:14:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 2083 ] 
18:14:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2084 ] 
18:14:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x05E55F30>) , Command count = 2085 ] 
18:14:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:16: [GetSCRRegisterEntry] Passed
18:14:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:16: Data_Status_After Erases          : 0
18:14:16: CPRM Security Support             : No Security
18:14:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:16: Spec. Version                     : Version 3.0X
18:14:16: Extended Security Support         : Extended_Security_Not_Supported
18:14:16: Command Support                   : COMMAND_SUPPORT
18:14:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2086 ] 
18:14:16: Protected Area Size 0x28000
18:14:16: Bus Width           0
18:14:16: Secure Mode         0
18:14:16: Speed  Class        4
18:14:16: Perf Move           0
18:14:16: Au Size             9
18:14:16: Erase Size          15
18:14:16: Erase Timeout       1
18:14:16: Erase offset        1
18:14:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:16: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:14:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2087 ] 
18:14:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2088 ] 
18:14:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37AB0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD80>) , Command count = 2089 ] 
18:14:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05E2D810>) , Command count = 2090 ] 
18:14:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2091 ] 
18:14:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05D2A930>) , Command count = 2092 ] 
18:14:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC30>, <py_sfcl.CommandDataDefinition object at 0x05E559C0>) , Command count = 2093 ] 
18:14:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:19: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:14:19: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:14:19: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:14:19: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:14:19: Perform Power Off and On.
18:14:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2094 ] 
18:14:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:14:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D1B0>, <py_sfcl.CommandDataDefinition object at 0x05E37A20>) , Command count = 2095 ] 
18:14:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E70>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 2096 ] 
18:14:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:14:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2097 ] 
18:14:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:21: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:23: Host Frequency set to 25000 KHz
18:14:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:23: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB8ED0>, 0x0, True) , Command count = 2098 ] 
18:14:23: [GO18_globalSetVolt]### Host voltage value is set.
18:14:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D120>, 0x0, False) , Command count = 2099 ] 
18:14:23: [GO18_globalSetVolt]### Host voltage value is set.
18:14:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2100 ] 
18:14:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2101 ] 
18:14:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2102 ] 
18:14:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55060>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 2103 ] 
18:14:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 2104 ] 
18:14:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2105 ] 
18:14:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:24: Host Frequency set to 25000 KHz
18:14:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:24: ####CSD Registe 2.0 Values####
18:14:24: CSD_STRUCTURE                                 :0x1
18:14:24: Reserv1                                       :0x0
18:14:24: Time Access 1 TAAC                            :0xe
18:14:24: Time Access 2 NSAC*100                        :0x0
18:14:24: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:24: Card Command Classess CCC                     :0x5b5
18:14:24: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:24: DSR(driver stage register)  DSR_IMP           :0x0
18:14:24: Reserv2                                       :0x0
18:14:24: Device Size C_SIZE                            :0xedc8
18:14:24: Reserv3                                       :0x0
18:14:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:24: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:24: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:24: Reserv4                                       :0x0
18:14:24: Write Speed Factor R2W_FACTOR                 :0x2
18:14:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:24: FILE_FORMAT_GRP                               :0x0
18:14:24: COPY flag                                     :0x1
18:14:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:24: File_Format                                   :0x0
18:14:24: CRC                                           :0x0
18:14:24: ####CSD Registe Values####  

18:14:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:24: [GetSCRRegisterEntry] Passed
18:14:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:24: Data_Status_After Erases          : 0
18:14:24: CPRM Security Support             : No Security
18:14:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:24: Spec. Version                     : Version 3.0X
18:14:24: Extended Security Support         : Extended_Security_Not_Supported
18:14:24: Command Support                   : COMMAND_SUPPORT
18:14:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C90>, <py_sfcl.CommandDataDefinition object at 0x05E37EA0>) , Command count = 2106 ] 
18:14:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF30>, <py_sfcl.CommandDataDefinition object at 0x05E59660>) , Command count = 2107 ] 
18:14:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:24: [ SetBusWidth(0x4) , Command count = 2108 ] 
18:14:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2109 ] 
18:14:24: Protected Area Size 0x28000
18:14:24: Bus Width           2
18:14:24: Secure Mode         0
18:14:24: Speed  Class        4
18:14:24: Perf Move           0
18:14:24: Au Size             9
18:14:24: Erase Size          15
18:14:24: Erase Timeout       1
18:14:24: Erase offset        1
18:14:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2110 ] 
18:14:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:24: Host Frequency set to 100000 KHz
18:14:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:24: ####CSD Registe 2.0 Values####
18:14:24: CSD_STRUCTURE                                 :0x1
18:14:24: Reserv1                                       :0x0
18:14:24: Time Access 1 TAAC                            :0xe
18:14:24: Time Access 2 NSAC*100                        :0x0
18:14:24: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:24: Card Command Classess CCC                     :0x5b5
18:14:24: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:24: DSR(driver stage register)  DSR_IMP           :0x0
18:14:24: Reserv2                                       :0x0
18:14:24: Device Size C_SIZE                            :0xedc8
18:14:24: Reserv3                                       :0x0
18:14:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:24: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:24: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:24: Reserv4                                       :0x0
18:14:24: Write Speed Factor R2W_FACTOR                 :0x2
18:14:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:24: FILE_FORMAT_GRP                               :0x0
18:14:24: COPY flag                                     :0x1
18:14:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:24: File_Format                                   :0x0
18:14:24: CRC                                           :0x0
18:14:24: ####CSD Registe Values####  

18:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E376C0>, <py_sfcl.CommandDataDefinition object at 0x05E37A50>) , Command count = 2111 ] 
18:14:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37600>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 2112 ] 
18:14:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:14:25: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:14:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:25: [GetSCRRegisterEntry] Passed
18:14:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:25: Data_Status_After Erases          : 0
18:14:25: CPRM Security Support             : No Security
18:14:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:25: Spec. Version                     : Version 3.0X
18:14:25: Extended Security Support         : Extended_Security_Not_Supported
18:14:25: Command Support                   : COMMAND_SUPPORT
18:14:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:25: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:14:25: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:14:25: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:14:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:25: [GetSCRRegisterEntry] Passed
18:14:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:25: Data_Status_After Erases          : 0
18:14:25: CPRM Security Support             : No Security
18:14:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:25: Spec. Version                     : Version 3.0X
18:14:25: Extended Security Support         : Extended_Security_Not_Supported
18:14:25: Command Support                   : COMMAND_SUPPORT
18:14:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:25: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:14:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:25: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2113 ] 
18:14:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:14:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:25: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:27: Host Frequency set to 25000 KHz
18:14:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:27: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55DE0>, 0x0, True) , Command count = 2114 ] 
18:14:27: [GO18_globalSetVolt]### Host voltage value is set.
18:14:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50ED0>, 0x0, False) , Command count = 2115 ] 
18:14:27: [GO18_globalSetVolt]### Host voltage value is set.
18:14:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2116 ] 
18:14:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2117 ] 
18:14:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2118 ] 
18:14:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E373C0>, <py_sfcl.CommandDataDefinition object at 0x05E37E10>) , Command count = 2119 ] 
18:14:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E37CF0>) , Command count = 2120 ] 
18:14:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2121 ] 
18:14:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:28: Host Frequency set to 25000 KHz
18:14:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:28: ####CSD Registe 2.0 Values####
18:14:28: CSD_STRUCTURE                                 :0x1
18:14:28: Reserv1                                       :0x0
18:14:28: Time Access 1 TAAC                            :0xe
18:14:28: Time Access 2 NSAC*100                        :0x0
18:14:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:28: Card Command Classess CCC                     :0x5b5
18:14:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:28: DSR(driver stage register)  DSR_IMP           :0x0
18:14:28: Reserv2                                       :0x0
18:14:28: Device Size C_SIZE                            :0xedc8
18:14:28: Reserv3                                       :0x0
18:14:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:28: Reserv4                                       :0x0
18:14:28: Write Speed Factor R2W_FACTOR                 :0x2
18:14:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:28: FILE_FORMAT_GRP                               :0x0
18:14:28: COPY flag                                     :0x1
18:14:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:28: File_Format                                   :0x0
18:14:28: CRC                                           :0x0
18:14:28: ####CSD Registe Values####  

18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E376F0>, <py_sfcl.CommandDataDefinition object at 0x05E2D630>) , Command count = 2122 ] 
18:14:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E2D120>) , Command count = 2123 ] 
18:14:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:28: [ SetBusWidth(0x4) , Command count = 2124 ] 
18:14:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E372D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2125 ] 
18:14:28: Protected Area Size 0x28000
18:14:28: Bus Width           2
18:14:28: Secure Mode         0
18:14:28: Speed  Class        4
18:14:28: Perf Move           0
18:14:28: Au Size             9
18:14:28: Erase Size          15
18:14:28: Erase Timeout       1
18:14:28: Erase offset        1
18:14:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2126 ] 
18:14:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:28: Host Frequency set to 100000 KHz
18:14:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:28: ####CSD Registe 2.0 Values####
18:14:28: CSD_STRUCTURE                                 :0x1
18:14:28: Reserv1                                       :0x0
18:14:28: Time Access 1 TAAC                            :0xe
18:14:28: Time Access 2 NSAC*100                        :0x0
18:14:28: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:28: Card Command Classess CCC                     :0x5b5
18:14:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:28: DSR(driver stage register)  DSR_IMP           :0x0
18:14:28: Reserv2                                       :0x0
18:14:28: Device Size C_SIZE                            :0xedc8
18:14:28: Reserv3                                       :0x0
18:14:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:28: Reserv4                                       :0x0
18:14:28: Write Speed Factor R2W_FACTOR                 :0x2
18:14:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:28: FILE_FORMAT_GRP                               :0x0
18:14:28: COPY flag                                     :0x1
18:14:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:28: File_Format                                   :0x0
18:14:28: CRC                                           :0x0
18:14:28: ####CSD Registe Values####  

18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E37A80>) , Command count = 2127 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 2128 ] 
18:14:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 2129 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37420>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 2130 ] 
18:14:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7E0>, <py_sfcl.CommandDataDefinition object at 0x05E59AE0>) , Command count = 2131 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 2132 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59660>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 2133 ] 
18:14:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37390>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 2134 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F9F0>) , Command count = 2135 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 2136 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 2137 ] 
18:14:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B10>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 2138 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37690>, <py_sfcl.CommandDataDefinition object at 0x05E3E900>) , Command count = 2139 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3C0>, <py_sfcl.CommandDataDefinition object at 0x05E3EBA0>) , Command count = 2140 ] 
18:14:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 2141 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E450>, <py_sfcl.CommandDataDefinition object at 0x05E3EB40>) , Command count = 2142 ] 
18:14:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:28: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:14:28: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:14:28: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:28: [GetSCRRegisterEntry] Passed
18:14:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:28: Data_Status_After Erases          : 0
18:14:28: CPRM Security Support             : No Security
18:14:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:28: Spec. Version                     : Version 3.0X
18:14:28: Extended Security Support         : Extended_Security_Not_Supported
18:14:28: Command Support                   : COMMAND_SUPPORT
18:14:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:28: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:14:28: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:14:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:14:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:14:28: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:14:28: Perform Power Off and On.
18:14:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2143 ] 
18:14:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:14:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05DAA660>) , Command count = 2144 ] 
18:14:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 2145 ] 
18:14:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:14:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2146 ] 
18:14:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:30: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:32: Host Frequency set to 25000 KHz
18:14:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:32: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37E40>, 0x0, True) , Command count = 2147 ] 
18:14:32: [GO18_globalSetVolt]### Host voltage value is set.
18:14:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E600>, 0x0, False) , Command count = 2148 ] 
18:14:32: [GO18_globalSetVolt]### Host voltage value is set.
18:14:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2149 ] 
18:14:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2150 ] 
18:14:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2151 ] 
18:14:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E3EEA0>) , Command count = 2152 ] 
18:14:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 2153 ] 
18:14:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2154 ] 
18:14:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:33: Host Frequency set to 25000 KHz
18:14:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:33: ####CSD Registe 2.0 Values####
18:14:33: CSD_STRUCTURE                                 :0x1
18:14:33: Reserv1                                       :0x0
18:14:33: Time Access 1 TAAC                            :0xe
18:14:33: Time Access 2 NSAC*100                        :0x0
18:14:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:33: Card Command Classess CCC                     :0x5b5
18:14:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:33: DSR(driver stage register)  DSR_IMP           :0x0
18:14:33: Reserv2                                       :0x0
18:14:33: Device Size C_SIZE                            :0xedc8
18:14:33: Reserv3                                       :0x0
18:14:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:33: Reserv4                                       :0x0
18:14:33: Write Speed Factor R2W_FACTOR                 :0x2
18:14:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:33: FILE_FORMAT_GRP                               :0x0
18:14:33: COPY flag                                     :0x1
18:14:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:33: File_Format                                   :0x0
18:14:33: CRC                                           :0x0
18:14:33: ####CSD Registe Values####  

18:14:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:33: [GetSCRRegisterEntry] Passed
18:14:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:33: Data_Status_After Erases          : 0
18:14:33: CPRM Security Support             : No Security
18:14:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:33: Spec. Version                     : Version 3.0X
18:14:33: Extended Security Support         : Extended_Security_Not_Supported
18:14:33: Command Support                   : COMMAND_SUPPORT
18:14:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D720>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 2155 ] 
18:14:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA50>, <py_sfcl.CommandDataDefinition object at 0x05E59B10>) , Command count = 2156 ] 
18:14:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:33: [ SetBusWidth(0x4) , Command count = 2157 ] 
18:14:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2158 ] 
18:14:33: Protected Area Size 0x28000
18:14:33: Bus Width           2
18:14:33: Secure Mode         0
18:14:33: Speed  Class        4
18:14:33: Perf Move           0
18:14:33: Au Size             9
18:14:33: Erase Size          15
18:14:33: Erase Timeout       1
18:14:33: Erase offset        1
18:14:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2159 ] 
18:14:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:33: Host Frequency set to 100000 KHz
18:14:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:33: ####CSD Registe 2.0 Values####
18:14:33: CSD_STRUCTURE                                 :0x1
18:14:33: Reserv1                                       :0x0
18:14:33: Time Access 1 TAAC                            :0xe
18:14:33: Time Access 2 NSAC*100                        :0x0
18:14:33: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:33: Card Command Classess CCC                     :0x5b5
18:14:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:33: DSR(driver stage register)  DSR_IMP           :0x0
18:14:33: Reserv2                                       :0x0
18:14:33: Device Size C_SIZE                            :0xedc8
18:14:33: Reserv3                                       :0x0
18:14:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:33: Reserv4                                       :0x0
18:14:33: Write Speed Factor R2W_FACTOR                 :0x2
18:14:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:33: FILE_FORMAT_GRP                               :0x0
18:14:33: COPY flag                                     :0x1
18:14:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:33: File_Format                                   :0x0
18:14:33: CRC                                           :0x0
18:14:33: ####CSD Registe Values####  

18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EED0>) , Command count = 2160 ] 
18:14:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E5D0>) , Command count = 2161 ] 
18:14:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:14:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BB330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2162 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:14:34: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2163 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2164 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E447B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2165 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E440F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2166 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2167 ] 
18:14:34: Protected Area Size 0x28000
18:14:34: Bus Width           2
18:14:34: Secure Mode         0
18:14:34: Speed  Class        4
18:14:34: Perf Move           0
18:14:34: Au Size             9
18:14:34: Erase Size          15
18:14:34: Erase Timeout       1
18:14:34: Erase offset        1
18:14:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:14:34: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:14:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 10 

18:14:34: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:14:36: [ HostReset(False) , Command count = 2168 ] 
18:14:36: [ SetSpecialModes(0x5, True) , Command count = 2169 ] 
18:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E44990>) , Command count = 2170 ] 
18:14:36: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E448A0>, <py_sfcl.CommandDataDefinition object at 0x05E44A50>) , Command count = 2171 ] 
18:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E240>, <py_sfcl.CommandDataDefinition object at 0x05E443C0>) , Command count = 2172 ] 
18:14:36: [ GetCardStatus() , Command count = 2173 ] 
18:14:36: ACmd51[ SEND_SCR ] Failed with an exception
18:14:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x052C2AE0>) , Command count = 2174 ] 
18:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 2175 ] 
18:14:36: [ GetCardStatus() , Command count = 2176 ] 
18:14:36: ACMD13[ SD_STATUS ] Failed with an exception
18:14:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:14:38: [ HostReset(False) , Command count = 2177 ] 
18:14:38: [ SetSpecialModes(0x5, True) , Command count = 2178 ] 
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E810>, <py_sfcl.CommandDataDefinition object at 0x05E44B40>) , Command count = 2179 ] 
18:14:38: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 2180 ] 
18:14:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B10>, <py_sfcl.CommandDataDefinition object at 0x05E44330>) , Command count = 2181 ] 
18:14:38: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E595A0>) , Command count = 2182 ] 
18:14:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E59900>) , Command count = 2183 ] 
18:14:38: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44360>, <py_sfcl.CommandDataDefinition object at 0x05E44810>) , Command count = 2184 ] 
18:14:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E3EC00>) , Command count = 2185 ] 
18:14:39: [ GetCardStatus() , Command count = 2186 ] 
18:14:39: ACmd51[ SEND_SCR ] Failed with an exception
18:14:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E2DA20>) , Command count = 2187 ] 
18:14:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:14:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05E449C0>) , Command count = 2188 ] 
18:14:39: [ GetCardStatus() , Command count = 2189 ] 
18:14:39: ACMD13[ SD_STATUS ] Failed with an exception
18:14:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:14:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2190 ] 
18:14:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2191 ] 
18:14:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 2192 ] 
18:14:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:41: [GetSCRRegisterEntry] Failed
18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:14:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2193 ] 
18:14:41: [ GetCardStatus() , Command count = 2194 ] 
18:14:41: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:14:41: [DVTCommonLib]### Exception_Details :Time out error on card response
18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:14:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05DB8D20>) , Command count = 2195 ] 
18:14:41: [ GetCardStatus() , Command count = 2196 ] 
18:14:41: CMD55[ APP_CMD ] Failed with an exception
18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 2197 ] 
18:14:41: [ GetCardStatus() , Command count = 2198 ] 
18:14:41: ACmd51[ SEND_SCR ] Failed with an exception
18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8D20>, <py_sfcl.CommandDataDefinition object at 0x05E3E960>) , Command count = 2199 ] 
18:14:41: [ GetCardStatus() , Command count = 2200 ] 
18:14:41: CMD55[ APP_CMD ] Failed with an exception
18:14:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:14:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E37BD0>) , Command count = 2201 ] 
18:14:42: [ GetCardStatus() , Command count = 2202 ] 
18:14:42: ACMD13[ SD_STATUS ] Failed with an exception
18:14:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:14:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:14:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2203 ] 
18:14:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2204 ] 
18:14:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F360>) , Command count = 2205 ] 
18:14:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F720>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 2206 ] 
18:14:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2207 ] 
18:14:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ED50>, <py_sfcl.CommandDataDefinition object at 0x05E44840>) , Command count = 2208 ] 
18:14:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:44: [GetSCRRegisterEntry] Passed
18:14:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:44: Data_Status_After Erases          : 0
18:14:44: CPRM Security Support             : No Security
18:14:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:44: Spec. Version                     : Version 3.0X
18:14:44: Extended Security Support         : Extended_Security_Not_Supported
18:14:44: Command Support                   : COMMAND_SUPPORT
18:14:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2209 ] 
18:14:44: Protected Area Size 0x28000
18:14:44: Bus Width           0
18:14:44: Secure Mode         0
18:14:44: Speed  Class        4
18:14:44: Perf Move           0
18:14:44: Au Size             9
18:14:44: Erase Size          15
18:14:44: Erase Timeout       1
18:14:44: Erase offset        1
18:14:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:14:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2210 ] 
18:14:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2211 ] 
18:14:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F600>, <py_sfcl.CommandDataDefinition object at 0x05E4F900>) , Command count = 2212 ] 
18:14:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E060>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 2213 ] 
18:14:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2214 ] 
18:14:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA420>, <py_sfcl.CommandDataDefinition object at 0x05E4F390>) , Command count = 2215 ] 
18:14:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E55930>) , Command count = 2216 ] 
18:14:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:46: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:14:46: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:14:46: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:14:46: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:14:46: Perform Power Off and On.
18:14:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2217 ] 
18:14:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:14:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC90>, <py_sfcl.CommandDataDefinition object at 0x05E4FD80>) , Command count = 2218 ] 
18:14:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F270>) , Command count = 2219 ] 
18:14:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:14:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2220 ] 
18:14:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:49: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:51: Host Frequency set to 25000 KHz
18:14:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:51: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EDB0>, 0x0, True) , Command count = 2221 ] 
18:14:51: [GO18_globalSetVolt]### Host voltage value is set.
18:14:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44DE0>, 0x0, False) , Command count = 2222 ] 
18:14:51: [GO18_globalSetVolt]### Host voltage value is set.
18:14:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2223 ] 
18:14:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2224 ] 
18:14:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2225 ] 
18:14:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E540>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 2226 ] 
18:14:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FDE0>) , Command count = 2227 ] 
18:14:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2228 ] 
18:14:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:51: Host Frequency set to 25000 KHz
18:14:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:51: ####CSD Registe 2.0 Values####
18:14:51: CSD_STRUCTURE                                 :0x1
18:14:51: Reserv1                                       :0x0
18:14:51: Time Access 1 TAAC                            :0xe
18:14:51: Time Access 2 NSAC*100                        :0x0
18:14:51: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:51: Card Command Classess CCC                     :0x5b5
18:14:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:51: DSR(driver stage register)  DSR_IMP           :0x0
18:14:51: Reserv2                                       :0x0
18:14:51: Device Size C_SIZE                            :0xedc8
18:14:51: Reserv3                                       :0x0
18:14:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:51: Reserv4                                       :0x0
18:14:51: Write Speed Factor R2W_FACTOR                 :0x2
18:14:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:51: FILE_FORMAT_GRP                               :0x0
18:14:51: COPY flag                                     :0x1
18:14:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:51: File_Format                                   :0x0
18:14:51: CRC                                           :0x0
18:14:51: ####CSD Registe Values####  

18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:51: [GetSCRRegisterEntry] Passed
18:14:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:51: Data_Status_After Erases          : 0
18:14:51: CPRM Security Support             : No Security
18:14:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:51: Spec. Version                     : Version 3.0X
18:14:51: Extended Security Support         : Extended_Security_Not_Supported
18:14:51: Command Support                   : COMMAND_SUPPORT
18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E4FBD0>) , Command count = 2229 ] 
18:14:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50030>, <py_sfcl.CommandDataDefinition object at 0x05E596F0>) , Command count = 2230 ] 
18:14:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:51: [ SetBusWidth(0x4) , Command count = 2231 ] 
18:14:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2232 ] 
18:14:51: Protected Area Size 0x28000
18:14:51: Bus Width           2
18:14:51: Secure Mode         0
18:14:51: Speed  Class        4
18:14:51: Perf Move           0
18:14:51: Au Size             9
18:14:51: Erase Size          15
18:14:51: Erase Timeout       1
18:14:51: Erase offset        1
18:14:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2233 ] 
18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:51: Host Frequency set to 100000 KHz
18:14:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:51: ####CSD Registe 2.0 Values####
18:14:51: CSD_STRUCTURE                                 :0x1
18:14:51: Reserv1                                       :0x0
18:14:51: Time Access 1 TAAC                            :0xe
18:14:51: Time Access 2 NSAC*100                        :0x0
18:14:51: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:51: Card Command Classess CCC                     :0x5b5
18:14:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:51: DSR(driver stage register)  DSR_IMP           :0x0
18:14:51: Reserv2                                       :0x0
18:14:51: Device Size C_SIZE                            :0xedc8
18:14:51: Reserv3                                       :0x0
18:14:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:51: Reserv4                                       :0x0
18:14:51: Write Speed Factor R2W_FACTOR                 :0x2
18:14:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:51: FILE_FORMAT_GRP                               :0x0
18:14:51: COPY flag                                     :0x1
18:14:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:51: File_Format                                   :0x0
18:14:51: CRC                                           :0x0
18:14:51: ####CSD Registe Values####  

18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 2234 ] 
18:14:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F060>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 2235 ] 
18:14:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:51: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:14:51: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:51: [GetSCRRegisterEntry] Passed
18:14:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:51: Data_Status_After Erases          : 0
18:14:51: CPRM Security Support             : No Security
18:14:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:51: Spec. Version                     : Version 3.0X
18:14:51: Extended Security Support         : Extended_Security_Not_Supported
18:14:51: Command Support                   : COMMAND_SUPPORT
18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:51: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:14:51: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:14:51: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:51: [GetSCRRegisterEntry] Passed
18:14:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:51: Data_Status_After Erases          : 0
18:14:51: CPRM Security Support             : No Security
18:14:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:51: Spec. Version                     : Version 3.0X
18:14:51: Extended Security Support         : Extended_Security_Not_Supported
18:14:51: Command Support                   : COMMAND_SUPPORT
18:14:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:51: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:51: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2236 ] 
18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:14:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:51: [GO4_globalInitCard]### Switch to Specify Card Type
18:14:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:53: Host Frequency set to 25000 KHz
18:14:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:53: [GO18_globalSetVolt]### Set Host Voltage value.
18:14:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:14:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44750>, 0x0, True) , Command count = 2237 ] 
18:14:53: [GO18_globalSetVolt]### Host voltage value is set.
18:14:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:14:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37D80>, 0x0, False) , Command count = 2238 ] 
18:14:53: [GO18_globalSetVolt]### Host voltage value is set.
18:14:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2239 ] 
18:14:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2240 ] 
18:14:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:14:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2241 ] 
18:14:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:14:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50AE0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 2242 ] 
18:14:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 2243 ] 
18:14:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:14:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2244 ] 
18:14:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:14:54: Host Frequency set to 25000 KHz
18:14:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:14:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:54: ####CSD Registe 2.0 Values####
18:14:54: CSD_STRUCTURE                                 :0x1
18:14:54: Reserv1                                       :0x0
18:14:54: Time Access 1 TAAC                            :0xe
18:14:54: Time Access 2 NSAC*100                        :0x0
18:14:54: Data Transfer Rate TRAN_SPEED                 :0x32
18:14:54: Card Command Classess CCC                     :0x5b5
18:14:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:54: DSR(driver stage register)  DSR_IMP           :0x0
18:14:54: Reserv2                                       :0x0
18:14:54: Device Size C_SIZE                            :0xedc8
18:14:54: Reserv3                                       :0x0
18:14:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:54: Reserv4                                       :0x0
18:14:54: Write Speed Factor R2W_FACTOR                 :0x2
18:14:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:54: FILE_FORMAT_GRP                               :0x0
18:14:54: COPY flag                                     :0x1
18:14:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:54: File_Format                                   :0x0
18:14:54: CRC                                           :0x0
18:14:54: ####CSD Registe Values####  

18:14:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:54: [GetSCRRegisterEntry] Passed
18:14:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:54: Data_Status_After Erases          : 0
18:14:54: CPRM Security Support             : No Security
18:14:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:54: Spec. Version                     : Version 3.0X
18:14:54: Extended Security Support         : Extended_Security_Not_Supported
18:14:54: Command Support                   : COMMAND_SUPPORT
18:14:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50210>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 2245 ] 
18:14:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E4FA20>) , Command count = 2246 ] 
18:14:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:14:54: [ SetBusWidth(0x4) , Command count = 2247 ] 
18:14:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:14:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2248 ] 
18:14:54: Protected Area Size 0x28000
18:14:54: Bus Width           2
18:14:54: Secure Mode         0
18:14:54: Speed  Class        4
18:14:54: Perf Move           0
18:14:54: Au Size             9
18:14:54: Erase Size          15
18:14:54: Erase Timeout       1
18:14:54: Erase offset        1
18:14:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:14:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:14:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:14:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2249 ] 
18:14:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:14:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:14:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:14:54: Host Frequency set to 100000 KHz
18:14:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:14:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:14:54: ####CSD Registe 2.0 Values####
18:14:54: CSD_STRUCTURE                                 :0x1
18:14:54: Reserv1                                       :0x0
18:14:54: Time Access 1 TAAC                            :0xe
18:14:54: Time Access 2 NSAC*100                        :0x0
18:14:54: Data Transfer Rate TRAN_SPEED                 :0xb
18:14:54: Card Command Classess CCC                     :0x5b5
18:14:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:14:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:14:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:14:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:14:54: DSR(driver stage register)  DSR_IMP           :0x0
18:14:54: Reserv2                                       :0x0
18:14:54: Device Size C_SIZE                            :0xedc8
18:14:54: Reserv3                                       :0x0
18:14:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:14:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:14:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:14:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:14:54: Reserv4                                       :0x0
18:14:54: Write Speed Factor R2W_FACTOR                 :0x2
18:14:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:14:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:14:54: FILE_FORMAT_GRP                               :0x0
18:14:54: COPY flag                                     :0x1
18:14:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:14:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:14:54: File_Format                                   :0x0
18:14:54: CRC                                           :0x0
18:14:54: ####CSD Registe Values####  

18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F690>, <py_sfcl.CommandDataDefinition object at 0x05E503C0>) , Command count = 2250 ] 
18:14:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E4FFC0>) , Command count = 2251 ] 
18:14:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:14:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CC0>, <py_sfcl.CommandDataDefinition object at 0x05E508D0>) , Command count = 2252 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50BA0>, <py_sfcl.CommandDataDefinition object at 0x05E505D0>) , Command count = 2253 ] 
18:14:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E596C0>) , Command count = 2254 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EBD0>, <py_sfcl.CommandDataDefinition object at 0x05E44C60>) , Command count = 2255 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50240>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 2256 ] 
18:14:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBD80>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 2257 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF30>, <py_sfcl.CommandDataDefinition object at 0x05E50D50>) , Command count = 2258 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CF0>, <py_sfcl.CommandDataDefinition object at 0x05E50A80>) , Command count = 2259 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D20>, <py_sfcl.CommandDataDefinition object at 0x05E50F00>) , Command count = 2260 ] 
18:14:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 2261 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB70>, <py_sfcl.CommandDataDefinition object at 0x05E500F0>) , Command count = 2262 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509C0>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 2263 ] 
18:14:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 2264 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55300>, <py_sfcl.CommandDataDefinition object at 0x05E50C30>) , Command count = 2265 ] 
18:14:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:14:55: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:14:55: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:14:55: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:14:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:56: [GetSCRRegisterEntry] Passed
18:14:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:56: Data_Status_After Erases          : 0
18:14:56: CPRM Security Support             : No Security
18:14:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:56: Spec. Version                     : Version 3.0X
18:14:56: Extended Security Support         : Extended_Security_Not_Supported
18:14:56: Command Support                   : COMMAND_SUPPORT
18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:56: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:56: [GetSCRRegisterEntry] Passed
18:14:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:56: Data_Status_After Erases          : 0
18:14:56: CPRM Security Support             : No Security
18:14:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:56: Spec. Version                     : Version 3.0X
18:14:56: Extended Security Support         : Extended_Security_Not_Supported
18:14:56: Command Support                   : COMMAND_SUPPORT
18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:56: [GetSCRRegisterEntry] Passed
18:14:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:56: Data_Status_After Erases          : 0
18:14:56: CPRM Security Support             : No Security
18:14:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:56: Spec. Version                     : Version 3.0X
18:14:56: Extended Security Support         : Extended_Security_Not_Supported
18:14:56: Command Support                   : COMMAND_SUPPORT
18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:56: [GetSCRRegisterEntry] Passed
18:14:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:56: Data_Status_After Erases          : 0
18:14:56: CPRM Security Support             : No Security
18:14:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:56: Spec. Version                     : Version 3.0X
18:14:56: Extended Security Support         : Extended_Security_Not_Supported
18:14:56: Command Support                   : COMMAND_SUPPORT
18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:14:56: [GetSCRRegisterEntry] Passed
18:14:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:14:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:14:56: Data_Status_After Erases          : 0
18:14:56: CPRM Security Support             : No Security
18:14:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:14:56: Spec. Version                     : Version 3.0X
18:14:56: Extended Security Support         : Extended_Security_Not_Supported
18:14:56: Command Support                   : COMMAND_SUPPORT
18:14:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:14:56: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:14:56: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:14:56: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:14:56: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:14:56: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:14:56: Perform Power Off and On.
18:14:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:14:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2266 ] 
18:14:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:14:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:14:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:14:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:14:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:14:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:14:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E4F2D0>) , Command count = 2267 ] 
18:14:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:14:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FE70>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 2268 ] 
18:14:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:14:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2269 ] 
18:14:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:14:59: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:01: Host Frequency set to 25000 KHz
18:15:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:01: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F180>, 0x0, True) , Command count = 2270 ] 
18:15:01: [GO18_globalSetVolt]### Host voltage value is set.
18:15:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50A50>, 0x0, False) , Command count = 2271 ] 
18:15:01: [GO18_globalSetVolt]### Host voltage value is set.
18:15:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2272 ] 
18:15:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2273 ] 
18:15:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2274 ] 
18:15:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E180>, <py_sfcl.CommandDataDefinition object at 0x052782D0>) , Command count = 2275 ] 
18:15:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x05E553C0>) , Command count = 2276 ] 
18:15:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:01: [ SetCardRCA(0x1, 0xD555) , Command count = 2277 ] 
18:15:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:01: Host Frequency set to 25000 KHz
18:15:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:01: ####CSD Registe 2.0 Values####
18:15:01: CSD_STRUCTURE                                 :0x1
18:15:01: Reserv1                                       :0x0
18:15:01: Time Access 1 TAAC                            :0xe
18:15:01: Time Access 2 NSAC*100                        :0x0
18:15:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:01: Card Command Classess CCC                     :0x5b5
18:15:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:01: DSR(driver stage register)  DSR_IMP           :0x0
18:15:01: Reserv2                                       :0x0
18:15:01: Device Size C_SIZE                            :0xedc8
18:15:01: Reserv3                                       :0x0
18:15:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:01: Reserv4                                       :0x0
18:15:01: Write Speed Factor R2W_FACTOR                 :0x2
18:15:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:01: FILE_FORMAT_GRP                               :0x0
18:15:01: COPY flag                                     :0x1
18:15:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:01: File_Format                                   :0x0
18:15:01: CRC                                           :0x0
18:15:01: ####CSD Registe Values####  

18:15:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:01: [GetSCRRegisterEntry] Passed
18:15:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:01: Data_Status_After Erases          : 0
18:15:01: CPRM Security Support             : No Security
18:15:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:01: Spec. Version                     : Version 3.0X
18:15:01: Extended Security Support         : Extended_Security_Not_Supported
18:15:01: Command Support                   : COMMAND_SUPPORT
18:15:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F810>, <py_sfcl.CommandDataDefinition object at 0x05E50BD0>) , Command count = 2278 ] 
18:15:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50690>, <py_sfcl.CommandDataDefinition object at 0x05E502A0>) , Command count = 2279 ] 
18:15:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:01: [ SetBusWidth(0x4) , Command count = 2280 ] 
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E553F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2281 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2282 ] 
18:15:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:01: Host Frequency set to 100000 KHz
18:15:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:01: ####CSD Registe 2.0 Values####
18:15:01: CSD_STRUCTURE                                 :0x1
18:15:01: Reserv1                                       :0x0
18:15:01: Time Access 1 TAAC                            :0xe
18:15:01: Time Access 2 NSAC*100                        :0x0
18:15:01: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:01: Card Command Classess CCC                     :0x5b5
18:15:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:01: DSR(driver stage register)  DSR_IMP           :0x0
18:15:01: Reserv2                                       :0x0
18:15:01: Device Size C_SIZE                            :0xedc8
18:15:01: Reserv3                                       :0x0
18:15:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:01: Reserv4                                       :0x0
18:15:01: Write Speed Factor R2W_FACTOR                 :0x2
18:15:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:01: FILE_FORMAT_GRP                               :0x0
18:15:01: COPY flag                                     :0x1
18:15:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:01: File_Format                                   :0x0
18:15:01: CRC                                           :0x0
18:15:01: ####CSD Registe Values####  

18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555D0>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 2283 ] 
18:15:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50840>, <py_sfcl.CommandDataDefinition object at 0x05E50810>) , Command count = 2284 ] 
18:15:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BB570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2285 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:15:01: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2286 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E501B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2287 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E558A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2288 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E442D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2289 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E558A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2290 ] 
18:15:01: Protected Area Size 0x28000
18:15:01: Bus Width           2
18:15:01: Secure Mode         0
18:15:01: Speed  Class        4
18:15:01: Perf Move           0
18:15:01: Au Size             9
18:15:01: Erase Size          15
18:15:01: Erase Timeout       1
18:15:01: Erase offset        1
18:15:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:15:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:15:01: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 9 

18:15:01: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:15:03: [ HostReset(False) , Command count = 2291 ] 
18:15:03: [ SetSpecialModes(0x5, True) , Command count = 2292 ] 
18:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E55150>) , Command count = 2293 ] 
18:15:03: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55A80>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 2294 ] 
18:15:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E556C0>) , Command count = 2295 ] 
18:15:04: [ GetCardStatus() , Command count = 2296 ] 
18:15:04: ACmd51[ SEND_SCR ] Failed with an exception
18:15:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x052CDDE0>) , Command count = 2297 ] 
18:15:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 2298 ] 
18:15:04: [ GetCardStatus() , Command count = 2299 ] 
18:15:04: ACMD13[ SD_STATUS ] Failed with an exception
18:15:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:15:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:15:06: [ HostReset(False) , Command count = 2300 ] 
18:15:06: [ SetSpecialModes(0x5, True) , Command count = 2301 ] 
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E506C0>) , Command count = 2302 ] 
18:15:06: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E37F90>) , Command count = 2303 ] 
18:15:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55BD0>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 2304 ] 
18:15:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E59120>) , Command count = 2305 ] 
18:15:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 2306 ] 
18:15:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E55630>) , Command count = 2307 ] 
18:15:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A420>) , Command count = 2308 ] 
18:15:06: [ GetCardStatus() , Command count = 2309 ] 
18:15:06: ACmd51[ SEND_SCR ] Failed with an exception
18:15:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E4FB40>) , Command count = 2310 ] 
18:15:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 2311 ] 
18:15:06: [ GetCardStatus() , Command count = 2312 ] 
18:15:06: ACMD13[ SD_STATUS ] Failed with an exception
18:15:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:15:06: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:15:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2313 ] 
18:15:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2314 ] 
18:15:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05DAA6F0>) , Command count = 2315 ] 
18:15:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:09: [GetSCRRegisterEntry] Failed
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
18:15:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2316 ] 
18:15:09: [ GetCardStatus() , Command count = 2317 ] 
18:15:09: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:15:09: [DVTCommonLib]### Exception_Details :Time out error on card response
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

18:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E4F0C0>) , Command count = 2318 ] 
18:15:09: [ GetCardStatus() , Command count = 2319 ] 
18:15:09: CMD55[ APP_CMD ] Failed with an exception
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 2320 ] 
18:15:09: [ GetCardStatus() , Command count = 2321 ] 
18:15:09: ACmd51[ SEND_SCR ] Failed with an exception
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0C0>, <py_sfcl.CommandDataDefinition object at 0x052AE570>) , Command count = 2322 ] 
18:15:09: [ GetCardStatus() , Command count = 2323 ] 
18:15:09: CMD55[ APP_CMD ] Failed with an exception
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E555A0>) , Command count = 2324 ] 
18:15:09: [ GetCardStatus() , Command count = 2325 ] 
18:15:09: ACMD13[ SD_STATUS ] Failed with an exception
18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:15:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

18:15:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2326 ] 
18:15:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2327 ] 
18:15:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44F30>, <py_sfcl.CommandDataDefinition object at 0x05E4F0C0>) , Command count = 2328 ] 
18:15:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB40>, <py_sfcl.CommandDataDefinition object at 0x05E55FC0>) , Command count = 2329 ] 
18:15:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2330 ] 
18:15:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05270930>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 2331 ] 
18:15:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:11: [GetSCRRegisterEntry] Passed
18:15:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:11: Data_Status_After Erases          : 0
18:15:11: CPRM Security Support             : No Security
18:15:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:11: Spec. Version                     : Version 3.0X
18:15:11: Extended Security Support         : Extended_Security_Not_Supported
18:15:11: Command Support                   : COMMAND_SUPPORT
18:15:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2332 ] 
18:15:11: Protected Area Size 0x28000
18:15:11: Bus Width           0
18:15:11: Secure Mode         0
18:15:11: Speed  Class        4
18:15:11: Perf Move           0
18:15:11: Au Size             9
18:15:11: Erase Size          15
18:15:11: Erase Timeout       1
18:15:11: Erase offset        1
18:15:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:11: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

18:15:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2333 ] 
18:15:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2334 ] 
18:15:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E2D540>) , Command count = 2335 ] 
18:15:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 2336 ] 
18:15:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:14: [ SetCardRCA(0x1, 0xD555) , Command count = 2337 ] 
18:15:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05E50150>) , Command count = 2338 ] 
18:15:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E55AE0>) , Command count = 2339 ] 
18:15:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:14: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:15:14: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:15:14: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:15:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:14: Perform Power Off and On.
18:15:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2340 ] 
18:15:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37AB0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD80>) , Command count = 2341 ] 
18:15:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF90>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 2342 ] 
18:15:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2343 ] 
18:15:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:16: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:18: Host Frequency set to 25000 KHz
18:15:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:18: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CD0F0>, 0x0, True) , Command count = 2344 ] 
18:15:18: [GO18_globalSetVolt]### Host voltage value is set.
18:15:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DEA0>, 0x0, False) , Command count = 2345 ] 
18:15:18: [GO18_globalSetVolt]### Host voltage value is set.
18:15:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2346 ] 
18:15:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2347 ] 
18:15:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2348 ] 
18:15:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 2349 ] 
18:15:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 2350 ] 
18:15:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2351 ] 
18:15:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:19: Host Frequency set to 25000 KHz
18:15:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:19: ####CSD Registe 2.0 Values####
18:15:19: CSD_STRUCTURE                                 :0x1
18:15:19: Reserv1                                       :0x0
18:15:19: Time Access 1 TAAC                            :0xe
18:15:19: Time Access 2 NSAC*100                        :0x0
18:15:19: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:19: Card Command Classess CCC                     :0x5b5
18:15:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:19: DSR(driver stage register)  DSR_IMP           :0x0
18:15:19: Reserv2                                       :0x0
18:15:19: Device Size C_SIZE                            :0xedc8
18:15:19: Reserv3                                       :0x0
18:15:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:19: Reserv4                                       :0x0
18:15:19: Write Speed Factor R2W_FACTOR                 :0x2
18:15:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:19: FILE_FORMAT_GRP                               :0x0
18:15:19: COPY flag                                     :0x1
18:15:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:19: File_Format                                   :0x0
18:15:19: CRC                                           :0x0
18:15:19: ####CSD Registe Values####  

18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:19: [GetSCRRegisterEntry] Passed
18:15:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:19: Data_Status_After Erases          : 0
18:15:19: CPRM Security Support             : No Security
18:15:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:19: Spec. Version                     : Version 3.0X
18:15:19: Extended Security Support         : Extended_Security_Not_Supported
18:15:19: Command Support                   : COMMAND_SUPPORT
18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E559C0>) , Command count = 2352 ] 
18:15:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x05E592D0>) , Command count = 2353 ] 
18:15:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:19: [ SetBusWidth(0x4) , Command count = 2354 ] 
18:15:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2355 ] 
18:15:19: Protected Area Size 0x28000
18:15:19: Bus Width           2
18:15:19: Secure Mode         0
18:15:19: Speed  Class        4
18:15:19: Perf Move           0
18:15:19: Au Size             9
18:15:19: Erase Size          15
18:15:19: Erase Timeout       1
18:15:19: Erase offset        1
18:15:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2356 ] 
18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:19: Host Frequency set to 100000 KHz
18:15:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:19: ####CSD Registe 2.0 Values####
18:15:19: CSD_STRUCTURE                                 :0x1
18:15:19: Reserv1                                       :0x0
18:15:19: Time Access 1 TAAC                            :0xe
18:15:19: Time Access 2 NSAC*100                        :0x0
18:15:19: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:19: Card Command Classess CCC                     :0x5b5
18:15:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:19: DSR(driver stage register)  DSR_IMP           :0x0
18:15:19: Reserv2                                       :0x0
18:15:19: Device Size C_SIZE                            :0xedc8
18:15:19: Reserv3                                       :0x0
18:15:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:19: Reserv4                                       :0x0
18:15:19: Write Speed Factor R2W_FACTOR                 :0x2
18:15:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:19: FILE_FORMAT_GRP                               :0x0
18:15:19: COPY flag                                     :0x1
18:15:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:19: File_Format                                   :0x0
18:15:19: CRC                                           :0x0
18:15:19: ####CSD Registe Values####  

18:15:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 2357 ] 
18:15:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C90>, <py_sfcl.CommandDataDefinition object at 0x05E37EA0>) , Command count = 2358 ] 
18:15:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:19: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:19: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:19: [GetSCRRegisterEntry] Passed
18:15:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:19: Data_Status_After Erases          : 0
18:15:19: CPRM Security Support             : No Security
18:15:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:19: Spec. Version                     : Version 3.0X
18:15:19: Extended Security Support         : Extended_Security_Not_Supported
18:15:19: Command Support                   : COMMAND_SUPPORT
18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:19: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:15:19: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:15:19: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:19: [GetSCRRegisterEntry] Passed
18:15:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:19: Data_Status_After Erases          : 0
18:15:19: CPRM Security Support             : No Security
18:15:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:19: Spec. Version                     : Version 3.0X
18:15:19: Extended Security Support         : Extended_Security_Not_Supported
18:15:19: Command Support                   : COMMAND_SUPPORT
18:15:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:19: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:19: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2359 ] 
18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:15:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:21: Host Frequency set to 25000 KHz
18:15:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55F60>, 0x0, True) , Command count = 2360 ] 
18:15:21: [GO18_globalSetVolt]### Host voltage value is set.
18:15:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50C90>, 0x0, False) , Command count = 2361 ] 
18:15:21: [GO18_globalSetVolt]### Host voltage value is set.
18:15:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2362 ] 
18:15:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2363 ] 
18:15:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2364 ] 
18:15:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E37540>) , Command count = 2365 ] 
18:15:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37AE0>) , Command count = 2366 ] 
18:15:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2367 ] 
18:15:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:21: Host Frequency set to 25000 KHz
18:15:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:21: ####CSD Registe 2.0 Values####
18:15:21: CSD_STRUCTURE                                 :0x1
18:15:21: Reserv1                                       :0x0
18:15:21: Time Access 1 TAAC                            :0xe
18:15:21: Time Access 2 NSAC*100                        :0x0
18:15:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:21: Card Command Classess CCC                     :0x5b5
18:15:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:21: DSR(driver stage register)  DSR_IMP           :0x0
18:15:21: Reserv2                                       :0x0
18:15:21: Device Size C_SIZE                            :0xedc8
18:15:21: Reserv3                                       :0x0
18:15:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:21: Reserv4                                       :0x0
18:15:21: Write Speed Factor R2W_FACTOR                 :0x2
18:15:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:21: FILE_FORMAT_GRP                               :0x0
18:15:21: COPY flag                                     :0x1
18:15:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:21: File_Format                                   :0x0
18:15:21: CRC                                           :0x0
18:15:21: ####CSD Registe Values####  

18:15:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:21: [GetSCRRegisterEntry] Passed
18:15:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:21: Data_Status_After Erases          : 0
18:15:21: CPRM Security Support             : No Security
18:15:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:21: Spec. Version                     : Version 3.0X
18:15:21: Extended Security Support         : Extended_Security_Not_Supported
18:15:21: Command Support                   : COMMAND_SUPPORT
18:15:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37870>, <py_sfcl.CommandDataDefinition object at 0x05E37CC0>) , Command count = 2368 ] 
18:15:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554E0>, <py_sfcl.CommandDataDefinition object at 0x05E59390>) , Command count = 2369 ] 
18:15:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:21: [ SetBusWidth(0x4) , Command count = 2370 ] 
18:15:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2371 ] 
18:15:21: Protected Area Size 0x28000
18:15:21: Bus Width           2
18:15:21: Secure Mode         0
18:15:21: Speed  Class        4
18:15:21: Perf Move           0
18:15:21: Au Size             9
18:15:21: Erase Size          15
18:15:21: Erase Timeout       1
18:15:21: Erase offset        1
18:15:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2372 ] 
18:15:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:21: Host Frequency set to 100000 KHz
18:15:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:21: ####CSD Registe 2.0 Values####
18:15:21: CSD_STRUCTURE                                 :0x1
18:15:22: Reserv1                                       :0x0
18:15:22: Time Access 1 TAAC                            :0xe
18:15:22: Time Access 2 NSAC*100                        :0x0
18:15:22: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:22: Card Command Classess CCC                     :0x5b5
18:15:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:22: DSR(driver stage register)  DSR_IMP           :0x0
18:15:22: Reserv2                                       :0x0
18:15:22: Device Size C_SIZE                            :0xedc8
18:15:22: Reserv3                                       :0x0
18:15:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:22: Reserv4                                       :0x0
18:15:22: Write Speed Factor R2W_FACTOR                 :0x2
18:15:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:22: FILE_FORMAT_GRP                               :0x0
18:15:22: COPY flag                                     :0x1
18:15:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:22: File_Format                                   :0x0
18:15:22: CRC                                           :0x0
18:15:22: ####CSD Registe Values####  

18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py_sfcl.CommandDataDefinition object at 0x05E2DF00>) , Command count = 2373 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E2D870>) , Command count = 2374 ] 
18:15:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E50570>) , Command count = 2375 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F30>, <py_sfcl.CommandDataDefinition object at 0x05E37750>) , Command count = 2376 ] 
18:15:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDE10>, <py_sfcl.CommandDataDefinition object at 0x05E37930>) , Command count = 2377 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55210>, <py_sfcl.CommandDataDefinition object at 0x05D2A0C0>) , Command count = 2378 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A80>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 2379 ] 
18:15:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 2380 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E3E420>) , Command count = 2381 ] 
18:15:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37420>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 2382 ] 
18:15:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D840>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 2383 ] 
18:15:23: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554B0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 2384 ] 
18:15:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7E0>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 2385 ] 
18:15:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37780>, <py_sfcl.CommandDataDefinition object at 0x05E37570>) , Command count = 2386 ] 
18:15:23: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F9F0>) , Command count = 2387 ] 
18:15:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E37390>) , Command count = 2388 ] 
18:15:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:23: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:15:23: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:15:23: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:23: [GetSCRRegisterEntry] Passed
18:15:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:23: Data_Status_After Erases          : 0
18:15:23: CPRM Security Support             : No Security
18:15:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:23: Spec. Version                     : Version 3.0X
18:15:23: Extended Security Support         : Extended_Security_Not_Supported
18:15:23: Command Support                   : COMMAND_SUPPORT
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:23: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:23: [GetSCRRegisterEntry] Passed
18:15:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:23: Data_Status_After Erases          : 0
18:15:23: CPRM Security Support             : No Security
18:15:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:23: Spec. Version                     : Version 3.0X
18:15:23: Extended Security Support         : Extended_Security_Not_Supported
18:15:23: Command Support                   : COMMAND_SUPPORT
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:23: [GetSCRRegisterEntry] Passed
18:15:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:23: Data_Status_After Erases          : 0
18:15:23: CPRM Security Support             : No Security
18:15:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:23: Spec. Version                     : Version 3.0X
18:15:23: Extended Security Support         : Extended_Security_Not_Supported
18:15:23: Command Support                   : COMMAND_SUPPORT
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:23: [GetSCRRegisterEntry] Passed
18:15:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:23: Data_Status_After Erases          : 0
18:15:23: CPRM Security Support             : No Security
18:15:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:23: Spec. Version                     : Version 3.0X
18:15:23: Extended Security Support         : Extended_Security_Not_Supported
18:15:23: Command Support                   : COMMAND_SUPPORT
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:23: [GetSCRRegisterEntry] Passed
18:15:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:23: Data_Status_After Erases          : 0
18:15:23: CPRM Security Support             : No Security
18:15:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:23: Spec. Version                     : Version 3.0X
18:15:23: Extended Security Support         : Extended_Security_Not_Supported
18:15:23: Command Support                   : COMMAND_SUPPORT
18:15:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:23: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:15:23: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:15:23: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:15:23: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:15:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:23: Perform Power Off and On.
18:15:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2389 ] 
18:15:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B10>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 2390 ] 
18:15:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37690>, <py_sfcl.CommandDataDefinition object at 0x05E3E900>) , Command count = 2391 ] 
18:15:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2392 ] 
18:15:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:26: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:28: Host Frequency set to 25000 KHz
18:15:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:28: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37720>, 0x0, True) , Command count = 2393 ] 
18:15:28: [GO18_globalSetVolt]### Host voltage value is set.
18:15:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E390>, 0x0, False) , Command count = 2394 ] 
18:15:28: [GO18_globalSetVolt]### Host voltage value is set.
18:15:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2395 ] 
18:15:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2396 ] 
18:15:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2397 ] 
18:15:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 2398 ] 
18:15:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37E40>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 2399 ] 
18:15:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:28: [ SetCardRCA(0x1, 0xD555) , Command count = 2400 ] 
18:15:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:28: Host Frequency set to 25000 KHz
18:15:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:28: ####CSD Registe 2.0 Values####
18:15:28: CSD_STRUCTURE                                 :0x1
18:15:28: Reserv1                                       :0x0
18:15:28: Time Access 1 TAAC                            :0xe
18:15:28: Time Access 2 NSAC*100                        :0x0
18:15:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:28: Card Command Classess CCC                     :0x5b5
18:15:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:28: DSR(driver stage register)  DSR_IMP           :0x0
18:15:28: Reserv2                                       :0x0
18:15:28: Device Size C_SIZE                            :0xedc8
18:15:28: Reserv3                                       :0x0
18:15:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:28: Reserv4                                       :0x0
18:15:28: Write Speed Factor R2W_FACTOR                 :0x2
18:15:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:28: FILE_FORMAT_GRP                               :0x0
18:15:28: COPY flag                                     :0x1
18:15:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:28: File_Format                                   :0x0
18:15:28: CRC                                           :0x0
18:15:28: ####CSD Registe Values####  

18:15:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:28: [GetSCRRegisterEntry] Passed
18:15:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:28: Data_Status_After Erases          : 0
18:15:28: CPRM Security Support             : No Security
18:15:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:28: Spec. Version                     : Version 3.0X
18:15:28: Extended Security Support         : Extended_Security_Not_Supported
18:15:28: Command Support                   : COMMAND_SUPPORT
18:15:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DB70>, <py_sfcl.CommandDataDefinition object at 0x05E3EF90>) , Command count = 2401 ] 
18:15:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC90>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 2402 ] 
18:15:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:28: [ SetBusWidth(0x4) , Command count = 2403 ] 
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2404 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2405 ] 
18:15:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:28: Host Frequency set to 100000 KHz
18:15:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:28: ####CSD Registe 2.0 Values####
18:15:28: CSD_STRUCTURE                                 :0x1
18:15:28: Reserv1                                       :0x0
18:15:28: Time Access 1 TAAC                            :0xe
18:15:28: Time Access 2 NSAC*100                        :0x0
18:15:28: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:28: Card Command Classess CCC                     :0x5b5
18:15:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:28: DSR(driver stage register)  DSR_IMP           :0x0
18:15:28: Reserv2                                       :0x0
18:15:28: Device Size C_SIZE                            :0xedc8
18:15:28: Reserv3                                       :0x0
18:15:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:28: Reserv4                                       :0x0
18:15:28: Write Speed Factor R2W_FACTOR                 :0x2
18:15:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:28: FILE_FORMAT_GRP                               :0x0
18:15:28: COPY flag                                     :0x1
18:15:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:28: File_Format                                   :0x0
18:15:28: CRC                                           :0x0
18:15:28: ####CSD Registe Values####  

18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 2406 ] 
18:15:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D720>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 2407 ] 
18:15:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:28: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:28: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2408 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:15:28: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2409 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2410 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2411 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2412 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2413 ] 
18:15:28: Protected Area Size 0x28000
18:15:28: Bus Width           2
18:15:28: Secure Mode         0
18:15:28: Speed  Class        4
18:15:28: Perf Move           0
18:15:28: Au Size             9
18:15:28: Erase Size          15
18:15:28: Erase Timeout       1
18:15:28: Erase offset        1
18:15:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:15:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:15:28: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 8 

18:15:28: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

18:15:31: [ HostReset(False) , Command count = 2414 ] 
18:15:31: [ SetSpecialModes(0x5, True) , Command count = 2415 ] 
18:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 2416 ] 
18:15:31: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 2417 ] 
18:15:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DF60>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 2418 ] 
18:15:31: [ GetCardStatus() , Command count = 2419 ] 
18:15:31: ACmd51[ SEND_SCR ] Failed with an exception
18:15:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555A0>, <py_sfcl.CommandDataDefinition object at 0x05E50180>) , Command count = 2420 ] 
18:15:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E5D0>) , Command count = 2421 ] 
18:15:31: [ GetCardStatus() , Command count = 2422 ] 
18:15:31: ACMD13[ SD_STATUS ] Failed with an exception
18:15:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:15:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

18:15:33: [ HostReset(False) , Command count = 2423 ] 
18:15:33: [ SetSpecialModes(0x5, True) , Command count = 2424 ] 
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 2425 ] 
18:15:33: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x052C2AE0>) , Command count = 2426 ] 
18:15:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E441B0>, <py_sfcl.CommandDataDefinition object at 0x05E3EA20>) , Command count = 2427 ] 
18:15:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E240>, <py_sfcl.CommandDataDefinition object at 0x05E59690>) , Command count = 2428 ] 
18:15:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E720>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 2429 ] 
18:15:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E443C0>, <py_sfcl.CommandDataDefinition object at 0x05E44BD0>) , Command count = 2430 ] 
18:15:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E810>, <py_sfcl.CommandDataDefinition object at 0x05E44B40>) , Command count = 2431 ] 
18:15:33: [ GetCardStatus() , Command count = 2432 ] 
18:15:33: ACmd51[ SEND_SCR ] Failed with an exception
18:15:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5D0>, <py_sfcl.CommandDataDefinition object at 0x05E445A0>) , Command count = 2433 ] 
18:15:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:15:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E595A0>) , Command count = 2434 ] 
18:15:33: [ GetCardStatus() , Command count = 2435 ] 
18:15:33: ACMD13[ SD_STATUS ] Failed with an exception
18:15:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

18:15:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

18:15:36: Failed Running script <module 'CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest.pyc'> with error  
18:15:36: ########################################
18:15:36: ########################################
18:15:36: Stated Running script CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest 
18:15:36: ########################################
18:15:36: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest]###### Running SCRVerify Test 
18:15:36: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] ### TEST SCRIPT EXECUTION IS STARTED.
18:15:36: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Call Utility_Load_SCR_SDStatus_Variables
18:15:36: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:36: Perform Power Off and On.
18:15:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2436 ] 
18:15:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E44A80>) , Command count = 2437 ] 
18:15:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F210>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 2438 ] 
18:15:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2439 ] 
18:15:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:38: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:40: Host Frequency set to 25000 KHz
18:15:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:40: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44570>, 0x0, True) , Command count = 2440 ] 
18:15:40: [GO18_globalSetVolt]### Host voltage value is set.
18:15:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDB10>, 0x0, False) , Command count = 2441 ] 
18:15:40: [GO18_globalSetVolt]### Host voltage value is set.
18:15:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2442 ] 
18:15:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2443 ] 
18:15:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2444 ] 
18:15:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B70>, <py_sfcl.CommandDataDefinition object at 0x05E447B0>) , Command count = 2445 ] 
18:15:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 2446 ] 
18:15:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2447 ] 
18:15:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:40: Host Frequency set to 25000 KHz
18:15:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:40: ####CSD Registe 2.0 Values####
18:15:40: CSD_STRUCTURE                                 :0x1
18:15:40: Reserv1                                       :0x0
18:15:40: Time Access 1 TAAC                            :0xe
18:15:40: Time Access 2 NSAC*100                        :0x0
18:15:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:40: Card Command Classess CCC                     :0x5b5
18:15:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:40: DSR(driver stage register)  DSR_IMP           :0x0
18:15:40: Reserv2                                       :0x0
18:15:40: Device Size C_SIZE                            :0xedc8
18:15:40: Reserv3                                       :0x0
18:15:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:40: Reserv4                                       :0x0
18:15:40: Write Speed Factor R2W_FACTOR                 :0x2
18:15:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:40: FILE_FORMAT_GRP                               :0x0
18:15:40: COPY flag                                     :0x1
18:15:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:40: File_Format                                   :0x0
18:15:40: CRC                                           :0x0
18:15:40: ####CSD Registe Values####  

18:15:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:40: [GetSCRRegisterEntry] Passed
18:15:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:40: Data_Status_After Erases          : 0
18:15:40: CPRM Security Support             : No Security
18:15:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:40: Spec. Version                     : Version 3.0X
18:15:40: Extended Security Support         : Extended_Security_Not_Supported
18:15:40: Command Support                   : COMMAND_SUPPORT
18:15:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F630>, <py_sfcl.CommandDataDefinition object at 0x05E4F4B0>) , Command count = 2448 ] 
18:15:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F090>, <py_sfcl.CommandDataDefinition object at 0x05E59CC0>) , Command count = 2449 ] 
18:15:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:40: [ SetBusWidth(0x4) , Command count = 2450 ] 
18:15:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2451 ] 
18:15:40: Protected Area Size 0x28000
18:15:40: Bus Width           2
18:15:40: Secure Mode         0
18:15:40: Speed  Class        4
18:15:40: Perf Move           0
18:15:40: Au Size             9
18:15:40: Erase Size          15
18:15:40: Erase Timeout       1
18:15:40: Erase offset        1
18:15:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2452 ] 
18:15:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:40: Host Frequency set to 100000 KHz
18:15:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:40: ####CSD Registe 2.0 Values####
18:15:40: CSD_STRUCTURE                                 :0x1
18:15:41: Reserv1                                       :0x0
18:15:41: Time Access 1 TAAC                            :0xe
18:15:41: Time Access 2 NSAC*100                        :0x0
18:15:41: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:41: Card Command Classess CCC                     :0x5b5
18:15:41: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:41: DSR(driver stage register)  DSR_IMP           :0x0
18:15:41: Reserv2                                       :0x0
18:15:41: Device Size C_SIZE                            :0xedc8
18:15:41: Reserv3                                       :0x0
18:15:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:41: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:41: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:41: Reserv4                                       :0x0
18:15:41: Write Speed Factor R2W_FACTOR                 :0x2
18:15:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:41: FILE_FORMAT_GRP                               :0x0
18:15:41: COPY flag                                     :0x1
18:15:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:41: File_Format                                   :0x0
18:15:41: CRC                                           :0x0
18:15:41: ####CSD Registe Values####  

18:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E44240>) , Command count = 2453 ] 
18:15:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC00>, <py_sfcl.CommandDataDefinition object at 0x05E59CC0>) , Command count = 2454 ] 
18:15:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:41: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:41: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:41: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:15:41: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:15:41: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:15:41: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:41: Perform Power Off and On.
18:15:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2455 ] 
18:15:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA80>, <py_sfcl.CommandDataDefinition object at 0x05E4F7E0>) , Command count = 2456 ] 
18:15:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F360>) , Command count = 2457 ] 
18:15:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2458 ] 
18:15:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:43: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:45: Host Frequency set to 25000 KHz
18:15:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:45: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F720>, 0x0, True) , Command count = 2459 ] 
18:15:45: [GO18_globalSetVolt]### Host voltage value is set.
18:15:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F2A0>, 0x0, False) , Command count = 2460 ] 
18:15:45: [GO18_globalSetVolt]### Host voltage value is set.
18:15:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2461 ] 
18:15:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2462 ] 
18:15:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2463 ] 
18:15:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E4F600>) , Command count = 2464 ] 
18:15:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F780>) , Command count = 2465 ] 
18:15:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:45: [ SetCardRCA(0x1, 0xD555) , Command count = 2466 ] 
18:15:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:46: Host Frequency set to 25000 KHz
18:15:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:46: ####CSD Registe 2.0 Values####
18:15:46: CSD_STRUCTURE                                 :0x1
18:15:46: Reserv1                                       :0x0
18:15:46: Time Access 1 TAAC                            :0xe
18:15:46: Time Access 2 NSAC*100                        :0x0
18:15:46: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:46: Card Command Classess CCC                     :0x5b5
18:15:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:46: DSR(driver stage register)  DSR_IMP           :0x0
18:15:46: Reserv2                                       :0x0
18:15:46: Device Size C_SIZE                            :0xedc8
18:15:46: Reserv3                                       :0x0
18:15:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:46: Reserv4                                       :0x0
18:15:46: Write Speed Factor R2W_FACTOR                 :0x2
18:15:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:46: FILE_FORMAT_GRP                               :0x0
18:15:46: COPY flag                                     :0x1
18:15:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:46: File_Format                                   :0x0
18:15:46: CRC                                           :0x0
18:15:46: ####CSD Registe Values####  

18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:46: [GetSCRRegisterEntry] Passed
18:15:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:46: Data_Status_After Erases          : 0
18:15:46: CPRM Security Support             : No Security
18:15:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:46: Spec. Version                     : Version 3.0X
18:15:46: Extended Security Support         : Extended_Security_Not_Supported
18:15:46: Command Support                   : COMMAND_SUPPORT
18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA420>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 2467 ] 
18:15:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44540>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 2468 ] 
18:15:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:46: [ SetBusWidth(0x4) , Command count = 2469 ] 
18:15:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2470 ] 
18:15:46: Protected Area Size 0x28000
18:15:46: Bus Width           2
18:15:46: Secure Mode         0
18:15:46: Speed  Class        4
18:15:46: Perf Move           0
18:15:46: Au Size             9
18:15:46: Erase Size          15
18:15:46: Erase Timeout       1
18:15:46: Erase offset        1
18:15:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2471 ] 
18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:46: Host Frequency set to 100000 KHz
18:15:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:46: ####CSD Registe 2.0 Values####
18:15:46: CSD_STRUCTURE                                 :0x1
18:15:46: Reserv1                                       :0x0
18:15:46: Time Access 1 TAAC                            :0xe
18:15:46: Time Access 2 NSAC*100                        :0x0
18:15:46: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:46: Card Command Classess CCC                     :0x5b5
18:15:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:46: DSR(driver stage register)  DSR_IMP           :0x0
18:15:46: Reserv2                                       :0x0
18:15:46: Device Size C_SIZE                            :0xedc8
18:15:46: Reserv3                                       :0x0
18:15:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:46: Reserv4                                       :0x0
18:15:46: Write Speed Factor R2W_FACTOR                 :0x2
18:15:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:46: FILE_FORMAT_GRP                               :0x0
18:15:46: COPY flag                                     :0x1
18:15:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:46: File_Format                                   :0x0
18:15:46: CRC                                           :0x0
18:15:46: ####CSD Registe Values####  

18:15:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E600>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 2472 ] 
18:15:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 2473 ] 
18:15:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:46: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:46: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:46: [GetSCRRegisterEntry] Passed
18:15:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:46: Data_Status_After Erases          : 0
18:15:46: CPRM Security Support             : No Security
18:15:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:46: Spec. Version                     : Version 3.0X
18:15:46: Extended Security Support         : Extended_Security_Not_Supported
18:15:46: Command Support                   : COMMAND_SUPPORT
18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:46: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:15:46: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:15:46: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:46: [GetSCRRegisterEntry] Passed
18:15:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:46: Data_Status_After Erases          : 0
18:15:46: CPRM Security Support             : No Security
18:15:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:46: Spec. Version                     : Version 3.0X
18:15:46: Extended Security Support         : Extended_Security_Not_Supported
18:15:46: Command Support                   : COMMAND_SUPPORT
18:15:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:46: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:46: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2474 ] 
18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:15:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:46: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:48: Host Frequency set to 25000 KHz
18:15:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:48: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F870>, 0x0, True) , Command count = 2475 ] 
18:15:48: [GO18_globalSetVolt]### Host voltage value is set.
18:15:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50390>, 0x0, False) , Command count = 2476 ] 
18:15:48: [GO18_globalSetVolt]### Host voltage value is set.
18:15:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2477 ] 
18:15:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2478 ] 
18:15:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2479 ] 
18:15:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 2480 ] 
18:15:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E4FBD0>) , Command count = 2481 ] 
18:15:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2482 ] 
18:15:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:48: Host Frequency set to 25000 KHz
18:15:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:48: ####CSD Registe 2.0 Values####
18:15:48: CSD_STRUCTURE                                 :0x1
18:15:48: Reserv1                                       :0x0
18:15:48: Time Access 1 TAAC                            :0xe
18:15:48: Time Access 2 NSAC*100                        :0x0
18:15:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:48: Card Command Classess CCC                     :0x5b5
18:15:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:48: DSR(driver stage register)  DSR_IMP           :0x0
18:15:48: Reserv2                                       :0x0
18:15:48: Device Size C_SIZE                            :0xedc8
18:15:48: Reserv3                                       :0x0
18:15:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:48: Reserv4                                       :0x0
18:15:48: Write Speed Factor R2W_FACTOR                 :0x2
18:15:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:48: FILE_FORMAT_GRP                               :0x0
18:15:48: COPY flag                                     :0x1
18:15:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:48: File_Format                                   :0x0
18:15:48: CRC                                           :0x0
18:15:48: ####CSD Registe Values####  

18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44600>, <py_sfcl.CommandDataDefinition object at 0x05E37630>) , Command count = 2483 ] 
18:15:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E372D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 2484 ] 
18:15:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:48: [ SetBusWidth(0x4) , Command count = 2485 ] 
18:15:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E503F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2486 ] 
18:15:48: Protected Area Size 0x28000
18:15:48: Bus Width           2
18:15:48: Secure Mode         0
18:15:48: Speed  Class        4
18:15:48: Perf Move           0
18:15:48: Au Size             9
18:15:48: Erase Size          15
18:15:48: Erase Timeout       1
18:15:48: Erase offset        1
18:15:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2487 ] 
18:15:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:48: Host Frequency set to 100000 KHz
18:15:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:48: ####CSD Registe 2.0 Values####
18:15:48: CSD_STRUCTURE                                 :0x1
18:15:48: Reserv1                                       :0x0
18:15:48: Time Access 1 TAAC                            :0xe
18:15:48: Time Access 2 NSAC*100                        :0x0
18:15:48: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:48: Card Command Classess CCC                     :0x5b5
18:15:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:48: DSR(driver stage register)  DSR_IMP           :0x0
18:15:48: Reserv2                                       :0x0
18:15:48: Device Size C_SIZE                            :0xedc8
18:15:48: Reserv3                                       :0x0
18:15:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:48: Reserv4                                       :0x0
18:15:48: Write Speed Factor R2W_FACTOR                 :0x2
18:15:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:48: FILE_FORMAT_GRP                               :0x0
18:15:48: COPY flag                                     :0x1
18:15:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:48: File_Format                                   :0x0
18:15:48: CRC                                           :0x0
18:15:48: ####CSD Registe Values####  

18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44DE0>, <py_sfcl.CommandDataDefinition object at 0x05E4F9C0>) , Command count = 2488 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E4F570>) , Command count = 2489 ] 
18:15:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50450>, <py_sfcl.CommandDataDefinition object at 0x05E4F240>) , Command count = 2490 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59CC0>, <py_sfcl.CommandDataDefinition object at 0x05E591B0>) , Command count = 2491 ] 
18:15:48: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E59BA0>) , Command count = 2492 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50420>, <py_sfcl.CommandDataDefinition object at 0x05E50990>) , Command count = 2493 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F060>) , Command count = 2494 ] 
18:15:48: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E507E0>, <py_sfcl.CommandDataDefinition object at 0x05E59930>) , Command count = 2495 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E50AE0>) , Command count = 2496 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50210>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 2497 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59930>, <py_sfcl.CommandDataDefinition object at 0x05E59990>) , Command count = 2498 ] 
18:15:48: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37810>, <py_sfcl.CommandDataDefinition object at 0x05E50090>) , Command count = 2499 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50930>, <py_sfcl.CommandDataDefinition object at 0x05E44690>) , Command count = 2500 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E508A0>) , Command count = 2501 ] 
18:15:48: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F690>, <py_sfcl.CommandDataDefinition object at 0x05E503C0>) , Command count = 2502 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E4FCC0>) , Command count = 2503 ] 
18:15:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:15:48: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:15:48: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:15:48: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:48: [GetSCRRegisterEntry] Passed
18:15:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:48: Data_Status_After Erases          : 0
18:15:48: CPRM Security Support             : No Security
18:15:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:48: Spec. Version                     : Version 3.0X
18:15:48: Extended Security Support         : Extended_Security_Not_Supported
18:15:48: Command Support                   : COMMAND_SUPPORT
18:15:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:48: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Verify SCR Combined Scenarios - check CHECK_IF_UHS_CARD and Command_Support Cmd 23 values
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] CHECK_IF_UHS_CARD
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] CHECK_IF_UHS_CARD value is : 0X 
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Check the CARD_CAPACITY and check Command_Support Cmd20 values
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Card Capacity is : 32.000000 GB
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Command Support is 1X value 
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] And so Command Cmd20 is not supported
18:15:48: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] ### TEST SCRIPT EXECUTION IS ENDED.
18:15:48: ########################################
18:15:48: Finished Running script CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest 
18:15:48: ########################################
18:15:48: ########################################
18:15:48: Stated Running script CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest 
18:15:48: ########################################
18:15:49: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest]###### Running SCRVerify Test 
18:15:49: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] ### TEST SCRIPT EXECUTION IS STARTED.
18:15:49: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Call Utility_Load_SCR_SDStatus_Variables
18:15:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:49: Perform Power Off and On.
18:15:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2504 ] 
18:15:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50BA0>, <py_sfcl.CommandDataDefinition object at 0x05E505D0>) , Command count = 2505 ] 
18:15:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E4FB10>) , Command count = 2506 ] 
18:15:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2507 ] 
18:15:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:51: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:53: Host Frequency set to 25000 KHz
18:15:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:53: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55A20>, 0x0, True) , Command count = 2508 ] 
18:15:53: [GO18_globalSetVolt]### Host voltage value is set.
18:15:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBD80>, 0x0, False) , Command count = 2509 ] 
18:15:53: [GO18_globalSetVolt]### Host voltage value is set.
18:15:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2510 ] 
18:15:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2511 ] 
18:15:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2512 ] 
18:15:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 2513 ] 
18:15:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CF0>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 2514 ] 
18:15:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:53: [ SetCardRCA(0x1, 0xD555) , Command count = 2515 ] 
18:15:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:53: Host Frequency set to 25000 KHz
18:15:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:53: ####CSD Registe 2.0 Values####
18:15:53: CSD_STRUCTURE                                 :0x1
18:15:53: Reserv1                                       :0x0
18:15:53: Time Access 1 TAAC                            :0xe
18:15:53: Time Access 2 NSAC*100                        :0x0
18:15:53: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:53: Card Command Classess CCC                     :0x5b5
18:15:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:53: DSR(driver stage register)  DSR_IMP           :0x0
18:15:53: Reserv2                                       :0x0
18:15:53: Device Size C_SIZE                            :0xedc8
18:15:53: Reserv3                                       :0x0
18:15:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:53: Reserv4                                       :0x0
18:15:53: Write Speed Factor R2W_FACTOR                 :0x2
18:15:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:53: FILE_FORMAT_GRP                               :0x0
18:15:53: COPY flag                                     :0x1
18:15:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:53: File_Format                                   :0x0
18:15:53: CRC                                           :0x0
18:15:53: ####CSD Registe Values####  

18:15:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:53: [GetSCRRegisterEntry] Passed
18:15:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:53: Data_Status_After Erases          : 0
18:15:53: CPRM Security Support             : No Security
18:15:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:53: Spec. Version                     : Version 3.0X
18:15:53: Extended Security Support         : Extended_Security_Not_Supported
18:15:53: Command Support                   : COMMAND_SUPPORT
18:15:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 2516 ] 
18:15:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 2517 ] 
18:15:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:53: [ SetBusWidth(0x4) , Command count = 2518 ] 
18:15:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2519 ] 
18:15:53: Protected Area Size 0x28000
18:15:53: Bus Width           2
18:15:53: Secure Mode         0
18:15:53: Speed  Class        4
18:15:53: Perf Move           0
18:15:53: Au Size             9
18:15:53: Erase Size          15
18:15:53: Erase Timeout       1
18:15:53: Erase offset        1
18:15:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2520 ] 
18:15:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:53: Host Frequency set to 100000 KHz
18:15:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:53: ####CSD Registe 2.0 Values####
18:15:53: CSD_STRUCTURE                                 :0x1
18:15:53: Reserv1                                       :0x0
18:15:53: Time Access 1 TAAC                            :0xe
18:15:53: Time Access 2 NSAC*100                        :0x0
18:15:53: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:53: Card Command Classess CCC                     :0x5b5
18:15:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:53: DSR(driver stage register)  DSR_IMP           :0x0
18:15:53: Reserv2                                       :0x0
18:15:53: Device Size C_SIZE                            :0xedc8
18:15:53: Reserv3                                       :0x0
18:15:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:53: Reserv4                                       :0x0
18:15:53: Write Speed Factor R2W_FACTOR                 :0x2
18:15:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:53: FILE_FORMAT_GRP                               :0x0
18:15:53: COPY flag                                     :0x1
18:15:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:53: File_Format                                   :0x0
18:15:53: CRC                                           :0x0
18:15:53: ####CSD Registe Values####  

18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D80>, <py_sfcl.CommandDataDefinition object at 0x05E55450>) , Command count = 2521 ] 
18:15:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E509F0>) , Command count = 2522 ] 
18:15:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:53: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:15:53: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:15:53: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:15:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:15:53: Perform Power Off and On.
18:15:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2523 ] 
18:15:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:15:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F330>, <py_sfcl.CommandDataDefinition object at 0x05E50C00>) , Command count = 2524 ] 
18:15:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 2525 ] 
18:15:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:15:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2526 ] 
18:15:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:56: [GO4_globalInitCard]### Switch to Specify Card Type
18:15:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:58: Host Frequency set to 25000 KHz
18:15:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:58: [GO18_globalSetVolt]### Set Host Voltage value.
18:15:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:15:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3E180>, 0x0, True) , Command count = 2527 ] 
18:15:58: [GO18_globalSetVolt]### Host voltage value is set.
18:15:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:15:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F3C0>, 0x0, False) , Command count = 2528 ] 
18:15:58: [GO18_globalSetVolt]### Host voltage value is set.
18:15:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2529 ] 
18:15:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:15:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2530 ] 
18:15:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:15:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:15:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:15:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:15:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:15:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2531 ] 
18:15:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:15:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 2532 ] 
18:15:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 2533 ] 
18:15:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:15:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2534 ] 
18:15:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:15:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:15:58: Host Frequency set to 25000 KHz
18:15:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:15:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:58: ####CSD Registe 2.0 Values####
18:15:58: CSD_STRUCTURE                                 :0x1
18:15:58: Reserv1                                       :0x0
18:15:58: Time Access 1 TAAC                            :0xe
18:15:58: Time Access 2 NSAC*100                        :0x0
18:15:58: Data Transfer Rate TRAN_SPEED                 :0x32
18:15:58: Card Command Classess CCC                     :0x5b5
18:15:58: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:58: DSR(driver stage register)  DSR_IMP           :0x0
18:15:58: Reserv2                                       :0x0
18:15:58: Device Size C_SIZE                            :0xedc8
18:15:58: Reserv3                                       :0x0
18:15:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:58: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:58: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:58: Reserv4                                       :0x0
18:15:58: Write Speed Factor R2W_FACTOR                 :0x2
18:15:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:58: FILE_FORMAT_GRP                               :0x0
18:15:58: COPY flag                                     :0x1
18:15:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:58: File_Format                                   :0x0
18:15:58: CRC                                           :0x0
18:15:58: ####CSD Registe Values####  

18:15:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:58: [GetSCRRegisterEntry] Passed
18:15:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:58: Data_Status_After Erases          : 0
18:15:58: CPRM Security Support             : No Security
18:15:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:58: Spec. Version                     : Version 3.0X
18:15:58: Extended Security Support         : Extended_Security_Not_Supported
18:15:58: Command Support                   : COMMAND_SUPPORT
18:15:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555D0>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 2535 ] 
18:15:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EAE0>, <py_sfcl.CommandDataDefinition object at 0x05E502A0>) , Command count = 2536 ] 
18:15:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:15:58: [ SetBusWidth(0x4) , Command count = 2537 ] 
18:15:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:15:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2538 ] 
18:15:58: Protected Area Size 0x28000
18:15:58: Bus Width           2
18:15:58: Secure Mode         0
18:15:58: Speed  Class        4
18:15:58: Perf Move           0
18:15:58: Au Size             9
18:15:58: Erase Size          15
18:15:58: Erase Timeout       1
18:15:58: Erase offset        1
18:15:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:15:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:15:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2539 ] 
18:15:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:15:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:15:58: Host Frequency set to 100000 KHz
18:15:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:15:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:15:58: ####CSD Registe 2.0 Values####
18:15:58: CSD_STRUCTURE                                 :0x1
18:15:59: Reserv1                                       :0x0
18:15:59: Time Access 1 TAAC                            :0xe
18:15:59: Time Access 2 NSAC*100                        :0x0
18:15:59: Data Transfer Rate TRAN_SPEED                 :0xb
18:15:59: Card Command Classess CCC                     :0x5b5
18:15:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:15:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:15:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:15:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:15:59: DSR(driver stage register)  DSR_IMP           :0x0
18:15:59: Reserv2                                       :0x0
18:15:59: Device Size C_SIZE                            :0xedc8
18:15:59: Reserv3                                       :0x0
18:15:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:15:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:15:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:15:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:15:59: Reserv4                                       :0x0
18:15:59: Write Speed Factor R2W_FACTOR                 :0x2
18:15:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:15:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:15:59: FILE_FORMAT_GRP                               :0x0
18:15:59: COPY flag                                     :0x1
18:15:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:15:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:15:59: File_Format                                   :0x0
18:15:59: CRC                                           :0x0
18:15:59: ####CSD Registe Values####  

18:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x052BB570>) , Command count = 2540 ] 
18:15:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E551E0>) , Command count = 2541 ] 
18:15:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:15:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:15:59: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:15:59: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:15:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:59: [GetSCRRegisterEntry] Passed
18:15:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:59: Data_Status_After Erases          : 0
18:15:59: CPRM Security Support             : No Security
18:15:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:59: Spec. Version                     : Version 3.0X
18:15:59: Extended Security Support         : Extended_Security_Not_Supported
18:15:59: Command Support                   : COMMAND_SUPPORT
18:15:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:59: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:15:59: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:15:59: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:15:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:15:59: [GetSCRRegisterEntry] Passed
18:15:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:15:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:15:59: Data_Status_After Erases          : 0
18:15:59: CPRM Security Support             : No Security
18:15:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:15:59: Spec. Version                     : Version 3.0X
18:15:59: Extended Security Support         : Extended_Security_Not_Supported
18:15:59: Command Support                   : COMMAND_SUPPORT
18:15:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:15:59: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:15:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:15:59: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2542 ] 
18:15:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:15:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:15:59: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:01: Host Frequency set to 25000 KHz
18:16:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:01: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50540>, 0x0, True) , Command count = 2543 ] 
18:16:01: [GO18_globalSetVolt]### Host voltage value is set.
18:16:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50840>, 0x0, False) , Command count = 2544 ] 
18:16:01: [GO18_globalSetVolt]### Host voltage value is set.
18:16:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2545 ] 
18:16:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2546 ] 
18:16:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2547 ] 
18:16:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF60>) , Command count = 2548 ] 
18:16:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x052CDDE0>) , Command count = 2549 ] 
18:16:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2550 ] 
18:16:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:02: Host Frequency set to 25000 KHz
18:16:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:02: ####CSD Registe 2.0 Values####
18:16:02: CSD_STRUCTURE                                 :0x1
18:16:02: Reserv1                                       :0x0
18:16:02: Time Access 1 TAAC                            :0xe
18:16:02: Time Access 2 NSAC*100                        :0x0
18:16:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:02: Card Command Classess CCC                     :0x5b5
18:16:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:02: DSR(driver stage register)  DSR_IMP           :0x0
18:16:02: Reserv2                                       :0x0
18:16:02: Device Size C_SIZE                            :0xedc8
18:16:02: Reserv3                                       :0x0
18:16:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:02: Reserv4                                       :0x0
18:16:02: Write Speed Factor R2W_FACTOR                 :0x2
18:16:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:02: FILE_FORMAT_GRP                               :0x0
18:16:02: COPY flag                                     :0x1
18:16:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:02: File_Format                                   :0x0
18:16:02: CRC                                           :0x0
18:16:02: ####CSD Registe Values####  

18:16:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:02: [GetSCRRegisterEntry] Passed
18:16:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:02: Data_Status_After Erases          : 0
18:16:02: CPRM Security Support             : No Security
18:16:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:02: Spec. Version                     : Version 3.0X
18:16:02: Extended Security Support         : Extended_Security_Not_Supported
18:16:02: Command Support                   : COMMAND_SUPPORT
18:16:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 2551 ] 
18:16:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E597E0>) , Command count = 2552 ] 
18:16:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:02: [ SetBusWidth(0x4) , Command count = 2553 ] 
18:16:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E506C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2554 ] 
18:16:02: Protected Area Size 0x28000
18:16:02: Bus Width           2
18:16:02: Secure Mode         0
18:16:02: Speed  Class        4
18:16:02: Perf Move           0
18:16:02: Au Size             9
18:16:02: Erase Size          15
18:16:02: Erase Timeout       1
18:16:02: Erase offset        1
18:16:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2555 ] 
18:16:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:02: Host Frequency set to 100000 KHz
18:16:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:02: ####CSD Registe 2.0 Values####
18:16:02: CSD_STRUCTURE                                 :0x1
18:16:02: Reserv1                                       :0x0
18:16:02: Time Access 1 TAAC                            :0xe
18:16:02: Time Access 2 NSAC*100                        :0x0
18:16:02: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:02: Card Command Classess CCC                     :0x5b5
18:16:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:02: DSR(driver stage register)  DSR_IMP           :0x0
18:16:02: Reserv2                                       :0x0
18:16:02: Device Size C_SIZE                            :0xedc8
18:16:02: Reserv3                                       :0x0
18:16:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:02: Reserv4                                       :0x0
18:16:02: Write Speed Factor R2W_FACTOR                 :0x2
18:16:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:02: FILE_FORMAT_GRP                               :0x0
18:16:02: COPY flag                                     :0x1
18:16:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:02: File_Format                                   :0x0
18:16:02: CRC                                           :0x0
18:16:02: ####CSD Registe Values####  

18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E55BD0>) , Command count = 2556 ] 
18:16:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 2557 ] 
18:16:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 2558 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E55240>) , Command count = 2559 ] 
18:16:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5D0>, <py_sfcl.CommandDataDefinition object at 0x05E597E0>) , Command count = 2560 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 2561 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E59240>) , Command count = 2562 ] 
18:16:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55690>, <py_sfcl.CommandDataDefinition object at 0x05E59AB0>) , Command count = 2563 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E44180>) , Command count = 2564 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2A0>, <py_sfcl.CommandDataDefinition object at 0x05E590F0>) , Command count = 2565 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55D80>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 2566 ] 
18:16:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB70>, <py_sfcl.CommandDataDefinition object at 0x05E558A0>) , Command count = 2567 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AB0>, <py_sfcl.CommandDataDefinition object at 0x05E55C90>) , Command count = 2568 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA6F0>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 2569 ] 
18:16:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E59E70>) , Command count = 2570 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05E55C00>) , Command count = 2571 ] 
18:16:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:03: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:16:03: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:16:03: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:16:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:04: [GetSCRRegisterEntry] Passed
18:16:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:04: Data_Status_After Erases          : 0
18:16:04: CPRM Security Support             : No Security
18:16:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:04: Spec. Version                     : Version 3.0X
18:16:04: Extended Security Support         : Extended_Security_Not_Supported
18:16:04: Command Support                   : COMMAND_SUPPORT
18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:04: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:04: [GetSCRRegisterEntry] Passed
18:16:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:04: Data_Status_After Erases          : 0
18:16:04: CPRM Security Support             : No Security
18:16:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:04: Spec. Version                     : Version 3.0X
18:16:04: Extended Security Support         : Extended_Security_Not_Supported
18:16:04: Command Support                   : COMMAND_SUPPORT
18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:04: [GetSCRRegisterEntry] Passed
18:16:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:04: Data_Status_After Erases          : 0
18:16:04: CPRM Security Support             : No Security
18:16:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:04: Spec. Version                     : Version 3.0X
18:16:04: Extended Security Support         : Extended_Security_Not_Supported
18:16:04: Command Support                   : COMMAND_SUPPORT
18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:04: [GetSCRRegisterEntry] Passed
18:16:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:04: Data_Status_After Erases          : 0
18:16:04: CPRM Security Support             : No Security
18:16:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:04: Spec. Version                     : Version 3.0X
18:16:04: Extended Security Support         : Extended_Security_Not_Supported
18:16:04: Command Support                   : COMMAND_SUPPORT
18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:04: [GetSCRRegisterEntry] Passed
18:16:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:04: Data_Status_After Erases          : 0
18:16:04: CPRM Security Support             : No Security
18:16:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:04: Spec. Version                     : Version 3.0X
18:16:04: Extended Security Support         : Extended_Security_Not_Supported
18:16:04: Command Support                   : COMMAND_SUPPORT
18:16:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:04: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:16:04: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] SD Status -> Fields Manipulation
18:16:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:04: [ SetBusWidth(0x4) , Command count = 2572 ] 
18:16:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2573 ] 
18:16:04: Protected Area Size 0x28000
18:16:04: Bus Width           2
18:16:04: Secure Mode         0
18:16:04: Speed  Class        4
18:16:04: Perf Move           0
18:16:04: Au Size             9
18:16:04: Erase Size          15
18:16:04: Erase Timeout       1
18:16:04: Erase offset        1
18:16:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:04: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:04: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check the Reset and idfentifiation of the card for different counter values
18:16:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:04: [ SetBusWidth(0x4) , Command count = 2574 ] 
18:16:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2575 ] 
18:16:04: Protected Area Size 0x28000
18:16:04: Bus Width           2
18:16:04: Secure Mode         0
18:16:04: Speed  Class        4
18:16:04: Perf Move           0
18:16:04: Au Size             9
18:16:04: Erase Size          15
18:16:04: Erase Timeout       1
18:16:04: Erase offset        1
18:16:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:04: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:04: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check Counter as 0 and Reset and Identification of the card
18:16:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2576 ] 
18:16:06: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:06: [DVTCommonLib]### VOLA from card : 0x1
18:16:06: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:06: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A420>, <py_sfcl.CommandDataDefinition object at 0x05D2A630>) , Command count = 2577 ] 
18:16:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05E59C00>) , Command count = 2578 ] 
18:16:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2579 ] 
18:16:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:06: [ SelectCard(0x1, True) , Command count = 2580 ] 
18:16:06: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Get SD Status
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2581 ] 
18:16:06: Protected Area Size 0x28000
18:16:06: Bus Width           0
18:16:06: Secure Mode         0
18:16:06: Speed  Class        4
18:16:06: Perf Move           0
18:16:06: Au Size             9
18:16:06: Erase Size          15
18:16:06: Erase Timeout       1
18:16:06: Erase offset        1
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:06: [ SetBusWidth(0x4) , Command count = 2582 ] 
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2583 ] 
18:16:06: Protected Area Size 0x28000
18:16:06: Bus Width           2
18:16:06: Secure Mode         0
18:16:06: Speed  Class        4
18:16:06: Perf Move           0
18:16:06: Au Size             9
18:16:06: Erase Size          15
18:16:06: Erase Timeout       1
18:16:06: Erase offset        1
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:06: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:06: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check Counter as 2 and Reset and Identification of the card
18:16:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2584 ] 
18:16:06: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:06: [DVTCommonLib]### VOLA from card : 0x1
18:16:06: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:06: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7B0>, <py_sfcl.CommandDataDefinition object at 0x05E55FC0>) , Command count = 2585 ] 
18:16:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05270930>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 2586 ] 
18:16:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2587 ] 
18:16:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:06: [ SelectCard(0x1, True) , Command count = 2588 ] 
18:16:06: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Get SD Status
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2589 ] 
18:16:06: Protected Area Size 0x28000
18:16:06: Bus Width           0
18:16:06: Secure Mode         0
18:16:06: Speed  Class        4
18:16:06: Perf Move           0
18:16:06: Au Size             9
18:16:06: Erase Size          15
18:16:06: Erase Timeout       1
18:16:06: Erase offset        1
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:06: [ SetBusWidth(0x4) , Command count = 2590 ] 
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2591 ] 
18:16:06: Protected Area Size 0x28000
18:16:06: Bus Width           2
18:16:06: Secure Mode         0
18:16:06: Speed  Class        4
18:16:06: Perf Move           0
18:16:06: Au Size             9
18:16:06: Erase Size          15
18:16:06: Erase Timeout       1
18:16:06: Erase offset        1
18:16:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:06: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:06: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check Counter as 3 and Reset and Identification of the card
18:16:06: [DVTCommonLib]### Reset the card with OCR value : 0x51FF8000
18:16:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2592 ] 
18:16:07: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:07: [DVTCommonLib]### VOLA from card : 0x1
18:16:07: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:07: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37AB0>, <py_sfcl.CommandDataDefinition object at 0x05E2DD80>) , Command count = 2593 ] 
18:16:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05E55AE0>) , Command count = 2594 ] 
18:16:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2595 ] 
18:16:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:07: [ SelectCard(0x1, True) , Command count = 2596 ] 
18:16:07: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Get SD Status
18:16:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2597 ] 
18:16:07: Protected Area Size 0x28000
18:16:07: Bus Width           0
18:16:07: Secure Mode         0
18:16:07: Speed  Class        4
18:16:07: Perf Move           0
18:16:07: Au Size             9
18:16:07: Erase Size          15
18:16:07: Erase Timeout       1
18:16:07: Erase offset        1
18:16:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:07: [ SetBusWidth(0x4) , Command count = 2598 ] 
18:16:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2599 ] 
18:16:07: Protected Area Size 0x28000
18:16:07: Bus Width           2
18:16:07: Secure Mode         0
18:16:07: Speed  Class        4
18:16:07: Perf Move           0
18:16:07: Au Size             9
18:16:07: Erase Size          15
18:16:07: Erase Timeout       1
18:16:07: Erase offset        1
18:16:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:07: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:07: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check Counter as 4 and Reset and Identification of the card
18:16:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2600 ] 
18:16:09: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:09: [DVTCommonLib]### VOLA from card : 0x1
18:16:09: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:09: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC00>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 2601 ] 
18:16:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E55AE0>) , Command count = 2602 ] 
18:16:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2603 ] 
18:16:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:09: [ SelectCard(0x1, True) , Command count = 2604 ] 
18:16:09: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Get SD Status
18:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2605 ] 
18:16:09: Protected Area Size 0x28000
18:16:09: Bus Width           0
18:16:09: Secure Mode         0
18:16:09: Speed  Class        4
18:16:09: Perf Move           0
18:16:09: Au Size             9
18:16:09: Erase Size          15
18:16:09: Erase Timeout       1
18:16:09: Erase offset        1
18:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:16:09: [ SetBusWidth(0x4) , Command count = 2606 ] 
18:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E557B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2607 ] 
18:16:09: Protected Area Size 0x28000
18:16:09: Bus Width           2
18:16:09: Secure Mode         0
18:16:09: Speed  Class        4
18:16:09: Perf Move           0
18:16:09: Au Size             9
18:16:09: Erase Size          15
18:16:09: Erase Timeout       1
18:16:09: Erase offset        1
18:16:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:09: [DVTCommonLib]### GetBusWidth :Bus Width is 4
18:16:09: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Check Counter as 5 and Reset and Identification of the card
18:16:11: [DVTCommonLib]### Reset the card with OCR value : 0x51FF8000
18:16:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2608 ] 
18:16:11: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:11: [DVTCommonLib]### VOLA from card : 0x1
18:16:11: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:11: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 2609 ] 
18:16:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37450>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 2610 ] 
18:16:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2611 ] 
18:16:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:11: [ SelectCard(0x1, True) , Command count = 2612 ] 
18:16:11: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Get SD Status
18:16:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2613 ] 
18:16:11: Protected Area Size 0x28000
18:16:11: Bus Width           0
18:16:11: Secure Mode         0
18:16:11: Speed  Class        4
18:16:11: Perf Move           0
18:16:11: Au Size             9
18:16:11: Erase Size          15
18:16:11: Erase Timeout       1
18:16:11: Erase offset        1
18:16:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:11: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Acmd51 label go to END of the script
18:16:11: ########################################
18:16:11: Finished Running script CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest 
18:16:11: ########################################
18:16:11: ########################################
18:16:11: Stated Running script CH507_DVT_SD300_3_6_1_5_SCR_SDStatus_InSpeedClassTest 
18:16:11: ########################################
18:16:11: CH507_DVT_SD300_3_6_1_5_SCR_SDStatus_InSpeedClassTest Skipped as CARD_CAPACITY <=2028 and > 32  

18:16:11: ########################################
18:16:11: ########################################
18:16:11: Stated Running script CH509_DVT_SD300_3_6_1_7_SCR_SDStatus_WriteProtectTest 
18:16:11: ########################################
18:16:11: CH509_DVT_SD300_3_6_1_7_SCR_SDStatus_WriteProtectTest Skipped as CARD_CAPACITY <=2028 and > 32 

18:16:11: ########################################
18:16:11: ########################################
18:16:11: Stated Running script CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest 
18:16:11: ########################################
18:16:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]###### Running SCR_SDStatus_LockUnlockTest Test 
18:16:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] ### TEST SCRIPT EXECUTION IS STARTED.
18:16:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_Load_SCR_SDStatus_Variables
18:16:11: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:11: Perform Power Off and On.
18:16:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2614 ] 
18:16:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBE40>, <py_sfcl.CommandDataDefinition object at 0x05E55CF0>) , Command count = 2615 ] 
18:16:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C90>, <py_sfcl.CommandDataDefinition object at 0x05E37EA0>) , Command count = 2616 ] 
18:16:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2617 ] 
18:16:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:13: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:16: Host Frequency set to 25000 KHz
18:16:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:16: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E377B0>, 0x0, True) , Command count = 2618 ] 
18:16:16: [GO18_globalSetVolt]### Host voltage value is set.
18:16:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55DE0>, 0x0, False) , Command count = 2619 ] 
18:16:16: [GO18_globalSetVolt]### Host voltage value is set.
18:16:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2620 ] 
18:16:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2621 ] 
18:16:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2622 ] 
18:16:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E10>, <py_sfcl.CommandDataDefinition object at 0x05E376C0>) , Command count = 2623 ] 
18:16:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E270>) , Command count = 2624 ] 
18:16:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2625 ] 
18:16:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:16: Host Frequency set to 25000 KHz
18:16:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:16: ####CSD Registe 2.0 Values####
18:16:16: CSD_STRUCTURE                                 :0x1
18:16:16: Reserv1                                       :0x0
18:16:16: Time Access 1 TAAC                            :0xe
18:16:16: Time Access 2 NSAC*100                        :0x0
18:16:16: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:16: Card Command Classess CCC                     :0x5b5
18:16:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:16: DSR(driver stage register)  DSR_IMP           :0x0
18:16:16: Reserv2                                       :0x0
18:16:16: Device Size C_SIZE                            :0xedc8
18:16:16: Reserv3                                       :0x0
18:16:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:16: Reserv4                                       :0x0
18:16:16: Write Speed Factor R2W_FACTOR                 :0x2
18:16:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:16: FILE_FORMAT_GRP                               :0x0
18:16:16: COPY flag                                     :0x1
18:16:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:16: File_Format                                   :0x0
18:16:16: CRC                                           :0x0
18:16:16: ####CSD Registe Values####  

18:16:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:16: [GetSCRRegisterEntry] Passed
18:16:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:16: Data_Status_After Erases          : 0
18:16:16: CPRM Security Support             : No Security
18:16:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:16: Spec. Version                     : Version 3.0X
18:16:16: Extended Security Support         : Extended_Security_Not_Supported
18:16:16: Command Support                   : COMMAND_SUPPORT
18:16:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E2D870>) , Command count = 2626 ] 
18:16:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E50570>) , Command count = 2627 ] 
18:16:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:16: [ SetBusWidth(0x4) , Command count = 2628 ] 
18:16:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2629 ] 
18:16:16: Protected Area Size 0x28000
18:16:16: Bus Width           2
18:16:16: Secure Mode         0
18:16:16: Speed  Class        4
18:16:16: Perf Move           0
18:16:16: Au Size             9
18:16:16: Erase Size          15
18:16:16: Erase Timeout       1
18:16:16: Erase offset        1
18:16:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2630 ] 
18:16:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:16: Host Frequency set to 100000 KHz
18:16:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:16: ####CSD Registe 2.0 Values####
18:16:16: CSD_STRUCTURE                                 :0x1
18:16:16: Reserv1                                       :0x0
18:16:16: Time Access 1 TAAC                            :0xe
18:16:16: Time Access 2 NSAC*100                        :0x0
18:16:16: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:16: Card Command Classess CCC                     :0x5b5
18:16:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:16: DSR(driver stage register)  DSR_IMP           :0x0
18:16:16: Reserv2                                       :0x0
18:16:16: Device Size C_SIZE                            :0xedc8
18:16:16: Reserv3                                       :0x0
18:16:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:17: Reserv4                                       :0x0
18:16:17: Write Speed Factor R2W_FACTOR                 :0x2
18:16:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:17: FILE_FORMAT_GRP                               :0x0
18:16:17: COPY flag                                     :0x1
18:16:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:17: File_Format                                   :0x0
18:16:17: CRC                                           :0x0
18:16:17: ####CSD Registe Values####  

18:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A80>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 2631 ] 
18:16:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 2632 ] 
18:16:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] ### Run the LoopCounter less than 10 times
18:16:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:16:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 0 
18:16:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:16:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:16:17: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:16:17: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:16:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:17: Perform Power Off and On.
18:16:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2633 ] 
18:16:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E37420>) , Command count = 2634 ] 
18:16:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D840>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 2635 ] 
18:16:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2636 ] 
18:16:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:21: Host Frequency set to 25000 KHz
18:16:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A7E0>, 0x0, True) , Command count = 2637 ] 
18:16:22: [GO18_globalSetVolt]### Host voltage value is set.
18:16:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37780>, 0x0, False) , Command count = 2638 ] 
18:16:22: [GO18_globalSetVolt]### Host voltage value is set.
18:16:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2639 ] 
18:16:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2640 ] 
18:16:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2641 ] 
18:16:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B10>, <py_sfcl.CommandDataDefinition object at 0x05DAA570>) , Command count = 2642 ] 
18:16:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3C0>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 2643 ] 
18:16:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2644 ] 
18:16:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:22: Host Frequency set to 25000 KHz
18:16:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:22: ####CSD Registe 2.0 Values####
18:16:22: CSD_STRUCTURE                                 :0x1
18:16:22: Reserv1                                       :0x0
18:16:22: Time Access 1 TAAC                            :0xe
18:16:22: Time Access 2 NSAC*100                        :0x0
18:16:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:22: Card Command Classess CCC                     :0x5b5
18:16:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:22: DSR(driver stage register)  DSR_IMP           :0x0
18:16:22: Reserv2                                       :0x0
18:16:22: Device Size C_SIZE                            :0xedc8
18:16:22: Reserv3                                       :0x0
18:16:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:22: Reserv4                                       :0x0
18:16:22: Write Speed Factor R2W_FACTOR                 :0x2
18:16:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:22: FILE_FORMAT_GRP                               :0x0
18:16:22: COPY flag                                     :0x1
18:16:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:22: File_Format                                   :0x0
18:16:22: CRC                                           :0x0
18:16:22: ####CSD Registe Values####  

18:16:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:22: [GetSCRRegisterEntry] Passed
18:16:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:22: Data_Status_After Erases          : 0
18:16:22: CPRM Security Support             : No Security
18:16:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:22: Spec. Version                     : Version 3.0X
18:16:22: Extended Security Support         : Extended_Security_Not_Supported
18:16:22: Command Support                   : COMMAND_SUPPORT
18:16:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E37720>) , Command count = 2645 ] 
18:16:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 2646 ] 
18:16:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:22: [ SetBusWidth(0x4) , Command count = 2647 ] 
18:16:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2648 ] 
18:16:22: Protected Area Size 0x28000
18:16:22: Bus Width           2
18:16:22: Secure Mode         0
18:16:22: Speed  Class        4
18:16:22: Perf Move           0
18:16:22: Au Size             9
18:16:22: Erase Size          15
18:16:22: Erase Timeout       1
18:16:22: Erase offset        1
18:16:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2649 ] 
18:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:22: Host Frequency set to 100000 KHz
18:16:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:22: ####CSD Registe 2.0 Values####
18:16:22: CSD_STRUCTURE                                 :0x1
18:16:22: Reserv1                                       :0x0
18:16:22: Time Access 1 TAAC                            :0xe
18:16:22: Time Access 2 NSAC*100                        :0x0
18:16:22: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:22: Card Command Classess CCC                     :0x5b5
18:16:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:22: DSR(driver stage register)  DSR_IMP           :0x0
18:16:22: Reserv2                                       :0x0
18:16:22: Device Size C_SIZE                            :0xedc8
18:16:22: Reserv3                                       :0x0
18:16:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:22: Reserv4                                       :0x0
18:16:22: Write Speed Factor R2W_FACTOR                 :0x2
18:16:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:22: FILE_FORMAT_GRP                               :0x0
18:16:22: COPY flag                                     :0x1
18:16:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:22: File_Format                                   :0x0
18:16:22: CRC                                           :0x0
18:16:22: ####CSD Registe Values####  

18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 2650 ] 
18:16:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E37C30>) , Command count = 2651 ] 
18:16:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:23: [GetSCRRegisterEntry] Passed
18:16:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:23: Data_Status_After Erases          : 0
18:16:23: CPRM Security Support             : No Security
18:16:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:23: Spec. Version                     : Version 3.0X
18:16:23: Extended Security Support         : Extended_Security_Not_Supported
18:16:23: Command Support                   : COMMAND_SUPPORT
18:16:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:16:23: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:16:23: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:16:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:23: [GetSCRRegisterEntry] Passed
18:16:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:23: Data_Status_After Erases          : 0
18:16:23: CPRM Security Support             : No Security
18:16:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:23: Spec. Version                     : Version 3.0X
18:16:23: Extended Security Support         : Extended_Security_Not_Supported
18:16:23: Command Support                   : COMMAND_SUPPORT
18:16:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:16:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:23: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2652 ] 
18:16:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:16:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:23: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:25: Host Frequency set to 25000 KHz
18:16:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:25: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DB70>, 0x0, True) , Command count = 2653 ] 
18:16:25: [GO18_globalSetVolt]### Host voltage value is set.
18:16:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB8E40>, 0x0, False) , Command count = 2654 ] 
18:16:25: [GO18_globalSetVolt]### Host voltage value is set.
18:16:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2655 ] 
18:16:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2656 ] 
18:16:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2657 ] 
18:16:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 2658 ] 
18:16:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 2659 ] 
18:16:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:25: [ SetCardRCA(0x1, 0xD555) , Command count = 2660 ] 
18:16:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:25: Host Frequency set to 25000 KHz
18:16:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:25: ####CSD Registe 2.0 Values####
18:16:25: CSD_STRUCTURE                                 :0x1
18:16:25: Reserv1                                       :0x0
18:16:25: Time Access 1 TAAC                            :0xe
18:16:25: Time Access 2 NSAC*100                        :0x0
18:16:25: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:25: Card Command Classess CCC                     :0x5b5
18:16:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:25: DSR(driver stage register)  DSR_IMP           :0x0
18:16:25: Reserv2                                       :0x0
18:16:25: Device Size C_SIZE                            :0xedc8
18:16:25: Reserv3                                       :0x0
18:16:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:25: Reserv4                                       :0x0
18:16:25: Write Speed Factor R2W_FACTOR                 :0x2
18:16:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:25: FILE_FORMAT_GRP                               :0x0
18:16:25: COPY flag                                     :0x1
18:16:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:25: File_Format                                   :0x0
18:16:25: CRC                                           :0x0
18:16:25: ####CSD Registe Values####  

18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37300>, <py_sfcl.CommandDataDefinition object at 0x05E3E6F0>) , Command count = 2661 ] 
18:16:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 2662 ] 
18:16:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:25: [ SetBusWidth(0x4) , Command count = 2663 ] 
18:16:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2664 ] 
18:16:25: Protected Area Size 0x28000
18:16:25: Bus Width           2
18:16:25: Secure Mode         0
18:16:25: Speed  Class        4
18:16:25: Perf Move           0
18:16:25: Au Size             9
18:16:25: Erase Size          15
18:16:25: Erase Timeout       1
18:16:25: Erase offset        1
18:16:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2665 ] 
18:16:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:25: Host Frequency set to 100000 KHz
18:16:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:25: ####CSD Registe 2.0 Values####
18:16:25: CSD_STRUCTURE                                 :0x1
18:16:25: Reserv1                                       :0x0
18:16:25: Time Access 1 TAAC                            :0xe
18:16:25: Time Access 2 NSAC*100                        :0x0
18:16:25: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:25: Card Command Classess CCC                     :0x5b5
18:16:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:25: DSR(driver stage register)  DSR_IMP           :0x0
18:16:25: Reserv2                                       :0x0
18:16:25: Device Size C_SIZE                            :0xedc8
18:16:25: Reserv3                                       :0x0
18:16:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:25: Reserv4                                       :0x0
18:16:25: Write Speed Factor R2W_FACTOR                 :0x2
18:16:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:25: FILE_FORMAT_GRP                               :0x0
18:16:25: COPY flag                                     :0x1
18:16:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:25: File_Format                                   :0x0
18:16:25: CRC                                           :0x0
18:16:25: ####CSD Registe Values####  

18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E55090>) , Command count = 2666 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D720>, <py_sfcl.CommandDataDefinition object at 0x05E3ECC0>) , Command count = 2667 ] 
18:16:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 2668 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444B0>, <py_sfcl.CommandDataDefinition object at 0x05E3E2D0>) , Command count = 2669 ] 
18:16:25: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59210>, <py_sfcl.CommandDataDefinition object at 0x05E593F0>) , Command count = 2670 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E440F0>) , Command count = 2671 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E3E300>) , Command count = 2672 ] 
18:16:25: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44990>, <py_sfcl.CommandDataDefinition object at 0x05E592D0>) , Command count = 2673 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555A0>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 2674 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A50>, <py_sfcl.CommandDataDefinition object at 0x05E59630>) , Command count = 2675 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 2676 ] 
18:16:25: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 2677 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E448A0>, <py_sfcl.CommandDataDefinition object at 0x05E2D9F0>) , Command count = 2678 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA20>, <py_sfcl.CommandDataDefinition object at 0x05E59090>) , Command count = 2679 ] 
18:16:25: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E240>, <py_sfcl.CommandDataDefinition object at 0x05E59690>) , Command count = 2680 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E720>, <py_sfcl.CommandDataDefinition object at 0x05E441B0>) , Command count = 2681 ] 
18:16:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:25: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:16:25: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:16:25: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:25: [GetSCRRegisterEntry] Passed
18:16:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:25: Data_Status_After Erases          : 0
18:16:25: CPRM Security Support             : No Security
18:16:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:25: Spec. Version                     : Version 3.0X
18:16:25: Extended Security Support         : Extended_Security_Not_Supported
18:16:25: Command Support                   : COMMAND_SUPPORT
18:16:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:25: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:16:25: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:16:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:16:25: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:16:25: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:25: Perform Power Off and On.
18:16:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2682 ] 
18:16:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA80>, <py_sfcl.CommandDataDefinition object at 0x05E44BD0>) , Command count = 2683 ] 
18:16:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44330>, <py_sfcl.CommandDataDefinition object at 0x05E44B10>) , Command count = 2684 ] 
18:16:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:28: [ SetCardRCA(0x1, 0xD555) , Command count = 2685 ] 
18:16:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:28: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:30: Host Frequency set to 25000 KHz
18:16:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:30: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E449F0>, 0x0, True) , Command count = 2686 ] 
18:16:30: [GO18_globalSetVolt]### Host voltage value is set.
18:16:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0519DFC0>, 0x0, False) , Command count = 2687 ] 
18:16:30: [GO18_globalSetVolt]### Host voltage value is set.
18:16:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2688 ] 
18:16:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2689 ] 
18:16:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2690 ] 
18:16:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E390>, <py_sfcl.CommandDataDefinition object at 0x05E2DA20>) , Command count = 2691 ] 
18:16:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44570>, <py_sfcl.CommandDataDefinition object at 0x05E59180>) , Command count = 2692 ] 
18:16:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2693 ] 
18:16:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:30: Host Frequency set to 25000 KHz
18:16:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:30: ####CSD Registe 2.0 Values####
18:16:30: CSD_STRUCTURE                                 :0x1
18:16:30: Reserv1                                       :0x0
18:16:30: Time Access 1 TAAC                            :0xe
18:16:30: Time Access 2 NSAC*100                        :0x0
18:16:30: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:30: Card Command Classess CCC                     :0x5b5
18:16:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:30: DSR(driver stage register)  DSR_IMP           :0x0
18:16:30: Reserv2                                       :0x0
18:16:30: Device Size C_SIZE                            :0xedc8
18:16:30: Reserv3                                       :0x0
18:16:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:30: Reserv4                                       :0x0
18:16:30: Write Speed Factor R2W_FACTOR                 :0x2
18:16:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:30: FILE_FORMAT_GRP                               :0x0
18:16:30: COPY flag                                     :0x1
18:16:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:30: File_Format                                   :0x0
18:16:30: CRC                                           :0x0
18:16:30: ####CSD Registe Values####  

18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:30: [GetSCRRegisterEntry] Passed
18:16:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:30: Data_Status_After Erases          : 0
18:16:30: CPRM Security Support             : No Security
18:16:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:30: Spec. Version                     : Version 3.0X
18:16:30: Extended Security Support         : Extended_Security_Not_Supported
18:16:30: Command Support                   : COMMAND_SUPPORT
18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E59B40>) , Command count = 2694 ] 
18:16:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA480>, <py_sfcl.CommandDataDefinition object at 0x05E59810>) , Command count = 2695 ] 
18:16:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:30: [ SetBusWidth(0x4) , Command count = 2696 ] 
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E447B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2697 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2698 ] 
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:30: Host Frequency set to 100000 KHz
18:16:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:30: ####CSD Registe 2.0 Values####
18:16:30: CSD_STRUCTURE                                 :0x1
18:16:30: Reserv1                                       :0x0
18:16:30: Time Access 1 TAAC                            :0xe
18:16:30: Time Access 2 NSAC*100                        :0x0
18:16:30: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:30: Card Command Classess CCC                     :0x5b5
18:16:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:30: DSR(driver stage register)  DSR_IMP           :0x0
18:16:30: Reserv2                                       :0x0
18:16:30: Device Size C_SIZE                            :0xedc8
18:16:30: Reserv3                                       :0x0
18:16:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:30: Reserv4                                       :0x0
18:16:30: Write Speed Factor R2W_FACTOR                 :0x2
18:16:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:30: FILE_FORMAT_GRP                               :0x0
18:16:30: COPY flag                                     :0x1
18:16:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:30: File_Format                                   :0x0
18:16:30: CRC                                           :0x0
18:16:30: ####CSD Registe Values####  

18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 2699 ] 
18:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F630>, <py_sfcl.CommandDataDefinition object at 0x05E4F4B0>) , Command count = 2700 ] 
18:16:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2701 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:16:30: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2702 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2703 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2704 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2705 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E446C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2706 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:16:30: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:16:30: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E3EC00>) , Command count = 2707 ] 
18:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7E0>, <py_sfcl.CommandDataDefinition object at 0x05E44E10>) , Command count = 2708 ] 
18:16:30: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F990>, <py_sfcl.CommandDataDefinition object at 0x05E593C0>) , Command count = 2709 ] 
18:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E4FA80>) , Command count = 2710 ] 
18:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:30: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:30: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:30: [GetSCRRegisterEntry] Passed
18:16:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:30: Data_Status_After Erases          : 0
18:16:30: CPRM Security Support             : No Security
18:16:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:30: Spec. Version                     : Version 3.0X
18:16:30: Extended Security Support         : Extended_Security_Not_Supported
18:16:30: Command Support                   : COMMAND_SUPPORT
18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:30: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2711 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:16:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2712 ] 
18:16:33: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:33: [DVTCommonLib]### VOLA from card : 0x1
18:16:33: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:33: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C00>, <py_sfcl.CommandDataDefinition object at 0x05E59DE0>) , Command count = 2713 ] 
18:16:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ED50>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 2714 ] 
18:16:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2715 ] 
18:16:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:33: [ SelectCard(0x1, True) , Command count = 2716 ] 
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E060>, <py_sfcl.CommandDataDefinition object at 0x05E4F600>) , Command count = 2717 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:33: [GetSCRRegisterEntry] Failed
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2718 ] 
18:16:33: [ GetCardStatus() , Command count = 2719 ] 
18:16:33: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:16:33: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55930>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 2720 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF00>, <py_sfcl.CommandDataDefinition object at 0x05E4F900>) , Command count = 2721 ] 
18:16:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EEA0>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 2722 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 2723 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:33: [GetSCRRegisterEntry] Passed
18:16:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:33: Data_Status_After Erases          : 0
18:16:33: CPRM Security Support             : No Security
18:16:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:33: Spec. Version                     : Version 3.0X
18:16:33: Extended Security Support         : Extended_Security_Not_Supported
18:16:33: Command Support                   : COMMAND_SUPPORT
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2724 ] 
18:16:33: Protected Area Size 0x28000
18:16:33: Bus Width           0
18:16:33: Secure Mode         0
18:16:33: Speed  Class        4
18:16:33: Perf Move           0
18:16:33: Au Size             9
18:16:33: Erase Size          15
18:16:33: Erase Timeout       1
18:16:33: Erase offset        1
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E59E10>) , Command count = 2725 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F960>, <py_sfcl.CommandDataDefinition object at 0x05E59A20>) , Command count = 2726 ] 
18:16:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F870>, <py_sfcl.CommandDataDefinition object at 0x05E4FBA0>) , Command count = 2727 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E44720>) , Command count = 2728 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:33: [GetSCRRegisterEntry] Failed
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2729 ] 
18:16:33: [ GetCardStatus() , Command count = 2730 ] 
18:16:33: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:16:33: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F780>, <py_sfcl.CommandDataDefinition object at 0x05E4F3F0>) , Command count = 2731 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E4F1B0>) , Command count = 2732 ] 
18:16:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B70>, <py_sfcl.CommandDataDefinition object at 0x05E3EDB0>) , Command count = 2733 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E504B0>) , Command count = 2734 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:33: [GetSCRRegisterEntry] Passed
18:16:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:33: Data_Status_After Erases          : 0
18:16:33: CPRM Security Support             : No Security
18:16:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:33: Spec. Version                     : Version 3.0X
18:16:33: Extended Security Support         : Extended_Security_Not_Supported
18:16:33: Command Support                   : COMMAND_SUPPORT
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2735 ] 
18:16:33: Protected Area Size 0x28000
18:16:33: Bus Width           0
18:16:33: Secure Mode         0
18:16:33: Speed  Class        4
18:16:33: Perf Move           0
18:16:33: Au Size             9
18:16:33: Erase Size          15
18:16:33: Erase Timeout       1
18:16:33: Erase offset        1
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:16:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2736 ] 
18:16:35: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:35: [DVTCommonLib]### VOLA from card : 0x1
18:16:35: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:35: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50630>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 2737 ] 
18:16:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E76030>) , Command count = 2738 ] 
18:16:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:35: [ SetCardRCA(0x1, 0xD555) , Command count = 2739 ] 
18:16:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:35: [ SelectCard(0x1, True) , Command count = 2740 ] 
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:16:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:35: [GetSCRRegisterEntry] Failed
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:16:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2741 ] 
18:16:35: [ GetCardStatus() , Command count = 2742 ] 
18:16:35: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:16:35: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E59CF0>) , Command count = 2743 ] 
18:16:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50660>, <py_sfcl.CommandDataDefinition object at 0x05E507B0>) , Command count = 2744 ] 
18:16:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50420>, <py_sfcl.CommandDataDefinition object at 0x05E50990>) , Command count = 2745 ] 
18:16:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 2746 ] 
18:16:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:16:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:16:35: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:16:35: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:16:35: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:35: Perform Power Off and On.
18:16:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2747 ] 
18:16:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E3EF60>) , Command count = 2748 ] 
18:16:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50210>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 2749 ] 
18:16:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2750 ] 
18:16:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:37: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:39: Host Frequency set to 25000 KHz
18:16:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:39: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37810>, 0x0, True) , Command count = 2751 ] 
18:16:39: [GO18_globalSetVolt]### Host voltage value is set.
18:16:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50930>, 0x0, False) , Command count = 2752 ] 
18:16:40: [GO18_globalSetVolt]### Host voltage value is set.
18:16:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2753 ] 
18:16:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2754 ] 
18:16:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2755 ] 
18:16:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E59030>) , Command count = 2756 ] 
18:16:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50BA0>, <py_sfcl.CommandDataDefinition object at 0x05E505D0>) , Command count = 2757 ] 
18:16:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2758 ] 
18:16:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:40: Host Frequency set to 25000 KHz
18:16:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:40: ####CSD Registe 2.0 Values####
18:16:40: CSD_STRUCTURE                                 :0x1
18:16:40: Reserv1                                       :0x0
18:16:40: Time Access 1 TAAC                            :0xe
18:16:40: Time Access 2 NSAC*100                        :0x0
18:16:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:40: Card Command Classess CCC                     :0x5b5
18:16:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:40: DSR(driver stage register)  DSR_IMP           :0x0
18:16:40: Reserv2                                       :0x0
18:16:40: Device Size C_SIZE                            :0xedc8
18:16:40: Reserv3                                       :0x0
18:16:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:40: Reserv4                                       :0x0
18:16:40: Write Speed Factor R2W_FACTOR                 :0x2
18:16:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:40: FILE_FORMAT_GRP                               :0x0
18:16:40: COPY flag                                     :0x1
18:16:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:40: File_Format                                   :0x0
18:16:40: CRC                                           :0x0
18:16:40: ####CSD Registe Values####  

18:16:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:40: [GetSCRRegisterEntry] Passed
18:16:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:40: Data_Status_After Erases          : 0
18:16:40: CPRM Security Support             : No Security
18:16:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:40: Spec. Version                     : Version 3.0X
18:16:40: Extended Security Support         : Extended_Security_Not_Supported
18:16:40: Command Support                   : COMMAND_SUPPORT
18:16:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 2759 ] 
18:16:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55A20>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 2760 ] 
18:16:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:40: [ SetBusWidth(0x4) , Command count = 2761 ] 
18:16:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2762 ] 
18:16:40: Protected Area Size 0x28000
18:16:40: Bus Width           2
18:16:40: Secure Mode         0
18:16:40: Speed  Class        4
18:16:40: Perf Move           0
18:16:40: Au Size             9
18:16:40: Erase Size          15
18:16:40: Erase Timeout       1
18:16:40: Erase offset        1
18:16:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2763 ] 
18:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:40: Host Frequency set to 100000 KHz
18:16:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:40: ####CSD Registe 2.0 Values####
18:16:40: CSD_STRUCTURE                                 :0x1
18:16:40: Reserv1                                       :0x0
18:16:40: Time Access 1 TAAC                            :0xe
18:16:40: Time Access 2 NSAC*100                        :0x0
18:16:40: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:40: Card Command Classess CCC                     :0x5b5
18:16:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:40: DSR(driver stage register)  DSR_IMP           :0x0
18:16:40: Reserv2                                       :0x0
18:16:40: Device Size C_SIZE                            :0xedc8
18:16:40: Reserv3                                       :0x0
18:16:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:41: Reserv4                                       :0x0
18:16:41: Write Speed Factor R2W_FACTOR                 :0x2
18:16:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:41: FILE_FORMAT_GRP                               :0x0
18:16:41: COPY flag                                     :0x1
18:16:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:41: File_Format                                   :0x0
18:16:41: CRC                                           :0x0
18:16:41: ####CSD Registe Values####  

18:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E50600>) , Command count = 2764 ] 
18:16:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 2765 ] 
18:16:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:41: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:41: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:41: [GetSCRRegisterEntry] Passed
18:16:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:41: Data_Status_After Erases          : 0
18:16:41: CPRM Security Support             : No Security
18:16:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:41: Spec. Version                     : Version 3.0X
18:16:41: Extended Security Support         : Extended_Security_Not_Supported
18:16:41: Command Support                   : COMMAND_SUPPORT
18:16:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:41: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:16:41: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:16:41: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:16:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:41: [GetSCRRegisterEntry] Passed
18:16:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:41: Data_Status_After Erases          : 0
18:16:41: CPRM Security Support             : No Security
18:16:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:41: Spec. Version                     : Version 3.0X
18:16:41: Extended Security Support         : Extended_Security_Not_Supported
18:16:41: Command Support                   : COMMAND_SUPPORT
18:16:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:41: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:16:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:41: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2766 ] 
18:16:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:16:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:41: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:43: Host Frequency set to 25000 KHz
18:16:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:43: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05278180>, 0x0, True) , Command count = 2767 ] 
18:16:43: [GO18_globalSetVolt]### Host voltage value is set.
18:16:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A0F0>, 0x0, False) , Command count = 2768 ] 
18:16:43: [GO18_globalSetVolt]### Host voltage value is set.
18:16:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2769 ] 
18:16:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2770 ] 
18:16:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2771 ] 
18:16:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 2772 ] 
18:16:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D80>, <py_sfcl.CommandDataDefinition object at 0x05E55450>) , Command count = 2773 ] 
18:16:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2774 ] 
18:16:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:44: Host Frequency set to 25000 KHz
18:16:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:44: ####CSD Registe 2.0 Values####
18:16:44: CSD_STRUCTURE                                 :0x1
18:16:44: Reserv1                                       :0x0
18:16:44: Time Access 1 TAAC                            :0xe
18:16:44: Time Access 2 NSAC*100                        :0x0
18:16:44: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:44: Card Command Classess CCC                     :0x5b5
18:16:44: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:44: DSR(driver stage register)  DSR_IMP           :0x0
18:16:44: Reserv2                                       :0x0
18:16:44: Device Size C_SIZE                            :0xedc8
18:16:44: Reserv3                                       :0x0
18:16:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:44: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:44: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:44: Reserv4                                       :0x0
18:16:44: Write Speed Factor R2W_FACTOR                 :0x2
18:16:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:44: FILE_FORMAT_GRP                               :0x0
18:16:44: COPY flag                                     :0x1
18:16:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:44: File_Format                                   :0x0
18:16:44: CRC                                           :0x0
18:16:44: ####CSD Registe Values####  

18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509F0>, <py_sfcl.CommandDataDefinition object at 0x05E50D50>) , Command count = 2775 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C00>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 2776 ] 
18:16:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:44: [ SetBusWidth(0x4) , Command count = 2777 ] 
18:16:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052782D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2778 ] 
18:16:44: Protected Area Size 0x28000
18:16:44: Bus Width           2
18:16:44: Secure Mode         0
18:16:44: Speed  Class        4
18:16:44: Perf Move           0
18:16:44: Au Size             9
18:16:44: Erase Size          15
18:16:44: Erase Timeout       1
18:16:44: Erase offset        1
18:16:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2779 ] 
18:16:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:44: Host Frequency set to 100000 KHz
18:16:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:44: ####CSD Registe 2.0 Values####
18:16:44: CSD_STRUCTURE                                 :0x1
18:16:44: Reserv1                                       :0x0
18:16:44: Time Access 1 TAAC                            :0xe
18:16:44: Time Access 2 NSAC*100                        :0x0
18:16:44: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:44: Card Command Classess CCC                     :0x5b5
18:16:44: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:44: DSR(driver stage register)  DSR_IMP           :0x0
18:16:44: Reserv2                                       :0x0
18:16:44: Device Size C_SIZE                            :0xedc8
18:16:44: Reserv3                                       :0x0
18:16:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:44: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:44: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:44: Reserv4                                       :0x0
18:16:44: Write Speed Factor R2W_FACTOR                 :0x2
18:16:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:44: FILE_FORMAT_GRP                               :0x0
18:16:44: COPY flag                                     :0x1
18:16:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:44: File_Format                                   :0x0
18:16:44: CRC                                           :0x0
18:16:44: ####CSD Registe Values####  

18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x05E507E0>) , Command count = 2780 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E553C0>, <py_sfcl.CommandDataDefinition object at 0x05E50930>) , Command count = 2781 ] 
18:16:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E550C0>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 2782 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E506F0>, <py_sfcl.CommandDataDefinition object at 0x05E50BD0>) , Command count = 2783 ] 
18:16:44: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 2784 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50E40>, <py_sfcl.CommandDataDefinition object at 0x05E50690>) , Command count = 2785 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50360>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 2786 ] 
18:16:44: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555D0>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 2787 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 2788 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E59750>) , Command count = 2789 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F690>, <py_sfcl.CommandDataDefinition object at 0x05E4FA20>) , Command count = 2790 ] 
18:16:44: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EAE0>, <py_sfcl.CommandDataDefinition object at 0x05E502A0>) , Command count = 2791 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E503F0>, <py_sfcl.CommandDataDefinition object at 0x052AAF90>) , Command count = 2792 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55780>, <py_sfcl.CommandDataDefinition object at 0x05E4FCF0>) , Command count = 2793 ] 
18:16:44: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59F90>, <py_sfcl.CommandDataDefinition object at 0x05E4F3C0>) , Command count = 2794 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 2795 ] 
18:16:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:16:44: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:16:44: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:16:44: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:44: [GetSCRRegisterEntry] Passed
18:16:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:44: Data_Status_After Erases          : 0
18:16:44: CPRM Security Support             : No Security
18:16:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:44: Spec. Version                     : Version 3.0X
18:16:44: Extended Security Support         : Extended_Security_Not_Supported
18:16:44: Command Support                   : COMMAND_SUPPORT
18:16:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:44: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:16:44: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:16:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:16:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:16:44: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:44: Perform Power Off and On.
18:16:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2796 ] 
18:16:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F810>, <py_sfcl.CommandDataDefinition object at 0x05E4FAB0>) , Command count = 2797 ] 
18:16:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E4FD80>) , Command count = 2798 ] 
18:16:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2799 ] 
18:16:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:46: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:48: Host Frequency set to 25000 KHz
18:16:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:48: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F6F0>, 0x0, True) , Command count = 2800 ] 
18:16:48: [GO18_globalSetVolt]### Host voltage value is set.
18:16:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB390>, 0x0, False) , Command count = 2801 ] 
18:16:48: [GO18_globalSetVolt]### Host voltage value is set.
18:16:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2802 ] 
18:16:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2803 ] 
18:16:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2804 ] 
18:16:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E59480>) , Command count = 2805 ] 
18:16:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E556C0>) , Command count = 2806 ] 
18:16:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2807 ] 
18:16:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:49: Host Frequency set to 25000 KHz
18:16:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:49: ####CSD Registe 2.0 Values####
18:16:49: CSD_STRUCTURE                                 :0x1
18:16:49: Reserv1                                       :0x0
18:16:49: Time Access 1 TAAC                            :0xe
18:16:49: Time Access 2 NSAC*100                        :0x0
18:16:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:49: Card Command Classess CCC                     :0x5b5
18:16:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:49: DSR(driver stage register)  DSR_IMP           :0x0
18:16:49: Reserv2                                       :0x0
18:16:49: Device Size C_SIZE                            :0xedc8
18:16:49: Reserv3                                       :0x0
18:16:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:49: Reserv4                                       :0x0
18:16:49: Write Speed Factor R2W_FACTOR                 :0x2
18:16:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:49: FILE_FORMAT_GRP                               :0x0
18:16:49: COPY flag                                     :0x1
18:16:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:49: File_Format                                   :0x0
18:16:49: CRC                                           :0x0
18:16:49: ####CSD Registe Values####  

18:16:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:49: [GetSCRRegisterEntry] Passed
18:16:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:49: Data_Status_After Erases          : 0
18:16:49: CPRM Security Support             : No Security
18:16:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:49: Spec. Version                     : Version 3.0X
18:16:49: Extended Security Support         : Extended_Security_Not_Supported
18:16:49: Command Support                   : COMMAND_SUPPORT
18:16:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x05E59120>) , Command count = 2808 ] 
18:16:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 2809 ] 
18:16:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:49: [ SetBusWidth(0x4) , Command count = 2810 ] 
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2811 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2812 ] 
18:16:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:49: Host Frequency set to 100000 KHz
18:16:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:49: ####CSD Registe 2.0 Values####
18:16:49: CSD_STRUCTURE                                 :0x1
18:16:49: Reserv1                                       :0x0
18:16:49: Time Access 1 TAAC                            :0xe
18:16:49: Time Access 2 NSAC*100                        :0x0
18:16:49: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:49: Card Command Classess CCC                     :0x5b5
18:16:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:49: DSR(driver stage register)  DSR_IMP           :0x0
18:16:49: Reserv2                                       :0x0
18:16:49: Device Size C_SIZE                            :0xedc8
18:16:49: Reserv3                                       :0x0
18:16:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:49: Reserv4                                       :0x0
18:16:49: Write Speed Factor R2W_FACTOR                 :0x2
18:16:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:49: FILE_FORMAT_GRP                               :0x0
18:16:49: COPY flag                                     :0x1
18:16:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:49: File_Format                                   :0x0
18:16:49: CRC                                           :0x0
18:16:49: ####CSD Registe Values####  

18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E597E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 2813 ] 
18:16:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E59240>) , Command count = 2814 ] 
18:16:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E597B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2815 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:16:49: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2816 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E597B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2817 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2818 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E597B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2819 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2820 ] 
18:16:49: Protected Area Size 0x28000
18:16:49: Bus Width           2
18:16:49: Secure Mode         0
18:16:49: Speed  Class        4
18:16:49: Perf Move           0
18:16:49: Au Size             9
18:16:49: Erase Size          15
18:16:49: Erase Timeout       1
18:16:49: Erase offset        1
18:16:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:16:49: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:16:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:16:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2821 ] 
18:16:51: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:16:51: [DVTCommonLib]### VOLA from card : 0x1
18:16:51: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:16:51: [DVTCommonLib]### Reserved bits from card : 0x0
18:16:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E597B0>, <py_sfcl.CommandDataDefinition object at 0x05E59A50>) , Command count = 2822 ] 
18:16:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55330>, <py_sfcl.CommandDataDefinition object at 0x05E55F90>) , Command count = 2823 ] 
18:16:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2824 ] 
18:16:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:51: [ SelectCard(0x1, True) , Command count = 2825 ] 
18:16:51: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:16:51: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:16:51: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:16:51: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:16:51: Perform Power Off and On.
18:16:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2826 ] 
18:16:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50060>, <py_sfcl.CommandDataDefinition object at 0x05E55B40>) , Command count = 2827 ] 
18:16:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05E59E70>) , Command count = 2828 ] 
18:16:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2829 ] 
18:16:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:54: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:56: Host Frequency set to 25000 KHz
18:16:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:56: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A630>, 0x0, True) , Command count = 2830 ] 
18:16:56: [GO18_globalSetVolt]### Host voltage value is set.
18:16:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55C30>, 0x0, False) , Command count = 2831 ] 
18:16:56: [GO18_globalSetVolt]### Host voltage value is set.
18:16:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2832 ] 
18:16:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2833 ] 
18:16:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2834 ] 
18:16:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DB0>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 2835 ] 
18:16:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 2836 ] 
18:16:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2837 ] 
18:16:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:56: Host Frequency set to 25000 KHz
18:16:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:56: ####CSD Registe 2.0 Values####
18:16:56: CSD_STRUCTURE                                 :0x1
18:16:56: Reserv1                                       :0x0
18:16:56: Time Access 1 TAAC                            :0xe
18:16:56: Time Access 2 NSAC*100                        :0x0
18:16:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:56: Card Command Classess CCC                     :0x5b5
18:16:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:56: DSR(driver stage register)  DSR_IMP           :0x0
18:16:56: Reserv2                                       :0x0
18:16:56: Device Size C_SIZE                            :0xedc8
18:16:56: Reserv3                                       :0x0
18:16:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:56: Reserv4                                       :0x0
18:16:56: Write Speed Factor R2W_FACTOR                 :0x2
18:16:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:56: FILE_FORMAT_GRP                               :0x0
18:16:56: COPY flag                                     :0x1
18:16:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:56: File_Format                                   :0x0
18:16:56: CRC                                           :0x0
18:16:56: ####CSD Registe Values####  

18:16:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:56: [GetSCRRegisterEntry] Passed
18:16:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:56: Data_Status_After Erases          : 0
18:16:56: CPRM Security Support             : No Security
18:16:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:56: Spec. Version                     : Version 3.0X
18:16:56: Extended Security Support         : Extended_Security_Not_Supported
18:16:56: Command Support                   : COMMAND_SUPPORT
18:16:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 2838 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8C60>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 2839 ] 
18:16:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:56: [ SetBusWidth(0x4) , Command count = 2840 ] 
18:16:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2841 ] 
18:16:56: Protected Area Size 0x28000
18:16:56: Bus Width           2
18:16:56: Secure Mode         0
18:16:56: Speed  Class        4
18:16:56: Perf Move           0
18:16:56: Au Size             9
18:16:56: Erase Size          15
18:16:56: Erase Timeout       1
18:16:56: Erase offset        1
18:16:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2842 ] 
18:16:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:56: Host Frequency set to 100000 KHz
18:16:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:56: ####CSD Registe 2.0 Values####
18:16:56: CSD_STRUCTURE                                 :0x1
18:16:56: Reserv1                                       :0x0
18:16:56: Time Access 1 TAAC                            :0xe
18:16:56: Time Access 2 NSAC*100                        :0x0
18:16:56: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:56: Card Command Classess CCC                     :0x5b5
18:16:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:56: DSR(driver stage register)  DSR_IMP           :0x0
18:16:56: Reserv2                                       :0x0
18:16:56: Device Size C_SIZE                            :0xedc8
18:16:56: Reserv3                                       :0x0
18:16:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:57: Reserv4                                       :0x0
18:16:57: Write Speed Factor R2W_FACTOR                 :0x2
18:16:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:57: FILE_FORMAT_GRP                               :0x0
18:16:57: COPY flag                                     :0x1
18:16:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:57: File_Format                                   :0x0
18:16:57: CRC                                           :0x0
18:16:57: ####CSD Registe Values####  

18:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E2DA50>) , Command count = 2843 ] 
18:16:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05270930>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 2844 ] 
18:16:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:16:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:57: [GetSCRRegisterEntry] Passed
18:16:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:57: Data_Status_After Erases          : 0
18:16:57: CPRM Security Support             : No Security
18:16:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:57: Spec. Version                     : Version 3.0X
18:16:57: Extended Security Support         : Extended_Security_Not_Supported
18:16:57: Command Support                   : COMMAND_SUPPORT
18:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:16:57: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:16:57: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:57: [GetSCRRegisterEntry] Passed
18:16:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:57: Data_Status_After Erases          : 0
18:16:57: CPRM Security Support             : No Security
18:16:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:57: Spec. Version                     : Version 3.0X
18:16:57: Extended Security Support         : Extended_Security_Not_Supported
18:16:57: Command Support                   : COMMAND_SUPPORT
18:16:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:57: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2845 ] 
18:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:16:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:57: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:59: Host Frequency set to 25000 KHz
18:16:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:59: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50A50>, 0x0, True) , Command count = 2846 ] 
18:16:59: [GO18_globalSetVolt]### Host voltage value is set.
18:16:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CD0F0>, 0x0, False) , Command count = 2847 ] 
18:16:59: [GO18_globalSetVolt]### Host voltage value is set.
18:16:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2848 ] 
18:16:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2849 ] 
18:16:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2850 ] 
18:16:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 2851 ] 
18:16:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 2852 ] 
18:16:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2853 ] 
18:16:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:59: Host Frequency set to 25000 KHz
18:16:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:59: ####CSD Registe 2.0 Values####
18:16:59: CSD_STRUCTURE                                 :0x1
18:16:59: Reserv1                                       :0x0
18:16:59: Time Access 1 TAAC                            :0xe
18:16:59: Time Access 2 NSAC*100                        :0x0
18:16:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:59: Card Command Classess CCC                     :0x5b5
18:16:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:59: DSR(driver stage register)  DSR_IMP           :0x0
18:16:59: Reserv2                                       :0x0
18:16:59: Device Size C_SIZE                            :0xedc8
18:16:59: Reserv3                                       :0x0
18:16:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:59: Reserv4                                       :0x0
18:16:59: Write Speed Factor R2W_FACTOR                 :0x2
18:16:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:59: FILE_FORMAT_GRP                               :0x0
18:16:59: COPY flag                                     :0x1
18:16:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:59: File_Format                                   :0x0
18:16:59: CRC                                           :0x0
18:16:59: ####CSD Registe Values####  

18:16:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:59: [GetSCRRegisterEntry] Passed
18:16:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:59: Data_Status_After Erases          : 0
18:16:59: CPRM Security Support             : No Security
18:16:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:59: Spec. Version                     : Version 3.0X
18:16:59: Extended Security Support         : Extended_Security_Not_Supported
18:16:59: Command Support                   : COMMAND_SUPPORT
18:16:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 2854 ] 
18:16:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 2855 ] 
18:16:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:59: [ SetBusWidth(0x4) , Command count = 2856 ] 
18:16:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2857 ] 
18:16:59: Protected Area Size 0x28000
18:16:59: Bus Width           2
18:16:59: Secure Mode         0
18:16:59: Speed  Class        4
18:16:59: Perf Move           0
18:16:59: Au Size             9
18:16:59: Erase Size          15
18:16:59: Erase Timeout       1
18:16:59: Erase offset        1
18:16:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2858 ] 
18:16:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:59: Host Frequency set to 100000 KHz
18:16:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:59: ####CSD Registe 2.0 Values####
18:16:59: CSD_STRUCTURE                                 :0x1
18:16:59: Reserv1                                       :0x0
18:16:59: Time Access 1 TAAC                            :0xe
18:16:59: Time Access 2 NSAC*100                        :0x0
18:16:59: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:59: Card Command Classess CCC                     :0x5b5
18:16:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:59: DSR(driver stage register)  DSR_IMP           :0x0
18:16:59: Reserv2                                       :0x0
18:16:59: Device Size C_SIZE                            :0xedc8
18:16:59: Reserv3                                       :0x0
18:16:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:00: Reserv4                                       :0x0
18:17:00: Write Speed Factor R2W_FACTOR                 :0x2
18:17:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:00: FILE_FORMAT_GRP                               :0x0
18:17:00: COPY flag                                     :0x1
18:17:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:00: File_Format                                   :0x0
18:17:00: CRC                                           :0x0
18:17:00: ####CSD Registe Values####  

18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF90>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 2859 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E37C00>) , Command count = 2860 ] 
18:17:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBF00>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 2861 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E70>, <py_sfcl.CommandDataDefinition object at 0x05E55270>) , Command count = 2862 ] 
18:17:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA2D0>, <py_sfcl.CommandDataDefinition object at 0x05E55C90>) , Command count = 2863 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E50B10>) , Command count = 2864 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E552A0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 2865 ] 
18:17:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37450>, <py_sfcl.CommandDataDefinition object at 0x05E59ED0>) , Command count = 2866 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 2867 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAE40>, <py_sfcl.CommandDataDefinition object at 0x05E55CF0>) , Command count = 2868 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E55810>) , Command count = 2869 ] 
18:17:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E377B0>, <py_sfcl.CommandDataDefinition object at 0x05E37AE0>) , Command count = 2870 ] 
18:17:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50840>, <py_sfcl.CommandDataDefinition object at 0x05E37CC0>) , Command count = 2871 ] 
18:17:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D660>, <py_sfcl.CommandDataDefinition object at 0x05E55750>) , Command count = 2872 ] 
18:17:01: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55060>, <py_sfcl.CommandDataDefinition object at 0x05E760C0>) , Command count = 2873 ] 
18:17:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D6F0>, <py_sfcl.CommandDataDefinition object at 0x05E37C90>) , Command count = 2874 ] 
18:17:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:01: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:17:01: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:17:01: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:01: [GetSCRRegisterEntry] Passed
18:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:01: Data_Status_After Erases          : 0
18:17:01: CPRM Security Support             : No Security
18:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:01: Spec. Version                     : Version 3.0X
18:17:01: Extended Security Support         : Extended_Security_Not_Supported
18:17:01: Command Support                   : COMMAND_SUPPORT
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:01: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:01: [GetSCRRegisterEntry] Passed
18:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:01: Data_Status_After Erases          : 0
18:17:01: CPRM Security Support             : No Security
18:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:01: Spec. Version                     : Version 3.0X
18:17:01: Extended Security Support         : Extended_Security_Not_Supported
18:17:01: Command Support                   : COMMAND_SUPPORT
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:01: [GetSCRRegisterEntry] Passed
18:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:01: Data_Status_After Erases          : 0
18:17:01: CPRM Security Support             : No Security
18:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:01: Spec. Version                     : Version 3.0X
18:17:01: Extended Security Support         : Extended_Security_Not_Supported
18:17:01: Command Support                   : COMMAND_SUPPORT
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:01: [GetSCRRegisterEntry] Passed
18:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:01: Data_Status_After Erases          : 0
18:17:01: CPRM Security Support             : No Security
18:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:01: Spec. Version                     : Version 3.0X
18:17:01: Extended Security Support         : Extended_Security_Not_Supported
18:17:01: Command Support                   : COMMAND_SUPPORT
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:01: [GetSCRRegisterEntry] Passed
18:17:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:01: Data_Status_After Erases          : 0
18:17:01: CPRM Security Support             : No Security
18:17:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:01: Spec. Version                     : Version 3.0X
18:17:01: Extended Security Support         : Extended_Security_Not_Supported
18:17:01: Command Support                   : COMMAND_SUPPORT
18:17:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:01: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:17:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:17:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:17:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:17:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:01: Perform Power Off and On.
18:17:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2875 ] 
18:17:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E376C0>) , Command count = 2876 ] 
18:17:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E270>) , Command count = 2877 ] 
18:17:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2878 ] 
18:17:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:04: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:06: Host Frequency set to 25000 KHz
18:17:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:06: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D870>, 0x0, True) , Command count = 2879 ] 
18:17:06: [GO18_globalSetVolt]### Host voltage value is set.
18:17:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50960>, 0x0, False) , Command count = 2880 ] 
18:17:06: [GO18_globalSetVolt]### Host voltage value is set.
18:17:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2881 ] 
18:17:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2882 ] 
18:17:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2883 ] 
18:17:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE10>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 2884 ] 
18:17:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 2885 ] 
18:17:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2886 ] 
18:17:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:06: Host Frequency set to 25000 KHz
18:17:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:06: ####CSD Registe 2.0 Values####
18:17:06: CSD_STRUCTURE                                 :0x1
18:17:06: Reserv1                                       :0x0
18:17:06: Time Access 1 TAAC                            :0xe
18:17:06: Time Access 2 NSAC*100                        :0x0
18:17:06: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:06: Card Command Classess CCC                     :0x5b5
18:17:06: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:06: DSR(driver stage register)  DSR_IMP           :0x0
18:17:06: Reserv2                                       :0x0
18:17:06: Device Size C_SIZE                            :0xedc8
18:17:06: Reserv3                                       :0x0
18:17:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:06: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:06: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:06: Reserv4                                       :0x0
18:17:06: Write Speed Factor R2W_FACTOR                 :0x2
18:17:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:06: FILE_FORMAT_GRP                               :0x0
18:17:06: COPY flag                                     :0x1
18:17:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:06: File_Format                                   :0x0
18:17:06: CRC                                           :0x0
18:17:06: ####CSD Registe Values####  

18:17:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:06: [GetSCRRegisterEntry] Passed
18:17:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:06: Data_Status_After Erases          : 0
18:17:06: CPRM Security Support             : No Security
18:17:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:06: Spec. Version                     : Version 3.0X
18:17:06: Extended Security Support         : Extended_Security_Not_Supported
18:17:06: Command Support                   : COMMAND_SUPPORT
18:17:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554B0>, <py_sfcl.CommandDataDefinition object at 0x05E37420>) , Command count = 2887 ] 
18:17:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DE0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 2888 ] 
18:17:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:06: [ SetBusWidth(0x4) , Command count = 2889 ] 
18:17:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2890 ] 
18:17:06: Protected Area Size 0x28000
18:17:06: Bus Width           2
18:17:06: Secure Mode         0
18:17:06: Speed  Class        4
18:17:06: Perf Move           0
18:17:06: Au Size             9
18:17:06: Erase Size          15
18:17:06: Erase Timeout       1
18:17:06: Erase offset        1
18:17:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2891 ] 
18:17:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:06: Host Frequency set to 100000 KHz
18:17:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:06: ####CSD Registe 2.0 Values####
18:17:06: CSD_STRUCTURE                                 :0x1
18:17:06: Reserv1                                       :0x0
18:17:06: Time Access 1 TAAC                            :0xe
18:17:06: Time Access 2 NSAC*100                        :0x0
18:17:06: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:06: Card Command Classess CCC                     :0x5b5
18:17:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:07: DSR(driver stage register)  DSR_IMP           :0x0
18:17:07: Reserv2                                       :0x0
18:17:07: Device Size C_SIZE                            :0xedc8
18:17:07: Reserv3                                       :0x0
18:17:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:07: Reserv4                                       :0x0
18:17:07: Write Speed Factor R2W_FACTOR                 :0x2
18:17:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:07: FILE_FORMAT_GRP                               :0x0
18:17:07: COPY flag                                     :0x1
18:17:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:07: File_Format                                   :0x0
18:17:07: CRC                                           :0x0
18:17:07: ####CSD Registe Values####  

18:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6C0>, <py_sfcl.CommandDataDefinition object at 0x05E37A50>) , Command count = 2892 ] 
18:17:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D840>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 2893 ] 
18:17:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:07: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:07: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:07: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2894 ] 
18:17:07: Protected Area Size 0x28000
18:17:07: Bus Width           2
18:17:07: Secure Mode         0
18:17:07: Speed  Class        4
18:17:07: Perf Move           0
18:17:07: Au Size             9
18:17:07: Erase Size          15
18:17:07: Erase Timeout       1
18:17:07: Erase offset        1
18:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:07: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:17:07: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2895 ] 
18:17:07: Protected Area Size 0x28000
18:17:07: Bus Width           2
18:17:07: Secure Mode         0
18:17:07: Speed  Class        4
18:17:07: Perf Move           0
18:17:07: Au Size             9
18:17:07: Erase Size          15
18:17:07: Erase Timeout       1
18:17:07: Erase offset        1
18:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:07: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:17:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2896 ] 
18:17:07: Protected Area Size 0x28000
18:17:07: Bus Width           2
18:17:07: Secure Mode         0
18:17:07: Speed  Class        4
18:17:07: Perf Move           0
18:17:07: Au Size             9
18:17:07: Erase Size          15
18:17:07: Erase Timeout       1
18:17:07: Erase offset        1
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2897 ] 
18:17:08: Protected Area Size 0x28000
18:17:08: Bus Width           2
18:17:08: Secure Mode         0
18:17:08: Speed  Class        4
18:17:08: Perf Move           0
18:17:08: Au Size             9
18:17:08: Erase Size          15
18:17:08: Erase Timeout       1
18:17:08: Erase offset        1
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2898 ] 
18:17:08: Protected Area Size 0x28000
18:17:08: Bus Width           2
18:17:08: Secure Mode         0
18:17:08: Speed  Class        4
18:17:08: Perf Move           0
18:17:08: Au Size             9
18:17:08: Erase Size          15
18:17:08: Erase Timeout       1
18:17:08: Erase offset        1
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2899 ] 
18:17:08: Protected Area Size 0x28000
18:17:08: Bus Width           2
18:17:08: Secure Mode         0
18:17:08: Speed  Class        4
18:17:08: Perf Move           0
18:17:08: Au Size             9
18:17:08: Erase Size          15
18:17:08: Erase Timeout       1
18:17:08: Erase offset        1
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:17:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:17:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:17:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:17:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 1 
18:17:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:17:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:17:08: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:17:08: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:17:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:08: Perform Power Off and On.
18:17:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2900 ] 
18:17:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 2901 ] 
18:17:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 2902 ] 
18:17:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2903 ] 
18:17:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:11: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:13: Host Frequency set to 25000 KHz
18:17:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:13: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37780>, 0x0, True) , Command count = 2904 ] 
18:17:13: [GO18_globalSetVolt]### Host voltage value is set.
18:17:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DB70>, 0x0, False) , Command count = 2905 ] 
18:17:13: [GO18_globalSetVolt]### Host voltage value is set.
18:17:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2906 ] 
18:17:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2907 ] 
18:17:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2908 ] 
18:17:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E3EFC0>) , Command count = 2909 ] 
18:17:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 2910 ] 
18:17:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2911 ] 
18:17:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:13: Host Frequency set to 25000 KHz
18:17:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:13: ####CSD Registe 2.0 Values####
18:17:13: CSD_STRUCTURE                                 :0x1
18:17:13: Reserv1                                       :0x0
18:17:13: Time Access 1 TAAC                            :0xe
18:17:13: Time Access 2 NSAC*100                        :0x0
18:17:13: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:13: Card Command Classess CCC                     :0x5b5
18:17:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:13: DSR(driver stage register)  DSR_IMP           :0x0
18:17:13: Reserv2                                       :0x0
18:17:13: Device Size C_SIZE                            :0xedc8
18:17:13: Reserv3                                       :0x0
18:17:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:13: Reserv4                                       :0x0
18:17:13: Write Speed Factor R2W_FACTOR                 :0x2
18:17:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:13: FILE_FORMAT_GRP                               :0x0
18:17:13: COPY flag                                     :0x1
18:17:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:13: File_Format                                   :0x0
18:17:13: CRC                                           :0x0
18:17:13: ####CSD Registe Values####  

18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:13: [GetSCRRegisterEntry] Passed
18:17:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:13: Data_Status_After Erases          : 0
18:17:13: CPRM Security Support             : No Security
18:17:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:13: Spec. Version                     : Version 3.0X
18:17:13: Extended Security Support         : Extended_Security_Not_Supported
18:17:13: Command Support                   : COMMAND_SUPPORT
18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E3E4E0>) , Command count = 2912 ] 
18:17:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 2913 ] 
18:17:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:13: [ SetBusWidth(0x4) , Command count = 2914 ] 
18:17:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2915 ] 
18:17:13: Protected Area Size 0x28000
18:17:13: Bus Width           2
18:17:13: Secure Mode         0
18:17:13: Speed  Class        4
18:17:13: Perf Move           0
18:17:13: Au Size             9
18:17:13: Erase Size          15
18:17:13: Erase Timeout       1
18:17:13: Erase offset        1
18:17:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2916 ] 
18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:13: Host Frequency set to 100000 KHz
18:17:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:13: ####CSD Registe 2.0 Values####
18:17:13: CSD_STRUCTURE                                 :0x1
18:17:13: Reserv1                                       :0x0
18:17:13: Time Access 1 TAAC                            :0xe
18:17:13: Time Access 2 NSAC*100                        :0x0
18:17:13: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:13: Card Command Classess CCC                     :0x5b5
18:17:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:13: DSR(driver stage register)  DSR_IMP           :0x0
18:17:13: Reserv2                                       :0x0
18:17:13: Device Size C_SIZE                            :0xedc8
18:17:13: Reserv3                                       :0x0
18:17:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:13: Reserv4                                       :0x0
18:17:13: Write Speed Factor R2W_FACTOR                 :0x2
18:17:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:13: FILE_FORMAT_GRP                               :0x0
18:17:13: COPY flag                                     :0x1
18:17:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:13: File_Format                                   :0x0
18:17:13: CRC                                           :0x0
18:17:13: ####CSD Registe Values####  

18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 2917 ] 
18:17:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E55090>) , Command count = 2918 ] 
18:17:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:13: [GetSCRRegisterEntry] Passed
18:17:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:13: Data_Status_After Erases          : 0
18:17:13: CPRM Security Support             : No Security
18:17:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:13: Spec. Version                     : Version 3.0X
18:17:13: Extended Security Support         : Extended_Security_Not_Supported
18:17:13: Command Support                   : COMMAND_SUPPORT
18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:13: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:17:13: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:17:13: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:13: [GetSCRRegisterEntry] Passed
18:17:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:13: Data_Status_After Erases          : 0
18:17:13: CPRM Security Support             : No Security
18:17:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:13: Spec. Version                     : Version 3.0X
18:17:13: Extended Security Support         : Extended_Security_Not_Supported
18:17:13: Command Support                   : COMMAND_SUPPORT
18:17:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:13: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:13: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2919 ] 
18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:17:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:13: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:15: Host Frequency set to 25000 KHz
18:17:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:15: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB330>, 0x0, True) , Command count = 2920 ] 
18:17:15: [GO18_globalSetVolt]### Host voltage value is set.
18:17:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E444B0>, 0x0, False) , Command count = 2921 ] 
18:17:16: [GO18_globalSetVolt]### Host voltage value is set.
18:17:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2922 ] 
18:17:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2923 ] 
18:17:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2924 ] 
18:17:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44990>, <py_sfcl.CommandDataDefinition object at 0x05E440F0>) , Command count = 2925 ] 
18:17:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555A0>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 2926 ] 
18:17:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2927 ] 
18:17:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:16: Host Frequency set to 25000 KHz
18:17:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:16: ####CSD Registe 2.0 Values####
18:17:16: CSD_STRUCTURE                                 :0x1
18:17:16: Reserv1                                       :0x0
18:17:16: Time Access 1 TAAC                            :0xe
18:17:16: Time Access 2 NSAC*100                        :0x0
18:17:16: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:16: Card Command Classess CCC                     :0x5b5
18:17:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:16: DSR(driver stage register)  DSR_IMP           :0x0
18:17:16: Reserv2                                       :0x0
18:17:16: Device Size C_SIZE                            :0xedc8
18:17:16: Reserv3                                       :0x0
18:17:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:16: Reserv4                                       :0x0
18:17:16: Write Speed Factor R2W_FACTOR                 :0x2
18:17:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:16: FILE_FORMAT_GRP                               :0x0
18:17:16: COPY flag                                     :0x1
18:17:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:16: File_Format                                   :0x0
18:17:16: CRC                                           :0x0
18:17:16: ####CSD Registe Values####  

18:17:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:16: [GetSCRRegisterEntry] Passed
18:17:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:16: Data_Status_After Erases          : 0
18:17:16: CPRM Security Support             : No Security
18:17:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:16: Spec. Version                     : Version 3.0X
18:17:16: Extended Security Support         : Extended_Security_Not_Supported
18:17:16: Command Support                   : COMMAND_SUPPORT
18:17:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E448D0>) , Command count = 2928 ] 
18:17:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44900>, <py_sfcl.CommandDataDefinition object at 0x052C2AE0>) , Command count = 2929 ] 
18:17:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:16: [ SetBusWidth(0x4) , Command count = 2930 ] 
18:17:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2931 ] 
18:17:16: Protected Area Size 0x28000
18:17:16: Bus Width           2
18:17:16: Secure Mode         0
18:17:16: Speed  Class        4
18:17:16: Perf Move           0
18:17:16: Au Size             9
18:17:16: Erase Size          15
18:17:16: Erase Timeout       1
18:17:16: Erase offset        1
18:17:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2932 ] 
18:17:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:16: Host Frequency set to 100000 KHz
18:17:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:16: ####CSD Registe 2.0 Values####
18:17:16: CSD_STRUCTURE                                 :0x1
18:17:16: Reserv1                                       :0x0
18:17:16: Time Access 1 TAAC                            :0xe
18:17:16: Time Access 2 NSAC*100                        :0x0
18:17:16: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:16: Card Command Classess CCC                     :0x5b5
18:17:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:16: DSR(driver stage register)  DSR_IMP           :0x0
18:17:16: Reserv2                                       :0x0
18:17:16: Device Size C_SIZE                            :0xedc8
18:17:16: Reserv3                                       :0x0
18:17:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:16: Reserv4                                       :0x0
18:17:16: Write Speed Factor R2W_FACTOR                 :0x2
18:17:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:17: FILE_FORMAT_GRP                               :0x0
18:17:17: COPY flag                                     :0x1
18:17:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:17: File_Format                                   :0x0
18:17:17: CRC                                           :0x0
18:17:17: ####CSD Registe Values####  

18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55EA0>, <py_sfcl.CommandDataDefinition object at 0x05E3E240>) , Command count = 2933 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E720>, <py_sfcl.CommandDataDefinition object at 0x05E441B0>) , Command count = 2934 ] 
18:17:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44BD0>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 2935 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E592D0>, <py_sfcl.CommandDataDefinition object at 0x05E59690>) , Command count = 2936 ] 
18:17:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05E445A0>) , Command count = 2937 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5D0>, <py_sfcl.CommandDataDefinition object at 0x05E449F0>) , Command count = 2938 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59630>, <py_sfcl.CommandDataDefinition object at 0x05E59540>) , Command count = 2939 ] 
18:17:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A80>, <py_sfcl.CommandDataDefinition object at 0x05E59840>) , Command count = 2940 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC30>, <py_sfcl.CommandDataDefinition object at 0x05E598D0>) , Command count = 2941 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44330>, <py_sfcl.CommandDataDefinition object at 0x05E44B10>) , Command count = 2942 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E59F60>) , Command count = 2943 ] 
18:17:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 2944 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E390>, <py_sfcl.CommandDataDefinition object at 0x05E44570>) , Command count = 2945 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59B40>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 2946 ] 
18:17:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F210>, <py_sfcl.CommandDataDefinition object at 0x05E37B40>) , Command count = 2947 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E44210>) , Command count = 2948 ] 
18:17:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:17: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:17:17: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:17:17: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:17: [GetSCRRegisterEntry] Passed
18:17:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:17: Data_Status_After Erases          : 0
18:17:17: CPRM Security Support             : No Security
18:17:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:17: Spec. Version                     : Version 3.0X
18:17:17: Extended Security Support         : Extended_Security_Not_Supported
18:17:17: Command Support                   : COMMAND_SUPPORT
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:17: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:17: [GetSCRRegisterEntry] Passed
18:17:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:17: Data_Status_After Erases          : 0
18:17:17: CPRM Security Support             : No Security
18:17:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:17: Spec. Version                     : Version 3.0X
18:17:17: Extended Security Support         : Extended_Security_Not_Supported
18:17:17: Command Support                   : COMMAND_SUPPORT
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:17: [GetSCRRegisterEntry] Passed
18:17:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:17: Data_Status_After Erases          : 0
18:17:17: CPRM Security Support             : No Security
18:17:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:17: Spec. Version                     : Version 3.0X
18:17:17: Extended Security Support         : Extended_Security_Not_Supported
18:17:17: Command Support                   : COMMAND_SUPPORT
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:17: [GetSCRRegisterEntry] Passed
18:17:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:17: Data_Status_After Erases          : 0
18:17:17: CPRM Security Support             : No Security
18:17:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:17: Spec. Version                     : Version 3.0X
18:17:17: Extended Security Support         : Extended_Security_Not_Supported
18:17:17: Command Support                   : COMMAND_SUPPORT
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:17: [GetSCRRegisterEntry] Passed
18:17:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:17: Data_Status_After Erases          : 0
18:17:17: CPRM Security Support             : No Security
18:17:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:17: Spec. Version                     : Version 3.0X
18:17:17: Extended Security Support         : Extended_Security_Not_Supported
18:17:17: Command Support                   : COMMAND_SUPPORT
18:17:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:17: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:17:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:17:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:17:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:17:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:17: Perform Power Off and On.
18:17:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2949 ] 
18:17:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA480>, <py_sfcl.CommandDataDefinition object at 0x05E44270>) , Command count = 2950 ] 
18:17:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 2951 ] 
18:17:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2952 ] 
18:17:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:21: Host Frequency set to 25000 KHz
18:17:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E443C0>, 0x0, True) , Command count = 2953 ] 
18:17:21: [GO18_globalSetVolt]### Host voltage value is set.
18:17:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EA50>, 0x0, False) , Command count = 2954 ] 
18:17:21: [GO18_globalSetVolt]### Host voltage value is set.
18:17:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2955 ] 
18:17:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2956 ] 
18:17:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2957 ] 
18:17:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D50>, <py_sfcl.CommandDataDefinition object at 0x05E2DAE0>) , Command count = 2958 ] 
18:17:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC00>, <py_sfcl.CommandDataDefinition object at 0x05DB8D20>) , Command count = 2959 ] 
18:17:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2960 ] 
18:17:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:22: Host Frequency set to 25000 KHz
18:17:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:22: ####CSD Registe 2.0 Values####
18:17:22: CSD_STRUCTURE                                 :0x1
18:17:22: Reserv1                                       :0x0
18:17:22: Time Access 1 TAAC                            :0xe
18:17:22: Time Access 2 NSAC*100                        :0x0
18:17:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:22: Card Command Classess CCC                     :0x5b5
18:17:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:22: DSR(driver stage register)  DSR_IMP           :0x0
18:17:22: Reserv2                                       :0x0
18:17:22: Device Size C_SIZE                            :0xedc8
18:17:22: Reserv3                                       :0x0
18:17:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:22: Reserv4                                       :0x0
18:17:22: Write Speed Factor R2W_FACTOR                 :0x2
18:17:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:22: FILE_FORMAT_GRP                               :0x0
18:17:22: COPY flag                                     :0x1
18:17:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:22: File_Format                                   :0x0
18:17:22: CRC                                           :0x0
18:17:22: ####CSD Registe Values####  

18:17:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:22: [GetSCRRegisterEntry] Passed
18:17:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:22: Data_Status_After Erases          : 0
18:17:22: CPRM Security Support             : No Security
18:17:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:22: Spec. Version                     : Version 3.0X
18:17:22: Extended Security Support         : Extended_Security_Not_Supported
18:17:22: Command Support                   : COMMAND_SUPPORT
18:17:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E593C0>, <py_sfcl.CommandDataDefinition object at 0x05E59870>) , Command count = 2961 ] 
18:17:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F090>) , Command count = 2962 ] 
18:17:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:22: [ SetBusWidth(0x4) , Command count = 2963 ] 
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2964 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2965 ] 
18:17:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:22: Host Frequency set to 100000 KHz
18:17:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:22: ####CSD Registe 2.0 Values####
18:17:22: CSD_STRUCTURE                                 :0x1
18:17:22: Reserv1                                       :0x0
18:17:22: Time Access 1 TAAC                            :0xe
18:17:22: Time Access 2 NSAC*100                        :0x0
18:17:22: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:22: Card Command Classess CCC                     :0x5b5
18:17:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:22: DSR(driver stage register)  DSR_IMP           :0x0
18:17:22: Reserv2                                       :0x0
18:17:22: Device Size C_SIZE                            :0xedc8
18:17:22: Reserv3                                       :0x0
18:17:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:22: Reserv4                                       :0x0
18:17:22: Write Speed Factor R2W_FACTOR                 :0x2
18:17:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:22: FILE_FORMAT_GRP                               :0x0
18:17:22: COPY flag                                     :0x1
18:17:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:22: File_Format                                   :0x0
18:17:22: CRC                                           :0x0
18:17:22: ####CSD Registe Values####  

18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C00>, <py_sfcl.CommandDataDefinition object at 0x05E59DE0>) , Command count = 2966 ] 
18:17:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 2967 ] 
18:17:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3ED50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2968 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:17:22: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2969 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2970 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2971 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2972 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2973 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:17:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:17:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55930>, <py_sfcl.CommandDataDefinition object at 0x05E3EEA0>) , Command count = 2974 ] 
18:17:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4FAE0>) , Command count = 2975 ] 
18:17:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E44540>) , Command count = 2976 ] 
18:17:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 2977 ] 
18:17:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:17:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:22: [GetSCRRegisterEntry] Passed
18:17:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:22: Data_Status_After Erases          : 0
18:17:22: CPRM Security Support             : No Security
18:17:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:22: Spec. Version                     : Version 3.0X
18:17:22: Extended Security Support         : Extended_Security_Not_Supported
18:17:22: Command Support                   : COMMAND_SUPPORT
18:17:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2978 ] 
18:17:22: Protected Area Size 0x28000
18:17:22: Bus Width           2
18:17:22: Secure Mode         0
18:17:22: Speed  Class        4
18:17:22: Perf Move           0
18:17:22: Au Size             9
18:17:22: Erase Size          15
18:17:22: Erase Timeout       1
18:17:22: Erase offset        1
18:17:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:17:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 2979 ] 
18:17:24: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:17:24: [DVTCommonLib]### VOLA from card : 0x1
18:17:24: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:17:24: [DVTCommonLib]### Reserved bits from card : 0x0
18:17:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E600>, <py_sfcl.CommandDataDefinition object at 0x05E592A0>) , Command count = 2980 ] 
18:17:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50480>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 2981 ] 
18:17:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2982 ] 
18:17:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:24: [ SelectCard(0x1, True) , Command count = 2983 ] 
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05E596F0>) , Command count = 2984 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:24: [GetSCRRegisterEntry] Failed
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2985 ] 
18:17:24: [ GetCardStatus() , Command count = 2986 ] 
18:17:24: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:17:24: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59570>, <py_sfcl.CommandDataDefinition object at 0x05E44750>) , Command count = 2987 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E595D0>) , Command count = 2988 ] 
18:17:24: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50630>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 2989 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 2990 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:24: [GetSCRRegisterEntry] Passed
18:17:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:24: Data_Status_After Erases          : 0
18:17:24: CPRM Security Support             : No Security
18:17:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:24: Spec. Version                     : Version 3.0X
18:17:24: Extended Security Support         : Extended_Security_Not_Supported
18:17:24: Command Support                   : COMMAND_SUPPORT
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2991 ] 
18:17:24: Protected Area Size 0x28000
18:17:24: Bus Width           0
18:17:24: Secure Mode         0
18:17:24: Speed  Class        4
18:17:24: Perf Move           0
18:17:24: Au Size             9
18:17:24: Erase Size          15
18:17:24: Erase Timeout       1
18:17:24: Erase offset        1
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44600>, <py_sfcl.CommandDataDefinition object at 0x05E4F390>) , Command count = 2992 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E372D0>, <py_sfcl.CommandDataDefinition object at 0x05E37B70>) , Command count = 2993 ] 
18:17:24: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44870>, <py_sfcl.CommandDataDefinition object at 0x05E59900>) , Command count = 2994 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50450>, <py_sfcl.CommandDataDefinition object at 0x05E3E9F0>) , Command count = 2995 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:24: [GetSCRRegisterEntry] Failed
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E507B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2996 ] 
18:17:24: [ GetCardStatus() , Command count = 2997 ] 
18:17:24: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:17:24: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FBD0>, <py_sfcl.CommandDataDefinition object at 0x05E3EDB0>) , Command count = 2998 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501E0>, <py_sfcl.CommandDataDefinition object at 0x05E50AE0>) , Command count = 2999 ] 
18:17:24: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E3EF60>) , Command count = 3000 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E59930>) , Command count = 3001 ] 
18:17:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:24: [GetSCRRegisterEntry] Passed
18:17:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:24: Data_Status_After Erases          : 0
18:17:24: CPRM Security Support             : No Security
18:17:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:24: Spec. Version                     : Version 3.0X
18:17:24: Extended Security Support         : Extended_Security_Not_Supported
18:17:24: Command Support                   : COMMAND_SUPPORT
18:17:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3002 ] 
18:17:24: Protected Area Size 0x28000
18:17:24: Bus Width           0
18:17:24: Secure Mode         0
18:17:24: Speed  Class        4
18:17:24: Perf Move           0
18:17:24: Au Size             9
18:17:24: Erase Size          15
18:17:24: Erase Timeout       1
18:17:24: Erase offset        1
18:17:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:24: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:17:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3003 ] 
18:17:26: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:17:26: [DVTCommonLib]### VOLA from card : 0x1
18:17:26: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:17:26: [DVTCommonLib]### Reserved bits from card : 0x0
18:17:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E508A0>, <py_sfcl.CommandDataDefinition object at 0x05E37810>) , Command count = 3004 ] 
18:17:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E37570>) , Command count = 3005 ] 
18:17:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3006 ] 
18:17:27: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:27: [ SelectCard(0x1, True) , Command count = 3007 ] 
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:17:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:27: [GetSCRRegisterEntry] Failed
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:17:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3008 ] 
18:17:27: [ GetCardStatus() , Command count = 3009 ] 
18:17:27: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:17:27: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E507B0>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 3010 ] 
18:17:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50240>, <py_sfcl.CommandDataDefinition object at 0x05E59EA0>) , Command count = 3011 ] 
18:17:27: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59FC0>, <py_sfcl.CommandDataDefinition object at 0x05E599C0>) , Command count = 3012 ] 
18:17:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E4FF30>) , Command count = 3013 ] 
18:17:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:17:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:17:27: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:17:27: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:17:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:27: Perform Power Off and On.
18:17:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3014 ] 
18:17:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55A20>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 3015 ] 
18:17:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59DB0>, <py_sfcl.CommandDataDefinition object at 0x05E37570>) , Command count = 3016 ] 
18:17:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3017 ] 
18:17:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:29: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:31: Host Frequency set to 25000 KHz
18:17:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:31: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55C60>, 0x0, True) , Command count = 3018 ] 
18:17:31: [GO18_globalSetVolt]### Host voltage value is set.
18:17:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05278180>, 0x0, False) , Command count = 3019 ] 
18:17:31: [GO18_globalSetVolt]### Host voltage value is set.
18:17:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3020 ] 
18:17:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3021 ] 
18:17:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3022 ] 
18:17:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 3023 ] 
18:17:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E505A0>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 3024 ] 
18:17:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3025 ] 
18:17:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:31: Host Frequency set to 25000 KHz
18:17:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:31: ####CSD Registe 2.0 Values####
18:17:31: CSD_STRUCTURE                                 :0x1
18:17:31: Reserv1                                       :0x0
18:17:31: Time Access 1 TAAC                            :0xe
18:17:31: Time Access 2 NSAC*100                        :0x0
18:17:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:31: Card Command Classess CCC                     :0x5b5
18:17:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:31: DSR(driver stage register)  DSR_IMP           :0x0
18:17:31: Reserv2                                       :0x0
18:17:31: Device Size C_SIZE                            :0xedc8
18:17:31: Reserv3                                       :0x0
18:17:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:31: Reserv4                                       :0x0
18:17:31: Write Speed Factor R2W_FACTOR                 :0x2
18:17:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:31: FILE_FORMAT_GRP                               :0x0
18:17:31: COPY flag                                     :0x1
18:17:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:31: File_Format                                   :0x0
18:17:31: CRC                                           :0x0
18:17:31: ####CSD Registe Values####  

18:17:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:31: [GetSCRRegisterEntry] Passed
18:17:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:31: Data_Status_After Erases          : 0
18:17:31: CPRM Security Support             : No Security
18:17:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:31: Spec. Version                     : Version 3.0X
18:17:31: Extended Security Support         : Extended_Security_Not_Supported
18:17:31: Command Support                   : COMMAND_SUPPORT
18:17:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E503C0>) , Command count = 3026 ] 
18:17:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509F0>, <py_sfcl.CommandDataDefinition object at 0x05E50D50>) , Command count = 3027 ] 
18:17:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:31: [ SetBusWidth(0x4) , Command count = 3028 ] 
18:17:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E509C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3029 ] 
18:17:31: Protected Area Size 0x28000
18:17:31: Bus Width           2
18:17:31: Secure Mode         0
18:17:31: Speed  Class        4
18:17:31: Perf Move           0
18:17:31: Au Size             9
18:17:31: Erase Size          15
18:17:31: Erase Timeout       1
18:17:31: Erase offset        1
18:17:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3030 ] 
18:17:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:31: Host Frequency set to 100000 KHz
18:17:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:31: ####CSD Registe 2.0 Values####
18:17:31: CSD_STRUCTURE                                 :0x1
18:17:31: Reserv1                                       :0x0
18:17:31: Time Access 1 TAAC                            :0xe
18:17:31: Time Access 2 NSAC*100                        :0x0
18:17:31: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:31: Card Command Classess CCC                     :0x5b5
18:17:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:31: DSR(driver stage register)  DSR_IMP           :0x0
18:17:31: Reserv2                                       :0x0
18:17:31: Device Size C_SIZE                            :0xedc8
18:17:31: Reserv3                                       :0x0
18:17:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:31: Reserv4                                       :0x0
18:17:31: Write Speed Factor R2W_FACTOR                 :0x2
18:17:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:31: FILE_FORMAT_GRP                               :0x0
18:17:31: COPY flag                                     :0x1
18:17:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:31: File_Format                                   :0x0
18:17:31: CRC                                           :0x0
18:17:31: ####CSD Registe Values####  

18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C00>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 3031 ] 
18:17:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E507E0>, <py_sfcl.CommandDataDefinition object at 0x05E50CF0>) , Command count = 3032 ] 
18:17:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:32: [GetSCRRegisterEntry] Passed
18:17:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:32: Data_Status_After Erases          : 0
18:17:32: CPRM Security Support             : No Security
18:17:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:32: Spec. Version                     : Version 3.0X
18:17:32: Extended Security Support         : Extended_Security_Not_Supported
18:17:32: Command Support                   : COMMAND_SUPPORT
18:17:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:32: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:17:32: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:17:32: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:17:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:32: [GetSCRRegisterEntry] Passed
18:17:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:32: Data_Status_After Erases          : 0
18:17:32: CPRM Security Support             : No Security
18:17:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:32: Spec. Version                     : Version 3.0X
18:17:32: Extended Security Support         : Extended_Security_Not_Supported
18:17:32: Command Support                   : COMMAND_SUPPORT
18:17:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:32: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:32: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3033 ] 
18:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:17:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:32: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:34: Host Frequency set to 25000 KHz
18:17:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:34: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FE70>, 0x0, True) , Command count = 3034 ] 
18:17:34: [GO18_globalSetVolt]### Host voltage value is set.
18:17:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E506F0>, 0x0, False) , Command count = 3035 ] 
18:17:34: [GO18_globalSetVolt]### Host voltage value is set.
18:17:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3036 ] 
18:17:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3037 ] 
18:17:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3038 ] 
18:17:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 3039 ] 
18:17:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E030>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 3040 ] 
18:17:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3041 ] 
18:17:34: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:34: Host Frequency set to 25000 KHz
18:17:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:34: ####CSD Registe 2.0 Values####
18:17:34: CSD_STRUCTURE                                 :0x1
18:17:34: Reserv1                                       :0x0
18:17:34: Time Access 1 TAAC                            :0xe
18:17:34: Time Access 2 NSAC*100                        :0x0
18:17:34: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:34: Card Command Classess CCC                     :0x5b5
18:17:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:34: DSR(driver stage register)  DSR_IMP           :0x0
18:17:34: Reserv2                                       :0x0
18:17:34: Device Size C_SIZE                            :0xedc8
18:17:34: Reserv3                                       :0x0
18:17:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:34: Reserv4                                       :0x0
18:17:34: Write Speed Factor R2W_FACTOR                 :0x2
18:17:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:34: FILE_FORMAT_GRP                               :0x0
18:17:34: COPY flag                                     :0x1
18:17:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:34: File_Format                                   :0x0
18:17:34: CRC                                           :0x0
18:17:34: ####CSD Registe Values####  

18:17:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:34: [GetSCRRegisterEntry] Passed
18:17:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:34: Data_Status_After Erases          : 0
18:17:34: CPRM Security Support             : No Security
18:17:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:34: Spec. Version                     : Version 3.0X
18:17:34: Extended Security Support         : Extended_Security_Not_Supported
18:17:34: Command Support                   : COMMAND_SUPPORT
18:17:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59750>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 3042 ] 
18:17:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EAE0>, <py_sfcl.CommandDataDefinition object at 0x052BB570>) , Command count = 3043 ] 
18:17:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:34: [ SetBusWidth(0x4) , Command count = 3044 ] 
18:17:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3045 ] 
18:17:34: Protected Area Size 0x28000
18:17:34: Bus Width           2
18:17:34: Secure Mode         0
18:17:34: Speed  Class        4
18:17:34: Perf Move           0
18:17:34: Au Size             9
18:17:34: Erase Size          15
18:17:34: Erase Timeout       1
18:17:34: Erase offset        1
18:17:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3046 ] 
18:17:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:34: Host Frequency set to 100000 KHz
18:17:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:34: ####CSD Registe 2.0 Values####
18:17:34: CSD_STRUCTURE                                 :0x1
18:17:34: Reserv1                                       :0x0
18:17:34: Time Access 1 TAAC                            :0xe
18:17:34: Time Access 2 NSAC*100                        :0x0
18:17:34: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:34: Card Command Classess CCC                     :0x5b5
18:17:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:34: DSR(driver stage register)  DSR_IMP           :0x0
18:17:34: Reserv2                                       :0x0
18:17:34: Device Size C_SIZE                            :0xedc8
18:17:34: Reserv3                                       :0x0
18:17:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:35: Reserv4                                       :0x0
18:17:35: Write Speed Factor R2W_FACTOR                 :0x2
18:17:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:35: FILE_FORMAT_GRP                               :0x0
18:17:35: COPY flag                                     :0x1
18:17:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:35: File_Format                                   :0x0
18:17:35: CRC                                           :0x0
18:17:35: ####CSD Registe Values####  

18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E150>, <py_sfcl.CommandDataDefinition object at 0x05E4F3C0>) , Command count = 3047 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 3048 ] 
18:17:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F810>, <py_sfcl.CommandDataDefinition object at 0x05E4FAB0>) , Command count = 3049 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50810>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 3050 ] 
18:17:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF60>) , Command count = 3051 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E501B0>) , Command count = 3052 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50DB0>, <py_sfcl.CommandDataDefinition object at 0x05E50FC0>) , Command count = 3053 ] 
18:17:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 3054 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 3055 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x05E4FD80>) , Command count = 3056 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 3057 ] 
18:17:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E55720>) , Command count = 3058 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E37900>) , Command count = 3059 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59120>, <py_sfcl.CommandDataDefinition object at 0x05E55A50>) , Command count = 3060 ] 
18:17:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A150>, <py_sfcl.CommandDataDefinition object at 0x05E55660>) , Command count = 3061 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x052BBD80>) , Command count = 3062 ] 
18:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:35: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:17:35: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:17:35: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:35: [GetSCRRegisterEntry] Passed
18:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:35: Data_Status_After Erases          : 0
18:17:35: CPRM Security Support             : No Security
18:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:35: Spec. Version                     : Version 3.0X
18:17:35: Extended Security Support         : Extended_Security_Not_Supported
18:17:35: Command Support                   : COMMAND_SUPPORT
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:35: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:35: [GetSCRRegisterEntry] Passed
18:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:35: Data_Status_After Erases          : 0
18:17:35: CPRM Security Support             : No Security
18:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:35: Spec. Version                     : Version 3.0X
18:17:35: Extended Security Support         : Extended_Security_Not_Supported
18:17:35: Command Support                   : COMMAND_SUPPORT
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:35: [GetSCRRegisterEntry] Passed
18:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:35: Data_Status_After Erases          : 0
18:17:35: CPRM Security Support             : No Security
18:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:35: Spec. Version                     : Version 3.0X
18:17:35: Extended Security Support         : Extended_Security_Not_Supported
18:17:35: Command Support                   : COMMAND_SUPPORT
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:35: [GetSCRRegisterEntry] Passed
18:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:35: Data_Status_After Erases          : 0
18:17:35: CPRM Security Support             : No Security
18:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:35: Spec. Version                     : Version 3.0X
18:17:35: Extended Security Support         : Extended_Security_Not_Supported
18:17:35: Command Support                   : COMMAND_SUPPORT
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:35: [GetSCRRegisterEntry] Passed
18:17:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:35: Data_Status_After Erases          : 0
18:17:35: CPRM Security Support             : No Security
18:17:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:35: Spec. Version                     : Version 3.0X
18:17:35: Extended Security Support         : Extended_Security_Not_Supported
18:17:35: Command Support                   : COMMAND_SUPPORT
18:17:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:35: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:17:35: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:17:35: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:17:35: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:17:35: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:35: Perform Power Off and On.
18:17:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3063 ] 
18:17:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 3064 ] 
18:17:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5D0>, <py_sfcl.CommandDataDefinition object at 0x05E597E0>) , Command count = 3065 ] 
18:17:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3066 ] 
18:17:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:38: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:40: Host Frequency set to 25000 KHz
18:17:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:40: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59AB0>, 0x0, True) , Command count = 3067 ] 
18:17:40: [GO18_globalSetVolt]### Host voltage value is set.
18:17:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDBA0>, 0x0, False) , Command count = 3068 ] 
18:17:40: [GO18_globalSetVolt]### Host voltage value is set.
18:17:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3069 ] 
18:17:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3070 ] 
18:17:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3071 ] 
18:17:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 3072 ] 
18:17:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E59240>) , Command count = 3073 ] 
18:17:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3074 ] 
18:17:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:40: Host Frequency set to 25000 KHz
18:17:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:40: ####CSD Registe 2.0 Values####
18:17:40: CSD_STRUCTURE                                 :0x1
18:17:40: Reserv1                                       :0x0
18:17:40: Time Access 1 TAAC                            :0xe
18:17:40: Time Access 2 NSAC*100                        :0x0
18:17:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:40: Card Command Classess CCC                     :0x5b5
18:17:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:40: DSR(driver stage register)  DSR_IMP           :0x0
18:17:40: Reserv2                                       :0x0
18:17:40: Device Size C_SIZE                            :0xedc8
18:17:40: Reserv3                                       :0x0
18:17:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:40: Reserv4                                       :0x0
18:17:40: Write Speed Factor R2W_FACTOR                 :0x2
18:17:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:40: FILE_FORMAT_GRP                               :0x0
18:17:40: COPY flag                                     :0x1
18:17:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:40: File_Format                                   :0x0
18:17:40: CRC                                           :0x0
18:17:40: ####CSD Registe Values####  

18:17:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:40: [GetSCRRegisterEntry] Passed
18:17:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:40: Data_Status_After Erases          : 0
18:17:40: CPRM Security Support             : No Security
18:17:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:40: Spec. Version                     : Version 3.0X
18:17:40: Extended Security Support         : Extended_Security_Not_Supported
18:17:40: Command Support                   : COMMAND_SUPPORT
18:17:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E59A50>) , Command count = 3075 ] 
18:17:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2AC60>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 3076 ] 
18:17:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:40: [ SetBusWidth(0x4) , Command count = 3077 ] 
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3078 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3079 ] 
18:17:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:40: Host Frequency set to 100000 KHz
18:17:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:40: ####CSD Registe 2.0 Values####
18:17:40: CSD_STRUCTURE                                 :0x1
18:17:40: Reserv1                                       :0x0
18:17:40: Time Access 1 TAAC                            :0xe
18:17:40: Time Access 2 NSAC*100                        :0x0
18:17:40: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:40: Card Command Classess CCC                     :0x5b5
18:17:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:40: DSR(driver stage register)  DSR_IMP           :0x0
18:17:40: Reserv2                                       :0x0
18:17:40: Device Size C_SIZE                            :0xedc8
18:17:40: Reserv3                                       :0x0
18:17:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:40: Reserv4                                       :0x0
18:17:40: Write Speed Factor R2W_FACTOR                 :0x2
18:17:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:40: FILE_FORMAT_GRP                               :0x0
18:17:40: COPY flag                                     :0x1
18:17:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:40: File_Format                                   :0x0
18:17:40: CRC                                           :0x0
18:17:40: ####CSD Registe Values####  

18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A420>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 3080 ] 
18:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB390>, <py_sfcl.CommandDataDefinition object at 0x05E59330>) , Command count = 3081 ] 
18:17:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3082 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:17:40: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E76150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3083 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3084 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E76150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3085 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3086 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E556F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3087 ] 
18:17:40: Protected Area Size 0x28000
18:17:40: Bus Width           2
18:17:40: Secure Mode         0
18:17:40: Speed  Class        4
18:17:40: Perf Move           0
18:17:40: Au Size             9
18:17:40: Erase Size          15
18:17:40: Erase Timeout       1
18:17:40: Erase offset        1
18:17:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:17:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:17:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:17:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3088 ] 
18:17:43: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:17:43: [DVTCommonLib]### VOLA from card : 0x1
18:17:43: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:17:43: [DVTCommonLib]### Reserved bits from card : 0x0
18:17:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05D2A7B0>) , Command count = 3089 ] 
18:17:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 3090 ] 
18:17:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3091 ] 
18:17:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:43: [ SelectCard(0x1, True) , Command count = 3092 ] 
18:17:43: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:17:43: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:17:43: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:17:43: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:43: Perform Power Off and On.
18:17:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3093 ] 
18:17:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8C60>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 3094 ] 
18:17:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E2DA50>) , Command count = 3095 ] 
18:17:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3096 ] 
18:17:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:45: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:47: Host Frequency set to 25000 KHz
18:17:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:47: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DD80>, 0x0, True) , Command count = 3097 ] 
18:17:47: [GO18_globalSetVolt]### Host voltage value is set.
18:17:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50A50>, 0x0, False) , Command count = 3098 ] 
18:17:47: [GO18_globalSetVolt]### Host voltage value is set.
18:17:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3099 ] 
18:17:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3100 ] 
18:17:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3101 ] 
18:17:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05270930>, <py_sfcl.CommandDataDefinition object at 0x05E50330>) , Command count = 3102 ] 
18:17:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 3103 ] 
18:17:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3104 ] 
18:17:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:47: Host Frequency set to 25000 KHz
18:17:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:47: ####CSD Registe 2.0 Values####
18:17:47: CSD_STRUCTURE                                 :0x1
18:17:47: Reserv1                                       :0x0
18:17:47: Time Access 1 TAAC                            :0xe
18:17:47: Time Access 2 NSAC*100                        :0x0
18:17:47: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:47: Card Command Classess CCC                     :0x5b5
18:17:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:47: DSR(driver stage register)  DSR_IMP           :0x0
18:17:47: Reserv2                                       :0x0
18:17:47: Device Size C_SIZE                            :0xedc8
18:17:47: Reserv3                                       :0x0
18:17:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:47: Reserv4                                       :0x0
18:17:47: Write Speed Factor R2W_FACTOR                 :0x2
18:17:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:47: FILE_FORMAT_GRP                               :0x0
18:17:47: COPY flag                                     :0x1
18:17:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:47: File_Format                                   :0x0
18:17:47: CRC                                           :0x0
18:17:47: ####CSD Registe Values####  

18:17:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:47: [GetSCRRegisterEntry] Passed
18:17:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:47: Data_Status_After Erases          : 0
18:17:47: CPRM Security Support             : No Security
18:17:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:47: Spec. Version                     : Version 3.0X
18:17:47: Extended Security Support         : Extended_Security_Not_Supported
18:17:47: Command Support                   : COMMAND_SUPPORT
18:17:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 3105 ] 
18:17:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 3106 ] 
18:17:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:47: [ SetBusWidth(0x4) , Command count = 3107 ] 
18:17:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3108 ] 
18:17:47: Protected Area Size 0x28000
18:17:47: Bus Width           2
18:17:47: Secure Mode         0
18:17:47: Speed  Class        4
18:17:47: Perf Move           0
18:17:47: Au Size             9
18:17:47: Erase Size          15
18:17:47: Erase Timeout       1
18:17:47: Erase offset        1
18:17:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3109 ] 
18:17:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:48: Host Frequency set to 100000 KHz
18:17:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:48: ####CSD Registe 2.0 Values####
18:17:48: CSD_STRUCTURE                                 :0x1
18:17:48: Reserv1                                       :0x0
18:17:48: Time Access 1 TAAC                            :0xe
18:17:48: Time Access 2 NSAC*100                        :0x0
18:17:48: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:48: Card Command Classess CCC                     :0x5b5
18:17:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:48: DSR(driver stage register)  DSR_IMP           :0x0
18:17:48: Reserv2                                       :0x0
18:17:48: Device Size C_SIZE                            :0xedc8
18:17:48: Reserv3                                       :0x0
18:17:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:48: Reserv4                                       :0x0
18:17:48: Write Speed Factor R2W_FACTOR                 :0x2
18:17:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:48: FILE_FORMAT_GRP                               :0x0
18:17:48: COPY flag                                     :0x1
18:17:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:48: File_Format                                   :0x0
18:17:48: CRC                                           :0x0
18:17:48: ####CSD Registe Values####  

18:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 3110 ] 
18:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF90>, <py_sfcl.CommandDataDefinition object at 0x05E2DD20>) , Command count = 3111 ] 
18:17:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:48: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:48: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:48: [GetSCRRegisterEntry] Passed
18:17:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:48: Data_Status_After Erases          : 0
18:17:48: CPRM Security Support             : No Security
18:17:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:48: Spec. Version                     : Version 3.0X
18:17:48: Extended Security Support         : Extended_Security_Not_Supported
18:17:48: Command Support                   : COMMAND_SUPPORT
18:17:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:48: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:17:48: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:17:48: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:17:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:48: [GetSCRRegisterEntry] Passed
18:17:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:48: Data_Status_After Erases          : 0
18:17:48: CPRM Security Support             : No Security
18:17:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:48: Spec. Version                     : Version 3.0X
18:17:48: Extended Security Support         : Extended_Security_Not_Supported
18:17:48: Command Support                   : COMMAND_SUPPORT
18:17:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:48: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:17:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:48: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3112 ] 
18:17:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:17:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:48: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:50: Host Frequency set to 25000 KHz
18:17:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:50: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF00>, 0x0, True) , Command count = 3113 ] 
18:17:50: [GO18_globalSetVolt]### Host voltage value is set.
18:17:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37C00>, 0x0, False) , Command count = 3114 ] 
18:17:50: [GO18_globalSetVolt]### Host voltage value is set.
18:17:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3115 ] 
18:17:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3116 ] 
18:17:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3117 ] 
18:17:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37450>) , Command count = 3118 ] 
18:17:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 3119 ] 
18:17:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3120 ] 
18:17:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:50: Host Frequency set to 25000 KHz
18:17:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:50: ####CSD Registe 2.0 Values####
18:17:50: CSD_STRUCTURE                                 :0x1
18:17:50: Reserv1                                       :0x0
18:17:50: Time Access 1 TAAC                            :0xe
18:17:50: Time Access 2 NSAC*100                        :0x0
18:17:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:50: Card Command Classess CCC                     :0x5b5
18:17:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:50: DSR(driver stage register)  DSR_IMP           :0x0
18:17:50: Reserv2                                       :0x0
18:17:50: Device Size C_SIZE                            :0xedc8
18:17:50: Reserv3                                       :0x0
18:17:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:50: Reserv4                                       :0x0
18:17:50: Write Speed Factor R2W_FACTOR                 :0x2
18:17:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:50: FILE_FORMAT_GRP                               :0x0
18:17:50: COPY flag                                     :0x1
18:17:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:50: File_Format                                   :0x0
18:17:50: CRC                                           :0x0
18:17:50: ####CSD Registe Values####  

18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E55270>) , Command count = 3121 ] 
18:17:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55CF0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 3122 ] 
18:17:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:50: [ SetBusWidth(0x4) , Command count = 3123 ] 
18:17:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3124 ] 
18:17:50: Protected Area Size 0x28000
18:17:50: Bus Width           2
18:17:50: Secure Mode         0
18:17:50: Speed  Class        4
18:17:50: Perf Move           0
18:17:50: Au Size             9
18:17:50: Erase Size          15
18:17:50: Erase Timeout       1
18:17:50: Erase offset        1
18:17:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3125 ] 
18:17:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:50: Host Frequency set to 100000 KHz
18:17:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:50: ####CSD Registe 2.0 Values####
18:17:50: CSD_STRUCTURE                                 :0x1
18:17:50: Reserv1                                       :0x0
18:17:50: Time Access 1 TAAC                            :0xe
18:17:50: Time Access 2 NSAC*100                        :0x0
18:17:50: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:50: Card Command Classess CCC                     :0x5b5
18:17:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:50: DSR(driver stage register)  DSR_IMP           :0x0
18:17:50: Reserv2                                       :0x0
18:17:50: Device Size C_SIZE                            :0xedc8
18:17:50: Reserv3                                       :0x0
18:17:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:50: Reserv4                                       :0x0
18:17:50: Write Speed Factor R2W_FACTOR                 :0x2
18:17:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:50: FILE_FORMAT_GRP                               :0x0
18:17:50: COPY flag                                     :0x1
18:17:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:50: File_Format                                   :0x0
18:17:50: CRC                                           :0x0
18:17:50: ####CSD Registe Values####  

18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A20>, <py_sfcl.CommandDataDefinition object at 0x05E37600>) , Command count = 3126 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D6F0>, <py_sfcl.CommandDataDefinition object at 0x05E37C90>) , Command count = 3127 ] 
18:17:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E376C0>) , Command count = 3128 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E55060>) , Command count = 3129 ] 
18:17:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05E37F30>) , Command count = 3130 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E2D870>) , Command count = 3131 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E557B0>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 3132 ] 
18:17:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50570>, <py_sfcl.CommandDataDefinition object at 0x05E55E70>) , Command count = 3133 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 3134 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E270>, <py_sfcl.CommandDataDefinition object at 0x05E37A80>) , Command count = 3135 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C60>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 3136 ] 
18:17:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 3137 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E8D0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE10>) , Command count = 3138 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37420>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 3139 ] 
18:17:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7E0>, <py_sfcl.CommandDataDefinition object at 0x05E76120>) , Command count = 3140 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E554B0>, <py_sfcl.CommandDataDefinition object at 0x05E446F0>) , Command count = 3141 ] 
18:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:17:50: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:17:50: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:17:50: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:50: [GetSCRRegisterEntry] Passed
18:17:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:50: Data_Status_After Erases          : 0
18:17:50: CPRM Security Support             : No Security
18:17:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:50: Spec. Version                     : Version 3.0X
18:17:50: Extended Security Support         : Extended_Security_Not_Supported
18:17:50: Command Support                   : COMMAND_SUPPORT
18:17:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:50: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:17:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:17:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:17:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:17:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:50: Perform Power Off and On.
18:17:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3142 ] 
18:17:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DE0>, <py_sfcl.CommandDataDefinition object at 0x05D2A180>) , Command count = 3143 ] 
18:17:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E3E6C0>) , Command count = 3144 ] 
18:17:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:53: [ SetCardRCA(0x1, 0xD555) , Command count = 3145 ] 
18:17:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:53: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:55: Host Frequency set to 25000 KHz
18:17:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:55: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA570>, 0x0, True) , Command count = 3146 ] 
18:17:55: [GO18_globalSetVolt]### Host voltage value is set.
18:17:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50C90>, 0x0, False) , Command count = 3147 ] 
18:17:55: [GO18_globalSetVolt]### Host voltage value is set.
18:17:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3148 ] 
18:17:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3149 ] 
18:17:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3150 ] 
18:17:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55120>, <py_sfcl.CommandDataDefinition object at 0x05E37930>) , Command count = 3151 ] 
18:17:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D840>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 3152 ] 
18:17:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3153 ] 
18:17:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:55: Host Frequency set to 25000 KHz
18:17:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:55: ####CSD Registe 2.0 Values####
18:17:55: CSD_STRUCTURE                                 :0x1
18:17:55: Reserv1                                       :0x0
18:17:55: Time Access 1 TAAC                            :0xe
18:17:55: Time Access 2 NSAC*100                        :0x0
18:17:55: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:55: Card Command Classess CCC                     :0x5b5
18:17:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:55: DSR(driver stage register)  DSR_IMP           :0x0
18:17:55: Reserv2                                       :0x0
18:17:55: Device Size C_SIZE                            :0xedc8
18:17:55: Reserv3                                       :0x0
18:17:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:55: Reserv4                                       :0x0
18:17:55: Write Speed Factor R2W_FACTOR                 :0x2
18:17:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:55: FILE_FORMAT_GRP                               :0x0
18:17:55: COPY flag                                     :0x1
18:17:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:55: File_Format                                   :0x0
18:17:55: CRC                                           :0x0
18:17:55: ####CSD Registe Values####  

18:17:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:55: [GetSCRRegisterEntry] Passed
18:17:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:55: Data_Status_After Erases          : 0
18:17:55: CPRM Security Support             : No Security
18:17:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:55: Spec. Version                     : Version 3.0X
18:17:55: Extended Security Support         : Extended_Security_Not_Supported
18:17:55: Command Support                   : COMMAND_SUPPORT
18:17:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9C0>, <py_sfcl.CommandDataDefinition object at 0x05E3E840>) , Command count = 3154 ] 
18:17:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E37E40>) , Command count = 3155 ] 
18:17:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:55: [ SetBusWidth(0x4) , Command count = 3156 ] 
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3157 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3158 ] 
18:17:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:55: Host Frequency set to 100000 KHz
18:17:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:55: ####CSD Registe 2.0 Values####
18:17:55: CSD_STRUCTURE                                 :0x1
18:17:55: Reserv1                                       :0x0
18:17:55: Time Access 1 TAAC                            :0xe
18:17:55: Time Access 2 NSAC*100                        :0x0
18:17:55: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:55: Card Command Classess CCC                     :0x5b5
18:17:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:55: DSR(driver stage register)  DSR_IMP           :0x0
18:17:55: Reserv2                                       :0x0
18:17:55: Device Size C_SIZE                            :0xedc8
18:17:55: Reserv3                                       :0x0
18:17:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:55: Reserv4                                       :0x0
18:17:55: Write Speed Factor R2W_FACTOR                 :0x2
18:17:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:55: FILE_FORMAT_GRP                               :0x0
18:17:55: COPY flag                                     :0x1
18:17:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:55: File_Format                                   :0x0
18:17:55: CRC                                           :0x0
18:17:55: ####CSD Registe Values####  

18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4B0>, <py_sfcl.CommandDataDefinition object at 0x05E37720>) , Command count = 3159 ] 
18:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 3160 ] 
18:17:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:55: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:17:55: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3161 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:17:55: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3162 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3163 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3164 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3165 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3166 ] 
18:17:55: Protected Area Size 0x28000
18:17:55: Bus Width           2
18:17:55: Secure Mode         0
18:17:55: Speed  Class        4
18:17:55: Perf Move           0
18:17:55: Au Size             9
18:17:55: Erase Size          15
18:17:55: Erase Timeout       1
18:17:55: Erase offset        1
18:17:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:17:55: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:17:55: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:17:55: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:17:55: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 2 
18:17:55: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:17:55: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:17:55: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:17:55: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:17:55: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:17:55: Perform Power Off and On.
18:17:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3167 ] 
18:17:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 3168 ] 
18:17:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 3169 ] 
18:17:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3170 ] 
18:17:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:58: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:00: Host Frequency set to 25000 KHz
18:18:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:00: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2DB70>, 0x0, True) , Command count = 3171 ] 
18:18:00: [GO18_globalSetVolt]### Host voltage value is set.
18:18:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB330>, 0x0, False) , Command count = 3172 ] 
18:18:00: [GO18_globalSetVolt]### Host voltage value is set.
18:18:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3173 ] 
18:18:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3174 ] 
18:18:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3175 ] 
18:18:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E55090>) , Command count = 3176 ] 
18:18:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44990>, <py_sfcl.CommandDataDefinition object at 0x05E440F0>) , Command count = 3177 ] 
18:18:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3178 ] 
18:18:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:00: Host Frequency set to 25000 KHz
18:18:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:00: ####CSD Registe 2.0 Values####
18:18:00: CSD_STRUCTURE                                 :0x1
18:18:00: Reserv1                                       :0x0
18:18:00: Time Access 1 TAAC                            :0xe
18:18:00: Time Access 2 NSAC*100                        :0x0
18:18:00: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:00: Card Command Classess CCC                     :0x5b5
18:18:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:00: DSR(driver stage register)  DSR_IMP           :0x0
18:18:00: Reserv2                                       :0x0
18:18:00: Device Size C_SIZE                            :0xedc8
18:18:00: Reserv3                                       :0x0
18:18:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:00: Reserv4                                       :0x0
18:18:00: Write Speed Factor R2W_FACTOR                 :0x2
18:18:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:00: FILE_FORMAT_GRP                               :0x0
18:18:00: COPY flag                                     :0x1
18:18:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:00: File_Format                                   :0x0
18:18:00: CRC                                           :0x0
18:18:00: ####CSD Registe Values####  

18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:00: [GetSCRRegisterEntry] Passed
18:18:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:00: Data_Status_After Erases          : 0
18:18:00: CPRM Security Support             : No Security
18:18:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:00: Spec. Version                     : Version 3.0X
18:18:00: Extended Security Support         : Extended_Security_Not_Supported
18:18:00: Command Support                   : COMMAND_SUPPORT
18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555A0>, <py_sfcl.CommandDataDefinition object at 0x05E2DF60>) , Command count = 3179 ] 
18:18:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E448D0>) , Command count = 3180 ] 
18:18:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:00: [ SetBusWidth(0x4) , Command count = 3181 ] 
18:18:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3182 ] 
18:18:00: Protected Area Size 0x28000
18:18:00: Bus Width           2
18:18:00: Secure Mode         0
18:18:00: Speed  Class        4
18:18:00: Perf Move           0
18:18:00: Au Size             9
18:18:00: Erase Size          15
18:18:00: Erase Timeout       1
18:18:00: Erase offset        1
18:18:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3183 ] 
18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:00: Host Frequency set to 100000 KHz
18:18:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:00: ####CSD Registe 2.0 Values####
18:18:00: CSD_STRUCTURE                                 :0x1
18:18:00: Reserv1                                       :0x0
18:18:00: Time Access 1 TAAC                            :0xe
18:18:00: Time Access 2 NSAC*100                        :0x0
18:18:00: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:00: Card Command Classess CCC                     :0x5b5
18:18:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:00: DSR(driver stage register)  DSR_IMP           :0x0
18:18:00: Reserv2                                       :0x0
18:18:00: Device Size C_SIZE                            :0xedc8
18:18:00: Reserv3                                       :0x0
18:18:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:00: Reserv4                                       :0x0
18:18:00: Write Speed Factor R2W_FACTOR                 :0x2
18:18:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:00: FILE_FORMAT_GRP                               :0x0
18:18:00: COPY flag                                     :0x1
18:18:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:00: File_Format                                   :0x0
18:18:00: CRC                                           :0x0
18:18:00: ####CSD Registe Values####  

18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 3184 ] 
18:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55EA0>, <py_sfcl.CommandDataDefinition object at 0x05E44300>) , Command count = 3185 ] 
18:18:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:00: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:00: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:00: [GetSCRRegisterEntry] Passed
18:18:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:00: Data_Status_After Erases          : 0
18:18:00: CPRM Security Support             : No Security
18:18:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:00: Spec. Version                     : Version 3.0X
18:18:00: Extended Security Support         : Extended_Security_Not_Supported
18:18:00: Command Support                   : COMMAND_SUPPORT
18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:00: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:18:00: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:18:00: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:00: [GetSCRRegisterEntry] Passed
18:18:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:00: Data_Status_After Erases          : 0
18:18:00: CPRM Security Support             : No Security
18:18:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:00: Spec. Version                     : Version 3.0X
18:18:00: Extended Security Support         : Extended_Security_Not_Supported
18:18:00: Command Support                   : COMMAND_SUPPORT
18:18:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:00: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:00: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3186 ] 
18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:18:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:00: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:03: Host Frequency set to 25000 KHz
18:18:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:03: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59AE0>, 0x0, True) , Command count = 3187 ] 
18:18:03: [GO18_globalSetVolt]### Host voltage value is set.
18:18:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E592D0>, 0x0, False) , Command count = 3188 ] 
18:18:03: [GO18_globalSetVolt]### Host voltage value is set.
18:18:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3189 ] 
18:18:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3190 ] 
18:18:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3191 ] 
18:18:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59840>, <py_sfcl.CommandDataDefinition object at 0x05E59210>) , Command count = 3192 ] 
18:18:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E598D0>, <py_sfcl.CommandDataDefinition object at 0x05E59540>) , Command count = 3193 ] 
18:18:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:03: [ SetCardRCA(0x1, 0xD555) , Command count = 3194 ] 
18:18:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:03: Host Frequency set to 25000 KHz
18:18:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:03: ####CSD Registe 2.0 Values####
18:18:03: CSD_STRUCTURE                                 :0x1
18:18:03: Reserv1                                       :0x0
18:18:03: Time Access 1 TAAC                            :0xe
18:18:03: Time Access 2 NSAC*100                        :0x0
18:18:03: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:03: Card Command Classess CCC                     :0x5b5
18:18:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:03: DSR(driver stage register)  DSR_IMP           :0x0
18:18:03: Reserv2                                       :0x0
18:18:03: Device Size C_SIZE                            :0xedc8
18:18:03: Reserv3                                       :0x0
18:18:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:03: Reserv4                                       :0x0
18:18:03: Write Speed Factor R2W_FACTOR                 :0x2
18:18:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:03: FILE_FORMAT_GRP                               :0x0
18:18:03: COPY flag                                     :0x1
18:18:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:03: File_Format                                   :0x0
18:18:03: CRC                                           :0x0
18:18:03: ####CSD Registe Values####  

18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E59F60>) , Command count = 3195 ] 
18:18:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 3196 ] 
18:18:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:03: [ SetBusWidth(0x4) , Command count = 3197 ] 
18:18:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3198 ] 
18:18:03: Protected Area Size 0x28000
18:18:03: Bus Width           2
18:18:03: Secure Mode         0
18:18:03: Speed  Class        4
18:18:03: Perf Move           0
18:18:03: Au Size             9
18:18:03: Erase Size          15
18:18:03: Erase Timeout       1
18:18:03: Erase offset        1
18:18:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3199 ] 
18:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:03: Host Frequency set to 100000 KHz
18:18:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:03: ####CSD Registe 2.0 Values####
18:18:03: CSD_STRUCTURE                                 :0x1
18:18:03: Reserv1                                       :0x0
18:18:03: Time Access 1 TAAC                            :0xe
18:18:03: Time Access 2 NSAC*100                        :0x0
18:18:03: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:03: Card Command Classess CCC                     :0x5b5
18:18:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:03: DSR(driver stage register)  DSR_IMP           :0x0
18:18:03: Reserv2                                       :0x0
18:18:03: Device Size C_SIZE                            :0xedc8
18:18:03: Reserv3                                       :0x0
18:18:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:03: Reserv4                                       :0x0
18:18:03: Write Speed Factor R2W_FACTOR                 :0x2
18:18:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:03: FILE_FORMAT_GRP                               :0x0
18:18:03: COPY flag                                     :0x1
18:18:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:03: File_Format                                   :0x0
18:18:03: CRC                                           :0x0
18:18:03: ####CSD Registe Values####  

18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E598A0>) , Command count = 3200 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CC0>, <py_sfcl.CommandDataDefinition object at 0x05E44210>) , Command count = 3201 ] 
18:18:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA480>, <py_sfcl.CommandDataDefinition object at 0x05E44270>) , Command count = 3202 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E449C0>) , Command count = 3203 ] 
18:18:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59390>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 3204 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59BD0>, <py_sfcl.CommandDataDefinition object at 0x05E44B70>) , Command count = 3205 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44330>, <py_sfcl.CommandDataDefinition object at 0x05E44B10>) , Command count = 3206 ] 
18:18:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59810>, <py_sfcl.CommandDataDefinition object at 0x05E44300>) , Command count = 3207 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44DB0>, <py_sfcl.CommandDataDefinition object at 0x05E44BA0>) , Command count = 3208 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F120>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 3209 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E44D50>) , Command count = 3210 ] 
18:18:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44E10>, <py_sfcl.CommandDataDefinition object at 0x05E3E870>) , Command count = 3211 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DAE0>, <py_sfcl.CommandDataDefinition object at 0x05DB8D20>) , Command count = 3212 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59870>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 3213 ] 
18:18:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E3EC30>) , Command count = 3214 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E593C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FA80>) , Command count = 3215 ] 
18:18:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:03: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:18:03: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:18:03: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:03: [GetSCRRegisterEntry] Passed
18:18:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:03: Data_Status_After Erases          : 0
18:18:03: CPRM Security Support             : No Security
18:18:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:03: Spec. Version                     : Version 3.0X
18:18:03: Extended Security Support         : Extended_Security_Not_Supported
18:18:03: Command Support                   : COMMAND_SUPPORT
18:18:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:03: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:18:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:18:03: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:18:03: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:18:03: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:03: Perform Power Off and On.
18:18:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3216 ] 
18:18:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446C0>, <py_sfcl.CommandDataDefinition object at 0x05E59D20>) , Command count = 3217 ] 
18:18:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C00>, <py_sfcl.CommandDataDefinition object at 0x05E59DE0>) , Command count = 3218 ] 
18:18:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3219 ] 
18:18:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:05: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:08: Host Frequency set to 25000 KHz
18:18:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:08: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44A20>, 0x0, True) , Command count = 3220 ] 
18:18:08: [GO18_globalSetVolt]### Host voltage value is set.
18:18:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F720>, 0x0, False) , Command count = 3221 ] 
18:18:08: [GO18_globalSetVolt]### Host voltage value is set.
18:18:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3222 ] 
18:18:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3223 ] 
18:18:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3224 ] 
18:18:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 3225 ] 
18:18:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55930>, <py_sfcl.CommandDataDefinition object at 0x05E4FF00>) , Command count = 3226 ] 
18:18:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3227 ] 
18:18:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:08: Host Frequency set to 25000 KHz
18:18:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:08: ####CSD Registe 2.0 Values####
18:18:08: CSD_STRUCTURE                                 :0x1
18:18:08: Reserv1                                       :0x0
18:18:08: Time Access 1 TAAC                            :0xe
18:18:08: Time Access 2 NSAC*100                        :0x0
18:18:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:08: Card Command Classess CCC                     :0x5b5
18:18:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:08: DSR(driver stage register)  DSR_IMP           :0x0
18:18:08: Reserv2                                       :0x0
18:18:08: Device Size C_SIZE                            :0xedc8
18:18:08: Reserv3                                       :0x0
18:18:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:08: Reserv4                                       :0x0
18:18:08: Write Speed Factor R2W_FACTOR                 :0x2
18:18:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:08: FILE_FORMAT_GRP                               :0x0
18:18:08: COPY flag                                     :0x1
18:18:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:08: File_Format                                   :0x0
18:18:08: CRC                                           :0x0
18:18:08: ####CSD Registe Values####  

18:18:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:08: [GetSCRRegisterEntry] Passed
18:18:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:08: Data_Status_After Erases          : 0
18:18:08: CPRM Security Support             : No Security
18:18:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:08: Spec. Version                     : Version 3.0X
18:18:08: Extended Security Support         : Extended_Security_Not_Supported
18:18:08: Command Support                   : COMMAND_SUPPORT
18:18:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44540>, <py_sfcl.CommandDataDefinition object at 0x05E59E10>) , Command count = 3228 ] 
18:18:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C30>, <py_sfcl.CommandDataDefinition object at 0x05E59E40>) , Command count = 3229 ] 
18:18:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:08: [ SetBusWidth(0x4) , Command count = 3230 ] 
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3231 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3232 ] 
18:18:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:08: Host Frequency set to 100000 KHz
18:18:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:08: ####CSD Registe 2.0 Values####
18:18:08: CSD_STRUCTURE                                 :0x1
18:18:08: Reserv1                                       :0x0
18:18:08: Time Access 1 TAAC                            :0xe
18:18:08: Time Access 2 NSAC*100                        :0x0
18:18:08: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:08: Card Command Classess CCC                     :0x5b5
18:18:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:08: DSR(driver stage register)  DSR_IMP           :0x0
18:18:08: Reserv2                                       :0x0
18:18:08: Device Size C_SIZE                            :0xedc8
18:18:08: Reserv3                                       :0x0
18:18:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:08: Reserv4                                       :0x0
18:18:08: Write Speed Factor R2W_FACTOR                 :0x2
18:18:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:08: FILE_FORMAT_GRP                               :0x0
18:18:08: COPY flag                                     :0x1
18:18:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:08: File_Format                                   :0x0
18:18:08: CRC                                           :0x0
18:18:08: ####CSD Registe Values####  

18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F210>) , Command count = 3233 ] 
18:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F780>, <py_sfcl.CommandDataDefinition object at 0x05E3E720>) , Command count = 3234 ] 
18:18:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3235 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:18:08: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3236 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3237 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3238 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3239 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3240 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:18:08: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:18:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E50630>) , Command count = 3241 ] 
18:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F900>, <py_sfcl.CommandDataDefinition object at 0x05E4F3F0>) , Command count = 3242 ] 
18:18:08: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 3243 ] 
18:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44600>, <py_sfcl.CommandDataDefinition object at 0x05E4F960>) , Command count = 3244 ] 
18:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:18:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:08: [GetSCRRegisterEntry] Passed
18:18:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:08: Data_Status_After Erases          : 0
18:18:08: CPRM Security Support             : No Security
18:18:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:08: Spec. Version                     : Version 3.0X
18:18:08: Extended Security Support         : Extended_Security_Not_Supported
18:18:08: Command Support                   : COMMAND_SUPPORT
18:18:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E372D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3245 ] 
18:18:08: Protected Area Size 0x28000
18:18:08: Bus Width           2
18:18:08: Secure Mode         0
18:18:08: Speed  Class        4
18:18:08: Perf Move           0
18:18:08: Au Size             9
18:18:08: Erase Size          15
18:18:08: Erase Timeout       1
18:18:08: Erase offset        1
18:18:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:18:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3246 ] 
18:18:10: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:18:10: [DVTCommonLib]### VOLA from card : 0x1
18:18:10: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:18:10: [DVTCommonLib]### Reserved bits from card : 0x0
18:18:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FDE0>, <py_sfcl.CommandDataDefinition object at 0x05E44DE0>) , Command count = 3247 ] 
18:18:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50420>, <py_sfcl.CommandDataDefinition object at 0x05E59CF0>) , Command count = 3248 ] 
18:18:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:10: [ SetCardRCA(0x1, 0xD555) , Command count = 3249 ] 
18:18:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:11: [ SelectCard(0x1, True) , Command count = 3250 ] 
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E594E0>, <py_sfcl.CommandDataDefinition object at 0x05E501E0>) , Command count = 3251 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:11: [GetSCRRegisterEntry] Failed
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3252 ] 
18:18:11: [ GetCardStatus() , Command count = 3253 ] 
18:18:11: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:18:11: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E50D80>) , Command count = 3254 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59930>, <py_sfcl.CommandDataDefinition object at 0x05E59CC0>) , Command count = 3255 ] 
18:18:11: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E508A0>, <py_sfcl.CommandDataDefinition object at 0x05E37810>) , Command count = 3256 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 3257 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:11: [GetSCRRegisterEntry] Passed
18:18:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:11: Data_Status_After Erases          : 0
18:18:11: CPRM Security Support             : No Security
18:18:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:11: Spec. Version                     : Version 3.0X
18:18:11: Extended Security Support         : Extended_Security_Not_Supported
18:18:11: Command Support                   : COMMAND_SUPPORT
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3258 ] 
18:18:11: Protected Area Size 0x28000
18:18:11: Bus Width           0
18:18:11: Secure Mode         0
18:18:11: Speed  Class        4
18:18:11: Perf Move           0
18:18:11: Au Size             9
18:18:11: Erase Size          15
18:18:11: Erase Timeout       1
18:18:11: Erase offset        1
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0519DFC0>, <py_sfcl.CommandDataDefinition object at 0x05E50090>) , Command count = 3259 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E720>) , Command count = 3260 ] 
18:18:11: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B70>, <py_sfcl.CommandDataDefinition object at 0x05E50BA0>) , Command count = 3261 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50300>, <py_sfcl.CommandDataDefinition object at 0x05E507B0>) , Command count = 3262 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:11: [GetSCRRegisterEntry] Failed
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3263 ] 
18:18:11: [ GetCardStatus() , Command count = 3264 ] 
18:18:11: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:18:11: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E44690>) , Command count = 3265 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF30>, <py_sfcl.CommandDataDefinition object at 0x05E4F240>) , Command count = 3266 ] 
18:18:11: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55A20>, <py_sfcl.CommandDataDefinition object at 0x052CDDB0>) , Command count = 3267 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E447B0>) , Command count = 3268 ] 
18:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:11: [GetSCRRegisterEntry] Passed
18:18:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:11: Data_Status_After Erases          : 0
18:18:11: CPRM Security Support             : No Security
18:18:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:11: Spec. Version                     : Version 3.0X
18:18:11: Extended Security Support         : Extended_Security_Not_Supported
18:18:11: Command Support                   : COMMAND_SUPPORT
18:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3269 ] 
18:18:11: Protected Area Size 0x28000
18:18:11: Bus Width           0
18:18:11: Secure Mode         0
18:18:11: Speed  Class        4
18:18:11: Perf Move           0
18:18:11: Au Size             9
18:18:11: Erase Size          15
18:18:11: Erase Timeout       1
18:18:11: Erase offset        1
18:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:11: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:18:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3270 ] 
18:18:13: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:18:13: [DVTCommonLib]### VOLA from card : 0x1
18:18:13: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:18:13: [DVTCommonLib]### Reserved bits from card : 0x0
18:18:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55180>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 3271 ] 
18:18:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37990>, <py_sfcl.CommandDataDefinition object at 0x05E3E570>) , Command count = 3272 ] 
18:18:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:13: [ SetCardRCA(0x1, 0xD555) , Command count = 3273 ] 
18:18:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:13: [ SelectCard(0x1, True) , Command count = 3274 ] 
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:18:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:13: [GetSCRRegisterEntry] Failed
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:18:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3275 ] 
18:18:13: [ GetCardStatus() , Command count = 3276 ] 
18:18:13: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:18:13: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59EA0>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 3277 ] 
18:18:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E503C0>, <py_sfcl.CommandDataDefinition object at 0x05E50F90>) , Command count = 3278 ] 
18:18:13: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50EA0>, <py_sfcl.CommandDataDefinition object at 0x05E37D80>) , Command count = 3279 ] 
18:18:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 3280 ] 
18:18:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:18:13: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:18:13: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:18:13: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:18:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:13: Perform Power Off and On.
18:18:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3281 ] 
18:18:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509F0>, <py_sfcl.CommandDataDefinition object at 0x05E50D50>) , Command count = 3282 ] 
18:18:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C00>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 3283 ] 
18:18:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3284 ] 
18:18:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:15: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:17: Host Frequency set to 25000 KHz
18:18:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:17: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05278180>, 0x0, True) , Command count = 3285 ] 
18:18:17: [GO18_globalSetVolt]### Host voltage value is set.
18:18:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4FE70>, 0x0, False) , Command count = 3286 ] 
18:18:17: [GO18_globalSetVolt]### Host voltage value is set.
18:18:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3287 ] 
18:18:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3288 ] 
18:18:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3289 ] 
18:18:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E507E0>, <py_sfcl.CommandDataDefinition object at 0x05E50CF0>) , Command count = 3290 ] 
18:18:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E4FCC0>) , Command count = 3291 ] 
18:18:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:18: [ SetCardRCA(0x1, 0xD555) , Command count = 3292 ] 
18:18:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:18: Host Frequency set to 25000 KHz
18:18:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:18: ####CSD Registe 2.0 Values####
18:18:18: CSD_STRUCTURE                                 :0x1
18:18:18: Reserv1                                       :0x0
18:18:18: Time Access 1 TAAC                            :0xe
18:18:18: Time Access 2 NSAC*100                        :0x0
18:18:18: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:18: Card Command Classess CCC                     :0x5b5
18:18:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:18: DSR(driver stage register)  DSR_IMP           :0x0
18:18:18: Reserv2                                       :0x0
18:18:18: Device Size C_SIZE                            :0xedc8
18:18:18: Reserv3                                       :0x0
18:18:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:18: Reserv4                                       :0x0
18:18:18: Write Speed Factor R2W_FACTOR                 :0x2
18:18:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:18: FILE_FORMAT_GRP                               :0x0
18:18:18: COPY flag                                     :0x1
18:18:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:18: File_Format                                   :0x0
18:18:18: CRC                                           :0x0
18:18:18: ####CSD Registe Values####  

18:18:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:18: [GetSCRRegisterEntry] Passed
18:18:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:18: Data_Status_After Erases          : 0
18:18:18: CPRM Security Support             : No Security
18:18:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:18: Spec. Version                     : Version 3.0X
18:18:18: Extended Security Support         : Extended_Security_Not_Supported
18:18:18: Command Support                   : COMMAND_SUPPORT
18:18:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD50>, <py_sfcl.CommandDataDefinition object at 0x05E4FA20>) , Command count = 3293 ] 
18:18:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59750>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 3294 ] 
18:18:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:18: [ SetBusWidth(0x4) , Command count = 3295 ] 
18:18:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3296 ] 
18:18:18: Protected Area Size 0x28000
18:18:18: Bus Width           2
18:18:18: Secure Mode         0
18:18:18: Speed  Class        4
18:18:18: Perf Move           0
18:18:18: Au Size             9
18:18:18: Erase Size          15
18:18:18: Erase Timeout       1
18:18:18: Erase offset        1
18:18:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3297 ] 
18:18:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:18: Host Frequency set to 100000 KHz
18:18:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:18: ####CSD Registe 2.0 Values####
18:18:18: CSD_STRUCTURE                                 :0x1
18:18:18: Reserv1                                       :0x0
18:18:18: Time Access 1 TAAC                            :0xe
18:18:18: Time Access 2 NSAC*100                        :0x0
18:18:18: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:18: Card Command Classess CCC                     :0x5b5
18:18:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:18: DSR(driver stage register)  DSR_IMP           :0x0
18:18:18: Reserv2                                       :0x0
18:18:18: Device Size C_SIZE                            :0xedc8
18:18:18: Reserv3                                       :0x0
18:18:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:18: Reserv4                                       :0x0
18:18:18: Write Speed Factor R2W_FACTOR                 :0x2
18:18:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:18: FILE_FORMAT_GRP                               :0x0
18:18:18: COPY flag                                     :0x1
18:18:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:18: File_Format                                   :0x0
18:18:18: CRC                                           :0x0
18:18:18: ####CSD Registe Values####  

18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB570>, <py_sfcl.CommandDataDefinition object at 0x05E502D0>) , Command count = 3298 ] 
18:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 3299 ] 
18:18:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:19: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:19: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:19: [GetSCRRegisterEntry] Passed
18:18:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:19: Data_Status_After Erases          : 0
18:18:19: CPRM Security Support             : No Security
18:18:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:19: Spec. Version                     : Version 3.0X
18:18:19: Extended Security Support         : Extended_Security_Not_Supported
18:18:19: Command Support                   : COMMAND_SUPPORT
18:18:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:19: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:18:19: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:18:19: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:18:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:19: [GetSCRRegisterEntry] Passed
18:18:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:19: Data_Status_After Erases          : 0
18:18:19: CPRM Security Support             : No Security
18:18:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:19: Spec. Version                     : Version 3.0X
18:18:19: Extended Security Support         : Extended_Security_Not_Supported
18:18:19: Command Support                   : COMMAND_SUPPORT
18:18:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:19: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:18:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:19: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3300 ] 
18:18:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:18:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:21: Host Frequency set to 25000 KHz
18:18:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E502A0>, 0x0, True) , Command count = 3301 ] 
18:18:21: [GO18_globalSetVolt]### Host voltage value is set.
18:18:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50810>, 0x0, False) , Command count = 3302 ] 
18:18:21: [GO18_globalSetVolt]### Host voltage value is set.
18:18:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3303 ] 
18:18:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3304 ] 
18:18:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3305 ] 
18:18:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55540>) , Command count = 3306 ] 
18:18:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 3307 ] 
18:18:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3308 ] 
18:18:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:21: Host Frequency set to 25000 KHz
18:18:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:21: ####CSD Registe 2.0 Values####
18:18:21: CSD_STRUCTURE                                 :0x1
18:18:21: Reserv1                                       :0x0
18:18:21: Time Access 1 TAAC                            :0xe
18:18:21: Time Access 2 NSAC*100                        :0x0
18:18:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:21: Card Command Classess CCC                     :0x5b5
18:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:21: DSR(driver stage register)  DSR_IMP           :0x0
18:18:21: Reserv2                                       :0x0
18:18:21: Device Size C_SIZE                            :0xedc8
18:18:21: Reserv3                                       :0x0
18:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:21: Reserv4                                       :0x0
18:18:21: Write Speed Factor R2W_FACTOR                 :0x2
18:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:21: FILE_FORMAT_GRP                               :0x0
18:18:21: COPY flag                                     :0x1
18:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:21: File_Format                                   :0x0
18:18:21: CRC                                           :0x0
18:18:21: ####CSD Registe Values####  

18:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:21: [GetSCRRegisterEntry] Passed
18:18:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:21: Data_Status_After Erases          : 0
18:18:21: CPRM Security Support             : No Security
18:18:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:21: Spec. Version                     : Version 3.0X
18:18:21: Extended Security Support         : Extended_Security_Not_Supported
18:18:21: Command Support                   : COMMAND_SUPPORT
18:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 3309 ] 
18:18:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55720>, <py_sfcl.CommandDataDefinition object at 0x05E556C0>) , Command count = 3310 ] 
18:18:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:21: [ SetBusWidth(0x4) , Command count = 3311 ] 
18:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3312 ] 
18:18:21: Protected Area Size 0x28000
18:18:21: Bus Width           2
18:18:21: Secure Mode         0
18:18:21: Speed  Class        4
18:18:21: Perf Move           0
18:18:21: Au Size             9
18:18:21: Erase Size          15
18:18:21: Erase Timeout       1
18:18:21: Erase offset        1
18:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3313 ] 
18:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:22: Host Frequency set to 100000 KHz
18:18:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:22: ####CSD Registe 2.0 Values####
18:18:22: CSD_STRUCTURE                                 :0x1
18:18:22: Reserv1                                       :0x0
18:18:22: Time Access 1 TAAC                            :0xe
18:18:22: Time Access 2 NSAC*100                        :0x0
18:18:22: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:22: Card Command Classess CCC                     :0x5b5
18:18:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:22: DSR(driver stage register)  DSR_IMP           :0x0
18:18:22: Reserv2                                       :0x0
18:18:22: Device Size C_SIZE                            :0xedc8
18:18:22: Reserv3                                       :0x0
18:18:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:22: Reserv4                                       :0x0
18:18:22: Write Speed Factor R2W_FACTOR                 :0x2
18:18:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:22: FILE_FORMAT_GRP                               :0x0
18:18:22: COPY flag                                     :0x1
18:18:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:22: File_Format                                   :0x0
18:18:22: CRC                                           :0x0
18:18:22: ####CSD Registe Values####  

18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E509C0>) , Command count = 3314 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F90>, <py_sfcl.CommandDataDefinition object at 0x052BBD80>) , Command count = 3315 ] 
18:18:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05192180>, <py_sfcl.CommandDataDefinition object at 0x05E594B0>) , Command count = 3316 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F30>, <py_sfcl.CommandDataDefinition object at 0x05E50DB0>) , Command count = 3317 ] 
18:18:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C60>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 3318 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59F30>, <py_sfcl.CommandDataDefinition object at 0x05E59AB0>) , Command count = 3319 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD20>, <py_sfcl.CommandDataDefinition object at 0x05E4FFC0>) , Command count = 3320 ] 
18:18:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59780>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 3321 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F3C0>) , Command count = 3322 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E597E0>, <py_sfcl.CommandDataDefinition object at 0x05E55AB0>) , Command count = 3323 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59600>, <py_sfcl.CommandDataDefinition object at 0x05E55570>) , Command count = 3324 ] 
18:18:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E597B0>, <py_sfcl.CommandDataDefinition object at 0x05E4FAB0>) , Command count = 3325 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E4FB40>) , Command count = 3326 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59A50>, <py_sfcl.CommandDataDefinition object at 0x05E550C0>) , Command count = 3327 ] 
18:18:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA6F0>, <py_sfcl.CommandDataDefinition object at 0x05E2D9F0>) , Command count = 3328 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E4FCF0>) , Command count = 3329 ] 
18:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:22: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:18:22: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:18:22: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:22: [GetSCRRegisterEntry] Passed
18:18:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:22: Data_Status_After Erases          : 0
18:18:22: CPRM Security Support             : No Security
18:18:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:22: Spec. Version                     : Version 3.0X
18:18:22: Extended Security Support         : Extended_Security_Not_Supported
18:18:22: Command Support                   : COMMAND_SUPPORT
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:22: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:22: [GetSCRRegisterEntry] Passed
18:18:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:22: Data_Status_After Erases          : 0
18:18:22: CPRM Security Support             : No Security
18:18:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:22: Spec. Version                     : Version 3.0X
18:18:22: Extended Security Support         : Extended_Security_Not_Supported
18:18:22: Command Support                   : COMMAND_SUPPORT
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:22: [GetSCRRegisterEntry] Passed
18:18:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:22: Data_Status_After Erases          : 0
18:18:22: CPRM Security Support             : No Security
18:18:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:22: Spec. Version                     : Version 3.0X
18:18:22: Extended Security Support         : Extended_Security_Not_Supported
18:18:22: Command Support                   : COMMAND_SUPPORT
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:22: [GetSCRRegisterEntry] Passed
18:18:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:22: Data_Status_After Erases          : 0
18:18:22: CPRM Security Support             : No Security
18:18:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:22: Spec. Version                     : Version 3.0X
18:18:22: Extended Security Support         : Extended_Security_Not_Supported
18:18:22: Command Support                   : COMMAND_SUPPORT
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:22: [GetSCRRegisterEntry] Passed
18:18:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:22: Data_Status_After Erases          : 0
18:18:22: CPRM Security Support             : No Security
18:18:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:22: Spec. Version                     : Version 3.0X
18:18:22: Extended Security Support         : Extended_Security_Not_Supported
18:18:22: Command Support                   : COMMAND_SUPPORT
18:18:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:22: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:18:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:18:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:18:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:18:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:22: Perform Power Off and On.
18:18:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3330 ] 
18:18:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2AC60>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 3331 ] 
18:18:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A420>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 3332 ] 
18:18:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3333 ] 
18:18:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:24: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:26: Host Frequency set to 25000 KHz
18:18:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:26: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59F00>, 0x0, True) , Command count = 3334 ] 
18:18:26: [GO18_globalSetVolt]### Host voltage value is set.
18:18:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55BA0>, 0x0, False) , Command count = 3335 ] 
18:18:26: [GO18_globalSetVolt]### Host voltage value is set.
18:18:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3336 ] 
18:18:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3337 ] 
18:18:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3338 ] 
18:18:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E558D0>) , Command count = 3339 ] 
18:18:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB390>, <py_sfcl.CommandDataDefinition object at 0x05E59330>) , Command count = 3340 ] 
18:18:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3341 ] 
18:18:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:26: Host Frequency set to 25000 KHz
18:18:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:26: ####CSD Registe 2.0 Values####
18:18:26: CSD_STRUCTURE                                 :0x1
18:18:26: Reserv1                                       :0x0
18:18:26: Time Access 1 TAAC                            :0xe
18:18:26: Time Access 2 NSAC*100                        :0x0
18:18:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:26: Card Command Classess CCC                     :0x5b5
18:18:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:26: DSR(driver stage register)  DSR_IMP           :0x0
18:18:26: Reserv2                                       :0x0
18:18:26: Device Size C_SIZE                            :0xedc8
18:18:26: Reserv3                                       :0x0
18:18:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:26: Reserv4                                       :0x0
18:18:26: Write Speed Factor R2W_FACTOR                 :0x2
18:18:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:26: FILE_FORMAT_GRP                               :0x0
18:18:26: COPY flag                                     :0x1
18:18:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:26: File_Format                                   :0x0
18:18:26: CRC                                           :0x0
18:18:26: ####CSD Registe Values####  

18:18:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:26: [GetSCRRegisterEntry] Passed
18:18:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:26: Data_Status_After Erases          : 0
18:18:26: CPRM Security Support             : No Security
18:18:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:26: Spec. Version                     : Version 3.0X
18:18:26: Extended Security Support         : Extended_Security_Not_Supported
18:18:26: Command Support                   : COMMAND_SUPPORT
18:18:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05D2A7B0>) , Command count = 3342 ] 
18:18:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C90>, <py_sfcl.CommandDataDefinition object at 0x05E3E570>) , Command count = 3343 ] 
18:18:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:26: [ SetBusWidth(0x4) , Command count = 3344 ] 
18:18:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3345 ] 
18:18:26: Protected Area Size 0x28000
18:18:26: Bus Width           2
18:18:26: Secure Mode         0
18:18:26: Speed  Class        4
18:18:26: Perf Move           0
18:18:26: Au Size             9
18:18:26: Erase Size          15
18:18:26: Erase Timeout       1
18:18:26: Erase offset        1
18:18:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3346 ] 
18:18:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:27: Host Frequency set to 100000 KHz
18:18:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:27: ####CSD Registe 2.0 Values####
18:18:27: CSD_STRUCTURE                                 :0x1
18:18:27: Reserv1                                       :0x0
18:18:27: Time Access 1 TAAC                            :0xe
18:18:27: Time Access 2 NSAC*100                        :0x0
18:18:27: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:27: Card Command Classess CCC                     :0x5b5
18:18:27: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:27: DSR(driver stage register)  DSR_IMP           :0x0
18:18:27: Reserv2                                       :0x0
18:18:27: Device Size C_SIZE                            :0xedc8
18:18:27: Reserv3                                       :0x0
18:18:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:27: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:27: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:27: Reserv4                                       :0x0
18:18:27: Write Speed Factor R2W_FACTOR                 :0x2
18:18:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:27: FILE_FORMAT_GRP                               :0x0
18:18:27: COPY flag                                     :0x1
18:18:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:27: File_Format                                   :0x0
18:18:27: CRC                                           :0x0
18:18:27: ####CSD Registe Values####  

18:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59060>, <py_sfcl.CommandDataDefinition object at 0x05DB8C60>) , Command count = 3347 ] 
18:18:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E37AB0>) , Command count = 3348 ] 
18:18:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3349 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:18:27: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E76240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3350 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3351 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E76240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3352 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052AE570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3353 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3354 ] 
18:18:27: Protected Area Size 0x28000
18:18:27: Bus Width           2
18:18:27: Secure Mode         0
18:18:27: Speed  Class        4
18:18:27: Perf Move           0
18:18:27: Au Size             9
18:18:27: Erase Size          15
18:18:27: Erase Timeout       1
18:18:27: Erase offset        1
18:18:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:18:27: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:18:27: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:18:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3355 ] 
18:18:29: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:18:29: [DVTCommonLib]### VOLA from card : 0x1
18:18:29: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:18:29: [DVTCommonLib]### Reserved bits from card : 0x0
18:18:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 3356 ] 
18:18:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 3357 ] 
18:18:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3358 ] 
18:18:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:29: [ SelectCard(0x1, True) , Command count = 3359 ] 
18:18:29: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:18:29: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:18:29: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:18:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:29: Perform Power Off and On.
18:18:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3360 ] 
18:18:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8ED0>, <py_sfcl.CommandDataDefinition object at 0x05DAA5A0>) , Command count = 3361 ] 
18:18:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DBD0>, <py_sfcl.CommandDataDefinition object at 0x05E37D20>) , Command count = 3362 ] 
18:18:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3363 ] 
18:18:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:31: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:33: Host Frequency set to 25000 KHz
18:18:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:33: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50A50>, 0x0, True) , Command count = 3364 ] 
18:18:33: [GO18_globalSetVolt]### Host voltage value is set.
18:18:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF00>, 0x0, False) , Command count = 3365 ] 
18:18:33: [GO18_globalSetVolt]### Host voltage value is set.
18:18:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3366 ] 
18:18:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3367 ] 
18:18:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3368 ] 
18:18:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD20>, <py_sfcl.CommandDataDefinition object at 0x05E37F60>) , Command count = 3369 ] 
18:18:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37450>) , Command count = 3370 ] 
18:18:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3371 ] 
18:18:34: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:34: Host Frequency set to 25000 KHz
18:18:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:34: ####CSD Registe 2.0 Values####
18:18:34: CSD_STRUCTURE                                 :0x1
18:18:34: Reserv1                                       :0x0
18:18:34: Time Access 1 TAAC                            :0xe
18:18:34: Time Access 2 NSAC*100                        :0x0
18:18:34: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:34: Card Command Classess CCC                     :0x5b5
18:18:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:34: DSR(driver stage register)  DSR_IMP           :0x0
18:18:34: Reserv2                                       :0x0
18:18:34: Device Size C_SIZE                            :0xedc8
18:18:34: Reserv3                                       :0x0
18:18:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:34: Reserv4                                       :0x0
18:18:34: Write Speed Factor R2W_FACTOR                 :0x2
18:18:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:34: FILE_FORMAT_GRP                               :0x0
18:18:34: COPY flag                                     :0x1
18:18:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:34: File_Format                                   :0x0
18:18:34: CRC                                           :0x0
18:18:34: ####CSD Registe Values####  

18:18:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:34: [GetSCRRegisterEntry] Passed
18:18:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:34: Data_Status_After Erases          : 0
18:18:34: CPRM Security Support             : No Security
18:18:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:34: Spec. Version                     : Version 3.0X
18:18:34: Extended Security Support         : Extended_Security_Not_Supported
18:18:34: Command Support                   : COMMAND_SUPPORT
18:18:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 3372 ] 
18:18:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E55270>) , Command count = 3373 ] 
18:18:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:34: [ SetBusWidth(0x4) , Command count = 3374 ] 
18:18:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3375 ] 
18:18:34: Protected Area Size 0x28000
18:18:34: Bus Width           2
18:18:34: Secure Mode         0
18:18:34: Speed  Class        4
18:18:34: Perf Move           0
18:18:34: Au Size             9
18:18:34: Erase Size          15
18:18:34: Erase Timeout       1
18:18:34: Erase offset        1
18:18:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3376 ] 
18:18:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:34: Host Frequency set to 100000 KHz
18:18:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:34: ####CSD Registe 2.0 Values####
18:18:34: CSD_STRUCTURE                                 :0x1
18:18:34: Reserv1                                       :0x0
18:18:34: Time Access 1 TAAC                            :0xe
18:18:34: Time Access 2 NSAC*100                        :0x0
18:18:34: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:34: Card Command Classess CCC                     :0x5b5
18:18:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:34: DSR(driver stage register)  DSR_IMP           :0x0
18:18:34: Reserv2                                       :0x0
18:18:34: Device Size C_SIZE                            :0xedc8
18:18:34: Reserv3                                       :0x0
18:18:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:34: Reserv4                                       :0x0
18:18:34: Write Speed Factor R2W_FACTOR                 :0x2
18:18:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:34: FILE_FORMAT_GRP                               :0x0
18:18:34: COPY flag                                     :0x1
18:18:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:34: File_Format                                   :0x0
18:18:34: CRC                                           :0x0
18:18:34: ####CSD Registe Values####  

18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55CF0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 3377 ] 
18:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A20>, <py_sfcl.CommandDataDefinition object at 0x05E37600>) , Command count = 3378 ] 
18:18:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:34: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:35: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:35: [GetSCRRegisterEntry] Passed
18:18:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:35: Data_Status_After Erases          : 0
18:18:35: CPRM Security Support             : No Security
18:18:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:35: Spec. Version                     : Version 3.0X
18:18:35: Extended Security Support         : Extended_Security_Not_Supported
18:18:35: Command Support                   : COMMAND_SUPPORT
18:18:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:35: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:18:35: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:18:35: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:18:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:35: [GetSCRRegisterEntry] Passed
18:18:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:35: Data_Status_After Erases          : 0
18:18:35: CPRM Security Support             : No Security
18:18:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:35: Spec. Version                     : Version 3.0X
18:18:35: Extended Security Support         : Extended_Security_Not_Supported
18:18:35: Command Support                   : COMMAND_SUPPORT
18:18:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:35: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:35: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3379 ] 
18:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:18:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:35: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:37: Host Frequency set to 25000 KHz
18:18:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:37: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x052782D0>, 0x0, True) , Command count = 3380 ] 
18:18:37: [GO18_globalSetVolt]### Host voltage value is set.
18:18:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E375D0>, 0x0, False) , Command count = 3381 ] 
18:18:37: [GO18_globalSetVolt]### Host voltage value is set.
18:18:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3382 ] 
18:18:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3383 ] 
18:18:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3384 ] 
18:18:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50570>, <py_sfcl.CommandDataDefinition object at 0x05E2DF30>) , Command count = 3385 ] 
18:18:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 3386 ] 
18:18:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3387 ] 
18:18:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:38: Host Frequency set to 25000 KHz
18:18:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:38: ####CSD Registe 2.0 Values####
18:18:38: CSD_STRUCTURE                                 :0x1
18:18:38: Reserv1                                       :0x0
18:18:38: Time Access 1 TAAC                            :0xe
18:18:38: Time Access 2 NSAC*100                        :0x0
18:18:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:38: Card Command Classess CCC                     :0x5b5
18:18:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:38: DSR(driver stage register)  DSR_IMP           :0x0
18:18:38: Reserv2                                       :0x0
18:18:38: Device Size C_SIZE                            :0xedc8
18:18:38: Reserv3                                       :0x0
18:18:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:38: Reserv4                                       :0x0
18:18:38: Write Speed Factor R2W_FACTOR                 :0x2
18:18:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:38: FILE_FORMAT_GRP                               :0x0
18:18:38: COPY flag                                     :0x1
18:18:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:38: File_Format                                   :0x0
18:18:38: CRC                                           :0x0
18:18:38: ####CSD Registe Values####  

18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C60>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 3388 ] 
18:18:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E420>, <py_sfcl.CommandDataDefinition object at 0x05E2DE40>) , Command count = 3389 ] 
18:18:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:38: [ SetBusWidth(0x4) , Command count = 3390 ] 
18:18:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3391 ] 
18:18:38: Protected Area Size 0x28000
18:18:38: Bus Width           2
18:18:38: Secure Mode         0
18:18:38: Speed  Class        4
18:18:38: Perf Move           0
18:18:38: Au Size             9
18:18:38: Erase Size          15
18:18:38: Erase Timeout       1
18:18:38: Erase offset        1
18:18:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3392 ] 
18:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:38: Host Frequency set to 100000 KHz
18:18:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:38: ####CSD Registe 2.0 Values####
18:18:38: CSD_STRUCTURE                                 :0x1
18:18:38: Reserv1                                       :0x0
18:18:38: Time Access 1 TAAC                            :0xe
18:18:38: Time Access 2 NSAC*100                        :0x0
18:18:38: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:38: Card Command Classess CCC                     :0x5b5
18:18:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:38: DSR(driver stage register)  DSR_IMP           :0x0
18:18:38: Reserv2                                       :0x0
18:18:38: Device Size C_SIZE                            :0xedc8
18:18:38: Reserv3                                       :0x0
18:18:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:38: Reserv4                                       :0x0
18:18:38: Write Speed Factor R2W_FACTOR                 :0x2
18:18:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:38: FILE_FORMAT_GRP                               :0x0
18:18:38: COPY flag                                     :0x1
18:18:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:38: File_Format                                   :0x0
18:18:38: CRC                                           :0x0
18:18:38: ####CSD Registe Values####  

18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E37870>) , Command count = 3393 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E446F0>, <py_sfcl.CommandDataDefinition object at 0x05E373F0>) , Command count = 3394 ] 
18:18:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A180>, <py_sfcl.CommandDataDefinition object at 0x05E3E090>) , Command count = 3395 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55F90>, <py_sfcl.CommandDataDefinition object at 0x05E55F00>) , Command count = 3396 ] 
18:18:38: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C00>, <py_sfcl.CommandDataDefinition object at 0x05E554E0>) , Command count = 3397 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA570>, <py_sfcl.CommandDataDefinition object at 0x05E44390>) , Command count = 3398 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55240>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 3399 ] 
18:18:38: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37390>, <py_sfcl.CommandDataDefinition object at 0x05E55150>) , Command count = 3400 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 3401 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A50>, <py_sfcl.CommandDataDefinition object at 0x05E3E6C0>) , Command count = 3402 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E450>, <py_sfcl.CommandDataDefinition object at 0x05E55120>) , Command count = 3403 ] 
18:18:38: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EB40>, <py_sfcl.CommandDataDefinition object at 0x05E55DB0>) , Command count = 3404 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37930>, <py_sfcl.CommandDataDefinition object at 0x05E2D840>) , Command count = 3405 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E840>, <py_sfcl.CommandDataDefinition object at 0x05E3E900>) , Command count = 3406 ] 
18:18:38: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37780>, <py_sfcl.CommandDataDefinition object at 0x05E4F840>) , Command count = 3407 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9C0>, <py_sfcl.CommandDataDefinition object at 0x05E2D660>) , Command count = 3408 ] 
18:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:38: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:18:38: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:18:38: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:38: [GetSCRRegisterEntry] Passed
18:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:38: Data_Status_After Erases          : 0
18:18:38: CPRM Security Support             : No Security
18:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:38: Spec. Version                     : Version 3.0X
18:18:38: Extended Security Support         : Extended_Security_Not_Supported
18:18:38: Command Support                   : COMMAND_SUPPORT
18:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:38: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:18:38: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:18:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:18:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:18:38: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:38: Perform Power Off and On.
18:18:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3409 ] 
18:18:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50960>, <py_sfcl.CommandDataDefinition object at 0x05E37E40>) , Command count = 3410 ] 
18:18:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4B0>, <py_sfcl.CommandDataDefinition object at 0x05E37720>) , Command count = 3411 ] 
18:18:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3412 ] 
18:18:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:40: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:42: Host Frequency set to 25000 KHz
18:18:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:42: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D540>, 0x0, True) , Command count = 3413 ] 
18:18:42: [GO18_globalSetVolt]### Host voltage value is set.
18:18:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D600>, 0x0, False) , Command count = 3414 ] 
18:18:42: [GO18_globalSetVolt]### Host voltage value is set.
18:18:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3415 ] 
18:18:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3416 ] 
18:18:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3417 ] 
18:18:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44630>, <py_sfcl.CommandDataDefinition object at 0x05E3E930>) , Command count = 3418 ] 
18:18:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3ECF0>) , Command count = 3419 ] 
18:18:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3420 ] 
18:18:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:43: Host Frequency set to 25000 KHz
18:18:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:43: ####CSD Registe 2.0 Values####
18:18:43: CSD_STRUCTURE                                 :0x1
18:18:43: Reserv1                                       :0x0
18:18:43: Time Access 1 TAAC                            :0xe
18:18:43: Time Access 2 NSAC*100                        :0x0
18:18:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:43: Card Command Classess CCC                     :0x5b5
18:18:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:43: DSR(driver stage register)  DSR_IMP           :0x0
18:18:43: Reserv2                                       :0x0
18:18:43: Device Size C_SIZE                            :0xedc8
18:18:43: Reserv3                                       :0x0
18:18:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:43: Reserv4                                       :0x0
18:18:43: Write Speed Factor R2W_FACTOR                 :0x2
18:18:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:43: FILE_FORMAT_GRP                               :0x0
18:18:43: COPY flag                                     :0x1
18:18:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:43: File_Format                                   :0x0
18:18:43: CRC                                           :0x0
18:18:43: ####CSD Registe Values####  

18:18:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:43: [GetSCRRegisterEntry] Passed
18:18:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:43: Data_Status_After Erases          : 0
18:18:43: CPRM Security Support             : No Security
18:18:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:43: Spec. Version                     : Version 3.0X
18:18:43: Extended Security Support         : Extended_Security_Not_Supported
18:18:43: Command Support                   : COMMAND_SUPPORT
18:18:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 3421 ] 
18:18:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C90>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 3422 ] 
18:18:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:43: [ SetBusWidth(0x4) , Command count = 3423 ] 
18:18:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3424 ] 
18:18:43: Protected Area Size 0x28000
18:18:43: Bus Width           2
18:18:43: Secure Mode         0
18:18:43: Speed  Class        4
18:18:43: Perf Move           0
18:18:43: Au Size             9
18:18:43: Erase Size          15
18:18:43: Erase Timeout       1
18:18:43: Erase offset        1
18:18:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3425 ] 
18:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:43: Host Frequency set to 100000 KHz
18:18:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:43: ####CSD Registe 2.0 Values####
18:18:43: CSD_STRUCTURE                                 :0x1
18:18:43: Reserv1                                       :0x0
18:18:43: Time Access 1 TAAC                            :0xe
18:18:43: Time Access 2 NSAC*100                        :0x0
18:18:43: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:43: Card Command Classess CCC                     :0x5b5
18:18:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:43: DSR(driver stage register)  DSR_IMP           :0x0
18:18:43: Reserv2                                       :0x0
18:18:43: Device Size C_SIZE                            :0xedc8
18:18:43: Reserv3                                       :0x0
18:18:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:43: Reserv4                                       :0x0
18:18:43: Write Speed Factor R2W_FACTOR                 :0x2
18:18:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:43: FILE_FORMAT_GRP                               :0x0
18:18:43: COPY flag                                     :0x1
18:18:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:43: File_Format                                   :0x0
18:18:43: CRC                                           :0x0
18:18:43: ####CSD Registe Values####  

18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E3EC90>) , Command count = 3426 ] 
18:18:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 3427 ] 
18:18:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:44: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:44: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3428 ] 
18:18:44: Protected Area Size 0x28000
18:18:44: Bus Width           2
18:18:44: Secure Mode         0
18:18:44: Speed  Class        4
18:18:44: Perf Move           0
18:18:44: Au Size             9
18:18:44: Erase Size          15
18:18:44: Erase Timeout       1
18:18:44: Erase offset        1
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:18:44: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3429 ] 
18:18:44: Protected Area Size 0x28000
18:18:44: Bus Width           2
18:18:44: Secure Mode         0
18:18:44: Speed  Class        4
18:18:44: Perf Move           0
18:18:44: Au Size             9
18:18:44: Erase Size          15
18:18:44: Erase Timeout       1
18:18:44: Erase offset        1
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3430 ] 
18:18:44: Protected Area Size 0x28000
18:18:44: Bus Width           2
18:18:44: Secure Mode         0
18:18:44: Speed  Class        4
18:18:44: Perf Move           0
18:18:44: Au Size             9
18:18:44: Erase Size          15
18:18:44: Erase Timeout       1
18:18:44: Erase offset        1
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3431 ] 
18:18:44: Protected Area Size 0x28000
18:18:44: Bus Width           2
18:18:44: Secure Mode         0
18:18:44: Speed  Class        4
18:18:44: Perf Move           0
18:18:44: Au Size             9
18:18:44: Erase Size          15
18:18:44: Erase Timeout       1
18:18:44: Erase offset        1
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E448A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3432 ] 
18:18:44: Protected Area Size 0x28000
18:18:44: Bus Width           2
18:18:44: Secure Mode         0
18:18:44: Speed  Class        4
18:18:44: Perf Move           0
18:18:44: Au Size             9
18:18:44: Erase Size          15
18:18:44: Erase Timeout       1
18:18:44: Erase offset        1
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:44: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:18:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3433 ] 
18:18:45: Protected Area Size 0x28000
18:18:45: Bus Width           2
18:18:45: Secure Mode         0
18:18:45: Speed  Class        4
18:18:45: Perf Move           0
18:18:45: Au Size             9
18:18:45: Erase Size          15
18:18:45: Erase Timeout       1
18:18:45: Erase offset        1
18:18:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:18:45: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:18:45: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:18:45: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:18:45: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 3 
18:18:45: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:18:45: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:18:45: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:18:45: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:18:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:45: Perform Power Off and On.
18:18:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3434 ] 
18:18:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E448D0>) , Command count = 3435 ] 
18:18:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 3436 ] 
18:18:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3437 ] 
18:18:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:47: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:49: Host Frequency set to 25000 KHz
18:18:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:49: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB330>, 0x0, True) , Command count = 3438 ] 
18:18:49: [GO18_globalSetVolt]### Host voltage value is set.
18:18:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59AE0>, 0x0, False) , Command count = 3439 ] 
18:18:49: [GO18_globalSetVolt]### Host voltage value is set.
18:18:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3440 ] 
18:18:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3441 ] 
18:18:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3442 ] 
18:18:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55EA0>, <py_sfcl.CommandDataDefinition object at 0x05E59420>) , Command count = 3443 ] 
18:18:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59840>, <py_sfcl.CommandDataDefinition object at 0x05E59210>) , Command count = 3444 ] 
18:18:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:49: [ SetCardRCA(0x1, 0xD555) , Command count = 3445 ] 
18:18:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:50: Host Frequency set to 25000 KHz
18:18:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:50: ####CSD Registe 2.0 Values####
18:18:50: CSD_STRUCTURE                                 :0x1
18:18:50: Reserv1                                       :0x0
18:18:50: Time Access 1 TAAC                            :0xe
18:18:50: Time Access 2 NSAC*100                        :0x0
18:18:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:50: Card Command Classess CCC                     :0x5b5
18:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:50: DSR(driver stage register)  DSR_IMP           :0x0
18:18:50: Reserv2                                       :0x0
18:18:50: Device Size C_SIZE                            :0xedc8
18:18:50: Reserv3                                       :0x0
18:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:50: Reserv4                                       :0x0
18:18:50: Write Speed Factor R2W_FACTOR                 :0x2
18:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:50: FILE_FORMAT_GRP                               :0x0
18:18:50: COPY flag                                     :0x1
18:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:50: File_Format                                   :0x0
18:18:50: CRC                                           :0x0
18:18:50: ####CSD Registe Values####  

18:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:50: [GetSCRRegisterEntry] Passed
18:18:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:50: Data_Status_After Erases          : 0
18:18:50: CPRM Security Support             : No Security
18:18:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:50: Spec. Version                     : Version 3.0X
18:18:50: Extended Security Support         : Extended_Security_Not_Supported
18:18:50: Command Support                   : COMMAND_SUPPORT
18:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E598D0>, <py_sfcl.CommandDataDefinition object at 0x05E59540>) , Command count = 3446 ] 
18:18:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E59F60>) , Command count = 3447 ] 
18:18:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:50: [ SetBusWidth(0x4) , Command count = 3448 ] 
18:18:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3449 ] 
18:18:50: Protected Area Size 0x28000
18:18:50: Bus Width           2
18:18:50: Secure Mode         0
18:18:50: Speed  Class        4
18:18:50: Perf Move           0
18:18:50: Au Size             9
18:18:50: Erase Size          15
18:18:50: Erase Timeout       1
18:18:50: Erase offset        1
18:18:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3450 ] 
18:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:50: Host Frequency set to 100000 KHz
18:18:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:50: ####CSD Registe 2.0 Values####
18:18:50: CSD_STRUCTURE                                 :0x1
18:18:50: Reserv1                                       :0x0
18:18:50: Time Access 1 TAAC                            :0xe
18:18:50: Time Access 2 NSAC*100                        :0x0
18:18:50: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:50: Card Command Classess CCC                     :0x5b5
18:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:50: DSR(driver stage register)  DSR_IMP           :0x0
18:18:50: Reserv2                                       :0x0
18:18:50: Device Size C_SIZE                            :0xedc8
18:18:50: Reserv3                                       :0x0
18:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:50: Reserv4                                       :0x0
18:18:50: Write Speed Factor R2W_FACTOR                 :0x2
18:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:50: FILE_FORMAT_GRP                               :0x0
18:18:50: COPY flag                                     :0x1
18:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:50: File_Format                                   :0x0
18:18:50: CRC                                           :0x0
18:18:50: ####CSD Registe Values####  

18:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E59B70>) , Command count = 3451 ] 
18:18:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E598A0>) , Command count = 3452 ] 
18:18:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:18:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:50: [GetSCRRegisterEntry] Passed
18:18:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:50: Data_Status_After Erases          : 0
18:18:50: CPRM Security Support             : No Security
18:18:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:50: Spec. Version                     : Version 3.0X
18:18:50: Extended Security Support         : Extended_Security_Not_Supported
18:18:50: Command Support                   : COMMAND_SUPPORT
18:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:50: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:18:50: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:18:51: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:18:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:51: [GetSCRRegisterEntry] Passed
18:18:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:51: Data_Status_After Erases          : 0
18:18:51: CPRM Security Support             : No Security
18:18:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:51: Spec. Version                     : Version 3.0X
18:18:51: Extended Security Support         : Extended_Security_Not_Supported
18:18:51: Command Support                   : COMMAND_SUPPORT
18:18:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:51: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:18:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:51: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3453 ] 
18:18:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:18:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:51: [GO4_globalInitCard]### Switch to Specify Card Type
18:18:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:53: Host Frequency set to 25000 KHz
18:18:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:53: [GO18_globalSetVolt]### Set Host Voltage value.
18:18:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:18:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA480>, 0x0, True) , Command count = 3454 ] 
18:18:53: [GO18_globalSetVolt]### Host voltage value is set.
18:18:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:18:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E444E0>, 0x0, False) , Command count = 3455 ] 
18:18:53: [GO18_globalSetVolt]### Host voltage value is set.
18:18:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3456 ] 
18:18:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3457 ] 
18:18:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:18:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3458 ] 
18:18:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:18:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59810>, <py_sfcl.CommandDataDefinition object at 0x05E44300>) , Command count = 3459 ] 
18:18:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F630>, <py_sfcl.CommandDataDefinition object at 0x05E44DB0>) , Command count = 3460 ] 
18:18:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:18:53: [ SetCardRCA(0x1, 0xD555) , Command count = 3461 ] 
18:18:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:18:53: Host Frequency set to 25000 KHz
18:18:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:18:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:53: ####CSD Registe 2.0 Values####
18:18:53: CSD_STRUCTURE                                 :0x1
18:18:53: Reserv1                                       :0x0
18:18:53: Time Access 1 TAAC                            :0xe
18:18:53: Time Access 2 NSAC*100                        :0x0
18:18:53: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:53: Card Command Classess CCC                     :0x5b5
18:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:53: DSR(driver stage register)  DSR_IMP           :0x0
18:18:53: Reserv2                                       :0x0
18:18:53: Device Size C_SIZE                            :0xedc8
18:18:53: Reserv3                                       :0x0
18:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:53: Reserv4                                       :0x0
18:18:53: Write Speed Factor R2W_FACTOR                 :0x2
18:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:53: FILE_FORMAT_GRP                               :0x0
18:18:53: COPY flag                                     :0x1
18:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:53: File_Format                                   :0x0
18:18:53: CRC                                           :0x0
18:18:53: ####CSD Registe Values####  

18:18:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:53: [GetSCRRegisterEntry] Passed
18:18:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:53: Data_Status_After Erases          : 0
18:18:53: CPRM Security Support             : No Security
18:18:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:53: Spec. Version                     : Version 3.0X
18:18:53: Extended Security Support         : Extended_Security_Not_Supported
18:18:53: Command Support                   : COMMAND_SUPPORT
18:18:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 3462 ] 
18:18:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F990>, <py_sfcl.CommandDataDefinition object at 0x05E44E10>) , Command count = 3463 ] 
18:18:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:18:53: [ SetBusWidth(0x4) , Command count = 3464 ] 
18:18:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:18:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3465 ] 
18:18:53: Protected Area Size 0x28000
18:18:53: Bus Width           2
18:18:53: Secure Mode         0
18:18:53: Speed  Class        4
18:18:53: Perf Move           0
18:18:53: Au Size             9
18:18:53: Erase Size          15
18:18:53: Erase Timeout       1
18:18:53: Erase offset        1
18:18:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:18:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:18:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3466 ] 
18:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:18:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:18:54: Host Frequency set to 100000 KHz
18:18:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:18:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:54: ####CSD Registe 2.0 Values####
18:18:54: CSD_STRUCTURE                                 :0x1
18:18:54: Reserv1                                       :0x0
18:18:54: Time Access 1 TAAC                            :0xe
18:18:54: Time Access 2 NSAC*100                        :0x0
18:18:54: Data Transfer Rate TRAN_SPEED                 :0xb
18:18:54: Card Command Classess CCC                     :0x5b5
18:18:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:54: DSR(driver stage register)  DSR_IMP           :0x0
18:18:54: Reserv2                                       :0x0
18:18:54: Device Size C_SIZE                            :0xedc8
18:18:54: Reserv3                                       :0x0
18:18:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:54: Reserv4                                       :0x0
18:18:54: Write Speed Factor R2W_FACTOR                 :0x2
18:18:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:54: FILE_FORMAT_GRP                               :0x0
18:18:54: COPY flag                                     :0x1
18:18:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:54: File_Format                                   :0x0
18:18:54: CRC                                           :0x0
18:18:54: ####CSD Registe Values####  

18:18:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py_sfcl.CommandDataDefinition object at 0x05E44CC0>) , Command count = 3467 ] 
18:18:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:18:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E593C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FA80>) , Command count = 3468 ] 
18:18:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:18:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:18:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D20>, <py_sfcl.CommandDataDefinition object at 0x05E4F6C0>) , Command count = 3469 ] 
18:18:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5A0>, <py_sfcl.CommandDataDefinition object at 0x05E4F7E0>) , Command count = 3470 ] 
18:18:54: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E592D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F360>) , Command count = 3471 ] 
18:18:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E4F8A0>) , Command count = 3472 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B70>, <py_sfcl.CommandDataDefinition object at 0x05E44330>) , Command count = 3473 ] 
18:18:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F4B0>, <py_sfcl.CommandDataDefinition object at 0x05E44CF0>) , Command count = 3474 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F600>, <py_sfcl.CommandDataDefinition object at 0x05DAA420>) , Command count = 3475 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59DE0>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 3476 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F750>, <py_sfcl.CommandDataDefinition object at 0x05E44840>) , Command count = 3477 ] 
18:18:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C00>, <py_sfcl.CommandDataDefinition object at 0x05E44210>) , Command count = 3478 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55930>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 3479 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37480>, <py_sfcl.CommandDataDefinition object at 0x05E37ED0>) , Command count = 3480 ] 
18:18:55: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44240>, <py_sfcl.CommandDataDefinition object at 0x05E4F0F0>) , Command count = 3481 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D5D0>, <py_sfcl.CommandDataDefinition object at 0x05E37BA0>) , Command count = 3482 ] 
18:18:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:18:55: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:18:55: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:18:55: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:55: [GetSCRRegisterEntry] Passed
18:18:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:55: Data_Status_After Erases          : 0
18:18:55: CPRM Security Support             : No Security
18:18:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:55: Spec. Version                     : Version 3.0X
18:18:55: Extended Security Support         : Extended_Security_Not_Supported
18:18:55: Command Support                   : COMMAND_SUPPORT
18:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:55: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:55: [GetSCRRegisterEntry] Passed
18:18:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:55: Data_Status_After Erases          : 0
18:18:55: CPRM Security Support             : No Security
18:18:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:55: Spec. Version                     : Version 3.0X
18:18:55: Extended Security Support         : Extended_Security_Not_Supported
18:18:55: Command Support                   : COMMAND_SUPPORT
18:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:55: [GetSCRRegisterEntry] Passed
18:18:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:56: Data_Status_After Erases          : 0
18:18:56: CPRM Security Support             : No Security
18:18:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:56: Spec. Version                     : Version 3.0X
18:18:56: Extended Security Support         : Extended_Security_Not_Supported
18:18:56: Command Support                   : COMMAND_SUPPORT
18:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:56: [GetSCRRegisterEntry] Passed
18:18:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:56: Data_Status_After Erases          : 0
18:18:56: CPRM Security Support             : No Security
18:18:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:56: Spec. Version                     : Version 3.0X
18:18:56: Extended Security Support         : Extended_Security_Not_Supported
18:18:56: Command Support                   : COMMAND_SUPPORT
18:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:18:56: [GetSCRRegisterEntry] Passed
18:18:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:18:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:18:56: Data_Status_After Erases          : 0
18:18:56: CPRM Security Support             : No Security
18:18:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:18:56: Spec. Version                     : Version 3.0X
18:18:56: Extended Security Support         : Extended_Security_Not_Supported
18:18:56: Command Support                   : COMMAND_SUPPORT
18:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:18:56: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:18:56: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:18:56: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:18:56: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:18:56: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:18:56: Perform Power Off and On.
18:18:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3483 ] 
18:18:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C30>, <py_sfcl.CommandDataDefinition object at 0x05E59E40>) , Command count = 3484 ] 
18:18:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F210>) , Command count = 3485 ] 
18:18:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3486 ] 
18:18:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:58: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:00: Host Frequency set to 25000 KHz
18:19:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:00: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50480>, 0x0, True) , Command count = 3487 ] 
18:19:00: [GO18_globalSetVolt]### Host voltage value is set.
18:19:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59D80>, 0x0, False) , Command count = 3488 ] 
18:19:00: [GO18_globalSetVolt]### Host voltage value is set.
18:19:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3489 ] 
18:19:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3490 ] 
18:19:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3491 ] 
18:19:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F780>, <py_sfcl.CommandDataDefinition object at 0x05E4FC90>) , Command count = 3492 ] 
18:19:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E50630>) , Command count = 3493 ] 
18:19:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3494 ] 
18:19:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:01: Host Frequency set to 25000 KHz
18:19:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:01: ####CSD Registe 2.0 Values####
18:19:01: CSD_STRUCTURE                                 :0x1
18:19:01: Reserv1                                       :0x0
18:19:01: Time Access 1 TAAC                            :0xe
18:19:01: Time Access 2 NSAC*100                        :0x0
18:19:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:01: Card Command Classess CCC                     :0x5b5
18:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:01: DSR(driver stage register)  DSR_IMP           :0x0
18:19:01: Reserv2                                       :0x0
18:19:01: Device Size C_SIZE                            :0xedc8
18:19:01: Reserv3                                       :0x0
18:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:01: Reserv4                                       :0x0
18:19:01: Write Speed Factor R2W_FACTOR                 :0x2
18:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:01: FILE_FORMAT_GRP                               :0x0
18:19:01: COPY flag                                     :0x1
18:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:01: File_Format                                   :0x0
18:19:01: CRC                                           :0x0
18:19:01: ####CSD Registe Values####  

18:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:01: [GetSCRRegisterEntry] Passed
18:19:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:01: Data_Status_After Erases          : 0
18:19:01: CPRM Security Support             : No Security
18:19:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:01: Spec. Version                     : Version 3.0X
18:19:01: Extended Security Support         : Extended_Security_Not_Supported
18:19:01: Command Support                   : COMMAND_SUPPORT
18:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E4FEA0>) , Command count = 3495 ] 
18:19:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F3F0>) , Command count = 3496 ] 
18:19:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:01: [ SetBusWidth(0x4) , Command count = 3497 ] 
18:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3498 ] 
18:19:01: Protected Area Size 0x28000
18:19:01: Bus Width           2
18:19:01: Secure Mode         0
18:19:01: Speed  Class        4
18:19:01: Perf Move           0
18:19:01: Au Size             9
18:19:01: Erase Size          15
18:19:01: Erase Timeout       1
18:19:01: Erase offset        1
18:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3499 ] 
18:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:01: Host Frequency set to 100000 KHz
18:19:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:01: ####CSD Registe 2.0 Values####
18:19:01: CSD_STRUCTURE                                 :0x1
18:19:01: Reserv1                                       :0x0
18:19:01: Time Access 1 TAAC                            :0xe
18:19:01: Time Access 2 NSAC*100                        :0x0
18:19:01: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:01: Card Command Classess CCC                     :0x5b5
18:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:01: DSR(driver stage register)  DSR_IMP           :0x0
18:19:01: Reserv2                                       :0x0
18:19:01: Device Size C_SIZE                            :0xedc8
18:19:01: Reserv3                                       :0x0
18:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:01: Reserv4                                       :0x0
18:19:01: Write Speed Factor R2W_FACTOR                 :0x2
18:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:01: FILE_FORMAT_GRP                               :0x0
18:19:01: COPY flag                                     :0x1
18:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:01: File_Format                                   :0x0
18:19:01: CRC                                           :0x0
18:19:01: ####CSD Registe Values####  

18:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50450>, <py_sfcl.CommandDataDefinition object at 0x05E44DE0>) , Command count = 3500 ] 
18:19:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB270>, <py_sfcl.CommandDataDefinition object at 0x052BB300>) , Command count = 3501 ] 
18:19:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:01: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:01: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3502 ] 
18:19:01: Protected Area Size 0x28000
18:19:01: Bus Width           2
18:19:01: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:19:02: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E591B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3503 ] 
18:19:02: Protected Area Size 0x28000
18:19:02: Bus Width           2
18:19:02: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3504 ] 
18:19:02: Protected Area Size 0x28000
18:19:02: Bus Width           2
18:19:02: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3505 ] 
18:19:02: Protected Area Size 0x28000
18:19:02: Bus Width           2
18:19:02: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3506 ] 
18:19:02: Protected Area Size 0x28000
18:19:02: Bus Width           2
18:19:02: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3507 ] 
18:19:02: Protected Area Size 0x28000
18:19:02: Bus Width           2
18:19:02: Secure Mode         0
18:19:02: Speed  Class        4
18:19:02: Perf Move           0
18:19:02: Au Size             9
18:19:02: Erase Size          15
18:19:02: Erase Timeout       1
18:19:02: Erase offset        1
18:19:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:19:02: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:19:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E508A0>) , Command count = 3508 ] 
18:19:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59CC0>, <py_sfcl.CommandDataDefinition object at 0x05E59BA0>) , Command count = 3509 ] 
18:19:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 3510 ] 
18:19:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E372D0>, <py_sfcl.CommandDataDefinition object at 0x0519DFC0>) , Command count = 3511 ] 
18:19:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:19:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:03: [GetSCRRegisterEntry] Passed
18:19:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:03: Data_Status_After Erases          : 0
18:19:03: CPRM Security Support             : No Security
18:19:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:03: Spec. Version                     : Version 3.0X
18:19:03: Extended Security Support         : Extended_Security_Not_Supported
18:19:03: Command Support                   : COMMAND_SUPPORT
18:19:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:19:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3512 ] 
18:19:03: Protected Area Size 0x28000
18:19:03: Bus Width           2
18:19:03: Secure Mode         0
18:19:03: Speed  Class        4
18:19:03: Perf Move           0
18:19:03: Au Size             9
18:19:03: Erase Size          15
18:19:03: Erase Timeout       1
18:19:03: Erase offset        1
18:19:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:19:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3513 ] 
18:19:06: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:19:06: [DVTCommonLib]### VOLA from card : 0x1
18:19:06: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:19:06: [DVTCommonLib]### Reserved bits from card : 0x0
18:19:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E50210>) , Command count = 3514 ] 
18:19:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F570>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 3515 ] 
18:19:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3516 ] 
18:19:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:06: [ SelectCard(0x1, True) , Command count = 3517 ] 
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FF30>, <py_sfcl.CommandDataDefinition object at 0x05E4F240>) , Command count = 3518 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:06: [GetSCRRegisterEntry] Failed
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3519 ] 
18:19:06: [ GetCardStatus() , Command count = 3520 ] 
18:19:06: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:19:06: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50720>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 3521 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E447B0>, <py_sfcl.CommandDataDefinition object at 0x05E59990>) , Command count = 3522 ] 
18:19:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55180>, <py_sfcl.CommandDataDefinition object at 0x052A5600>) , Command count = 3523 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 3524 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:06: [GetSCRRegisterEntry] Passed
18:19:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:06: Data_Status_After Erases          : 0
18:19:06: CPRM Security Support             : No Security
18:19:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:06: Spec. Version                     : Version 3.0X
18:19:06: Extended Security Support         : Extended_Security_Not_Supported
18:19:06: Command Support                   : COMMAND_SUPPORT
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3525 ] 
18:19:06: Protected Area Size 0x28000
18:19:06: Bus Width           0
18:19:06: Secure Mode         0
18:19:06: Speed  Class        4
18:19:06: Perf Move           0
18:19:06: Au Size             9
18:19:06: Erase Size          15
18:19:06: Erase Timeout       1
18:19:06: Erase offset        1
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59030>, <py_sfcl.CommandDataDefinition object at 0x05E550F0>) , Command count = 3526 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E510>, <py_sfcl.CommandDataDefinition object at 0x05E3EA50>) , Command count = 3527 ] 
18:19:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C30>, <py_sfcl.CommandDataDefinition object at 0x05E50AB0>) , Command count = 3528 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59EA0>, <py_sfcl.CommandDataDefinition object at 0x05E50A80>) , Command count = 3529 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:06: [GetSCRRegisterEntry] Failed
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3530 ] 
18:19:06: [ GetCardStatus() , Command count = 3531 ] 
18:19:06: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:19:06: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDB0>, <py_sfcl.CommandDataDefinition object at 0x05E55A20>) , Command count = 3532 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50DE0>, <py_sfcl.CommandDataDefinition object at 0x05E378A0>) , Command count = 3533 ] 
18:19:06: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509F0>, <py_sfcl.CommandDataDefinition object at 0x05E50D50>) , Command count = 3534 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55450>, <py_sfcl.CommandDataDefinition object at 0x05E59D50>) , Command count = 3535 ] 
18:19:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:06: [GetSCRRegisterEntry] Passed
18:19:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:06: Data_Status_After Erases          : 0
18:19:06: CPRM Security Support             : No Security
18:19:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:06: Spec. Version                     : Version 3.0X
18:19:06: Extended Security Support         : Extended_Security_Not_Supported
18:19:06: Command Support                   : COMMAND_SUPPORT
18:19:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3536 ] 
18:19:06: Protected Area Size 0x28000
18:19:06: Bus Width           0
18:19:06: Secure Mode         0
18:19:06: Speed  Class        4
18:19:06: Perf Move           0
18:19:06: Au Size             9
18:19:06: Erase Size          15
18:19:06: Erase Timeout       1
18:19:06: Erase offset        1
18:19:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:06: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:19:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3537 ] 
18:19:08: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:19:08: [DVTCommonLib]### VOLA from card : 0x1
18:19:08: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:19:08: [DVTCommonLib]### Reserved bits from card : 0x0
18:19:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F330>, <py_sfcl.CommandDataDefinition object at 0x05E50BD0>) , Command count = 3538 ] 
18:19:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EC60>, <py_sfcl.CommandDataDefinition object at 0x05E3E960>) , Command count = 3539 ] 
18:19:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3540 ] 
18:19:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:08: [ SelectCard(0x1, True) , Command count = 3541 ] 
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:19:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:08: [GetSCRRegisterEntry] Failed
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:19:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3542 ] 
18:19:08: [ GetCardStatus() , Command count = 3543 ] 
18:19:08: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:19:08: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F180>, <py_sfcl.CommandDataDefinition object at 0x05E4FCC0>) , Command count = 3544 ] 
18:19:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FA20>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 3545 ] 
18:19:08: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E50690>) , Command count = 3546 ] 
18:19:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD50>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 3547 ] 
18:19:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:08: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:19:08: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:19:08: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:19:08: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:08: Perform Power Off and On.
18:19:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3548 ] 
18:19:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59750>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 3549 ] 
18:19:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB570>, <py_sfcl.CommandDataDefinition object at 0x05E502D0>) , Command count = 3550 ] 
18:19:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:10: [ SetCardRCA(0x1, 0xD555) , Command count = 3551 ] 
18:19:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:10: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:12: Host Frequency set to 25000 KHz
18:19:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:12: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E442D0>, 0x0, True) , Command count = 3552 ] 
18:19:12: [GO18_globalSetVolt]### Host voltage value is set.
18:19:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E502A0>, 0x0, False) , Command count = 3553 ] 
18:19:12: [GO18_globalSetVolt]### Host voltage value is set.
18:19:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3554 ] 
18:19:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3555 ] 
18:19:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3556 ] 
18:19:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50540>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 3557 ] 
18:19:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDD80>, <py_sfcl.CommandDataDefinition object at 0x05E55540>) , Command count = 3558 ] 
18:19:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:13: [ SetCardRCA(0x1, 0xD555) , Command count = 3559 ] 
18:19:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:13: Host Frequency set to 25000 KHz
18:19:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:13: ####CSD Registe 2.0 Values####
18:19:13: CSD_STRUCTURE                                 :0x1
18:19:13: Reserv1                                       :0x0
18:19:13: Time Access 1 TAAC                            :0xe
18:19:13: Time Access 2 NSAC*100                        :0x0
18:19:13: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:13: Card Command Classess CCC                     :0x5b5
18:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:13: DSR(driver stage register)  DSR_IMP           :0x0
18:19:13: Reserv2                                       :0x0
18:19:13: Device Size C_SIZE                            :0xedc8
18:19:13: Reserv3                                       :0x0
18:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:13: Reserv4                                       :0x0
18:19:13: Write Speed Factor R2W_FACTOR                 :0x2
18:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:13: FILE_FORMAT_GRP                               :0x0
18:19:13: COPY flag                                     :0x1
18:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:13: File_Format                                   :0x0
18:19:13: CRC                                           :0x0
18:19:13: ####CSD Registe Values####  

18:19:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:13: [GetSCRRegisterEntry] Passed
18:19:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:13: Data_Status_After Erases          : 0
18:19:13: CPRM Security Support             : No Security
18:19:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:13: Spec. Version                     : Version 3.0X
18:19:13: Extended Security Support         : Extended_Security_Not_Supported
18:19:13: Command Support                   : COMMAND_SUPPORT
18:19:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E59300>) , Command count = 3560 ] 
18:19:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 3561 ] 
18:19:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:13: [ SetBusWidth(0x4) , Command count = 3562 ] 
18:19:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3563 ] 
18:19:13: Protected Area Size 0x28000
18:19:13: Bus Width           2
18:19:13: Secure Mode         0
18:19:13: Speed  Class        4
18:19:13: Perf Move           0
18:19:13: Au Size             9
18:19:13: Erase Size          15
18:19:13: Erase Timeout       1
18:19:13: Erase offset        1
18:19:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3564 ] 
18:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:13: Host Frequency set to 100000 KHz
18:19:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:13: ####CSD Registe 2.0 Values####
18:19:13: CSD_STRUCTURE                                 :0x1
18:19:13: Reserv1                                       :0x0
18:19:13: Time Access 1 TAAC                            :0xe
18:19:13: Time Access 2 NSAC*100                        :0x0
18:19:13: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:13: Card Command Classess CCC                     :0x5b5
18:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:13: DSR(driver stage register)  DSR_IMP           :0x0
18:19:13: Reserv2                                       :0x0
18:19:13: Device Size C_SIZE                            :0xedc8
18:19:13: Reserv3                                       :0x0
18:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:13: Reserv4                                       :0x0
18:19:13: Write Speed Factor R2W_FACTOR                 :0x2
18:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:13: FILE_FORMAT_GRP                               :0x0
18:19:13: COPY flag                                     :0x1
18:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:13: File_Format                                   :0x0
18:19:13: CRC                                           :0x0
18:19:13: ####CSD Registe Values####  

18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50870>, <py_sfcl.CommandDataDefinition object at 0x05E55720>) , Command count = 3565 ] 
18:19:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E509C0>, <py_sfcl.CommandDataDefinition object at 0x05E55630>) , Command count = 3566 ] 
18:19:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:13: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:14: [GetSCRRegisterEntry] Passed
18:19:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:14: Data_Status_After Erases          : 0
18:19:14: CPRM Security Support             : No Security
18:19:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:14: Spec. Version                     : Version 3.0X
18:19:14: Extended Security Support         : Extended_Security_Not_Supported
18:19:14: Command Support                   : COMMAND_SUPPORT
18:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:19:14: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:19:14: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:14: [GetSCRRegisterEntry] Passed
18:19:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:14: Data_Status_After Erases          : 0
18:19:14: CPRM Security Support             : No Security
18:19:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:14: Spec. Version                     : Version 3.0X
18:19:14: Extended Security Support         : Extended_Security_Not_Supported
18:19:14: Command Support                   : COMMAND_SUPPORT
18:19:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:14: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3567 ] 
18:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:19:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:14: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:16: Host Frequency set to 25000 KHz
18:19:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:16: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05192180>, 0x0, True) , Command count = 3568 ] 
18:19:16: [GO18_globalSetVolt]### Host voltage value is set.
18:19:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E594B0>, 0x0, False) , Command count = 3569 ] 
18:19:16: [GO18_globalSetVolt]### Host voltage value is set.
18:19:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3570 ] 
18:19:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3571 ] 
18:19:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3572 ] 
18:19:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF60>) , Command count = 3573 ] 
18:19:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 3574 ] 
18:19:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3575 ] 
18:19:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:17: Host Frequency set to 25000 KHz
18:19:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:17: ####CSD Registe 2.0 Values####
18:19:17: CSD_STRUCTURE                                 :0x1
18:19:17: Reserv1                                       :0x0
18:19:17: Time Access 1 TAAC                            :0xe
18:19:17: Time Access 2 NSAC*100                        :0x0
18:19:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:17: Card Command Classess CCC                     :0x5b5
18:19:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:17: DSR(driver stage register)  DSR_IMP           :0x0
18:19:17: Reserv2                                       :0x0
18:19:17: Device Size C_SIZE                            :0xedc8
18:19:17: Reserv3                                       :0x0
18:19:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:17: Reserv4                                       :0x0
18:19:17: Write Speed Factor R2W_FACTOR                 :0x2
18:19:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:17: FILE_FORMAT_GRP                               :0x0
18:19:17: COPY flag                                     :0x1
18:19:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:17: File_Format                                   :0x0
18:19:17: CRC                                           :0x0
18:19:17: ####CSD Registe Values####  

18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 3576 ] 
18:19:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E597B0>) , Command count = 3577 ] 
18:19:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:17: [ SetBusWidth(0x4) , Command count = 3578 ] 
18:19:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E550C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3579 ] 
18:19:17: Protected Area Size 0x28000
18:19:17: Bus Width           2
18:19:17: Secure Mode         0
18:19:17: Speed  Class        4
18:19:17: Perf Move           0
18:19:17: Au Size             9
18:19:17: Erase Size          15
18:19:17: Erase Timeout       1
18:19:17: Erase offset        1
18:19:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3580 ] 
18:19:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:17: Host Frequency set to 100000 KHz
18:19:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:17: ####CSD Registe 2.0 Values####
18:19:17: CSD_STRUCTURE                                 :0x1
18:19:17: Reserv1                                       :0x0
18:19:17: Time Access 1 TAAC                            :0xe
18:19:17: Time Access 2 NSAC*100                        :0x0
18:19:17: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:17: Card Command Classess CCC                     :0x5b5
18:19:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:17: DSR(driver stage register)  DSR_IMP           :0x0
18:19:17: Reserv2                                       :0x0
18:19:17: Device Size C_SIZE                            :0xedc8
18:19:17: Reserv3                                       :0x0
18:19:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:17: Reserv4                                       :0x0
18:19:17: Write Speed Factor R2W_FACTOR                 :0x2
18:19:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:17: FILE_FORMAT_GRP                               :0x0
18:19:17: COPY flag                                     :0x1
18:19:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:17: File_Format                                   :0x0
18:19:17: CRC                                           :0x0
18:19:17: ####CSD Registe Values####  

18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E55BD0>) , Command count = 3581 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E4FCF0>) , Command count = 3582 ] 
18:19:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2AC60>, <py_sfcl.CommandDataDefinition object at 0x05E55690>) , Command count = 3583 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59A50>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 3584 ] 
18:19:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E59AB0>) , Command count = 3585 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55330>, <py_sfcl.CommandDataDefinition object at 0x05E59F00>) , Command count = 3586 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50810>, <py_sfcl.CommandDataDefinition object at 0x05E50E40>) , Command count = 3587 ] 
18:19:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E40>, <py_sfcl.CommandDataDefinition object at 0x05E501B0>) , Command count = 3588 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2A1B0>) , Command count = 3589 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A420>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 3590 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558D0>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 3591 ] 
18:19:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 3592 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x052BB390>) , Command count = 3593 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A7B0>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 3594 ] 
18:19:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59E70>, <py_sfcl.CommandDataDefinition object at 0x05E3EAE0>) , Command count = 3595 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC60>, <py_sfcl.CommandDataDefinition object at 0x05E59120>) , Command count = 3596 ] 
18:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:17: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:19:17: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:19:17: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:17: [GetSCRRegisterEntry] Passed
18:19:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:17: Data_Status_After Erases          : 0
18:19:17: CPRM Security Support             : No Security
18:19:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:17: Spec. Version                     : Version 3.0X
18:19:17: Extended Security Support         : Extended_Security_Not_Supported
18:19:17: Command Support                   : COMMAND_SUPPORT
18:19:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:17: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:19:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:19:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:19:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:19:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:17: Perform Power Off and On.
18:19:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3597 ] 
18:19:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C90>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 3598 ] 
18:19:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59060>, <py_sfcl.CommandDataDefinition object at 0x05DB8C60>) , Command count = 3599 ] 
18:19:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3600 ] 
18:19:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:21: Host Frequency set to 25000 KHz
18:19:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59F90>, 0x0, True) , Command count = 3601 ] 
18:19:21: [GO18_globalSetVolt]### Host voltage value is set.
18:19:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50150>, 0x0, False) , Command count = 3602 ] 
18:19:21: [GO18_globalSetVolt]### Host voltage value is set.
18:19:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3603 ] 
18:19:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3604 ] 
18:19:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3605 ] 
18:19:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py_sfcl.CommandDataDefinition object at 0x05E50B40>) , Command count = 3606 ] 
18:19:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDBA0>, <py_sfcl.CommandDataDefinition object at 0x05E37AB0>) , Command count = 3607 ] 
18:19:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3608 ] 
18:19:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:22: Host Frequency set to 25000 KHz
18:19:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:22: ####CSD Registe 2.0 Values####
18:19:22: CSD_STRUCTURE                                 :0x1
18:19:22: Reserv1                                       :0x0
18:19:22: Time Access 1 TAAC                            :0xe
18:19:22: Time Access 2 NSAC*100                        :0x0
18:19:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:22: Card Command Classess CCC                     :0x5b5
18:19:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:22: DSR(driver stage register)  DSR_IMP           :0x0
18:19:22: Reserv2                                       :0x0
18:19:22: Device Size C_SIZE                            :0xedc8
18:19:22: Reserv3                                       :0x0
18:19:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:22: Reserv4                                       :0x0
18:19:22: Write Speed Factor R2W_FACTOR                 :0x2
18:19:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:22: FILE_FORMAT_GRP                               :0x0
18:19:22: COPY flag                                     :0x1
18:19:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:22: File_Format                                   :0x0
18:19:22: CRC                                           :0x0
18:19:22: ####CSD Registe Values####  

18:19:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:22: [GetSCRRegisterEntry] Passed
18:19:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:22: Data_Status_After Erases          : 0
18:19:22: CPRM Security Support             : No Security
18:19:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:22: Spec. Version                     : Version 3.0X
18:19:22: Extended Security Support         : Extended_Security_Not_Supported
18:19:22: Command Support                   : COMMAND_SUPPORT
18:19:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E2DC30>) , Command count = 3609 ] 
18:19:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E556F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E870>) , Command count = 3610 ] 
18:19:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:22: [ SetBusWidth(0x4) , Command count = 3611 ] 
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3612 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3613 ] 
18:19:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:22: Host Frequency set to 100000 KHz
18:19:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:22: ####CSD Registe 2.0 Values####
18:19:22: CSD_STRUCTURE                                 :0x1
18:19:22: Reserv1                                       :0x0
18:19:22: Time Access 1 TAAC                            :0xe
18:19:22: Time Access 2 NSAC*100                        :0x0
18:19:22: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:22: Card Command Classess CCC                     :0x5b5
18:19:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:22: DSR(driver stage register)  DSR_IMP           :0x0
18:19:22: Reserv2                                       :0x0
18:19:22: Device Size C_SIZE                            :0xedc8
18:19:22: Reserv3                                       :0x0
18:19:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:22: Reserv4                                       :0x0
18:19:22: Write Speed Factor R2W_FACTOR                 :0x2
18:19:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:22: FILE_FORMAT_GRP                               :0x0
18:19:22: COPY flag                                     :0x1
18:19:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:22: File_Format                                   :0x0
18:19:22: CRC                                           :0x0
18:19:22: ####CSD Registe Values####  

18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E550C0>) , Command count = 3614 ] 
18:19:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55BA0>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 3615 ] 
18:19:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3616 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:19:22: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3617 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3618 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3619 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3620 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3621 ] 
18:19:22: Protected Area Size 0x28000
18:19:22: Bus Width           2
18:19:22: Secure Mode         0
18:19:22: Speed  Class        4
18:19:22: Perf Move           0
18:19:22: Au Size             9
18:19:22: Erase Size          15
18:19:22: Erase Timeout       1
18:19:22: Erase offset        1
18:19:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:19:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:19:22: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:19:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3622 ] 
18:19:25: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:19:25: [DVTCommonLib]### VOLA from card : 0x1
18:19:25: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:19:25: [DVTCommonLib]### Reserved bits from card : 0x0
18:19:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59ED0>, <py_sfcl.CommandDataDefinition object at 0x05E37450>) , Command count = 3623 ] 
18:19:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D180>, <py_sfcl.CommandDataDefinition object at 0x052BBE40>) , Command count = 3624 ] 
18:19:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3625 ] 
18:19:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:25: [ SelectCard(0x1, True) , Command count = 3626 ] 
18:19:25: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:19:25: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:19:25: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:19:25: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:25: Perform Power Off and On.
18:19:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3627 ] 
18:19:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37540>, <py_sfcl.CommandDataDefinition object at 0x05E55270>) , Command count = 3628 ] 
18:19:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55CF0>, <py_sfcl.CommandDataDefinition object at 0x05E552D0>) , Command count = 3629 ] 
18:19:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:27: [ SetCardRCA(0x1, 0xD555) , Command count = 3630 ] 
18:19:27: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:27: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:29: Host Frequency set to 25000 KHz
18:19:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:29: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBF00>, 0x0, True) , Command count = 3631 ] 
18:19:29: [GO18_globalSetVolt]### Host voltage value is set.
18:19:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x052782D0>, 0x0, False) , Command count = 3632 ] 
18:19:29: [GO18_globalSetVolt]### Host voltage value is set.
18:19:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3633 ] 
18:19:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3634 ] 
18:19:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3635 ] 
18:19:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37A20>, <py_sfcl.CommandDataDefinition object at 0x05E37600>) , Command count = 3636 ] 
18:19:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50570>, <py_sfcl.CommandDataDefinition object at 0x05E2DF30>) , Command count = 3637 ] 
18:19:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3638 ] 
18:19:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:29: Host Frequency set to 25000 KHz
18:19:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:29: ####CSD Registe 2.0 Values####
18:19:29: CSD_STRUCTURE                                 :0x1
18:19:29: Reserv1                                       :0x0
18:19:29: Time Access 1 TAAC                            :0xe
18:19:29: Time Access 2 NSAC*100                        :0x0
18:19:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:29: Card Command Classess CCC                     :0x5b5
18:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:29: DSR(driver stage register)  DSR_IMP           :0x0
18:19:29: Reserv2                                       :0x0
18:19:29: Device Size C_SIZE                            :0xedc8
18:19:29: Reserv3                                       :0x0
18:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:29: Reserv4                                       :0x0
18:19:29: Write Speed Factor R2W_FACTOR                 :0x2
18:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:29: FILE_FORMAT_GRP                               :0x0
18:19:29: COPY flag                                     :0x1
18:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:29: File_Format                                   :0x0
18:19:29: CRC                                           :0x0
18:19:29: ####CSD Registe Values####  

18:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:29: [GetSCRRegisterEntry] Passed
18:19:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:29: Data_Status_After Erases          : 0
18:19:29: CPRM Security Support             : No Security
18:19:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:29: Spec. Version                     : Version 3.0X
18:19:29: Extended Security Support         : Extended_Security_Not_Supported
18:19:29: Command Support                   : COMMAND_SUPPORT
18:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 3639 ] 
18:19:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C60>, <py_sfcl.CommandDataDefinition object at 0x05E379C0>) , Command count = 3640 ] 
18:19:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:29: [ SetBusWidth(0x4) , Command count = 3641 ] 
18:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3642 ] 
18:19:29: Protected Area Size 0x28000
18:19:29: Bus Width           2
18:19:29: Secure Mode         0
18:19:29: Speed  Class        4
18:19:29: Perf Move           0
18:19:29: Au Size             9
18:19:29: Erase Size          15
18:19:29: Erase Timeout       1
18:19:29: Erase offset        1
18:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3643 ] 
18:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:30: Host Frequency set to 100000 KHz
18:19:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:30: ####CSD Registe 2.0 Values####
18:19:30: CSD_STRUCTURE                                 :0x1
18:19:30: Reserv1                                       :0x0
18:19:30: Time Access 1 TAAC                            :0xe
18:19:30: Time Access 2 NSAC*100                        :0x0
18:19:30: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:30: Card Command Classess CCC                     :0x5b5
18:19:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:30: DSR(driver stage register)  DSR_IMP           :0x0
18:19:30: Reserv2                                       :0x0
18:19:30: Device Size C_SIZE                            :0xedc8
18:19:30: Reserv3                                       :0x0
18:19:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:30: Reserv4                                       :0x0
18:19:30: Write Speed Factor R2W_FACTOR                 :0x2
18:19:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:30: FILE_FORMAT_GRP                               :0x0
18:19:30: COPY flag                                     :0x1
18:19:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:30: File_Format                                   :0x0
18:19:30: CRC                                           :0x0
18:19:30: ####CSD Registe Values####  

18:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE40>, <py_sfcl.CommandDataDefinition object at 0x05E37DB0>) , Command count = 3644 ] 
18:19:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E37870>) , Command count = 3645 ] 
18:19:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:30: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:30: [GetSCRRegisterEntry] Passed
18:19:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:30: Data_Status_After Erases          : 0
18:19:30: CPRM Security Support             : No Security
18:19:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:30: Spec. Version                     : Version 3.0X
18:19:30: Extended Security Support         : Extended_Security_Not_Supported
18:19:30: Command Support                   : COMMAND_SUPPORT
18:19:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:30: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:19:30: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:19:30: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:19:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:30: [GetSCRRegisterEntry] Passed
18:19:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:30: Data_Status_After Erases          : 0
18:19:30: CPRM Security Support             : No Security
18:19:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:30: Spec. Version                     : Version 3.0X
18:19:30: Extended Security Support         : Extended_Security_Not_Supported
18:19:30: Command Support                   : COMMAND_SUPPORT
18:19:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:30: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:19:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:30: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3646 ] 
18:19:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:19:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:30: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:32: Host Frequency set to 25000 KHz
18:19:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:32: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A180>, 0x0, True) , Command count = 3647 ] 
18:19:32: [GO18_globalSetVolt]### Host voltage value is set.
18:19:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55F90>, 0x0, False) , Command count = 3648 ] 
18:19:32: [GO18_globalSetVolt]### Host voltage value is set.
18:19:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3649 ] 
18:19:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3650 ] 
18:19:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3651 ] 
18:19:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 3652 ] 
18:19:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 3653 ] 
18:19:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3654 ] 
18:19:32: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:32: Host Frequency set to 25000 KHz
18:19:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:32: ####CSD Registe 2.0 Values####
18:19:32: CSD_STRUCTURE                                 :0x1
18:19:32: Reserv1                                       :0x0
18:19:32: Time Access 1 TAAC                            :0xe
18:19:32: Time Access 2 NSAC*100                        :0x0
18:19:32: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:32: Card Command Classess CCC                     :0x5b5
18:19:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:32: DSR(driver stage register)  DSR_IMP           :0x0
18:19:32: Reserv2                                       :0x0
18:19:32: Device Size C_SIZE                            :0xedc8
18:19:32: Reserv3                                       :0x0
18:19:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:32: Reserv4                                       :0x0
18:19:32: Write Speed Factor R2W_FACTOR                 :0x2
18:19:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:32: FILE_FORMAT_GRP                               :0x0
18:19:32: COPY flag                                     :0x1
18:19:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:32: File_Format                                   :0x0
18:19:32: CRC                                           :0x0
18:19:32: ####CSD Registe Values####  

18:19:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:32: [GetSCRRegisterEntry] Passed
18:19:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:32: Data_Status_After Erases          : 0
18:19:32: CPRM Security Support             : No Security
18:19:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:32: Spec. Version                     : Version 3.0X
18:19:32: Extended Security Support         : Extended_Security_Not_Supported
18:19:32: Command Support                   : COMMAND_SUPPORT
18:19:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E55120>) , Command count = 3655 ] 
18:19:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DB0>, <py_sfcl.CommandDataDefinition object at 0x05E55C90>) , Command count = 3656 ] 
18:19:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:32: [ SetBusWidth(0x4) , Command count = 3657 ] 
18:19:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3658 ] 
18:19:32: Protected Area Size 0x28000
18:19:32: Bus Width           2
18:19:32: Secure Mode         0
18:19:32: Speed  Class        4
18:19:32: Perf Move           0
18:19:32: Au Size             9
18:19:32: Erase Size          15
18:19:32: Erase Timeout       1
18:19:32: Erase offset        1
18:19:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3659 ] 
18:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:32: Host Frequency set to 100000 KHz
18:19:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:32: ####CSD Registe 2.0 Values####
18:19:32: CSD_STRUCTURE                                 :0x1
18:19:33: Reserv1                                       :0x0
18:19:33: Time Access 1 TAAC                            :0xe
18:19:33: Time Access 2 NSAC*100                        :0x0
18:19:33: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:33: Card Command Classess CCC                     :0x5b5
18:19:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:33: DSR(driver stage register)  DSR_IMP           :0x0
18:19:33: Reserv2                                       :0x0
18:19:33: Device Size C_SIZE                            :0xedc8
18:19:33: Reserv3                                       :0x0
18:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:33: Reserv4                                       :0x0
18:19:33: Write Speed Factor R2W_FACTOR                 :0x2
18:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:33: FILE_FORMAT_GRP                               :0x0
18:19:33: COPY flag                                     :0x1
18:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:33: File_Format                                   :0x0
18:19:33: CRC                                           :0x0
18:19:33: ####CSD Registe Values####  

18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 3660 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D660>, <py_sfcl.CommandDataDefinition object at 0x05E37930>) , Command count = 3661 ] 
18:19:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C30>, <py_sfcl.CommandDataDefinition object at 0x05E50600>) , Command count = 3662 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37930>, <py_sfcl.CommandDataDefinition object at 0x05E37E40>) , Command count = 3663 ] 
18:19:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E37A50>) , Command count = 3664 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D540>, <py_sfcl.CommandDataDefinition object at 0x05E37690>) , Command count = 3665 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE70>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 3666 ] 
18:19:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 3667 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E373F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E690>) , Command count = 3668 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37720>, <py_sfcl.CommandDataDefinition object at 0x05E3E4B0>) , Command count = 3669 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E3EF90>) , Command count = 3670 ] 
18:19:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 3671 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44630>, <py_sfcl.CommandDataDefinition object at 0x05E50ED0>) , Command count = 3672 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E7E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E330>) , Command count = 3673 ] 
18:19:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DB70>, <py_sfcl.CommandDataDefinition object at 0x05E3E3C0>) , Command count = 3674 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55ED0>, <py_sfcl.CommandDataDefinition object at 0x05E2DE10>) , Command count = 3675 ] 
18:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:33: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:19:33: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:19:33: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:33: [GetSCRRegisterEntry] Passed
18:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:33: Data_Status_After Erases          : 0
18:19:33: CPRM Security Support             : No Security
18:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:33: Spec. Version                     : Version 3.0X
18:19:33: Extended Security Support         : Extended_Security_Not_Supported
18:19:33: Command Support                   : COMMAND_SUPPORT
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:33: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:33: [GetSCRRegisterEntry] Passed
18:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:33: Data_Status_After Erases          : 0
18:19:33: CPRM Security Support             : No Security
18:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:33: Spec. Version                     : Version 3.0X
18:19:33: Extended Security Support         : Extended_Security_Not_Supported
18:19:33: Command Support                   : COMMAND_SUPPORT
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:33: [GetSCRRegisterEntry] Passed
18:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:33: Data_Status_After Erases          : 0
18:19:33: CPRM Security Support             : No Security
18:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:33: Spec. Version                     : Version 3.0X
18:19:33: Extended Security Support         : Extended_Security_Not_Supported
18:19:33: Command Support                   : COMMAND_SUPPORT
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:33: [GetSCRRegisterEntry] Passed
18:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:33: Data_Status_After Erases          : 0
18:19:33: CPRM Security Support             : No Security
18:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:33: Spec. Version                     : Version 3.0X
18:19:33: Extended Security Support         : Extended_Security_Not_Supported
18:19:33: Command Support                   : COMMAND_SUPPORT
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:33: [GetSCRRegisterEntry] Passed
18:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:33: Data_Status_After Erases          : 0
18:19:33: CPRM Security Support             : No Security
18:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:33: Spec. Version                     : Version 3.0X
18:19:33: Extended Security Support         : Extended_Security_Not_Supported
18:19:33: Command Support                   : COMMAND_SUPPORT
18:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:33: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:19:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:19:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:19:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:19:33: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:33: Perform Power Off and On.
18:19:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3676 ] 
18:19:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C90>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 3677 ] 
18:19:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E3EC90>) , Command count = 3678 ] 
18:19:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3679 ] 
18:19:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:36: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:38: Host Frequency set to 25000 KHz
18:19:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:38: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37EA0>, 0x0, True) , Command count = 3680 ] 
18:19:38: [GO18_globalSetVolt]### Host voltage value is set.
18:19:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44A50>, 0x0, False) , Command count = 3681 ] 
18:19:38: [GO18_globalSetVolt]### Host voltage value is set.
18:19:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3682 ] 
18:19:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3683 ] 
18:19:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3684 ] 
18:19:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E37300>) , Command count = 3685 ] 
18:19:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C90>, <py_sfcl.CommandDataDefinition object at 0x05E37CC0>) , Command count = 3686 ] 
18:19:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3687 ] 
18:19:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:38: Host Frequency set to 25000 KHz
18:19:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:38: ####CSD Registe 2.0 Values####
18:19:38: CSD_STRUCTURE                                 :0x1
18:19:38: Reserv1                                       :0x0
18:19:38: Time Access 1 TAAC                            :0xe
18:19:38: Time Access 2 NSAC*100                        :0x0
18:19:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:38: Card Command Classess CCC                     :0x5b5
18:19:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:38: DSR(driver stage register)  DSR_IMP           :0x0
18:19:38: Reserv2                                       :0x0
18:19:38: Device Size C_SIZE                            :0xedc8
18:19:38: Reserv3                                       :0x0
18:19:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:38: Reserv4                                       :0x0
18:19:38: Write Speed Factor R2W_FACTOR                 :0x2
18:19:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:38: FILE_FORMAT_GRP                               :0x0
18:19:38: COPY flag                                     :0x1
18:19:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:38: File_Format                                   :0x0
18:19:38: CRC                                           :0x0
18:19:38: ####CSD Registe Values####  

18:19:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:38: [GetSCRRegisterEntry] Passed
18:19:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:38: Data_Status_After Erases          : 0
18:19:38: CPRM Security Support             : No Security
18:19:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:38: Spec. Version                     : Version 3.0X
18:19:38: Extended Security Support         : Extended_Security_Not_Supported
18:19:38: Command Support                   : COMMAND_SUPPORT
18:19:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37750>, <py_sfcl.CommandDataDefinition object at 0x05E448D0>) , Command count = 3688 ] 
18:19:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 3689 ] 
18:19:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:38: [ SetBusWidth(0x4) , Command count = 3690 ] 
18:19:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3691 ] 
18:19:38: Protected Area Size 0x28000
18:19:38: Bus Width           2
18:19:38: Secure Mode         0
18:19:38: Speed  Class        4
18:19:38: Perf Move           0
18:19:38: Au Size             9
18:19:38: Erase Size          15
18:19:38: Erase Timeout       1
18:19:38: Erase offset        1
18:19:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3692 ] 
18:19:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:38: Host Frequency set to 100000 KHz
18:19:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:38: ####CSD Registe 2.0 Values####
18:19:38: CSD_STRUCTURE                                 :0x1
18:19:39: Reserv1                                       :0x0
18:19:39: Time Access 1 TAAC                            :0xe
18:19:39: Time Access 2 NSAC*100                        :0x0
18:19:39: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:39: Card Command Classess CCC                     :0x5b5
18:19:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:39: DSR(driver stage register)  DSR_IMP           :0x0
18:19:39: Reserv2                                       :0x0
18:19:39: Device Size C_SIZE                            :0xedc8
18:19:39: Reserv3                                       :0x0
18:19:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:39: Reserv4                                       :0x0
18:19:39: Write Speed Factor R2W_FACTOR                 :0x2
18:19:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:39: FILE_FORMAT_GRP                               :0x0
18:19:39: COPY flag                                     :0x1
18:19:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:39: File_Format                                   :0x0
18:19:39: CRC                                           :0x0
18:19:39: ####CSD Registe Values####  

18:19:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59660>, <py_sfcl.CommandDataDefinition object at 0x05E3ED20>) , Command count = 3693 ] 
18:19:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 3694 ] 
18:19:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:19:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3695 ] 
18:19:39: Protected Area Size 0x28000
18:19:39: Bus Width           2
18:19:39: Secure Mode         0
18:19:39: Speed  Class        4
18:19:39: Perf Move           0
18:19:39: Au Size             9
18:19:39: Erase Size          15
18:19:39: Erase Timeout       1
18:19:39: Erase offset        1
18:19:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:19:39: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:19:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3696 ] 
18:19:39: Protected Area Size 0x28000
18:19:39: Bus Width           2
18:19:39: Secure Mode         0
18:19:39: Speed  Class        4
18:19:39: Perf Move           0
18:19:39: Au Size             9
18:19:39: Erase Size          15
18:19:39: Erase Timeout       1
18:19:39: Erase offset        1
18:19:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:19:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3697 ] 
18:19:40: Protected Area Size 0x28000
18:19:40: Bus Width           2
18:19:40: Secure Mode         0
18:19:40: Speed  Class        4
18:19:40: Perf Move           0
18:19:40: Au Size             9
18:19:40: Erase Size          15
18:19:40: Erase Timeout       1
18:19:40: Erase offset        1
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E598D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3698 ] 
18:19:40: Protected Area Size 0x28000
18:19:40: Bus Width           2
18:19:40: Secure Mode         0
18:19:40: Speed  Class        4
18:19:40: Perf Move           0
18:19:40: Au Size             9
18:19:40: Erase Size          15
18:19:40: Erase Timeout       1
18:19:40: Erase offset        1
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E595A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3699 ] 
18:19:40: Protected Area Size 0x28000
18:19:40: Bus Width           2
18:19:40: Secure Mode         0
18:19:40: Speed  Class        4
18:19:40: Perf Move           0
18:19:40: Au Size             9
18:19:40: Erase Size          15
18:19:40: Erase Timeout       1
18:19:40: Erase offset        1
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3700 ] 
18:19:40: Protected Area Size 0x28000
18:19:40: Bus Width           2
18:19:40: Secure Mode         0
18:19:40: Speed  Class        4
18:19:40: Perf Move           0
18:19:40: Au Size             9
18:19:40: Erase Size          15
18:19:40: Erase Timeout       1
18:19:40: Erase offset        1
18:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:19:40: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:19:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:19:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:19:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 4 
18:19:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:19:40: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:19:40: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:19:40: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:19:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:40: Perform Power Off and On.
18:19:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3701 ] 
18:19:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E44A80>) , Command count = 3702 ] 
18:19:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 3703 ] 
18:19:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3704 ] 
18:19:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:43: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:45: Host Frequency set to 25000 KHz
18:19:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:45: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44570>, 0x0, True) , Command count = 3705 ] 
18:19:45: [GO18_globalSetVolt]### Host voltage value is set.
18:19:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA480>, 0x0, False) , Command count = 3706 ] 
18:19:45: [GO18_globalSetVolt]### Host voltage value is set.
18:19:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3707 ] 
18:19:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3708 ] 
18:19:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3709 ] 
18:19:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37B40>, <py_sfcl.CommandDataDefinition object at 0x05E441B0>) , Command count = 3710 ] 
18:19:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44300>, <py_sfcl.CommandDataDefinition object at 0x05E44BA0>) , Command count = 3711 ] 
18:19:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3712 ] 
18:19:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:45: Host Frequency set to 25000 KHz
18:19:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:45: ####CSD Registe 2.0 Values####
18:19:45: CSD_STRUCTURE                                 :0x1
18:19:45: Reserv1                                       :0x0
18:19:45: Time Access 1 TAAC                            :0xe
18:19:45: Time Access 2 NSAC*100                        :0x0
18:19:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:45: Card Command Classess CCC                     :0x5b5
18:19:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:45: DSR(driver stage register)  DSR_IMP           :0x0
18:19:45: Reserv2                                       :0x0
18:19:45: Device Size C_SIZE                            :0xedc8
18:19:45: Reserv3                                       :0x0
18:19:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:45: Reserv4                                       :0x0
18:19:45: Write Speed Factor R2W_FACTOR                 :0x2
18:19:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:45: FILE_FORMAT_GRP                               :0x0
18:19:45: COPY flag                                     :0x1
18:19:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:45: File_Format                                   :0x0
18:19:45: CRC                                           :0x0
18:19:45: ####CSD Registe Values####  

18:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:45: [GetSCRRegisterEntry] Passed
18:19:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:45: Data_Status_After Erases          : 0
18:19:45: CPRM Security Support             : No Security
18:19:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:45: Spec. Version                     : Version 3.0X
18:19:45: Extended Security Support         : Extended_Security_Not_Supported
18:19:45: Command Support                   : COMMAND_SUPPORT
18:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F630>, <py_sfcl.CommandDataDefinition object at 0x05E44DB0>) , Command count = 3713 ] 
18:19:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 3714 ] 
18:19:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:45: [ SetBusWidth(0x4) , Command count = 3715 ] 
18:19:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3716 ] 
18:19:45: Protected Area Size 0x28000
18:19:45: Bus Width           2
18:19:45: Secure Mode         0
18:19:45: Speed  Class        4
18:19:45: Perf Move           0
18:19:45: Au Size             9
18:19:45: Erase Size          15
18:19:45: Erase Timeout       1
18:19:45: Erase offset        1
18:19:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3717 ] 
18:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:45: Host Frequency set to 100000 KHz
18:19:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:45: ####CSD Registe 2.0 Values####
18:19:45: CSD_STRUCTURE                                 :0x1
18:19:45: Reserv1                                       :0x0
18:19:45: Time Access 1 TAAC                            :0xe
18:19:45: Time Access 2 NSAC*100                        :0x0
18:19:45: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:45: Card Command Classess CCC                     :0x5b5
18:19:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:45: DSR(driver stage register)  DSR_IMP           :0x0
18:19:45: Reserv2                                       :0x0
18:19:45: Device Size C_SIZE                            :0xedc8
18:19:45: Reserv3                                       :0x0
18:19:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:46: Reserv4                                       :0x0
18:19:46: Write Speed Factor R2W_FACTOR                 :0x2
18:19:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:46: FILE_FORMAT_GRP                               :0x0
18:19:46: COPY flag                                     :0x1
18:19:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:46: File_Format                                   :0x0
18:19:46: CRC                                           :0x0
18:19:46: ####CSD Registe Values####  

18:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F990>, <py_sfcl.CommandDataDefinition object at 0x05E44E10>) , Command count = 3718 ] 
18:19:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59690>, <py_sfcl.CommandDataDefinition object at 0x05E59390>) , Command count = 3719 ] 
18:19:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:46: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:46: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:46: [GetSCRRegisterEntry] Passed
18:19:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:46: Data_Status_After Erases          : 0
18:19:46: CPRM Security Support             : No Security
18:19:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:46: Spec. Version                     : Version 3.0X
18:19:46: Extended Security Support         : Extended_Security_Not_Supported
18:19:46: Command Support                   : COMMAND_SUPPORT
18:19:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:46: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:19:46: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:19:46: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:19:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:46: [GetSCRRegisterEntry] Passed
18:19:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:46: Data_Status_After Erases          : 0
18:19:46: CPRM Security Support             : No Security
18:19:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:46: Spec. Version                     : Version 3.0X
18:19:46: Extended Security Support         : Extended_Security_Not_Supported
18:19:46: Command Support                   : COMMAND_SUPPORT
18:19:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:46: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:46: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3720 ] 
18:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:47: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:49: Host Frequency set to 25000 KHz
18:19:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:49: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E446C0>, 0x0, True) , Command count = 3721 ] 
18:19:49: [GO18_globalSetVolt]### Host voltage value is set.
18:19:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44BD0>, 0x0, False) , Command count = 3722 ] 
18:19:49: [GO18_globalSetVolt]### Host voltage value is set.
18:19:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3723 ] 
18:19:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3724 ] 
18:19:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3725 ] 
18:19:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CF0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 3726 ] 
18:19:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA420>, <py_sfcl.CommandDataDefinition object at 0x05E44C00>) , Command count = 3727 ] 
18:19:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:49: [ SetCardRCA(0x1, 0xD555) , Command count = 3728 ] 
18:19:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:49: Host Frequency set to 25000 KHz
18:19:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:49: ####CSD Registe 2.0 Values####
18:19:49: CSD_STRUCTURE                                 :0x1
18:19:49: Reserv1                                       :0x0
18:19:49: Time Access 1 TAAC                            :0xe
18:19:49: Time Access 2 NSAC*100                        :0x0
18:19:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:49: Card Command Classess CCC                     :0x5b5
18:19:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:49: DSR(driver stage register)  DSR_IMP           :0x0
18:19:49: Reserv2                                       :0x0
18:19:49: Device Size C_SIZE                            :0xedc8
18:19:49: Reserv3                                       :0x0
18:19:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:49: Reserv4                                       :0x0
18:19:49: Write Speed Factor R2W_FACTOR                 :0x2
18:19:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:49: FILE_FORMAT_GRP                               :0x0
18:19:49: COPY flag                                     :0x1
18:19:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:49: File_Format                                   :0x0
18:19:49: CRC                                           :0x0
18:19:49: ####CSD Registe Values####  

18:19:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:49: [GetSCRRegisterEntry] Passed
18:19:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:49: Data_Status_After Erases          : 0
18:19:49: CPRM Security Support             : No Security
18:19:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:49: Spec. Version                     : Version 3.0X
18:19:49: Extended Security Support         : Extended_Security_Not_Supported
18:19:49: Command Support                   : COMMAND_SUPPORT
18:19:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44270>) , Command count = 3729 ] 
18:19:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F750>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 3730 ] 
18:19:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:49: [ SetBusWidth(0x4) , Command count = 3731 ] 
18:19:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3732 ] 
18:19:49: Protected Area Size 0x28000
18:19:49: Bus Width           2
18:19:49: Secure Mode         0
18:19:49: Speed  Class        4
18:19:49: Perf Move           0
18:19:49: Au Size             9
18:19:49: Erase Size          15
18:19:49: Erase Timeout       1
18:19:49: Erase offset        1
18:19:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3733 ] 
18:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:49: Host Frequency set to 100000 KHz
18:19:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:49: ####CSD Registe 2.0 Values####
18:19:49: CSD_STRUCTURE                                 :0x1
18:19:50: Reserv1                                       :0x0
18:19:50: Time Access 1 TAAC                            :0xe
18:19:50: Time Access 2 NSAC*100                        :0x0
18:19:50: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:50: Card Command Classess CCC                     :0x5b5
18:19:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:50: DSR(driver stage register)  DSR_IMP           :0x0
18:19:50: Reserv2                                       :0x0
18:19:50: Device Size C_SIZE                            :0xedc8
18:19:50: Reserv3                                       :0x0
18:19:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:50: Reserv4                                       :0x0
18:19:50: Write Speed Factor R2W_FACTOR                 :0x2
18:19:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:50: FILE_FORMAT_GRP                               :0x0
18:19:50: COPY flag                                     :0x1
18:19:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:50: File_Format                                   :0x0
18:19:50: CRC                                           :0x0
18:19:50: ####CSD Registe Values####  

18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 3734 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D5D0>, <py_sfcl.CommandDataDefinition object at 0x05E37BA0>) , Command count = 3735 ] 
18:19:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E50E70>) , Command count = 3736 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E4F7E0>) , Command count = 3737 ] 
18:19:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E444E0>, <py_sfcl.CommandDataDefinition object at 0x05E4F1B0>) , Command count = 3738 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44030>, <py_sfcl.CommandDataDefinition object at 0x05E50480>) , Command count = 3739 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F4E0>) , Command count = 3740 ] 
18:19:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F270>, <py_sfcl.CommandDataDefinition object at 0x05E59E40>) , Command count = 3741 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F870>, <py_sfcl.CommandDataDefinition object at 0x05E59570>) , Command count = 3742 ] 
18:19:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44720>, <py_sfcl.CommandDataDefinition object at 0x05E4F210>) , Command count = 3743 ] 
18:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC90>, <py_sfcl.CommandDataDefinition object at 0x05E4FED0>) , Command count = 3744 ] 
18:19:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F900>, <py_sfcl.CommandDataDefinition object at 0x05E59DE0>) , Command count = 3745 ] 
18:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44750>, <py_sfcl.CommandDataDefinition object at 0x05E50630>) , Command count = 3746 ] 
18:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FEA0>, <py_sfcl.CommandDataDefinition object at 0x05E37630>) , Command count = 3747 ] 
18:19:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44780>, <py_sfcl.CommandDataDefinition object at 0x05E59390>) , Command count = 3748 ] 
18:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E59870>) , Command count = 3749 ] 
18:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:51: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:19:51: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:19:51: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:51: [GetSCRRegisterEntry] Passed
18:19:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:51: Data_Status_After Erases          : 0
18:19:51: CPRM Security Support             : No Security
18:19:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:51: Spec. Version                     : Version 3.0X
18:19:51: Extended Security Support         : Extended_Security_Not_Supported
18:19:51: Command Support                   : COMMAND_SUPPORT
18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:51: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:51: [GetSCRRegisterEntry] Passed
18:19:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:51: Data_Status_After Erases          : 0
18:19:51: CPRM Security Support             : No Security
18:19:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:51: Spec. Version                     : Version 3.0X
18:19:51: Extended Security Support         : Extended_Security_Not_Supported
18:19:51: Command Support                   : COMMAND_SUPPORT
18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:51: [GetSCRRegisterEntry] Passed
18:19:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:51: Data_Status_After Erases          : 0
18:19:51: CPRM Security Support             : No Security
18:19:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:51: Spec. Version                     : Version 3.0X
18:19:51: Extended Security Support         : Extended_Security_Not_Supported
18:19:51: Command Support                   : COMMAND_SUPPORT
18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:51: [GetSCRRegisterEntry] Passed
18:19:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:51: Data_Status_After Erases          : 0
18:19:51: CPRM Security Support             : No Security
18:19:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:51: Spec. Version                     : Version 3.0X
18:19:51: Extended Security Support         : Extended_Security_Not_Supported
18:19:52: Command Support                   : COMMAND_SUPPORT
18:19:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:52: [GetSCRRegisterEntry] Passed
18:19:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:52: Data_Status_After Erases          : 0
18:19:52: CPRM Security Support             : No Security
18:19:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:52: Spec. Version                     : Version 3.0X
18:19:52: Extended Security Support         : Extended_Security_Not_Supported
18:19:52: Command Support                   : COMMAND_SUPPORT
18:19:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:19:52: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:19:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:19:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:19:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:19:52: Perform Power Off and On.
18:19:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3750 ] 
18:19:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E593C0>, <py_sfcl.CommandDataDefinition object at 0x05E59D20>) , Command count = 3751 ] 
18:19:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50450>, <py_sfcl.CommandDataDefinition object at 0x05E44DE0>) , Command count = 3752 ] 
18:19:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3753 ] 
18:19:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:54: [GO4_globalInitCard]### Switch to Specify Card Type
18:19:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:56: Host Frequency set to 25000 KHz
18:19:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:56: [GO18_globalSetVolt]### Set Host Voltage value.
18:19:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:19:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50420>, 0x0, True) , Command count = 3754 ] 
18:19:56: [GO18_globalSetVolt]### Host voltage value is set.
18:19:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:19:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50990>, 0x0, False) , Command count = 3755 ] 
18:19:56: [GO18_globalSetVolt]### Host voltage value is set.
18:19:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3756 ] 
18:19:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3757 ] 
18:19:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:19:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3758 ] 
18:19:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:19:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB270>, <py_sfcl.CommandDataDefinition object at 0x052BB300>) , Command count = 3759 ] 
18:19:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44930>, <py_sfcl.CommandDataDefinition object at 0x05E508A0>) , Command count = 3760 ] 
18:19:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:19:56: [ SetCardRCA(0x1, 0xD555) , Command count = 3761 ] 
18:19:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:19:57: Host Frequency set to 25000 KHz
18:19:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:19:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:57: ####CSD Registe 2.0 Values####
18:19:57: CSD_STRUCTURE                                 :0x1
18:19:57: Reserv1                                       :0x0
18:19:57: Time Access 1 TAAC                            :0xe
18:19:57: Time Access 2 NSAC*100                        :0x0
18:19:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:57: Card Command Classess CCC                     :0x5b5
18:19:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:57: DSR(driver stage register)  DSR_IMP           :0x0
18:19:57: Reserv2                                       :0x0
18:19:57: Device Size C_SIZE                            :0xedc8
18:19:57: Reserv3                                       :0x0
18:19:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:57: Reserv4                                       :0x0
18:19:57: Write Speed Factor R2W_FACTOR                 :0x2
18:19:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:57: FILE_FORMAT_GRP                               :0x0
18:19:57: COPY flag                                     :0x1
18:19:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:57: File_Format                                   :0x0
18:19:57: CRC                                           :0x0
18:19:57: ####CSD Registe Values####  

18:19:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:57: [GetSCRRegisterEntry] Passed
18:19:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:57: Data_Status_After Erases          : 0
18:19:57: CPRM Security Support             : No Security
18:19:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:57: Spec. Version                     : Version 3.0X
18:19:57: Extended Security Support         : Extended_Security_Not_Supported
18:19:57: Command Support                   : COMMAND_SUPPORT
18:19:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E375A0>) , Command count = 3762 ] 
18:19:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E50030>) , Command count = 3763 ] 
18:19:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:19:57: [ SetBusWidth(0x4) , Command count = 3764 ] 
18:19:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0519DFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3765 ] 
18:19:57: Protected Area Size 0x28000
18:19:57: Bus Width           2
18:19:57: Secure Mode         0
18:19:57: Speed  Class        4
18:19:57: Perf Move           0
18:19:57: Au Size             9
18:19:57: Erase Size          15
18:19:57: Erase Timeout       1
18:19:57: Erase offset        1
18:19:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:19:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3766 ] 
18:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:19:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:19:57: Host Frequency set to 100000 KHz
18:19:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:19:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:57: ####CSD Registe 2.0 Values####
18:19:57: CSD_STRUCTURE                                 :0x1
18:19:57: Reserv1                                       :0x0
18:19:57: Time Access 1 TAAC                            :0xe
18:19:57: Time Access 2 NSAC*100                        :0x0
18:19:57: Data Transfer Rate TRAN_SPEED                 :0xb
18:19:57: Card Command Classess CCC                     :0x5b5
18:19:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:57: DSR(driver stage register)  DSR_IMP           :0x0
18:19:57: Reserv2                                       :0x0
18:19:57: Device Size C_SIZE                            :0xedc8
18:19:57: Reserv3                                       :0x0
18:19:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:57: Reserv4                                       :0x0
18:19:57: Write Speed Factor R2W_FACTOR                 :0x2
18:19:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:57: FILE_FORMAT_GRP                               :0x0
18:19:57: COPY flag                                     :0x1
18:19:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:57: File_Format                                   :0x0
18:19:57: CRC                                           :0x0
18:19:57: ####CSD Registe Values####  

18:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py_sfcl.CommandDataDefinition object at 0x05E50300>) , Command count = 3767 ] 
18:19:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 3768 ] 
18:19:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:19:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:19:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:19:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:19:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:19:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3769 ] 
18:19:57: Protected Area Size 0x28000
18:19:57: Bus Width           2
18:19:57: Secure Mode         0
18:19:57: Speed  Class        4
18:19:57: Perf Move           0
18:19:57: Au Size             9
18:19:57: Erase Size          15
18:19:57: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:19:58: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3770 ] 
18:19:58: Protected Area Size 0x28000
18:19:58: Bus Width           2
18:19:58: Secure Mode         0
18:19:58: Speed  Class        4
18:19:58: Perf Move           0
18:19:58: Au Size             9
18:19:58: Erase Size          15
18:19:58: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E507B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3771 ] 
18:19:58: Protected Area Size 0x28000
18:19:58: Bus Width           2
18:19:58: Secure Mode         0
18:19:58: Speed  Class        4
18:19:58: Perf Move           0
18:19:58: Au Size             9
18:19:58: Erase Size          15
18:19:58: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3772 ] 
18:19:58: Protected Area Size 0x28000
18:19:58: Bus Width           2
18:19:58: Secure Mode         0
18:19:58: Speed  Class        4
18:19:58: Perf Move           0
18:19:58: Au Size             9
18:19:58: Erase Size          15
18:19:58: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3773 ] 
18:19:58: Protected Area Size 0x28000
18:19:58: Bus Width           2
18:19:58: Secure Mode         0
18:19:58: Speed  Class        4
18:19:58: Perf Move           0
18:19:58: Au Size             9
18:19:58: Erase Size          15
18:19:58: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3774 ] 
18:19:58: Protected Area Size 0x28000
18:19:58: Bus Width           2
18:19:58: Secure Mode         0
18:19:58: Speed  Class        4
18:19:58: Perf Move           0
18:19:58: Au Size             9
18:19:58: Erase Size          15
18:19:58: Erase Timeout       1
18:19:58: Erase offset        1
18:19:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:19:58: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:19:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50720>, <py_sfcl.CommandDataDefinition object at 0x05E55180>) , Command count = 3775 ] 
18:19:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E596F0>, <py_sfcl.CommandDataDefinition object at 0x05E44AB0>) , Command count = 3776 ] 
18:19:59: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 3777 ] 
18:19:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E595D0>, <py_sfcl.CommandDataDefinition object at 0x05E59030>) , Command count = 3778 ] 
18:19:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:19:59: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:19:59: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:19:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:19:59: [GetSCRRegisterEntry] Passed
18:19:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:19:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:19:59: Data_Status_After Erases          : 0
18:19:59: CPRM Security Support             : No Security
18:19:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:19:59: Spec. Version                     : Version 3.0X
18:19:59: Extended Security Support         : Extended_Security_Not_Supported
18:19:59: Command Support                   : COMMAND_SUPPORT
18:19:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:19:59: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:19:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:19:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3779 ] 
18:19:59: Protected Area Size 0x28000
18:19:59: Bus Width           2
18:19:59: Secure Mode         0
18:19:59: Speed  Class        4
18:19:59: Perf Move           0
18:19:59: Au Size             9
18:19:59: Erase Size          15
18:19:59: Erase Timeout       1
18:19:59: Erase offset        1
18:19:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:19:59: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:20:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3780 ] 
18:20:01: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:20:01: [DVTCommonLib]### VOLA from card : 0x1
18:20:01: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:20:01: [DVTCommonLib]### Reserved bits from card : 0x0
18:20:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59720>, <py_sfcl.CommandDataDefinition object at 0x05E59DB0>) , Command count = 3781 ] 
18:20:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50EA0>, <py_sfcl.CommandDataDefinition object at 0x05E50240>) , Command count = 3782 ] 
18:20:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:01: [ SetCardRCA(0x1, 0xD555) , Command count = 3783 ] 
18:20:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:01: [ SelectCard(0x1, True) , Command count = 3784 ] 
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E378A0>, <py_sfcl.CommandDataDefinition object at 0x05E373C0>) , Command count = 3785 ] 
18:20:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:20:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:01: [GetSCRRegisterEntry] Failed
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:20:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E509F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3786 ] 
18:20:01: [ GetCardStatus() , Command count = 3787 ] 
18:20:01: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:20:01: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:20:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50CF0>, <py_sfcl.CommandDataDefinition object at 0x05E507E0>) , Command count = 3788 ] 
18:20:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50A80>, <py_sfcl.CommandDataDefinition object at 0x05E55450>) , Command count = 3789 ] 
18:20:01: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F330>, <py_sfcl.CommandDataDefinition object at 0x05E50BD0>) , Command count = 3790 ] 
18:20:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D50>, <py_sfcl.CommandDataDefinition object at 0x05E50A20>) , Command count = 3791 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:02: [GetSCRRegisterEntry] Passed
18:20:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:02: Data_Status_After Erases          : 0
18:20:02: CPRM Security Support             : No Security
18:20:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:02: Spec. Version                     : Version 3.0X
18:20:02: Extended Security Support         : Extended_Security_Not_Supported
18:20:02: Command Support                   : COMMAND_SUPPORT
18:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3792 ] 
18:20:02: Protected Area Size 0x28000
18:20:02: Bus Width           0
18:20:02: Secure Mode         0
18:20:02: Speed  Class        4
18:20:02: Perf Move           0
18:20:02: Au Size             9
18:20:02: Erase Size          15
18:20:02: Erase Timeout       1
18:20:02: Erase offset        1
18:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37990>, <py_sfcl.CommandDataDefinition object at 0x05E4F720>) , Command count = 3793 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D20>, <py_sfcl.CommandDataDefinition object at 0x05E44510>) , Command count = 3794 ] 
18:20:02: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F90>, <py_sfcl.CommandDataDefinition object at 0x05E503C0>) , Command count = 3795 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F180>) , Command count = 3796 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:02: [GetSCRRegisterEntry] Failed
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3797 ] 
18:20:02: [ GetCardStatus() , Command count = 3798 ] 
18:20:02: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:20:02: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37570>, <py_sfcl.CommandDataDefinition object at 0x05278180>) , Command count = 3799 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB10>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 3800 ] 
18:20:02: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59750>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 3801 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FD50>, <py_sfcl.CommandDataDefinition object at 0x05E59360>) , Command count = 3802 ] 
18:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:02: [GetSCRRegisterEntry] Passed
18:20:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:02: Data_Status_After Erases          : 0
18:20:02: CPRM Security Support             : No Security
18:20:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:02: Spec. Version                     : Version 3.0X
18:20:02: Extended Security Support         : Extended_Security_Not_Supported
18:20:02: Command Support                   : COMMAND_SUPPORT
18:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3803 ] 
18:20:02: Protected Area Size 0x28000
18:20:02: Bus Width           0
18:20:02: Secure Mode         0
18:20:02: Speed  Class        4
18:20:02: Perf Move           0
18:20:02: Au Size             9
18:20:02: Erase Size          15
18:20:02: Erase Timeout       1
18:20:02: Erase offset        1
18:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:02: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:20:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3804 ] 
18:20:04: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:20:04: [DVTCommonLib]### VOLA from card : 0x1
18:20:04: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:20:04: [DVTCommonLib]### Reserved bits from card : 0x0
18:20:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 3805 ] 
18:20:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05E761B0>) , Command count = 3806 ] 
18:20:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3807 ] 
18:20:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:04: [ SelectCard(0x1, True) , Command count = 3808 ] 
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:20:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:04: [GetSCRRegisterEntry] Failed
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:20:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3809 ] 
18:20:04: [ GetCardStatus() , Command count = 3810 ] 
18:20:04: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:20:04: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F300>, <py_sfcl.CommandDataDefinition object at 0x05E4FA20>) , Command count = 3811 ] 
18:20:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55780>, <py_sfcl.CommandDataDefinition object at 0x052CDDE0>) , Command count = 3812 ] 
18:20:04: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 3813 ] 
18:20:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59300>, <py_sfcl.CommandDataDefinition object at 0x05E3EF00>) , Command count = 3814 ] 
18:20:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:04: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:20:04: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:20:04: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:20:04: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:04: Perform Power Off and On.
18:20:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3815 ] 
18:20:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 3816 ] 
18:20:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55720>, <py_sfcl.CommandDataDefinition object at 0x05E551E0>) , Command count = 3817 ] 
18:20:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3818 ] 
18:20:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:06: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:08: Host Frequency set to 25000 KHz
18:20:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:08: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E55660>, 0x0, True) , Command count = 3819 ] 
18:20:08: [GO18_globalSetVolt]### Host voltage value is set.
18:20:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05192180>, 0x0, False) , Command count = 3820 ] 
18:20:08: [GO18_globalSetVolt]### Host voltage value is set.
18:20:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3821 ] 
18:20:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3822 ] 
18:20:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3823 ] 
18:20:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55630>, <py_sfcl.CommandDataDefinition object at 0x05E4FFC0>) , Command count = 3824 ] 
18:20:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF60>) , Command count = 3825 ] 
18:20:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3826 ] 
18:20:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:09: Host Frequency set to 25000 KHz
18:20:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:09: ####CSD Registe 2.0 Values####
18:20:09: CSD_STRUCTURE                                 :0x1
18:20:09: Reserv1                                       :0x0
18:20:09: Time Access 1 TAAC                            :0xe
18:20:09: Time Access 2 NSAC*100                        :0x0
18:20:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:09: Card Command Classess CCC                     :0x5b5
18:20:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:09: DSR(driver stage register)  DSR_IMP           :0x0
18:20:09: Reserv2                                       :0x0
18:20:09: Device Size C_SIZE                            :0xedc8
18:20:09: Reserv3                                       :0x0
18:20:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:09: Reserv4                                       :0x0
18:20:09: Write Speed Factor R2W_FACTOR                 :0x2
18:20:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:09: FILE_FORMAT_GRP                               :0x0
18:20:09: COPY flag                                     :0x1
18:20:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:09: File_Format                                   :0x0
18:20:09: CRC                                           :0x0
18:20:09: ####CSD Registe Values####  

18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:09: [GetSCRRegisterEntry] Passed
18:20:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:09: Data_Status_After Erases          : 0
18:20:09: CPRM Security Support             : No Security
18:20:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:09: Spec. Version                     : Version 3.0X
18:20:09: Extended Security Support         : Extended_Security_Not_Supported
18:20:09: Command Support                   : COMMAND_SUPPORT
18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 3827 ] 
18:20:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 3828 ] 
18:20:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:09: [ SetBusWidth(0x4) , Command count = 3829 ] 
18:20:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3830 ] 
18:20:09: Protected Area Size 0x28000
18:20:09: Bus Width           2
18:20:09: Secure Mode         0
18:20:09: Speed  Class        4
18:20:09: Perf Move           0
18:20:09: Au Size             9
18:20:09: Erase Size          15
18:20:09: Erase Timeout       1
18:20:09: Erase offset        1
18:20:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3831 ] 
18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:09: Host Frequency set to 100000 KHz
18:20:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:09: ####CSD Registe 2.0 Values####
18:20:09: CSD_STRUCTURE                                 :0x1
18:20:09: Reserv1                                       :0x0
18:20:09: Time Access 1 TAAC                            :0xe
18:20:09: Time Access 2 NSAC*100                        :0x0
18:20:09: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:09: Card Command Classess CCC                     :0x5b5
18:20:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:09: DSR(driver stage register)  DSR_IMP           :0x0
18:20:09: Reserv2                                       :0x0
18:20:09: Device Size C_SIZE                            :0xedc8
18:20:09: Reserv3                                       :0x0
18:20:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:09: Reserv4                                       :0x0
18:20:09: Write Speed Factor R2W_FACTOR                 :0x2
18:20:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:09: FILE_FORMAT_GRP                               :0x0
18:20:09: COPY flag                                     :0x1
18:20:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:09: File_Format                                   :0x0
18:20:09: CRC                                           :0x0
18:20:09: ####CSD Registe Values####  

18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E55510>) , Command count = 3832 ] 
18:20:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E55BD0>) , Command count = 3833 ] 
18:20:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:09: [GetSCRRegisterEntry] Passed
18:20:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:09: Data_Status_After Erases          : 0
18:20:09: CPRM Security Support             : No Security
18:20:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:09: Spec. Version                     : Version 3.0X
18:20:09: Extended Security Support         : Extended_Security_Not_Supported
18:20:09: Command Support                   : COMMAND_SUPPORT
18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:09: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:20:09: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:20:09: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:09: [GetSCRRegisterEntry] Passed
18:20:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:09: Data_Status_After Erases          : 0
18:20:09: CPRM Security Support             : No Security
18:20:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:09: Spec. Version                     : Version 3.0X
18:20:09: Extended Security Support         : Extended_Security_Not_Supported
18:20:09: Command Support                   : COMMAND_SUPPORT
18:20:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:09: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:09: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3834 ] 
18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:20:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:09: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:11: Host Frequency set to 25000 KHz
18:20:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:11: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2AC60>, 0x0, True) , Command count = 3835 ] 
18:20:11: [GO18_globalSetVolt]### Host voltage value is set.
18:20:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59A50>, 0x0, False) , Command count = 3836 ] 
18:20:11: [GO18_globalSetVolt]### Host voltage value is set.
18:20:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3837 ] 
18:20:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3838 ] 
18:20:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3839 ] 
18:20:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 3840 ] 
18:20:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2A1B0>) , Command count = 3841 ] 
18:20:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3842 ] 
18:20:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:12: Host Frequency set to 25000 KHz
18:20:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:12: ####CSD Registe 2.0 Values####
18:20:12: CSD_STRUCTURE                                 :0x1
18:20:12: Reserv1                                       :0x0
18:20:12: Time Access 1 TAAC                            :0xe
18:20:12: Time Access 2 NSAC*100                        :0x0
18:20:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:12: Card Command Classess CCC                     :0x5b5
18:20:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:12: DSR(driver stage register)  DSR_IMP           :0x0
18:20:12: Reserv2                                       :0x0
18:20:12: Device Size C_SIZE                            :0xedc8
18:20:12: Reserv3                                       :0x0
18:20:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:12: Reserv4                                       :0x0
18:20:12: Write Speed Factor R2W_FACTOR                 :0x2
18:20:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:12: FILE_FORMAT_GRP                               :0x0
18:20:12: COPY flag                                     :0x1
18:20:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:12: File_Format                                   :0x0
18:20:12: CRC                                           :0x0
18:20:12: ####CSD Registe Values####  

18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502A0>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 3843 ] 
18:20:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05E59330>) , Command count = 3844 ] 
18:20:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:12: [ SetBusWidth(0x4) , Command count = 3845 ] 
18:20:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3846 ] 
18:20:12: Protected Area Size 0x28000
18:20:12: Bus Width           2
18:20:12: Secure Mode         0
18:20:12: Speed  Class        4
18:20:12: Perf Move           0
18:20:12: Au Size             9
18:20:12: Erase Size          15
18:20:12: Erase Timeout       1
18:20:12: Erase offset        1
18:20:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3847 ] 
18:20:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:12: Host Frequency set to 100000 KHz
18:20:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:12: ####CSD Registe 2.0 Values####
18:20:12: CSD_STRUCTURE                                 :0x1
18:20:12: Reserv1                                       :0x0
18:20:12: Time Access 1 TAAC                            :0xe
18:20:12: Time Access 2 NSAC*100                        :0x0
18:20:12: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:12: Card Command Classess CCC                     :0x5b5
18:20:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:12: DSR(driver stage register)  DSR_IMP           :0x0
18:20:12: Reserv2                                       :0x0
18:20:12: Device Size C_SIZE                            :0xedc8
18:20:12: Reserv3                                       :0x0
18:20:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:12: Reserv4                                       :0x0
18:20:12: Write Speed Factor R2W_FACTOR                 :0x2
18:20:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:12: FILE_FORMAT_GRP                               :0x0
18:20:12: COPY flag                                     :0x1
18:20:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:12: File_Format                                   :0x0
18:20:12: CRC                                           :0x0
18:20:12: ####CSD Registe Values####  

18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59E70>, <py_sfcl.CommandDataDefinition object at 0x05E59B40>) , Command count = 3848 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E570>, <py_sfcl.CommandDataDefinition object at 0x05E59120>) , Command count = 3849 ] 
18:20:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C90>, <py_sfcl.CommandDataDefinition object at 0x05E50750>) , Command count = 3850 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDFC0>, <py_sfcl.CommandDataDefinition object at 0x05E4FC60>) , Command count = 3851 ] 
18:20:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E594B0>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 3852 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DCF0>, <py_sfcl.CommandDataDefinition object at 0x05E59F90>) , Command count = 3853 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55C30>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 3854 ] 
18:20:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 3855 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD80>, <py_sfcl.CommandDataDefinition object at 0x05E55FC0>) , Command count = 3856 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59060>, <py_sfcl.CommandDataDefinition object at 0x05DB8C60>) , Command count = 3857 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 3858 ] 
18:20:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E55D20>) , Command count = 3859 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50B40>, <py_sfcl.CommandDataDefinition object at 0x052CDBA0>) , Command count = 3860 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC30>, <py_sfcl.CommandDataDefinition object at 0x05E3EF60>) , Command count = 3861 ] 
18:20:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AE570>, <py_sfcl.CommandDataDefinition object at 0x05E55E40>) , Command count = 3862 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E4FB40>) , Command count = 3863 ] 
18:20:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:12: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:20:12: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:20:12: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:12: [GetSCRRegisterEntry] Passed
18:20:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:12: Data_Status_After Erases          : 0
18:20:12: CPRM Security Support             : No Security
18:20:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:12: Spec. Version                     : Version 3.0X
18:20:12: Extended Security Support         : Extended_Security_Not_Supported
18:20:12: Command Support                   : COMMAND_SUPPORT
18:20:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:12: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:20:12: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:20:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:20:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:20:12: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:12: Perform Power Off and On.
18:20:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3864 ] 
18:20:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E870>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 3865 ] 
18:20:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E390>) , Command count = 3866 ] 
18:20:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3867 ] 
18:20:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:15: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:17: Host Frequency set to 25000 KHz
18:20:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:17: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A150>, 0x0, True) , Command count = 3868 ] 
18:20:17: [GO18_globalSetVolt]### Host voltage value is set.
18:20:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAA2D0>, 0x0, False) , Command count = 3869 ] 
18:20:17: [GO18_globalSetVolt]### Host voltage value is set.
18:20:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3870 ] 
18:20:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3871 ] 
18:20:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3872 ] 
18:20:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D810>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 3873 ] 
18:20:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F00>, <py_sfcl.CommandDataDefinition object at 0x05E55BA0>) , Command count = 3874 ] 
18:20:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3875 ] 
18:20:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:17: Host Frequency set to 25000 KHz
18:20:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:17: ####CSD Registe 2.0 Values####
18:20:17: CSD_STRUCTURE                                 :0x1
18:20:17: Reserv1                                       :0x0
18:20:17: Time Access 1 TAAC                            :0xe
18:20:17: Time Access 2 NSAC*100                        :0x0
18:20:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:17: Card Command Classess CCC                     :0x5b5
18:20:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:17: DSR(driver stage register)  DSR_IMP           :0x0
18:20:17: Reserv2                                       :0x0
18:20:17: Device Size C_SIZE                            :0xedc8
18:20:17: Reserv3                                       :0x0
18:20:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:17: Reserv4                                       :0x0
18:20:17: Write Speed Factor R2W_FACTOR                 :0x2
18:20:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:17: FILE_FORMAT_GRP                               :0x0
18:20:17: COPY flag                                     :0x1
18:20:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:17: File_Format                                   :0x0
18:20:17: CRC                                           :0x0
18:20:17: ####CSD Registe Values####  

18:20:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:17: [GetSCRRegisterEntry] Passed
18:20:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:17: Data_Status_After Erases          : 0
18:20:17: CPRM Security Support             : No Security
18:20:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:17: Spec. Version                     : Version 3.0X
18:20:17: Extended Security Support         : Extended_Security_Not_Supported
18:20:17: Command Support                   : COMMAND_SUPPORT
18:20:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50840>, <py_sfcl.CommandDataDefinition object at 0x05E37450>) , Command count = 3876 ] 
18:20:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50330>, <py_sfcl.CommandDataDefinition object at 0x05E559F0>) , Command count = 3877 ] 
18:20:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:17: [ SetBusWidth(0x4) , Command count = 3878 ] 
18:20:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BBE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3879 ] 
18:20:17: Protected Area Size 0x28000
18:20:17: Bus Width           2
18:20:17: Secure Mode         0
18:20:17: Speed  Class        4
18:20:17: Perf Move           0
18:20:17: Au Size             9
18:20:17: Erase Size          15
18:20:17: Erase Timeout       1
18:20:17: Erase offset        1
18:20:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3880 ] 
18:20:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:17: Host Frequency set to 100000 KHz
18:20:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:17: ####CSD Registe 2.0 Values####
18:20:17: CSD_STRUCTURE                                 :0x1
18:20:17: Reserv1                                       :0x0
18:20:17: Time Access 1 TAAC                            :0xe
18:20:17: Time Access 2 NSAC*100                        :0x0
18:20:17: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:17: Card Command Classess CCC                     :0x5b5
18:20:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:18: DSR(driver stage register)  DSR_IMP           :0x0
18:20:18: Reserv2                                       :0x0
18:20:18: Device Size C_SIZE                            :0xedc8
18:20:18: Reserv3                                       :0x0
18:20:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:18: Reserv4                                       :0x0
18:20:18: Write Speed Factor R2W_FACTOR                 :0x2
18:20:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:18: FILE_FORMAT_GRP                               :0x0
18:20:18: COPY flag                                     :0x1
18:20:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:18: File_Format                                   :0x0
18:20:18: CRC                                           :0x0
18:20:18: ####CSD Registe Values####  

18:20:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59270>, <py_sfcl.CommandDataDefinition object at 0x05E37540>) , Command count = 3881 ] 
18:20:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50150>, <py_sfcl.CommandDataDefinition object at 0x05E2D6F0>) , Command count = 3882 ] 
18:20:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:18: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:20:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052BBF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3883 ] 
18:20:18: Protected Area Size 0x28000
18:20:18: Bus Width           2
18:20:18: Secure Mode         0
18:20:18: Speed  Class        4
18:20:18: Perf Move           0
18:20:18: Au Size             9
18:20:18: Erase Size          15
18:20:18: Erase Timeout       1
18:20:18: Erase offset        1
18:20:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:18: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:20:18: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:20:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3884 ] 
18:20:18: Protected Area Size 0x28000
18:20:18: Bus Width           2
18:20:18: Secure Mode         0
18:20:18: Speed  Class        4
18:20:18: Perf Move           0
18:20:18: Au Size             9
18:20:18: Erase Size          15
18:20:18: Erase Timeout       1
18:20:18: Erase offset        1
18:20:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:18: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:20:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3885 ] 
18:20:18: Protected Area Size 0x28000
18:20:18: Bus Width           2
18:20:18: Secure Mode         0
18:20:18: Speed  Class        4
18:20:18: Perf Move           0
18:20:18: Au Size             9
18:20:18: Erase Size          15
18:20:18: Erase Timeout       1
18:20:18: Erase offset        1
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2D870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3886 ] 
18:20:19: Protected Area Size 0x28000
18:20:19: Bus Width           2
18:20:19: Secure Mode         0
18:20:19: Speed  Class        4
18:20:19: Perf Move           0
18:20:19: Au Size             9
18:20:19: Erase Size          15
18:20:19: Erase Timeout       1
18:20:19: Erase offset        1
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3887 ] 
18:20:19: Protected Area Size 0x28000
18:20:19: Bus Width           2
18:20:19: Secure Mode         0
18:20:19: Speed  Class        4
18:20:19: Perf Move           0
18:20:19: Au Size             9
18:20:19: Erase Size          15
18:20:19: Erase Timeout       1
18:20:19: Erase offset        1
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3888 ] 
18:20:19: Protected Area Size 0x28000
18:20:19: Bus Width           2
18:20:19: Secure Mode         0
18:20:19: Speed  Class        4
18:20:19: Perf Move           0
18:20:19: Au Size             9
18:20:19: Erase Size          15
18:20:19: Erase Timeout       1
18:20:19: Erase offset        1
18:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:20:19: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:20:19: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:20:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3889 ] 
18:20:21: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:20:21: [DVTCommonLib]### VOLA from card : 0x1
18:20:21: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:20:21: [DVTCommonLib]### Reserved bits from card : 0x0
18:20:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50570>, <py_sfcl.CommandDataDefinition object at 0x05E2DF30>) , Command count = 3890 ] 
18:20:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0C0>, <py_sfcl.CommandDataDefinition object at 0x05E551B0>) , Command count = 3891 ] 
18:20:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3892 ] 
18:20:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:21: [ SelectCard(0x1, True) , Command count = 3893 ] 
18:20:21: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:20:21: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:20:21: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:20:21: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:21: Perform Power Off and On.
18:20:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3894 ] 
18:20:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F60>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 3895 ] 
18:20:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DE40>, <py_sfcl.CommandDataDefinition object at 0x05E554B0>) , Command count = 3896 ] 
18:20:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3897 ] 
18:20:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:24: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:26: Host Frequency set to 25000 KHz
18:20:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:26: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x052782D0>, 0x0, True) , Command count = 3898 ] 
18:20:26: [GO18_globalSetVolt]### Host voltage value is set.
18:20:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A180>, 0x0, False) , Command count = 3899 ] 
18:20:26: [GO18_globalSetVolt]### Host voltage value is set.
18:20:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3900 ] 
18:20:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3901 ] 
18:20:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3902 ] 
18:20:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DEA0>, <py_sfcl.CommandDataDefinition object at 0x05E55D50>) , Command count = 3903 ] 
18:20:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 3904 ] 
18:20:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3905 ] 
18:20:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:26: Host Frequency set to 25000 KHz
18:20:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:26: ####CSD Registe 2.0 Values####
18:20:26: CSD_STRUCTURE                                 :0x1
18:20:26: Reserv1                                       :0x0
18:20:26: Time Access 1 TAAC                            :0xe
18:20:26: Time Access 2 NSAC*100                        :0x0
18:20:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:26: Card Command Classess CCC                     :0x5b5
18:20:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:26: DSR(driver stage register)  DSR_IMP           :0x0
18:20:26: Reserv2                                       :0x0
18:20:26: Device Size C_SIZE                            :0xedc8
18:20:26: Reserv3                                       :0x0
18:20:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:26: Reserv4                                       :0x0
18:20:26: Write Speed Factor R2W_FACTOR                 :0x2
18:20:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:26: FILE_FORMAT_GRP                               :0x0
18:20:26: COPY flag                                     :0x1
18:20:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:26: File_Format                                   :0x0
18:20:26: CRC                                           :0x0
18:20:26: ####CSD Registe Values####  

18:20:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:26: [GetSCRRegisterEntry] Passed
18:20:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:26: Data_Status_After Erases          : 0
18:20:26: CPRM Security Support             : No Security
18:20:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:26: Spec. Version                     : Version 3.0X
18:20:26: Extended Security Support         : Extended_Security_Not_Supported
18:20:26: Command Support                   : COMMAND_SUPPORT
18:20:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 3906 ] 
18:20:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E55120>) , Command count = 3907 ] 
18:20:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:26: [ SetBusWidth(0x4) , Command count = 3908 ] 
18:20:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3909 ] 
18:20:26: Protected Area Size 0x28000
18:20:26: Bus Width           2
18:20:26: Secure Mode         0
18:20:26: Speed  Class        4
18:20:26: Perf Move           0
18:20:26: Au Size             9
18:20:26: Erase Size          15
18:20:26: Erase Timeout       1
18:20:26: Erase offset        1
18:20:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3910 ] 
18:20:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:26: Host Frequency set to 100000 KHz
18:20:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:26: ####CSD Registe 2.0 Values####
18:20:26: CSD_STRUCTURE                                 :0x1
18:20:26: Reserv1                                       :0x0
18:20:26: Time Access 1 TAAC                            :0xe
18:20:26: Time Access 2 NSAC*100                        :0x0
18:20:26: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:26: Card Command Classess CCC                     :0x5b5
18:20:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:27: DSR(driver stage register)  DSR_IMP           :0x0
18:20:27: Reserv2                                       :0x0
18:20:27: Device Size C_SIZE                            :0xedc8
18:20:27: Reserv3                                       :0x0
18:20:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:27: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:27: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:27: Reserv4                                       :0x0
18:20:27: Write Speed Factor R2W_FACTOR                 :0x2
18:20:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:27: FILE_FORMAT_GRP                               :0x0
18:20:27: COPY flag                                     :0x1
18:20:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:27: File_Format                                   :0x0
18:20:27: CRC                                           :0x0
18:20:27: ####CSD Registe Values####  

18:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55DB0>, <py_sfcl.CommandDataDefinition object at 0x05E55C90>) , Command count = 3911 ] 
18:20:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D630>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 3912 ] 
18:20:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:27: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:27: [GetSCRRegisterEntry] Passed
18:20:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:27: Data_Status_After Erases          : 0
18:20:27: CPRM Security Support             : No Security
18:20:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:27: Spec. Version                     : Version 3.0X
18:20:27: Extended Security Support         : Extended_Security_Not_Supported
18:20:27: Command Support                   : COMMAND_SUPPORT
18:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:27: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:20:27: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:20:27: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:27: [GetSCRRegisterEntry] Passed
18:20:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:27: Data_Status_After Erases          : 0
18:20:27: CPRM Security Support             : No Security
18:20:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:27: Spec. Version                     : Version 3.0X
18:20:27: Extended Security Support         : Extended_Security_Not_Supported
18:20:27: Command Support                   : COMMAND_SUPPORT
18:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:27: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:28: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3913 ] 
18:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:20:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:28: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:30: Host Frequency set to 25000 KHz
18:20:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:30: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37C30>, 0x0, True) , Command count = 3914 ] 
18:20:30: [GO18_globalSetVolt]### Host voltage value is set.
18:20:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37930>, 0x0, False) , Command count = 3915 ] 
18:20:30: [GO18_globalSetVolt]### Host voltage value is set.
18:20:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3916 ] 
18:20:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3917 ] 
18:20:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3918 ] 
18:20:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 3919 ] 
18:20:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EBA0>) , Command count = 3920 ] 
18:20:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3921 ] 
18:20:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:30: Host Frequency set to 25000 KHz
18:20:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:30: ####CSD Registe 2.0 Values####
18:20:30: CSD_STRUCTURE                                 :0x1
18:20:30: Reserv1                                       :0x0
18:20:30: Time Access 1 TAAC                            :0xe
18:20:30: Time Access 2 NSAC*100                        :0x0
18:20:30: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:30: Card Command Classess CCC                     :0x5b5
18:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:30: DSR(driver stage register)  DSR_IMP           :0x0
18:20:30: Reserv2                                       :0x0
18:20:30: Device Size C_SIZE                            :0xedc8
18:20:30: Reserv3                                       :0x0
18:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:30: Reserv4                                       :0x0
18:20:30: Write Speed Factor R2W_FACTOR                 :0x2
18:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:30: FILE_FORMAT_GRP                               :0x0
18:20:30: COPY flag                                     :0x1
18:20:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:30: File_Format                                   :0x0
18:20:30: CRC                                           :0x0
18:20:30: ####CSD Registe Values####  

18:20:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:30: [GetSCRRegisterEntry] Passed
18:20:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:30: Data_Status_After Erases          : 0
18:20:30: CPRM Security Support             : No Security
18:20:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:30: Spec. Version                     : Version 3.0X
18:20:30: Extended Security Support         : Extended_Security_Not_Supported
18:20:30: Command Support                   : COMMAND_SUPPORT
18:20:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E3EF90>) , Command count = 3922 ] 
18:20:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 3923 ] 
18:20:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:30: [ SetBusWidth(0x4) , Command count = 3924 ] 
18:20:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3925 ] 
18:20:30: Protected Area Size 0x28000
18:20:30: Bus Width           2
18:20:30: Secure Mode         0
18:20:30: Speed  Class        4
18:20:30: Perf Move           0
18:20:30: Au Size             9
18:20:30: Erase Size          15
18:20:30: Erase Timeout       1
18:20:30: Erase offset        1
18:20:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3926 ] 
18:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:30: Host Frequency set to 100000 KHz
18:20:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:30: ####CSD Registe 2.0 Values####
18:20:30: CSD_STRUCTURE                                 :0x1
18:20:30: Reserv1                                       :0x0
18:20:30: Time Access 1 TAAC                            :0xe
18:20:30: Time Access 2 NSAC*100                        :0x0
18:20:30: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:30: Card Command Classess CCC                     :0x5b5
18:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:30: DSR(driver stage register)  DSR_IMP           :0x0
18:20:30: Reserv2                                       :0x0
18:20:30: Device Size C_SIZE                            :0xedc8
18:20:30: Reserv3                                       :0x0
18:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:30: Reserv4                                       :0x0
18:20:30: Write Speed Factor R2W_FACTOR                 :0x2
18:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:31: FILE_FORMAT_GRP                               :0x0
18:20:31: COPY flag                                     :0x1
18:20:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:31: File_Format                                   :0x0
18:20:31: CRC                                           :0x0
18:20:31: ####CSD Registe Values####  

18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE10>, <py_sfcl.CommandDataDefinition object at 0x05E3EB40>) , Command count = 3927 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55ED0>, <py_sfcl.CommandDataDefinition object at 0x05E3E090>) , Command count = 3928 ] 
18:20:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E300>, <py_sfcl.CommandDataDefinition object at 0x05E37960>) , Command count = 3929 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37390>, <py_sfcl.CommandDataDefinition object at 0x05E375D0>) , Command count = 3930 ] 
18:20:31: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55F90>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 3931 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55090>, <py_sfcl.CommandDataDefinition object at 0x05E37EA0>) , Command count = 3932 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50F00>, <py_sfcl.CommandDataDefinition object at 0x05E440F0>) , Command count = 3933 ] 
18:20:31: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ECC0>, <py_sfcl.CommandDataDefinition object at 0x05E446F0>) , Command count = 3934 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E44990>) , Command count = 3935 ] 
18:20:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:31: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50180>, <py_sfcl.CommandDataDefinition object at 0x05E3EC90>) , Command count = 3936 ] 
18:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37300>, <py_sfcl.CommandDataDefinition object at 0x05E3E5A0>) , Command count = 3937 ] 
18:20:32: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E2DE10>) , Command count = 3938 ] 
18:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A090>, <py_sfcl.CommandDataDefinition object at 0x05E44C90>) , Command count = 3939 ] 
18:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E448D0>, <py_sfcl.CommandDataDefinition object at 0x05E3EAB0>) , Command count = 3940 ] 
18:20:32: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB330>, <py_sfcl.CommandDataDefinition object at 0x05E2D540>) , Command count = 3941 ] 
18:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37750>, <py_sfcl.CommandDataDefinition object at 0x05E4F9C0>) , Command count = 3942 ] 
18:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:32: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:20:32: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:20:32: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:32: [GetSCRRegisterEntry] Passed
18:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:32: Data_Status_After Erases          : 0
18:20:32: CPRM Security Support             : No Security
18:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:32: Spec. Version                     : Version 3.0X
18:20:32: Extended Security Support         : Extended_Security_Not_Supported
18:20:32: Command Support                   : COMMAND_SUPPORT
18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:32: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:32: [GetSCRRegisterEntry] Passed
18:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:32: Data_Status_After Erases          : 0
18:20:32: CPRM Security Support             : No Security
18:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:32: Spec. Version                     : Version 3.0X
18:20:32: Extended Security Support         : Extended_Security_Not_Supported
18:20:32: Command Support                   : COMMAND_SUPPORT
18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:32: [GetSCRRegisterEntry] Passed
18:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:32: Data_Status_After Erases          : 0
18:20:32: CPRM Security Support             : No Security
18:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:32: Spec. Version                     : Version 3.0X
18:20:32: Extended Security Support         : Extended_Security_Not_Supported
18:20:32: Command Support                   : COMMAND_SUPPORT
18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:32: [GetSCRRegisterEntry] Passed
18:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:32: Data_Status_After Erases          : 0
18:20:32: CPRM Security Support             : No Security
18:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:32: Spec. Version                     : Version 3.0X
18:20:32: Extended Security Support         : Extended_Security_Not_Supported
18:20:32: Command Support                   : COMMAND_SUPPORT
18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:32: [GetSCRRegisterEntry] Passed
18:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:33: Data_Status_After Erases          : 0
18:20:33: CPRM Security Support             : No Security
18:20:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:33: Spec. Version                     : Version 3.0X
18:20:33: Extended Security Support         : Extended_Security_Not_Supported
18:20:33: Command Support                   : COMMAND_SUPPORT
18:20:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:33: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:20:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:20:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:20:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:20:33: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:33: Perform Power Off and On.
18:20:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3943 ] 
18:20:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 3944 ] 
18:20:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59660>, <py_sfcl.CommandDataDefinition object at 0x05E59630>) , Command count = 3945 ] 
18:20:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:35: [ SetCardRCA(0x1, 0xD555) , Command count = 3946 ] 
18:20:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:35: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:37: Host Frequency set to 25000 KHz
18:20:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:37: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A7E0>, 0x0, True) , Command count = 3947 ] 
18:20:37: [GO18_globalSetVolt]### Host voltage value is set.
18:20:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E593F0>, 0x0, False) , Command count = 3948 ] 
18:20:37: [GO18_globalSetVolt]### Host voltage value is set.
18:20:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3949 ] 
18:20:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3950 ] 
18:20:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3951 ] 
18:20:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555A0>, <py_sfcl.CommandDataDefinition object at 0x05E59A80>) , Command count = 3952 ] 
18:20:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 3953 ] 
18:20:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3954 ] 
18:20:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:37: Host Frequency set to 25000 KHz
18:20:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:37: ####CSD Registe 2.0 Values####
18:20:37: CSD_STRUCTURE                                 :0x1
18:20:37: Reserv1                                       :0x0
18:20:37: Time Access 1 TAAC                            :0xe
18:20:37: Time Access 2 NSAC*100                        :0x0
18:20:37: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:37: Card Command Classess CCC                     :0x5b5
18:20:37: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:37: DSR(driver stage register)  DSR_IMP           :0x0
18:20:37: Reserv2                                       :0x0
18:20:37: Device Size C_SIZE                            :0xedc8
18:20:37: Reserv3                                       :0x0
18:20:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:37: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:37: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:37: Reserv4                                       :0x0
18:20:37: Write Speed Factor R2W_FACTOR                 :0x2
18:20:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:37: FILE_FORMAT_GRP                               :0x0
18:20:37: COPY flag                                     :0x1
18:20:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:37: File_Format                                   :0x0
18:20:37: CRC                                           :0x0
18:20:37: ####CSD Registe Values####  

18:20:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:37: [GetSCRRegisterEntry] Passed
18:20:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:37: Data_Status_After Erases          : 0
18:20:37: CPRM Security Support             : No Security
18:20:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:37: Spec. Version                     : Version 3.0X
18:20:37: Extended Security Support         : Extended_Security_Not_Supported
18:20:37: Command Support                   : COMMAND_SUPPORT
18:20:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05E44A80>) , Command count = 3955 ] 
18:20:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A50>, <py_sfcl.CommandDataDefinition object at 0x05E59AE0>) , Command count = 3956 ] 
18:20:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:37: [ SetBusWidth(0x4) , Command count = 3957 ] 
18:20:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E449C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3958 ] 
18:20:37: Protected Area Size 0x28000
18:20:37: Bus Width           2
18:20:37: Secure Mode         0
18:20:37: Speed  Class        4
18:20:37: Perf Move           0
18:20:37: Au Size             9
18:20:37: Erase Size          15
18:20:37: Erase Timeout       1
18:20:37: Erase offset        1
18:20:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3959 ] 
18:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:38: Host Frequency set to 100000 KHz
18:20:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:38: ####CSD Registe 2.0 Values####
18:20:38: CSD_STRUCTURE                                 :0x1
18:20:38: Reserv1                                       :0x0
18:20:38: Time Access 1 TAAC                            :0xe
18:20:38: Time Access 2 NSAC*100                        :0x0
18:20:38: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:38: Card Command Classess CCC                     :0x5b5
18:20:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:38: DSR(driver stage register)  DSR_IMP           :0x0
18:20:38: Reserv2                                       :0x0
18:20:38: Device Size C_SIZE                            :0xedc8
18:20:38: Reserv3                                       :0x0
18:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:38: Reserv4                                       :0x0
18:20:38: Write Speed Factor R2W_FACTOR                 :0x2
18:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:38: FILE_FORMAT_GRP                               :0x0
18:20:38: COPY flag                                     :0x1
18:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:38: File_Format                                   :0x0
18:20:38: CRC                                           :0x0
18:20:38: ####CSD Registe Values####  

18:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E59510>) , Command count = 3960 ] 
18:20:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 3961 ] 
18:20:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:38: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:38: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3962 ] 
18:20:38: Protected Area Size 0x28000
18:20:38: Bus Width           2
18:20:38: Secure Mode         0
18:20:38: Speed  Class        4
18:20:38: Perf Move           0
18:20:38: Au Size             9
18:20:38: Erase Size          15
18:20:38: Erase Timeout       1
18:20:38: Erase offset        1
18:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:20:38: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3963 ] 
18:20:38: Protected Area Size 0x28000
18:20:38: Bus Width           2
18:20:38: Secure Mode         0
18:20:38: Speed  Class        4
18:20:38: Perf Move           0
18:20:38: Au Size             9
18:20:38: Erase Size          15
18:20:38: Erase Timeout       1
18:20:38: Erase offset        1
18:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:38: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3964 ] 
18:20:39: Protected Area Size 0x28000
18:20:39: Bus Width           2
18:20:39: Secure Mode         0
18:20:39: Speed  Class        4
18:20:39: Perf Move           0
18:20:39: Au Size             9
18:20:39: Erase Size          15
18:20:39: Erase Timeout       1
18:20:39: Erase offset        1
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3965 ] 
18:20:39: Protected Area Size 0x28000
18:20:39: Bus Width           2
18:20:39: Secure Mode         0
18:20:39: Speed  Class        4
18:20:39: Perf Move           0
18:20:39: Au Size             9
18:20:39: Erase Size          15
18:20:39: Erase Timeout       1
18:20:39: Erase offset        1
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3966 ] 
18:20:39: Protected Area Size 0x28000
18:20:39: Bus Width           2
18:20:39: Secure Mode         0
18:20:39: Speed  Class        4
18:20:39: Perf Move           0
18:20:39: Au Size             9
18:20:39: Erase Size          15
18:20:39: Erase Timeout       1
18:20:39: Erase offset        1
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3967 ] 
18:20:39: Protected Area Size 0x28000
18:20:39: Bus Width           2
18:20:39: Secure Mode         0
18:20:39: Speed  Class        4
18:20:39: Perf Move           0
18:20:39: Au Size             9
18:20:39: Erase Size          15
18:20:39: Erase Timeout       1
18:20:39: Erase offset        1
18:20:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:20:39: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:20:39: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:20:39: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:20:39: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 5 
18:20:39: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:20:39: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:20:39: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:20:39: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:20:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:39: Perform Power Off and On.
18:20:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 3968 ] 
18:20:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 3969 ] 
18:20:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F990>, <py_sfcl.CommandDataDefinition object at 0x05E3E600>) , Command count = 3970 ] 
18:20:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:42: [ SetCardRCA(0x1, 0xD555) , Command count = 3971 ] 
18:20:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:42: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:44: Host Frequency set to 25000 KHz
18:20:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:44: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E3EC30>, 0x0, True) , Command count = 3972 ] 
18:20:44: [GO18_globalSetVolt]### Host voltage value is set.
18:20:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F5A0>, 0x0, False) , Command count = 3973 ] 
18:20:44: [GO18_globalSetVolt]### Host voltage value is set.
18:20:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3974 ] 
18:20:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3975 ] 
18:20:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3976 ] 
18:20:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44330>, <py_sfcl.CommandDataDefinition object at 0x05E443C0>) , Command count = 3977 ] 
18:20:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44CF0>, <py_sfcl.CommandDataDefinition object at 0x05E444B0>) , Command count = 3978 ] 
18:20:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:44: [ SetCardRCA(0x1, 0xD555) , Command count = 3979 ] 
18:20:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:44: Host Frequency set to 25000 KHz
18:20:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:44: ####CSD Registe 2.0 Values####
18:20:44: CSD_STRUCTURE                                 :0x1
18:20:44: Reserv1                                       :0x0
18:20:44: Time Access 1 TAAC                            :0xe
18:20:44: Time Access 2 NSAC*100                        :0x0
18:20:44: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:44: Card Command Classess CCC                     :0x5b5
18:20:44: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:44: DSR(driver stage register)  DSR_IMP           :0x0
18:20:44: Reserv2                                       :0x0
18:20:44: Device Size C_SIZE                            :0xedc8
18:20:44: Reserv3                                       :0x0
18:20:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:44: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:44: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:44: Reserv4                                       :0x0
18:20:44: Write Speed Factor R2W_FACTOR                 :0x2
18:20:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:44: FILE_FORMAT_GRP                               :0x0
18:20:44: COPY flag                                     :0x1
18:20:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:44: File_Format                                   :0x0
18:20:44: CRC                                           :0x0
18:20:44: ####CSD Registe Values####  

18:20:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:44: [GetSCRRegisterEntry] Passed
18:20:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:44: Data_Status_After Erases          : 0
18:20:44: CPRM Security Support             : No Security
18:20:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:44: Spec. Version                     : Version 3.0X
18:20:44: Extended Security Support         : Extended_Security_Not_Supported
18:20:44: Command Support                   : COMMAND_SUPPORT
18:20:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44C00>, <py_sfcl.CommandDataDefinition object at 0x05E4FA80>) , Command count = 3980 ] 
18:20:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44270>) , Command count = 3981 ] 
18:20:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:44: [ SetBusWidth(0x4) , Command count = 3982 ] 
18:20:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3983 ] 
18:20:44: Protected Area Size 0x28000
18:20:44: Bus Width           2
18:20:44: Secure Mode         0
18:20:44: Speed  Class        4
18:20:44: Perf Move           0
18:20:44: Au Size             9
18:20:44: Erase Size          15
18:20:44: Erase Timeout       1
18:20:44: Erase offset        1
18:20:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3984 ] 
18:20:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:44: Host Frequency set to 100000 KHz
18:20:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:45: ####CSD Registe 2.0 Values####
18:20:45: CSD_STRUCTURE                                 :0x1
18:20:45: Reserv1                                       :0x0
18:20:45: Time Access 1 TAAC                            :0xe
18:20:45: Time Access 2 NSAC*100                        :0x0
18:20:45: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:45: Card Command Classess CCC                     :0x5b5
18:20:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:45: DSR(driver stage register)  DSR_IMP           :0x0
18:20:45: Reserv2                                       :0x0
18:20:45: Device Size C_SIZE                            :0xedc8
18:20:45: Reserv3                                       :0x0
18:20:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:45: Reserv4                                       :0x0
18:20:45: Write Speed Factor R2W_FACTOR                 :0x2
18:20:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:45: FILE_FORMAT_GRP                               :0x0
18:20:45: COPY flag                                     :0x1
18:20:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:45: File_Format                                   :0x0
18:20:45: CRC                                           :0x0
18:20:45: ####CSD Registe Values####  

18:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F750>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 3985 ] 
18:20:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E4F150>) , Command count = 3986 ] 
18:20:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:45: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:45: [GetSCRRegisterEntry] Passed
18:20:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:45: Data_Status_After Erases          : 0
18:20:45: CPRM Security Support             : No Security
18:20:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:45: Spec. Version                     : Version 3.0X
18:20:45: Extended Security Support         : Extended_Security_Not_Supported
18:20:45: Command Support                   : COMMAND_SUPPORT
18:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:45: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:20:45: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:20:45: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:45: [GetSCRRegisterEntry] Passed
18:20:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:45: Data_Status_After Erases          : 0
18:20:45: CPRM Security Support             : No Security
18:20:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:45: Spec. Version                     : Version 3.0X
18:20:45: Extended Security Support         : Extended_Security_Not_Supported
18:20:45: Command Support                   : COMMAND_SUPPORT
18:20:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:46: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:46: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3987 ] 
18:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:46: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:48: Host Frequency set to 25000 KHz
18:20:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:48: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D5D0>, 0x0, True) , Command count = 3988 ] 
18:20:48: [GO18_globalSetVolt]### Host voltage value is set.
18:20:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F540>, 0x0, False) , Command count = 3989 ] 
18:20:48: [GO18_globalSetVolt]### Host voltage value is set.
18:20:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3990 ] 
18:20:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3991 ] 
18:20:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3992 ] 
18:20:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59E40>, <py_sfcl.CommandDataDefinition object at 0x05E59BD0>) , Command count = 3993 ] 
18:20:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59570>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 3994 ] 
18:20:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3995 ] 
18:20:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:48: Host Frequency set to 25000 KHz
18:20:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:48: ####CSD Registe 2.0 Values####
18:20:48: CSD_STRUCTURE                                 :0x1
18:20:48: Reserv1                                       :0x0
18:20:48: Time Access 1 TAAC                            :0xe
18:20:48: Time Access 2 NSAC*100                        :0x0
18:20:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:48: Card Command Classess CCC                     :0x5b5
18:20:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:48: DSR(driver stage register)  DSR_IMP           :0x0
18:20:48: Reserv2                                       :0x0
18:20:48: Device Size C_SIZE                            :0xedc8
18:20:48: Reserv3                                       :0x0
18:20:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:48: Reserv4                                       :0x0
18:20:48: Write Speed Factor R2W_FACTOR                 :0x2
18:20:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:48: FILE_FORMAT_GRP                               :0x0
18:20:48: COPY flag                                     :0x1
18:20:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:48: File_Format                                   :0x0
18:20:48: CRC                                           :0x0
18:20:48: ####CSD Registe Values####  

18:20:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:48: [GetSCRRegisterEntry] Passed
18:20:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:48: Data_Status_After Erases          : 0
18:20:48: CPRM Security Support             : No Security
18:20:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:48: Spec. Version                     : Version 3.0X
18:20:48: Extended Security Support         : Extended_Security_Not_Supported
18:20:48: Command Support                   : COMMAND_SUPPORT
18:20:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59690>, <py_sfcl.CommandDataDefinition object at 0x05E59090>) , Command count = 3996 ] 
18:20:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FC90>, <py_sfcl.CommandDataDefinition object at 0x05E4FED0>) , Command count = 3997 ] 
18:20:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:48: [ SetBusWidth(0x4) , Command count = 3998 ] 
18:20:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E59DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3999 ] 
18:20:48: Protected Area Size 0x28000
18:20:48: Bus Width           2
18:20:48: Secure Mode         0
18:20:48: Speed  Class        4
18:20:48: Perf Move           0
18:20:48: Au Size             9
18:20:48: Erase Size          15
18:20:48: Erase Timeout       1
18:20:48: Erase offset        1
18:20:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4000 ] 
18:20:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:48: Host Frequency set to 100000 KHz
18:20:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:48: ####CSD Registe 2.0 Values####
18:20:48: CSD_STRUCTURE                                 :0x1
18:20:48: Reserv1                                       :0x0
18:20:48: Time Access 1 TAAC                            :0xe
18:20:48: Time Access 2 NSAC*100                        :0x0
18:20:48: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:48: Card Command Classess CCC                     :0x5b5
18:20:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:49: DSR(driver stage register)  DSR_IMP           :0x0
18:20:49: Reserv2                                       :0x0
18:20:49: Device Size C_SIZE                            :0xedc8
18:20:49: Reserv3                                       :0x0
18:20:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:49: Reserv4                                       :0x0
18:20:49: Write Speed Factor R2W_FACTOR                 :0x2
18:20:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:49: FILE_FORMAT_GRP                               :0x0
18:20:49: COPY flag                                     :0x1
18:20:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:49: File_Format                                   :0x0
18:20:49: CRC                                           :0x0
18:20:49: ####CSD Registe Values####  

18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 4001 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E440C0>, <py_sfcl.CommandDataDefinition object at 0x05E59870>) , Command count = 4002 ] 
18:20:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E593C0>, <py_sfcl.CommandDataDefinition object at 0x05E59D20>) , Command count = 4003 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F150>, <py_sfcl.CommandDataDefinition object at 0x05E4F270>) , Command count = 4004 ] 
18:20:49: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44BD0>, <py_sfcl.CommandDataDefinition object at 0x05E592A0>) , Command count = 4005 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44600>, <py_sfcl.CommandDataDefinition object at 0x05E59A20>) , Command count = 4006 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB70>, <py_sfcl.CommandDataDefinition object at 0x05E37630>) , Command count = 4007 ] 
18:20:49: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E50D80>) , Command count = 4008 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FBD0>, <py_sfcl.CommandDataDefinition object at 0x05DB8E10>) , Command count = 4009 ] 
18:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:49: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44DE0>, <py_sfcl.CommandDataDefinition object at 0x05E37810>) , Command count = 4010 ] 
18:20:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB300>, <py_sfcl.CommandDataDefinition object at 0x05E591E0>) , Command count = 4011 ] 
18:20:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59CC0>, <py_sfcl.CommandDataDefinition object at 0x05E500F0>) , Command count = 4012 ] 
18:20:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB270>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 4013 ] 
18:20:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375A0>, <py_sfcl.CommandDataDefinition object at 0x05E59BA0>) , Command count = 4014 ] 
18:20:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44D80>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 4015 ] 
18:20:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E37480>) , Command count = 4016 ] 
18:20:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:50: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:20:50: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:20:50: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:50: [GetSCRRegisterEntry] Passed
18:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:50: Data_Status_After Erases          : 0
18:20:50: CPRM Security Support             : No Security
18:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:50: Spec. Version                     : Version 3.0X
18:20:50: Extended Security Support         : Extended_Security_Not_Supported
18:20:50: Command Support                   : COMMAND_SUPPORT
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:50: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:50: [GetSCRRegisterEntry] Passed
18:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:50: Data_Status_After Erases          : 0
18:20:50: CPRM Security Support             : No Security
18:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:50: Spec. Version                     : Version 3.0X
18:20:50: Extended Security Support         : Extended_Security_Not_Supported
18:20:50: Command Support                   : COMMAND_SUPPORT
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:50: [GetSCRRegisterEntry] Passed
18:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:50: Data_Status_After Erases          : 0
18:20:50: CPRM Security Support             : No Security
18:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:50: Spec. Version                     : Version 3.0X
18:20:50: Extended Security Support         : Extended_Security_Not_Supported
18:20:50: Command Support                   : COMMAND_SUPPORT
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:50: [GetSCRRegisterEntry] Passed
18:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:50: Data_Status_After Erases          : 0
18:20:50: CPRM Security Support             : No Security
18:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:50: Spec. Version                     : Version 3.0X
18:20:50: Extended Security Support         : Extended_Security_Not_Supported
18:20:50: Command Support                   : COMMAND_SUPPORT
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:50: [GetSCRRegisterEntry] Passed
18:20:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:50: Data_Status_After Erases          : 0
18:20:50: CPRM Security Support             : No Security
18:20:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:50: Spec. Version                     : Version 3.0X
18:20:50: Extended Security Support         : Extended_Security_Not_Supported
18:20:50: Command Support                   : COMMAND_SUPPORT
18:20:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:50: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:20:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:20:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:20:50: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:20:50: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:20:51: Perform Power Off and On.
18:20:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4017 ] 
18:20:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E50030>) , Command count = 4018 ] 
18:20:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05DAAE40>) , Command count = 4019 ] 
18:20:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:53: [ SetCardRCA(0x1, 0xD555) , Command count = 4020 ] 
18:20:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:53: [GO4_globalInitCard]### Switch to Specify Card Type
18:20:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:55: Host Frequency set to 25000 KHz
18:20:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:55: [GO18_globalSetVolt]### Set Host Voltage value.
18:20:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:20:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E59930>, 0x0, True) , Command count = 4021 ] 
18:20:55: [GO18_globalSetVolt]### Host voltage value is set.
18:20:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:20:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E505D0>, 0x0, False) , Command count = 4022 ] 
18:20:55: [GO18_globalSetVolt]### Host voltage value is set.
18:20:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4023 ] 
18:20:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4024 ] 
18:20:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:20:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4025 ] 
18:20:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:20:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052A5600>, <py_sfcl.CommandDataDefinition object at 0x05E59150>) , Command count = 4026 ] 
18:20:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50720>, <py_sfcl.CommandDataDefinition object at 0x05E55180>) , Command count = 4027 ] 
18:20:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:20:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4028 ] 
18:20:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:20:55: Host Frequency set to 25000 KHz
18:20:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:20:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:55: ####CSD Registe 2.0 Values####
18:20:55: CSD_STRUCTURE                                 :0x1
18:20:55: Reserv1                                       :0x0
18:20:55: Time Access 1 TAAC                            :0xe
18:20:55: Time Access 2 NSAC*100                        :0x0
18:20:55: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:55: Card Command Classess CCC                     :0x5b5
18:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:55: DSR(driver stage register)  DSR_IMP           :0x0
18:20:55: Reserv2                                       :0x0
18:20:55: Device Size C_SIZE                            :0xedc8
18:20:55: Reserv3                                       :0x0
18:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:55: Reserv4                                       :0x0
18:20:55: Write Speed Factor R2W_FACTOR                 :0x2
18:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:55: FILE_FORMAT_GRP                               :0x0
18:20:55: COPY flag                                     :0x1
18:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:55: File_Format                                   :0x0
18:20:55: CRC                                           :0x0
18:20:55: ####CSD Registe Values####  

18:20:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:55: [GetSCRRegisterEntry] Passed
18:20:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:55: Data_Status_After Erases          : 0
18:20:55: CPRM Security Support             : No Security
18:20:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:55: Spec. Version                     : Version 3.0X
18:20:55: Extended Security Support         : Extended_Security_Not_Supported
18:20:55: Command Support                   : COMMAND_SUPPORT
18:20:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 4029 ] 
18:20:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E59990>) , Command count = 4030 ] 
18:20:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:20:55: [ SetBusWidth(0x4) , Command count = 4031 ] 
18:20:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E595D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4032 ] 
18:20:55: Protected Area Size 0x28000
18:20:55: Bus Width           2
18:20:55: Secure Mode         0
18:20:55: Speed  Class        4
18:20:55: Perf Move           0
18:20:55: Au Size             9
18:20:55: Erase Size          15
18:20:56: Erase Timeout       1
18:20:56: Erase offset        1
18:20:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:20:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:20:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4033 ] 
18:20:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:20:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:20:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:20:56: Host Frequency set to 100000 KHz
18:20:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:20:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:56: ####CSD Registe 2.0 Values####
18:20:56: CSD_STRUCTURE                                 :0x1
18:20:56: Reserv1                                       :0x0
18:20:56: Time Access 1 TAAC                            :0xe
18:20:56: Time Access 2 NSAC*100                        :0x0
18:20:56: Data Transfer Rate TRAN_SPEED                 :0xb
18:20:56: Card Command Classess CCC                     :0x5b5
18:20:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:56: DSR(driver stage register)  DSR_IMP           :0x0
18:20:56: Reserv2                                       :0x0
18:20:56: Device Size C_SIZE                            :0xedc8
18:20:56: Reserv3                                       :0x0
18:20:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:56: Reserv4                                       :0x0
18:20:56: Write Speed Factor R2W_FACTOR                 :0x2
18:20:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:56: FILE_FORMAT_GRP                               :0x0
18:20:56: COPY flag                                     :0x1
18:20:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:56: File_Format                                   :0x0
18:20:56: CRC                                           :0x0
18:20:56: ####CSD Registe Values####  

18:20:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59EA0>, <py_sfcl.CommandDataDefinition object at 0x05E59DE0>) , Command count = 4034 ] 
18:20:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:20:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDB0>, <py_sfcl.CommandDataDefinition object at 0x05E59DB0>) , Command count = 4035 ] 
18:20:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:20:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:20:56: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:20:56: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:20:56: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:20:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E591B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4036 ] 
18:20:56: Protected Area Size 0x28000
18:20:56: Bus Width           2
18:20:56: Secure Mode         0
18:20:56: Speed  Class        4
18:20:56: Perf Move           0
18:20:56: Au Size             9
18:20:56: Erase Size          15
18:20:56: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:20:57: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4037 ] 
18:20:57: Protected Area Size 0x28000
18:20:57: Bus Width           2
18:20:57: Secure Mode         0
18:20:57: Speed  Class        4
18:20:57: Perf Move           0
18:20:57: Au Size             9
18:20:57: Erase Size          15
18:20:57: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4038 ] 
18:20:57: Protected Area Size 0x28000
18:20:57: Bus Width           2
18:20:57: Secure Mode         0
18:20:57: Speed  Class        4
18:20:57: Perf Move           0
18:20:57: Au Size             9
18:20:57: Erase Size          15
18:20:57: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E373C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4039 ] 
18:20:57: Protected Area Size 0x28000
18:20:57: Bus Width           2
18:20:57: Secure Mode         0
18:20:57: Speed  Class        4
18:20:57: Perf Move           0
18:20:57: Au Size             9
18:20:57: Erase Size          15
18:20:57: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4040 ] 
18:20:57: Protected Area Size 0x28000
18:20:57: Bus Width           2
18:20:57: Secure Mode         0
18:20:57: Speed  Class        4
18:20:57: Perf Move           0
18:20:57: Au Size             9
18:20:57: Erase Size          15
18:20:57: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4041 ] 
18:20:57: Protected Area Size 0x28000
18:20:57: Bus Width           2
18:20:57: Secure Mode         0
18:20:57: Speed  Class        4
18:20:57: Perf Move           0
18:20:57: Au Size             9
18:20:57: Erase Size          15
18:20:57: Erase Timeout       1
18:20:57: Erase offset        1
18:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:20:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:20:57: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 4042 ] 
18:20:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E3F0>, <py_sfcl.CommandDataDefinition object at 0x05E50A80>) , Command count = 4043 ] 
18:20:58: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D50>, <py_sfcl.CommandDataDefinition object at 0x05E3E510>) , Command count = 4044 ] 
18:20:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E180>, <py_sfcl.CommandDataDefinition object at 0x05E37990>) , Command count = 4045 ] 
18:20:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:20:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:20:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:20:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:20:58: [GetSCRRegisterEntry] Passed
18:20:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:20:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:20:58: Data_Status_After Erases          : 0
18:20:58: CPRM Security Support             : No Security
18:20:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:20:58: Spec. Version                     : Version 3.0X
18:20:58: Extended Security Support         : Extended_Security_Not_Supported
18:20:58: Command Support                   : COMMAND_SUPPORT
18:20:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:20:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:20:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:20:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4046 ] 
18:20:58: Protected Area Size 0x28000
18:20:58: Bus Width           2
18:20:58: Secure Mode         0
18:20:58: Speed  Class        4
18:20:58: Perf Move           0
18:20:58: Au Size             9
18:20:58: Erase Size          15
18:20:58: Erase Timeout       1
18:20:58: Erase offset        1
18:20:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:20:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:21:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4047 ] 
18:21:01: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:21:01: [DVTCommonLib]### VOLA from card : 0x1
18:21:01: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:21:01: [DVTCommonLib]### Reserved bits from card : 0x0
18:21:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E720>, <py_sfcl.CommandDataDefinition object at 0x05E3EC60>) , Command count = 4048 ] 
18:21:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AAF90>, <py_sfcl.CommandDataDefinition object at 0x05E50660>) , Command count = 4049 ] 
18:21:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:01: [ SetCardRCA(0x1, 0xD555) , Command count = 4050 ] 
18:21:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:01: [ SelectCard(0x1, True) , Command count = 4051 ] 
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05278180>, <py_sfcl.CommandDataDefinition object at 0x05E3E060>) , Command count = 4052 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:01: [GetSCRRegisterEntry] Failed
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4053 ] 
18:21:01: [ GetCardStatus() , Command count = 4054 ] 
18:21:01: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:01: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55360>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 4055 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504E0>, <py_sfcl.CommandDataDefinition object at 0x05E50C30>) , Command count = 4056 ] 
18:21:01: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x05E503F0>) , Command count = 4057 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59360>, <py_sfcl.CommandDataDefinition object at 0x05E50930>) , Command count = 4058 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:01: [GetSCRRegisterEntry] Passed
18:21:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:01: Data_Status_After Erases          : 0
18:21:01: CPRM Security Support             : No Security
18:21:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:01: Spec. Version                     : Version 3.0X
18:21:01: Extended Security Support         : Extended_Security_Not_Supported
18:21:01: Command Support                   : COMMAND_SUPPORT
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4059 ] 
18:21:01: Protected Area Size 0x28000
18:21:01: Bus Width           0
18:21:01: Secure Mode         0
18:21:01: Speed  Class        4
18:21:01: Perf Move           0
18:21:01: Au Size             9
18:21:01: Erase Size          15
18:21:01: Erase Timeout       1
18:21:01: Erase offset        1
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D80>, <py_sfcl.CommandDataDefinition object at 0x05E4FE70>) , Command count = 4060 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB10>, <py_sfcl.CommandDataDefinition object at 0x05E4F180>) , Command count = 4061 ] 
18:21:01: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E960>, <py_sfcl.CommandDataDefinition object at 0x05E555D0>) , Command count = 4062 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44120>, <py_sfcl.CommandDataDefinition object at 0x052CDD80>) , Command count = 4063 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:01: [GetSCRRegisterEntry] Failed
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052CDDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4064 ] 
18:21:01: [ GetCardStatus() , Command count = 4065 ] 
18:21:01: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:01: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59750>, <py_sfcl.CommandDataDefinition object at 0x05E442D0>) , Command count = 4066 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EF00>, <py_sfcl.CommandDataDefinition object at 0x05E556C0>) , Command count = 4067 ] 
18:21:01: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59480>, <py_sfcl.CommandDataDefinition object at 0x05E55A80>) , Command count = 4068 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59300>, <py_sfcl.CommandDataDefinition object at 0x05E50D20>) , Command count = 4069 ] 
18:21:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:01: [GetSCRRegisterEntry] Passed
18:21:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:01: Data_Status_After Erases          : 0
18:21:01: CPRM Security Support             : No Security
18:21:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:01: Spec. Version                     : Version 3.0X
18:21:01: Extended Security Support         : Extended_Security_Not_Supported
18:21:01: Command Support                   : COMMAND_SUPPORT
18:21:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4070 ] 
18:21:01: Protected Area Size 0x28000
18:21:01: Bus Width           0
18:21:01: Secure Mode         0
18:21:01: Speed  Class        4
18:21:01: Perf Move           0
18:21:01: Au Size             9
18:21:01: Erase Size          15
18:21:01: Erase Timeout       1
18:21:01: Erase offset        1
18:21:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:01: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:21:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4071 ] 
18:21:03: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:21:03: [DVTCommonLib]### VOLA from card : 0x1
18:21:03: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:21:03: [DVTCommonLib]### Reserved bits from card : 0x0
18:21:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E590F0>, <py_sfcl.CommandDataDefinition object at 0x05E59450>) , Command count = 4072 ] 
18:21:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C60>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 4073 ] 
18:21:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4074 ] 
18:21:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:03: [ SelectCard(0x1, True) , Command count = 4075 ] 
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:21:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:03: [GetSCRRegisterEntry] Failed
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:21:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4076 ] 
18:21:03: [ GetCardStatus() , Command count = 4077 ] 
18:21:03: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:03: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E55780>) , Command count = 4078 ] 
18:21:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E4F5D0>) , Command count = 4079 ] 
18:21:03: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BD0>, <py_sfcl.CommandDataDefinition object at 0x05E4FF60>) , Command count = 4080 ] 
18:21:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59240>, <py_sfcl.CommandDataDefinition object at 0x05E4FFC0>) , Command count = 4081 ] 
18:21:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:03: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:21:03: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:21:03: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:21:03: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:03: Perform Power Off and On.
18:21:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4082 ] 
18:21:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55570>, <py_sfcl.CommandDataDefinition object at 0x05E597B0>) , Command count = 4083 ] 
18:21:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55510>, <py_sfcl.CommandDataDefinition object at 0x05E55B40>) , Command count = 4084 ] 
18:21:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:05: [ SetCardRCA(0x1, 0xD555) , Command count = 4085 ] 
18:21:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:05: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:07: Host Frequency set to 25000 KHz
18:21:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:07: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05192180>, 0x0, True) , Command count = 4086 ] 
18:21:07: [GO18_globalSetVolt]### Host voltage value is set.
18:21:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2AC60>, 0x0, False) , Command count = 4087 ] 
18:21:08: [GO18_globalSetVolt]### Host voltage value is set.
18:21:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4088 ] 
18:21:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4089 ] 
18:21:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4090 ] 
18:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D9F0>, <py_sfcl.CommandDataDefinition object at 0x05E50E40>) , Command count = 4091 ] 
18:21:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501B0>, <py_sfcl.CommandDataDefinition object at 0x05E506F0>) , Command count = 4092 ] 
18:21:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:08: [ SetCardRCA(0x1, 0xD555) , Command count = 4093 ] 
18:21:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:08: Host Frequency set to 25000 KHz
18:21:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:08: ####CSD Registe 2.0 Values####
18:21:08: CSD_STRUCTURE                                 :0x1
18:21:08: Reserv1                                       :0x0
18:21:08: Time Access 1 TAAC                            :0xe
18:21:08: Time Access 2 NSAC*100                        :0x0
18:21:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:08: Card Command Classess CCC                     :0x5b5
18:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:08: DSR(driver stage register)  DSR_IMP           :0x0
18:21:08: Reserv2                                       :0x0
18:21:08: Device Size C_SIZE                            :0xedc8
18:21:08: Reserv3                                       :0x0
18:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:08: Reserv4                                       :0x0
18:21:08: Write Speed Factor R2W_FACTOR                 :0x2
18:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:08: FILE_FORMAT_GRP                               :0x0
18:21:08: COPY flag                                     :0x1
18:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:08: File_Format                                   :0x0
18:21:08: CRC                                           :0x0
18:21:08: ####CSD Registe Values####  

18:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:08: [GetSCRRegisterEntry] Passed
18:21:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:08: Data_Status_After Erases          : 0
18:21:08: CPRM Security Support             : No Security
18:21:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:08: Spec. Version                     : Version 3.0X
18:21:08: Extended Security Support         : Extended_Security_Not_Supported
18:21:08: Command Support                   : COMMAND_SUPPORT
18:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05D2A1B0>) , Command count = 4094 ] 
18:21:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502A0>, <py_sfcl.CommandDataDefinition object at 0x05E50060>) , Command count = 4095 ] 
18:21:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:08: [ SetBusWidth(0x4) , Command count = 4096 ] 
18:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4097 ] 
18:21:08: Protected Area Size 0x28000
18:21:08: Bus Width           2
18:21:08: Secure Mode         0
18:21:08: Speed  Class        4
18:21:08: Perf Move           0
18:21:08: Au Size             9
18:21:08: Erase Size          15
18:21:08: Erase Timeout       1
18:21:08: Erase offset        1
18:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4098 ] 
18:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:08: Host Frequency set to 100000 KHz
18:21:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:08: ####CSD Registe 2.0 Values####
18:21:08: CSD_STRUCTURE                                 :0x1
18:21:08: Reserv1                                       :0x0
18:21:08: Time Access 1 TAAC                            :0xe
18:21:08: Time Access 2 NSAC*100                        :0x0
18:21:08: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:08: Card Command Classess CCC                     :0x5b5
18:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:08: DSR(driver stage register)  DSR_IMP           :0x0
18:21:08: Reserv2                                       :0x0
18:21:08: Device Size C_SIZE                            :0xedc8
18:21:08: Reserv3                                       :0x0
18:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:09: Reserv4                                       :0x0
18:21:09: Write Speed Factor R2W_FACTOR                 :0x2
18:21:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:09: FILE_FORMAT_GRP                               :0x0
18:21:09: COPY flag                                     :0x1
18:21:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:09: File_Format                                   :0x0
18:21:09: CRC                                           :0x0
18:21:09: ####CSD Registe Values####  

18:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py_sfcl.CommandDataDefinition object at 0x05E59330>) , Command count = 4099 ] 
18:21:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59E70>, <py_sfcl.CommandDataDefinition object at 0x05E59B40>) , Command count = 4100 ] 
18:21:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:09: [GetSCRRegisterEntry] Passed
18:21:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:09: Data_Status_After Erases          : 0
18:21:09: CPRM Security Support             : No Security
18:21:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:09: Spec. Version                     : Version 3.0X
18:21:09: Extended Security Support         : Extended_Security_Not_Supported
18:21:09: Command Support                   : COMMAND_SUPPORT
18:21:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:09: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:21:09: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:21:09: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:21:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:09: [GetSCRRegisterEntry] Passed
18:21:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:09: Data_Status_After Erases          : 0
18:21:09: CPRM Security Support             : No Security
18:21:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:09: Spec. Version                     : Version 3.0X
18:21:09: Extended Security Support         : Extended_Security_Not_Supported
18:21:09: Command Support                   : COMMAND_SUPPORT
18:21:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:09: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:21:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:09: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4101 ] 
18:21:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:21:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:10: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:12: Host Frequency set to 25000 KHz
18:21:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:12: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F060>, 0x0, True) , Command count = 4102 ] 
18:21:12: [GO18_globalSetVolt]### Host voltage value is set.
18:21:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x052CDFC0>, 0x0, False) , Command count = 4103 ] 
18:21:12: [GO18_globalSetVolt]### Host voltage value is set.
18:21:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4104 ] 
18:21:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4105 ] 
18:21:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4106 ] 
18:21:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 4107 ] 
18:21:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD80>, <py_sfcl.CommandDataDefinition object at 0x05E3EB70>) , Command count = 4108 ] 
18:21:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:12: [ SetCardRCA(0x1, 0xD555) , Command count = 4109 ] 
18:21:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:12: Host Frequency set to 25000 KHz
18:21:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:12: ####CSD Registe 2.0 Values####
18:21:12: CSD_STRUCTURE                                 :0x1
18:21:12: Reserv1                                       :0x0
18:21:12: Time Access 1 TAAC                            :0xe
18:21:12: Time Access 2 NSAC*100                        :0x0
18:21:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:12: Card Command Classess CCC                     :0x5b5
18:21:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:12: DSR(driver stage register)  DSR_IMP           :0x0
18:21:12: Reserv2                                       :0x0
18:21:12: Device Size C_SIZE                            :0xedc8
18:21:12: Reserv3                                       :0x0
18:21:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:12: Reserv4                                       :0x0
18:21:12: Write Speed Factor R2W_FACTOR                 :0x2
18:21:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:12: FILE_FORMAT_GRP                               :0x0
18:21:12: COPY flag                                     :0x1
18:21:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:12: File_Format                                   :0x0
18:21:12: CRC                                           :0x0
18:21:12: ####CSD Registe Values####  

18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 4110 ] 
18:21:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37510>, <py_sfcl.CommandDataDefinition object at 0x05E37AB0>) , Command count = 4111 ] 
18:21:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:12: [ SetBusWidth(0x4) , Command count = 4112 ] 
18:21:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3EF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4113 ] 
18:21:12: Protected Area Size 0x28000
18:21:12: Bus Width           2
18:21:12: Secure Mode         0
18:21:12: Speed  Class        4
18:21:12: Perf Move           0
18:21:12: Au Size             9
18:21:12: Erase Size          15
18:21:12: Erase Timeout       1
18:21:12: Erase offset        1
18:21:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4114 ] 
18:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:12: Host Frequency set to 100000 KHz
18:21:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:12: ####CSD Registe 2.0 Values####
18:21:12: CSD_STRUCTURE                                 :0x1
18:21:12: Reserv1                                       :0x0
18:21:12: Time Access 1 TAAC                            :0xe
18:21:12: Time Access 2 NSAC*100                        :0x0
18:21:12: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:12: Card Command Classess CCC                     :0x5b5
18:21:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:12: DSR(driver stage register)  DSR_IMP           :0x0
18:21:12: Reserv2                                       :0x0
18:21:12: Device Size C_SIZE                            :0xedc8
18:21:12: Reserv3                                       :0x0
18:21:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:12: Reserv4                                       :0x0
18:21:12: Write Speed Factor R2W_FACTOR                 :0x2
18:21:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:12: FILE_FORMAT_GRP                               :0x0
18:21:12: COPY flag                                     :0x1
18:21:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:12: File_Format                                   :0x0
18:21:12: CRC                                           :0x0
18:21:12: ####CSD Registe Values####  

18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E40>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 4115 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A930>, <py_sfcl.CommandDataDefinition object at 0x05E55960>) , Command count = 4116 ] 
18:21:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E870>, <py_sfcl.CommandDataDefinition object at 0x05E556F0>) , Command count = 4117 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FB40>, <py_sfcl.CommandDataDefinition object at 0x05E4FA50>) , Command count = 4118 ] 
18:21:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EA20>, <py_sfcl.CommandDataDefinition object at 0x05E59A50>) , Command count = 4119 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DED0>, <py_sfcl.CommandDataDefinition object at 0x05D2A150>) , Command count = 4120 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59F90>, <py_sfcl.CommandDataDefinition object at 0x05E59060>) , Command count = 4121 ] 
18:21:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DC90>, <py_sfcl.CommandDataDefinition object at 0x05E59B40>) , Command count = 4122 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E540>, <py_sfcl.CommandDataDefinition object at 0x05E2DBD0>) , Command count = 4123 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAA5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E390>) , Command count = 4124 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55810>, <py_sfcl.CommandDataDefinition object at 0x05E595D0>) , Command count = 4125 ] 
18:21:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59ED0>, <py_sfcl.CommandDataDefinition object at 0x05E441E0>) , Command count = 4126 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D810>, <py_sfcl.CommandDataDefinition object at 0x05E37F00>) , Command count = 4127 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55990>, <py_sfcl.CommandDataDefinition object at 0x05E553F0>) , Command count = 4128 ] 
18:21:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37D20>, <py_sfcl.CommandDataDefinition object at 0x05E50A50>) , Command count = 4129 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37450>, <py_sfcl.CommandDataDefinition object at 0x05D2A7B0>) , Command count = 4130 ] 
18:21:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:12: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:21:12: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:21:12: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:12: [GetSCRRegisterEntry] Passed
18:21:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:12: Data_Status_After Erases          : 0
18:21:12: CPRM Security Support             : No Security
18:21:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:12: Spec. Version                     : Version 3.0X
18:21:12: Extended Security Support         : Extended_Security_Not_Supported
18:21:12: Command Support                   : COMMAND_SUPPORT
18:21:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:12: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:21:12: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:21:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:21:12: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:21:12: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:12: Perform Power Off and On.
18:21:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4131 ] 
18:21:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37CF0>, <py_sfcl.CommandDataDefinition object at 0x05E559F0>) , Command count = 4132 ] 
18:21:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59270>, <py_sfcl.CommandDataDefinition object at 0x05E37540>) , Command count = 4133 ] 
18:21:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:15: [ SetCardRCA(0x1, 0xD555) , Command count = 4134 ] 
18:21:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:15: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:17: Host Frequency set to 25000 KHz
18:21:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:17: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E376C0>, 0x0, True) , Command count = 4135 ] 
18:21:17: [GO18_globalSetVolt]### Host voltage value is set.
18:21:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05270930>, 0x0, False) , Command count = 4136 ] 
18:21:17: [GO18_globalSetVolt]### Host voltage value is set.
18:21:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4137 ] 
18:21:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4138 ] 
18:21:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4139 ] 
18:21:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37600>, <py_sfcl.CommandDataDefinition object at 0x05E4FC00>) , Command count = 4140 ] 
18:21:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D6F0>, <py_sfcl.CommandDataDefinition object at 0x052CDB40>) , Command count = 4141 ] 
18:21:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:17: [ SetCardRCA(0x1, 0xD555) , Command count = 4142 ] 
18:21:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:17: Host Frequency set to 25000 KHz
18:21:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:17: ####CSD Registe 2.0 Values####
18:21:17: CSD_STRUCTURE                                 :0x1
18:21:17: Reserv1                                       :0x0
18:21:17: Time Access 1 TAAC                            :0xe
18:21:17: Time Access 2 NSAC*100                        :0x0
18:21:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:17: Card Command Classess CCC                     :0x5b5
18:21:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:17: DSR(driver stage register)  DSR_IMP           :0x0
18:21:17: Reserv2                                       :0x0
18:21:17: Device Size C_SIZE                            :0xedc8
18:21:17: Reserv3                                       :0x0
18:21:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:17: Reserv4                                       :0x0
18:21:17: Write Speed Factor R2W_FACTOR                 :0x2
18:21:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:17: FILE_FORMAT_GRP                               :0x0
18:21:17: COPY flag                                     :0x1
18:21:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:17: File_Format                                   :0x0
18:21:17: CRC                                           :0x0
18:21:17: ####CSD Registe Values####  

18:21:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:17: [GetSCRRegisterEntry] Passed
18:21:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:17: Data_Status_After Erases          : 0
18:21:17: CPRM Security Support             : No Security
18:21:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:17: Spec. Version                     : Version 3.0X
18:21:17: Extended Security Support         : Extended_Security_Not_Supported
18:21:17: Command Support                   : COMMAND_SUPPORT
18:21:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CD0F0>, <py_sfcl.CommandDataDefinition object at 0x05E37B10>) , Command count = 4143 ] 
18:21:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD20>, <py_sfcl.CommandDataDefinition object at 0x05E50360>) , Command count = 4144 ] 
18:21:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:17: [ SetBusWidth(0x4) , Command count = 4145 ] 
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E551B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4146 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4147 ] 
18:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:17: Host Frequency set to 100000 KHz
18:21:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:17: ####CSD Registe 2.0 Values####
18:21:17: CSD_STRUCTURE                                 :0x1
18:21:17: Reserv1                                       :0x0
18:21:17: Time Access 1 TAAC                            :0xe
18:21:17: Time Access 2 NSAC*100                        :0x0
18:21:17: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:17: Card Command Classess CCC                     :0x5b5
18:21:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:17: DSR(driver stage register)  DSR_IMP           :0x0
18:21:17: Reserv2                                       :0x0
18:21:17: Device Size C_SIZE                            :0xedc8
18:21:17: Reserv3                                       :0x0
18:21:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:17: Reserv4                                       :0x0
18:21:17: Write Speed Factor R2W_FACTOR                 :0x2
18:21:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:17: FILE_FORMAT_GRP                               :0x0
18:21:17: COPY flag                                     :0x1
18:21:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:17: File_Format                                   :0x0
18:21:17: CRC                                           :0x0
18:21:17: ####CSD Registe Values####  

18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37F60>, <py_sfcl.CommandDataDefinition object at 0x05E37C60>) , Command count = 4148 ] 
18:21:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55AE0>, <py_sfcl.CommandDataDefinition object at 0x05E37A80>) , Command count = 4149 ] 
18:21:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052782D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4150 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:21:17: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4151 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4152 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4153 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4154 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E2DEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4155 ] 
18:21:17: Protected Area Size 0x28000
18:21:17: Bus Width           2
18:21:17: Secure Mode         0
18:21:17: Speed  Class        4
18:21:17: Perf Move           0
18:21:17: Au Size             9
18:21:17: Erase Size          15
18:21:17: Erase Timeout       1
18:21:17: Erase offset        1
18:21:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:21:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:21:17: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call blockRESET
18:21:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4156 ] 
18:21:20: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:21:20: [DVTCommonLib]### VOLA from card : 0x1
18:21:20: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:21:20: [DVTCommonLib]### Reserved bits from card : 0x0
18:21:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55150>, <py_sfcl.CommandDataDefinition object at 0x05E552A0>) , Command count = 4157 ] 
18:21:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44480>, <py_sfcl.CommandDataDefinition object at 0x05E55B10>) , Command count = 4158 ] 
18:21:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:20: [ SetCardRCA(0x1, 0xD555) , Command count = 4159 ] 
18:21:20: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:20: [ SelectCard(0x1, True) , Command count = 4160 ] 
18:21:20: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:21:20: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:21:20: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:21:20: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:20: Perform Power Off and On.
18:21:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4161 ] 
18:21:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E37780>) , Command count = 4162 ] 
18:21:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37C00>, <py_sfcl.CommandDataDefinition object at 0x05E55DB0>) , Command count = 4163 ] 
18:21:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:22: [ SetCardRCA(0x1, 0xD555) , Command count = 4164 ] 
18:21:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:22: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:24: Host Frequency set to 25000 KHz
18:21:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:24: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2A180>, 0x0, True) , Command count = 4165 ] 
18:21:24: [GO18_globalSetVolt]### Host voltage value is set.
18:21:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37C30>, 0x0, False) , Command count = 4166 ] 
18:21:24: [GO18_globalSetVolt]### Host voltage value is set.
18:21:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4167 ] 
18:21:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4168 ] 
18:21:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4169 ] 
18:21:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E840>, <py_sfcl.CommandDataDefinition object at 0x05E3EB10>) , Command count = 4170 ] 
18:21:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E4E0>, <py_sfcl.CommandDataDefinition object at 0x05E3E9C0>) , Command count = 4171 ] 
18:21:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:24: [ SetCardRCA(0x1, 0xD555) , Command count = 4172 ] 
18:21:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:25: Host Frequency set to 25000 KHz
18:21:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:25: ####CSD Registe 2.0 Values####
18:21:25: CSD_STRUCTURE                                 :0x1
18:21:25: Reserv1                                       :0x0
18:21:25: Time Access 1 TAAC                            :0xe
18:21:25: Time Access 2 NSAC*100                        :0x0
18:21:25: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:25: Card Command Classess CCC                     :0x5b5
18:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:25: DSR(driver stage register)  DSR_IMP           :0x0
18:21:25: Reserv2                                       :0x0
18:21:25: Device Size C_SIZE                            :0xedc8
18:21:25: Reserv3                                       :0x0
18:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:25: Reserv4                                       :0x0
18:21:25: Write Speed Factor R2W_FACTOR                 :0x2
18:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:25: FILE_FORMAT_GRP                               :0x0
18:21:25: COPY flag                                     :0x1
18:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:25: File_Format                                   :0x0
18:21:25: CRC                                           :0x0
18:21:25: ####CSD Registe Values####  

18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:25: [GetSCRRegisterEntry] Passed
18:21:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:25: Data_Status_After Erases          : 0
18:21:25: CPRM Security Support             : No Security
18:21:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:25: Spec. Version                     : Version 3.0X
18:21:25: Extended Security Support         : Extended_Security_Not_Supported
18:21:25: Command Support                   : COMMAND_SUPPORT
18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E690>, <py_sfcl.CommandDataDefinition object at 0x05E3EBA0>) , Command count = 4173 ] 
18:21:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E930>, <py_sfcl.CommandDataDefinition object at 0x05E3EF90>) , Command count = 4174 ] 
18:21:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:25: [ SetBusWidth(0x4) , Command count = 4175 ] 
18:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4176 ] 
18:21:25: Protected Area Size 0x28000
18:21:25: Bus Width           2
18:21:25: Secure Mode         0
18:21:25: Speed  Class        4
18:21:25: Perf Move           0
18:21:25: Au Size             9
18:21:25: Erase Size          15
18:21:25: Erase Timeout       1
18:21:25: Erase offset        1
18:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4177 ] 
18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:25: Host Frequency set to 100000 KHz
18:21:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:25: ####CSD Registe 2.0 Values####
18:21:25: CSD_STRUCTURE                                 :0x1
18:21:25: Reserv1                                       :0x0
18:21:25: Time Access 1 TAAC                            :0xe
18:21:25: Time Access 2 NSAC*100                        :0x0
18:21:25: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:25: Card Command Classess CCC                     :0x5b5
18:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:25: DSR(driver stage register)  DSR_IMP           :0x0
18:21:25: Reserv2                                       :0x0
18:21:25: Device Size C_SIZE                            :0xedc8
18:21:25: Reserv3                                       :0x0
18:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:25: Reserv4                                       :0x0
18:21:25: Write Speed Factor R2W_FACTOR                 :0x2
18:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:25: FILE_FORMAT_GRP                               :0x0
18:21:25: COPY flag                                     :0x1
18:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:25: File_Format                                   :0x0
18:21:25: CRC                                           :0x0
18:21:25: ####CSD Registe Values####  

18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E6F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E660>) , Command count = 4178 ] 
18:21:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EE10>, <py_sfcl.CommandDataDefinition object at 0x05E3EB40>) , Command count = 4179 ] 
18:21:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:25: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:25: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:25: [GetSCRRegisterEntry] Passed
18:21:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:25: Data_Status_After Erases          : 0
18:21:25: CPRM Security Support             : No Security
18:21:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:25: Spec. Version                     : Version 3.0X
18:21:25: Extended Security Support         : Extended_Security_Not_Supported
18:21:25: Command Support                   : COMMAND_SUPPORT
18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:25: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:21:25: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:21:25: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:25: [GetSCRRegisterEntry] Passed
18:21:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:25: Data_Status_After Erases          : 0
18:21:25: CPRM Security Support             : No Security
18:21:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:25: Spec. Version                     : Version 3.0X
18:21:25: Extended Security Support         : Extended_Security_Not_Supported
18:21:25: Command Support                   : COMMAND_SUPPORT
18:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:25: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:25: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4180 ] 
18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:25: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:27: Host Frequency set to 25000 KHz
18:21:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:27: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E37960>, 0x0, True) , Command count = 4181 ] 
18:21:27: [GO18_globalSetVolt]### Host voltage value is set.
18:21:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E50C90>, 0x0, False) , Command count = 4182 ] 
18:21:27: [GO18_globalSetVolt]### Host voltage value is set.
18:21:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4183 ] 
18:21:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4184 ] 
18:21:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4185 ] 
18:21:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D7B0>, <py_sfcl.CommandDataDefinition object at 0x05E446F0>) , Command count = 4186 ] 
18:21:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50ED0>, <py_sfcl.CommandDataDefinition object at 0x05E44990>) , Command count = 4187 ] 
18:21:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:27: [ SetCardRCA(0x1, 0xD555) , Command count = 4188 ] 
18:21:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:28: Host Frequency set to 25000 KHz
18:21:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:28: ####CSD Registe 2.0 Values####
18:21:28: CSD_STRUCTURE                                 :0x1
18:21:28: Reserv1                                       :0x0
18:21:28: Time Access 1 TAAC                            :0xe
18:21:28: Time Access 2 NSAC*100                        :0x0
18:21:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:28: Card Command Classess CCC                     :0x5b5
18:21:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:28: DSR(driver stage register)  DSR_IMP           :0x0
18:21:28: Reserv2                                       :0x0
18:21:28: Device Size C_SIZE                            :0xedc8
18:21:28: Reserv3                                       :0x0
18:21:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:28: Reserv4                                       :0x0
18:21:28: Write Speed Factor R2W_FACTOR                 :0x2
18:21:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:28: FILE_FORMAT_GRP                               :0x0
18:21:28: COPY flag                                     :0x1
18:21:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:28: File_Format                                   :0x0
18:21:28: CRC                                           :0x0
18:21:28: ####CSD Registe Values####  

18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DB70>, <py_sfcl.CommandDataDefinition object at 0x05E2D720>) , Command count = 4189 ] 
18:21:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44060>, <py_sfcl.CommandDataDefinition object at 0x05E2DE10>) , Command count = 4190 ] 
18:21:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:28: [ SetBusWidth(0x4) , Command count = 4191 ] 
18:21:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4192 ] 
18:21:28: Protected Area Size 0x28000
18:21:28: Bus Width           2
18:21:28: Secure Mode         0
18:21:28: Speed  Class        4
18:21:28: Perf Move           0
18:21:28: Au Size             9
18:21:28: Erase Size          15
18:21:28: Erase Timeout       1
18:21:28: Erase offset        1
18:21:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4193 ] 
18:21:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:28: Host Frequency set to 100000 KHz
18:21:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:28: ####CSD Registe 2.0 Values####
18:21:28: CSD_STRUCTURE                                 :0x1
18:21:28: Reserv1                                       :0x0
18:21:28: Time Access 1 TAAC                            :0xe
18:21:28: Time Access 2 NSAC*100                        :0x0
18:21:28: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:28: Card Command Classess CCC                     :0x5b5
18:21:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:28: DSR(driver stage register)  DSR_IMP           :0x0
18:21:28: Reserv2                                       :0x0
18:21:28: Device Size C_SIZE                            :0xedc8
18:21:28: Reserv3                                       :0x0
18:21:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:28: Reserv4                                       :0x0
18:21:28: Write Speed Factor R2W_FACTOR                 :0x2
18:21:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:28: FILE_FORMAT_GRP                               :0x0
18:21:28: COPY flag                                     :0x1
18:21:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:28: File_Format                                   :0x0
18:21:28: CRC                                           :0x0
18:21:28: ####CSD Registe Values####  

18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E375D0>, <py_sfcl.CommandDataDefinition object at 0x05E3EE10>) , Command count = 4194 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37750>, <py_sfcl.CommandDataDefinition object at 0x05E4F9C0>) , Command count = 4195 ] 
18:21:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D600>, <py_sfcl.CommandDataDefinition object at 0x05E2DA80>) , Command count = 4196 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E2A0>, <py_sfcl.CommandDataDefinition object at 0x05E3E8D0>) , Command count = 4197 ] 
18:21:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37930>, <py_sfcl.CommandDataDefinition object at 0x05E3E2D0>) , Command count = 4198 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB8E40>, <py_sfcl.CommandDataDefinition object at 0x05D2A7E0>) , Command count = 4199 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E5A0>, <py_sfcl.CommandDataDefinition object at 0x05E3EC90>) , Command count = 4200 ] 
18:21:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59420>, <py_sfcl.CommandDataDefinition object at 0x05E3EB40>) , Command count = 4201 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59540>, <py_sfcl.CommandDataDefinition object at 0x05E3E990>) , Command count = 4202 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59660>, <py_sfcl.CommandDataDefinition object at 0x05E59630>) , Command count = 4203 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59F60>, <py_sfcl.CommandDataDefinition object at 0x05E3E090>) , Command count = 4204 ] 
18:21:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA20>, <py_sfcl.CommandDataDefinition object at 0x05E55EA0>) , Command count = 4205 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C2AE0>, <py_sfcl.CommandDataDefinition object at 0x05E44900>) , Command count = 4206 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A80>, <py_sfcl.CommandDataDefinition object at 0x05E598D0>) , Command count = 4207 ] 
18:21:28: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44570>, <py_sfcl.CommandDataDefinition object at 0x05E55090>) , Command count = 4208 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A900>, <py_sfcl.CommandDataDefinition object at 0x05E3E7E0>) , Command count = 4209 ] 
18:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:28: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:21:28: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:21:28: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:28: [GetSCRRegisterEntry] Passed
18:21:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:28: Data_Status_After Erases          : 0
18:21:28: CPRM Security Support             : No Security
18:21:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:28: Spec. Version                     : Version 3.0X
18:21:28: Extended Security Support         : Extended_Security_Not_Supported
18:21:28: Command Support                   : COMMAND_SUPPORT
18:21:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:28: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:21:28: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:21:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:21:28: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:21:28: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:28: Perform Power Off and On.
18:21:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4210 ] 
18:21:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44A50>, <py_sfcl.CommandDataDefinition object at 0x05E59AE0>) , Command count = 4211 ] 
18:21:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E449F0>, <py_sfcl.CommandDataDefinition object at 0x05E59510>) , Command count = 4212 ] 
18:21:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4213 ] 
18:21:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:30: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:32: Host Frequency set to 25000 KHz
18:21:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:32: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F840>, 0x0, True) , Command count = 4214 ] 
18:21:32: [GO18_globalSetVolt]### Host voltage value is set.
18:21:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F120>, 0x0, False) , Command count = 4215 ] 
18:21:32: [GO18_globalSetVolt]### Host voltage value is set.
18:21:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4216 ] 
18:21:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4217 ] 
18:21:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4218 ] 
18:21:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDE10>, <py_sfcl.CommandDataDefinition object at 0x05E59180>) , Command count = 4219 ] 
18:21:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F510>, <py_sfcl.CommandDataDefinition object at 0x05E447E0>) , Command count = 4220 ] 
18:21:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:33: [ SetCardRCA(0x1, 0xD555) , Command count = 4221 ] 
18:21:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:33: Host Frequency set to 25000 KHz
18:21:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:33: ####CSD Registe 2.0 Values####
18:21:33: CSD_STRUCTURE                                 :0x1
18:21:33: Reserv1                                       :0x0
18:21:33: Time Access 1 TAAC                            :0xe
18:21:33: Time Access 2 NSAC*100                        :0x0
18:21:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:33: Card Command Classess CCC                     :0x5b5
18:21:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:33: DSR(driver stage register)  DSR_IMP           :0x0
18:21:33: Reserv2                                       :0x0
18:21:33: Device Size C_SIZE                            :0xedc8
18:21:33: Reserv3                                       :0x0
18:21:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:33: Reserv4                                       :0x0
18:21:33: Write Speed Factor R2W_FACTOR                 :0x2
18:21:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:33: FILE_FORMAT_GRP                               :0x0
18:21:33: COPY flag                                     :0x1
18:21:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:33: File_Format                                   :0x0
18:21:33: CRC                                           :0x0
18:21:33: ####CSD Registe Values####  

18:21:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:33: [GetSCRRegisterEntry] Passed
18:21:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:33: Data_Status_After Erases          : 0
18:21:33: CPRM Security Support             : No Security
18:21:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:33: Spec. Version                     : Version 3.0X
18:21:33: Extended Security Support         : Extended_Security_Not_Supported
18:21:33: Command Support                   : COMMAND_SUPPORT
18:21:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50900>, <py_sfcl.CommandDataDefinition object at 0x05E4F1E0>) , Command count = 4222 ] 
18:21:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44300>, <py_sfcl.CommandDataDefinition object at 0x05E593F0>) , Command count = 4223 ] 
18:21:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:33: [ SetBusWidth(0x4) , Command count = 4224 ] 
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E446C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4225 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4226 ] 
18:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:33: Host Frequency set to 100000 KHz
18:21:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:33: ####CSD Registe 2.0 Values####
18:21:33: CSD_STRUCTURE                                 :0x1
18:21:33: Reserv1                                       :0x0
18:21:33: Time Access 1 TAAC                            :0xe
18:21:33: Time Access 2 NSAC*100                        :0x0
18:21:33: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:33: Card Command Classess CCC                     :0x5b5
18:21:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:33: DSR(driver stage register)  DSR_IMP           :0x0
18:21:33: Reserv2                                       :0x0
18:21:33: Device Size C_SIZE                            :0xedc8
18:21:33: Reserv3                                       :0x0
18:21:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:33: Reserv4                                       :0x0
18:21:33: Write Speed Factor R2W_FACTOR                 :0x2
18:21:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:33: FILE_FORMAT_GRP                               :0x0
18:21:33: COPY flag                                     :0x1
18:21:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:33: File_Format                                   :0x0
18:21:33: CRC                                           :0x0
18:21:33: ####CSD Registe Values####  

18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44B70>, <py_sfcl.CommandDataDefinition object at 0x05E445A0>) , Command count = 4227 ] 
18:21:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E600>, <py_sfcl.CommandDataDefinition object at 0x05E4F990>) , Command count = 4228 ] 
18:21:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:33: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:33: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4229 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:21:33: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4230 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4231 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4232 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4233 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4234 ] 
18:21:33: Protected Area Size 0x28000
18:21:33: Bus Width           2
18:21:33: Secure Mode         0
18:21:33: Speed  Class        4
18:21:33: Perf Move           0
18:21:33: Au Size             9
18:21:33: Erase Size          15
18:21:33: Erase Timeout       1
18:21:33: Erase offset        1
18:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:21:33: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:21:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Increment LoopCounter by 1 
18:21:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SET RANDOM RESET
18:21:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Iteration of LoopCounter 6 
18:21:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]SCR Verify expect OK
18:21:33: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:21:33: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:21:33: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:21:33: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:33: Perform Power Off and On.
18:21:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4235 ] 
18:21:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44840>, <py_sfcl.CommandDataDefinition object at 0x05E44270>) , Command count = 4236 ] 
18:21:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F750>, <py_sfcl.CommandDataDefinition object at 0x05E4F480>) , Command count = 4237 ] 
18:21:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:35: [ SetCardRCA(0x1, 0xD555) , Command count = 4238 ] 
18:21:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:35: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:37: Host Frequency set to 25000 KHz
18:21:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:37: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F5A0>, 0x0, True) , Command count = 4239 ] 
18:21:37: [GO18_globalSetVolt]### Host voltage value is set.
18:21:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E2D5D0>, 0x0, False) , Command count = 4240 ] 
18:21:37: [GO18_globalSetVolt]### Host voltage value is set.
18:21:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4241 ] 
18:21:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4242 ] 
18:21:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4243 ] 
18:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C30>, <py_sfcl.CommandDataDefinition object at 0x05E3EEA0>) , Command count = 4244 ] 
18:21:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59E40>, <py_sfcl.CommandDataDefinition object at 0x05E59BD0>) , Command count = 4245 ] 
18:21:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4246 ] 
18:21:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:38: Host Frequency set to 25000 KHz
18:21:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:38: ####CSD Registe 2.0 Values####
18:21:38: CSD_STRUCTURE                                 :0x1
18:21:38: Reserv1                                       :0x0
18:21:38: Time Access 1 TAAC                            :0xe
18:21:38: Time Access 2 NSAC*100                        :0x0
18:21:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:38: Card Command Classess CCC                     :0x5b5
18:21:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:38: DSR(driver stage register)  DSR_IMP           :0x0
18:21:38: Reserv2                                       :0x0
18:21:38: Device Size C_SIZE                            :0xedc8
18:21:38: Reserv3                                       :0x0
18:21:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:38: Reserv4                                       :0x0
18:21:38: Write Speed Factor R2W_FACTOR                 :0x2
18:21:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:38: FILE_FORMAT_GRP                               :0x0
18:21:38: COPY flag                                     :0x1
18:21:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:38: File_Format                                   :0x0
18:21:38: CRC                                           :0x0
18:21:38: ####CSD Registe Values####  

18:21:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:38: [GetSCRRegisterEntry] Passed
18:21:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:38: Data_Status_After Erases          : 0
18:21:38: CPRM Security Support             : No Security
18:21:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:38: Spec. Version                     : Version 3.0X
18:21:38: Extended Security Support         : Extended_Security_Not_Supported
18:21:38: Command Support                   : COMMAND_SUPPORT
18:21:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59570>, <py_sfcl.CommandDataDefinition object at 0x05E4F870>) , Command count = 4247 ] 
18:21:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59690>, <py_sfcl.CommandDataDefinition object at 0x05E59090>) , Command count = 4248 ] 
18:21:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:38: [ SetBusWidth(0x4) , Command count = 4249 ] 
18:21:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4FEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4250 ] 
18:21:38: Protected Area Size 0x28000
18:21:38: Bus Width           2
18:21:38: Secure Mode         0
18:21:38: Speed  Class        4
18:21:38: Perf Move           0
18:21:38: Au Size             9
18:21:38: Erase Size          15
18:21:38: Erase Timeout       1
18:21:38: Erase offset        1
18:21:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4251 ] 
18:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:38: Host Frequency set to 100000 KHz
18:21:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:38: ####CSD Registe 2.0 Values####
18:21:38: CSD_STRUCTURE                                 :0x1
18:21:38: Reserv1                                       :0x0
18:21:38: Time Access 1 TAAC                            :0xe
18:21:38: Time Access 2 NSAC*100                        :0x0
18:21:38: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:38: Card Command Classess CCC                     :0x5b5
18:21:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:38: DSR(driver stage register)  DSR_IMP           :0x0
18:21:38: Reserv2                                       :0x0
18:21:38: Device Size C_SIZE                            :0xedc8
18:21:38: Reserv3                                       :0x0
18:21:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:38: Reserv4                                       :0x0
18:21:38: Write Speed Factor R2W_FACTOR                 :0x2
18:21:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:38: FILE_FORMAT_GRP                               :0x0
18:21:38: COPY flag                                     :0x1
18:21:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:38: File_Format                                   :0x0
18:21:38: CRC                                           :0x0
18:21:38: ####CSD Registe Values####  

18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59390>, <py_sfcl.CommandDataDefinition object at 0x05E59900>) , Command count = 4252 ] 
18:21:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDB10>, <py_sfcl.CommandDataDefinition object at 0x05E44780>) , Command count = 4253 ] 
18:21:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:38: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:39: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:39: [GetSCRRegisterEntry] Passed
18:21:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:39: Data_Status_After Erases          : 0
18:21:39: CPRM Security Support             : No Security
18:21:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:39: Spec. Version                     : Version 3.0X
18:21:39: Extended Security Support         : Extended_Security_Not_Supported
18:21:39: Command Support                   : COMMAND_SUPPORT
18:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:39: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

18:21:39: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

18:21:39: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

18:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:39: [GetSCRRegisterEntry] Passed
18:21:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:39: Data_Status_After Erases          : 0
18:21:39: CPRM Security Support             : No Security
18:21:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:39: Spec. Version                     : Version 3.0X
18:21:39: Extended Security Support         : Extended_Security_Not_Supported
18:21:39: Command Support                   : COMMAND_SUPPORT
18:21:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:39: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

18:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:39: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4254 ] 
18:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:21:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:39: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:41: Host Frequency set to 25000 KHz
18:21:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:41: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F6C0>, 0x0, True) , Command count = 4255 ] 
18:21:41: [GO18_globalSetVolt]### Host voltage value is set.
18:21:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F150>, 0x0, False) , Command count = 4256 ] 
18:21:41: [GO18_globalSetVolt]### Host voltage value is set.
18:21:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4257 ] 
18:21:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4258 ] 
18:21:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4259 ] 
18:21:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37BA0>, <py_sfcl.CommandDataDefinition object at 0x05E37630>) , Command count = 4260 ] 
18:21:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FBD0>, <py_sfcl.CommandDataDefinition object at 0x05DB8E10>) , Command count = 4261 ] 
18:21:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:42: [ SetCardRCA(0x1, 0xD555) , Command count = 4262 ] 
18:21:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:42: Host Frequency set to 25000 KHz
18:21:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:42: ####CSD Registe 2.0 Values####
18:21:42: CSD_STRUCTURE                                 :0x1
18:21:42: Reserv1                                       :0x0
18:21:42: Time Access 1 TAAC                            :0xe
18:21:42: Time Access 2 NSAC*100                        :0x0
18:21:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:42: Card Command Classess CCC                     :0x5b5
18:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:42: DSR(driver stage register)  DSR_IMP           :0x0
18:21:42: Reserv2                                       :0x0
18:21:42: Device Size C_SIZE                            :0xedc8
18:21:42: Reserv3                                       :0x0
18:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:42: Reserv4                                       :0x0
18:21:42: Write Speed Factor R2W_FACTOR                 :0x2
18:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:42: FILE_FORMAT_GRP                               :0x0
18:21:42: COPY flag                                     :0x1
18:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:42: File_Format                                   :0x0
18:21:42: CRC                                           :0x0
18:21:42: ####CSD Registe Values####  

18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB300>, <py_sfcl.CommandDataDefinition object at 0x05E50E70>) , Command count = 4263 ] 
18:21:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E500F0>, <py_sfcl.CommandDataDefinition object at 0x05E508A0>) , Command count = 4264 ] 
18:21:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:42: [ SetBusWidth(0x4) , Command count = 4265 ] 
18:21:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4266 ] 
18:21:42: Protected Area Size 0x28000
18:21:42: Bus Width           2
18:21:42: Secure Mode         0
18:21:42: Speed  Class        4
18:21:42: Perf Move           0
18:21:42: Au Size             9
18:21:42: Erase Size          15
18:21:42: Erase Timeout       1
18:21:42: Erase offset        1
18:21:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4267 ] 
18:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:42: Host Frequency set to 100000 KHz
18:21:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:42: ####CSD Registe 2.0 Values####
18:21:42: CSD_STRUCTURE                                 :0x1
18:21:42: Reserv1                                       :0x0
18:21:42: Time Access 1 TAAC                            :0xe
18:21:42: Time Access 2 NSAC*100                        :0x0
18:21:42: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:42: Card Command Classess CCC                     :0x5b5
18:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:42: DSR(driver stage register)  DSR_IMP           :0x0
18:21:42: Reserv2                                       :0x0
18:21:42: Device Size C_SIZE                            :0xedc8
18:21:42: Reserv3                                       :0x0
18:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:42: Reserv4                                       :0x0
18:21:42: Write Speed Factor R2W_FACTOR                 :0x2
18:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:42: FILE_FORMAT_GRP                               :0x0
18:21:42: COPY flag                                     :0x1
18:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:42: File_Format                                   :0x0
18:21:42: CRC                                           :0x0
18:21:42: ####CSD Registe Values####  

18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50BA0>, <py_sfcl.CommandDataDefinition object at 0x05DAA120>) , Command count = 4268 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37480>, <py_sfcl.CommandDataDefinition object at 0x05E50210>) , Command count = 4269 ] 
18:21:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37DE0>, <py_sfcl.CommandDataDefinition object at 0x05E50030>) , Command count = 4270 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E592A0>, <py_sfcl.CommandDataDefinition object at 0x05E59A20>) , Command count = 4271 ] 
18:21:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F540>, <py_sfcl.CommandDataDefinition object at 0x05E37FC0>) , Command count = 4272 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F570>, <py_sfcl.CommandDataDefinition object at 0x05E59930>) , Command count = 4273 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E445D0>, <py_sfcl.CommandDataDefinition object at 0x05E44D80>) , Command count = 4274 ] 
18:21:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59CF0>, <py_sfcl.CommandDataDefinition object at 0x05E44930>) , Command count = 4275 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E372D0>, <py_sfcl.CommandDataDefinition object at 0x05E507B0>) , Command count = 4276 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAAB10>, <py_sfcl.CommandDataDefinition object at 0x05DAAE40>) , Command count = 4277 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59150>, <py_sfcl.CommandDataDefinition object at 0x05E447B0>) , Command count = 4278 ] 
18:21:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3ED50>, <py_sfcl.CommandDataDefinition object at 0x05E44600>) , Command count = 4279 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052A5600>, <py_sfcl.CommandDataDefinition object at 0x05E50720>) , Command count = 4280 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E596F0>, <py_sfcl.CommandDataDefinition object at 0x05E55300>) , Command count = 4281 ] 
18:21:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E501E0>, <py_sfcl.CommandDataDefinition object at 0x05E550F0>) , Command count = 4282 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50390>, <py_sfcl.CommandDataDefinition object at 0x05E592D0>) , Command count = 4283 ] 
18:21:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:42: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

18:21:42: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

18:21:42: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:42: [GetSCRRegisterEntry] Passed
18:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:42: Data_Status_After Erases          : 0
18:21:42: CPRM Security Support             : No Security
18:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:42: Spec. Version                     : Version 3.0X
18:21:42: Extended Security Support         : Extended_Security_Not_Supported
18:21:42: Command Support                   : COMMAND_SUPPORT
18:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:42: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

18:21:42: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
18:21:42: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

18:21:42: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

18:21:42: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:42: Perform Power Off and On.
18:21:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4284 ] 
18:21:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44AB0>, <py_sfcl.CommandDataDefinition object at 0x05E59990>) , Command count = 4285 ] 
18:21:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55600>, <py_sfcl.CommandDataDefinition object at 0x05E55930>) , Command count = 4286 ] 
18:21:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4287 ] 
18:21:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:44: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:46: Host Frequency set to 25000 KHz
18:21:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:46: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E44240>, 0x0, True) , Command count = 4288 ] 
18:21:46: [GO18_globalSetVolt]### Host voltage value is set.
18:21:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E505A0>, 0x0, False) , Command count = 4289 ] 
18:21:46: [GO18_globalSetVolt]### Host voltage value is set.
18:21:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4290 ] 
18:21:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4291 ] 
18:21:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4292 ] 
18:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDB0>, <py_sfcl.CommandDataDefinition object at 0x05E59DB0>) , Command count = 4293 ] 
18:21:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EDB0>, <py_sfcl.CommandDataDefinition object at 0x05E50DE0>) , Command count = 4294 ] 
18:21:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4295 ] 
18:21:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:47: Host Frequency set to 25000 KHz
18:21:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:47: ####CSD Registe 2.0 Values####
18:21:47: CSD_STRUCTURE                                 :0x1
18:21:47: Reserv1                                       :0x0
18:21:47: Time Access 1 TAAC                            :0xe
18:21:47: Time Access 2 NSAC*100                        :0x0
18:21:47: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:47: Card Command Classess CCC                     :0x5b5
18:21:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:47: DSR(driver stage register)  DSR_IMP           :0x0
18:21:47: Reserv2                                       :0x0
18:21:47: Device Size C_SIZE                            :0xedc8
18:21:47: Reserv3                                       :0x0
18:21:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:47: Reserv4                                       :0x0
18:21:47: Write Speed Factor R2W_FACTOR                 :0x2
18:21:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:47: FILE_FORMAT_GRP                               :0x0
18:21:47: COPY flag                                     :0x1
18:21:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:47: File_Format                                   :0x0
18:21:47: CRC                                           :0x0
18:21:47: ####CSD Registe Values####  

18:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:47: [GetSCRRegisterEntry] Passed
18:21:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:47: Data_Status_After Erases          : 0
18:21:47: CPRM Security Support             : No Security
18:21:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:47: Spec. Version                     : Version 3.0X
18:21:47: Extended Security Support         : Extended_Security_Not_Supported
18:21:47: Command Support                   : COMMAND_SUPPORT
18:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D50>, <py_sfcl.CommandDataDefinition object at 0x05E3E510>) , Command count = 4296 ] 
18:21:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50A80>, <py_sfcl.CommandDataDefinition object at 0x05E50A20>) , Command count = 4297 ] 
18:21:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:47: [ SetBusWidth(0x4) , Command count = 4298 ] 
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4299 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4300 ] 
18:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:47: Host Frequency set to 100000 KHz
18:21:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:47: ####CSD Registe 2.0 Values####
18:21:47: CSD_STRUCTURE                                 :0x1
18:21:47: Reserv1                                       :0x0
18:21:47: Time Access 1 TAAC                            :0xe
18:21:47: Time Access 2 NSAC*100                        :0x0
18:21:47: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:47: Card Command Classess CCC                     :0x5b5
18:21:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:47: DSR(driver stage register)  DSR_IMP           :0x0
18:21:47: Reserv2                                       :0x0
18:21:47: Device Size C_SIZE                            :0xedc8
18:21:47: Reserv3                                       :0x0
18:21:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:47: Reserv4                                       :0x0
18:21:47: Write Speed Factor R2W_FACTOR                 :0x2
18:21:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:47: FILE_FORMAT_GRP                               :0x0
18:21:47: COPY flag                                     :0x1
18:21:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:47: File_Format                                   :0x0
18:21:47: CRC                                           :0x0
18:21:47: ####CSD Registe Values####  

18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3E9F0>, <py_sfcl.CommandDataDefinition object at 0x05E3E720>) , Command count = 4301 ] 
18:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37570>, <py_sfcl.CommandDataDefinition object at 0x05E50F90>) , Command count = 4302 ] 
18:21:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:47: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:47: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052AAF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4303 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

18:21:47: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E44D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4304 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4305 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05278180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4306 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E50540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4307 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E504E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4308 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
18:21:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
18:21:47: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]Set Password = 123456 
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A0F0>, <py_sfcl.CommandDataDefinition object at 0x05E50540>) , Command count = 4309 ] 
18:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50240>, <py_sfcl.CommandDataDefinition object at 0x05E50E10>) , Command count = 4310 ] 
18:21:47: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59360>, <py_sfcl.CommandDataDefinition object at 0x05E4F690>) , Command count = 4311 ] 
18:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59D80>, <py_sfcl.CommandDataDefinition object at 0x05E4FD50>) , Command count = 4312 ] 
18:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:47: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:47: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:47: [GetSCRRegisterEntry] Passed
18:21:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:47: Data_Status_After Erases          : 0
18:21:47: CPRM Security Support             : No Security
18:21:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:47: Spec. Version                     : Version 3.0X
18:21:47: Extended Security Support         : Extended_Security_Not_Supported
18:21:47: Command Support                   : COMMAND_SUPPORT
18:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:47: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4313 ] 
18:21:47: Protected Area Size 0x28000
18:21:47: Bus Width           2
18:21:47: Secure Mode         0
18:21:47: Speed  Class        4
18:21:47: Perf Move           0
18:21:47: Au Size             9
18:21:47: Erase Size          15
18:21:47: Erase Timeout       1
18:21:47: Erase offset        1
18:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:47: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call block blockRESET
18:21:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4314 ] 
18:21:49: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:21:49: [DVTCommonLib]### VOLA from card : 0x1
18:21:49: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:21:49: [DVTCommonLib]### Reserved bits from card : 0x0
18:21:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB570>, <py_sfcl.CommandDataDefinition object at 0x05E4F300>) , Command count = 4315 ] 
18:21:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37900>, <py_sfcl.CommandDataDefinition object at 0x05E504E0>) , Command count = 4316 ] 
18:21:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:49: [ SetCardRCA(0x1, 0xD555) , Command count = 4317 ] 
18:21:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:49: [ SelectCard(0x1, True) , Command count = 4318 ] 
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442D0>, <py_sfcl.CommandDataDefinition object at 0x05E50870>) , Command count = 4319 ] 
18:21:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:21:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:49: [GetSCRRegisterEntry] Failed
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:21:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E502D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4320 ] 
18:21:49: [ GetCardStatus() , Command count = 4321 ] 
18:21:49: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:49: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock + Status + Get SCR & SD Status  (START)
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59780>, <py_sfcl.CommandDataDefinition object at 0x052CDD80>) , Command count = 4322 ] 
18:21:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50D20>, <py_sfcl.CommandDataDefinition object at 0x05E4F720>) , Command count = 4323 ] 
18:21:49: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E590F0>, <py_sfcl.CommandDataDefinition object at 0x05E59450>) , Command count = 4324 ] 
18:21:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59300>, <py_sfcl.CommandDataDefinition object at 0x05E4FD20>) , Command count = 4325 ] 
18:21:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:21:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:49: [GetSCRRegisterEntry] Passed
18:21:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:49: Data_Status_After Erases          : 0
18:21:49: CPRM Security Support             : No Security
18:21:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:49: Spec. Version                     : Version 3.0X
18:21:49: Extended Security Support         : Extended_Security_Not_Supported
18:21:49: Command Support                   : COMMAND_SUPPORT
18:21:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:49: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:21:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4326 ] 
18:21:49: Protected Area Size 0x28000
18:21:49: Bus Width           0
18:21:49: Secure Mode         0
18:21:49: Speed  Class        4
18:21:49: Perf Move           0
18:21:49: Au Size             9
18:21:49: Erase Size          15
18:21:50: Erase Timeout       1
18:21:50: Erase offset        1
18:21:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Lock + Status + Get SCR & SD Status  (START)
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50990>, <py_sfcl.CommandDataDefinition object at 0x052BBD80>) , Command count = 4327 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E555D0>, <py_sfcl.CommandDataDefinition object at 0x05E55540>) , Command count = 4328 ] 
18:21:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E50C60>, <py_sfcl.CommandDataDefinition object at 0x05E4F330>) , Command count = 4329 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDDE0>, <py_sfcl.CommandDataDefinition object at 0x05E4F6F0>) , Command count = 4330 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect failed
18:21:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:50: [GetSCRRegisterEntry] Failed
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect failed
18:21:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4F5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4331 ] 
18:21:50: [ GetCardStatus() , Command count = 4332 ] 
18:21:50: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:50: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### Get SD Status Failed as expected.
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Unlock the card 
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E502D0>, <py_sfcl.CommandDataDefinition object at 0x05E59480>) , Command count = 4333 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4FFC0>, <py_sfcl.CommandDataDefinition object at 0x05E4F930>) , Command count = 4334 ] 
18:21:50: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E597B0>, <py_sfcl.CommandDataDefinition object at 0x05E4FAB0>) , Command count = 4335 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59240>, <py_sfcl.CommandDataDefinition object at 0x0519DFC0>) , Command count = 4336 ] 
18:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect OK
18:21:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:50: [GetSCRRegisterEntry] Passed
18:21:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:50: Data_Status_After Erases          : 0
18:21:50: CPRM Security Support             : No Security
18:21:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:50: Spec. Version                     : Version 3.0X
18:21:50: Extended Security Support         : Extended_Security_Not_Supported
18:21:50: Command Support                   : COMMAND_SUPPORT
18:21:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect OK
18:21:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E37F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4337 ] 
18:21:50: Protected Area Size 0x28000
18:21:50: Bus Width           0
18:21:50: Secure Mode         0
18:21:50: Speed  Class        4
18:21:50: Perf Move           0
18:21:50: Au Size             9
18:21:50: Erase Size          15
18:21:50: Erase Timeout       1
18:21:50: Erase offset        1
18:21:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:50: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] call blockRESET
18:21:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, False, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4338 ] 
18:21:53: [DVTCommonLib]### Response of CardReset : 0xC1FF8000
18:21:53: [DVTCommonLib]### VOLA from card : 0x1
18:21:53: [DVTCommonLib]### CMD Pattern from card : 0xAA
18:21:53: [DVTCommonLib]### Reserved bits from card : 0x0
18:21:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59C60>, <py_sfcl.CommandDataDefinition object at 0x05E59600>) , Command count = 4339 ] 
18:21:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F240>, <py_sfcl.CommandDataDefinition object at 0x05E76240>) , Command count = 4340 ] 
18:21:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:53: [ SetCardRCA(0x1, 0xD555) , Command count = 4341 ] 
18:21:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:53: [ SelectCard(0x1, True) , Command count = 4342 ] 
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SCR Verify expect Illegal command
18:21:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:53: [GetSCRRegisterEntry] Failed
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESET Get SCR = illegal Command as EXPECTED
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Check SD Status Verify expect Illegal command
18:21:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4343 ] 
18:21:53: [ GetCardStatus() , Command count = 4344 ] 
18:21:53: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
18:21:53: [DVTCommonLib]### Exception_Details :Card is reporting illegal command
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] After RESETGet SD Status = illegal Command as EXPECTED
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] clear password
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F5D0>, <py_sfcl.CommandDataDefinition object at 0x05E4F3C0>) , Command count = 4345 ] 
18:21:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A1B0>, <py_sfcl.CommandDataDefinition object at 0x05E59F00>) , Command count = 4346 ] 
18:21:53: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py_sfcl.CommandDataDefinition object at 0x05E50E40>) , Command count = 4347 ] 
18:21:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py_sfcl.CommandDataDefinition object at 0x05E4FDE0>) , Command count = 4348 ] 
18:21:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]##### CARD IS in Ready for Data as expected.
18:21:53: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
18:21:53: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
18:21:53: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
18:21:53: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:53: Perform Power Off and On.
18:21:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 4349 ] 
18:21:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59AB0>, <py_sfcl.CommandDataDefinition object at 0x05E502A0>) , Command count = 4350 ] 
18:21:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E760F0>, <py_sfcl.CommandDataDefinition object at 0x05E76240>) , Command count = 4351 ] 
18:21:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4352 ] 
18:21:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:55: [GO4_globalInitCard]### Switch to Specify Card Type
18:21:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:57: Host Frequency set to 25000 KHz
18:21:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:57: [GO18_globalSetVolt]### Set Host Voltage value.
18:21:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:21:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D2AC60>, 0x0, True) , Command count = 4353 ] 
18:21:57: [GO18_globalSetVolt]### Host voltage value is set.
18:21:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:21:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4F060>, 0x0, False) , Command count = 4354 ] 
18:21:57: [GO18_globalSetVolt]### Host voltage value is set.
18:21:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4355 ] 
18:21:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4356 ] 
18:21:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:21:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4357 ] 
18:21:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:21:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E10>, <py_sfcl.CommandDataDefinition object at 0x05E55390>) , Command count = 4358 ] 
18:21:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py_sfcl.CommandDataDefinition object at 0x05E55420>) , Command count = 4359 ] 
18:21:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:21:58: [ SetCardRCA(0x1, 0xD555) , Command count = 4360 ] 
18:21:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:21:58: Host Frequency set to 25000 KHz
18:21:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:21:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:58: ####CSD Registe 2.0 Values####
18:21:58: CSD_STRUCTURE                                 :0x1
18:21:58: Reserv1                                       :0x0
18:21:58: Time Access 1 TAAC                            :0xe
18:21:58: Time Access 2 NSAC*100                        :0x0
18:21:58: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:58: Card Command Classess CCC                     :0x5b5
18:21:58: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:58: DSR(driver stage register)  DSR_IMP           :0x0
18:21:58: Reserv2                                       :0x0
18:21:58: Device Size C_SIZE                            :0xedc8
18:21:58: Reserv3                                       :0x0
18:21:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:58: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:58: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:58: Reserv4                                       :0x0
18:21:58: Write Speed Factor R2W_FACTOR                 :0x2
18:21:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:58: FILE_FORMAT_GRP                               :0x0
18:21:58: COPY flag                                     :0x1
18:21:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:58: File_Format                                   :0x0
18:21:58: CRC                                           :0x0
18:21:58: ####CSD Registe Values####  

18:21:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:58: [GetSCRRegisterEntry] Passed
18:21:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:21:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:21:58: Data_Status_After Erases          : 0
18:21:58: CPRM Security Support             : No Security
18:21:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:21:58: Spec. Version                     : Version 3.0X
18:21:58: Extended Security Support         : Extended_Security_Not_Supported
18:21:58: Command Support                   : COMMAND_SUPPORT
18:21:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD80>, <py_sfcl.CommandDataDefinition object at 0x05E3EB70>) , Command count = 4361 ] 
18:21:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py_sfcl.CommandDataDefinition object at 0x05E55CC0>) , Command count = 4362 ] 
18:21:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:21:58: [ SetBusWidth(0x4) , Command count = 4363 ] 
18:21:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:21:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4364 ] 
18:21:58: Protected Area Size 0x28000
18:21:58: Bus Width           2
18:21:58: Secure Mode         0
18:21:58: Speed  Class        4
18:21:58: Perf Move           0
18:21:58: Au Size             9
18:21:58: Erase Size          15
18:21:58: Erase Timeout       1
18:21:58: Erase offset        1
18:21:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:21:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:21:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4365 ] 
18:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:21:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:21:58: Host Frequency set to 100000 KHz
18:21:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:21:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:58: ####CSD Registe 2.0 Values####
18:21:58: CSD_STRUCTURE                                 :0x1
18:21:58: Reserv1                                       :0x0
18:21:58: Time Access 1 TAAC                            :0xe
18:21:58: Time Access 2 NSAC*100                        :0x0
18:21:58: Data Transfer Rate TRAN_SPEED                 :0xb
18:21:58: Card Command Classess CCC                     :0x5b5
18:21:58: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:58: DSR(driver stage register)  DSR_IMP           :0x0
18:21:58: Reserv2                                       :0x0
18:21:58: Device Size C_SIZE                            :0xedc8
18:21:58: Reserv3                                       :0x0
18:21:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:58: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:58: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:58: Reserv4                                       :0x0
18:21:58: Write Speed Factor R2W_FACTOR                 :0x2
18:21:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:58: FILE_FORMAT_GRP                               :0x0
18:21:58: COPY flag                                     :0x1
18:21:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:58: File_Format                                   :0x0
18:21:58: CRC                                           :0x0
18:21:58: ####CSD Registe Values####  

18:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558A0>, <py_sfcl.CommandDataDefinition object at 0x05E37510>) , Command count = 4366 ] 
18:21:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E40>, <py_sfcl.CommandDataDefinition object at 0x05E55480>) , Command count = 4367 ] 
18:21:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:21:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:21:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
18:21:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

18:21:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:21:58: [GetSCRRegisterEntry] Failed
18:21:58: Failed Running script <module 'CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x8L (8) executing command 'CardGetStdStructure'
   Description : Card is reporting illegal command
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.STD_STRUCT object at 0x05E55B40>, <0x200/0x200, Spc, pat:0x0>)')
   Extended error information:
      Status         : 0x2000900
      Is busy?       : No
 
18:21:59: ########################################
18:21:59: ########################################
18:21:59: Stated Running script CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest 
18:21:59: ########################################
18:21:59: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest]###### Running SCR_SDStatus_AllResetTypesTest Test 
18:21:59: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest] ### TEST SCRIPT EXECUTION IS STARTED.
18:21:59: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest] Call Utility_Load_SCR_SDStatus_Variables
18:21:59: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

18:21:59: Perform Power Off and On.
18:21:59: Failed Running script <module 'CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
18:21:59: ########################################
18:21:59: ########################################
18:21:59: Stated Running script CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest 
18:21:59: ########################################
18:21:59: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest]###### Running SCRSDStatusSPISD Test 
18:21:59: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest] Started Execution 

18:21:59: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest]No SPI mode. Exiting the test! 

18:21:59: ########################################
18:21:59: Finished Running script CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest 
18:21:59: ########################################
18:21:59: ########################################
18:21:59: The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 4 error on running 
18:21:59: ########################################

2016-11-21 18:21:59: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5666_CallAll_SCR_SDStatus.py", line 129, in RunTestProcedure
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5666_CallAll_SCR_SDStatus.py", line 100, in Run



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'CH<NUM>_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 4 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   4348 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44180>, <py      933.935         3.1   read=  0, write=  0                 0       
   4349 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 0, 0, 1,      935.961       206.7   read=  0, write=  0                 C1FF8000
   4350 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D2A630>, <py      936.169         4.0   read=  0, write=  0                 0       
   4351 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59AB0>, <py      936.173         3.5   read=  0, write=  0                 0       
   4352 SetCardRCA(1, D555)                                                         936.176         1.3   read=  0, write=  0                 'Obj'   
   4353 SetVolt(<py_sfcl.SDVoltage object at 0x05E505A0>, 0, T)                     938.313        17.9   read=  0, write=  0                 0       
   4354 SetVolt(<py_sfcl.SDVoltage object at 0x05D2AC60>, 0, F)                     938.331        28.2   read=  0, write=  0                 0       
   4355 CardSetTimeOut(1F4, FA, 64)                                                 938.360         1.7   read=  0, write=  0                 0       
   4356 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,      938.362       208.6   read=  0, write=  0                 C1FF8000
   4357 SwitchVolt_CMD11(T, 0, 5)                                                   938.572         8.3   read=  0, write=  0                 0       
   4358 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E553C0>, <py      938.580         4.0   read=  0, write=  0                 0       
   4359 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55E10>, <py      938.584         3.6   read=  0, write=  0                 0       
   4360 SetCardRCA(1, D555)                                                         938.588         1.4   read=  0, write=  0                 'Obj'   
   4361 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DA50>, <py      938.766         3.1   read=  0, write=  0                 0       
   4362 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2DD80>, <py      938.769         6.0   read=  0, write=  0                 0       
   4363 SetBusWidth(4)                                                              938.775         3.6   read=  0, write=  0                 0       
   4364 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E762A0>, <200/20      938.779         7.3   read=  0, write=  0                 0       
   4365 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                            938.787         6.9   read=  0, write=  0                 0       
   4366 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E55B70>, <py      939.338         3.2   read=  0, write=  0                 0       
   4367 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E558A0>, <py      939.341       229.7   read=  0, write=  0                 0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:15:39


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    1            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    113 WrLbaNoData(0x0, 0x32000, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMEN           NA 2270.166410   NA                                  0       
    114 RdLbaNoData(0x0, 0x32000, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMEN           NA 2171.029699   NA                                  0       
     96 WrLbaNoData(0xADA26A, 0x261D9, <0x400/0x200, Arb>, py_sfcl.Pattern.INC           NA 1915.727865   NA                                  0       
     99 RdLbaNoData(0xADA26A, 0x261D9, <0x400/0x200, Arb>, py_sfcl.Pattern.INC           NA 1654.747639   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E59EA0>, <py           NA  385.739727   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E442A0>, <py           NA  354.422547   NA                                  0       
    250 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E55450>, <0x200/           NA  329.385948   NA                                  0       
    250 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DAA6F0>, <0x200/           NA  315.177291   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F030>, <py           NA  314.628831   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E504B0>, <py           NA  312.997938   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E44450>, <py           NA  307.760549   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052CDF30>, <py           NA  307.617774   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E37360>, <py           NA  303.646643   NA                                  0       
    250 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E3E8A0>, <0x200/           NA  303.293479   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E3EBD0>, <py           NA  294.084657   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E2D780>, <py           NA  292.717279   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C24E0>, <py           NA  292.152518   NA                                  0       
    250 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D2A120>, <0x200/           NA  287.759704   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E377B0>, <py           NA  282.870950   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4F900>, <py           NA  282.048411   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 4366


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:15:40.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 4 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

