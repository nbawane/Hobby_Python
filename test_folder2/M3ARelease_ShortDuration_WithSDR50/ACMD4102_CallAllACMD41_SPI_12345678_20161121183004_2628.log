18:29:58: Sata Disconnector Board found in COM1.
18:30:02: *****************************************************

18:30:02: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

18:30:02: *                                                   *

18:30:02: *  Compatibility with this version is not verified! *

18:30:02: *****************************************************

18:30:04: [ DeviceSetupCompletion() , Command count = 7 ] 
18:30:05: Testname Mapping: ScriptName=[ACMD4102_CallAllACMD41_SPI] -> TestId=[ACMD4102]
18:30:05: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
18:30:05: [ GetPhysicalChipsInfo() , Command count = 9 ] 
18:30:05: [ GetFileSize(0xEA) , Command count = 10 ] 
18:30:05: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
18:30:05: [ GetFileSize(0x16) , Command count = 12 ] 
18:30:05: [ GetCardStatus() , Command count = 13 ] 
18:30:05: [ GetFileSize(0x18) , Command count = 14 ] 
18:30:05: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
18:30:05: [ GetFileSize(0x15) , Command count = 16 ] 
18:30:05: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
18:30:07: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
18:30:07: [ GetFileSize(0xE) , Command count = 18 ] 
18:30:07: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
18:30:07: [ GetFileSize(0x1E) , Command count = 20 ] 
18:30:07: [ GetCardStatus() , Command count = 21 ] 
18:30:07: [ GetFileSize(0x21) , Command count = 22 ] 
18:30:07: [ GetCardStatus() , Command count = 23 ] 
18:30:07: [ GetFileSize(0x33) , Command count = 24 ] 
18:30:07: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
18:30:07: [ GetFileSize(0x1F) , Command count = 26 ] 
18:30:07: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
18:30:07: [ GetFileSize(0x2A) , Command count = 28 ] 
18:30:07: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
18:30:07: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
18:30:07: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
18:30:07: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
18:30:07: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
18:30:07: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
18:30:07: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
18:30:07: [ GetFileSize(0x33) , Command count = 36 ] 
18:30:07: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
18:30:07: [ GetFileSize(0x33) , Command count = 38 ] 
18:30:07: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
18:30:07: [ GetIpVersionInfo() , Command count = 40 ] 
18:30:07: [ GetPhysicalChipsInfo() , Command count = 41 ] 
18:30:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05CDB7B0>, <0x200/0x200, Arb>) , Command count = 42 ] 
18:30:07: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=ACMD4102 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SPI --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 18:30:07
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : ACMD4102
   --sdconfiguration                                : SPI
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 38059689548
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: ACMD4102_CallAllACMD41_SPI >>>>>>>>>>>>>>>



18:30:08: MaxLba of the card: 0x3B72400 
18:30:10: ###### Running ACMD4102_CallAllACMD41_SPI Call All.
18:30:10: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4103_DVT_SD3_00_3_1_1_10_ACMD41_SDXC_SPIMode_SuccessfulScenarios ##########
18:30:16: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
18:30:16: [GO7_globalPreTestingSettings]### Default Initialization Start
18:30:16: [DVTCommonLib]###  SwitchHostVoltageRegion called
18:30:17: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
18:30:17: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

18:30:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
18:30:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
18:30:19: [ CardInit() , Command count = 47 ] 
18:30:19: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:30:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:30:19: ####CSD Registe 2.0 Values####
18:30:19: CSD_STRUCTURE                                 :0x1
18:30:19: Reserv1                                       :0x0
18:30:19: Time Access 1 TAAC                            :0xe
18:30:19: Time Access 2 NSAC*100                        :0x0
18:30:19: Data Transfer Rate TRAN_SPEED                 :0x32
18:30:19: Card Command Classess CCC                     :0x5b5
18:30:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:30:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:30:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:30:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:30:19: DSR(driver stage register)  DSR_IMP           :0x0
18:30:19: Reserv2                                       :0x0
18:30:19: Device Size C_SIZE                            :0xedc8
18:30:19: Reserv3                                       :0x0
18:30:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:30:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:30:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:30:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:30:19: Reserv4                                       :0x0
18:30:19: Write Speed Factor R2W_FACTOR                 :0x2
18:30:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:30:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:30:19: FILE_FORMAT_GRP                               :0x0
18:30:19: COPY flag                                     :0x1
18:30:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:30:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:30:19: File_Format                                   :0x0
18:30:19: CRC                                           :0x0
18:30:19: ####CSD Registe Values####  

18:30:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:30:19: ProductSerialNumber = 0x23482900
18:30:19: CardMaximumLBA      = 0x3b72400
18:30:19: CardCapacity        = 32G
18:30:19: Is card secure      = 0
18:30:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:30:19: [GO7_globalPreTestingSettings]### Default Initialization Completed 


18:30:19: [GO4_globalInitCard]### Switch to Specify Card Type
18:30:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:21: Host Frequency set to 25000 KHz
18:30:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:21: [GO18_globalSetVolt]### Set Host Voltage value.
18:30:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent= 100 mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:30:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DBEBA0>, 0x0, True) , Command count = 49 ] 
18:30:21: [GO18_globalSetVolt]### Host voltage value is set.
18:30:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=100 mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:30:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DBEF90>, 0x0, False) , Command count = 50 ] 
18:30:21: [GO18_globalSetVolt]### Host voltage value is set.
18:30:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
18:30:21: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:21: [ EnableACMD41() , Command count = 52 ] 
18:30:21: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:22: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 53 ] 
18:30:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:22: Host Frequency set to 25000 KHz
18:30:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 195]
18:30:22: ####CSD Registe 2.0 Values####
18:30:22: CSD_STRUCTURE                                 :0x1
18:30:22: Reserv1                                       :0x0
18:30:22: Time Access 1 TAAC                            :0xe
18:30:22: Time Access 2 NSAC*100                        :0x0
18:30:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:30:22: Card Command Classess CCC                     :0x5b5
18:30:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:30:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:30:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:30:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:30:22: DSR(driver stage register)  DSR_IMP           :0x0
18:30:22: Reserv2                                       :0x0
18:30:22: Device Size C_SIZE                            :0xedc8
18:30:22: Reserv3                                       :0x0
18:30:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:30:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:30:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:30:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:30:22: Reserv4                                       :0x0
18:30:22: Write Speed Factor R2W_FACTOR                 :0x2
18:30:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:30:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:30:22: FILE_FORMAT_GRP                               :0x0
18:30:22: COPY flag                                     :0x1
18:30:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:30:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:30:22: File_Format                                   :0x0
18:30:22: CRC                                           :0x61
18:30:22: ####CSD Registe Values####  

18:30:22: [G02_GlobalSetBusMode]### Not Setting the Bus Width !!!
18:30:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:30:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DBEB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 54 ] 
18:30:22: Protected Area Size 0x28000
18:30:22: Bus Width           0
18:30:22: Secure Mode         0
18:30:22: Speed  Class        4
18:30:22: Perf Move           0
18:30:22: Au Size             9
18:30:22: Erase Size          15
18:30:22: Erase Timeout       1
18:30:22: Erase offset        1
18:30:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:30:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:30:22: globalLSHostFreq: 25000
18:30:22: Host Frequency set to 25 KHz

18:30:22: Set Volt: 3.30
18:30:22: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:30:22: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:30:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DBECC0>, <None>, True) , Command count = 55 ] 
18:30:22: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:22: Set Volt: 3300
18:30:22: globalVDDHMaxCurrent : 100, PowerSupply: VDDH
18:30:22: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:30:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DBECC0>, <None>, False) , Command count = 56 ] 
18:30:22: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 57 ] 
18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:30:22: SendOCR: 1107263488
18:30:22: ExpectOCR: 3237969920
18:30:22: SendFirstOCR: 1107263488
18:30:22: SendNextOCR: 1107263488
18:30:22: SingleCommand: 0
18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:30:22: SingleCommandTestType: 1
18:30:22: Identification: 1
18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:30:22: ProtocolMode: 1
18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:30:22: VerifyType: 0
18:30:22: SendCMD0: 1
18:30:22: SendCMD8: 1
18:30:22: SendCMD58: 1
18:30:22: SetPower: 1
18:30:22: HcsXpcS18r000: 16744448
18:30:22: HcsXpcS18r001: 33521664
18:30:22: HcsXpcS18r010: 285179904
18:30:22: HcsXpcS18r011: 301957120
18:30:22: HcsXpcS18r100: 1090486272
18:30:22: HcsXpcS18r101: 1107263488
18:30:22: HcsXpcS18r110: 1358921728
18:30:22: HcsXpcS18r111: 1375698944
18:30:22: ReadyCcs18a000: 16744448
18:30:22: ReadyCcs18a001: 33521664
18:30:22: ReadyCcs18a010: 1090486272
18:30:22: ReadyCcs18a011: 1107263488
18:30:22: ReadyCcs18a100: 2164228096
18:30:22: ReadyCcs18a101: 2181005312
18:30:22: ReadyCcs18a110: 3237969920
18:30:22: ReadyCcs18a111: 3254747136
18:30:22: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:30:22: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.1 
18:30:22: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : Power On ->CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:30:22: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:30:24: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:24: [ EnableACMD41() , Command count = 58 ] 
18:30:24: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:24: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:30:24: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 59 ] 
18:30:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:24: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 60 ] 
18:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:24: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 61 ] 
18:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:25: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 62 ] 
18:30:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:27: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:27: [ EnableACMD41() , Command count = 63 ] 
18:30:27: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:27: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 64 ] 
18:30:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:27: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 65 ] 
18:30:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:27: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 66 ] 
18:30:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:27: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 67 ] 
18:30:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:29: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:29: [ EnableACMD41() , Command count = 68 ] 
18:30:29: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:29: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:30:30: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 69 ] 
18:30:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:30: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 70 ] 
18:30:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:30: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 71 ] 
18:30:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:30: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 72 ] 
18:30:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:30: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.2 
18:30:30: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:30:30: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:30:30: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:30: [ EnableACMD41() , Command count = 73 ] 
18:30:30: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:30: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:30:30: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 74 ] 
18:30:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:31: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 75 ] 
18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:31: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 76 ] 
18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:31: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 77 ] 
18:30:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:31: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:31: [ EnableACMD41() , Command count = 78 ] 
18:30:31: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:31: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 79 ] 
18:30:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:31: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:31: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 81 ] 
18:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:32: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 82 ] 
18:30:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:32: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:32: [ EnableACMD41() , Command count = 83 ] 
18:30:32: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:32: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:30:32: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 84 ] 
18:30:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:32: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 85 ] 
18:30:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:32: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 86 ] 
18:30:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:32: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 87 ] 
18:30:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:32: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.1 
18:30:32: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : Power On ->CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:30:32: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:30:32: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:32: [ EnableACMD41() , Command count = 88 ] 
18:30:32: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:32: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:30:32: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 89 ] 
18:30:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:33: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 90 ] 
18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:33: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 91 ] 
18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:33: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 92 ] 
18:30:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:33: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:33: [ EnableACMD41() , Command count = 93 ] 
18:30:33: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:33: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 94 ] 
18:30:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:33: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 95 ] 
18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:34: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 96 ] 
18:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:34: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 97 ] 
18:30:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:34: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:34: [ EnableACMD41() , Command count = 98 ] 
18:30:34: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:34: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:30:34: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 99 ] 
18:30:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:34: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 100 ] 
18:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:34: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 101 ] 
18:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:34: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 102 ] 
18:30:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:34: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.2 
18:30:34: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:30:34: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:30:34: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:34: [ EnableACMD41() , Command count = 103 ] 
18:30:34: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:34: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:30:35: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 104 ] 
18:30:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:35: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 105 ] 
18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:35: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 106 ] 
18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:35: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 107 ] 
18:30:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:35: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:35: [ EnableACMD41() , Command count = 108 ] 
18:30:35: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:35: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 109 ] 
18:30:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:35: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 110 ] 
18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:36: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 111 ] 
18:30:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:36: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 112 ] 
18:30:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:36: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:36: [ EnableACMD41() , Command count = 113 ] 
18:30:36: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:36: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:30:36: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 114 ] 
18:30:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:36: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 115 ] 
18:30:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:36: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 116 ] 
18:30:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:30:36: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 117 ] 
18:30:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:30:36: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4104_DVT_SD3_00_3_1_1_11_ACMD41_SDXC_SPIMode_FailScenarios ##########
18:30:36: [GO4_globalInitCard]### Switch to Specify Card Type
18:30:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:39: Host Frequency set to 25000 KHz
18:30:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:39: [GO18_globalSetVolt]### Set Host Voltage value.
18:30:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent= 100 mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DCB720>, 0x0, True) , Command count = 118 ] 
18:30:39: [GO18_globalSetVolt]### Host voltage value is set.
18:30:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=100 mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DCB330>, 0x0, False) , Command count = 119 ] 
18:30:39: [GO18_globalSetVolt]### Host voltage value is set.
18:30:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 120 ] 
18:30:39: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:39: [ EnableACMD41() , Command count = 121 ] 
18:30:39: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:39: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 122 ] 
18:30:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:39: Host Frequency set to 25000 KHz
18:30:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 195]
18:30:39: ####CSD Registe 2.0 Values####
18:30:39: CSD_STRUCTURE                                 :0x1
18:30:39: Reserv1                                       :0x0
18:30:39: Time Access 1 TAAC                            :0xe
18:30:39: Time Access 2 NSAC*100                        :0x0
18:30:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:30:39: Card Command Classess CCC                     :0x5b5
18:30:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:30:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:30:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:30:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:30:39: DSR(driver stage register)  DSR_IMP           :0x0
18:30:39: Reserv2                                       :0x0
18:30:39: Device Size C_SIZE                            :0xedc8
18:30:39: Reserv3                                       :0x0
18:30:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:30:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:30:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:30:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:30:39: Reserv4                                       :0x0
18:30:39: Write Speed Factor R2W_FACTOR                 :0x2
18:30:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:30:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:30:39: FILE_FORMAT_GRP                               :0x0
18:30:39: COPY flag                                     :0x1
18:30:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:30:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:30:39: File_Format                                   :0x0
18:30:39: CRC                                           :0x61
18:30:39: ####CSD Registe Values####  

18:30:39: [G02_GlobalSetBusMode]### Not Setting the Bus Width !!!
18:30:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:30:39: globalLSHostFreq: 25000
18:30:39: Host Frequency set to 25 KHz

18:30:39: Set Volt: 3.30
18:30:39: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:30:39: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DCB210>, <None>, True) , Command count = 123 ] 
18:30:39: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:39: Set Volt: 3300
18:30:39: globalVDDHMaxCurrent : 100, PowerSupply: VDDH
18:30:39: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DCB210>, <None>, False) , Command count = 124 ] 
18:30:39: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 125 ] 
18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:30:39: SendOCR: 1107263488
18:30:39: ExpectOCR: 3237969920
18:30:39: SendFirstOCR: 1107263488
18:30:39: SendNextOCR: 1107263488
18:30:39: SingleCommand: 0
18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:30:39: SingleCommandTestType: 1
18:30:39: Identification: 1
18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:30:39: ProtocolMode: 1
18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:30:39: VerifyType: 0
18:30:39: SendCMD0: 1
18:30:39: SendCMD8: 1
18:30:39: SendCMD58: 1
18:30:39: SetPower: 1
18:30:39: HcsXpcS18r000: 16744448
18:30:39: HcsXpcS18r001: 33521664
18:30:39: HcsXpcS18r010: 285179904
18:30:39: HcsXpcS18r011: 301957120
18:30:39: HcsXpcS18r100: 1090486272
18:30:39: HcsXpcS18r101: 1107263488
18:30:39: HcsXpcS18r110: 1358921728
18:30:39: HcsXpcS18r111: 1375698944
18:30:39: ReadyCcs18a000: 16744448
18:30:39: ReadyCcs18a001: 33521664
18:30:39: ReadyCcs18a010: 1090486272
18:30:39: ReadyCcs18a011: 1107263488
18:30:39: ReadyCcs18a100: 2164228096
18:30:39: ReadyCcs18a101: 2181005312
18:30:39: ReadyCcs18a110: 3237969920
18:30:39: ReadyCcs18a111: 3254747136
18:30:39: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:30:41: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:41: [ EnableACMD41() , Command count = 126 ] 
18:30:41: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:41: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:30:41: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 127 ] 
18:30:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:41: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:41: OCR : 1107263488
18:30:41: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:41: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 128 ] 
18:30:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:43: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:43: [ EnableACMD41() , Command count = 129 ] 
18:30:43: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:43: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:30:44: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 130 ] 
18:30:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:44: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:44: OCR : 1107263488
18:30:44: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:44: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 131 ] 
18:30:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:46: [ EnableACMD41() , Command count = 132 ] 
18:30:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:46: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:30:46: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 133 ] 
18:30:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:46: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:46: OCR : 1107263488
18:30:46: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:46: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 134 ] 
18:30:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:46: [ EnableACMD41() , Command count = 135 ] 
18:30:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:46: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:30:46: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 136 ] 
18:30:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:46: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:46: OCR : 1107263488
18:30:46: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 137 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:47: [ EnableACMD41() , Command count = 138 ] 
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 139 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:47: OCR : 1107263488
18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 140 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:47: [ EnableACMD41() , Command count = 141 ] 
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 142 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:47: OCR : 1107263488
18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 143 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:47: [ EnableACMD41() , Command count = 144 ] 
18:30:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:30:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 145 ] 
18:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:47: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:47: OCR : 1107263488
18:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 146 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:48: [ EnableACMD41() , Command count = 147 ] 
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 148 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:48: OCR : 1107263488
18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 149 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:48: [ EnableACMD41() , Command count = 150 ] 
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 151 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:48: OCR : 1107263488
18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 152 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:48: [ EnableACMD41() , Command count = 153 ] 
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 154 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:48: OCR : 1107263488
18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:48: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 155 ] 
18:30:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:48: [ EnableACMD41() , Command count = 156 ] 
18:30:48: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:48: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:30:49: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 157 ] 
18:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:49: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:49: OCR : 1107263488
18:30:49: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:49: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 158 ] 
18:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:49: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:49: [ EnableACMD41() , Command count = 159 ] 
18:30:49: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:49: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:30:49: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 160 ] 
18:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:49: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:30:49: OCR : 1107263488
18:30:49: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:30:49: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 161 ] 
18:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:49: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4106_DVT_SD3_00_3_1_1_13_ACMD41_SDandSPI_CombinedScenarios ##########
18:30:49: [GO4_globalInitCard]### Switch to Specify Card Type
18:30:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:51: Host Frequency set to 25000 KHz
18:30:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:51: [GO18_globalSetVolt]### Set Host Voltage value.
18:30:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent= 100 mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:30:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DDC5A0>, 0x0, True) , Command count = 162 ] 
18:30:51: [GO18_globalSetVolt]### Host voltage value is set.
18:30:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=100 mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:30:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DDC090>, 0x0, False) , Command count = 163 ] 
18:30:51: [GO18_globalSetVolt]### Host voltage value is set.
18:30:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 164 ] 
18:30:51: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:51: [ EnableACMD41() , Command count = 165 ] 
18:30:51: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:51: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 166 ] 
18:30:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:52: Host Frequency set to 25000 KHz
18:30:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 195]
18:30:52: ####CSD Registe 2.0 Values####
18:30:52: CSD_STRUCTURE                                 :0x1
18:30:52: Reserv1                                       :0x0
18:30:52: Time Access 1 TAAC                            :0xe
18:30:52: Time Access 2 NSAC*100                        :0x0
18:30:52: Data Transfer Rate TRAN_SPEED                 :0x32
18:30:52: Card Command Classess CCC                     :0x5b5
18:30:52: Max Read Data Block Length  READ_BL_LEN       :0x9
18:30:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:30:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:30:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:30:52: DSR(driver stage register)  DSR_IMP           :0x0
18:30:52: Reserv2                                       :0x0
18:30:52: Device Size C_SIZE                            :0xedc8
18:30:52: Reserv3                                       :0x0
18:30:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:30:52: Erase Sector Size SECTOR_SIZE                 :0x7f
18:30:52: Write Protect Group Size WP_GRP_SIZE          :0x0
18:30:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:30:52: Reserv4                                       :0x0
18:30:52: Write Speed Factor R2W_FACTOR                 :0x2
18:30:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:30:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:30:52: FILE_FORMAT_GRP                               :0x0
18:30:52: COPY flag                                     :0x1
18:30:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:30:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:30:52: File_Format                                   :0x0
18:30:52: CRC                                           :0x61
18:30:52: ####CSD Registe Values####  

18:30:52: [G02_GlobalSetBusMode]### Not Setting the Bus Width !!!
18:30:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:30:52: globalLSHostFreq: 25000
18:30:52: Host Frequency set to 25 KHz

18:30:52: Set Volt: 3.30
18:30:52: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:30:52: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:30:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DDC750>, <None>, True) , Command count = 167 ] 
18:30:52: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:52: Set Volt: 3300
18:30:52: globalVDDHMaxCurrent : 100, PowerSupply: VDDH
18:30:52: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:30:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DDC750>, <None>, False) , Command count = 168 ] 
18:30:52: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:30:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 169 ] 
18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:30:52: SendOCR: 1107263488
18:30:52: ExpectOCR: 3237969920
18:30:52: SendFirstOCR: 1107263488
18:30:52: SendNextOCR: 1107263488
18:30:52: SingleCommand: 0
18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:30:52: SingleCommandTestType: 1
18:30:52: Identification: 1
18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:30:52: ProtocolMode: 1
18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:30:52: VerifyType: 0
18:30:52: SendCMD0: 1
18:30:52: SendCMD8: 1
18:30:52: SendCMD58: 1
18:30:52: SetPower: 1
18:30:52: HcsXpcS18r000: 16744448
18:30:52: HcsXpcS18r001: 33521664
18:30:52: HcsXpcS18r010: 285179904
18:30:52: HcsXpcS18r011: 301957120
18:30:52: HcsXpcS18r100: 1090486272
18:30:52: HcsXpcS18r101: 1107263488
18:30:52: HcsXpcS18r110: 1358921728
18:30:52: HcsXpcS18r111: 1375698944
18:30:52: ReadyCcs18a000: 16744448
18:30:52: ReadyCcs18a001: 33521664
18:30:52: ReadyCcs18a010: 1090486272
18:30:52: ReadyCcs18a011: 1107263488
18:30:52: ReadyCcs18a100: 2164228096
18:30:52: ReadyCcs18a101: 2181005312
18:30:52: ReadyCcs18a110: 3237969920
18:30:52: ReadyCcs18a111: 3254747136
18:30:52: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:30:52: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: ReadType: 1 = ReadAll 
18:30:52: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: RU Sequence = 1, RU after RU, AU after RU, RuSequence = 0, Jump to random free AU
18:30:52: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: ExpectSequence: 1 = In Sequence, 2 = Out of sequence 
18:30:52: Call API GetFatAddr() to get fat addresses 
18:30:52: [ GetFileSize(0x2A) , Command count = 170 ] 
18:30:53: [ ReadFile(<0x200/0x200, Spc, pat:0xCE>, 0x2A, 0x1) , Command count = 171 ] 
18:30:53: FAT Start Address 8192: 8192
18:30:53: FAT Block Count 8192: 16384
18:30:53: FAT User Area First LBA 16384 : 24576
18:30:53: RU SIZE : 0
18:30:53: FAT Bitmap Start Address: 0
18:30:53: FAT Bitmap Block Count: 0
18:30:53: ###AUSizeCalculation[INFO]: Call GetSDStatus API to get AU Size value

18:30:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:30:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DDC660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 172 ] 
18:30:53: Protected Area Size 0x28000
18:30:53: Bus Width           0
18:30:53: Secure Mode         0
18:30:53: Speed  Class        4
18:30:53: Perf Move           0
18:30:53: Au Size             9
18:30:53: Erase Size          15
18:30:53: Erase Timeout       1
18:30:53: Erase offset        1
18:30:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:30:53: Au Size             9
18:30:53: AU : 8192
18:30:53: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: Call GlobalSecureFormat API.

18:30:53: [ CardSetTimeOut(0xC350, 0xC350, 0xC350) , Command count = 173 ] 
18:30:55: Power is Off
18:30:55: Power is On
18:30:55: Setting voltage to: 3
18:30:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DDCBA0>, <0x5000/0x200, Arb>, True) , Command count = 174 ] 
18:30:55: ######################################################################################################################################################
18:30:55: Resetting the card and passing init sequence again
18:30:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 175 ] 
18:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC540>, <py_sfcl.CommandDataDefinition object at 0x05DDC390>) , Command count = 176 ] 
18:30:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC570>, <py_sfcl.CommandDataDefinition object at 0x05DDCE70>) , Command count = 177 ] 
18:30:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:30:55: [ SetCardRCA(0x1, 0xD555) , Command count = 178 ] 
18:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC450>, <py_sfcl.CommandDataDefinition object at 0x05DDC300>) , Command count = 179 ] 
18:30:55: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64]
18:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC3C0>, <py_sfcl.CommandDataDefinition object at 0x05DDCF00>) , Command count = 180 ] 
18:30:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:30:55: [GlobalSecureFormat] ############ M-CONF values #########
18:30:55: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 181 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:30:56: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1, True) , Command count = 182 ] 
18:30:56: [GlobalSecureFormat] Buffer manipulate to get controller_ID
18:30:56: [GlobalSecureFormat] Card Info
18:30:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:30:56: ProductSerialNumber = 0x23482900
18:30:56: CardMaximumLBA      = 0x3b72400
18:30:56: CardCapacity        = 32G
18:30:56: Is card secure      = 0
18:30:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:30:56: [GlobalSecureFormat] Identify drive
18:30:56: [DVTCommonLib]### GetIdentifyDrive :###****Identify Drive****###
18:30:56: Model Number                     = SanDisk   COLIBRI                       
18:30:56: Serial number                    = 12345678
18:30:56: Max Lba                          = 0x3b9afff
18:30:56: Card Capacity                    = 32G
18:30:56: FW revision                      = 6RB C030
18:30:56: Internal Flashware Revision      = 6RB C030
18:30:56: Romware Revision                 = RRBZ1152
18:30:56: Device count                     = 0
18:30:56: Device Type                      = 69
18:30:56: Cell type                        = 0
18:30:56: Device Configuration             = 0
18:30:56: Memory type                      = 17664
18:30:56: Memory type string               = 256Mb-2LC x 0
18:30:56: Asic Id                          = 81
18:30:56: Asic Vendor                      = 4
18:30:56: Asic Revision                    = 0
18:30:56: Controller Type                  = 20740
18:30:56: Controller Type string           = Unknown Controller   UMC-J
18:30:56: Header Uncorrectable Error count = 0
18:30:56: Header 1 Bit Correction Counter  = 0
18:30:56: Header 2 Bit Correction Counter  = 0
18:30:56: Header 3 Bit Correction Counter  = 0
18:30:56: Header ECC Corrections           = Header correction counters (1-3)
18:30:56: Data ECC Corrections             = Data correction counters (1-10)
18:30:56: Data Uncorrectable error count   = 0
18:30:56: Data 1 Bit Correction Count      = 0
18:30:56: Data 2 Bit Correction Count      = 0
18:30:56: Data 3 Bit Correction Count      = 0
18:30:56: Data 4 Bit Correction Count      = 0
18:30:56: Data 5 Bit Correction Count      = 0
18:30:56: Data 6 Bit Correction Count      = 0
18:30:56: Data 7 Bit Correction Count      = 0
18:30:56: Data 8 Bit Correction Count      = 0
18:30:56: Data 9 Bit Correction Count      = 0
18:30:56: Data 10 Bit Correction Count     = 0
18:30:56: [DVTCommonLib]### GetIdentifyDrive :###**** Identify Drive****###
18:30:56: [GlobalSecureFormat] Write production file
18:30:56: [GlobalSecureFormat] Write Hidden System file
18:30:56: [GlobalSecureFormat] Indicate Secure format process
18:30:56: [GlobalSecureFormat] Write all 16 MKB files
18:30:56:  Writing MKB file [0]
18:30:56:  Writing MKB file [1]
18:30:56:  Writing MKB file [2]
18:30:56:  Writing MKB file [3]
18:30:56:  Writing MKB file [4]
18:30:56:  Writing MKB file [5]
18:30:56:  Writing MKB file [6]
18:30:56:  Writing MKB file [7]
18:30:56:  Writing MKB file [8]
18:30:56:  Writing MKB file [9]
18:30:56:  Writing MKB file [10]
18:30:56:  Writing MKB file [11]
18:30:56:  Writing MKB file [12]
18:30:56:  Writing MKB file [13]
18:30:56:  Writing MKB file [14]
18:30:56:  Writing MKB file [15]
18:30:57: [GlobalSecureFormat] SET Timout values
18:30:57: [ CardSetTimeOut(0xBB8, 0xBB8, 0xBB8) , Command count = 183 ] 
18:30:57: [GO4_globalInitCard]### Switch to Specify Card Type
18:30:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:59: Host Frequency set to 25000 KHz
18:30:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:59: [GO18_globalSetVolt]### Set Host Voltage value.
18:30:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent= 100 mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:30:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE6330>, 0x0, True) , Command count = 184 ] 
18:30:59: [GO18_globalSetVolt]### Host voltage value is set.
18:30:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=100 mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:30:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE6150>, 0x0, False) , Command count = 185 ] 
18:30:59: [GO18_globalSetVolt]### Host voltage value is set.
18:30:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 186 ] 
18:30:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:30:59: [ EnableACMD41() , Command count = 187 ] 
18:30:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:30:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:30:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 188 ] 
18:30:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:30:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:30:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:30:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:30:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:30:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:30:59: Host Frequency set to 25000 KHz
18:30:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is None
18:30:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 195]
18:30:59: ####CSD Registe 2.0 Values####
18:30:59: CSD_STRUCTURE                                 :0x1
18:30:59: Reserv1                                       :0x0
18:30:59: Time Access 1 TAAC                            :0xe
18:30:59: Time Access 2 NSAC*100                        :0x0
18:30:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:30:59: Card Command Classess CCC                     :0x5b5
18:30:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:30:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:30:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:30:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:30:59: DSR(driver stage register)  DSR_IMP           :0x0
18:30:59: Reserv2                                       :0x0
18:30:59: Device Size C_SIZE                            :0xedc8
18:30:59: Reserv3                                       :0x0
18:30:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:30:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:30:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:30:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:30:59: Reserv4                                       :0x0
18:30:59: Write Speed Factor R2W_FACTOR                 :0x2
18:30:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:30:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:30:59: FILE_FORMAT_GRP                               :0x0
18:30:59: COPY flag                                     :0x1
18:30:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:30:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:30:59: File_Format                                   :0x0
18:30:59: CRC                                           :0x61
18:30:59: ####CSD Registe Values####  

18:30:59: [G02_GlobalSetBusMode]### Not Setting the Bus Width !!!
18:30:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:30:59:  [INFO]: CMD0 -> CMD8 -> CMD58 -> ACMD41 -> Error 
18:30:59:  [INFO]: CMD0 -> CMD8 -> ACMD41 (XPC=1)  ->Verify -> CMD20 
18:30:59:  [INFO]: CMD0 -> CMD8 -> CMD58 -> ACMD41 -> CMD58 ->Verify 
18:31:01: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:31:01: [ EnableACMD41() , Command count = 189 ] 
18:31:01: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:31:01: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:31:01: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 190 ] 
18:31:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:31:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:31:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:31:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:31:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:31:01: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:31:03: [DVTCommonLib]### Reset the card with OCR value : 0x51FF8000
18:31:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, 0x1, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 191 ] 
18:31:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:31:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:31:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:31:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:31:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:31:03: localVariables['ReadyCcs18a111'] = 3254747136
18:31:03: ###### Running ACMD4129_Utility_UHS_Reset [Info] : GET CARD CAPACITY 
18:31:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:31:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 192 ] 
18:31:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:31:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6A80>, <py_sfcl.CommandDataDefinition object at 0x05DE6630>) , Command count = 193 ] 
18:31:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE63C0>, <py_sfcl.CommandDataDefinition object at 0x05DE6F90>) , Command count = 194 ] 
18:31:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 170, 170, 5, 0, 22]
18:31:03: [ SetCardRCA(0x1, 0xAAAA) , Command count = 195 ] 
18:31:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE62A0>, <py_sfcl.CommandDataDefinition object at 0x05DE6780>) , Command count = 196 ] 
18:31:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:31:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:31:04: [ SetBusWidth(0x4) , Command count = 197 ] 
18:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:31:04: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 198 ] 
18:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:100', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[1] index, Response Value : 0x801F
18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[2] index, Response Value : 0xC001
18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[3] index, Response Value : 0x800F
18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[4] index, Response Value : 0x800F
18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[5] index, Response Value : 0x8001
18:31:04: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[6] index, Response Value : 0x8001
18:31:04: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare
18:31:04: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare 

18:31:04: VS_Flag========================1
18:31:04: supported========================[32799, 49153, 32783, 32783, 32769, 32769]

2016-11-21 18:31:04: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4102_CallAllACMD41_SPI.py", line 94, in RunTestProcedure
     self.__ACMD4102_CallAllACMD41_SPIObj.Run(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4102_CallAllACMD41_SPI.py", line 68, in Run
     self.__SDandSPI_CombinedScenarios.Run(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4106_DVT_SD3_00_3_1_1_13_ACMD41_SDandSPI_CombinedScenarios.py", line 98, in Run
     ResetUtil.Reset(self.__testSpace, self.__optionValues).Run(randomObj, globalProjectConfVar, localVariables)
   File "C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4122_Utility_Reset.py", line 268, in Run
     UHS_Reset.UHS_Reset(self.__testSpace, self.__optionValues).Run(randomObj, globalProjectConfVar, localVariables,SetPower)
   File "C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4129_Utility_UHS_Reset.py", line 160, in Run
     if RANDOM_BLOCK == 0:



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 InvalidTest
    UnboundLocalError
       local variable 'RANDOM_BLOCK' referenced before assignment



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 UnboundLocalError:local variable 'RANDOM_BLOCK' referenced before assignment


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   179 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC570>, <py       57.381         3.3   read=  0, write=  0                 0       
   180 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC450>, <py       57.385         3.2   read=  0, write=  0                 0       
   181 SendDiagnostic(<200/200, 0>, [9A,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], 0, 1)       57.420        19.1   read=  0, write=  0                 0       
   182 SendDiagnostic(<200/200, 0>, [9A,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], 0, 1,       57.865        16.9   read=  0, write=  0                 0       
   183 CardSetTimeOut(BB8, BB8, BB8)                                                58.932         1.8   read=  0, write=  0                 0       
   184 SetVolt(<py_sfcl.SDVoltage object at 0x05DE60C0>, 0, T)                      61.023        17.9   read=  0, write=  0                 0       
   185 SetVolt(<py_sfcl.SDVoltage object at 0x05DE6330>, 0, F)                      61.041        28.1   read=  0, write=  0                 0       
   186 CardSetTimeOut(1F4, FA, 64)                                                  61.070         1.7   read=  0, write=  0                 0       
   187 EnableACMD41()                                                               61.072         1.3   read=  0, write=  0                 'Obj'   
   188 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 41FF8000, 1, T, <200/200, 0>, 0       61.074       247.7   read=  0, write=  0                 C0FF8000
   189 EnableACMD41()                                                               63.381         1.4   read=  0, write=  0                 'Obj'   
   190 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, FF8000, 1, T, <200/200, 0>, 0,        63.383       243.6   read=  0, write=  0                 C0FF8000
   191 CardReset(py_sfcl.CARD_MODE.SD, 51FF8000, 1, 1, <200/200, 0>, 0, 0, 1,       65.648       209.2   read=  0, write=  0                 C1FF8000
   192 SwitchVolt_CMD11(T, 0, 5)                                                    65.858         8.4   read=  0, write=  0                 0       
   193 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DDC3C0>, <py       65.867         4.0   read=  0, write=  0                 0       
   194 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE6A80>, <py       65.871         3.5   read=  0, write=  0                 0       
   195 SetCardRCA(1, AAAA)                                                          65.875         1.4   read=  0, write=  0                 'Obj'   
   196 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE63C0>, <py       65.958         3.1   read=  0, write=  0                 0       
   197 SetBusWidth(4)                                                               65.961         3.6   read=  0, write=  0                 0       
   198 CardSwitchCmd(F, [F,F,F,F,F,F], <40/200, 0>, 40)                             65.965         7.2   read=  0, write=  0                 0       

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   -----------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:01:05


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          47           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            1            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

   170 GetFileSize(0x2A)                                                                NA  530.417971   NA                                  1       
   171 ReadFile(<0x200/0x200, Spc, pat:0xCE>, 0x2A, 0x1)                                NA  527.593264   NA                                  0       
    44 SwitchHostVoltageRegion(False)                                                   NA  304.900827   NA                                  0       
   133 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0           NA  262.767778   NA                                  3237969920
   127 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x2           NA  262.763552   NA                                  3237969920
   130 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x           NA  262.513319   NA                                  3237969920
    69 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0           NA  259.782185   NA                                  3237969920
    64 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  259.508106   NA                                  3237969920
    59 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0           NA  258.277466   NA                                  3237969920
   188 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  247.742317   NA                                  3237969920
   190 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x2           NA  243.592491   NA                                  3237969920
   122 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  242.012611   NA                                  3237969920
   166 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  231.966157   NA                                  3237969920
    53 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  227.701326   NA                                  3237969920
   191 CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, 0x1, <0x200/0x200, Sp           NA  209.181656   NA                                  3254747136
   175 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x           NA  207.232011   NA                                  3254747136
    46 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x           NA  203.899291   NA                                  3254747136
    76 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  182.883628   NA                                  0       
   105 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  181.405169   NA                                  0       
    90 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  181.342988   NA                                  0       

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 197


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

UnboundLocalError error at 00:01:06.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 UnboundLocalError:local variable 'RANDOM_BLOCK' referenced before assignment


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

