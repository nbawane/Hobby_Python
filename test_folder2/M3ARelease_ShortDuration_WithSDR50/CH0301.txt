10:14:16: Sata Disconnector Board found in COM1.
10:14:20: ***************************************************** 

10:14:20: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

10:14:20: *                                                   * 

10:14:20: *  Compatibility with this version is not verified! * 

10:14:20: ***************************************************** 

10:14:22: [ DeviceSetupCompletion() , Command count = 7 ] 
10:14:22: Testname Mapping: ScriptName=[CH0301_CallAllChapter3Scripts] -> TestId=[CH0301]
10:14:22: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
10:14:22: [ GetPhysicalChipsInfo() , Command count = 9 ] 
10:14:22: [ GetFileSize(0xEA) , Command count = 10 ] 
10:14:23: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
10:14:23: [ GetFileSize(0x16) , Command count = 12 ] 
10:14:23: [ GetCardStatus() , Command count = 13 ] 
10:14:23: [ GetFileSize(0x18) , Command count = 14 ] 
10:14:23: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
10:14:23: [ GetFileSize(0x15) , Command count = 16 ] 
10:14:23: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
10:14:26: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
10:14:26: [ GetFileSize(0xE) , Command count = 18 ] 
10:14:26: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
10:14:26: [ GetFileSize(0x1E) , Command count = 20 ] 
10:14:26: [ GetCardStatus() , Command count = 21 ] 
10:14:26: [ GetFileSize(0x21) , Command count = 22 ] 
10:14:26: [ GetCardStatus() , Command count = 23 ] 
10:14:26: [ GetFileSize(0x33) , Command count = 24 ] 
10:14:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
10:14:26: [ GetFileSize(0x1F) , Command count = 26 ] 
10:14:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
10:14:26: [ GetFileSize(0x2A) , Command count = 28 ] 
10:14:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
10:14:26: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
10:14:26: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
10:14:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
10:14:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
10:14:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
10:14:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
10:14:26: [ GetFileSize(0x33) , Command count = 36 ] 
10:14:26: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
10:14:26: [ GetFileSize(0x33) , Command count = 38 ] 
10:14:26: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
10:14:26: [ GetIpVersionInfo() , Command count = 40 ] 
10:14:27: [ GetPhysicalChipsInfo() , Command count = 41 ] 
10:14:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DCEFC0>, <0x200/0x200, Arb>) , Command count = 42 ] 
10:14:27: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=CH0301 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\Maddileti_Results\CH0301.txt
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-22 10:14:27
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : CH0301
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 22668401378
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\Maddileti_Results\CH0301.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: CH0301_CallAllChapter3Scripts >>>>>>>>>>>>>>>



10:14:27: ###### Running Chapter 3 All scripts  ######
10:14:27: Stated Running Chapter 3 Scripts 

10:14:27: ########################################
10:14:27: Stated Running script CH030101_SDBusMode 
10:14:27: ########################################
10:14:27: MaxLba of the card: 0x3B72400 
10:14:31: ###### Running Write/Read in SD Bus Mode Test ######
10:14:31: [CH030101_SDBusMode]###[INFO] Execution Started 
 
10:14:38: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
10:14:38: [GO7_globalPreTestingSettings]### Default Initialization Start
10:14:38: [DVTCommonLib]###  SwitchHostVoltageRegion called
10:14:38: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
10:14:38: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

10:14:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
10:14:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
10:14:40: [ CardInit() , Command count = 47 ] 
10:14:40: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

10:14:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:40: ####CSD Registe 2.0 Values####
10:14:40: CSD_STRUCTURE                                 :0x1
10:14:40: Reserv1                                       :0x0
10:14:40: Time Access 1 TAAC                            :0xe
10:14:40: Time Access 2 NSAC*100                        :0x0
10:14:40: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:40: Card Command Classess CCC                     :0x5b5
10:14:40: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:40: DSR(driver stage register)  DSR_IMP           :0x0
10:14:40: Reserv2                                       :0x0
10:14:40: Device Size C_SIZE                            :0xedc8
10:14:40: Reserv3                                       :0x0
10:14:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:40: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:40: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:40: Reserv4                                       :0x0
10:14:40: Write Speed Factor R2W_FACTOR                 :0x2
10:14:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:40: FILE_FORMAT_GRP                               :0x0
10:14:40: COPY flag                                     :0x1
10:14:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:40: File_Format                                   :0x0
10:14:40: CRC                                           :0x0
10:14:40: ####CSD Registe Values####  

10:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:40: ProductSerialNumber = 0x23482900
10:14:40: CardMaximumLBA      = 0x3b72400
10:14:40: CardCapacity        = 32G
10:14:40: Is card secure      = 0
10:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:40: [GO7_globalPreTestingSettings]### Default Initialization Completed 


10:14:40: [GO4_globalInitCard]### Switch to Specify Card Type
10:14:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:42: Host Frequency set to 25000 KHz
10:14:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:42: [GO18_globalSetVolt]### Set Host Voltage value.
10:14:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:14:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FEE10>, 0x0, True) , Command count = 49 ] 
10:14:42: [GO18_globalSetVolt]### Host voltage value is set.
10:14:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:14:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FE330>, 0x0, False) , Command count = 50 ] 
10:14:42: [GO18_globalSetVolt]### Host voltage value is set.
10:14:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
10:14:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
10:14:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:14:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
10:14:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:14:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FE1E0>, <py_sfcl.CommandDataDefinition object at 0x063FE4B0>) , Command count = 54 ] 
10:14:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FED20>, <py_sfcl.CommandDataDefinition object at 0x063FEF30>) , Command count = 55 ] 
10:14:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:14:43: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
10:14:43: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:43: Host Frequency set to 25000 KHz
10:14:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:43: ####CSD Registe 2.0 Values####
10:14:43: CSD_STRUCTURE                                 :0x1
10:14:43: Reserv1                                       :0x0
10:14:43: Time Access 1 TAAC                            :0xe
10:14:43: Time Access 2 NSAC*100                        :0x0
10:14:43: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:43: Card Command Classess CCC                     :0x5b5
10:14:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:43: DSR(driver stage register)  DSR_IMP           :0x0
10:14:43: Reserv2                                       :0x0
10:14:43: Device Size C_SIZE                            :0xedc8
10:14:43: Reserv3                                       :0x0
10:14:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:43: Reserv4                                       :0x0
10:14:43: Write Speed Factor R2W_FACTOR                 :0x2
10:14:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:43: FILE_FORMAT_GRP                               :0x0
10:14:43: COPY flag                                     :0x1
10:14:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:43: File_Format                                   :0x0
10:14:43: CRC                                           :0x0
10:14:43: ####CSD Registe Values####  

10:14:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:14:43: [GetSCRRegisterEntry] Passed
10:14:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:14:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:14:43: Data_Status_After Erases          : 0
10:14:43: CPRM Security Support             : No Security
10:14:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:14:43: Spec. Version                     : Version 3.0X
10:14:43: Extended Security Support         : Extended_Security_Not_Supported
10:14:43: Command Support                   : COMMAND_SUPPORT
10:14:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FE1B0>, <py_sfcl.CommandDataDefinition object at 0x063FEA50>) , Command count = 57 ] 
10:14:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FEEA0>, <py_sfcl.CommandDataDefinition object at 0x063FE3F0>) , Command count = 58 ] 
10:14:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:14:43: [ SetBusWidth(0x4) , Command count = 59 ] 
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x063FE960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
10:14:43: Protected Area Size 0x28000
10:14:43: Bus Width           2
10:14:43: Secure Mode         0
10:14:43: Speed  Class        4
10:14:43: Perf Move           0
10:14:43: Au Size             9
10:14:43: Erase Size          15
10:14:43: Erase Timeout       1
10:14:43: Erase offset        1
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:14:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:14:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
10:14:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:14:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:14:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:14:43: Host Frequency set to 100000 KHz
10:14:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:14:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:43: ####CSD Registe 2.0 Values####
10:14:43: CSD_STRUCTURE                                 :0x1
10:14:43: Reserv1                                       :0x0
10:14:43: Time Access 1 TAAC                            :0xe
10:14:43: Time Access 2 NSAC*100                        :0x0
10:14:43: Data Transfer Rate TRAN_SPEED                 :0xb
10:14:43: Card Command Classess CCC                     :0x5b5
10:14:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:43: DSR(driver stage register)  DSR_IMP           :0x0
10:14:43: Reserv2                                       :0x0
10:14:43: Device Size C_SIZE                            :0xedc8
10:14:43: Reserv3                                       :0x0
10:14:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:43: Reserv4                                       :0x0
10:14:43: Write Speed Factor R2W_FACTOR                 :0x2
10:14:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:43: FILE_FORMAT_GRP                               :0x0
10:14:43: COPY flag                                     :0x1
10:14:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:43: File_Format                                   :0x0
10:14:43: CRC                                           :0x0
10:14:43: ####CSD Registe Values####  

10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FE9F0>, <py_sfcl.CommandDataDefinition object at 0x063FE240>) , Command count = 62 ] 
10:14:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405180>, <py_sfcl.CommandDataDefinition object at 0x06405030>) , Command count = 63 ] 
10:14:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064050C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
10:14:43: Protected Area Size 0x28000
10:14:43: Bus Width           2
10:14:43: Secure Mode         0
10:14:43: Speed  Class        4
10:14:43: Perf Move           0
10:14:43: Au Size             9
10:14:43: Erase Size          15
10:14:43: Erase Timeout       1
10:14:43: Erase offset        1
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:14:43: [ SetBusWidth(0x4) , Command count = 65 ] 
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064051B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 66 ] 
10:14:43: Protected Area Size 0x28000
10:14:43: Bus Width           2
10:14:43: Secure Mode         0
10:14:43: Speed  Class        4
10:14:43: Perf Move           0
10:14:43: Au Size             9
10:14:43: Erase Size          15
10:14:43: Erase Timeout       1
10:14:43: Erase offset        1
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:14:43: [CH030101_SDBusMode]###[INFO] Loop for 2 times,completed 0 times 

10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x100 to EndLba:0x201 with Increment Pattern
10:14:43: [ WrLbaNoData(0x100, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 67 ] 
10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x100 to EndLba:0x201 with Increment Pattern 

10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x100 to EndLba:0x201 with Increment Pattern
10:14:43: [ RdLbaNoData(0x100, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 68 ] 
10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x100 to EndLba:0x201 with Increment Pattern 

10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x200 to EndLba:0x301 with Increment Pattern
10:14:43: [ WrLbaNoData(0x200, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 69 ] 
10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x200 to EndLba:0x301 with Increment Pattern 

10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x200 to EndLba:0x301 with Increment Pattern
10:14:43: [ RdLbaNoData(0x200, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 70 ] 
10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x200 to EndLba:0x301 with Increment Pattern 

10:14:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

10:14:43: [ SetBusWidth(0x4) , Command count = 71 ] 
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064053F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 72 ] 
10:14:43: Protected Area Size 0x28000
10:14:43: Bus Width           2
10:14:43: Secure Mode         0
10:14:43: Speed  Class        4
10:14:43: Perf Move           0
10:14:43: Au Size             9
10:14:43: Erase Size          15
10:14:43: Erase Timeout       1
10:14:43: Erase offset        1
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:43: [CH030101_SDBusMode]###[INFO] Bus Width is Four, Expected 
 
10:14:43: [CH030101_SDBusMode]###[INFO] Execution Completed 
 
10:14:43: [CH030101_SDBusMode]###[INFO] Loop for 2 times,completed 1 times 

10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x100 to EndLba:0x201 with Increment Pattern
10:14:43: [ WrLbaNoData(0x100, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 73 ] 
10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x100 to EndLba:0x201 with Increment Pattern 

10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x100 to EndLba:0x201 with Increment Pattern
10:14:43: [ RdLbaNoData(0x100, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 74 ] 
10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x100 to EndLba:0x201 with Increment Pattern 

10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x200 to EndLba:0x301 with Increment Pattern
10:14:43: [ WrLbaNoData(0x200, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 75 ] 
10:14:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x200 to EndLba:0x301 with Increment Pattern 

10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x200 to EndLba:0x301 with Increment Pattern
10:14:43: [ RdLbaNoData(0x200, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 76 ] 
10:14:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x200 to EndLba:0x301 with Increment Pattern 

10:14:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

10:14:43: [ SetBusWidth(0x4) , Command count = 77 ] 
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06405570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 78 ] 
10:14:43: Protected Area Size 0x28000
10:14:43: Bus Width           2
10:14:43: Secure Mode         0
10:14:43: Speed  Class        4
10:14:43: Perf Move           0
10:14:43: Au Size             9
10:14:43: Erase Size          15
10:14:43: Erase Timeout       1
10:14:43: Erase offset        1
10:14:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:43: [CH030101_SDBusMode]###[INFO] Bus Width is Four, Expected 
 
10:14:43: [CH030101_SDBusMode]###[INFO] Execution Completed 
 
10:14:43: ########################################
10:14:43: Finished Running script CH030101_SDBusMode 
10:14:43: ########################################
10:14:43: ########################################
10:14:43: Stated Running script CH030102_SPIBusMode 
10:14:43: ########################################
10:14:43: ###### Running SPIBusMode Test ######
10:14:43: [CH030101_SDBusMode]###[INFO] Execution Started 
 
10:14:43: [GO4_globalInitCard]### Switch to Specify Card Type
10:14:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:45: Host Frequency set to 25000 KHz
10:14:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:45: [GO18_globalSetVolt]### Set Host Voltage value.
10:14:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:14:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06405A50>, 0x0, True) , Command count = 79 ] 
10:14:45: [GO18_globalSetVolt]### Host voltage value is set.
10:14:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:14:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06405A20>, 0x0, False) , Command count = 80 ] 
10:14:45: [GO18_globalSetVolt]### Host voltage value is set.
10:14:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 81 ] 
10:14:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 82 ] 
10:14:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:14:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 83 ] 
10:14:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:14:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405C00>, <py_sfcl.CommandDataDefinition object at 0x06405AE0>) , Command count = 84 ] 
10:14:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405CC0>, <py_sfcl.CommandDataDefinition object at 0x06405BA0>) , Command count = 85 ] 
10:14:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:14:45: [ SetCardRCA(0x1, 0xD555) , Command count = 86 ] 
10:14:46: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:46: Host Frequency set to 25000 KHz
10:14:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:46: ####CSD Registe 2.0 Values####
10:14:46: CSD_STRUCTURE                                 :0x1
10:14:46: Reserv1                                       :0x0
10:14:46: Time Access 1 TAAC                            :0xe
10:14:46: Time Access 2 NSAC*100                        :0x0
10:14:46: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:46: Card Command Classess CCC                     :0x5b5
10:14:46: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:46: DSR(driver stage register)  DSR_IMP           :0x0
10:14:46: Reserv2                                       :0x0
10:14:46: Device Size C_SIZE                            :0xedc8
10:14:46: Reserv3                                       :0x0
10:14:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:46: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:46: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:46: Reserv4                                       :0x0
10:14:46: Write Speed Factor R2W_FACTOR                 :0x2
10:14:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:46: FILE_FORMAT_GRP                               :0x0
10:14:46: COPY flag                                     :0x1
10:14:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:46: File_Format                                   :0x0
10:14:46: CRC                                           :0x0
10:14:46: ####CSD Registe Values####  

10:14:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:14:46: [GetSCRRegisterEntry] Passed
10:14:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:14:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:14:46: Data_Status_After Erases          : 0
10:14:46: CPRM Security Support             : No Security
10:14:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:14:46: Spec. Version                     : Version 3.0X
10:14:46: Extended Security Support         : Extended_Security_Not_Supported
10:14:46: Command Support                   : COMMAND_SUPPORT
10:14:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405E70>, <py_sfcl.CommandDataDefinition object at 0x06405ED0>) , Command count = 87 ] 
10:14:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405CF0>, <py_sfcl.CommandDataDefinition object at 0x06405DB0>) , Command count = 88 ] 
10:14:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:14:46: [ SetBusWidth(0x4) , Command count = 89 ] 
10:14:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06405FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 90 ] 
10:14:46: Protected Area Size 0x28000
10:14:46: Bus Width           2
10:14:46: Secure Mode         0
10:14:46: Speed  Class        4
10:14:46: Perf Move           0
10:14:46: Au Size             9
10:14:46: Erase Size          15
10:14:46: Erase Timeout       1
10:14:46: Erase offset        1
10:14:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:14:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:14:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 91 ] 
10:14:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:14:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:14:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:14:46: Host Frequency set to 100000 KHz
10:14:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:14:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:46: ####CSD Registe 2.0 Values####
10:14:46: CSD_STRUCTURE                                 :0x1
10:14:46: Reserv1                                       :0x0
10:14:46: Time Access 1 TAAC                            :0xe
10:14:46: Time Access 2 NSAC*100                        :0x0
10:14:46: Data Transfer Rate TRAN_SPEED                 :0xb
10:14:46: Card Command Classess CCC                     :0x5b5
10:14:46: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:46: DSR(driver stage register)  DSR_IMP           :0x0
10:14:46: Reserv2                                       :0x0
10:14:46: Device Size C_SIZE                            :0xedc8
10:14:46: Reserv3                                       :0x0
10:14:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:46: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:46: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:46: Reserv4                                       :0x0
10:14:46: Write Speed Factor R2W_FACTOR                 :0x2
10:14:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:46: FILE_FORMAT_GRP                               :0x0
10:14:46: COPY flag                                     :0x1
10:14:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:46: File_Format                                   :0x0
10:14:46: CRC                                           :0x0
10:14:46: ####CSD Registe Values####  

10:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405E10>, <py_sfcl.CommandDataDefinition object at 0x06405F00>) , Command count = 92 ] 
10:14:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405D80>, <py_sfcl.CommandDataDefinition object at 0x06405D50>) , Command count = 93 ] 
10:14:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:14:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:14:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x500 to EndLba:0x601 with One's Pattern
10:14:46: [ WrLbaNoData(0x500, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 94 ] 
10:14:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x500 to EndLba:0x601 with One's Pattern 

10:14:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x500 to EndLba:0x601 with One's Pattern
10:14:46: [ RdLbaNoData(0x500, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0, True) , Command count = 95 ] 
10:14:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x500 to EndLba:0x601 with One's Pattern 

10:14:48: [GO4_globalInitCard]### Switch to Specify Card Type
10:14:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:50: Host Frequency set to 25000 KHz
10:14:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:50: [GO18_globalSetVolt]### Set Host Voltage value.
10:14:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:14:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0640C240>, 0x0, True) , Command count = 96 ] 
10:14:50: [GO18_globalSetVolt]### Host voltage value is set.
10:14:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:14:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0640C090>, 0x0, False) , Command count = 97 ] 
10:14:50: [GO18_globalSetVolt]### Host voltage value is set.
10:14:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 98 ] 
10:14:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 99 ] 
10:14:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:14:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 100 ] 
10:14:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:14:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C1E0>, <py_sfcl.CommandDataDefinition object at 0x0640C180>) , Command count = 101 ] 
10:14:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C210>, <py_sfcl.CommandDataDefinition object at 0x0640C270>) , Command count = 102 ] 
10:14:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:14:50: [ SetCardRCA(0x1, 0xD555) , Command count = 103 ] 
10:14:50: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:50: Host Frequency set to 25000 KHz
10:14:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:50: ####CSD Registe 2.0 Values####
10:14:50: CSD_STRUCTURE                                 :0x1
10:14:50: Reserv1                                       :0x0
10:14:50: Time Access 1 TAAC                            :0xe
10:14:50: Time Access 2 NSAC*100                        :0x0
10:14:50: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:50: Card Command Classess CCC                     :0x5b5
10:14:50: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:50: DSR(driver stage register)  DSR_IMP           :0x0
10:14:50: Reserv2                                       :0x0
10:14:50: Device Size C_SIZE                            :0xedc8
10:14:50: Reserv3                                       :0x0
10:14:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:50: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:50: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:50: Reserv4                                       :0x0
10:14:50: Write Speed Factor R2W_FACTOR                 :0x2
10:14:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:50: FILE_FORMAT_GRP                               :0x0
10:14:50: COPY flag                                     :0x1
10:14:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:50: File_Format                                   :0x0
10:14:50: CRC                                           :0x0
10:14:50: ####CSD Registe Values####  

10:14:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:14:50: [GetSCRRegisterEntry] Passed
10:14:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:14:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:14:50: Data_Status_After Erases          : 0
10:14:50: CPRM Security Support             : No Security
10:14:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:14:50: Spec. Version                     : Version 3.0X
10:14:50: Extended Security Support         : Extended_Security_Not_Supported
10:14:50: Command Support                   : COMMAND_SUPPORT
10:14:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C4E0>, <py_sfcl.CommandDataDefinition object at 0x0640C300>) , Command count = 104 ] 
10:14:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C360>, <py_sfcl.CommandDataDefinition object at 0x0640C390>) , Command count = 105 ] 
10:14:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:14:50: [ SetBusWidth(0x4) , Command count = 106 ] 
10:14:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0640C450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 107 ] 
10:14:50: Protected Area Size 0x28000
10:14:50: Bus Width           2
10:14:50: Secure Mode         0
10:14:50: Speed  Class        4
10:14:50: Perf Move           0
10:14:50: Au Size             9
10:14:50: Erase Size          15
10:14:50: Erase Timeout       1
10:14:50: Erase offset        1
10:14:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:14:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:14:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 108 ] 
10:14:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:14:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:14:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:14:51: Host Frequency set to 100000 KHz
10:14:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:14:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:51: ####CSD Registe 2.0 Values####
10:14:51: CSD_STRUCTURE                                 :0x1
10:14:51: Reserv1                                       :0x0
10:14:51: Time Access 1 TAAC                            :0xe
10:14:51: Time Access 2 NSAC*100                        :0x0
10:14:51: Data Transfer Rate TRAN_SPEED                 :0xb
10:14:51: Card Command Classess CCC                     :0x5b5
10:14:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:51: DSR(driver stage register)  DSR_IMP           :0x0
10:14:51: Reserv2                                       :0x0
10:14:51: Device Size C_SIZE                            :0xedc8
10:14:51: Reserv3                                       :0x0
10:14:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:51: Reserv4                                       :0x0
10:14:51: Write Speed Factor R2W_FACTOR                 :0x2
10:14:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:51: FILE_FORMAT_GRP                               :0x0
10:14:51: COPY flag                                     :0x1
10:14:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:51: File_Format                                   :0x0
10:14:51: CRC                                           :0x0
10:14:51: ####CSD Registe Values####  

10:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C6F0>, <py_sfcl.CommandDataDefinition object at 0x0640C510>) , Command count = 109 ] 
10:14:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:14:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640C570>, <py_sfcl.CommandDataDefinition object at 0x0640C5A0>) , Command count = 110 ] 
10:14:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:14:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:14:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:51: ####CSD Registe 2.0 Values####
10:14:51: CSD_STRUCTURE                                 :0x1
10:14:51: Reserv1                                       :0x0
10:14:51: Time Access 1 TAAC                            :0xe
10:14:51: Time Access 2 NSAC*100                        :0x0
10:14:51: Data Transfer Rate TRAN_SPEED                 :0xb
10:14:51: Card Command Classess CCC                     :0x5b5
10:14:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:51: DSR(driver stage register)  DSR_IMP           :0x0
10:14:51: Reserv2                                       :0x0
10:14:51: Device Size C_SIZE                            :0xedc8
10:14:51: Reserv3                                       :0x0
10:14:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:51: Reserv4                                       :0x0
10:14:51: Write Speed Factor R2W_FACTOR                 :0x2
10:14:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:51: FILE_FORMAT_GRP                               :0x0
10:14:51: COPY flag                                     :0x1
10:14:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:51: File_Format                                   :0x0
10:14:51: CRC                                           :0x0
10:14:51: ####CSD Registe Values####  

10:14:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x21 with Constant Pattern
10:14:51: [ WrLbaNoData(0x0, 0x21, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 111 ] 
10:14:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x21 with Constant Pattern 

10:14:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x21 with Constant Pattern
10:14:51: [ RdLbaNoData(0x0, 0x21, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 112 ] 
10:14:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x21 with Constant Pattern 

10:14:51: [CH030101_SDBusMode]###[INFO] Execution Completed 
 
10:14:51: ########################################
10:14:51: Finished Running script CH030102_SPIBusMode 
10:14:51: ########################################
10:14:51: ########################################
10:14:51: Stated Running script CH030202_WrRdWideBus 
10:14:51: ########################################
10:14:51: ###### Running WrRdWideBus Test ######
10:14:51: [CH030202_WrRdWideBus]###[INFO] Execution Started 

10:14:51: [GO4_globalInitCard]### Switch to Specify Card Type
10:14:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:53: Host Frequency set to 25000 KHz
10:14:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:53: [GO18_globalSetVolt]### Set Host Voltage value.
10:14:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:14:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0640C9C0>, 0x0, True) , Command count = 113 ] 
10:14:53: [GO18_globalSetVolt]### Host voltage value is set.
10:14:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:14:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0640C930>, 0x0, False) , Command count = 114 ] 
10:14:53: [GO18_globalSetVolt]### Host voltage value is set.
10:14:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 115 ] 
10:14:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 116 ] 
10:14:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:14:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 117 ] 
10:14:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:14:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CAB0>, <py_sfcl.CommandDataDefinition object at 0x0640CE70>) , Command count = 118 ] 
10:14:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CB70>, <py_sfcl.CommandDataDefinition object at 0x0640CC30>) , Command count = 119 ] 
10:14:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:14:53: [ SetCardRCA(0x1, 0xD555) , Command count = 120 ] 
10:14:53: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:14:53: Host Frequency set to 25000 KHz
10:14:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:14:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:53: ####CSD Registe 2.0 Values####
10:14:53: CSD_STRUCTURE                                 :0x1
10:14:53: Reserv1                                       :0x0
10:14:53: Time Access 1 TAAC                            :0xe
10:14:53: Time Access 2 NSAC*100                        :0x0
10:14:53: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:53: Card Command Classess CCC                     :0x5b5
10:14:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:53: DSR(driver stage register)  DSR_IMP           :0x0
10:14:53: Reserv2                                       :0x0
10:14:53: Device Size C_SIZE                            :0xedc8
10:14:53: Reserv3                                       :0x0
10:14:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:53: Reserv4                                       :0x0
10:14:53: Write Speed Factor R2W_FACTOR                 :0x2
10:14:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:53: FILE_FORMAT_GRP                               :0x0
10:14:53: COPY flag                                     :0x1
10:14:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:53: File_Format                                   :0x0
10:14:53: CRC                                           :0x0
10:14:53: ####CSD Registe Values####  

10:14:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:14:53: [GetSCRRegisterEntry] Passed
10:14:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:14:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:14:53: Data_Status_After Erases          : 0
10:14:53: CPRM Security Support             : No Security
10:14:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:14:53: Spec. Version                     : Version 3.0X
10:14:53: Extended Security Support         : Extended_Security_Not_Supported
10:14:53: Command Support                   : COMMAND_SUPPORT
10:14:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CAE0>, <py_sfcl.CommandDataDefinition object at 0x0640CBA0>) , Command count = 121 ] 
10:14:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CD20>, <py_sfcl.CommandDataDefinition object at 0x0640CC90>) , Command count = 122 ] 
10:14:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:14:53: [ SetBusWidth(0x4) , Command count = 123 ] 
10:14:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0640CF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 124 ] 
10:14:53: Protected Area Size 0x28000
10:14:53: Bus Width           2
10:14:53: Secure Mode         0
10:14:53: Speed  Class        4
10:14:53: Perf Move           0
10:14:53: Au Size             9
10:14:53: Erase Size          15
10:14:53: Erase Timeout       1
10:14:53: Erase offset        1
10:14:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:14:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:14:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 125 ] 
10:14:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:14:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:14:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:14:53: Host Frequency set to 100000 KHz
10:14:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:14:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:53: ####CSD Registe 2.0 Values####
10:14:53: CSD_STRUCTURE                                 :0x1
10:14:53: Reserv1                                       :0x0
10:14:53: Time Access 1 TAAC                            :0xe
10:14:53: Time Access 2 NSAC*100                        :0x0
10:14:53: Data Transfer Rate TRAN_SPEED                 :0xb
10:14:53: Card Command Classess CCC                     :0x5b5
10:14:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:53: DSR(driver stage register)  DSR_IMP           :0x0
10:14:53: Reserv2                                       :0x0
10:14:53: Device Size C_SIZE                            :0xedc8
10:14:53: Reserv3                                       :0x0
10:14:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:53: Reserv4                                       :0x0
10:14:53: Write Speed Factor R2W_FACTOR                 :0x2
10:14:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:53: FILE_FORMAT_GRP                               :0x0
10:14:53: COPY flag                                     :0x1
10:14:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:53: File_Format                                   :0x0
10:14:53: CRC                                           :0x0
10:14:53: ####CSD Registe Values####  

10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CFC0>, <py_sfcl.CommandDataDefinition object at 0x0640CC00>) , Command count = 126 ] 
10:14:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CE40>, <py_sfcl.CommandDataDefinition object at 0x0640CBD0>) , Command count = 127 ] 
10:14:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:14:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:14:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

10:14:53: [ SetBusWidth(0x4) , Command count = 128 ] 
10:14:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:14:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0640CCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 129 ] 
10:14:53: Protected Area Size 0x28000
10:14:53: Bus Width           2
10:14:53: Secure Mode         0
10:14:53: Speed  Class        4
10:14:53: Perf Move           0
10:14:53: Au Size             9
10:14:53: Erase Size          15
10:14:53: Erase Timeout       1
10:14:53: Erase offset        1
10:14:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:14:53: [CH030202_WrRdWideBus]###[INFO] Bus Width is Four, Expected 
 
10:14:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723AF to EndLba:0x3B723FB with Constant Pattern
10:14:53: [ WrLbaNoData(0x3B723AF, 0x4C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 130 ] 
10:14:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723AF to EndLba:0x3B723FB with Constant Pattern 

10:14:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B723AF to EndLba:0x3B723FB with Constant Pattern
10:14:53: [ RdLbaNoData(0x3B723AF, 0x4C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 131 ] 
10:14:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3B723AF to EndLba:0x3B723FB with Constant Pattern 

10:14:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723FA to EndLba:0x3B72402 with Constant Pattern
10:14:53: [ WrLbaNoData(0x3B723FA, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 132 ] 
10:14:53: [ GetCardStatus() , Command count = 133 ] 
10:14:53: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x3B723FA to EndLba:0x3B72402 with Constant Pattern
10:14:53: [DVTCommonLib]### Exception_Details :Card Secure Read/Secure Write/Secure Erase/Secure Read MKB  argument out of range
10:14:53: [CH030202_WrRdWideBus] Failed as expected, OUT_OF_RANGE Error. 

10:14:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B723FA to EndLba:0x3B72402 with Constant Pattern
10:14:53: [ RdLbaNoData(0x3B723FA, 0x6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 134 ] 
10:14:54: [ RdLbaNoData(0x3B72401, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 135 ] 
10:14:54: [ GetCardStatus() , Command count = 136 ] 
10:14:54: [DVTCommonLib]### ReadWithFPGAPattern[ERROR] :MultipleRead Failed from StartLba:0x3B72401 to EndLba:0x2 with Constant Pattern
10:14:54: [DVTCommonLib]### Exception_Details :Card Secure Read/Secure Write/Secure Erase/Secure Read MKB  argument out of range
10:14:54: [CH030202_WrRdWideBus] Failed as expected, OUT_OF_RANGE Error. 

10:14:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x3B721FF to EndLba:0x3B72300 with Constant Pattern
10:14:54: [ WrLbaNoData(0x3B721FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 137 ] 
10:14:54: [ WrLbaNoData(0x3B72200, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 138 ] 
10:14:54: [ WrLbaNoData(0x3B72201, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 139 ] 
10:14:54: [ WrLbaNoData(0x3B72202, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 140 ] 
10:14:54: [ WrLbaNoData(0x3B72203, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 141 ] 
10:14:54: [ WrLbaNoData(0x3B72204, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 142 ] 
10:14:54: [ WrLbaNoData(0x3B72205, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 143 ] 
10:14:54: [ WrLbaNoData(0x3B72206, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 144 ] 
10:14:54: [ WrLbaNoData(0x3B72207, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 145 ] 
10:14:54: [ WrLbaNoData(0x3B72208, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 146 ] 
10:14:54: [ WrLbaNoData(0x3B72209, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 147 ] 
10:14:54: [ WrLbaNoData(0x3B7220A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 148 ] 
10:14:54: [ WrLbaNoData(0x3B7220B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 149 ] 
10:14:54: [ WrLbaNoData(0x3B7220C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 150 ] 
10:14:54: [ WrLbaNoData(0x3B7220D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 151 ] 
10:14:54: [ WrLbaNoData(0x3B7220E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 152 ] 
10:14:54: [ WrLbaNoData(0x3B7220F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 153 ] 
10:14:54: [ WrLbaNoData(0x3B72210, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 154 ] 
10:14:54: [ WrLbaNoData(0x3B72211, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 155 ] 
10:14:54: [ WrLbaNoData(0x3B72212, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 156 ] 
10:14:54: [ WrLbaNoData(0x3B72213, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 157 ] 
10:14:54: [ WrLbaNoData(0x3B72214, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 158 ] 
10:14:54: [ WrLbaNoData(0x3B72215, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 159 ] 
10:14:54: [ WrLbaNoData(0x3B72216, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 160 ] 
10:14:54: [ WrLbaNoData(0x3B72217, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 161 ] 
10:14:54: [ WrLbaNoData(0x3B72218, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 162 ] 
10:14:54: [ WrLbaNoData(0x3B72219, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 163 ] 
10:14:54: [ WrLbaNoData(0x3B7221A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 164 ] 
10:14:54: [ WrLbaNoData(0x3B7221B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 165 ] 
10:14:54: [ WrLbaNoData(0x3B7221C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 166 ] 
10:14:54: [ WrLbaNoData(0x3B7221D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 167 ] 
10:14:54: [ WrLbaNoData(0x3B7221E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 168 ] 
10:14:54: [ WrLbaNoData(0x3B7221F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 169 ] 
10:14:54: [ WrLbaNoData(0x3B72220, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 170 ] 
10:14:54: [ WrLbaNoData(0x3B72221, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 171 ] 
10:14:54: [ WrLbaNoData(0x3B72222, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 172 ] 
10:14:54: [ WrLbaNoData(0x3B72223, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 173 ] 
10:14:54: [ WrLbaNoData(0x3B72224, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 174 ] 
10:14:54: [ WrLbaNoData(0x3B72225, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 175 ] 
10:14:54: [ WrLbaNoData(0x3B72226, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 176 ] 
10:14:54: [ WrLbaNoData(0x3B72227, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 177 ] 
10:14:54: [ WrLbaNoData(0x3B72228, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 178 ] 
10:14:54: [ WrLbaNoData(0x3B72229, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 179 ] 
10:14:54: [ WrLbaNoData(0x3B7222A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 180 ] 
10:14:54: [ WrLbaNoData(0x3B7222B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 181 ] 
10:14:54: [ WrLbaNoData(0x3B7222C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 182 ] 
10:14:54: [ WrLbaNoData(0x3B7222D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 183 ] 
10:14:54: [ WrLbaNoData(0x3B7222E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 184 ] 
10:14:54: [ WrLbaNoData(0x3B7222F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 185 ] 
10:14:54: [ WrLbaNoData(0x3B72230, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 186 ] 
10:14:54: [ WrLbaNoData(0x3B72231, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 187 ] 
10:14:54: [ WrLbaNoData(0x3B72232, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 188 ] 
10:14:54: [ WrLbaNoData(0x3B72233, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 189 ] 
10:14:54: [ WrLbaNoData(0x3B72234, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 190 ] 
10:14:54: [ WrLbaNoData(0x3B72235, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 191 ] 
10:14:54: [ WrLbaNoData(0x3B72236, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 192 ] 
10:14:54: [ WrLbaNoData(0x3B72237, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 193 ] 
10:14:54: [ WrLbaNoData(0x3B72238, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 194 ] 
10:14:54: [ WrLbaNoData(0x3B72239, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 195 ] 
10:14:54: [ WrLbaNoData(0x3B7223A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 196 ] 
10:14:54: [ WrLbaNoData(0x3B7223B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 197 ] 
10:14:54: [ WrLbaNoData(0x3B7223C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 198 ] 
10:14:54: [ WrLbaNoData(0x3B7223D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 199 ] 
10:14:54: [ WrLbaNoData(0x3B7223E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 200 ] 
10:14:54: [ WrLbaNoData(0x3B7223F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 201 ] 
10:14:54: [ WrLbaNoData(0x3B72240, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 202 ] 
10:14:54: [ WrLbaNoData(0x3B72241, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 203 ] 
10:14:54: [ WrLbaNoData(0x3B72242, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 204 ] 
10:14:54: [ WrLbaNoData(0x3B72243, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 205 ] 
10:14:54: [ WrLbaNoData(0x3B72244, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 206 ] 
10:14:54: [ WrLbaNoData(0x3B72245, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 207 ] 
10:14:54: [ WrLbaNoData(0x3B72246, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 208 ] 
10:14:54: [ WrLbaNoData(0x3B72247, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 209 ] 
10:14:54: [ WrLbaNoData(0x3B72248, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 210 ] 
10:14:54: [ WrLbaNoData(0x3B72249, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 211 ] 
10:14:54: [ WrLbaNoData(0x3B7224A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 212 ] 
10:14:54: [ WrLbaNoData(0x3B7224B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 213 ] 
10:14:54: [ WrLbaNoData(0x3B7224C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 214 ] 
10:14:54: [ WrLbaNoData(0x3B7224D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 215 ] 
10:14:54: [ WrLbaNoData(0x3B7224E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 216 ] 
10:14:54: [ WrLbaNoData(0x3B7224F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 217 ] 
10:14:54: [ WrLbaNoData(0x3B72250, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 218 ] 
10:14:54: [ WrLbaNoData(0x3B72251, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 219 ] 
10:14:54: [ WrLbaNoData(0x3B72252, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 220 ] 
10:14:54: [ WrLbaNoData(0x3B72253, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 221 ] 
10:14:54: [ WrLbaNoData(0x3B72254, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 222 ] 
10:14:54: [ WrLbaNoData(0x3B72255, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 223 ] 
10:14:54: [ WrLbaNoData(0x3B72256, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 224 ] 
10:14:54: [ WrLbaNoData(0x3B72257, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 225 ] 
10:14:54: [ WrLbaNoData(0x3B72258, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 226 ] 
10:14:54: [ WrLbaNoData(0x3B72259, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 227 ] 
10:14:54: [ WrLbaNoData(0x3B7225A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 228 ] 
10:14:54: [ WrLbaNoData(0x3B7225B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 229 ] 
10:14:54: [ WrLbaNoData(0x3B7225C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 230 ] 
10:14:54: [ WrLbaNoData(0x3B7225D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 231 ] 
10:14:54: [ WrLbaNoData(0x3B7225E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 232 ] 
10:14:54: [ WrLbaNoData(0x3B7225F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 233 ] 
10:14:54: [ WrLbaNoData(0x3B72260, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 234 ] 
10:14:54: [ WrLbaNoData(0x3B72261, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 235 ] 
10:14:54: [ WrLbaNoData(0x3B72262, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 236 ] 
10:14:54: [ WrLbaNoData(0x3B72263, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 237 ] 
10:14:54: [ WrLbaNoData(0x3B72264, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 238 ] 
10:14:54: [ WrLbaNoData(0x3B72265, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 239 ] 
10:14:54: [ WrLbaNoData(0x3B72266, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 240 ] 
10:14:54: [ WrLbaNoData(0x3B72267, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 241 ] 
10:14:54: [ WrLbaNoData(0x3B72268, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 242 ] 
10:14:54: [ WrLbaNoData(0x3B72269, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 243 ] 
10:14:54: [ WrLbaNoData(0x3B7226A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 244 ] 
10:14:54: [ WrLbaNoData(0x3B7226B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 245 ] 
10:14:54: [ WrLbaNoData(0x3B7226C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 246 ] 
10:14:54: [ WrLbaNoData(0x3B7226D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 247 ] 
10:14:54: [ WrLbaNoData(0x3B7226E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 248 ] 
10:14:54: [ WrLbaNoData(0x3B7226F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 249 ] 
10:14:54: [ WrLbaNoData(0x3B72270, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 250 ] 
10:14:54: [ WrLbaNoData(0x3B72271, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 251 ] 
10:14:54: [ WrLbaNoData(0x3B72272, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 252 ] 
10:14:54: [ WrLbaNoData(0x3B72273, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 253 ] 
10:14:54: [ WrLbaNoData(0x3B72274, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 254 ] 
10:14:54: [ WrLbaNoData(0x3B72275, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 255 ] 
10:14:54: [ WrLbaNoData(0x3B72276, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 256 ] 
10:14:54: [ WrLbaNoData(0x3B72277, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 257 ] 
10:14:54: [ WrLbaNoData(0x3B72278, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 258 ] 
10:14:55: [ WrLbaNoData(0x3B72279, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 259 ] 
10:14:55: [ WrLbaNoData(0x3B7227A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 260 ] 
10:14:55: [ WrLbaNoData(0x3B7227B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 261 ] 
10:14:55: [ WrLbaNoData(0x3B7227C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 262 ] 
10:14:55: [ WrLbaNoData(0x3B7227D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 263 ] 
10:14:55: [ WrLbaNoData(0x3B7227E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 264 ] 
10:14:55: [ WrLbaNoData(0x3B7227F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 265 ] 
10:14:55: [ WrLbaNoData(0x3B72280, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 266 ] 
10:14:55: [ WrLbaNoData(0x3B72281, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 267 ] 
10:14:55: [ WrLbaNoData(0x3B72282, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 268 ] 
10:14:55: [ WrLbaNoData(0x3B72283, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 269 ] 
10:14:55: [ WrLbaNoData(0x3B72284, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 270 ] 
10:14:55: [ WrLbaNoData(0x3B72285, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 271 ] 
10:14:55: [ WrLbaNoData(0x3B72286, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 272 ] 
10:14:55: [ WrLbaNoData(0x3B72287, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 273 ] 
10:14:55: [ WrLbaNoData(0x3B72288, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 274 ] 
10:14:55: [ WrLbaNoData(0x3B72289, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 275 ] 
10:14:55: [ WrLbaNoData(0x3B7228A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 276 ] 
10:14:55: [ WrLbaNoData(0x3B7228B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 277 ] 
10:14:55: [ WrLbaNoData(0x3B7228C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 278 ] 
10:14:55: [ WrLbaNoData(0x3B7228D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 279 ] 
10:14:55: [ WrLbaNoData(0x3B7228E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 280 ] 
10:14:55: [ WrLbaNoData(0x3B7228F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 281 ] 
10:14:55: [ WrLbaNoData(0x3B72290, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 282 ] 
10:14:55: [ WrLbaNoData(0x3B72291, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 283 ] 
10:14:55: [ WrLbaNoData(0x3B72292, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 284 ] 
10:14:55: [ WrLbaNoData(0x3B72293, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 285 ] 
10:14:55: [ WrLbaNoData(0x3B72294, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 286 ] 
10:14:55: [ WrLbaNoData(0x3B72295, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 287 ] 
10:14:55: [ WrLbaNoData(0x3B72296, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 288 ] 
10:14:55: [ WrLbaNoData(0x3B72297, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 289 ] 
10:14:55: [ WrLbaNoData(0x3B72298, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 290 ] 
10:14:55: [ WrLbaNoData(0x3B72299, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 291 ] 
10:14:55: [ WrLbaNoData(0x3B7229A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 292 ] 
10:14:55: [ WrLbaNoData(0x3B7229B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 293 ] 
10:14:55: [ WrLbaNoData(0x3B7229C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 294 ] 
10:14:55: [ WrLbaNoData(0x3B7229D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 295 ] 
10:14:55: [ WrLbaNoData(0x3B7229E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 296 ] 
10:14:55: [ WrLbaNoData(0x3B7229F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 297 ] 
10:14:55: [ WrLbaNoData(0x3B722A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 298 ] 
10:14:55: [ WrLbaNoData(0x3B722A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 299 ] 
10:14:55: [ WrLbaNoData(0x3B722A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 300 ] 
10:14:55: [ WrLbaNoData(0x3B722A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 301 ] 
10:14:55: [ WrLbaNoData(0x3B722A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 302 ] 
10:14:55: [ WrLbaNoData(0x3B722A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 303 ] 
10:14:55: [ WrLbaNoData(0x3B722A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 304 ] 
10:14:55: [ WrLbaNoData(0x3B722A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 305 ] 
10:14:55: [ WrLbaNoData(0x3B722A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 306 ] 
10:14:55: [ WrLbaNoData(0x3B722A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 307 ] 
10:14:55: [ WrLbaNoData(0x3B722AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 308 ] 
10:14:55: [ WrLbaNoData(0x3B722AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 309 ] 
10:14:55: [ WrLbaNoData(0x3B722AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 310 ] 
10:14:55: [ WrLbaNoData(0x3B722AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 311 ] 
10:14:55: [ WrLbaNoData(0x3B722AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 312 ] 
10:14:55: [ WrLbaNoData(0x3B722AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 313 ] 
10:14:55: [ WrLbaNoData(0x3B722B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 314 ] 
10:14:55: [ WrLbaNoData(0x3B722B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 315 ] 
10:14:55: [ WrLbaNoData(0x3B722B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 316 ] 
10:14:55: [ WrLbaNoData(0x3B722B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 317 ] 
10:14:55: [ WrLbaNoData(0x3B722B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 318 ] 
10:14:55: [ WrLbaNoData(0x3B722B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 319 ] 
10:14:55: [ WrLbaNoData(0x3B722B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 320 ] 
10:14:55: [ WrLbaNoData(0x3B722B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 321 ] 
10:14:55: [ WrLbaNoData(0x3B722B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 322 ] 
10:14:55: [ WrLbaNoData(0x3B722B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 323 ] 
10:14:55: [ WrLbaNoData(0x3B722BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 324 ] 
10:14:55: [ WrLbaNoData(0x3B722BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 325 ] 
10:14:55: [ WrLbaNoData(0x3B722BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 326 ] 
10:14:55: [ WrLbaNoData(0x3B722BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 327 ] 
10:14:55: [ WrLbaNoData(0x3B722BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 328 ] 
10:14:55: [ WrLbaNoData(0x3B722BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 329 ] 
10:14:55: [ WrLbaNoData(0x3B722C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 330 ] 
10:14:55: [ WrLbaNoData(0x3B722C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 331 ] 
10:14:55: [ WrLbaNoData(0x3B722C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 332 ] 
10:14:55: [ WrLbaNoData(0x3B722C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 333 ] 
10:14:55: [ WrLbaNoData(0x3B722C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 334 ] 
10:14:55: [ WrLbaNoData(0x3B722C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 335 ] 
10:14:55: [ WrLbaNoData(0x3B722C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 336 ] 
10:14:55: [ WrLbaNoData(0x3B722C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 337 ] 
10:14:55: [ WrLbaNoData(0x3B722C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 338 ] 
10:14:55: [ WrLbaNoData(0x3B722C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 339 ] 
10:14:55: [ WrLbaNoData(0x3B722CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 340 ] 
10:14:55: [ WrLbaNoData(0x3B722CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 341 ] 
10:14:55: [ WrLbaNoData(0x3B722CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 342 ] 
10:14:55: [ WrLbaNoData(0x3B722CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 343 ] 
10:14:55: [ WrLbaNoData(0x3B722CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 344 ] 
10:14:55: [ WrLbaNoData(0x3B722CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 345 ] 
10:14:55: [ WrLbaNoData(0x3B722D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 346 ] 
10:14:55: [ WrLbaNoData(0x3B722D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 347 ] 
10:14:55: [ WrLbaNoData(0x3B722D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 348 ] 
10:14:55: [ WrLbaNoData(0x3B722D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 349 ] 
10:14:55: [ WrLbaNoData(0x3B722D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 350 ] 
10:14:55: [ WrLbaNoData(0x3B722D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 351 ] 
10:14:55: [ WrLbaNoData(0x3B722D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 352 ] 
10:14:55: [ WrLbaNoData(0x3B722D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 353 ] 
10:14:55: [ WrLbaNoData(0x3B722D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 354 ] 
10:14:55: [ WrLbaNoData(0x3B722D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 355 ] 
10:14:55: [ WrLbaNoData(0x3B722DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 356 ] 
10:14:55: [ WrLbaNoData(0x3B722DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 357 ] 
10:14:55: [ WrLbaNoData(0x3B722DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 358 ] 
10:14:55: [ WrLbaNoData(0x3B722DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 359 ] 
10:14:55: [ WrLbaNoData(0x3B722DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 360 ] 
10:14:55: [ WrLbaNoData(0x3B722DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 361 ] 
10:14:55: [ WrLbaNoData(0x3B722E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 362 ] 
10:14:55: [ WrLbaNoData(0x3B722E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 363 ] 
10:14:55: [ WrLbaNoData(0x3B722E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 364 ] 
10:14:55: [ WrLbaNoData(0x3B722E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 365 ] 
10:14:55: [ WrLbaNoData(0x3B722E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 366 ] 
10:14:55: [ WrLbaNoData(0x3B722E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 367 ] 
10:14:55: [ WrLbaNoData(0x3B722E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 368 ] 
10:14:55: [ WrLbaNoData(0x3B722E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 369 ] 
10:14:55: [ WrLbaNoData(0x3B722E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 370 ] 
10:14:55: [ WrLbaNoData(0x3B722E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 371 ] 
10:14:55: [ WrLbaNoData(0x3B722EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 372 ] 
10:14:55: [ WrLbaNoData(0x3B722EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 373 ] 
10:14:55: [ WrLbaNoData(0x3B722EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 374 ] 
10:14:55: [ WrLbaNoData(0x3B722ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 375 ] 
10:14:55: [ WrLbaNoData(0x3B722EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 376 ] 
10:14:55: [ WrLbaNoData(0x3B722EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 377 ] 
10:14:55: [ WrLbaNoData(0x3B722F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 378 ] 
10:14:55: [ WrLbaNoData(0x3B722F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 379 ] 
10:14:55: [ WrLbaNoData(0x3B722F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 380 ] 
10:14:55: [ WrLbaNoData(0x3B722F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 381 ] 
10:14:55: [ WrLbaNoData(0x3B722F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 382 ] 
10:14:55: [ WrLbaNoData(0x3B722F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 383 ] 
10:14:56: [ WrLbaNoData(0x3B722F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 384 ] 
10:14:56: [ WrLbaNoData(0x3B722F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 385 ] 
10:14:56: [ WrLbaNoData(0x3B722F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 386 ] 
10:14:56: [ WrLbaNoData(0x3B722F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 387 ] 
10:14:56: [ WrLbaNoData(0x3B722FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 388 ] 
10:14:56: [ WrLbaNoData(0x3B722FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 389 ] 
10:14:56: [ WrLbaNoData(0x3B722FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 390 ] 
10:14:56: [ WrLbaNoData(0x3B722FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 391 ] 
10:14:56: [ WrLbaNoData(0x3B722FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 392 ] 
10:14:56: [ WrLbaNoData(0x3B722FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 393 ] 
10:14:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done SingleWrite from StartLba: 0x3B721FF to EndLba:0x3B72300 with Constant Pattern 

10:14:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B721FF to EndLba:0x3B72300 with Constant Pattern
10:14:56: [ RdLbaNoData(0x3B721FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 394 ] 
10:14:56: [ RdLbaNoData(0x3B72200, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 395 ] 
10:14:56: [ RdLbaNoData(0x3B72201, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 396 ] 
10:14:56: [ RdLbaNoData(0x3B72202, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 397 ] 
10:14:56: [ RdLbaNoData(0x3B72203, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 398 ] 
10:14:56: [ RdLbaNoData(0x3B72204, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 399 ] 
10:14:56: [ RdLbaNoData(0x3B72205, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 400 ] 
10:14:56: [ RdLbaNoData(0x3B72206, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 401 ] 
10:14:56: [ RdLbaNoData(0x3B72207, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 402 ] 
10:14:56: [ RdLbaNoData(0x3B72208, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 403 ] 
10:14:56: [ RdLbaNoData(0x3B72209, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 404 ] 
10:14:56: [ RdLbaNoData(0x3B7220A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 405 ] 
10:14:56: [ RdLbaNoData(0x3B7220B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 406 ] 
10:14:56: [ RdLbaNoData(0x3B7220C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 407 ] 
10:14:56: [ RdLbaNoData(0x3B7220D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 408 ] 
10:14:56: [ RdLbaNoData(0x3B7220E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 409 ] 
10:14:56: [ RdLbaNoData(0x3B7220F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 410 ] 
10:14:56: [ RdLbaNoData(0x3B72210, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 411 ] 
10:14:56: [ RdLbaNoData(0x3B72211, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 412 ] 
10:14:56: [ RdLbaNoData(0x3B72212, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 413 ] 
10:14:56: [ RdLbaNoData(0x3B72213, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 414 ] 
10:14:56: [ RdLbaNoData(0x3B72214, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 415 ] 
10:14:56: [ RdLbaNoData(0x3B72215, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 416 ] 
10:14:56: [ RdLbaNoData(0x3B72216, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 417 ] 
10:14:56: [ RdLbaNoData(0x3B72217, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 418 ] 
10:14:56: [ RdLbaNoData(0x3B72218, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 419 ] 
10:14:56: [ RdLbaNoData(0x3B72219, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 420 ] 
10:14:56: [ RdLbaNoData(0x3B7221A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 421 ] 
10:14:56: [ RdLbaNoData(0x3B7221B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 422 ] 
10:14:56: [ RdLbaNoData(0x3B7221C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 423 ] 
10:14:56: [ RdLbaNoData(0x3B7221D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 424 ] 
10:14:56: [ RdLbaNoData(0x3B7221E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 425 ] 
10:14:56: [ RdLbaNoData(0x3B7221F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 426 ] 
10:14:56: [ RdLbaNoData(0x3B72220, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 427 ] 
10:14:56: [ RdLbaNoData(0x3B72221, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 428 ] 
10:14:56: [ RdLbaNoData(0x3B72222, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 429 ] 
10:14:56: [ RdLbaNoData(0x3B72223, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 430 ] 
10:14:56: [ RdLbaNoData(0x3B72224, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 431 ] 
10:14:56: [ RdLbaNoData(0x3B72225, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 432 ] 
10:14:56: [ RdLbaNoData(0x3B72226, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 433 ] 
10:14:56: [ RdLbaNoData(0x3B72227, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 434 ] 
10:14:56: [ RdLbaNoData(0x3B72228, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 435 ] 
10:14:56: [ RdLbaNoData(0x3B72229, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 436 ] 
10:14:56: [ RdLbaNoData(0x3B7222A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 437 ] 
10:14:56: [ RdLbaNoData(0x3B7222B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 438 ] 
10:14:56: [ RdLbaNoData(0x3B7222C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 439 ] 
10:14:56: [ RdLbaNoData(0x3B7222D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 440 ] 
10:14:56: [ RdLbaNoData(0x3B7222E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 441 ] 
10:14:56: [ RdLbaNoData(0x3B7222F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 442 ] 
10:14:56: [ RdLbaNoData(0x3B72230, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 443 ] 
10:14:56: [ RdLbaNoData(0x3B72231, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 444 ] 
10:14:56: [ RdLbaNoData(0x3B72232, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 445 ] 
10:14:56: [ RdLbaNoData(0x3B72233, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 446 ] 
10:14:56: [ RdLbaNoData(0x3B72234, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 447 ] 
10:14:56: [ RdLbaNoData(0x3B72235, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 448 ] 
10:14:56: [ RdLbaNoData(0x3B72236, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 449 ] 
10:14:56: [ RdLbaNoData(0x3B72237, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 450 ] 
10:14:56: [ RdLbaNoData(0x3B72238, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 451 ] 
10:14:56: [ RdLbaNoData(0x3B72239, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 452 ] 
10:14:56: [ RdLbaNoData(0x3B7223A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 453 ] 
10:14:56: [ RdLbaNoData(0x3B7223B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 454 ] 
10:14:56: [ RdLbaNoData(0x3B7223C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 455 ] 
10:14:56: [ RdLbaNoData(0x3B7223D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 456 ] 
10:14:56: [ RdLbaNoData(0x3B7223E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 457 ] 
10:14:56: [ RdLbaNoData(0x3B7223F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 458 ] 
10:14:56: [ RdLbaNoData(0x3B72240, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 459 ] 
10:14:56: [ RdLbaNoData(0x3B72241, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 460 ] 
10:14:56: [ RdLbaNoData(0x3B72242, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 461 ] 
10:14:56: [ RdLbaNoData(0x3B72243, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 462 ] 
10:14:56: [ RdLbaNoData(0x3B72244, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 463 ] 
10:14:56: [ RdLbaNoData(0x3B72245, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 464 ] 
10:14:56: [ RdLbaNoData(0x3B72246, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 465 ] 
10:14:56: [ RdLbaNoData(0x3B72247, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 466 ] 
10:14:56: [ RdLbaNoData(0x3B72248, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 467 ] 
10:14:56: [ RdLbaNoData(0x3B72249, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 468 ] 
10:14:56: [ RdLbaNoData(0x3B7224A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 469 ] 
10:14:56: [ RdLbaNoData(0x3B7224B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 470 ] 
10:14:56: [ RdLbaNoData(0x3B7224C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 471 ] 
10:14:56: [ RdLbaNoData(0x3B7224D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 472 ] 
10:14:56: [ RdLbaNoData(0x3B7224E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 473 ] 
10:14:56: [ RdLbaNoData(0x3B7224F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 474 ] 
10:14:56: [ RdLbaNoData(0x3B72250, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 475 ] 
10:14:56: [ RdLbaNoData(0x3B72251, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 476 ] 
10:14:56: [ RdLbaNoData(0x3B72252, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 477 ] 
10:14:56: [ RdLbaNoData(0x3B72253, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 478 ] 
10:14:56: [ RdLbaNoData(0x3B72254, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 479 ] 
10:14:56: [ RdLbaNoData(0x3B72255, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 480 ] 
10:14:56: [ RdLbaNoData(0x3B72256, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 481 ] 
10:14:56: [ RdLbaNoData(0x3B72257, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 482 ] 
10:14:56: [ RdLbaNoData(0x3B72258, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 483 ] 
10:14:56: [ RdLbaNoData(0x3B72259, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 484 ] 
10:14:56: [ RdLbaNoData(0x3B7225A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 485 ] 
10:14:56: [ RdLbaNoData(0x3B7225B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 486 ] 
10:14:56: [ RdLbaNoData(0x3B7225C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 487 ] 
10:14:56: [ RdLbaNoData(0x3B7225D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 488 ] 
10:14:56: [ RdLbaNoData(0x3B7225E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 489 ] 
10:14:56: [ RdLbaNoData(0x3B7225F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 490 ] 
10:14:56: [ RdLbaNoData(0x3B72260, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 491 ] 
10:14:56: [ RdLbaNoData(0x3B72261, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 492 ] 
10:14:56: [ RdLbaNoData(0x3B72262, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 493 ] 
10:14:56: [ RdLbaNoData(0x3B72263, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 494 ] 
10:14:56: [ RdLbaNoData(0x3B72264, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 495 ] 
10:14:56: [ RdLbaNoData(0x3B72265, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 496 ] 
10:14:56: [ RdLbaNoData(0x3B72266, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 497 ] 
10:14:56: [ RdLbaNoData(0x3B72267, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 498 ] 
10:14:56: [ RdLbaNoData(0x3B72268, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 499 ] 
10:14:56: [ RdLbaNoData(0x3B72269, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 500 ] 
10:14:56: [ RdLbaNoData(0x3B7226A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 501 ] 
10:14:56: [ RdLbaNoData(0x3B7226B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 502 ] 
10:14:56: [ RdLbaNoData(0x3B7226C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 503 ] 
10:14:56: [ RdLbaNoData(0x3B7226D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 504 ] 
10:14:56: [ RdLbaNoData(0x3B7226E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 505 ] 
10:14:56: [ RdLbaNoData(0x3B7226F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 506 ] 
10:14:56: [ RdLbaNoData(0x3B72270, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 507 ] 
10:14:56: [ RdLbaNoData(0x3B72271, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 508 ] 
10:14:57: [ RdLbaNoData(0x3B72272, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 509 ] 
10:14:57: [ RdLbaNoData(0x3B72273, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 510 ] 
10:14:57: [ RdLbaNoData(0x3B72274, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 511 ] 
10:14:57: [ RdLbaNoData(0x3B72275, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 512 ] 
10:14:57: [ RdLbaNoData(0x3B72276, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 513 ] 
10:14:57: [ RdLbaNoData(0x3B72277, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 514 ] 
10:14:57: [ RdLbaNoData(0x3B72278, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 515 ] 
10:14:57: [ RdLbaNoData(0x3B72279, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 516 ] 
10:14:57: [ RdLbaNoData(0x3B7227A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 517 ] 
10:14:57: [ RdLbaNoData(0x3B7227B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 518 ] 
10:14:57: [ RdLbaNoData(0x3B7227C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 519 ] 
10:14:57: [ RdLbaNoData(0x3B7227D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 520 ] 
10:14:57: [ RdLbaNoData(0x3B7227E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 521 ] 
10:14:57: [ RdLbaNoData(0x3B7227F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 522 ] 
10:14:57: [ RdLbaNoData(0x3B72280, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 523 ] 
10:14:57: [ RdLbaNoData(0x3B72281, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 524 ] 
10:14:57: [ RdLbaNoData(0x3B72282, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 525 ] 
10:14:57: [ RdLbaNoData(0x3B72283, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 526 ] 
10:14:57: [ RdLbaNoData(0x3B72284, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 527 ] 
10:14:57: [ RdLbaNoData(0x3B72285, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 528 ] 
10:14:57: [ RdLbaNoData(0x3B72286, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 529 ] 
10:14:57: [ RdLbaNoData(0x3B72287, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 530 ] 
10:14:57: [ RdLbaNoData(0x3B72288, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 531 ] 
10:14:57: [ RdLbaNoData(0x3B72289, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 532 ] 
10:14:57: [ RdLbaNoData(0x3B7228A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 533 ] 
10:14:57: [ RdLbaNoData(0x3B7228B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 534 ] 
10:14:57: [ RdLbaNoData(0x3B7228C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 535 ] 
10:14:57: [ RdLbaNoData(0x3B7228D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 536 ] 
10:14:57: [ RdLbaNoData(0x3B7228E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 537 ] 
10:14:57: [ RdLbaNoData(0x3B7228F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 538 ] 
10:14:57: [ RdLbaNoData(0x3B72290, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 539 ] 
10:14:57: [ RdLbaNoData(0x3B72291, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 540 ] 
10:14:57: [ RdLbaNoData(0x3B72292, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 541 ] 
10:14:57: [ RdLbaNoData(0x3B72293, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 542 ] 
10:14:57: [ RdLbaNoData(0x3B72294, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 543 ] 
10:14:57: [ RdLbaNoData(0x3B72295, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 544 ] 
10:14:57: [ RdLbaNoData(0x3B72296, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 545 ] 
10:14:57: [ RdLbaNoData(0x3B72297, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 546 ] 
10:14:57: [ RdLbaNoData(0x3B72298, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 547 ] 
10:14:57: [ RdLbaNoData(0x3B72299, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 548 ] 
10:14:57: [ RdLbaNoData(0x3B7229A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 549 ] 
10:14:57: [ RdLbaNoData(0x3B7229B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 550 ] 
10:14:57: [ RdLbaNoData(0x3B7229C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 551 ] 
10:14:57: [ RdLbaNoData(0x3B7229D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 552 ] 
10:14:57: [ RdLbaNoData(0x3B7229E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 553 ] 
10:14:57: [ RdLbaNoData(0x3B7229F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 554 ] 
10:14:57: [ RdLbaNoData(0x3B722A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 555 ] 
10:14:57: [ RdLbaNoData(0x3B722A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 556 ] 
10:14:57: [ RdLbaNoData(0x3B722A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 557 ] 
10:14:57: [ RdLbaNoData(0x3B722A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 558 ] 
10:14:57: [ RdLbaNoData(0x3B722A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 559 ] 
10:14:57: [ RdLbaNoData(0x3B722A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 560 ] 
10:14:57: [ RdLbaNoData(0x3B722A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 561 ] 
10:14:57: [ RdLbaNoData(0x3B722A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 562 ] 
10:14:57: [ RdLbaNoData(0x3B722A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 563 ] 
10:14:57: [ RdLbaNoData(0x3B722A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 564 ] 
10:14:57: [ RdLbaNoData(0x3B722AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 565 ] 
10:14:57: [ RdLbaNoData(0x3B722AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 566 ] 
10:14:57: [ RdLbaNoData(0x3B722AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 567 ] 
10:14:57: [ RdLbaNoData(0x3B722AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 568 ] 
10:14:57: [ RdLbaNoData(0x3B722AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 569 ] 
10:14:57: [ RdLbaNoData(0x3B722AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 570 ] 
10:14:57: [ RdLbaNoData(0x3B722B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 571 ] 
10:14:57: [ RdLbaNoData(0x3B722B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 572 ] 
10:14:57: [ RdLbaNoData(0x3B722B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 573 ] 
10:14:57: [ RdLbaNoData(0x3B722B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 574 ] 
10:14:57: [ RdLbaNoData(0x3B722B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 575 ] 
10:14:57: [ RdLbaNoData(0x3B722B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 576 ] 
10:14:57: [ RdLbaNoData(0x3B722B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 577 ] 
10:14:57: [ RdLbaNoData(0x3B722B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 578 ] 
10:14:57: [ RdLbaNoData(0x3B722B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 579 ] 
10:14:57: [ RdLbaNoData(0x3B722B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 580 ] 
10:14:57: [ RdLbaNoData(0x3B722BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 581 ] 
10:14:57: [ RdLbaNoData(0x3B722BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 582 ] 
10:14:57: [ RdLbaNoData(0x3B722BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 583 ] 
10:14:57: [ RdLbaNoData(0x3B722BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 584 ] 
10:14:57: [ RdLbaNoData(0x3B722BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 585 ] 
10:14:57: [ RdLbaNoData(0x3B722BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 586 ] 
10:14:57: [ RdLbaNoData(0x3B722C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 587 ] 
10:14:57: [ RdLbaNoData(0x3B722C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 588 ] 
10:14:57: [ RdLbaNoData(0x3B722C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 589 ] 
10:14:57: [ RdLbaNoData(0x3B722C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 590 ] 
10:14:57: [ RdLbaNoData(0x3B722C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 591 ] 
10:14:57: [ RdLbaNoData(0x3B722C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 592 ] 
10:14:57: [ RdLbaNoData(0x3B722C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 593 ] 
10:14:57: [ RdLbaNoData(0x3B722C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 594 ] 
10:14:57: [ RdLbaNoData(0x3B722C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 595 ] 
10:14:57: [ RdLbaNoData(0x3B722C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 596 ] 
10:14:57: [ RdLbaNoData(0x3B722CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 597 ] 
10:14:57: [ RdLbaNoData(0x3B722CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 598 ] 
10:14:57: [ RdLbaNoData(0x3B722CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 599 ] 
10:14:57: [ RdLbaNoData(0x3B722CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 600 ] 
10:14:57: [ RdLbaNoData(0x3B722CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 601 ] 
10:14:57: [ RdLbaNoData(0x3B722CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 602 ] 
10:14:57: [ RdLbaNoData(0x3B722D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 603 ] 
10:14:57: [ RdLbaNoData(0x3B722D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 604 ] 
10:14:57: [ RdLbaNoData(0x3B722D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 605 ] 
10:14:57: [ RdLbaNoData(0x3B722D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 606 ] 
10:14:57: [ RdLbaNoData(0x3B722D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 607 ] 
10:14:57: [ RdLbaNoData(0x3B722D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 608 ] 
10:14:57: [ RdLbaNoData(0x3B722D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 609 ] 
10:14:57: [ RdLbaNoData(0x3B722D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 610 ] 
10:14:57: [ RdLbaNoData(0x3B722D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 611 ] 
10:14:57: [ RdLbaNoData(0x3B722D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 612 ] 
10:14:57: [ RdLbaNoData(0x3B722DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 613 ] 
10:14:57: [ RdLbaNoData(0x3B722DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 614 ] 
10:14:57: [ RdLbaNoData(0x3B722DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 615 ] 
10:14:57: [ RdLbaNoData(0x3B722DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 616 ] 
10:14:57: [ RdLbaNoData(0x3B722DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 617 ] 
10:14:57: [ RdLbaNoData(0x3B722DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 618 ] 
10:14:57: [ RdLbaNoData(0x3B722E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 619 ] 
10:14:57: [ RdLbaNoData(0x3B722E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 620 ] 
10:14:57: [ RdLbaNoData(0x3B722E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 621 ] 
10:14:57: [ RdLbaNoData(0x3B722E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 622 ] 
10:14:57: [ RdLbaNoData(0x3B722E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 623 ] 
10:14:57: [ RdLbaNoData(0x3B722E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 624 ] 
10:14:57: [ RdLbaNoData(0x3B722E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 625 ] 
10:14:57: [ RdLbaNoData(0x3B722E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 626 ] 
10:14:57: [ RdLbaNoData(0x3B722E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 627 ] 
10:14:57: [ RdLbaNoData(0x3B722E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 628 ] 
10:14:57: [ RdLbaNoData(0x3B722EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 629 ] 
10:14:57: [ RdLbaNoData(0x3B722EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 630 ] 
10:14:57: [ RdLbaNoData(0x3B722EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 631 ] 
10:14:57: [ RdLbaNoData(0x3B722ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 632 ] 
10:14:57: [ RdLbaNoData(0x3B722EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 633 ] 
10:14:58: [ RdLbaNoData(0x3B722EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 634 ] 
10:14:58: [ RdLbaNoData(0x3B722F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 635 ] 
10:14:58: [ RdLbaNoData(0x3B722F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 636 ] 
10:14:58: [ RdLbaNoData(0x3B722F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 637 ] 
10:14:58: [ RdLbaNoData(0x3B722F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 638 ] 
10:14:58: [ RdLbaNoData(0x3B722F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 639 ] 
10:14:58: [ RdLbaNoData(0x3B722F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 640 ] 
10:14:58: [ RdLbaNoData(0x3B722F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 641 ] 
10:14:58: [ RdLbaNoData(0x3B722F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 642 ] 
10:14:58: [ RdLbaNoData(0x3B722F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 643 ] 
10:14:58: [ RdLbaNoData(0x3B722F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 644 ] 
10:14:58: [ RdLbaNoData(0x3B722FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 645 ] 
10:14:58: [ RdLbaNoData(0x3B722FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 646 ] 
10:14:58: [ RdLbaNoData(0x3B722FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 647 ] 
10:14:58: [ RdLbaNoData(0x3B722FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 648 ] 
10:14:58: [ RdLbaNoData(0x3B722FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 649 ] 
10:14:58: [ RdLbaNoData(0x3B722FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 650 ] 
10:14:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B721FF to EndLba:0x3B72300 with Constant Pattern 

10:14:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x3B723FA to EndLba:0x3B72402 with Constant Pattern
10:14:58: [ WrLbaNoData(0x3B72401, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 651 ] 
10:14:58: [ GetCardStatus() , Command count = 652 ] 
10:14:58: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :SingleWrite Failed from StartLba:0x3B72401 to EndLba:0x2 with Constant Pattern
10:14:58: [DVTCommonLib]### Exception_Details :Card Secure Read/Secure Write/Secure Erase/Secure Read MKB  argument out of range
10:14:58: [CH030202_WrRdWideBus] Failed as expected, OUT_OF_RANGE Error. 

10:14:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723FA to EndLba:0x3B72402 with Constant Pattern
10:14:58: [ RdLbaNoData(0x3B72401, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 653 ] 
10:14:58: [ GetCardStatus() , Command count = 654 ] 
10:14:58: [DVTCommonLib]### ReadWithFPGAPattern[ERROR] :SingleRead Failed from StartLba:0x3B72401 to EndLba:0x2 with Constant Pattern
10:14:58: [DVTCommonLib]### Exception_Details :Card Secure Read/Secure Write/Secure Erase/Secure Read MKB  argument out of range
10:14:58: [CH030202_WrRdWideBus] Failed as expected, OUT_OF_RANGE Error. 

10:14:58: [DVTCommonLib]### Erase :Erase API Called
10:14:58: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x3B71FFF with Blockcount:0x101
10:14:58: [ EraseLba(0x3B71FFF, 0x101) , Command count = 655 ] 
10:14:58: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x3B71FFF with Blockcount:0x101 

10:14:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71FFF to EndLba:0x3B72100 with Zero's Pattern
10:14:58: [ WrLbaNoData(0x3B71FFF, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 656 ] 
10:14:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71FFF to EndLba:0x3B72100 with Zero's Pattern 

10:14:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B71FFF to EndLba:0x3B72100 with Zero's Pattern
10:14:58: [ RdLbaNoData(0x3B71FFF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 657 ] 
10:14:58: [ RdLbaNoData(0x3B72000, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 658 ] 
10:14:58: [ RdLbaNoData(0x3B72001, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 659 ] 
10:14:58: [ RdLbaNoData(0x3B72002, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 660 ] 
10:14:58: [ RdLbaNoData(0x3B72003, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 661 ] 
10:14:58: [ RdLbaNoData(0x3B72004, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 662 ] 
10:14:58: [ RdLbaNoData(0x3B72005, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 663 ] 
10:14:58: [ RdLbaNoData(0x3B72006, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 664 ] 
10:14:58: [ RdLbaNoData(0x3B72007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 665 ] 
10:14:58: [ RdLbaNoData(0x3B72008, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 666 ] 
10:14:58: [ RdLbaNoData(0x3B72009, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 667 ] 
10:14:58: [ RdLbaNoData(0x3B7200A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 668 ] 
10:14:58: [ RdLbaNoData(0x3B7200B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 669 ] 
10:14:58: [ RdLbaNoData(0x3B7200C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 670 ] 
10:14:58: [ RdLbaNoData(0x3B7200D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 671 ] 
10:14:58: [ RdLbaNoData(0x3B7200E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 672 ] 
10:14:58: [ RdLbaNoData(0x3B7200F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 673 ] 
10:14:58: [ RdLbaNoData(0x3B72010, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 674 ] 
10:14:58: [ RdLbaNoData(0x3B72011, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 675 ] 
10:14:58: [ RdLbaNoData(0x3B72012, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 676 ] 
10:14:58: [ RdLbaNoData(0x3B72013, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 677 ] 
10:14:58: [ RdLbaNoData(0x3B72014, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 678 ] 
10:14:58: [ RdLbaNoData(0x3B72015, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 679 ] 
10:14:58: [ RdLbaNoData(0x3B72016, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 680 ] 
10:14:58: [ RdLbaNoData(0x3B72017, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 681 ] 
10:14:58: [ RdLbaNoData(0x3B72018, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 682 ] 
10:14:58: [ RdLbaNoData(0x3B72019, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 683 ] 
10:14:58: [ RdLbaNoData(0x3B7201A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 684 ] 
10:14:58: [ RdLbaNoData(0x3B7201B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 685 ] 
10:14:58: [ RdLbaNoData(0x3B7201C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 686 ] 
10:14:58: [ RdLbaNoData(0x3B7201D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 687 ] 
10:14:58: [ RdLbaNoData(0x3B7201E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 688 ] 
10:14:58: [ RdLbaNoData(0x3B7201F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 689 ] 
10:14:58: [ RdLbaNoData(0x3B72020, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 690 ] 
10:14:58: [ RdLbaNoData(0x3B72021, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 691 ] 
10:14:58: [ RdLbaNoData(0x3B72022, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 692 ] 
10:14:58: [ RdLbaNoData(0x3B72023, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 693 ] 
10:14:58: [ RdLbaNoData(0x3B72024, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 694 ] 
10:14:58: [ RdLbaNoData(0x3B72025, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 695 ] 
10:14:58: [ RdLbaNoData(0x3B72026, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 696 ] 
10:14:58: [ RdLbaNoData(0x3B72027, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 697 ] 
10:14:58: [ RdLbaNoData(0x3B72028, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 698 ] 
10:14:58: [ RdLbaNoData(0x3B72029, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 699 ] 
10:14:58: [ RdLbaNoData(0x3B7202A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 700 ] 
10:14:58: [ RdLbaNoData(0x3B7202B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 701 ] 
10:14:58: [ RdLbaNoData(0x3B7202C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 702 ] 
10:14:58: [ RdLbaNoData(0x3B7202D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 703 ] 
10:14:58: [ RdLbaNoData(0x3B7202E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 704 ] 
10:14:58: [ RdLbaNoData(0x3B7202F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 705 ] 
10:14:58: [ RdLbaNoData(0x3B72030, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 706 ] 
10:14:58: [ RdLbaNoData(0x3B72031, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 707 ] 
10:14:58: [ RdLbaNoData(0x3B72032, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 708 ] 
10:14:58: [ RdLbaNoData(0x3B72033, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 709 ] 
10:14:58: [ RdLbaNoData(0x3B72034, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 710 ] 
10:14:58: [ RdLbaNoData(0x3B72035, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 711 ] 
10:14:58: [ RdLbaNoData(0x3B72036, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 712 ] 
10:14:58: [ RdLbaNoData(0x3B72037, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 713 ] 
10:14:58: [ RdLbaNoData(0x3B72038, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 714 ] 
10:14:58: [ RdLbaNoData(0x3B72039, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 715 ] 
10:14:58: [ RdLbaNoData(0x3B7203A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 716 ] 
10:14:58: [ RdLbaNoData(0x3B7203B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 717 ] 
10:14:58: [ RdLbaNoData(0x3B7203C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 718 ] 
10:14:58: [ RdLbaNoData(0x3B7203D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 719 ] 
10:14:58: [ RdLbaNoData(0x3B7203E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 720 ] 
10:14:58: [ RdLbaNoData(0x3B7203F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 721 ] 
10:14:58: [ RdLbaNoData(0x3B72040, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 722 ] 
10:14:58: [ RdLbaNoData(0x3B72041, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 723 ] 
10:14:58: [ RdLbaNoData(0x3B72042, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 724 ] 
10:14:58: [ RdLbaNoData(0x3B72043, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 725 ] 
10:14:58: [ RdLbaNoData(0x3B72044, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 726 ] 
10:14:58: [ RdLbaNoData(0x3B72045, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 727 ] 
10:14:58: [ RdLbaNoData(0x3B72046, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 728 ] 
10:14:58: [ RdLbaNoData(0x3B72047, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 729 ] 
10:14:58: [ RdLbaNoData(0x3B72048, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 730 ] 
10:14:58: [ RdLbaNoData(0x3B72049, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 731 ] 
10:14:58: [ RdLbaNoData(0x3B7204A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 732 ] 
10:14:58: [ RdLbaNoData(0x3B7204B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 733 ] 
10:14:58: [ RdLbaNoData(0x3B7204C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 734 ] 
10:14:58: [ RdLbaNoData(0x3B7204D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 735 ] 
10:14:58: [ RdLbaNoData(0x3B7204E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 736 ] 
10:14:58: [ RdLbaNoData(0x3B7204F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 737 ] 
10:14:58: [ RdLbaNoData(0x3B72050, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 738 ] 
10:14:58: [ RdLbaNoData(0x3B72051, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 739 ] 
10:14:58: [ RdLbaNoData(0x3B72052, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 740 ] 
10:14:58: [ RdLbaNoData(0x3B72053, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 741 ] 
10:14:58: [ RdLbaNoData(0x3B72054, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 742 ] 
10:14:58: [ RdLbaNoData(0x3B72055, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 743 ] 
10:14:58: [ RdLbaNoData(0x3B72056, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 744 ] 
10:14:59: [ RdLbaNoData(0x3B72057, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 745 ] 
10:14:59: [ RdLbaNoData(0x3B72058, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 746 ] 
10:14:59: [ RdLbaNoData(0x3B72059, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 747 ] 
10:14:59: [ RdLbaNoData(0x3B7205A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 748 ] 
10:14:59: [ RdLbaNoData(0x3B7205B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 749 ] 
10:14:59: [ RdLbaNoData(0x3B7205C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 750 ] 
10:14:59: [ RdLbaNoData(0x3B7205D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 751 ] 
10:14:59: [ RdLbaNoData(0x3B7205E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 752 ] 
10:14:59: [ RdLbaNoData(0x3B7205F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 753 ] 
10:14:59: [ RdLbaNoData(0x3B72060, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 754 ] 
10:14:59: [ RdLbaNoData(0x3B72061, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 755 ] 
10:14:59: [ RdLbaNoData(0x3B72062, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 756 ] 
10:14:59: [ RdLbaNoData(0x3B72063, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 757 ] 
10:14:59: [ RdLbaNoData(0x3B72064, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 758 ] 
10:14:59: [ RdLbaNoData(0x3B72065, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 759 ] 
10:14:59: [ RdLbaNoData(0x3B72066, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 760 ] 
10:14:59: [ RdLbaNoData(0x3B72067, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 761 ] 
10:14:59: [ RdLbaNoData(0x3B72068, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 762 ] 
10:14:59: [ RdLbaNoData(0x3B72069, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 763 ] 
10:14:59: [ RdLbaNoData(0x3B7206A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 764 ] 
10:14:59: [ RdLbaNoData(0x3B7206B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 765 ] 
10:14:59: [ RdLbaNoData(0x3B7206C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 766 ] 
10:14:59: [ RdLbaNoData(0x3B7206D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 767 ] 
10:14:59: [ RdLbaNoData(0x3B7206E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 768 ] 
10:14:59: [ RdLbaNoData(0x3B7206F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 769 ] 
10:14:59: [ RdLbaNoData(0x3B72070, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 770 ] 
10:14:59: [ RdLbaNoData(0x3B72071, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 771 ] 
10:14:59: [ RdLbaNoData(0x3B72072, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 772 ] 
10:14:59: [ RdLbaNoData(0x3B72073, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 773 ] 
10:14:59: [ RdLbaNoData(0x3B72074, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 774 ] 
10:14:59: [ RdLbaNoData(0x3B72075, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 775 ] 
10:14:59: [ RdLbaNoData(0x3B72076, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 776 ] 
10:14:59: [ RdLbaNoData(0x3B72077, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 777 ] 
10:14:59: [ RdLbaNoData(0x3B72078, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 778 ] 
10:14:59: [ RdLbaNoData(0x3B72079, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 779 ] 
10:14:59: [ RdLbaNoData(0x3B7207A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 780 ] 
10:14:59: [ RdLbaNoData(0x3B7207B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 781 ] 
10:14:59: [ RdLbaNoData(0x3B7207C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 782 ] 
10:14:59: [ RdLbaNoData(0x3B7207D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 783 ] 
10:14:59: [ RdLbaNoData(0x3B7207E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 784 ] 
10:14:59: [ RdLbaNoData(0x3B7207F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 785 ] 
10:14:59: [ RdLbaNoData(0x3B72080, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 786 ] 
10:14:59: [ RdLbaNoData(0x3B72081, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 787 ] 
10:14:59: [ RdLbaNoData(0x3B72082, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 788 ] 
10:14:59: [ RdLbaNoData(0x3B72083, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 789 ] 
10:14:59: [ RdLbaNoData(0x3B72084, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 790 ] 
10:14:59: [ RdLbaNoData(0x3B72085, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 791 ] 
10:14:59: [ RdLbaNoData(0x3B72086, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 792 ] 
10:14:59: [ RdLbaNoData(0x3B72087, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 793 ] 
10:14:59: [ RdLbaNoData(0x3B72088, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 794 ] 
10:14:59: [ RdLbaNoData(0x3B72089, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 795 ] 
10:14:59: [ RdLbaNoData(0x3B7208A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 796 ] 
10:14:59: [ RdLbaNoData(0x3B7208B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 797 ] 
10:14:59: [ RdLbaNoData(0x3B7208C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 798 ] 
10:14:59: [ RdLbaNoData(0x3B7208D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 799 ] 
10:14:59: [ RdLbaNoData(0x3B7208E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 800 ] 
10:14:59: [ RdLbaNoData(0x3B7208F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 801 ] 
10:14:59: [ RdLbaNoData(0x3B72090, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 802 ] 
10:14:59: [ RdLbaNoData(0x3B72091, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 803 ] 
10:14:59: [ RdLbaNoData(0x3B72092, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 804 ] 
10:14:59: [ RdLbaNoData(0x3B72093, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 805 ] 
10:14:59: [ RdLbaNoData(0x3B72094, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 806 ] 
10:14:59: [ RdLbaNoData(0x3B72095, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 807 ] 
10:14:59: [ RdLbaNoData(0x3B72096, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 808 ] 
10:14:59: [ RdLbaNoData(0x3B72097, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 809 ] 
10:14:59: [ RdLbaNoData(0x3B72098, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 810 ] 
10:14:59: [ RdLbaNoData(0x3B72099, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 811 ] 
10:14:59: [ RdLbaNoData(0x3B7209A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 812 ] 
10:14:59: [ RdLbaNoData(0x3B7209B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 813 ] 
10:14:59: [ RdLbaNoData(0x3B7209C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 814 ] 
10:14:59: [ RdLbaNoData(0x3B7209D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 815 ] 
10:14:59: [ RdLbaNoData(0x3B7209E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 816 ] 
10:14:59: [ RdLbaNoData(0x3B7209F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 817 ] 
10:14:59: [ RdLbaNoData(0x3B720A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 818 ] 
10:14:59: [ RdLbaNoData(0x3B720A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 819 ] 
10:14:59: [ RdLbaNoData(0x3B720A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 820 ] 
10:14:59: [ RdLbaNoData(0x3B720A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 821 ] 
10:14:59: [ RdLbaNoData(0x3B720A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 822 ] 
10:14:59: [ RdLbaNoData(0x3B720A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 823 ] 
10:14:59: [ RdLbaNoData(0x3B720A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 824 ] 
10:14:59: [ RdLbaNoData(0x3B720A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 825 ] 
10:14:59: [ RdLbaNoData(0x3B720A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 826 ] 
10:14:59: [ RdLbaNoData(0x3B720A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 827 ] 
10:14:59: [ RdLbaNoData(0x3B720AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 828 ] 
10:14:59: [ RdLbaNoData(0x3B720AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 829 ] 
10:14:59: [ RdLbaNoData(0x3B720AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 830 ] 
10:14:59: [ RdLbaNoData(0x3B720AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 831 ] 
10:14:59: [ RdLbaNoData(0x3B720AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 832 ] 
10:14:59: [ RdLbaNoData(0x3B720AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 833 ] 
10:14:59: [ RdLbaNoData(0x3B720B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 834 ] 
10:14:59: [ RdLbaNoData(0x3B720B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 835 ] 
10:14:59: [ RdLbaNoData(0x3B720B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 836 ] 
10:14:59: [ RdLbaNoData(0x3B720B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 837 ] 
10:14:59: [ RdLbaNoData(0x3B720B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 838 ] 
10:14:59: [ RdLbaNoData(0x3B720B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 839 ] 
10:14:59: [ RdLbaNoData(0x3B720B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 840 ] 
10:14:59: [ RdLbaNoData(0x3B720B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 841 ] 
10:14:59: [ RdLbaNoData(0x3B720B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 842 ] 
10:14:59: [ RdLbaNoData(0x3B720B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 843 ] 
10:14:59: [ RdLbaNoData(0x3B720BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 844 ] 
10:14:59: [ RdLbaNoData(0x3B720BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 845 ] 
10:14:59: [ RdLbaNoData(0x3B720BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 846 ] 
10:14:59: [ RdLbaNoData(0x3B720BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 847 ] 
10:14:59: [ RdLbaNoData(0x3B720BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 848 ] 
10:14:59: [ RdLbaNoData(0x3B720BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 849 ] 
10:14:59: [ RdLbaNoData(0x3B720C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 850 ] 
10:14:59: [ RdLbaNoData(0x3B720C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 851 ] 
10:14:59: [ RdLbaNoData(0x3B720C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 852 ] 
10:14:59: [ RdLbaNoData(0x3B720C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 853 ] 
10:14:59: [ RdLbaNoData(0x3B720C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 854 ] 
10:14:59: [ RdLbaNoData(0x3B720C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 855 ] 
10:14:59: [ RdLbaNoData(0x3B720C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 856 ] 
10:14:59: [ RdLbaNoData(0x3B720C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 857 ] 
10:14:59: [ RdLbaNoData(0x3B720C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 858 ] 
10:14:59: [ RdLbaNoData(0x3B720C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 859 ] 
10:14:59: [ RdLbaNoData(0x3B720CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 860 ] 
10:14:59: [ RdLbaNoData(0x3B720CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 861 ] 
10:14:59: [ RdLbaNoData(0x3B720CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 862 ] 
10:14:59: [ RdLbaNoData(0x3B720CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 863 ] 
10:14:59: [ RdLbaNoData(0x3B720CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 864 ] 
10:14:59: [ RdLbaNoData(0x3B720CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 865 ] 
10:14:59: [ RdLbaNoData(0x3B720D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 866 ] 
10:14:59: [ RdLbaNoData(0x3B720D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 867 ] 
10:14:59: [ RdLbaNoData(0x3B720D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 868 ] 
10:14:59: [ RdLbaNoData(0x3B720D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 869 ] 
10:15:00: [ RdLbaNoData(0x3B720D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 870 ] 
10:15:00: [ RdLbaNoData(0x3B720D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 871 ] 
10:15:00: [ RdLbaNoData(0x3B720D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 872 ] 
10:15:00: [ RdLbaNoData(0x3B720D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 873 ] 
10:15:00: [ RdLbaNoData(0x3B720D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 874 ] 
10:15:00: [ RdLbaNoData(0x3B720D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 875 ] 
10:15:00: [ RdLbaNoData(0x3B720DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 876 ] 
10:15:00: [ RdLbaNoData(0x3B720DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 877 ] 
10:15:00: [ RdLbaNoData(0x3B720DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 878 ] 
10:15:00: [ RdLbaNoData(0x3B720DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 879 ] 
10:15:00: [ RdLbaNoData(0x3B720DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 880 ] 
10:15:00: [ RdLbaNoData(0x3B720DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 881 ] 
10:15:00: [ RdLbaNoData(0x3B720E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 882 ] 
10:15:00: [ RdLbaNoData(0x3B720E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 883 ] 
10:15:00: [ RdLbaNoData(0x3B720E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 884 ] 
10:15:00: [ RdLbaNoData(0x3B720E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 885 ] 
10:15:00: [ RdLbaNoData(0x3B720E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 886 ] 
10:15:00: [ RdLbaNoData(0x3B720E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 887 ] 
10:15:00: [ RdLbaNoData(0x3B720E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 888 ] 
10:15:00: [ RdLbaNoData(0x3B720E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 889 ] 
10:15:00: [ RdLbaNoData(0x3B720E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 890 ] 
10:15:00: [ RdLbaNoData(0x3B720E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 891 ] 
10:15:00: [ RdLbaNoData(0x3B720EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 892 ] 
10:15:00: [ RdLbaNoData(0x3B720EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 893 ] 
10:15:00: [ RdLbaNoData(0x3B720EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 894 ] 
10:15:00: [ RdLbaNoData(0x3B720ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 895 ] 
10:15:00: [ RdLbaNoData(0x3B720EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 896 ] 
10:15:00: [ RdLbaNoData(0x3B720EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 897 ] 
10:15:00: [ RdLbaNoData(0x3B720F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 898 ] 
10:15:00: [ RdLbaNoData(0x3B720F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 899 ] 
10:15:00: [ RdLbaNoData(0x3B720F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 900 ] 
10:15:00: [ RdLbaNoData(0x3B720F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 901 ] 
10:15:00: [ RdLbaNoData(0x3B720F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 902 ] 
10:15:00: [ RdLbaNoData(0x3B720F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 903 ] 
10:15:00: [ RdLbaNoData(0x3B720F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 904 ] 
10:15:00: [ RdLbaNoData(0x3B720F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 905 ] 
10:15:00: [ RdLbaNoData(0x3B720F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 906 ] 
10:15:00: [ RdLbaNoData(0x3B720F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 907 ] 
10:15:00: [ RdLbaNoData(0x3B720FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 908 ] 
10:15:00: [ RdLbaNoData(0x3B720FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 909 ] 
10:15:00: [ RdLbaNoData(0x3B720FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 910 ] 
10:15:00: [ RdLbaNoData(0x3B720FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 911 ] 
10:15:00: [ RdLbaNoData(0x3B720FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 912 ] 
10:15:00: [ RdLbaNoData(0x3B720FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 913 ] 
10:15:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B71FFF to EndLba:0x3B72100 with Zero's Pattern 

10:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064125A0>, <py_sfcl.CommandDataDefinition object at 0x06420030>) , Command count = 914 ] 
10:15:00: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
10:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064125D0>, <py_sfcl.CommandDataDefinition object at 0x06420090>) , Command count = 915 ] 
10:15:00: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
10:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06412600>, <py_sfcl.CommandDataDefinition object at 0x064200F0>) , Command count = 916 ] 
10:15:10: [ GetCardStatus() , Command count = 917 ] 
10:15:10: CMD38[ ERASE_COMMAND ] Erasing the Card......
10:15:10: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
10:15:40: CMD38[ ERASE_COMMAND ] Passed with R1 type response
10:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06405330>, <py_sfcl.CommandDataDefinition object at 0x06412660>) , Command count = 918 ] 
10:15:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
10:15:40: Failed Running script <module 'CH030202_WrRdWideBus' from 'C:\Program Files\SanDisk\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_3_System_concept\CH030202_WrRdWideBus.py'> with error 
TestFailedError:                                   
   [CH030202_WrRdWideBus][ERROR]##### Test failed,ERASE_PARAM Error not occurred, Not expected
 
10:15:40: ########################################
10:15:40: ########################################
10:15:40: The Script <class 'CH0301_CallAllChapter3Scripts.CallAllChapter3Scripts'> has 1 error on running 
10:15:40: ########################################

2016-11-22 10:15:40: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_3_System_concept\CH0301_CallAllChapter3Scripts.py", line 107, in RunTestProcedure
     self.__CallAllChapter3ScriptsObj.Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_3_System_concept\CH0301_CallAllChapter3Scripts.py", line 79, in Run
     raise TestError.TestFailedError("The Script %s has %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'CH<NUM>_CallAllChapter<NUM>Scripts.CallAllChapter<NUM>Scripts'> has <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH0301_CallAllChapter3Scripts.CallAllChapter3Scripts'> has 1 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   899 RdLbaNoData(3B720F1, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.329         7.8   read=  0, write=  0                 0       
   900 RdLbaNoData(3B720F2, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.337         7.8   read=  0, write=  0                 0       
   901 RdLbaNoData(3B720F3, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.345         8.0   read=  0, write=  0                 0       
   902 RdLbaNoData(3B720F4, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.353         7.9   read=  0, write=  0                 0       
   903 RdLbaNoData(3B720F5, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.361         7.8   read=  0, write=  0                 0       
   904 RdLbaNoData(3B720F6, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.369         7.9   read=  0, write=  0                 0       
   905 RdLbaNoData(3B720F7, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.377         7.9   read=  0, write=  0                 0       
   906 RdLbaNoData(3B720F8, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.385         8.2   read=  0, write=  0                 0       
   907 RdLbaNoData(3B720F9, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.393         7.5   read=  0, write=  0                 0       
   908 RdLbaNoData(3B720FA, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.401         7.8   read=  0, write=  0                 0       
   909 RdLbaNoData(3B720FB, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.409         7.8   read=  0, write=  0                 0       
   910 RdLbaNoData(3B720FC, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.417         7.9   read=  0, write=  0                 0       
   911 RdLbaNoData(3B720FD, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.425         7.9   read=  0, write=  0                 0       
   912 RdLbaNoData(3B720FE, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.433         7.8   read=  0, write=  0                 0       
   913 RdLbaNoData(3B720FF, 1, <400/200, Arb>, py_sfcl.Pattern.ALL_ZERO, T, F       44.441         7.9   read=  0, write=  0                 0       
   914 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0640CE40>, <py       44.449         3.4   read=  0, write=  0                 0       
   915 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064125A0>, <py       44.453         3.4   read=  0, write=  0                 0       
   916 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064125D0>, <py       44.456     10419.6   read=  0, write=  0                 25      
   917 GetCardStatus()                                                              54.876         4.5   read=  0, write=  0                 'Obj'   
   918 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06412600>, <py       84.883         3.6   read=  0, write=  0                 0       

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   -----------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:01:24


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

   250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064125D0>, <py           NA 10419.629269   NA                                  37      
    99 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  206.163765   NA                                  3254747136
   116 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  206.118186   NA                                  3254747136
    82 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  196.117613   NA                                  3254747136
    52 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  195.936805   NA                                  3254747136
    46 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x           NA  194.664208   NA                                  3254747136
    47 CardInit()                                                                       NA  144.337456   NA                                  0       
   135 RdLbaNoData(0x3B72401, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,           NA  107.767491   NA                                  3759407135
   250 RdLbaNoData(0x3B72401, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,           NA  106.135995   NA                                  3759407135
    44 SwitchHostVoltageRegion(False)                                                   NA  103.550655   NA                                  0       
     9 GetPhysicalChipsInfo()                                                           NA   45.526139   NA                                  (<py_sfcl.PhysicalChipInfo object at 0x0545E800>,)
    41 GetPhysicalChipsInfo()                                                           NA   44.684582   NA                                  (<py_sfcl.PhysicalChipInfo object at 0x05448D50>,)
    80 SetVolt(<py_sfcl.SDVoltage object at 0x06405A50>, 0x0, False)                    NA   28.668452   NA                                  0       
   114 SetVolt(<py_sfcl.SDVoltage object at 0x0640C9C0>, 0x0, False)                    NA   28.640983   NA                                  0       
    50 SetVolt(<py_sfcl.SDVoltage object at 0x063FEE10>, 0x0, False)                    NA   28.622570   NA                                  0       
    97 SetVolt(<py_sfcl.SDVoltage object at 0x0640C240>, 0x0, False)                    NA   28.584236   NA                                  0       
    94 WrLbaNoData(0x500, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA   26.753519   NA                                  0       
    12 GetFileSize(0x16)                                                                NA   22.777558   NA                                  None    
    67 WrLbaNoData(0x100, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMEN           NA   22.759145   NA                                  0       
   250 EraseLba(0x3B71FFF, 0x101)                                                       NA   22.502271   NA                                  0       

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 917


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:01:25.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH0301_CallAllChapter3Scripts.CallAllChapter3Scripts'> has 1 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

